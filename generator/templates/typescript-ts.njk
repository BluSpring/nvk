declare var VkInout: { $: number; }
export interface VkInout { $: number; }

declare var VkInoutAddress: { $: bigint; }
export interface VkInoutAddress { $: bigint; }

type BigUint64Array = Float32Array
declare const BigUint64Array: typeof Float32Array

declare global {

  interface ObjectConstructor {
    assign(...objects: Object[]): Object;
  }

  var VkInout: { $: number | boolean; }
  interface VkInout { $: number | boolean; }

  var VkInoutAddress: { $: bigint; }
  interface VkInoutAddress { $: bigint; }

  {% for enu in enums %}
  /**
   * {{ getObjectDescription(enu) | safe }}
   {% for child in enu.children -%}
   {{ processEnumMemberDescriptions(enu, child) | safe }}
   {% endfor -%}
   */
  enum {{ enu.name }} {
    {% for child in enu.children -%}
    {{ child.name }},
    {% endfor %}
  }

  {% for child in enu.children -%}
  const {{ child.name }}: {{ enu.name }};
  {% endfor %}

  {% endfor %}

  {% for name in includes -%}
  {%- if isHandleInclude(name) == true -%}

  {{ getObjectDocumentation(name) | safe }}
  interface {{ name | safe }} {

    /**
     * Memory reference to the original vulkan handle.
     */
    address: bigint;

  }

  interface {{ name | safe }}Constructor {
    readonly prototype: {{ name | safe }};
    new(): {{ name | safe }};

  }

  var {{ name | safe }}: {{ name | safe }}Constructor;

  {% endif -%}
  {% endfor %}

  {% for name in includes -%}
  {%- if isStructInclude(name) == true -%}

  {{ getObjectDocumentation(name) | safe }}
  interface {{ name | safe }} {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    {{ processStructMembers(name, false) | safe }}

  }

  interface {{ name | safe }}Initializer {
    {{ processStructMembers(name, true) | safe }}
  }

  interface {{ name | safe }}Constructor {
    readonly prototype: {{ name | safe }};
    new(param?: {{ name | safe }}Initializer | null): {{ name | safe }};

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var {{ name | safe }}: {{ name | safe }}Constructor;

  {% endif %}
  {% endfor %}

  {% for call in calls -%}
  {{ processCall(call) | safe }}
  {% endfor %}

  function createV8ArrayBufferFromMemory(
    addr: bigint,
    size: number
  ): ArrayBuffer;

  function VK_MAKE_VERSION(
    major: number,
    minor: number,
    patch: number
  ): number;

  function VK_VERSION_MAJOR(
    major: number
  ): number;

  function VK_VERSION_MINOR(
    minor: number
  ): number;

  function VK_VERSION_PATCH(
    patch: number
  ): number;

  function vkUseDevice(
    pDevice: VkDevice
  ): void;

  function vkUseInstance(
    pInstance: VkInstance
  ): void;

  var VK_API_VERSION_1_0: number;

  interface ResizeEvent {
    width: number;
    height: number;
  }
  interface FocusEvent {
    focused: boolean;
  }
  interface CloseEvent {

  }
  interface KeydownEvent {
    keyCode: number;
  }
  interface KeyupEvent {
    keyCode: number;
  }
  interface MousemoveEvent {
    x: number;
    y: number;
    movementX: number;
    movementY: number;
  }
  interface MousewheelEvent {
    x: number;
    y: number;
    deltaX: number;
    deltaY: number;
  }
  interface MousedownEvent {
    x: number;
    y: number;
    button: number;
  }
  interface MouseupEvent {
    x: number;
    y: number;
    button: number;
  }
  interface DropEvent {
    paths: string[];
  }

  interface VulkanWindowInitializer {
    width?: number;
    height?: number;
    title?: string;
  }

  var VulkanWindow: {
    prototype: VulkanWindow;
    new(param?: VulkanWindowInitializer | null): VulkanWindow;
    width: number;
    height: number;
    frameBufferWidth: number;
    frameBufferHeight: number;
    title: string;
    pollEvents(): void;
    focus(): void;
    close(): void;
    shouldClose(): boolean;
    createSurface(instance: VkInstance | null, pAllocator: null, surface: VkSurfaceKHR | null): number;
    getRequiredInstanceExtensions(): string[];
    onresize: ((ev: ResizeEvent) => any) | null;
    onfocus: ((ev: FocusEvent) => any) | null;
    onclose: ((ev: CloseEvent) => any) | null;
    onkeydown: ((ev: KeydownEvent) => any) | null;
    onkeyup: ((ev: KeyupEvent) => any) | null;
    onmousemove: ((ev: MousemoveEvent) => any) | null;
    onmousewheel: ((ev: MousewheelEvent) => any) | null;
    onmousedown: ((ev: MousedownEvent) => any) | null;
    onmouseup: ((ev: MouseupEvent) => any) | null;
    ondrop: ((ev: DropEvent) => any) | null;
  }

  interface VulkanWindow {
    width: number;
    height: number;
    frameBufferWidth: number;
    frameBufferHeight: number;
    title: string;
    pollEvents(): void;
    focus(): void;
    close(): void;
    shouldClose(): boolean;
    createSurface(instance: VkInstance | null, pAllocator: null, surface: VkSurfaceKHR | null): number;
    getRequiredInstanceExtensions(): string[];
    onresize: ((ev: ResizeEvent) => any) | null;
    onfocus: ((ev: FocusEvent) => any) | null;
    onclose: ((ev: CloseEvent) => any) | null;
    onkeydown: ((ev: KeydownEvent) => any) | null;
    onkeyup: ((ev: KeyupEvent) => any) | null;
    onmousemove: ((ev: MousemoveEvent) => any) | null;
    onmousewheel: ((ev: MousewheelEvent) => any) | null;
    onmousedown: ((ev: MousedownEvent) => any) | null;
    onmouseup: ((ev: MouseupEvent) => any) | null;
    ondrop: ((ev: DropEvent) => any) | null;
  }

}
