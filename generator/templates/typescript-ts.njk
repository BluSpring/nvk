// temporary esnext.bigint fix
type BigInt = number
declare const BigInt: typeof Number

type BigUint64Array = Float32Array
declare const BigUint64Array: typeof Float32Array

declare var VkInout: { $: number; }
export interface VkInout { $: number; }

declare var VkInoutAddress: { $: BigInt; }
export interface VkInoutAddress { $: BigInt; }

/** #### ENUMS #### **/
{% for enu in enums %}
/** ## {{ enu.name }} ## */
export enum {{ enu.name }} {
  {% for child in enu.children -%}
  {{ child.name }},
  {% endfor %}
}
{% endfor %}

/** #### HANDLES #### **/
{% for name in includes -%}
{%- if isHandleInclude(name) == true -%}

/** ## {{ name | safe }} ## */
interface {{ name | safe }} {}

declare var {{ name | safe }}: {
  prototype: {{ name | safe }};
  new(): {{ name | safe }};
}

export interface {{ name | safe }} {}

{% endif -%}
{% endfor %}

/** #### STRUCTS #### **/
{% for name in includes -%}
{%- if isStructInclude(name) == true -%}

/** ## {{ name | safe }} ## */
interface {{ name | safe }}Initializer {
{{ processStructMembers(name, true) | safe }}
}

declare var {{ name | safe }}: {
  prototype: {{ name | safe }};
  new(param?: {{ name | safe }}Initializer | null): {{ name | safe }};
{{ processStructMembers(name, false) | safe }}
}

export interface {{ name | safe }} {
{{ processStructMembers(name, false) | safe }}
}

{% endif %}
{% endfor %}

/** #### CALLS #### **/
{% for call in calls -%}
{{ processCall(call) | safe }}
{% endfor %}

/** #### HARDCODED #### **/
declare function createV8ArrayBufferFromMemory(
  addr: BigInt,
  size: number
): ArrayBuffer;

declare function VK_MAKE_VERSION(
  major: number,
  minor: number,
  patch: number
): number;

declare function VK_VERSION_MAJOR(
  major: number
): number;

declare function VK_VERSION_MINOR(
  minor: number
): number;

declare function VK_VERSION_PATCH(
  patch: number
): number;

declare function vkUseDevice(
  pDevice: VkDevice
): void;

declare function vkUseInstance(
  pInstance: VkInstance
): void;

declare var VK_API_VERSION_1_0: number;

/** #### VULKANWINDOW #### */

declare interface ResizeEvent {
  width: number;
  height: number;
}
declare interface FocusEvent {
  focused: boolean;
}
declare interface CloseEvent {

}
declare interface KeydownEvent {
  keyCode: number;
}
declare interface KeyupEvent {
  keyCode: number;
}
declare interface MousemoveEvent {
  x: number;
  y: number;
  movementX: number;
  movementY: number;
}
declare interface MousewheelEvent {
  x: number;
  y: number;
  deltaX: number;
  deltaY: number;
}
declare interface MousedownEvent {
  x: number;
  y: number;
  button: number;
}
declare interface MouseupEvent {
  x: number;
  y: number;
  button: number;
}
declare interface DropEvent {
  paths: string[];
}

interface VulkanWindowInitializer {
  width?: number;
  height?: number;
  title?: string;
}

declare var VulkanWindow: {
  prototype: VulkanWindow;
  new(param?: VulkanWindowInitializer | null): VulkanWindow;
  width: number;
  height: number;
  title: string;
  pollEvents(): void;
  focus(): void;
  close(): void;
  shouldClose(): boolean;
  createSurface(instance: VkInstance | null, pAllocator: null, surface: VkSurfaceKHR | null): number;
  getRequiredInstanceExtensions(): string[];
  onresize: ((ev: ResizeEvent) => any) | null;
  onfocus: ((ev: FocusEvent) => any) | null;
  onclose: ((ev: CloseEvent) => any) | null;
  onkeydown: ((ev: KeydownEvent) => any) | null;
  onkeyup: ((ev: KeyupEvent) => any) | null;
  onmousemove: ((ev: MousemoveEvent) => any) | null;
  onmousewheel: ((ev: MousewheelEvent) => any) | null;
  onmousedown: ((ev: MousedownEvent) => any) | null;
  onmouseup: ((ev: MouseupEvent) => any) | null;
  ondrop: ((ev: DropEvent) => any) | null;
}

export interface VulkanWindow {
  width: number;
  height: number;
  title: string;
  pollEvents(): void;
  focus(): void;
  close(): void;
  shouldClose(): boolean;
  createSurface(instance: VkInstance | null, pAllocator: null, surface: VkSurfaceKHR | null): number;
  getRequiredInstanceExtensions(): string[];
  onresize: ((ev: ResizeEvent) => any) | null;
  onfocus: ((ev: FocusEvent) => any) | null;
  onclose: ((ev: CloseEvent) => any) | null;
  onkeydown: ((ev: KeydownEvent) => any) | null;
  onkeyup: ((ev: KeyupEvent) => any) | null;
  onmousemove: ((ev: MousemoveEvent) => any) | null;
  onmousewheel: ((ev: MousewheelEvent) => any) | null;
  onmousedown: ((ev: MousedownEvent) => any) | null;
  onmouseup: ((ev: MouseupEvent) => any) | null;
  ondrop: ((ev: DropEvent) => any) | null;
}
