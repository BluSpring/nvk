//#include "{{ handle_name }}.h"

Napi::FunctionReference _{{ handle_name }}::constructor;

_{{ handle_name }}::_{{ handle_name }}(const Napi::CallbackInfo& info) : Napi::ObjectWrap<_{{ handle_name }}>(info) {
  Napi::Env env = info.Env();
  if (!info.IsConstructCall()) Napi::Error::New(env, "{{ handle_name }} constructor cannot be invoked without 'new'");
}

_{{ handle_name }}::~_{{ handle_name }}() {}

Napi::Object _{{ handle_name }}::Initialize(Napi::Env env, Napi::Object exports) {
  Napi::HandleScope scope(env);

  Napi::Function func = DefineClass(env, "{{ handle_name }}", {
    InstanceAccessor(
      "address",
      &_{{ handle_name }}::Getaddress,
      nullptr,
      napi_default
    ),
  });

  constructor = Napi::Persistent(func);

  constructor.SuppressDestruct();
  exports.Set("{{ handle_name }}", func);
  return exports;
}

Napi::Value _{{ handle_name }}::Getaddress(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  void* addr = reinterpret_cast<void *>(&this->instance);
  Napi::BigInt out = Napi::BigInt::New(env, (int64_t) addr);
  return out;
}
