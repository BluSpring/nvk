Napi::Value MemoryLayouts(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  Napi::Object out = Napi::Object::New(env);

  {% for struct in structs -%}
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof({{ struct.name }})));
    {% for member in struct.children -%}
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof({{ struct.name }}, {{ member.name }});
      uint32_t byteLength = sizeof({{ struct.name }}::{{ member.name }});
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "{{ member.name }}"), obj);
    }
    {% endfor %}
    out.Set(Napi::String::New(env, "{{ struct.name }}"), structure);
  }
  {% endfor %}

  return out;
}

