
Napi::FunctionReference _{{ struct_name }}::constructor;

_{{ struct_name }}::_{{ struct_name }}(const Napi::CallbackInfo& info) : Napi::ObjectWrap<_{{ struct_name }}>(info) {
  Napi::Env env = info.Env();
  if (info.IsConstructCall()) {
    {{ processMemberAutosType(struct) | safe }}
    {% for member in members -%}
    {%- if isIgnoreableType(member) != true -%}
    {%- if isHeaderHeapVector(member) == true -%}
    {{ processHeapVectorAllocator(member) | safe }}
    {% endif -%}
    {% endif -%}
    {% endfor %}
    if (info[0].IsObject()) {
      Napi::Object obj = info[0].As<Napi::Object>();
      {% for member in members %}
      {%- if isIgnoreableType(member) != true -%}
      {%- if isFillableMember(struct, member) == true -%}
      Napi::String sAccess{{ loop.index0 }} = Napi::String::New(env, "{{ member.name }}");
      {% endif -%}
      {% endif -%}
      {% endfor -%}
      {% for member in members %}
      {%- if isIgnoreableType(member) != true -%}
      {%- if isFillableMember(struct, member) == true -%}
      if (obj.Has(sAccess{{ loop.index0 }})) this->Set{{ member.name }}(info, obj.Get(sAccess{{ loop.index0 }}));
      {% endif -%}
      {% endif -%}
      {% endfor %}
    } else {
      Napi::Error::New(env, "{{ struct_name }} constructor cannot be invoked without 'new'");
    }
  }
}

_{{ struct_name }}::~_{{ struct_name }}() {
  {% for member in members -%}
  {%- if isIgnoreableType(member) != true -%}
  {%- if isHeaderHeapVector(member) == true -%}
  {{ processHeapVectorDeallocator(member) | safe }}
  {% endif -%}
  {{ processPersistentDeallocator(member) | safe }}
  {% endif -%}
  {% endfor %}
}

Napi::Object _{{ struct_name }}::Initialize(Napi::Env env, Napi::Object exports) {
  Napi::HandleScope scope(env);

  Napi::Function func = DefineClass(env, "{{ struct_name }}", {
    InstanceAccessor(
      "memoryBuffer",
      &_{{ struct_name }}::GetmemoryBuffer,
      nullptr,
      napi_enumerable
    ),
    StaticAccessor(
      "memoryLayout",
      &_{{ struct_name }}::GetmemoryLayout,
      nullptr,
      napi_enumerable
    ),
    {% for member in members -%}
    {%- if isIgnoreableType(member) != true -%}
    {{- processSourceMemberAccessor(struct, member) | safe -}}
    {% endif -%}
    {% endfor %}
  });

  constructor = Napi::Persistent(func);

  constructor.SuppressDestruct();
  exports.Set("{{ struct_name }}", func);
  return exports;
}

Napi::Value _{{ struct_name }}::GetmemoryBuffer(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  void * addr = reinterpret_cast<void *>(&this->instance);
  uint32_t size = sizeof(this->instance);
  Napi::ArrayBuffer buffer = Napi::ArrayBuffer::New(
    env,
    addr,
    size
  );
  return buffer;
}

Napi::Value _{{ struct_name }}::GetmemoryLayout(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  Napi::Object out = Napi::Object::New(env);
  {% for member in members -%}
  {%- if isIgnoreableType(member) != true %}
  {
    Napi::Object obj = Napi::Object::New(env);
    uint32_t byteOffset = ((size_t)&((({{ struct.name }} *)0)->{{ member.name }}));
    uint32_t byteLength = sizeof((({{ struct.name }} *)0)->{{ member.name }});
    obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
    obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
    out.Set(Napi::String::New(env, "{{ member.name }}"), obj);
  }
  {%- endif -%}
  {%- endfor %}
  return out;
}

bool _{{ struct_name }}::flush() {
  _{{ struct_name }} *self = this;
  {% for member in members -%}
  {%- if isIgnoreableType(member) != true -%}
  {%- if isFlushableMember(member) == true -%}
  if (!(self->{{ member.name }}.IsEmpty())) {
    Napi::Value value = self->{{ member.name }}.Value();
    {{ processFlushSourceSetter(struct, member) | safe }}
  }
  {%- endif -%}
  {%- endif -%}
  {%- endfor %}
  return true;
}

{% for member in members -%}
{%- if isIgnoreableType(member) != true -%}
// {{ member.name }}
Napi::Value _{{ struct_name }}::Get{{ member.name }}(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  {{- processSourceGetter(struct, member) | safe }}
}
{%- if isFillableMember(struct, member) == true -%}
void _{{ struct_name }}::Set{{ member.name }}(const Napi::CallbackInfo& info, const Napi::Value& value) {
  Napi::Env env = info.Env();
  {{- processSourceSetter(struct, member) | safe }}
}
{%- endif -%}
{%- endif -%}
{% endfor -%}