#include "utils.h"
{{- processSourceIncludes(struct) | safe }}
#include "{{ struct_name }}.h"

Nan::Persistent<v8::FunctionTemplate> _{{ struct_name }}::constructor;

_{{ struct_name }}::_{{ struct_name }}() {
  {{ processMemberAutosType(struct) | safe }}
  {% for member in members -%}
  {%- if isIgnoreableType(member) != true -%}
  {%- if isHeaderHeapVector(member) == true -%}
  {{ processHeapVectorAllocator(member) | safe }}
  {% endif -%}
  {% endif -%}
  {% endfor %}
}

_{{ struct_name }}::~_{{ struct_name }}() {
  //printf("{{ struct_name }} deconstructed!!\n");
  {% for member in members -%}
  {%- if isIgnoreableType(member) != true -%}
  {%- if isHeaderHeapVector(member) == true -%}
  {{ processHeapVectorDeallocator(member) | safe }}
  {% endif -%}
  {{ processPersistentDeallocator(member) | safe }}
  {% endif -%}
  {% endfor %}
}

void _{{ struct_name }}::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_{{ struct_name }}::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("{{ struct_name }}").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  {% for member in members -%}
  {%- if isIgnoreableType(member) != true -%}
  {{- processSourceMemberAccessor(struct, member) | safe -}}
  {% endif -%}
  {% endfor %}
  Nan::Set(target, Nan::New("{{ struct_name }}").ToLocalChecked(), ctor->GetFunction());
}

bool _{{ struct_name }}::flush() {
  _{{ struct_name }} *self = this;
  {% for member in members -%}
  {%- if isIgnoreableType(member) != true -%}
  {%- if isFlushableMember(member) == true -%}
  if (!(self->{{ member.name }}.IsEmpty())) {
    v8::Local<v8::Value> value = Nan::New(self->{{ member.name }});
    {{ processFlushSourceSetter(struct, member) | safe }}
  }
  {%- endif -%}
  {%- endif -%}
  {%- endfor %}
  return true;
}

NAN_METHOD(_{{ struct_name }}::New) {
  if (info.IsConstructCall()) {
    _{{ struct_name }}* self = new _{{ struct_name }}();
    self->Wrap(info.Holder());
    {% if isStructReturnedOnly(struct) != true %}
    if (info[0]->IsObject()) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(info[0]).ToLocalChecked();
      {% for member in members %}
      {%- if isIgnoreableType(member) != true -%}
      v8::Local<v8::String> sAccess{{ loop.index0 }} = Nan::New("{{ member.name }}").ToLocalChecked();
      {% endif -%}
      {% endfor -%}

      {% for member in members %}
      {%- if isIgnoreableType(member) != true -%}
      if (obj->Has(sAccess{{ loop.index0 }})) info.This()->Set(sAccess{{ loop.index0 }}, obj->Get(sAccess{{ loop.index0 }}));
      {% endif -%}
      {% endfor %}
    }
    {% endif %}
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("{{ struct_name }} constructor cannot be invoked without 'new'");
  }
};

{% for member in members -%}
{%- if isIgnoreableType(member) != true -%}
// {{ member.name }}
NAN_GETTER(_{{ struct_name }}::Get{{ member.name }}) {
  _{{ struct_name }} *self = Nan::ObjectWrap::Unwrap<_{{ struct_name }}>(info.This());
  {{- processSourceGetter(struct, member) | safe }}
}
{%- if isStructReturnedOnly(struct) != true -%}
NAN_SETTER(_{{ struct_name }}::Set{{ member.name }}) {
  _{{ struct_name }} *self = Nan::ObjectWrap::Unwrap<_{{ struct_name }}>(info.This());
  {{- processSourceSetter(struct, member) | safe }}
}
{%- endif -%}
{%- endif -%}
{% endfor -%}