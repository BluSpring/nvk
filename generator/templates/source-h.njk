#ifndef __SOURCE__
#define __SOURCE__

#define NAPI_EXPERIMENTAL
#include <napi.h>

#define GLFW_INCLUDE_VULKAN
#include <GLFW/glfw3.h>

#define GLFW_EXPOSE_NATIVE_WIN32
#include <GLFW/glfw3native.h>

#define VK_USE_PLATFORM_WIN32_KHR
#include <vulkan/vulkan_win32.h>

#include "utils.h"

#include <map>
#include <string>

std::map<std::string, VkStructureType> constructor2sType = {
  {% for struct in structs -%}
  {%- if struct.sType -%}
  { "{{ struct.name }}", {{ struct.sType }} },
  {% endif -%}
  {% endfor %}
};

void * DynamicObjectUnwrapInstance(v8::Local<v8::Object> obj) {
  std::string constructorName = *(Nan::Utf8String(obj->GetConstructorName()));
  VkStructureType sType = constructor2sType.at(constructorName);
  switch (sType) {
    {% for struct in structs -%}
    {%- if struct.sType -%}
    case {{ struct.sType }}: return (void *) &Nan::ObjectWrap::Unwrap<_{{ struct.name }}>(obj)->instance;
    {% endif -%}
    {% endfor %}
  };
  Nan::ThrowRangeError("Dynamic Object Unwrap failed! Invalid constructor: '" + constructorName + "'");
  return -1;
}



#endif
