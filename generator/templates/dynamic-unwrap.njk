#ifndef __DYN_UNWRAP__
#define __DYN_UNWRAP__

#define NAPI_EXPERIMENTAL
#include <napi.h>
#include "source.h"

#include <map>
#include <string>

static const std::map<std::string, VkStructureType> constructor2sType = {
  {% for struct in structs -%}
  {%- if struct.sType -%}
  { "{{ struct.name }}", {{ struct.sType }} },
  {% endif -%}
  {% endfor %}
};

inline VkStructureType GetStructureTypeFromObject(Napi::Object obj) {
  /*std::string constructorName = std::string(*Nan::Utf8String(obj->GetConstructorName()));
  auto it = constructor2sType.find(constructorName);
  if (it == constructor2sType.end()) return (VkStructureType) -1;
  VkStructureType sType = it->second;*/
  if (!obj.Has("sType")) Napi::TypeError::New(obj.Env(), "Failed to resolve structure type, 'sType' property is missing").ThrowAsJavaScriptException();
  VkStructureType sType = static_cast<VkStructureType>(obj.Get("sType").As<Napi::Number>().Int32Value());
  return sType;
}

bool IsValidStructureObject(Napi::Object obj) {
  return GetStructureTypeFromObject(obj) > -1;
}

void * DynamicObjectUnwrapInstance(Napi::Object obj) {
  VkStructureType sType = GetStructureTypeFromObject(obj);
  switch (sType) {
    {% for struct in structs -%}
    {%- if struct.sType and not struct.alias -%}
    case {{ struct.sType }}: return (void *) &Napi::ObjectWrap<_{{ struct.name }}>::Unwrap(obj)->instance;
    {% endif -%}
    {% endfor %}
  };
  std::string constructorName = obj.Get("constructor").As<Napi::Object>().Get("name").As<Napi::String>().Utf8Value();
  std::string msg = "Dynamic Object Unwrap failed! Invalid constructor: '" + constructorName + "'";
  Napi::TypeError::New(obj.Env(), msg).ThrowAsJavaScriptException();
  return nullptr;
}

#endif
