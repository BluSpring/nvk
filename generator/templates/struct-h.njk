#ifndef __VK_{{ struct_name.toUpperCase() }}_H__
#define __VK_{{ struct_name.toUpperCase() }}_H__

#include <nan.h>

#include <vulkan/vulkan_win32.h>
#define GLFW_INCLUDE_VULKAN
#include <GLFW/glfw3.h>

class _{{ struct_name }}: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_METHOD(flush);
    // #accessors
    {%- for member in members %}
    {%- if ignoreableMember(member) != true -%}
    {{- processHeaderGetter(struct, member) | safe }}
    {%- if isStructReturnedOnly(struct) != true -%}
    {{- processHeaderSetter(struct, member) | safe }}
    {% endif -%}
    {% endif -%}
    {%- endfor %}

    // real instance
    {{ struct_name }} instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);

  private:

    {%- for member in members %}
    v8::Local<v8::String> sAccess{{ loop.index0 }} = Nan::New("{{ member.name }}").ToLocalChecked();
    {%- endfor %}

    _{{ struct_name }}();
    ~_{{ struct_name }}();

};

#endif