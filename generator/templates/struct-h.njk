
class _{{ struct_name }} : public Napi::ObjectWrap<_{{ struct_name }}> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _{{ struct_name }}(const Napi::CallbackInfo &info);
    ~_{{ struct_name }}();

    // #methods
    // #accessors
    {%- for member in members %}
    {%- if isIgnoreableType(member) != true -%}
    {{- processHeaderGetter(struct, member) | safe }}
    {%- if isFillableMember(struct, member) == true -%}
    {{- processHeaderSetter(struct, member) | safe }}
    {% endif -%}
    {% endif -%}
    {%- endfor %}

    bool flush(void);

    // real instance
    {{ struct_name }} instance = {};

};
