
class _{{ struct_name }}: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryTable);
    // #accessors
    {%- for member in members %}
    {%- if isIgnoreableType(member) != true -%}
    {{- processHeaderGetter(struct, member) | safe }}
    {%- if isFillableMember(struct, member) == true -%}
    {{- processHeaderSetter(struct, member) | safe }}
    {% endif -%}
    {% endif -%}
    {%- endfor %}

    // real instance
    {{ struct_name }} instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _{{ struct_name }}();
    ~_{{ struct_name }}();

};
