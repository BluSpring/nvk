#define NAPI_EXPERIMENTAL
#include <napi.h>

#define GLFW_INCLUDE_VULKAN
#include <GLFW/glfw3.h>

#define GLM_FORCE_RADIANS
#define GLM_FORCE_DEPTH_ZERO_TO_ONE

#include "source.h"
#include "calls.h"
#include "enums.h"
#include "window.h"

static Napi::Value createV8ArrayBufferFromMemory(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  if (!(info[0].IsBigInt())) Napi::TypeError::New(env, "Argument 1 must be of type 'BigInt'").ThrowAsJavaScriptException();
  if (!(info[1].IsNumber())) Napi::TypeError::New(env, "Argument 2 must be of type 'Number'").ThrowAsJavaScriptException();
  bool lossless;
  int64_t addr = info[0].As<Napi::BigInt>().Int64Value(&lossless);
  uint32_t size = info[1].As<Napi::Number>().Uint32Value();
  Napi::ArrayBuffer buffer = Napi::ArrayBuffer::New(
    env,
    reinterpret_cast<void *>(addr),
    size
  );
  return buffer;
};

static Napi::Value _VK_MAKE_VERSION(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  if (!(info[0].IsNumber())) Napi::TypeError::New(env, "Argument 1 must be of type 'Number'").ThrowAsJavaScriptException();
  if (!(info[1].IsNumber())) Napi::TypeError::New(env, "Argument 2 must be of type 'Number'").ThrowAsJavaScriptException();
  if (!(info[2].IsNumber())) Napi::TypeError::New(env, "Argument 3 must be of type 'Number'").ThrowAsJavaScriptException();
  uint32_t major = info[0].As<Napi::Number>().Uint32Value();
  uint32_t minor = info[1].As<Napi::Number>().Uint32Value();
  uint32_t patch = info[2].As<Napi::Number>().Uint32Value();
  return Napi::Number::New(env, VK_MAKE_VERSION(major, minor, patch));
};

static Napi::Value _VK_VERSION_MAJOR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  if (!(info[0].IsNumber())) Napi::TypeError::New(env, "Argument 1 must be of type 'Number'").ThrowAsJavaScriptException();
  uint32_t version = info[0].As<Napi::Number>().Uint32Value();
  return Napi::Number::New(env, (uint32_t)(version) >> 22);
};

static Napi::Value _VK_VERSION_MINOR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  if (!(info[0].IsNumber())) Napi::TypeError::New(env, "Argument 1 must be of type 'Number'").ThrowAsJavaScriptException();
  uint32_t version = info[0].As<Napi::Number>().Uint32Value();
  return Napi::Number::New(env, ((uint32_t)(version) >> 12) & 0x3ff);
};

static Napi::Value _VK_VERSION_PATCH(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  if (!(info[0].IsNumber())) Napi::TypeError::New(env, "Argument 1 must be of type 'Number'").ThrowAsJavaScriptException();
  uint32_t version = info[0].As<Napi::Number>().Uint32Value();
  return Napi::Number::New(env, (uint32_t)(version) & 0xfff);
};

Napi::Object Init(Napi::Env env, Napi::Object exports) {
  VulkanWindow::Initialize(env, exports);
  exports["createV8ArrayBufferFromMemory"] = Napi::Function::New(env, createV8ArrayBufferFromMemory, "createV8ArrayBufferFromMemory");
  exports["getVulkanEnumerations"] = Napi::Function::New(env, getVulkanEnumerations, "getVulkanEnumerations");
  exports["VK_MAKE_VERSION"] = Napi::Function::New(env, _VK_MAKE_VERSION, "VK_MAKE_VERSION");
  exports["VK_VERSION_MAJOR"] = Napi::Function::New(env, _VK_VERSION_MAJOR, "VK_VERSION_MAJOR");
  exports["VK_VERSION_MINOR"] = Napi::Function::New(env, _VK_VERSION_MINOR, "VK_VERSION_MINOR");
  exports["VK_VERSION_PATCH"] = Napi::Function::New(env, _VK_VERSION_PATCH, "VK_VERSION_PATCH");
  exports["VK_API_VERSION_1_0"] = Napi::Number::New(env, VK_MAKE_VERSION(1, 0, 0));
  exports["vkUseDevice"] = Napi::Function::New(env, vkUseDevice, "vkUseDevice");
  exports["vkUseInstance"] = Napi::Function::New(env, vkUseInstance, "vkUseInstance");
  // structs & handles
  {% for incl in includes -%}
  {%- if incl != "" -%}
  _{{ incl }}::Initialize(env, exports);
  {% endif -%}
  {% endfor %}
  // calls
  {% for call in calls -%}
  exports["{{ call.name }}"] = Napi::Function::New(env, _{{ call.name }}, "{{ call.name }}");
  {% endfor %}
  return exports;
}

NODE_API_MODULE(addon, Init)
