/** {{ struct.name }} **/
class {{ struct.name }} {
  constructor(opts) {
    {% for member in struct.children %}
    {%- if isIgnoreableType(member) != true -%}
    {{ getConstructorInitializer(member) | safe }}
    {% endif -%}
    {%- endfor -%}
    this.memoryBuffer = new ArrayBuffer({{ getStructureByteLength() | safe }});
{{ getStructureMemoryViews() | safe }}
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    {{ getStructureAutoSType() | safe }}
    if (typeof opts === "object") {
      {% if struct.returnedonly == true -%}
      throw new Error("'{{ struct.name }}' is read-only and can only be filled by vulkan");
      {%- endif -%}
      {% for member in struct.children %}
      {%- if isIgnoreableType(member) != true -%}
      {%- if isFillableMember(struct, member) == true -%}
      if (opts.{{ member.name }} !== void 0) this.{{ member.name }} = opts.{{ member.name }};
      {% endif -%}
      {% endif -%}
      {%- endfor %}
    }
  }
  {% for member in struct.children %}
  {%- if isIgnoreableType(member) != true -%}
  get {{ member.name }}() {
    {{- getGetterProcessor(member) | safe }}
  }
  {% if isFillableMember(struct, member) == true -%}
  set {{ member.name }}(value) {
    {{- getSetterProcessor(member) | safe }}
  }
  {% endif -%}
  {% endif -%}
  {% endfor %}
};

{{ struct.name }}.prototype.flush = function flush() {
  //console.log(`Flushing: "{{ struct.name }}"`);
  {% for member in struct.children -%}
  {%- if isIgnoreableType(member) != true -%}
  {%- if isFlushableMember(member) == true %}
  {%- if isFillableMember(struct, member) == true %}
  {{ getFlusherProcessor(member) | safe }}
  {% endif -%}
  {%- endif -%}
  {%- endif -%}
  {%- endfor %}
  return true;
};

{{ struct.name }}.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress,  {{ getStructureByteLength() | safe }});
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "{{ struct.name }}"`, this.memoryAddress, memoryAddress);
  {% if struct.returnedonly == true -%}
  dstView.set(srcView.subarray(0x0, {{ getStructureByteLength() | safe }}), 0x0);
  {%- endif -%}
  {% for member in struct.children -%}
  {%- if isIgnoreableType(member) != true -%}
  {%- if isFlushableMember(member) == true %}
  {{ getReflectorProcesssor(member) | safe }}
  {% endif -%}
  {%- endif -%}
  {%- endfor %}
};

{{ struct.name }}.byteLength = {{ getStructureByteLength() | safe }};

{{ struct.name }}.memoryLayout = Object.freeze({
  {%- for member in struct.children -%}
  {%- if isIgnoreableType(member) != true %}
  {{ member.name }}: Object.freeze({
    byteOffset: {{ getStructureMemberByteOffset(member) | safe }},
    byteLength: {{ getStructureMemberByteLength(member) | safe }}
  }),
  {%- endif -%}
  {%- endfor %}
});
