#ifndef __VK_ENUMS_H__
#define __VK_ENUMS_H__

#include <nan.h>

#define GLFW_INCLUDE_VULKAN
#include <GLFW/glfw3.h>

#include <map>
#include <string>

{% for enu in enums -%}
std::map<std::string, {{ getEnumType(enu) | safe }}> _{{ enu.name }} = {
  {% for child in enu.children -%}
  { "{{ child.name }}", {{ getEnumMemberValue(child) | safe }} },
  {% endfor %}
};
{% endfor %}
void getVulkanEnumerations(const Nan::FunctionCallbackInfo<v8::Value>& info) {
  v8::Local<v8::Object> out = Nan::New<v8::Object>();

  {% for enu in enums -%}
  {
    std::map<std::string, {{ getEnumType(enu) | safe }}>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _{{ enu.name }}.begin(); it != _{{ enu.name }}.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), {{ getEnumV8Value(enu) | safe }});
      out->Set(Nan::New(it->first).ToLocalChecked(), {{ getEnumV8Value(enu) | safe }});
    };
    out->Set(Nan::New("{{ enu.name }}").ToLocalChecked(), entry);
  }
  {% endfor %}
  info.GetReturnValue().Set(out);
};

#endif
