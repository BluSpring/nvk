#ifndef __VK_ENUMS_H__
#define __VK_ENUMS_H__

#include <nan.h>

#define GLFW_INCLUDE_VULKAN
#include <GLFW/glfw3.h>

#include <map>
#include <string>

std::map<std::string, unsigned __int8> _VkImageLayout = {
  { "VK_IMAGE_LAYOUT_UNDEFINED", 0 },
  { "VK_IMAGE_LAYOUT_GENERAL", 1 },
  { "VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL", 2 },
  { "VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL", 3 },
  { "VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL", 4 },
  { "VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL", 5 },
  { "VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL", 6 },
  { "VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL", 7 },
  { "VK_IMAGE_LAYOUT_PREINITIALIZED", 8 },
  
};
std::map<std::string, unsigned __int8> _VkAttachmentLoadOp = {
  { "VK_ATTACHMENT_LOAD_OP_LOAD", 0 },
  { "VK_ATTACHMENT_LOAD_OP_CLEAR", 1 },
  { "VK_ATTACHMENT_LOAD_OP_DONT_CARE", 2 },
  
};
std::map<std::string, unsigned __int8> _VkAttachmentStoreOp = {
  { "VK_ATTACHMENT_STORE_OP_STORE", 0 },
  { "VK_ATTACHMENT_STORE_OP_DONT_CARE", 1 },
  
};
std::map<std::string, unsigned __int8> _VkImageType = {
  { "VK_IMAGE_TYPE_1D", 0 },
  { "VK_IMAGE_TYPE_2D", 1 },
  { "VK_IMAGE_TYPE_3D", 2 },
  
};
std::map<std::string, unsigned __int8> _VkImageTiling = {
  { "VK_IMAGE_TILING_OPTIMAL", 0 },
  { "VK_IMAGE_TILING_LINEAR", 1 },
  
};
std::map<std::string, unsigned __int8> _VkImageViewType = {
  { "VK_IMAGE_VIEW_TYPE_1D", 0 },
  { "VK_IMAGE_VIEW_TYPE_2D", 1 },
  { "VK_IMAGE_VIEW_TYPE_3D", 2 },
  { "VK_IMAGE_VIEW_TYPE_CUBE", 3 },
  { "VK_IMAGE_VIEW_TYPE_1D_ARRAY", 4 },
  { "VK_IMAGE_VIEW_TYPE_2D_ARRAY", 5 },
  { "VK_IMAGE_VIEW_TYPE_CUBE_ARRAY", 6 },
  
};
std::map<std::string, unsigned __int8> _VkCommandBufferLevel = {
  { "VK_COMMAND_BUFFER_LEVEL_PRIMARY", 0 },
  { "VK_COMMAND_BUFFER_LEVEL_SECONDARY", 1 },
  
};
std::map<std::string, unsigned __int8> _VkComponentSwizzle = {
  { "VK_COMPONENT_SWIZZLE_IDENTITY", 0 },
  { "VK_COMPONENT_SWIZZLE_ZERO", 1 },
  { "VK_COMPONENT_SWIZZLE_ONE", 2 },
  { "VK_COMPONENT_SWIZZLE_R", 3 },
  { "VK_COMPONENT_SWIZZLE_G", 4 },
  { "VK_COMPONENT_SWIZZLE_B", 5 },
  { "VK_COMPONENT_SWIZZLE_A", 6 },
  
};
std::map<std::string, unsigned __int8> _VkDescriptorType = {
  { "VK_DESCRIPTOR_TYPE_SAMPLER", 0 },
  { "VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER", 1 },
  { "VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE", 2 },
  { "VK_DESCRIPTOR_TYPE_STORAGE_IMAGE", 3 },
  { "VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER", 4 },
  { "VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER", 5 },
  { "VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER", 6 },
  { "VK_DESCRIPTOR_TYPE_STORAGE_BUFFER", 7 },
  { "VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC", 8 },
  { "VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC", 9 },
  { "VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT", 10 },
  
};
std::map<std::string, unsigned __int8> _VkQueryType = {
  { "VK_QUERY_TYPE_OCCLUSION", 0 },
  { "VK_QUERY_TYPE_PIPELINE_STATISTICS", 1 },
  { "VK_QUERY_TYPE_TIMESTAMP", 2 },
  
};
std::map<std::string, unsigned __int8> _VkBorderColor = {
  { "VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK", 0 },
  { "VK_BORDER_COLOR_INT_TRANSPARENT_BLACK", 1 },
  { "VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK", 2 },
  { "VK_BORDER_COLOR_INT_OPAQUE_BLACK", 3 },
  { "VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE", 4 },
  { "VK_BORDER_COLOR_INT_OPAQUE_WHITE", 5 },
  
};
std::map<std::string, unsigned __int8> _VkPipelineBindPoint = {
  { "VK_PIPELINE_BIND_POINT_GRAPHICS", 0 },
  { "VK_PIPELINE_BIND_POINT_COMPUTE", 1 },
  
};
std::map<std::string, unsigned __int8> _VkPipelineCacheHeaderVersion = {
  { "VK_PIPELINE_CACHE_HEADER_VERSION_ONE", 1 },
  
};
std::map<std::string, unsigned __int8> _VkPrimitiveTopology = {
  { "VK_PRIMITIVE_TOPOLOGY_POINT_LIST", 0 },
  { "VK_PRIMITIVE_TOPOLOGY_LINE_LIST", 1 },
  { "VK_PRIMITIVE_TOPOLOGY_LINE_STRIP", 2 },
  { "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST", 3 },
  { "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP", 4 },
  { "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN", 5 },
  { "VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY", 6 },
  { "VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY", 7 },
  { "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY", 8 },
  { "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY", 9 },
  { "VK_PRIMITIVE_TOPOLOGY_PATCH_LIST", 10 },
  
};
std::map<std::string, unsigned __int8> _VkSharingMode = {
  { "VK_SHARING_MODE_EXCLUSIVE", 0 },
  { "VK_SHARING_MODE_CONCURRENT", 1 },
  
};
std::map<std::string, unsigned __int8> _VkIndexType = {
  { "VK_INDEX_TYPE_UINT16", 0 },
  { "VK_INDEX_TYPE_UINT32", 1 },
  
};
std::map<std::string, unsigned __int8> _VkFilter = {
  { "VK_FILTER_NEAREST", 0 },
  { "VK_FILTER_LINEAR", 1 },
  
};
std::map<std::string, unsigned __int8> _VkSamplerMipmapMode = {
  { "VK_SAMPLER_MIPMAP_MODE_NEAREST", 0 },
  { "VK_SAMPLER_MIPMAP_MODE_LINEAR", 1 },
  
};
std::map<std::string, unsigned __int8> _VkSamplerAddressMode = {
  { "VK_SAMPLER_ADDRESS_MODE_REPEAT", 0 },
  { "VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT", 1 },
  { "VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE", 2 },
  { "VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER", 3 },
  
};
std::map<std::string, unsigned __int8> _VkCompareOp = {
  { "VK_COMPARE_OP_NEVER", 0 },
  { "VK_COMPARE_OP_LESS", 1 },
  { "VK_COMPARE_OP_EQUAL", 2 },
  { "VK_COMPARE_OP_LESS_OR_EQUAL", 3 },
  { "VK_COMPARE_OP_GREATER", 4 },
  { "VK_COMPARE_OP_NOT_EQUAL", 5 },
  { "VK_COMPARE_OP_GREATER_OR_EQUAL", 6 },
  { "VK_COMPARE_OP_ALWAYS", 7 },
  
};
std::map<std::string, unsigned __int8> _VkPolygonMode = {
  { "VK_POLYGON_MODE_FILL", 0 },
  { "VK_POLYGON_MODE_LINE", 1 },
  { "VK_POLYGON_MODE_POINT", 2 },
  
};
std::map<std::string, unsigned __int8> _VkFrontFace = {
  { "VK_FRONT_FACE_COUNTER_CLOCKWISE", 0 },
  { "VK_FRONT_FACE_CLOCKWISE", 1 },
  
};
std::map<std::string, unsigned __int8> _VkBlendFactor = {
  { "VK_BLEND_FACTOR_ZERO", 0 },
  { "VK_BLEND_FACTOR_ONE", 1 },
  { "VK_BLEND_FACTOR_SRC_COLOR", 2 },
  { "VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR", 3 },
  { "VK_BLEND_FACTOR_DST_COLOR", 4 },
  { "VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR", 5 },
  { "VK_BLEND_FACTOR_SRC_ALPHA", 6 },
  { "VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA", 7 },
  { "VK_BLEND_FACTOR_DST_ALPHA", 8 },
  { "VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA", 9 },
  { "VK_BLEND_FACTOR_CONSTANT_COLOR", 10 },
  { "VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR", 11 },
  { "VK_BLEND_FACTOR_CONSTANT_ALPHA", 12 },
  { "VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA", 13 },
  { "VK_BLEND_FACTOR_SRC_ALPHA_SATURATE", 14 },
  { "VK_BLEND_FACTOR_SRC1_COLOR", 15 },
  { "VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR", 16 },
  { "VK_BLEND_FACTOR_SRC1_ALPHA", 17 },
  { "VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA", 18 },
  
};
std::map<std::string, unsigned __int8> _VkBlendOp = {
  { "VK_BLEND_OP_ADD", 0 },
  { "VK_BLEND_OP_SUBTRACT", 1 },
  { "VK_BLEND_OP_REVERSE_SUBTRACT", 2 },
  { "VK_BLEND_OP_MIN", 3 },
  { "VK_BLEND_OP_MAX", 4 },
  
};
std::map<std::string, unsigned __int8> _VkStencilOp = {
  { "VK_STENCIL_OP_KEEP", 0 },
  { "VK_STENCIL_OP_ZERO", 1 },
  { "VK_STENCIL_OP_REPLACE", 2 },
  { "VK_STENCIL_OP_INCREMENT_AND_CLAMP", 3 },
  { "VK_STENCIL_OP_DECREMENT_AND_CLAMP", 4 },
  { "VK_STENCIL_OP_INVERT", 5 },
  { "VK_STENCIL_OP_INCREMENT_AND_WRAP", 6 },
  { "VK_STENCIL_OP_DECREMENT_AND_WRAP", 7 },
  
};
std::map<std::string, unsigned __int8> _VkLogicOp = {
  { "VK_LOGIC_OP_CLEAR", 0 },
  { "VK_LOGIC_OP_AND", 1 },
  { "VK_LOGIC_OP_AND_REVERSE", 2 },
  { "VK_LOGIC_OP_COPY", 3 },
  { "VK_LOGIC_OP_AND_INVERTED", 4 },
  { "VK_LOGIC_OP_NO_OP", 5 },
  { "VK_LOGIC_OP_XOR", 6 },
  { "VK_LOGIC_OP_OR", 7 },
  { "VK_LOGIC_OP_NOR", 8 },
  { "VK_LOGIC_OP_EQUIVALENT", 9 },
  { "VK_LOGIC_OP_INVERT", 10 },
  { "VK_LOGIC_OP_OR_REVERSE", 11 },
  { "VK_LOGIC_OP_COPY_INVERTED", 12 },
  { "VK_LOGIC_OP_OR_INVERTED", 13 },
  { "VK_LOGIC_OP_NAND", 14 },
  { "VK_LOGIC_OP_SET", 15 },
  
};
std::map<std::string, unsigned __int8> _VkInternalAllocationType = {
  { "VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE", 0 },
  
};
std::map<std::string, unsigned __int8> _VkSystemAllocationScope = {
  { "VK_SYSTEM_ALLOCATION_SCOPE_COMMAND", 0 },
  { "VK_SYSTEM_ALLOCATION_SCOPE_OBJECT", 1 },
  { "VK_SYSTEM_ALLOCATION_SCOPE_CACHE", 2 },
  { "VK_SYSTEM_ALLOCATION_SCOPE_DEVICE", 3 },
  { "VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE", 4 },
  
};
std::map<std::string, unsigned __int8> _VkPhysicalDeviceType = {
  { "VK_PHYSICAL_DEVICE_TYPE_OTHER", 0 },
  { "VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU", 1 },
  { "VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU", 2 },
  { "VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU", 3 },
  { "VK_PHYSICAL_DEVICE_TYPE_CPU", 4 },
  
};
std::map<std::string, unsigned __int8> _VkVertexInputRate = {
  { "VK_VERTEX_INPUT_RATE_VERTEX", 0 },
  { "VK_VERTEX_INPUT_RATE_INSTANCE", 1 },
  
};
std::map<std::string, unsigned __int8> _VkFormat = {
  { "VK_FORMAT_UNDEFINED", 0 },
  { "VK_FORMAT_R4G4_UNORM_PACK8", 1 },
  { "VK_FORMAT_R4G4B4A4_UNORM_PACK16", 2 },
  { "VK_FORMAT_B4G4R4A4_UNORM_PACK16", 3 },
  { "VK_FORMAT_R5G6B5_UNORM_PACK16", 4 },
  { "VK_FORMAT_B5G6R5_UNORM_PACK16", 5 },
  { "VK_FORMAT_R5G5B5A1_UNORM_PACK16", 6 },
  { "VK_FORMAT_B5G5R5A1_UNORM_PACK16", 7 },
  { "VK_FORMAT_A1R5G5B5_UNORM_PACK16", 8 },
  { "VK_FORMAT_R8_UNORM", 9 },
  { "VK_FORMAT_R8_SNORM", 10 },
  { "VK_FORMAT_R8_USCALED", 11 },
  { "VK_FORMAT_R8_SSCALED", 12 },
  { "VK_FORMAT_R8_UINT", 13 },
  { "VK_FORMAT_R8_SINT", 14 },
  { "VK_FORMAT_R8_SRGB", 15 },
  { "VK_FORMAT_R8G8_UNORM", 16 },
  { "VK_FORMAT_R8G8_SNORM", 17 },
  { "VK_FORMAT_R8G8_USCALED", 18 },
  { "VK_FORMAT_R8G8_SSCALED", 19 },
  { "VK_FORMAT_R8G8_UINT", 20 },
  { "VK_FORMAT_R8G8_SINT", 21 },
  { "VK_FORMAT_R8G8_SRGB", 22 },
  { "VK_FORMAT_R8G8B8_UNORM", 23 },
  { "VK_FORMAT_R8G8B8_SNORM", 24 },
  { "VK_FORMAT_R8G8B8_USCALED", 25 },
  { "VK_FORMAT_R8G8B8_SSCALED", 26 },
  { "VK_FORMAT_R8G8B8_UINT", 27 },
  { "VK_FORMAT_R8G8B8_SINT", 28 },
  { "VK_FORMAT_R8G8B8_SRGB", 29 },
  { "VK_FORMAT_B8G8R8_UNORM", 30 },
  { "VK_FORMAT_B8G8R8_SNORM", 31 },
  { "VK_FORMAT_B8G8R8_USCALED", 32 },
  { "VK_FORMAT_B8G8R8_SSCALED", 33 },
  { "VK_FORMAT_B8G8R8_UINT", 34 },
  { "VK_FORMAT_B8G8R8_SINT", 35 },
  { "VK_FORMAT_B8G8R8_SRGB", 36 },
  { "VK_FORMAT_R8G8B8A8_UNORM", 37 },
  { "VK_FORMAT_R8G8B8A8_SNORM", 38 },
  { "VK_FORMAT_R8G8B8A8_USCALED", 39 },
  { "VK_FORMAT_R8G8B8A8_SSCALED", 40 },
  { "VK_FORMAT_R8G8B8A8_UINT", 41 },
  { "VK_FORMAT_R8G8B8A8_SINT", 42 },
  { "VK_FORMAT_R8G8B8A8_SRGB", 43 },
  { "VK_FORMAT_B8G8R8A8_UNORM", 44 },
  { "VK_FORMAT_B8G8R8A8_SNORM", 45 },
  { "VK_FORMAT_B8G8R8A8_USCALED", 46 },
  { "VK_FORMAT_B8G8R8A8_SSCALED", 47 },
  { "VK_FORMAT_B8G8R8A8_UINT", 48 },
  { "VK_FORMAT_B8G8R8A8_SINT", 49 },
  { "VK_FORMAT_B8G8R8A8_SRGB", 50 },
  { "VK_FORMAT_A8B8G8R8_UNORM_PACK32", 51 },
  { "VK_FORMAT_A8B8G8R8_SNORM_PACK32", 52 },
  { "VK_FORMAT_A8B8G8R8_USCALED_PACK32", 53 },
  { "VK_FORMAT_A8B8G8R8_SSCALED_PACK32", 54 },
  { "VK_FORMAT_A8B8G8R8_UINT_PACK32", 55 },
  { "VK_FORMAT_A8B8G8R8_SINT_PACK32", 56 },
  { "VK_FORMAT_A8B8G8R8_SRGB_PACK32", 57 },
  { "VK_FORMAT_A2R10G10B10_UNORM_PACK32", 58 },
  { "VK_FORMAT_A2R10G10B10_SNORM_PACK32", 59 },
  { "VK_FORMAT_A2R10G10B10_USCALED_PACK32", 60 },
  { "VK_FORMAT_A2R10G10B10_SSCALED_PACK32", 61 },
  { "VK_FORMAT_A2R10G10B10_UINT_PACK32", 62 },
  { "VK_FORMAT_A2R10G10B10_SINT_PACK32", 63 },
  { "VK_FORMAT_A2B10G10R10_UNORM_PACK32", 64 },
  { "VK_FORMAT_A2B10G10R10_SNORM_PACK32", 65 },
  { "VK_FORMAT_A2B10G10R10_USCALED_PACK32", 66 },
  { "VK_FORMAT_A2B10G10R10_SSCALED_PACK32", 67 },
  { "VK_FORMAT_A2B10G10R10_UINT_PACK32", 68 },
  { "VK_FORMAT_A2B10G10R10_SINT_PACK32", 69 },
  { "VK_FORMAT_R16_UNORM", 70 },
  { "VK_FORMAT_R16_SNORM", 71 },
  { "VK_FORMAT_R16_USCALED", 72 },
  { "VK_FORMAT_R16_SSCALED", 73 },
  { "VK_FORMAT_R16_UINT", 74 },
  { "VK_FORMAT_R16_SINT", 75 },
  { "VK_FORMAT_R16_SFLOAT", 76 },
  { "VK_FORMAT_R16G16_UNORM", 77 },
  { "VK_FORMAT_R16G16_SNORM", 78 },
  { "VK_FORMAT_R16G16_USCALED", 79 },
  { "VK_FORMAT_R16G16_SSCALED", 80 },
  { "VK_FORMAT_R16G16_UINT", 81 },
  { "VK_FORMAT_R16G16_SINT", 82 },
  { "VK_FORMAT_R16G16_SFLOAT", 83 },
  { "VK_FORMAT_R16G16B16_UNORM", 84 },
  { "VK_FORMAT_R16G16B16_SNORM", 85 },
  { "VK_FORMAT_R16G16B16_USCALED", 86 },
  { "VK_FORMAT_R16G16B16_SSCALED", 87 },
  { "VK_FORMAT_R16G16B16_UINT", 88 },
  { "VK_FORMAT_R16G16B16_SINT", 89 },
  { "VK_FORMAT_R16G16B16_SFLOAT", 90 },
  { "VK_FORMAT_R16G16B16A16_UNORM", 91 },
  { "VK_FORMAT_R16G16B16A16_SNORM", 92 },
  { "VK_FORMAT_R16G16B16A16_USCALED", 93 },
  { "VK_FORMAT_R16G16B16A16_SSCALED", 94 },
  { "VK_FORMAT_R16G16B16A16_UINT", 95 },
  { "VK_FORMAT_R16G16B16A16_SINT", 96 },
  { "VK_FORMAT_R16G16B16A16_SFLOAT", 97 },
  { "VK_FORMAT_R32_UINT", 98 },
  { "VK_FORMAT_R32_SINT", 99 },
  { "VK_FORMAT_R32_SFLOAT", 100 },
  { "VK_FORMAT_R32G32_UINT", 101 },
  { "VK_FORMAT_R32G32_SINT", 102 },
  { "VK_FORMAT_R32G32_SFLOAT", 103 },
  { "VK_FORMAT_R32G32B32_UINT", 104 },
  { "VK_FORMAT_R32G32B32_SINT", 105 },
  { "VK_FORMAT_R32G32B32_SFLOAT", 106 },
  { "VK_FORMAT_R32G32B32A32_UINT", 107 },
  { "VK_FORMAT_R32G32B32A32_SINT", 108 },
  { "VK_FORMAT_R32G32B32A32_SFLOAT", 109 },
  { "VK_FORMAT_R64_UINT", 110 },
  { "VK_FORMAT_R64_SINT", 111 },
  { "VK_FORMAT_R64_SFLOAT", 112 },
  { "VK_FORMAT_R64G64_UINT", 113 },
  { "VK_FORMAT_R64G64_SINT", 114 },
  { "VK_FORMAT_R64G64_SFLOAT", 115 },
  { "VK_FORMAT_R64G64B64_UINT", 116 },
  { "VK_FORMAT_R64G64B64_SINT", 117 },
  { "VK_FORMAT_R64G64B64_SFLOAT", 118 },
  { "VK_FORMAT_R64G64B64A64_UINT", 119 },
  { "VK_FORMAT_R64G64B64A64_SINT", 120 },
  { "VK_FORMAT_R64G64B64A64_SFLOAT", 121 },
  { "VK_FORMAT_B10G11R11_UFLOAT_PACK32", 122 },
  { "VK_FORMAT_E5B9G9R9_UFLOAT_PACK32", 123 },
  { "VK_FORMAT_D16_UNORM", 124 },
  { "VK_FORMAT_X8_D24_UNORM_PACK32", 125 },
  { "VK_FORMAT_D32_SFLOAT", 126 },
  { "VK_FORMAT_S8_UINT", 127 },
  { "VK_FORMAT_D16_UNORM_S8_UINT", 128 },
  { "VK_FORMAT_D24_UNORM_S8_UINT", 129 },
  { "VK_FORMAT_D32_SFLOAT_S8_UINT", 130 },
  { "VK_FORMAT_BC1_RGB_UNORM_BLOCK", 131 },
  { "VK_FORMAT_BC1_RGB_SRGB_BLOCK", 132 },
  { "VK_FORMAT_BC1_RGBA_UNORM_BLOCK", 133 },
  { "VK_FORMAT_BC1_RGBA_SRGB_BLOCK", 134 },
  { "VK_FORMAT_BC2_UNORM_BLOCK", 135 },
  { "VK_FORMAT_BC2_SRGB_BLOCK", 136 },
  { "VK_FORMAT_BC3_UNORM_BLOCK", 137 },
  { "VK_FORMAT_BC3_SRGB_BLOCK", 138 },
  { "VK_FORMAT_BC4_UNORM_BLOCK", 139 },
  { "VK_FORMAT_BC4_SNORM_BLOCK", 140 },
  { "VK_FORMAT_BC5_UNORM_BLOCK", 141 },
  { "VK_FORMAT_BC5_SNORM_BLOCK", 142 },
  { "VK_FORMAT_BC6H_UFLOAT_BLOCK", 143 },
  { "VK_FORMAT_BC6H_SFLOAT_BLOCK", 144 },
  { "VK_FORMAT_BC7_UNORM_BLOCK", 145 },
  { "VK_FORMAT_BC7_SRGB_BLOCK", 146 },
  { "VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK", 147 },
  { "VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK", 148 },
  { "VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK", 149 },
  { "VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK", 150 },
  { "VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK", 151 },
  { "VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK", 152 },
  { "VK_FORMAT_EAC_R11_UNORM_BLOCK", 153 },
  { "VK_FORMAT_EAC_R11_SNORM_BLOCK", 154 },
  { "VK_FORMAT_EAC_R11G11_UNORM_BLOCK", 155 },
  { "VK_FORMAT_EAC_R11G11_SNORM_BLOCK", 156 },
  { "VK_FORMAT_ASTC_4x4_UNORM_BLOCK", 157 },
  { "VK_FORMAT_ASTC_4x4_SRGB_BLOCK", 158 },
  { "VK_FORMAT_ASTC_5x4_UNORM_BLOCK", 159 },
  { "VK_FORMAT_ASTC_5x4_SRGB_BLOCK", 160 },
  { "VK_FORMAT_ASTC_5x5_UNORM_BLOCK", 161 },
  { "VK_FORMAT_ASTC_5x5_SRGB_BLOCK", 162 },
  { "VK_FORMAT_ASTC_6x5_UNORM_BLOCK", 163 },
  { "VK_FORMAT_ASTC_6x5_SRGB_BLOCK", 164 },
  { "VK_FORMAT_ASTC_6x6_UNORM_BLOCK", 165 },
  { "VK_FORMAT_ASTC_6x6_SRGB_BLOCK", 166 },
  { "VK_FORMAT_ASTC_8x5_UNORM_BLOCK", 167 },
  { "VK_FORMAT_ASTC_8x5_SRGB_BLOCK", 168 },
  { "VK_FORMAT_ASTC_8x6_UNORM_BLOCK", 169 },
  { "VK_FORMAT_ASTC_8x6_SRGB_BLOCK", 170 },
  { "VK_FORMAT_ASTC_8x8_UNORM_BLOCK", 171 },
  { "VK_FORMAT_ASTC_8x8_SRGB_BLOCK", 172 },
  { "VK_FORMAT_ASTC_10x5_UNORM_BLOCK", 173 },
  { "VK_FORMAT_ASTC_10x5_SRGB_BLOCK", 174 },
  { "VK_FORMAT_ASTC_10x6_UNORM_BLOCK", 175 },
  { "VK_FORMAT_ASTC_10x6_SRGB_BLOCK", 176 },
  { "VK_FORMAT_ASTC_10x8_UNORM_BLOCK", 177 },
  { "VK_FORMAT_ASTC_10x8_SRGB_BLOCK", 178 },
  { "VK_FORMAT_ASTC_10x10_UNORM_BLOCK", 179 },
  { "VK_FORMAT_ASTC_10x10_SRGB_BLOCK", 180 },
  { "VK_FORMAT_ASTC_12x10_UNORM_BLOCK", 181 },
  { "VK_FORMAT_ASTC_12x10_SRGB_BLOCK", 182 },
  { "VK_FORMAT_ASTC_12x12_UNORM_BLOCK", 183 },
  { "VK_FORMAT_ASTC_12x12_SRGB_BLOCK", 184 },
  
};
std::map<std::string, unsigned __int8> _VkStructureType = {
  { "VK_STRUCTURE_TYPE_APPLICATION_INFO", 0 },
  { "VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO", 1 },
  { "VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO", 2 },
  { "VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO", 3 },
  { "VK_STRUCTURE_TYPE_SUBMIT_INFO", 4 },
  { "VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO", 5 },
  { "VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE", 6 },
  { "VK_STRUCTURE_TYPE_BIND_SPARSE_INFO", 7 },
  { "VK_STRUCTURE_TYPE_FENCE_CREATE_INFO", 8 },
  { "VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO", 9 },
  { "VK_STRUCTURE_TYPE_EVENT_CREATE_INFO", 10 },
  { "VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO", 11 },
  { "VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO", 12 },
  { "VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO", 13 },
  { "VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO", 14 },
  { "VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO", 15 },
  { "VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO", 16 },
  { "VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO", 17 },
  { "VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO", 18 },
  { "VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO", 19 },
  { "VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO", 20 },
  { "VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO", 21 },
  { "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO", 22 },
  { "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO", 23 },
  { "VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO", 24 },
  { "VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO", 25 },
  { "VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO", 26 },
  { "VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO", 27 },
  { "VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO", 28 },
  { "VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO", 29 },
  { "VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO", 30 },
  { "VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO", 31 },
  { "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO", 32 },
  { "VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO", 33 },
  { "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO", 34 },
  { "VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET", 35 },
  { "VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET", 36 },
  { "VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO", 37 },
  { "VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO", 38 },
  { "VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO", 39 },
  { "VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO", 40 },
  { "VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO", 41 },
  { "VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO", 42 },
  { "VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO", 43 },
  { "VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER", 44 },
  { "VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER", 45 },
  { "VK_STRUCTURE_TYPE_MEMORY_BARRIER", 46 },
  { "VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO", 47 },
  { "VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO", 48 },
  
};
std::map<std::string, unsigned __int8> _VkSubpassContents = {
  { "VK_SUBPASS_CONTENTS_INLINE", 0 },
  { "VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS", 1 },
  
};
std::map<std::string, unsigned __int8> _VkResult = {
  { "VK_SUCCESS", 0 },
  { "VK_NOT_READY", 1 },
  { "VK_TIMEOUT", 2 },
  { "VK_EVENT_SET", 3 },
  { "VK_EVENT_RESET", 4 },
  { "VK_INCOMPLETE", 5 },
  { "VK_ERROR_OUT_OF_HOST_MEMORY", -1 },
  { "VK_ERROR_OUT_OF_DEVICE_MEMORY", -2 },
  { "VK_ERROR_INITIALIZATION_FAILED", -3 },
  { "VK_ERROR_DEVICE_LOST", -4 },
  { "VK_ERROR_MEMORY_MAP_FAILED", -5 },
  { "VK_ERROR_LAYER_NOT_PRESENT", -6 },
  { "VK_ERROR_EXTENSION_NOT_PRESENT", -7 },
  { "VK_ERROR_FEATURE_NOT_PRESENT", -8 },
  { "VK_ERROR_INCOMPATIBLE_DRIVER", -9 },
  { "VK_ERROR_TOO_MANY_OBJECTS", -10 },
  { "VK_ERROR_FORMAT_NOT_SUPPORTED", -11 },
  { "VK_ERROR_FRAGMENTED_POOL", -12 },
  
};
std::map<std::string, unsigned __int8> _VkDynamicState = {
  { "VK_DYNAMIC_STATE_VIEWPORT", 0 },
  { "VK_DYNAMIC_STATE_SCISSOR", 1 },
  { "VK_DYNAMIC_STATE_LINE_WIDTH", 2 },
  { "VK_DYNAMIC_STATE_DEPTH_BIAS", 3 },
  { "VK_DYNAMIC_STATE_BLEND_CONSTANTS", 4 },
  { "VK_DYNAMIC_STATE_DEPTH_BOUNDS", 5 },
  { "VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK", 6 },
  { "VK_DYNAMIC_STATE_STENCIL_WRITE_MASK", 7 },
  { "VK_DYNAMIC_STATE_STENCIL_REFERENCE", 8 },
  
};
std::map<std::string, unsigned __int8> _VkDescriptorUpdateTemplateType = {
  { "VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET", 0 },
  
};
std::map<std::string, unsigned __int8> _VkObjectType = {
  { "VK_OBJECT_TYPE_UNKNOWN", 0 },
  { "VK_OBJECT_TYPE_INSTANCE", 1 },
  { "VK_OBJECT_TYPE_PHYSICAL_DEVICE", 2 },
  { "VK_OBJECT_TYPE_DEVICE", 3 },
  { "VK_OBJECT_TYPE_QUEUE", 4 },
  { "VK_OBJECT_TYPE_SEMAPHORE", 5 },
  { "VK_OBJECT_TYPE_COMMAND_BUFFER", 6 },
  { "VK_OBJECT_TYPE_FENCE", 7 },
  { "VK_OBJECT_TYPE_DEVICE_MEMORY", 8 },
  { "VK_OBJECT_TYPE_BUFFER", 9 },
  { "VK_OBJECT_TYPE_IMAGE", 10 },
  { "VK_OBJECT_TYPE_EVENT", 11 },
  { "VK_OBJECT_TYPE_QUERY_POOL", 12 },
  { "VK_OBJECT_TYPE_BUFFER_VIEW", 13 },
  { "VK_OBJECT_TYPE_IMAGE_VIEW", 14 },
  { "VK_OBJECT_TYPE_SHADER_MODULE", 15 },
  { "VK_OBJECT_TYPE_PIPELINE_CACHE", 16 },
  { "VK_OBJECT_TYPE_PIPELINE_LAYOUT", 17 },
  { "VK_OBJECT_TYPE_RENDER_PASS", 18 },
  { "VK_OBJECT_TYPE_PIPELINE", 19 },
  { "VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT", 20 },
  { "VK_OBJECT_TYPE_SAMPLER", 21 },
  { "VK_OBJECT_TYPE_DESCRIPTOR_POOL", 22 },
  { "VK_OBJECT_TYPE_DESCRIPTOR_SET", 23 },
  { "VK_OBJECT_TYPE_FRAMEBUFFER", 24 },
  { "VK_OBJECT_TYPE_COMMAND_POOL", 25 },
  
};
std::map<std::string, unsigned __int8> _VkPresentModeKHR = {
  { "VK_PRESENT_MODE_IMMEDIATE_KHR", 0 },
  { "VK_PRESENT_MODE_MAILBOX_KHR", 1 },
  { "VK_PRESENT_MODE_FIFO_KHR", 2 },
  { "VK_PRESENT_MODE_FIFO_RELAXED_KHR", 3 },
  
};
std::map<std::string, unsigned __int8> _VkColorSpaceKHR = {
  { "VK_COLOR_SPACE_SRGB_NONLINEAR_KHR", 0 },
  
};
std::map<std::string, unsigned __int8> _VkDebugReportObjectTypeEXT = {
  { "VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT", 0 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT", 1 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT", 2 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT", 3 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT", 4 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT", 5 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT", 6 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT", 7 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT", 8 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT", 9 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT", 10 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT", 11 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT", 12 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT", 13 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT", 14 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT", 15 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT", 16 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT", 17 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT", 18 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT", 19 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT", 20 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT", 21 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT", 22 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT", 23 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT", 24 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT", 25 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT", 26 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT", 27 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT", 28 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT", 29 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT", 30 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_OBJECT_TABLE_NVX_EXT", 31 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NVX_EXT", 32 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT", 33 },
  
};
std::map<std::string, unsigned __int8> _VkRasterizationOrderAMD = {
  { "VK_RASTERIZATION_ORDER_STRICT_AMD", 0 },
  { "VK_RASTERIZATION_ORDER_RELAXED_AMD", 1 },
  
};
std::map<std::string, unsigned __int8> _VkValidationCheckEXT = {
  { "VK_VALIDATION_CHECK_ALL_EXT", 0 },
  { "VK_VALIDATION_CHECK_SHADERS_EXT", 1 },
  
};
std::map<std::string, unsigned __int8> _VkIndirectCommandsTokenTypeNVX = {
  { "VK_INDIRECT_COMMANDS_TOKEN_TYPE_PIPELINE_NVX", 0 },
  { "VK_INDIRECT_COMMANDS_TOKEN_TYPE_DESCRIPTOR_SET_NVX", 1 },
  { "VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NVX", 2 },
  { "VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NVX", 3 },
  { "VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NVX", 4 },
  { "VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NVX", 5 },
  { "VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NVX", 6 },
  { "VK_INDIRECT_COMMANDS_TOKEN_TYPE_DISPATCH_NVX", 7 },
  
};
std::map<std::string, unsigned __int8> _VkObjectEntryTypeNVX = {
  { "VK_OBJECT_ENTRY_TYPE_DESCRIPTOR_SET_NVX", 0 },
  { "VK_OBJECT_ENTRY_TYPE_PIPELINE_NVX", 1 },
  { "VK_OBJECT_ENTRY_TYPE_INDEX_BUFFER_NVX", 2 },
  { "VK_OBJECT_ENTRY_TYPE_VERTEX_BUFFER_NVX", 3 },
  { "VK_OBJECT_ENTRY_TYPE_PUSH_CONSTANT_NVX", 4 },
  
};
std::map<std::string, unsigned __int8> _VkDisplayPowerStateEXT = {
  { "VK_DISPLAY_POWER_STATE_OFF_EXT", 0 },
  { "VK_DISPLAY_POWER_STATE_SUSPEND_EXT", 1 },
  { "VK_DISPLAY_POWER_STATE_ON_EXT", 2 },
  
};
std::map<std::string, unsigned __int8> _VkDeviceEventTypeEXT = {
  { "VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT", 0 },
  
};
std::map<std::string, unsigned __int8> _VkDisplayEventTypeEXT = {
  { "VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT", 0 },
  
};
std::map<std::string, unsigned __int8> _VkViewportCoordinateSwizzleNV = {
  { "VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV", 0 },
  { "VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV", 1 },
  { "VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV", 2 },
  { "VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV", 3 },
  { "VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV", 4 },
  { "VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV", 5 },
  { "VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV", 6 },
  { "VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV", 7 },
  
};
std::map<std::string, unsigned __int8> _VkDiscardRectangleModeEXT = {
  { "VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT", 0 },
  { "VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT", 1 },
  
};
std::map<std::string, unsigned __int8> _VkPointClippingBehavior = {
  { "VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES", 0 },
  { "VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY", 1 },
  
};
std::map<std::string, unsigned __int8> _VkSamplerReductionModeEXT = {
  { "VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT", 0 },
  { "VK_SAMPLER_REDUCTION_MODE_MIN_EXT", 1 },
  { "VK_SAMPLER_REDUCTION_MODE_MAX_EXT", 2 },
  
};
std::map<std::string, unsigned __int8> _VkTessellationDomainOrigin = {
  { "VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT", 0 },
  { "VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT", 1 },
  
};
std::map<std::string, unsigned __int8> _VkSamplerYcbcrModelConversion = {
  { "VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY", 0 },
  { "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY", 1 },
  { "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709", 2 },
  { "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601", 3 },
  { "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020", 4 },
  
};
std::map<std::string, unsigned __int8> _VkSamplerYcbcrRange = {
  { "VK_SAMPLER_YCBCR_RANGE_ITU_FULL", 0 },
  { "VK_SAMPLER_YCBCR_RANGE_ITU_NARROW", 1 },
  
};
std::map<std::string, unsigned __int8> _VkChromaLocation = {
  { "VK_CHROMA_LOCATION_COSITED_EVEN", 0 },
  { "VK_CHROMA_LOCATION_MIDPOINT", 1 },
  
};
std::map<std::string, unsigned __int8> _VkBlendOverlapEXT = {
  { "VK_BLEND_OVERLAP_UNCORRELATED_EXT", 0 },
  { "VK_BLEND_OVERLAP_DISJOINT_EXT", 1 },
  { "VK_BLEND_OVERLAP_CONJOINT_EXT", 2 },
  
};
std::map<std::string, unsigned __int8> _VkCoverageModulationModeNV = {
  { "VK_COVERAGE_MODULATION_MODE_NONE_NV", 0 },
  { "VK_COVERAGE_MODULATION_MODE_RGB_NV", 1 },
  { "VK_COVERAGE_MODULATION_MODE_ALPHA_NV", 2 },
  { "VK_COVERAGE_MODULATION_MODE_RGBA_NV", 3 },
  
};
std::map<std::string, unsigned __int8> _VkValidationCacheHeaderVersionEXT = {
  { "VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT", 1 },
  
};
std::map<std::string, unsigned __int8> _VkShaderInfoTypeAMD = {
  { "VK_SHADER_INFO_TYPE_STATISTICS_AMD", 0 },
  { "VK_SHADER_INFO_TYPE_BINARY_AMD", 1 },
  { "VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD", 2 },
  
};
std::map<std::string, unsigned __int8> _VkQueueGlobalPriorityEXT = {
  { "VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT", 128 },
  { "VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT", 256 },
  { "VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT", 512 },
  { "VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT", 1024 },
  
};
std::map<std::string, unsigned __int8> _VkConservativeRasterizationModeEXT = {
  { "VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT", 0 },
  { "VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT", 1 },
  { "VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT", 2 },
  
};
std::map<std::string, unsigned __int8> _VkCullModeFlagBits = {
  { "VK_CULL_MODE_NONE", 0 },
  { "VK_CULL_MODE_FRONT_BIT", 0 },
  { "VK_CULL_MODE_BACK_BIT", 1 },
  { "VK_CULL_MODE_FRONT_AND_BACK", 0x00000003 },
  
};
std::map<std::string, unsigned __int8> _VkQueueFlagBits = {
  { "VK_QUEUE_GRAPHICS_BIT", 0 },
  { "VK_QUEUE_COMPUTE_BIT", 1 },
  { "VK_QUEUE_TRANSFER_BIT", 2 },
  { "VK_QUEUE_SPARSE_BINDING_BIT", 3 },
  
};
std::map<std::string, unsigned __int8> _VkDeviceQueueCreateFlagBits = {
  
};
std::map<std::string, unsigned __int8> _VkMemoryPropertyFlagBits = {
  { "VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT", 0 },
  { "VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT", 1 },
  { "VK_MEMORY_PROPERTY_HOST_COHERENT_BIT", 2 },
  { "VK_MEMORY_PROPERTY_HOST_CACHED_BIT", 3 },
  { "VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT", 4 },
  
};
std::map<std::string, unsigned __int8> _VkMemoryHeapFlagBits = {
  { "VK_MEMORY_HEAP_DEVICE_LOCAL_BIT", 0 },
  
};
std::map<std::string, unsigned __int8> _VkAccessFlagBits = {
  { "VK_ACCESS_INDIRECT_COMMAND_READ_BIT", 0 },
  { "VK_ACCESS_INDEX_READ_BIT", 1 },
  { "VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT", 2 },
  { "VK_ACCESS_UNIFORM_READ_BIT", 3 },
  { "VK_ACCESS_INPUT_ATTACHMENT_READ_BIT", 4 },
  { "VK_ACCESS_SHADER_READ_BIT", 5 },
  { "VK_ACCESS_SHADER_WRITE_BIT", 6 },
  { "VK_ACCESS_COLOR_ATTACHMENT_READ_BIT", 7 },
  { "VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT", 8 },
  { "VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT", 9 },
  { "VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT", 10 },
  { "VK_ACCESS_TRANSFER_READ_BIT", 11 },
  { "VK_ACCESS_TRANSFER_WRITE_BIT", 12 },
  { "VK_ACCESS_HOST_READ_BIT", 13 },
  { "VK_ACCESS_HOST_WRITE_BIT", 14 },
  { "VK_ACCESS_MEMORY_READ_BIT", 15 },
  { "VK_ACCESS_MEMORY_WRITE_BIT", 16 },
  
};
std::map<std::string, unsigned __int8> _VkBufferUsageFlagBits = {
  { "VK_BUFFER_USAGE_TRANSFER_SRC_BIT", 0 },
  { "VK_BUFFER_USAGE_TRANSFER_DST_BIT", 1 },
  { "VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT", 2 },
  { "VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT", 3 },
  { "VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT", 4 },
  { "VK_BUFFER_USAGE_STORAGE_BUFFER_BIT", 5 },
  { "VK_BUFFER_USAGE_INDEX_BUFFER_BIT", 6 },
  { "VK_BUFFER_USAGE_VERTEX_BUFFER_BIT", 7 },
  { "VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT", 8 },
  
};
std::map<std::string, unsigned __int8> _VkBufferCreateFlagBits = {
  { "VK_BUFFER_CREATE_SPARSE_BINDING_BIT", 0 },
  { "VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT", 1 },
  { "VK_BUFFER_CREATE_SPARSE_ALIASED_BIT", 2 },
  
};
std::map<std::string, unsigned __int8> _VkShaderStageFlagBits = {
  { "VK_SHADER_STAGE_VERTEX_BIT", 0 },
  { "VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT", 1 },
  { "VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT", 2 },
  { "VK_SHADER_STAGE_GEOMETRY_BIT", 3 },
  { "VK_SHADER_STAGE_FRAGMENT_BIT", 4 },
  { "VK_SHADER_STAGE_COMPUTE_BIT", 5 },
  { "VK_SHADER_STAGE_ALL_GRAPHICS", 0x0000001F },
  { "VK_SHADER_STAGE_ALL", 0x7FFFFFFF },
  
};
std::map<std::string, unsigned __int8> _VkImageUsageFlagBits = {
  { "VK_IMAGE_USAGE_TRANSFER_SRC_BIT", 0 },
  { "VK_IMAGE_USAGE_TRANSFER_DST_BIT", 1 },
  { "VK_IMAGE_USAGE_SAMPLED_BIT", 2 },
  { "VK_IMAGE_USAGE_STORAGE_BIT", 3 },
  { "VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT", 4 },
  { "VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT", 5 },
  { "VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT", 6 },
  { "VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT", 7 },
  
};
std::map<std::string, unsigned __int8> _VkImageCreateFlagBits = {
  { "VK_IMAGE_CREATE_SPARSE_BINDING_BIT", 0 },
  { "VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT", 1 },
  { "VK_IMAGE_CREATE_SPARSE_ALIASED_BIT", 2 },
  { "VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT", 3 },
  { "VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT", 4 },
  
};
std::map<std::string, unsigned __int8> _VkPipelineCreateFlagBits = {
  { "VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT", 0 },
  { "VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT", 1 },
  { "VK_PIPELINE_CREATE_DERIVATIVE_BIT", 2 },
  
};
std::map<std::string, unsigned __int8> _VkColorComponentFlagBits = {
  { "VK_COLOR_COMPONENT_R_BIT", 0 },
  { "VK_COLOR_COMPONENT_G_BIT", 1 },
  { "VK_COLOR_COMPONENT_B_BIT", 2 },
  { "VK_COLOR_COMPONENT_A_BIT", 3 },
  
};
std::map<std::string, unsigned __int8> _VkFenceCreateFlagBits = {
  { "VK_FENCE_CREATE_SIGNALED_BIT", 0 },
  
};
std::map<std::string, unsigned __int8> _VkFormatFeatureFlagBits = {
  { "VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT", 0 },
  { "VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT", 1 },
  { "VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT", 2 },
  { "VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT", 3 },
  { "VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT", 4 },
  { "VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT", 5 },
  { "VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT", 6 },
  { "VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT", 7 },
  { "VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT", 8 },
  { "VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT", 9 },
  { "VK_FORMAT_FEATURE_BLIT_SRC_BIT", 10 },
  { "VK_FORMAT_FEATURE_BLIT_DST_BIT", 11 },
  { "VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT", 12 },
  
};
std::map<std::string, unsigned __int8> _VkQueryControlFlagBits = {
  { "VK_QUERY_CONTROL_PRECISE_BIT", 0 },
  
};
std::map<std::string, unsigned __int8> _VkQueryResultFlagBits = {
  { "VK_QUERY_RESULT_64_BIT", 0 },
  { "VK_QUERY_RESULT_WAIT_BIT", 1 },
  { "VK_QUERY_RESULT_WITH_AVAILABILITY_BIT", 2 },
  { "VK_QUERY_RESULT_PARTIAL_BIT", 3 },
  
};
std::map<std::string, unsigned __int8> _VkCommandBufferUsageFlagBits = {
  { "VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT", 0 },
  { "VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT", 1 },
  { "VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT", 2 },
  
};
std::map<std::string, unsigned __int8> _VkQueryPipelineStatisticFlagBits = {
  { "VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT", 0 },
  { "VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT", 1 },
  { "VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT", 2 },
  { "VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT", 3 },
  { "VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT", 4 },
  { "VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT", 5 },
  { "VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT", 6 },
  { "VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT", 7 },
  { "VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT", 8 },
  { "VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT", 9 },
  { "VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT", 10 },
  
};
std::map<std::string, unsigned __int8> _VkImageAspectFlagBits = {
  { "VK_IMAGE_ASPECT_COLOR_BIT", 0 },
  { "VK_IMAGE_ASPECT_DEPTH_BIT", 1 },
  { "VK_IMAGE_ASPECT_STENCIL_BIT", 2 },
  { "VK_IMAGE_ASPECT_METADATA_BIT", 3 },
  
};
std::map<std::string, unsigned __int8> _VkSparseImageFormatFlagBits = {
  { "VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT", 0 },
  { "VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT", 1 },
  { "VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT", 2 },
  
};
std::map<std::string, unsigned __int8> _VkSparseMemoryBindFlagBits = {
  { "VK_SPARSE_MEMORY_BIND_METADATA_BIT", 0 },
  
};
std::map<std::string, unsigned __int8> _VkPipelineStageFlagBits = {
  { "VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT", 0 },
  { "VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT", 1 },
  { "VK_PIPELINE_STAGE_VERTEX_INPUT_BIT", 2 },
  { "VK_PIPELINE_STAGE_VERTEX_SHADER_BIT", 3 },
  { "VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT", 4 },
  { "VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT", 5 },
  { "VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT", 6 },
  { "VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT", 7 },
  { "VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT", 8 },
  { "VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT", 9 },
  { "VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT", 10 },
  { "VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT", 11 },
  { "VK_PIPELINE_STAGE_TRANSFER_BIT", 12 },
  { "VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT", 13 },
  { "VK_PIPELINE_STAGE_HOST_BIT", 14 },
  { "VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT", 15 },
  { "VK_PIPELINE_STAGE_ALL_COMMANDS_BIT", 16 },
  
};
std::map<std::string, unsigned __int8> _VkCommandPoolCreateFlagBits = {
  { "VK_COMMAND_POOL_CREATE_TRANSIENT_BIT", 0 },
  { "VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT", 1 },
  
};
std::map<std::string, unsigned __int8> _VkCommandPoolResetFlagBits = {
  { "VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT", 0 },
  
};
std::map<std::string, unsigned __int8> _VkCommandBufferResetFlagBits = {
  { "VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT", 0 },
  
};
std::map<std::string, unsigned __int8> _VkSampleCountFlagBits = {
  { "VK_SAMPLE_COUNT_1_BIT", 0 },
  { "VK_SAMPLE_COUNT_2_BIT", 1 },
  { "VK_SAMPLE_COUNT_4_BIT", 2 },
  { "VK_SAMPLE_COUNT_8_BIT", 3 },
  { "VK_SAMPLE_COUNT_16_BIT", 4 },
  { "VK_SAMPLE_COUNT_32_BIT", 5 },
  { "VK_SAMPLE_COUNT_64_BIT", 6 },
  
};
std::map<std::string, unsigned __int8> _VkAttachmentDescriptionFlagBits = {
  { "VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT", 0 },
  
};
std::map<std::string, unsigned __int8> _VkStencilFaceFlagBits = {
  { "VK_STENCIL_FACE_FRONT_BIT", 0 },
  { "VK_STENCIL_FACE_BACK_BIT", 1 },
  { "VK_STENCIL_FRONT_AND_BACK", 0x00000003 },
  
};
std::map<std::string, unsigned __int8> _VkDescriptorPoolCreateFlagBits = {
  { "VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT", 0 },
  
};
std::map<std::string, unsigned __int8> _VkDependencyFlagBits = {
  { "VK_DEPENDENCY_BY_REGION_BIT", 0 },
  
};
std::map<std::string, unsigned __int8> _VkDisplayPlaneAlphaFlagBitsKHR = {
  { "VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR", 0 },
  { "VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR", 1 },
  { "VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR", 2 },
  { "VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR", 3 },
  
};
std::map<std::string, unsigned __int8> _VkCompositeAlphaFlagBitsKHR = {
  { "VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR", 0 },
  { "VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR", 1 },
  { "VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR", 2 },
  { "VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR", 3 },
  
};
std::map<std::string, unsigned __int8> _VkSurfaceTransformFlagBitsKHR = {
  { "VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR", 0 },
  { "VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR", 1 },
  { "VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR", 2 },
  { "VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR", 3 },
  { "VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR", 4 },
  { "VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR", 5 },
  { "VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR", 6 },
  { "VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR", 7 },
  { "VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR", 8 },
  
};
std::map<std::string, unsigned __int8> _VkDebugReportFlagBitsEXT = {
  { "VK_DEBUG_REPORT_INFORMATION_BIT_EXT", 0 },
  { "VK_DEBUG_REPORT_WARNING_BIT_EXT", 1 },
  { "VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT", 2 },
  { "VK_DEBUG_REPORT_ERROR_BIT_EXT", 3 },
  { "VK_DEBUG_REPORT_DEBUG_BIT_EXT", 4 },
  
};
std::map<std::string, unsigned __int8> _VkExternalMemoryHandleTypeFlagBitsNV = {
  { "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV", 0 },
  { "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV", 1 },
  { "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV", 2 },
  { "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV", 3 },
  
};
std::map<std::string, unsigned __int8> _VkExternalMemoryFeatureFlagBitsNV = {
  { "VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV", 0 },
  { "VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV", 1 },
  { "VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV", 2 },
  
};
std::map<std::string, unsigned __int8> _VkSubgroupFeatureFlagBits = {
  { "VK_SUBGROUP_FEATURE_BASIC_BIT", 0 },
  { "VK_SUBGROUP_FEATURE_VOTE_BIT", 1 },
  { "VK_SUBGROUP_FEATURE_ARITHMETIC_BIT", 2 },
  { "VK_SUBGROUP_FEATURE_BALLOT_BIT", 3 },
  { "VK_SUBGROUP_FEATURE_SHUFFLE_BIT", 4 },
  { "VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT", 5 },
  { "VK_SUBGROUP_FEATURE_CLUSTERED_BIT", 6 },
  { "VK_SUBGROUP_FEATURE_QUAD_BIT", 7 },
  
};
std::map<std::string, unsigned __int8> _VkIndirectCommandsLayoutUsageFlagBitsNVX = {
  { "VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NVX", 0 },
  { "VK_INDIRECT_COMMANDS_LAYOUT_USAGE_SPARSE_SEQUENCES_BIT_NVX", 1 },
  { "VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EMPTY_EXECUTIONS_BIT_NVX", 2 },
  { "VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NVX", 3 },
  
};
std::map<std::string, unsigned __int8> _VkObjectEntryUsageFlagBitsNVX = {
  { "VK_OBJECT_ENTRY_USAGE_GRAPHICS_BIT_NVX", 0 },
  { "VK_OBJECT_ENTRY_USAGE_COMPUTE_BIT_NVX", 1 },
  
};
std::map<std::string, unsigned __int8> _VkDescriptorSetLayoutCreateFlagBits = {
  
};
std::map<std::string, unsigned __int8> _VkExternalMemoryHandleTypeFlagBits = {
  { "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT", 0 },
  { "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT", 1 },
  { "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT", 2 },
  { "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT", 3 },
  { "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT", 4 },
  { "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT", 5 },
  { "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT", 6 },
  
};
std::map<std::string, unsigned __int8> _VkExternalMemoryFeatureFlagBits = {
  { "VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT", 0 },
  { "VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT", 1 },
  { "VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT", 2 },
  
};
std::map<std::string, unsigned __int8> _VkExternalSemaphoreHandleTypeFlagBits = {
  { "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT", 0 },
  { "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT", 1 },
  { "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT", 2 },
  { "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT", 3 },
  { "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT", 4 },
  
};
std::map<std::string, unsigned __int8> _VkExternalSemaphoreFeatureFlagBits = {
  { "VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT", 0 },
  { "VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT", 1 },
  
};
std::map<std::string, unsigned __int8> _VkSemaphoreImportFlagBits = {
  { "VK_SEMAPHORE_IMPORT_TEMPORARY_BIT", 0 },
  
};
std::map<std::string, unsigned __int8> _VkExternalFenceHandleTypeFlagBits = {
  { "VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT", 0 },
  { "VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT", 1 },
  { "VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT", 2 },
  { "VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT", 3 },
  
};
std::map<std::string, unsigned __int8> _VkExternalFenceFeatureFlagBits = {
  { "VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT", 0 },
  { "VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT", 1 },
  
};
std::map<std::string, unsigned __int8> _VkFenceImportFlagBits = {
  { "VK_FENCE_IMPORT_TEMPORARY_BIT", 0 },
  
};
std::map<std::string, unsigned __int8> _VkSurfaceCounterFlagBitsEXT = {
  { "VK_SURFACE_COUNTER_VBLANK_EXT", 0 },
  
};
std::map<std::string, unsigned __int8> _VkPeerMemoryFeatureFlagBits = {
  { "VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT", 0 },
  { "VK_PEER_MEMORY_FEATURE_COPY_DST_BIT", 1 },
  { "VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT", 2 },
  { "VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT", 3 },
  
};
std::map<std::string, unsigned __int8> _VkMemoryAllocateFlagBits = {
  { "VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT", 0 },
  
};
std::map<std::string, unsigned __int8> _VkDeviceGroupPresentModeFlagBitsKHR = {
  { "VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR", 0 },
  { "VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR", 1 },
  { "VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR", 2 },
  { "VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR", 3 },
  
};
std::map<std::string, unsigned __int8> _VkSwapchainCreateFlagBitsKHR = {
  
};
std::map<std::string, unsigned __int8> _VkSubpassDescriptionFlagBits = {
  
};
std::map<std::string, unsigned __int8> _VkDebugUtilsMessageSeverityFlagBitsEXT = {
  { "VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT", 0 },
  { "VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT", 4 },
  { "VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT", 8 },
  { "VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT", 12 },
  
};
std::map<std::string, unsigned __int8> _VkDebugUtilsMessageTypeFlagBitsEXT = {
  { "VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT", 0 },
  { "VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT", 1 },
  { "VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT", 2 },
  
};
std::map<std::string, unsigned __int8> _VkDescriptorBindingFlagBitsEXT = {
  { "VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT", 0 },
  { "VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT", 1 },
  { "VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT", 2 },
  { "VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT", 3 },
  
};

void getVulkanEnumerations(const Nan::FunctionCallbackInfo<v8::Value>& info) {
  v8::Local<v8::Object> out = Nan::New<v8::Object>();

  std::map<std::string, unsigned __int8>::iterator it;
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkImageLayout.begin(); it != _VkImageLayout.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkImageLayout").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkAttachmentLoadOp.begin(); it != _VkAttachmentLoadOp.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkAttachmentLoadOp").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkAttachmentStoreOp.begin(); it != _VkAttachmentStoreOp.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkAttachmentStoreOp").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkImageType.begin(); it != _VkImageType.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkImageType").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkImageTiling.begin(); it != _VkImageTiling.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkImageTiling").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkImageViewType.begin(); it != _VkImageViewType.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkImageViewType").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkCommandBufferLevel.begin(); it != _VkCommandBufferLevel.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkCommandBufferLevel").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkComponentSwizzle.begin(); it != _VkComponentSwizzle.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkComponentSwizzle").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkDescriptorType.begin(); it != _VkDescriptorType.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkDescriptorType").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkQueryType.begin(); it != _VkQueryType.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkQueryType").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkBorderColor.begin(); it != _VkBorderColor.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkBorderColor").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkPipelineBindPoint.begin(); it != _VkPipelineBindPoint.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkPipelineBindPoint").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkPipelineCacheHeaderVersion.begin(); it != _VkPipelineCacheHeaderVersion.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkPipelineCacheHeaderVersion").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkPrimitiveTopology.begin(); it != _VkPrimitiveTopology.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkPrimitiveTopology").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkSharingMode.begin(); it != _VkSharingMode.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkSharingMode").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkIndexType.begin(); it != _VkIndexType.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkIndexType").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkFilter.begin(); it != _VkFilter.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkFilter").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkSamplerMipmapMode.begin(); it != _VkSamplerMipmapMode.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkSamplerMipmapMode").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkSamplerAddressMode.begin(); it != _VkSamplerAddressMode.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkSamplerAddressMode").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkCompareOp.begin(); it != _VkCompareOp.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkCompareOp").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkPolygonMode.begin(); it != _VkPolygonMode.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkPolygonMode").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkFrontFace.begin(); it != _VkFrontFace.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkFrontFace").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkBlendFactor.begin(); it != _VkBlendFactor.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkBlendFactor").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkBlendOp.begin(); it != _VkBlendOp.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkBlendOp").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkStencilOp.begin(); it != _VkStencilOp.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkStencilOp").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkLogicOp.begin(); it != _VkLogicOp.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkLogicOp").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkInternalAllocationType.begin(); it != _VkInternalAllocationType.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkInternalAllocationType").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkSystemAllocationScope.begin(); it != _VkSystemAllocationScope.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkSystemAllocationScope").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkPhysicalDeviceType.begin(); it != _VkPhysicalDeviceType.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkPhysicalDeviceType").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkVertexInputRate.begin(); it != _VkVertexInputRate.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkVertexInputRate").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkFormat.begin(); it != _VkFormat.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkFormat").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkStructureType.begin(); it != _VkStructureType.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkStructureType").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkSubpassContents.begin(); it != _VkSubpassContents.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkSubpassContents").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkResult.begin(); it != _VkResult.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkResult").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkDynamicState.begin(); it != _VkDynamicState.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkDynamicState").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkDescriptorUpdateTemplateType.begin(); it != _VkDescriptorUpdateTemplateType.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkDescriptorUpdateTemplateType").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkObjectType.begin(); it != _VkObjectType.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkObjectType").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkPresentModeKHR.begin(); it != _VkPresentModeKHR.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkPresentModeKHR").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkColorSpaceKHR.begin(); it != _VkColorSpaceKHR.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkColorSpaceKHR").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkDebugReportObjectTypeEXT.begin(); it != _VkDebugReportObjectTypeEXT.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkDebugReportObjectTypeEXT").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkRasterizationOrderAMD.begin(); it != _VkRasterizationOrderAMD.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkRasterizationOrderAMD").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkValidationCheckEXT.begin(); it != _VkValidationCheckEXT.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkValidationCheckEXT").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkIndirectCommandsTokenTypeNVX.begin(); it != _VkIndirectCommandsTokenTypeNVX.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkIndirectCommandsTokenTypeNVX").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkObjectEntryTypeNVX.begin(); it != _VkObjectEntryTypeNVX.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkObjectEntryTypeNVX").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkDisplayPowerStateEXT.begin(); it != _VkDisplayPowerStateEXT.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkDisplayPowerStateEXT").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkDeviceEventTypeEXT.begin(); it != _VkDeviceEventTypeEXT.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkDeviceEventTypeEXT").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkDisplayEventTypeEXT.begin(); it != _VkDisplayEventTypeEXT.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkDisplayEventTypeEXT").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkViewportCoordinateSwizzleNV.begin(); it != _VkViewportCoordinateSwizzleNV.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkViewportCoordinateSwizzleNV").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkDiscardRectangleModeEXT.begin(); it != _VkDiscardRectangleModeEXT.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkDiscardRectangleModeEXT").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkPointClippingBehavior.begin(); it != _VkPointClippingBehavior.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkPointClippingBehavior").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkSamplerReductionModeEXT.begin(); it != _VkSamplerReductionModeEXT.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkSamplerReductionModeEXT").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkTessellationDomainOrigin.begin(); it != _VkTessellationDomainOrigin.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkTessellationDomainOrigin").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkSamplerYcbcrModelConversion.begin(); it != _VkSamplerYcbcrModelConversion.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkSamplerYcbcrModelConversion").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkSamplerYcbcrRange.begin(); it != _VkSamplerYcbcrRange.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkSamplerYcbcrRange").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkChromaLocation.begin(); it != _VkChromaLocation.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkChromaLocation").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkBlendOverlapEXT.begin(); it != _VkBlendOverlapEXT.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkBlendOverlapEXT").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkCoverageModulationModeNV.begin(); it != _VkCoverageModulationModeNV.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkCoverageModulationModeNV").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkValidationCacheHeaderVersionEXT.begin(); it != _VkValidationCacheHeaderVersionEXT.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkValidationCacheHeaderVersionEXT").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkShaderInfoTypeAMD.begin(); it != _VkShaderInfoTypeAMD.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkShaderInfoTypeAMD").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkQueueGlobalPriorityEXT.begin(); it != _VkQueueGlobalPriorityEXT.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkQueueGlobalPriorityEXT").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkConservativeRasterizationModeEXT.begin(); it != _VkConservativeRasterizationModeEXT.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkConservativeRasterizationModeEXT").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkCullModeFlagBits.begin(); it != _VkCullModeFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkCullModeFlagBits").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkQueueFlagBits.begin(); it != _VkQueueFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkQueueFlagBits").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkDeviceQueueCreateFlagBits.begin(); it != _VkDeviceQueueCreateFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkDeviceQueueCreateFlagBits").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkMemoryPropertyFlagBits.begin(); it != _VkMemoryPropertyFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkMemoryPropertyFlagBits").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkMemoryHeapFlagBits.begin(); it != _VkMemoryHeapFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkMemoryHeapFlagBits").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkAccessFlagBits.begin(); it != _VkAccessFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkAccessFlagBits").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkBufferUsageFlagBits.begin(); it != _VkBufferUsageFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkBufferUsageFlagBits").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkBufferCreateFlagBits.begin(); it != _VkBufferCreateFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkBufferCreateFlagBits").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkShaderStageFlagBits.begin(); it != _VkShaderStageFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkShaderStageFlagBits").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkImageUsageFlagBits.begin(); it != _VkImageUsageFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkImageUsageFlagBits").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkImageCreateFlagBits.begin(); it != _VkImageCreateFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkImageCreateFlagBits").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkPipelineCreateFlagBits.begin(); it != _VkPipelineCreateFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkPipelineCreateFlagBits").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkColorComponentFlagBits.begin(); it != _VkColorComponentFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkColorComponentFlagBits").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkFenceCreateFlagBits.begin(); it != _VkFenceCreateFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkFenceCreateFlagBits").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkFormatFeatureFlagBits.begin(); it != _VkFormatFeatureFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkFormatFeatureFlagBits").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkQueryControlFlagBits.begin(); it != _VkQueryControlFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkQueryControlFlagBits").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkQueryResultFlagBits.begin(); it != _VkQueryResultFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkQueryResultFlagBits").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkCommandBufferUsageFlagBits.begin(); it != _VkCommandBufferUsageFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkCommandBufferUsageFlagBits").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkQueryPipelineStatisticFlagBits.begin(); it != _VkQueryPipelineStatisticFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkQueryPipelineStatisticFlagBits").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkImageAspectFlagBits.begin(); it != _VkImageAspectFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkImageAspectFlagBits").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkSparseImageFormatFlagBits.begin(); it != _VkSparseImageFormatFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkSparseImageFormatFlagBits").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkSparseMemoryBindFlagBits.begin(); it != _VkSparseMemoryBindFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkSparseMemoryBindFlagBits").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkPipelineStageFlagBits.begin(); it != _VkPipelineStageFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkPipelineStageFlagBits").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkCommandPoolCreateFlagBits.begin(); it != _VkCommandPoolCreateFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkCommandPoolCreateFlagBits").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkCommandPoolResetFlagBits.begin(); it != _VkCommandPoolResetFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkCommandPoolResetFlagBits").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkCommandBufferResetFlagBits.begin(); it != _VkCommandBufferResetFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkCommandBufferResetFlagBits").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkSampleCountFlagBits.begin(); it != _VkSampleCountFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkSampleCountFlagBits").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkAttachmentDescriptionFlagBits.begin(); it != _VkAttachmentDescriptionFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkAttachmentDescriptionFlagBits").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkStencilFaceFlagBits.begin(); it != _VkStencilFaceFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkStencilFaceFlagBits").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkDescriptorPoolCreateFlagBits.begin(); it != _VkDescriptorPoolCreateFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkDescriptorPoolCreateFlagBits").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkDependencyFlagBits.begin(); it != _VkDependencyFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkDependencyFlagBits").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkDisplayPlaneAlphaFlagBitsKHR.begin(); it != _VkDisplayPlaneAlphaFlagBitsKHR.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkDisplayPlaneAlphaFlagBitsKHR").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkCompositeAlphaFlagBitsKHR.begin(); it != _VkCompositeAlphaFlagBitsKHR.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkCompositeAlphaFlagBitsKHR").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkSurfaceTransformFlagBitsKHR.begin(); it != _VkSurfaceTransformFlagBitsKHR.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkSurfaceTransformFlagBitsKHR").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkDebugReportFlagBitsEXT.begin(); it != _VkDebugReportFlagBitsEXT.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkDebugReportFlagBitsEXT").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkExternalMemoryHandleTypeFlagBitsNV.begin(); it != _VkExternalMemoryHandleTypeFlagBitsNV.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkExternalMemoryHandleTypeFlagBitsNV").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkExternalMemoryFeatureFlagBitsNV.begin(); it != _VkExternalMemoryFeatureFlagBitsNV.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkExternalMemoryFeatureFlagBitsNV").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkSubgroupFeatureFlagBits.begin(); it != _VkSubgroupFeatureFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkSubgroupFeatureFlagBits").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkIndirectCommandsLayoutUsageFlagBitsNVX.begin(); it != _VkIndirectCommandsLayoutUsageFlagBitsNVX.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkIndirectCommandsLayoutUsageFlagBitsNVX").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkObjectEntryUsageFlagBitsNVX.begin(); it != _VkObjectEntryUsageFlagBitsNVX.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkObjectEntryUsageFlagBitsNVX").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkDescriptorSetLayoutCreateFlagBits.begin(); it != _VkDescriptorSetLayoutCreateFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkDescriptorSetLayoutCreateFlagBits").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkExternalMemoryHandleTypeFlagBits.begin(); it != _VkExternalMemoryHandleTypeFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkExternalMemoryHandleTypeFlagBits").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkExternalMemoryFeatureFlagBits.begin(); it != _VkExternalMemoryFeatureFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkExternalMemoryFeatureFlagBits").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkExternalSemaphoreHandleTypeFlagBits.begin(); it != _VkExternalSemaphoreHandleTypeFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkExternalSemaphoreHandleTypeFlagBits").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkExternalSemaphoreFeatureFlagBits.begin(); it != _VkExternalSemaphoreFeatureFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkExternalSemaphoreFeatureFlagBits").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkSemaphoreImportFlagBits.begin(); it != _VkSemaphoreImportFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkSemaphoreImportFlagBits").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkExternalFenceHandleTypeFlagBits.begin(); it != _VkExternalFenceHandleTypeFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkExternalFenceHandleTypeFlagBits").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkExternalFenceFeatureFlagBits.begin(); it != _VkExternalFenceFeatureFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkExternalFenceFeatureFlagBits").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkFenceImportFlagBits.begin(); it != _VkFenceImportFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkFenceImportFlagBits").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkSurfaceCounterFlagBitsEXT.begin(); it != _VkSurfaceCounterFlagBitsEXT.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkSurfaceCounterFlagBitsEXT").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkPeerMemoryFeatureFlagBits.begin(); it != _VkPeerMemoryFeatureFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkPeerMemoryFeatureFlagBits").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkMemoryAllocateFlagBits.begin(); it != _VkMemoryAllocateFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkMemoryAllocateFlagBits").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkDeviceGroupPresentModeFlagBitsKHR.begin(); it != _VkDeviceGroupPresentModeFlagBitsKHR.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkDeviceGroupPresentModeFlagBitsKHR").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkSwapchainCreateFlagBitsKHR.begin(); it != _VkSwapchainCreateFlagBitsKHR.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkSwapchainCreateFlagBitsKHR").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkSubpassDescriptionFlagBits.begin(); it != _VkSubpassDescriptionFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkSubpassDescriptionFlagBits").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkDebugUtilsMessageSeverityFlagBitsEXT.begin(); it != _VkDebugUtilsMessageSeverityFlagBitsEXT.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkDebugUtilsMessageSeverityFlagBitsEXT").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkDebugUtilsMessageTypeFlagBitsEXT.begin(); it != _VkDebugUtilsMessageTypeFlagBitsEXT.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkDebugUtilsMessageTypeFlagBitsEXT").ToLocalChecked(), entry);
  }
  {
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkDescriptorBindingFlagBitsEXT.begin(); it != _VkDescriptorBindingFlagBitsEXT.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<int>(it->second)));
    };
    out->Set(Nan::New("VkDescriptorBindingFlagBitsEXT").ToLocalChecked(), entry);
  }
  
  info.GetReturnValue().Set(out);
};

#endif
