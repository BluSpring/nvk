/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY nvk v0.7.1
 */
declare var VkInout: { $: number | boolean; }
export interface VkInout { $: number | boolean; }

declare var VkInoutAddress: { $: bigint; }
export interface VkInoutAddress { $: bigint; }

type BigUint64Array = Float32Array
declare const BigUint64Array: typeof Float32Array

declare global {

  interface ObjectConstructor {
    assign(...objects: Object[]): Object;
  }
  
  interface ArrayBufferConstructor {
    fromAddress: (ptr: bigint, size: number) => ArrayBuffer;
    getAddress: (data: ArrayBuffer) => bigint;
  }

  var VkInout: { $: number | boolean; }
  interface VkInout { $: number | boolean; }

  var VkInoutAddress: { $: bigint; }
  interface VkInoutAddress { $: bigint; }

  
  /**
   * 
   * @member VK_KHR_SURFACE_EXTENSION_NAME
   * @member VK_KHR_SWAPCHAIN_EXTENSION_NAME
   * @member VK_KHR_DISPLAY_EXTENSION_NAME
   * @member VK_KHR_DISPLAY_SWAPCHAIN_EXTENSION_NAME
   * @member VK_KHR_XLIB_SURFACE_EXTENSION_NAME
   * @member VK_KHR_XCB_SURFACE_EXTENSION_NAME
   * @member VK_KHR_WAYLAND_SURFACE_EXTENSION_NAME
   * @member VK_KHR_MIR_SURFACE_EXTENSION_NAME
   * @member VK_KHR_ANDROID_SURFACE_EXTENSION_NAME
   * @member VK_KHR_WIN32_SURFACE_EXTENSION_NAME
   * @member VK_ANDROID_NATIVE_BUFFER_NAME
   * @member VK_EXT_DEBUG_REPORT_EXTENSION_NAME
   * @member VK_NV_GLSL_SHADER_EXTENSION_NAME
   * @member VK_EXT_DEPTH_RANGE_UNRESTRICTED_EXTENSION_NAME
   * @member VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_EXTENSION_NAME
   * @member VK_IMG_FILTER_CUBIC_EXTENSION_NAME
   * @member VK_AMD_EXTENSION_17_EXTENSION_NAME
   * @member VK_AMD_EXTENSION_18_EXTENSION_NAME
   * @member VK_AMD_RASTERIZATION_ORDER_EXTENSION_NAME
   * @member VK_AMD_EXTENSION_20_EXTENSION_NAME
   * @member VK_AMD_SHADER_TRINARY_MINMAX_EXTENSION_NAME
   * @member VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_EXTENSION_NAME
   * @member VK_EXT_DEBUG_MARKER_EXTENSION_NAME
   * @member VK_AMD_EXTENSION_24_EXTENSION_NAME
   * @member VK_AMD_EXTENSION_25_EXTENSION_NAME
   * @member VK_AMD_GCN_SHADER_EXTENSION_NAME
   * @member VK_NV_DEDICATED_ALLOCATION_EXTENSION_NAME
   * @member VK_EXT_EXTENSION_28_EXTENSION_NAME
   * @member VK_EXT_TRANSFORM_FEEDBACK_EXTENSION_NAME
   * @member VK_NVX_EXTENSION_30_EXTENSION_NAME
   * @member VK_NVX_IMAGE_VIEW_HANDLE_EXTENSION_NAME
   * @member VK_AMD_EXTENSION_32_EXTENSION_NAME
   * @member VK_AMD_EXTENSION_33_EXTENSION_NAME
   * @member VK_AMD_DRAW_INDIRECT_COUNT_EXTENSION_NAME
   * @member VK_AMD_EXTENSION_35_EXTENSION_NAME
   * @member VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_EXTENSION_NAME
   * @member VK_AMD_GPU_SHADER_HALF_FLOAT_EXTENSION_NAME
   * @member VK_AMD_SHADER_BALLOT_EXTENSION_NAME
   * @member VK_AMD_EXTENSION_39_EXTENSION_NAME
   * @member VK_AMD_EXTENSION_40_EXTENSION_NAME
   * @member VK_AMD_EXTENSION_41_EXTENSION_NAME
   * @member VK_AMD_TEXTURE_GATHER_BIAS_LOD_EXTENSION_NAME
   * @member VK_AMD_SHADER_INFO_EXTENSION_NAME
   * @member VK_AMD_EXTENSION_44_EXTENSION_NAME
   * @member VK_AMD_EXTENSION_45_EXTENSION_NAME
   * @member VK_AMD_EXTENSION_46_EXTENSION_NAME
   * @member VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_EXTENSION_NAME
   * @member VK_NVX_EXTENSION_48_EXTENSION_NAME
   * @member VK_GOOGLE_EXTENSION_49_EXTENSION_NAME
   * @member VK_GGP_STREAM_DESCRIPTOR_SURFACE_EXTENSION_NAME
   * @member VK_NV_CORNER_SAMPLED_IMAGE_EXTENSION_NAME
   * @member VK_NV_EXTENSION_52_EXTENSION_NAME
   * @member VK_NV_EXTENSION_53_EXTENSION_NAME
   * @member VK_KHR_MULTIVIEW_EXTENSION_NAME
   * @member VK_IMG_FORMAT_PVRTC_EXTENSION_NAME
   * @member VK_NV_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME
   * @member VK_NV_EXTERNAL_MEMORY_EXTENSION_NAME
   * @member VK_NV_EXTERNAL_MEMORY_WIN32_EXTENSION_NAME
   * @member VK_NV_WIN32_KEYED_MUTEX_EXTENSION_NAME
   * @member VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME
   * @member VK_KHR_DEVICE_GROUP_EXTENSION_NAME
   * @member VK_EXT_VALIDATION_FLAGS_EXTENSION_NAME
   * @member VK_NN_VI_SURFACE_EXTENSION_NAME
   * @member VK_KHR_SHADER_DRAW_PARAMETERS_EXTENSION_NAME
   * @member VK_EXT_SHADER_SUBGROUP_BALLOT_EXTENSION_NAME
   * @member VK_EXT_SHADER_SUBGROUP_VOTE_EXTENSION_NAME
   * @member VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_EXTENSION_NAME
   * @member VK_EXT_ASTC_DECODE_MODE_EXTENSION_NAME
   * @member VK_IMG_EXTENSION_69_EXTENSION_NAME
   * @member VK_KHR_MAINTENANCE1_EXTENSION_NAME
   * @member VK_KHR_DEVICE_GROUP_CREATION_EXTENSION_NAME
   * @member VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME
   * @member VK_KHR_EXTERNAL_MEMORY_EXTENSION_NAME
   * @member VK_KHR_EXTERNAL_MEMORY_WIN32_EXTENSION_NAME
   * @member VK_KHR_EXTERNAL_MEMORY_FD_EXTENSION_NAME
   * @member VK_KHR_WIN32_KEYED_MUTEX_EXTENSION_NAME
   * @member VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_EXTENSION_NAME
   * @member VK_KHR_EXTERNAL_SEMAPHORE_EXTENSION_NAME
   * @member VK_KHR_EXTERNAL_SEMAPHORE_WIN32_EXTENSION_NAME
   * @member VK_KHR_EXTERNAL_SEMAPHORE_FD_EXTENSION_NAME
   * @member VK_KHR_PUSH_DESCRIPTOR_EXTENSION_NAME
   * @member VK_EXT_CONDITIONAL_RENDERING_EXTENSION_NAME
   * @member VK_KHR_SHADER_FLOAT16_INT8_EXTENSION_NAME
   * @member VK_KHR_16BIT_STORAGE_EXTENSION_NAME
   * @member VK_KHR_INCREMENTAL_PRESENT_EXTENSION_NAME
   * @member VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_EXTENSION_NAME
   * @member VK_NVX_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME
   * @member VK_NV_CLIP_SPACE_W_SCALING_EXTENSION_NAME
   * @member VK_EXT_DIRECT_MODE_DISPLAY_EXTENSION_NAME
   * @member VK_EXT_ACQUIRE_XLIB_DISPLAY_EXTENSION_NAME
   * @member VK_EXT_DISPLAY_SURFACE_COUNTER_EXTENSION_NAME
   * @member VK_EXT_DISPLAY_CONTROL_EXTENSION_NAME
   * @member VK_GOOGLE_DISPLAY_TIMING_EXTENSION_NAME
   * @member VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_EXTENSION_NAME
   * @member VK_NV_GEOMETRY_SHADER_PASSTHROUGH_EXTENSION_NAME
   * @member VK_NV_VIEWPORT_ARRAY2_EXTENSION_NAME
   * @member VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_EXTENSION_NAME
   * @member VK_NV_VIEWPORT_SWIZZLE_EXTENSION_NAME
   * @member VK_EXT_DISCARD_RECTANGLES_EXTENSION_NAME
   * @member VK_NV_EXTENSION_101_EXTENSION_NAME
   * @member VK_EXT_CONSERVATIVE_RASTERIZATION_EXTENSION_NAME
   * @member VK_EXT_DEPTH_CLIP_ENABLE_EXTENSION_NAME
   * @member VK_NV_EXTENSION_104_EXTENSION_NAME
   * @member VK_EXT_SWAPCHAIN_COLOR_SPACE_EXTENSION_NAME
   * @member VK_EXT_HDR_METADATA_EXTENSION_NAME
   * @member VK_IMG_EXTENSION_107_EXTENSION_NAME
   * @member VK_IMG_EXTENSION_108_EXTENSION_NAME
   * @member VK_KHR_IMAGELESS_FRAMEBUFFER_EXTENSION_NAME
   * @member VK_KHR_CREATE_RENDERPASS_2_EXTENSION_NAME
   * @member VK_IMG_EXTENSION_111_EXTENSION_NAME
   * @member VK_KHR_SHARED_PRESENTABLE_IMAGE_EXTENSION_NAME
   * @member VK_KHR_EXTERNAL_FENCE_CAPABILITIES_EXTENSION_NAME
   * @member VK_KHR_EXTERNAL_FENCE_EXTENSION_NAME
   * @member VK_KHR_EXTERNAL_FENCE_WIN32_EXTENSION_NAME
   * @member VK_KHR_EXTERNAL_FENCE_FD_EXTENSION_NAME
   * @member VK_KHR_EXTENSION_117_EXTENSION_NAME
   * @member VK_KHR_MAINTENANCE2_EXTENSION_NAME
   * @member VK_KHR_EXTENSION_119_EXTENSION_NAME
   * @member VK_KHR_GET_SURFACE_CAPABILITIES_2_EXTENSION_NAME
   * @member VK_KHR_VARIABLE_POINTERS_EXTENSION_NAME
   * @member VK_KHR_GET_DISPLAY_PROPERTIES_2_EXTENSION_NAME
   * @member VK_MVK_IOS_SURFACE_EXTENSION_NAME
   * @member VK_MVK_MACOS_SURFACE_EXTENSION_NAME
   * @member VK_MVK_MOLTENVK_EXTENSION_NAME
   * @member VK_EXT_EXTERNAL_MEMORY_DMA_BUF_EXTENSION_NAME
   * @member VK_EXT_QUEUE_FAMILY_FOREIGN_EXTENSION_NAME
   * @member VK_KHR_DEDICATED_ALLOCATION_EXTENSION_NAME
   * @member VK_EXT_DEBUG_UTILS_EXTENSION_NAME
   * @member VK_ANDROID_EXTERNAL_MEMORY_ANDROID_HARDWARE_BUFFER_EXTENSION_NAME
   * @member VK_EXT_SAMPLER_FILTER_MINMAX_EXTENSION_NAME
   * @member VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_EXTENSION_NAME
   * @member VK_AMD_GPU_SHADER_INT16_EXTENSION_NAME
   * @member VK_AMD_EXTENSION_134_EXTENSION_NAME
   * @member VK_AMD_EXTENSION_135_EXTENSION_NAME
   * @member VK_AMD_EXTENSION_136_EXTENSION_NAME
   * @member VK_AMD_MIXED_ATTACHMENT_SAMPLES_EXTENSION_NAME
   * @member VK_AMD_SHADER_FRAGMENT_MASK_EXTENSION_NAME
   * @member VK_EXT_INLINE_UNIFORM_BLOCK_EXTENSION_NAME
   * @member VK_AMD_EXTENSION_140_EXTENSION_NAME
   * @member VK_EXT_SHADER_STENCIL_EXPORT_EXTENSION_NAME
   * @member VK_AMD_EXTENSION_142_EXTENSION_NAME
   * @member VK_AMD_EXTENSION_143_EXTENSION_NAME
   * @member VK_EXT_SAMPLE_LOCATIONS_EXTENSION_NAME
   * @member VK_KHR_RELAXED_BLOCK_LAYOUT_EXTENSION_NAME
   * @member VK_KHR_GET_MEMORY_REQUIREMENTS_2_EXTENSION_NAME
   * @member VK_KHR_IMAGE_FORMAT_LIST_EXTENSION_NAME
   * @member VK_EXT_BLEND_OPERATION_ADVANCED_EXTENSION_NAME
   * @member VK_NV_FRAGMENT_COVERAGE_TO_COLOR_EXTENSION_NAME
   * @member VK_NV_EXTENSION_151_EXTENSION_NAME
   * @member VK_NV_EXTENSION_152_EXTENSION_NAME
   * @member VK_NV_FRAMEBUFFER_MIXED_SAMPLES_EXTENSION_NAME
   * @member VK_NV_FILL_RECTANGLE_EXTENSION_NAME
   * @member VK_NV_SHADER_SM_BUILTINS_EXTENSION_NAME
   * @member VK_EXT_POST_DEPTH_COVERAGE_EXTENSION_NAME
   * @member VK_KHR_SAMPLER_YCBCR_CONVERSION_EXTENSION_NAME
   * @member VK_KHR_BIND_MEMORY_2_EXTENSION_NAME
   * @member VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_EXTENSION_NAME
   * @member VK_EXT_EXTENSION_160_EXTENSION_NAME
   * @member VK_EXT_VALIDATION_CACHE_EXTENSION_NAME
   * @member VK_EXT_DESCRIPTOR_INDEXING_EXTENSION_NAME
   * @member VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_EXTENSION_NAME
   * @member VK_EXT_EXTENSION_164_EXTENSION_NAME
   * @member VK_NV_SHADING_RATE_IMAGE_EXTENSION_NAME
   * @member VK_NV_RAY_TRACING_EXTENSION_NAME
   * @member VK_NV_REPRESENTATIVE_FRAGMENT_TEST_EXTENSION_NAME
   * @member VK_EXT_EXTENSION_168_EXTENSION_NAME
   * @member VK_KHR_MAINTENANCE3_EXTENSION_NAME
   * @member VK_KHR_DRAW_INDIRECT_COUNT_EXTENSION_NAME
   * @member VK_EXT_FILTER_CUBIC_EXTENSION_NAME
   * @member VK_QCOM_extension_172_EXTENSION_NAME
   * @member VK_QCOM_extension_173_EXTENSION_NAME
   * @member VK_QCOM_extension_174_EXTENSION_NAME
   * @member VK_EXT_GLOBAL_PRIORITY_EXTENSION_NAME
   * @member VK_KHR_EXTENSION_176_EXTENSION_NAME
   * @member VK_KHR_EXTENSION_177_EXTENSION_NAME
   * @member VK_KHR_8BIT_STORAGE_EXTENSION_NAME
   * @member VK_EXT_EXTERNAL_MEMORY_HOST_EXTENSION_NAME
   * @member VK_AMD_BUFFER_MARKER_EXTENSION_NAME
   * @member VK_KHR_SHADER_ATOMIC_INT64_EXTENSION_NAME
   * @member VK_KHR_EXTENSION_182_EXTENSION_NAME
   * @member VK_KHR_EXTENSION_183_EXTENSION_NAME
   * @member VK_AMD_PIPELINE_COMPILER_CONTROL_EXTENSION_NAME
   * @member VK_EXT_CALIBRATED_TIMESTAMPS_EXTENSION_NAME
   * @member VK_AMD_SHADER_CORE_PROPERTIES_EXTENSION_NAME
   * @member VK_KHR_EXTENSION_187_EXTENSION_NAME
   * @member VK_KHR_EXTENSION_188_EXTENSION_NAME
   * @member VK_KHR_EXTENSION_189_EXTENSION_NAME
   * @member VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_EXTENSION_NAME
   * @member VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME
   * @member VK_GGP_FRAME_TOKEN_EXTENSION_NAME
   * @member VK_EXT_PIPELINE_CREATION_FEEDBACK_EXTENSION_NAME
   * @member VK_GOOGLE_EXTENSION_194_EXTENSION_NAME
   * @member VK_GOOGLE_EXTENSION_195_EXTENSION_NAME
   * @member VK_GOOGLE_EXTENSION_196_EXTENSION_NAME
   * @member VK_KHR_DRIVER_PROPERTIES_EXTENSION_NAME
   * @member VK_KHR_SHADER_FLOAT_CONTROLS_EXTENSION_NAME
   * @member VK_NV_SHADER_SUBGROUP_PARTITIONED_EXTENSION_NAME
   * @member VK_KHR_DEPTH_STENCIL_RESOLVE_EXTENSION_NAME
   * @member VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_EXTENSION_NAME
   * @member VK_NV_COMPUTE_SHADER_DERIVATIVES_EXTENSION_NAME
   * @member VK_NV_MESH_SHADER_EXTENSION_NAME
   * @member VK_NV_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME
   * @member VK_NV_SHADER_IMAGE_FOOTPRINT_EXTENSION_NAME
   * @member VK_NV_SCISSOR_EXCLUSIVE_EXTENSION_NAME
   * @member VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_EXTENSION_NAME
   * @member VK_KHR_EXTENSION_208_EXTENSION_NAME
   * @member VK_KHR_EXTENSION_209_EXTENSION_NAME
   * @member VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_EXTENSION_NAME
   * @member VK_INTEL_PERFORMANCE_QUERY_EXTENSION_NAME
   * @member VK_KHR_VULKAN_MEMORY_MODEL_EXTENSION_NAME
   * @member VK_EXT_PCI_BUS_INFO_EXTENSION_NAME
   * @member VK_AMD_DISPLAY_NATIVE_HDR_EXTENSION_NAME
   * @member VK_FUCHSIA_IMAGEPIPE_SURFACE_EXTENSION_NAME
   * @member VK_KHR_EXTENSION_216_EXTENSION_NAME
   * @member VK_KHR_EXTENSION_217_EXTENSION_NAME
   * @member VK_EXT_METAL_SURFACE_EXTENSION_NAME
   * @member VK_EXT_FRAGMENT_DENSITY_MAP_EXTENSION_NAME
   * @member VK_EXT_EXTENSION_220_EXTENSION_NAME
   * @member VK_KHR_EXTENSION_221_EXTENSION_NAME
   * @member VK_EXT_SCALAR_BLOCK_LAYOUT_EXTENSION_NAME
   * @member VK_EXT_EXTENSION_223_EXTENSION_NAME
   * @member VK_GOOGLE_HLSL_FUNCTIONALITY1_EXTENSION_NAME
   * @member VK_GOOGLE_DECORATE_STRING_EXTENSION_NAME
   * @member VK_EXT_SUBGROUP_SIZE_CONTROL_EXTENSION_NAME
   * @member VK_AMD_EXTENSION_227_EXTENSION_NAME
   * @member VK_AMD_SHADER_CORE_PROPERTIES_2_EXTENSION_NAME
   * @member VK_AMD_EXTENSION_229_EXTENSION_NAME
   * @member VK_AMD_DEVICE_COHERENT_MEMORY_EXTENSION_NAME
   * @member VK_AMD_EXTENSION_231_EXTENSION_NAME
   * @member VK_AMD_EXTENSION_232_EXTENSION_NAME
   * @member VK_AMD_EXTENSION_233_EXTENSION_NAME
   * @member VK_AMD_EXTENSION_234_EXTENSION_NAME
   * @member VK_AMD_EXTENSION_235_EXTENSION_NAME
   * @member VK_AMD_EXTENSION_236_EXTENSION_NAME
   * @member VK_KHR_EXTENSION_237_EXTENSION_NAME
   * @member VK_EXT_MEMORY_BUDGET_EXTENSION_NAME
   * @member VK_EXT_MEMORY_PRIORITY_EXTENSION_NAME
   * @member VK_KHR_SURFACE_PROTECTED_CAPABILITIES_EXTENSION_NAME
   * @member VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_EXTENSION_NAME
   * @member VK_NV_EXTENSION_242_EXTENSION_NAME
   * @member VK_INTEL_EXTENSION_243_EXTENSION_NAME
   * @member VK_MESA_EXTENSION_244_EXTENSION_NAME
   * @member VK_EXT_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME
   * @member VK_EXT_EXTENSION_246_EXTENSION_NAME
   * @member VK_EXT_SEPARATE_STENCIL_USAGE_EXTENSION_NAME
   * @member VK_EXT_VALIDATION_FEATURES_EXTENSION_NAME
   * @member VK_KHR_EXTENSION_249_EXTENSION_NAME
   * @member VK_NV_COOPERATIVE_MATRIX_EXTENSION_NAME
   * @member VK_NV_COVERAGE_REDUCTION_MODE_EXTENSION_NAME
   * @member VK_EXT_FRAGMENT_SHADER_INTERLOCK_EXTENSION_NAME
   * @member VK_EXT_YCBCR_IMAGE_ARRAYS_EXTENSION_NAME
   * @member VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_EXTENSION_NAME
   * @member VK_EXT_EXTENSION_255_EXTENSION_NAME
   * @member VK_EXT_FULL_SCREEN_EXCLUSIVE_EXTENSION_NAME
   * @member VK_EXT_HEADLESS_SURFACE_EXTENSION_NAME
   * @member VK_EXT_EXTENSION_258_EXTENSION_NAME
   * @member VK_EXT_EXTENSION_259_EXTENSION_NAME
   * @member VK_EXT_LINE_RASTERIZATION_EXTENSION_NAME
   * @member VK_NV_EXTENSION_261_EXTENSION_NAME
   * @member VK_EXT_HOST_QUERY_RESET_EXTENSION_NAME
   * @member VK_GOOGLE_EXTENSION_263_EXTENSION_NAME
   * @member VK_BRCM_EXTENSION_264_EXTENSION_NAME
   * @member VK_BRCM_EXTENSION_265_EXTENSION_NAME
   * @member VK_EXT_INDEX_TYPE_UINT8_EXTENSION_NAME
   * @member VK_EXT_extension_267
   * @member VK_EXT_extension_268
   * @member VK_KHR_extension_269
   * @member VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_EXTENSION_NAME
   * @member VK_INTEL_extension_271
   * @member VK_INTEL_extension_272
   * @member VK_INTEL_extension_273
   * @member VK_INTEL_extension_274
   * @member VK_KHR_extension_275
   * @member VK_KHR_extension_276
   * @member VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_EXTENSION_NAME
   * @member VK_NV_extension_278
   * @member VK_NV_extension_279
   * @member VK_KHR_extension_280
   * @member VK_ARM_extension_281
   * @member VK_EXT_TEXEL_BUFFER_ALIGNMENT_EXTENSION_NAME
   * @member VK_QCOM_extension_283
   * @member VK_EXT_extension_284
   * @member VK_EXT_extension_285
   * @member VK_EXT_extension_286
   * @member VK_NVX_EXTENSION_287_EXTENSION_NAME
   * @member VK_NVX_EXTENSION_288_EXTENSION_NAME
   * @member VK_EXT_EXTENSION_289_EXTENSION_NAME
   */
  enum API_Extensions_Strings {
    VK_KHR_SURFACE_EXTENSION_NAME,
    VK_KHR_SWAPCHAIN_EXTENSION_NAME,
    VK_KHR_DISPLAY_EXTENSION_NAME,
    VK_KHR_DISPLAY_SWAPCHAIN_EXTENSION_NAME,
    VK_KHR_XLIB_SURFACE_EXTENSION_NAME,
    VK_KHR_XCB_SURFACE_EXTENSION_NAME,
    VK_KHR_WAYLAND_SURFACE_EXTENSION_NAME,
    VK_KHR_MIR_SURFACE_EXTENSION_NAME,
    VK_KHR_ANDROID_SURFACE_EXTENSION_NAME,
    VK_KHR_WIN32_SURFACE_EXTENSION_NAME,
    VK_ANDROID_NATIVE_BUFFER_NAME,
    VK_EXT_DEBUG_REPORT_EXTENSION_NAME,
    VK_NV_GLSL_SHADER_EXTENSION_NAME,
    VK_EXT_DEPTH_RANGE_UNRESTRICTED_EXTENSION_NAME,
    VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_EXTENSION_NAME,
    VK_IMG_FILTER_CUBIC_EXTENSION_NAME,
    VK_AMD_EXTENSION_17_EXTENSION_NAME,
    VK_AMD_EXTENSION_18_EXTENSION_NAME,
    VK_AMD_RASTERIZATION_ORDER_EXTENSION_NAME,
    VK_AMD_EXTENSION_20_EXTENSION_NAME,
    VK_AMD_SHADER_TRINARY_MINMAX_EXTENSION_NAME,
    VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_EXTENSION_NAME,
    VK_EXT_DEBUG_MARKER_EXTENSION_NAME,
    VK_AMD_EXTENSION_24_EXTENSION_NAME,
    VK_AMD_EXTENSION_25_EXTENSION_NAME,
    VK_AMD_GCN_SHADER_EXTENSION_NAME,
    VK_NV_DEDICATED_ALLOCATION_EXTENSION_NAME,
    VK_EXT_EXTENSION_28_EXTENSION_NAME,
    VK_EXT_TRANSFORM_FEEDBACK_EXTENSION_NAME,
    VK_NVX_EXTENSION_30_EXTENSION_NAME,
    VK_NVX_IMAGE_VIEW_HANDLE_EXTENSION_NAME,
    VK_AMD_EXTENSION_32_EXTENSION_NAME,
    VK_AMD_EXTENSION_33_EXTENSION_NAME,
    VK_AMD_DRAW_INDIRECT_COUNT_EXTENSION_NAME,
    VK_AMD_EXTENSION_35_EXTENSION_NAME,
    VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_EXTENSION_NAME,
    VK_AMD_GPU_SHADER_HALF_FLOAT_EXTENSION_NAME,
    VK_AMD_SHADER_BALLOT_EXTENSION_NAME,
    VK_AMD_EXTENSION_39_EXTENSION_NAME,
    VK_AMD_EXTENSION_40_EXTENSION_NAME,
    VK_AMD_EXTENSION_41_EXTENSION_NAME,
    VK_AMD_TEXTURE_GATHER_BIAS_LOD_EXTENSION_NAME,
    VK_AMD_SHADER_INFO_EXTENSION_NAME,
    VK_AMD_EXTENSION_44_EXTENSION_NAME,
    VK_AMD_EXTENSION_45_EXTENSION_NAME,
    VK_AMD_EXTENSION_46_EXTENSION_NAME,
    VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_EXTENSION_NAME,
    VK_NVX_EXTENSION_48_EXTENSION_NAME,
    VK_GOOGLE_EXTENSION_49_EXTENSION_NAME,
    VK_GGP_STREAM_DESCRIPTOR_SURFACE_EXTENSION_NAME,
    VK_NV_CORNER_SAMPLED_IMAGE_EXTENSION_NAME,
    VK_NV_EXTENSION_52_EXTENSION_NAME,
    VK_NV_EXTENSION_53_EXTENSION_NAME,
    VK_KHR_MULTIVIEW_EXTENSION_NAME,
    VK_IMG_FORMAT_PVRTC_EXTENSION_NAME,
    VK_NV_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME,
    VK_NV_EXTERNAL_MEMORY_EXTENSION_NAME,
    VK_NV_EXTERNAL_MEMORY_WIN32_EXTENSION_NAME,
    VK_NV_WIN32_KEYED_MUTEX_EXTENSION_NAME,
    VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME,
    VK_KHR_DEVICE_GROUP_EXTENSION_NAME,
    VK_EXT_VALIDATION_FLAGS_EXTENSION_NAME,
    VK_NN_VI_SURFACE_EXTENSION_NAME,
    VK_KHR_SHADER_DRAW_PARAMETERS_EXTENSION_NAME,
    VK_EXT_SHADER_SUBGROUP_BALLOT_EXTENSION_NAME,
    VK_EXT_SHADER_SUBGROUP_VOTE_EXTENSION_NAME,
    VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_EXTENSION_NAME,
    VK_EXT_ASTC_DECODE_MODE_EXTENSION_NAME,
    VK_IMG_EXTENSION_69_EXTENSION_NAME,
    VK_KHR_MAINTENANCE1_EXTENSION_NAME,
    VK_KHR_DEVICE_GROUP_CREATION_EXTENSION_NAME,
    VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME,
    VK_KHR_EXTERNAL_MEMORY_EXTENSION_NAME,
    VK_KHR_EXTERNAL_MEMORY_WIN32_EXTENSION_NAME,
    VK_KHR_EXTERNAL_MEMORY_FD_EXTENSION_NAME,
    VK_KHR_WIN32_KEYED_MUTEX_EXTENSION_NAME,
    VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_EXTENSION_NAME,
    VK_KHR_EXTERNAL_SEMAPHORE_EXTENSION_NAME,
    VK_KHR_EXTERNAL_SEMAPHORE_WIN32_EXTENSION_NAME,
    VK_KHR_EXTERNAL_SEMAPHORE_FD_EXTENSION_NAME,
    VK_KHR_PUSH_DESCRIPTOR_EXTENSION_NAME,
    VK_EXT_CONDITIONAL_RENDERING_EXTENSION_NAME,
    VK_KHR_SHADER_FLOAT16_INT8_EXTENSION_NAME,
    VK_KHR_16BIT_STORAGE_EXTENSION_NAME,
    VK_KHR_INCREMENTAL_PRESENT_EXTENSION_NAME,
    VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_EXTENSION_NAME,
    VK_NVX_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME,
    VK_NV_CLIP_SPACE_W_SCALING_EXTENSION_NAME,
    VK_EXT_DIRECT_MODE_DISPLAY_EXTENSION_NAME,
    VK_EXT_ACQUIRE_XLIB_DISPLAY_EXTENSION_NAME,
    VK_EXT_DISPLAY_SURFACE_COUNTER_EXTENSION_NAME,
    VK_EXT_DISPLAY_CONTROL_EXTENSION_NAME,
    VK_GOOGLE_DISPLAY_TIMING_EXTENSION_NAME,
    VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_EXTENSION_NAME,
    VK_NV_GEOMETRY_SHADER_PASSTHROUGH_EXTENSION_NAME,
    VK_NV_VIEWPORT_ARRAY2_EXTENSION_NAME,
    VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_EXTENSION_NAME,
    VK_NV_VIEWPORT_SWIZZLE_EXTENSION_NAME,
    VK_EXT_DISCARD_RECTANGLES_EXTENSION_NAME,
    VK_NV_EXTENSION_101_EXTENSION_NAME,
    VK_EXT_CONSERVATIVE_RASTERIZATION_EXTENSION_NAME,
    VK_EXT_DEPTH_CLIP_ENABLE_EXTENSION_NAME,
    VK_NV_EXTENSION_104_EXTENSION_NAME,
    VK_EXT_SWAPCHAIN_COLOR_SPACE_EXTENSION_NAME,
    VK_EXT_HDR_METADATA_EXTENSION_NAME,
    VK_IMG_EXTENSION_107_EXTENSION_NAME,
    VK_IMG_EXTENSION_108_EXTENSION_NAME,
    VK_KHR_IMAGELESS_FRAMEBUFFER_EXTENSION_NAME,
    VK_KHR_CREATE_RENDERPASS_2_EXTENSION_NAME,
    VK_IMG_EXTENSION_111_EXTENSION_NAME,
    VK_KHR_SHARED_PRESENTABLE_IMAGE_EXTENSION_NAME,
    VK_KHR_EXTERNAL_FENCE_CAPABILITIES_EXTENSION_NAME,
    VK_KHR_EXTERNAL_FENCE_EXTENSION_NAME,
    VK_KHR_EXTERNAL_FENCE_WIN32_EXTENSION_NAME,
    VK_KHR_EXTERNAL_FENCE_FD_EXTENSION_NAME,
    VK_KHR_EXTENSION_117_EXTENSION_NAME,
    VK_KHR_MAINTENANCE2_EXTENSION_NAME,
    VK_KHR_EXTENSION_119_EXTENSION_NAME,
    VK_KHR_GET_SURFACE_CAPABILITIES_2_EXTENSION_NAME,
    VK_KHR_VARIABLE_POINTERS_EXTENSION_NAME,
    VK_KHR_GET_DISPLAY_PROPERTIES_2_EXTENSION_NAME,
    VK_MVK_IOS_SURFACE_EXTENSION_NAME,
    VK_MVK_MACOS_SURFACE_EXTENSION_NAME,
    VK_MVK_MOLTENVK_EXTENSION_NAME,
    VK_EXT_EXTERNAL_MEMORY_DMA_BUF_EXTENSION_NAME,
    VK_EXT_QUEUE_FAMILY_FOREIGN_EXTENSION_NAME,
    VK_KHR_DEDICATED_ALLOCATION_EXTENSION_NAME,
    VK_EXT_DEBUG_UTILS_EXTENSION_NAME,
    VK_ANDROID_EXTERNAL_MEMORY_ANDROID_HARDWARE_BUFFER_EXTENSION_NAME,
    VK_EXT_SAMPLER_FILTER_MINMAX_EXTENSION_NAME,
    VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_EXTENSION_NAME,
    VK_AMD_GPU_SHADER_INT16_EXTENSION_NAME,
    VK_AMD_EXTENSION_134_EXTENSION_NAME,
    VK_AMD_EXTENSION_135_EXTENSION_NAME,
    VK_AMD_EXTENSION_136_EXTENSION_NAME,
    VK_AMD_MIXED_ATTACHMENT_SAMPLES_EXTENSION_NAME,
    VK_AMD_SHADER_FRAGMENT_MASK_EXTENSION_NAME,
    VK_EXT_INLINE_UNIFORM_BLOCK_EXTENSION_NAME,
    VK_AMD_EXTENSION_140_EXTENSION_NAME,
    VK_EXT_SHADER_STENCIL_EXPORT_EXTENSION_NAME,
    VK_AMD_EXTENSION_142_EXTENSION_NAME,
    VK_AMD_EXTENSION_143_EXTENSION_NAME,
    VK_EXT_SAMPLE_LOCATIONS_EXTENSION_NAME,
    VK_KHR_RELAXED_BLOCK_LAYOUT_EXTENSION_NAME,
    VK_KHR_GET_MEMORY_REQUIREMENTS_2_EXTENSION_NAME,
    VK_KHR_IMAGE_FORMAT_LIST_EXTENSION_NAME,
    VK_EXT_BLEND_OPERATION_ADVANCED_EXTENSION_NAME,
    VK_NV_FRAGMENT_COVERAGE_TO_COLOR_EXTENSION_NAME,
    VK_NV_EXTENSION_151_EXTENSION_NAME,
    VK_NV_EXTENSION_152_EXTENSION_NAME,
    VK_NV_FRAMEBUFFER_MIXED_SAMPLES_EXTENSION_NAME,
    VK_NV_FILL_RECTANGLE_EXTENSION_NAME,
    VK_NV_SHADER_SM_BUILTINS_EXTENSION_NAME,
    VK_EXT_POST_DEPTH_COVERAGE_EXTENSION_NAME,
    VK_KHR_SAMPLER_YCBCR_CONVERSION_EXTENSION_NAME,
    VK_KHR_BIND_MEMORY_2_EXTENSION_NAME,
    VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_EXTENSION_NAME,
    VK_EXT_EXTENSION_160_EXTENSION_NAME,
    VK_EXT_VALIDATION_CACHE_EXTENSION_NAME,
    VK_EXT_DESCRIPTOR_INDEXING_EXTENSION_NAME,
    VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_EXTENSION_NAME,
    VK_EXT_EXTENSION_164_EXTENSION_NAME,
    VK_NV_SHADING_RATE_IMAGE_EXTENSION_NAME,
    VK_NV_RAY_TRACING_EXTENSION_NAME,
    VK_NV_REPRESENTATIVE_FRAGMENT_TEST_EXTENSION_NAME,
    VK_EXT_EXTENSION_168_EXTENSION_NAME,
    VK_KHR_MAINTENANCE3_EXTENSION_NAME,
    VK_KHR_DRAW_INDIRECT_COUNT_EXTENSION_NAME,
    VK_EXT_FILTER_CUBIC_EXTENSION_NAME,
    VK_QCOM_extension_172_EXTENSION_NAME,
    VK_QCOM_extension_173_EXTENSION_NAME,
    VK_QCOM_extension_174_EXTENSION_NAME,
    VK_EXT_GLOBAL_PRIORITY_EXTENSION_NAME,
    VK_KHR_EXTENSION_176_EXTENSION_NAME,
    VK_KHR_EXTENSION_177_EXTENSION_NAME,
    VK_KHR_8BIT_STORAGE_EXTENSION_NAME,
    VK_EXT_EXTERNAL_MEMORY_HOST_EXTENSION_NAME,
    VK_AMD_BUFFER_MARKER_EXTENSION_NAME,
    VK_KHR_SHADER_ATOMIC_INT64_EXTENSION_NAME,
    VK_KHR_EXTENSION_182_EXTENSION_NAME,
    VK_KHR_EXTENSION_183_EXTENSION_NAME,
    VK_AMD_PIPELINE_COMPILER_CONTROL_EXTENSION_NAME,
    VK_EXT_CALIBRATED_TIMESTAMPS_EXTENSION_NAME,
    VK_AMD_SHADER_CORE_PROPERTIES_EXTENSION_NAME,
    VK_KHR_EXTENSION_187_EXTENSION_NAME,
    VK_KHR_EXTENSION_188_EXTENSION_NAME,
    VK_KHR_EXTENSION_189_EXTENSION_NAME,
    VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_EXTENSION_NAME,
    VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME,
    VK_GGP_FRAME_TOKEN_EXTENSION_NAME,
    VK_EXT_PIPELINE_CREATION_FEEDBACK_EXTENSION_NAME,
    VK_GOOGLE_EXTENSION_194_EXTENSION_NAME,
    VK_GOOGLE_EXTENSION_195_EXTENSION_NAME,
    VK_GOOGLE_EXTENSION_196_EXTENSION_NAME,
    VK_KHR_DRIVER_PROPERTIES_EXTENSION_NAME,
    VK_KHR_SHADER_FLOAT_CONTROLS_EXTENSION_NAME,
    VK_NV_SHADER_SUBGROUP_PARTITIONED_EXTENSION_NAME,
    VK_KHR_DEPTH_STENCIL_RESOLVE_EXTENSION_NAME,
    VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_EXTENSION_NAME,
    VK_NV_COMPUTE_SHADER_DERIVATIVES_EXTENSION_NAME,
    VK_NV_MESH_SHADER_EXTENSION_NAME,
    VK_NV_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME,
    VK_NV_SHADER_IMAGE_FOOTPRINT_EXTENSION_NAME,
    VK_NV_SCISSOR_EXCLUSIVE_EXTENSION_NAME,
    VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_EXTENSION_NAME,
    VK_KHR_EXTENSION_208_EXTENSION_NAME,
    VK_KHR_EXTENSION_209_EXTENSION_NAME,
    VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_EXTENSION_NAME,
    VK_INTEL_PERFORMANCE_QUERY_EXTENSION_NAME,
    VK_KHR_VULKAN_MEMORY_MODEL_EXTENSION_NAME,
    VK_EXT_PCI_BUS_INFO_EXTENSION_NAME,
    VK_AMD_DISPLAY_NATIVE_HDR_EXTENSION_NAME,
    VK_FUCHSIA_IMAGEPIPE_SURFACE_EXTENSION_NAME,
    VK_KHR_EXTENSION_216_EXTENSION_NAME,
    VK_KHR_EXTENSION_217_EXTENSION_NAME,
    VK_EXT_METAL_SURFACE_EXTENSION_NAME,
    VK_EXT_FRAGMENT_DENSITY_MAP_EXTENSION_NAME,
    VK_EXT_EXTENSION_220_EXTENSION_NAME,
    VK_KHR_EXTENSION_221_EXTENSION_NAME,
    VK_EXT_SCALAR_BLOCK_LAYOUT_EXTENSION_NAME,
    VK_EXT_EXTENSION_223_EXTENSION_NAME,
    VK_GOOGLE_HLSL_FUNCTIONALITY1_EXTENSION_NAME,
    VK_GOOGLE_DECORATE_STRING_EXTENSION_NAME,
    VK_EXT_SUBGROUP_SIZE_CONTROL_EXTENSION_NAME,
    VK_AMD_EXTENSION_227_EXTENSION_NAME,
    VK_AMD_SHADER_CORE_PROPERTIES_2_EXTENSION_NAME,
    VK_AMD_EXTENSION_229_EXTENSION_NAME,
    VK_AMD_DEVICE_COHERENT_MEMORY_EXTENSION_NAME,
    VK_AMD_EXTENSION_231_EXTENSION_NAME,
    VK_AMD_EXTENSION_232_EXTENSION_NAME,
    VK_AMD_EXTENSION_233_EXTENSION_NAME,
    VK_AMD_EXTENSION_234_EXTENSION_NAME,
    VK_AMD_EXTENSION_235_EXTENSION_NAME,
    VK_AMD_EXTENSION_236_EXTENSION_NAME,
    VK_KHR_EXTENSION_237_EXTENSION_NAME,
    VK_EXT_MEMORY_BUDGET_EXTENSION_NAME,
    VK_EXT_MEMORY_PRIORITY_EXTENSION_NAME,
    VK_KHR_SURFACE_PROTECTED_CAPABILITIES_EXTENSION_NAME,
    VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_EXTENSION_NAME,
    VK_NV_EXTENSION_242_EXTENSION_NAME,
    VK_INTEL_EXTENSION_243_EXTENSION_NAME,
    VK_MESA_EXTENSION_244_EXTENSION_NAME,
    VK_EXT_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME,
    VK_EXT_EXTENSION_246_EXTENSION_NAME,
    VK_EXT_SEPARATE_STENCIL_USAGE_EXTENSION_NAME,
    VK_EXT_VALIDATION_FEATURES_EXTENSION_NAME,
    VK_KHR_EXTENSION_249_EXTENSION_NAME,
    VK_NV_COOPERATIVE_MATRIX_EXTENSION_NAME,
    VK_NV_COVERAGE_REDUCTION_MODE_EXTENSION_NAME,
    VK_EXT_FRAGMENT_SHADER_INTERLOCK_EXTENSION_NAME,
    VK_EXT_YCBCR_IMAGE_ARRAYS_EXTENSION_NAME,
    VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_EXTENSION_NAME,
    VK_EXT_EXTENSION_255_EXTENSION_NAME,
    VK_EXT_FULL_SCREEN_EXCLUSIVE_EXTENSION_NAME,
    VK_EXT_HEADLESS_SURFACE_EXTENSION_NAME,
    VK_EXT_EXTENSION_258_EXTENSION_NAME,
    VK_EXT_EXTENSION_259_EXTENSION_NAME,
    VK_EXT_LINE_RASTERIZATION_EXTENSION_NAME,
    VK_NV_EXTENSION_261_EXTENSION_NAME,
    VK_EXT_HOST_QUERY_RESET_EXTENSION_NAME,
    VK_GOOGLE_EXTENSION_263_EXTENSION_NAME,
    VK_BRCM_EXTENSION_264_EXTENSION_NAME,
    VK_BRCM_EXTENSION_265_EXTENSION_NAME,
    VK_EXT_INDEX_TYPE_UINT8_EXTENSION_NAME,
    VK_EXT_extension_267,
    VK_EXT_extension_268,
    VK_KHR_extension_269,
    VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_EXTENSION_NAME,
    VK_INTEL_extension_271,
    VK_INTEL_extension_272,
    VK_INTEL_extension_273,
    VK_INTEL_extension_274,
    VK_KHR_extension_275,
    VK_KHR_extension_276,
    VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_EXTENSION_NAME,
    VK_NV_extension_278,
    VK_NV_extension_279,
    VK_KHR_extension_280,
    VK_ARM_extension_281,
    VK_EXT_TEXEL_BUFFER_ALIGNMENT_EXTENSION_NAME,
    VK_QCOM_extension_283,
    VK_EXT_extension_284,
    VK_EXT_extension_285,
    VK_EXT_extension_286,
    VK_NVX_EXTENSION_287_EXTENSION_NAME,
    VK_NVX_EXTENSION_288_EXTENSION_NAME,
    VK_EXT_EXTENSION_289_EXTENSION_NAME,
    
  }

  const VK_KHR_SURFACE_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_SWAPCHAIN_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_DISPLAY_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_DISPLAY_SWAPCHAIN_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_XLIB_SURFACE_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_XCB_SURFACE_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_WAYLAND_SURFACE_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_MIR_SURFACE_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_ANDROID_SURFACE_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_WIN32_SURFACE_EXTENSION_NAME: API_Extensions_Strings;
  const VK_ANDROID_NATIVE_BUFFER_NAME: API_Extensions_Strings;
  const VK_EXT_DEBUG_REPORT_EXTENSION_NAME: API_Extensions_Strings;
  const VK_NV_GLSL_SHADER_EXTENSION_NAME: API_Extensions_Strings;
  const VK_EXT_DEPTH_RANGE_UNRESTRICTED_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_EXTENSION_NAME: API_Extensions_Strings;
  const VK_IMG_FILTER_CUBIC_EXTENSION_NAME: API_Extensions_Strings;
  const VK_AMD_EXTENSION_17_EXTENSION_NAME: API_Extensions_Strings;
  const VK_AMD_EXTENSION_18_EXTENSION_NAME: API_Extensions_Strings;
  const VK_AMD_RASTERIZATION_ORDER_EXTENSION_NAME: API_Extensions_Strings;
  const VK_AMD_EXTENSION_20_EXTENSION_NAME: API_Extensions_Strings;
  const VK_AMD_SHADER_TRINARY_MINMAX_EXTENSION_NAME: API_Extensions_Strings;
  const VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_EXTENSION_NAME: API_Extensions_Strings;
  const VK_EXT_DEBUG_MARKER_EXTENSION_NAME: API_Extensions_Strings;
  const VK_AMD_EXTENSION_24_EXTENSION_NAME: API_Extensions_Strings;
  const VK_AMD_EXTENSION_25_EXTENSION_NAME: API_Extensions_Strings;
  const VK_AMD_GCN_SHADER_EXTENSION_NAME: API_Extensions_Strings;
  const VK_NV_DEDICATED_ALLOCATION_EXTENSION_NAME: API_Extensions_Strings;
  const VK_EXT_EXTENSION_28_EXTENSION_NAME: API_Extensions_Strings;
  const VK_EXT_TRANSFORM_FEEDBACK_EXTENSION_NAME: API_Extensions_Strings;
  const VK_NVX_EXTENSION_30_EXTENSION_NAME: API_Extensions_Strings;
  const VK_NVX_IMAGE_VIEW_HANDLE_EXTENSION_NAME: API_Extensions_Strings;
  const VK_AMD_EXTENSION_32_EXTENSION_NAME: API_Extensions_Strings;
  const VK_AMD_EXTENSION_33_EXTENSION_NAME: API_Extensions_Strings;
  const VK_AMD_DRAW_INDIRECT_COUNT_EXTENSION_NAME: API_Extensions_Strings;
  const VK_AMD_EXTENSION_35_EXTENSION_NAME: API_Extensions_Strings;
  const VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_EXTENSION_NAME: API_Extensions_Strings;
  const VK_AMD_GPU_SHADER_HALF_FLOAT_EXTENSION_NAME: API_Extensions_Strings;
  const VK_AMD_SHADER_BALLOT_EXTENSION_NAME: API_Extensions_Strings;
  const VK_AMD_EXTENSION_39_EXTENSION_NAME: API_Extensions_Strings;
  const VK_AMD_EXTENSION_40_EXTENSION_NAME: API_Extensions_Strings;
  const VK_AMD_EXTENSION_41_EXTENSION_NAME: API_Extensions_Strings;
  const VK_AMD_TEXTURE_GATHER_BIAS_LOD_EXTENSION_NAME: API_Extensions_Strings;
  const VK_AMD_SHADER_INFO_EXTENSION_NAME: API_Extensions_Strings;
  const VK_AMD_EXTENSION_44_EXTENSION_NAME: API_Extensions_Strings;
  const VK_AMD_EXTENSION_45_EXTENSION_NAME: API_Extensions_Strings;
  const VK_AMD_EXTENSION_46_EXTENSION_NAME: API_Extensions_Strings;
  const VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_EXTENSION_NAME: API_Extensions_Strings;
  const VK_NVX_EXTENSION_48_EXTENSION_NAME: API_Extensions_Strings;
  const VK_GOOGLE_EXTENSION_49_EXTENSION_NAME: API_Extensions_Strings;
  const VK_GGP_STREAM_DESCRIPTOR_SURFACE_EXTENSION_NAME: API_Extensions_Strings;
  const VK_NV_CORNER_SAMPLED_IMAGE_EXTENSION_NAME: API_Extensions_Strings;
  const VK_NV_EXTENSION_52_EXTENSION_NAME: API_Extensions_Strings;
  const VK_NV_EXTENSION_53_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_MULTIVIEW_EXTENSION_NAME: API_Extensions_Strings;
  const VK_IMG_FORMAT_PVRTC_EXTENSION_NAME: API_Extensions_Strings;
  const VK_NV_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME: API_Extensions_Strings;
  const VK_NV_EXTERNAL_MEMORY_EXTENSION_NAME: API_Extensions_Strings;
  const VK_NV_EXTERNAL_MEMORY_WIN32_EXTENSION_NAME: API_Extensions_Strings;
  const VK_NV_WIN32_KEYED_MUTEX_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_DEVICE_GROUP_EXTENSION_NAME: API_Extensions_Strings;
  const VK_EXT_VALIDATION_FLAGS_EXTENSION_NAME: API_Extensions_Strings;
  const VK_NN_VI_SURFACE_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_SHADER_DRAW_PARAMETERS_EXTENSION_NAME: API_Extensions_Strings;
  const VK_EXT_SHADER_SUBGROUP_BALLOT_EXTENSION_NAME: API_Extensions_Strings;
  const VK_EXT_SHADER_SUBGROUP_VOTE_EXTENSION_NAME: API_Extensions_Strings;
  const VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_EXTENSION_NAME: API_Extensions_Strings;
  const VK_EXT_ASTC_DECODE_MODE_EXTENSION_NAME: API_Extensions_Strings;
  const VK_IMG_EXTENSION_69_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_MAINTENANCE1_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_DEVICE_GROUP_CREATION_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_EXTERNAL_MEMORY_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_EXTERNAL_MEMORY_WIN32_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_EXTERNAL_MEMORY_FD_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_WIN32_KEYED_MUTEX_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_EXTERNAL_SEMAPHORE_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_EXTERNAL_SEMAPHORE_WIN32_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_EXTERNAL_SEMAPHORE_FD_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_PUSH_DESCRIPTOR_EXTENSION_NAME: API_Extensions_Strings;
  const VK_EXT_CONDITIONAL_RENDERING_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_SHADER_FLOAT16_INT8_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_16BIT_STORAGE_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_INCREMENTAL_PRESENT_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_EXTENSION_NAME: API_Extensions_Strings;
  const VK_NVX_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME: API_Extensions_Strings;
  const VK_NV_CLIP_SPACE_W_SCALING_EXTENSION_NAME: API_Extensions_Strings;
  const VK_EXT_DIRECT_MODE_DISPLAY_EXTENSION_NAME: API_Extensions_Strings;
  const VK_EXT_ACQUIRE_XLIB_DISPLAY_EXTENSION_NAME: API_Extensions_Strings;
  const VK_EXT_DISPLAY_SURFACE_COUNTER_EXTENSION_NAME: API_Extensions_Strings;
  const VK_EXT_DISPLAY_CONTROL_EXTENSION_NAME: API_Extensions_Strings;
  const VK_GOOGLE_DISPLAY_TIMING_EXTENSION_NAME: API_Extensions_Strings;
  const VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_EXTENSION_NAME: API_Extensions_Strings;
  const VK_NV_GEOMETRY_SHADER_PASSTHROUGH_EXTENSION_NAME: API_Extensions_Strings;
  const VK_NV_VIEWPORT_ARRAY2_EXTENSION_NAME: API_Extensions_Strings;
  const VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_EXTENSION_NAME: API_Extensions_Strings;
  const VK_NV_VIEWPORT_SWIZZLE_EXTENSION_NAME: API_Extensions_Strings;
  const VK_EXT_DISCARD_RECTANGLES_EXTENSION_NAME: API_Extensions_Strings;
  const VK_NV_EXTENSION_101_EXTENSION_NAME: API_Extensions_Strings;
  const VK_EXT_CONSERVATIVE_RASTERIZATION_EXTENSION_NAME: API_Extensions_Strings;
  const VK_EXT_DEPTH_CLIP_ENABLE_EXTENSION_NAME: API_Extensions_Strings;
  const VK_NV_EXTENSION_104_EXTENSION_NAME: API_Extensions_Strings;
  const VK_EXT_SWAPCHAIN_COLOR_SPACE_EXTENSION_NAME: API_Extensions_Strings;
  const VK_EXT_HDR_METADATA_EXTENSION_NAME: API_Extensions_Strings;
  const VK_IMG_EXTENSION_107_EXTENSION_NAME: API_Extensions_Strings;
  const VK_IMG_EXTENSION_108_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_IMAGELESS_FRAMEBUFFER_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_CREATE_RENDERPASS_2_EXTENSION_NAME: API_Extensions_Strings;
  const VK_IMG_EXTENSION_111_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_SHARED_PRESENTABLE_IMAGE_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_EXTERNAL_FENCE_CAPABILITIES_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_EXTERNAL_FENCE_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_EXTERNAL_FENCE_WIN32_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_EXTERNAL_FENCE_FD_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_EXTENSION_117_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_MAINTENANCE2_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_EXTENSION_119_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_GET_SURFACE_CAPABILITIES_2_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_VARIABLE_POINTERS_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_GET_DISPLAY_PROPERTIES_2_EXTENSION_NAME: API_Extensions_Strings;
  const VK_MVK_IOS_SURFACE_EXTENSION_NAME: API_Extensions_Strings;
  const VK_MVK_MACOS_SURFACE_EXTENSION_NAME: API_Extensions_Strings;
  const VK_MVK_MOLTENVK_EXTENSION_NAME: API_Extensions_Strings;
  const VK_EXT_EXTERNAL_MEMORY_DMA_BUF_EXTENSION_NAME: API_Extensions_Strings;
  const VK_EXT_QUEUE_FAMILY_FOREIGN_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_DEDICATED_ALLOCATION_EXTENSION_NAME: API_Extensions_Strings;
  const VK_EXT_DEBUG_UTILS_EXTENSION_NAME: API_Extensions_Strings;
  const VK_ANDROID_EXTERNAL_MEMORY_ANDROID_HARDWARE_BUFFER_EXTENSION_NAME: API_Extensions_Strings;
  const VK_EXT_SAMPLER_FILTER_MINMAX_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_EXTENSION_NAME: API_Extensions_Strings;
  const VK_AMD_GPU_SHADER_INT16_EXTENSION_NAME: API_Extensions_Strings;
  const VK_AMD_EXTENSION_134_EXTENSION_NAME: API_Extensions_Strings;
  const VK_AMD_EXTENSION_135_EXTENSION_NAME: API_Extensions_Strings;
  const VK_AMD_EXTENSION_136_EXTENSION_NAME: API_Extensions_Strings;
  const VK_AMD_MIXED_ATTACHMENT_SAMPLES_EXTENSION_NAME: API_Extensions_Strings;
  const VK_AMD_SHADER_FRAGMENT_MASK_EXTENSION_NAME: API_Extensions_Strings;
  const VK_EXT_INLINE_UNIFORM_BLOCK_EXTENSION_NAME: API_Extensions_Strings;
  const VK_AMD_EXTENSION_140_EXTENSION_NAME: API_Extensions_Strings;
  const VK_EXT_SHADER_STENCIL_EXPORT_EXTENSION_NAME: API_Extensions_Strings;
  const VK_AMD_EXTENSION_142_EXTENSION_NAME: API_Extensions_Strings;
  const VK_AMD_EXTENSION_143_EXTENSION_NAME: API_Extensions_Strings;
  const VK_EXT_SAMPLE_LOCATIONS_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_RELAXED_BLOCK_LAYOUT_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_GET_MEMORY_REQUIREMENTS_2_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_IMAGE_FORMAT_LIST_EXTENSION_NAME: API_Extensions_Strings;
  const VK_EXT_BLEND_OPERATION_ADVANCED_EXTENSION_NAME: API_Extensions_Strings;
  const VK_NV_FRAGMENT_COVERAGE_TO_COLOR_EXTENSION_NAME: API_Extensions_Strings;
  const VK_NV_EXTENSION_151_EXTENSION_NAME: API_Extensions_Strings;
  const VK_NV_EXTENSION_152_EXTENSION_NAME: API_Extensions_Strings;
  const VK_NV_FRAMEBUFFER_MIXED_SAMPLES_EXTENSION_NAME: API_Extensions_Strings;
  const VK_NV_FILL_RECTANGLE_EXTENSION_NAME: API_Extensions_Strings;
  const VK_NV_SHADER_SM_BUILTINS_EXTENSION_NAME: API_Extensions_Strings;
  const VK_EXT_POST_DEPTH_COVERAGE_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_SAMPLER_YCBCR_CONVERSION_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_BIND_MEMORY_2_EXTENSION_NAME: API_Extensions_Strings;
  const VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_EXTENSION_NAME: API_Extensions_Strings;
  const VK_EXT_EXTENSION_160_EXTENSION_NAME: API_Extensions_Strings;
  const VK_EXT_VALIDATION_CACHE_EXTENSION_NAME: API_Extensions_Strings;
  const VK_EXT_DESCRIPTOR_INDEXING_EXTENSION_NAME: API_Extensions_Strings;
  const VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_EXTENSION_NAME: API_Extensions_Strings;
  const VK_EXT_EXTENSION_164_EXTENSION_NAME: API_Extensions_Strings;
  const VK_NV_SHADING_RATE_IMAGE_EXTENSION_NAME: API_Extensions_Strings;
  const VK_NV_RAY_TRACING_EXTENSION_NAME: API_Extensions_Strings;
  const VK_NV_REPRESENTATIVE_FRAGMENT_TEST_EXTENSION_NAME: API_Extensions_Strings;
  const VK_EXT_EXTENSION_168_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_MAINTENANCE3_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_DRAW_INDIRECT_COUNT_EXTENSION_NAME: API_Extensions_Strings;
  const VK_EXT_FILTER_CUBIC_EXTENSION_NAME: API_Extensions_Strings;
  const VK_QCOM_extension_172_EXTENSION_NAME: API_Extensions_Strings;
  const VK_QCOM_extension_173_EXTENSION_NAME: API_Extensions_Strings;
  const VK_QCOM_extension_174_EXTENSION_NAME: API_Extensions_Strings;
  const VK_EXT_GLOBAL_PRIORITY_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_EXTENSION_176_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_EXTENSION_177_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_8BIT_STORAGE_EXTENSION_NAME: API_Extensions_Strings;
  const VK_EXT_EXTERNAL_MEMORY_HOST_EXTENSION_NAME: API_Extensions_Strings;
  const VK_AMD_BUFFER_MARKER_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_SHADER_ATOMIC_INT64_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_EXTENSION_182_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_EXTENSION_183_EXTENSION_NAME: API_Extensions_Strings;
  const VK_AMD_PIPELINE_COMPILER_CONTROL_EXTENSION_NAME: API_Extensions_Strings;
  const VK_EXT_CALIBRATED_TIMESTAMPS_EXTENSION_NAME: API_Extensions_Strings;
  const VK_AMD_SHADER_CORE_PROPERTIES_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_EXTENSION_187_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_EXTENSION_188_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_EXTENSION_189_EXTENSION_NAME: API_Extensions_Strings;
  const VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_EXTENSION_NAME: API_Extensions_Strings;
  const VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME: API_Extensions_Strings;
  const VK_GGP_FRAME_TOKEN_EXTENSION_NAME: API_Extensions_Strings;
  const VK_EXT_PIPELINE_CREATION_FEEDBACK_EXTENSION_NAME: API_Extensions_Strings;
  const VK_GOOGLE_EXTENSION_194_EXTENSION_NAME: API_Extensions_Strings;
  const VK_GOOGLE_EXTENSION_195_EXTENSION_NAME: API_Extensions_Strings;
  const VK_GOOGLE_EXTENSION_196_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_DRIVER_PROPERTIES_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_SHADER_FLOAT_CONTROLS_EXTENSION_NAME: API_Extensions_Strings;
  const VK_NV_SHADER_SUBGROUP_PARTITIONED_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_DEPTH_STENCIL_RESOLVE_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_EXTENSION_NAME: API_Extensions_Strings;
  const VK_NV_COMPUTE_SHADER_DERIVATIVES_EXTENSION_NAME: API_Extensions_Strings;
  const VK_NV_MESH_SHADER_EXTENSION_NAME: API_Extensions_Strings;
  const VK_NV_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME: API_Extensions_Strings;
  const VK_NV_SHADER_IMAGE_FOOTPRINT_EXTENSION_NAME: API_Extensions_Strings;
  const VK_NV_SCISSOR_EXCLUSIVE_EXTENSION_NAME: API_Extensions_Strings;
  const VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_EXTENSION_208_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_EXTENSION_209_EXTENSION_NAME: API_Extensions_Strings;
  const VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_EXTENSION_NAME: API_Extensions_Strings;
  const VK_INTEL_PERFORMANCE_QUERY_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_VULKAN_MEMORY_MODEL_EXTENSION_NAME: API_Extensions_Strings;
  const VK_EXT_PCI_BUS_INFO_EXTENSION_NAME: API_Extensions_Strings;
  const VK_AMD_DISPLAY_NATIVE_HDR_EXTENSION_NAME: API_Extensions_Strings;
  const VK_FUCHSIA_IMAGEPIPE_SURFACE_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_EXTENSION_216_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_EXTENSION_217_EXTENSION_NAME: API_Extensions_Strings;
  const VK_EXT_METAL_SURFACE_EXTENSION_NAME: API_Extensions_Strings;
  const VK_EXT_FRAGMENT_DENSITY_MAP_EXTENSION_NAME: API_Extensions_Strings;
  const VK_EXT_EXTENSION_220_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_EXTENSION_221_EXTENSION_NAME: API_Extensions_Strings;
  const VK_EXT_SCALAR_BLOCK_LAYOUT_EXTENSION_NAME: API_Extensions_Strings;
  const VK_EXT_EXTENSION_223_EXTENSION_NAME: API_Extensions_Strings;
  const VK_GOOGLE_HLSL_FUNCTIONALITY1_EXTENSION_NAME: API_Extensions_Strings;
  const VK_GOOGLE_DECORATE_STRING_EXTENSION_NAME: API_Extensions_Strings;
  const VK_EXT_SUBGROUP_SIZE_CONTROL_EXTENSION_NAME: API_Extensions_Strings;
  const VK_AMD_EXTENSION_227_EXTENSION_NAME: API_Extensions_Strings;
  const VK_AMD_SHADER_CORE_PROPERTIES_2_EXTENSION_NAME: API_Extensions_Strings;
  const VK_AMD_EXTENSION_229_EXTENSION_NAME: API_Extensions_Strings;
  const VK_AMD_DEVICE_COHERENT_MEMORY_EXTENSION_NAME: API_Extensions_Strings;
  const VK_AMD_EXTENSION_231_EXTENSION_NAME: API_Extensions_Strings;
  const VK_AMD_EXTENSION_232_EXTENSION_NAME: API_Extensions_Strings;
  const VK_AMD_EXTENSION_233_EXTENSION_NAME: API_Extensions_Strings;
  const VK_AMD_EXTENSION_234_EXTENSION_NAME: API_Extensions_Strings;
  const VK_AMD_EXTENSION_235_EXTENSION_NAME: API_Extensions_Strings;
  const VK_AMD_EXTENSION_236_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_EXTENSION_237_EXTENSION_NAME: API_Extensions_Strings;
  const VK_EXT_MEMORY_BUDGET_EXTENSION_NAME: API_Extensions_Strings;
  const VK_EXT_MEMORY_PRIORITY_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_SURFACE_PROTECTED_CAPABILITIES_EXTENSION_NAME: API_Extensions_Strings;
  const VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_EXTENSION_NAME: API_Extensions_Strings;
  const VK_NV_EXTENSION_242_EXTENSION_NAME: API_Extensions_Strings;
  const VK_INTEL_EXTENSION_243_EXTENSION_NAME: API_Extensions_Strings;
  const VK_MESA_EXTENSION_244_EXTENSION_NAME: API_Extensions_Strings;
  const VK_EXT_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME: API_Extensions_Strings;
  const VK_EXT_EXTENSION_246_EXTENSION_NAME: API_Extensions_Strings;
  const VK_EXT_SEPARATE_STENCIL_USAGE_EXTENSION_NAME: API_Extensions_Strings;
  const VK_EXT_VALIDATION_FEATURES_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_EXTENSION_249_EXTENSION_NAME: API_Extensions_Strings;
  const VK_NV_COOPERATIVE_MATRIX_EXTENSION_NAME: API_Extensions_Strings;
  const VK_NV_COVERAGE_REDUCTION_MODE_EXTENSION_NAME: API_Extensions_Strings;
  const VK_EXT_FRAGMENT_SHADER_INTERLOCK_EXTENSION_NAME: API_Extensions_Strings;
  const VK_EXT_YCBCR_IMAGE_ARRAYS_EXTENSION_NAME: API_Extensions_Strings;
  const VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_EXTENSION_NAME: API_Extensions_Strings;
  const VK_EXT_EXTENSION_255_EXTENSION_NAME: API_Extensions_Strings;
  const VK_EXT_FULL_SCREEN_EXCLUSIVE_EXTENSION_NAME: API_Extensions_Strings;
  const VK_EXT_HEADLESS_SURFACE_EXTENSION_NAME: API_Extensions_Strings;
  const VK_EXT_EXTENSION_258_EXTENSION_NAME: API_Extensions_Strings;
  const VK_EXT_EXTENSION_259_EXTENSION_NAME: API_Extensions_Strings;
  const VK_EXT_LINE_RASTERIZATION_EXTENSION_NAME: API_Extensions_Strings;
  const VK_NV_EXTENSION_261_EXTENSION_NAME: API_Extensions_Strings;
  const VK_EXT_HOST_QUERY_RESET_EXTENSION_NAME: API_Extensions_Strings;
  const VK_GOOGLE_EXTENSION_263_EXTENSION_NAME: API_Extensions_Strings;
  const VK_BRCM_EXTENSION_264_EXTENSION_NAME: API_Extensions_Strings;
  const VK_BRCM_EXTENSION_265_EXTENSION_NAME: API_Extensions_Strings;
  const VK_EXT_INDEX_TYPE_UINT8_EXTENSION_NAME: API_Extensions_Strings;
  const VK_EXT_extension_267: API_Extensions_Strings;
  const VK_EXT_extension_268: API_Extensions_Strings;
  const VK_KHR_extension_269: API_Extensions_Strings;
  const VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_EXTENSION_NAME: API_Extensions_Strings;
  const VK_INTEL_extension_271: API_Extensions_Strings;
  const VK_INTEL_extension_272: API_Extensions_Strings;
  const VK_INTEL_extension_273: API_Extensions_Strings;
  const VK_INTEL_extension_274: API_Extensions_Strings;
  const VK_KHR_extension_275: API_Extensions_Strings;
  const VK_KHR_extension_276: API_Extensions_Strings;
  const VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_EXTENSION_NAME: API_Extensions_Strings;
  const VK_NV_extension_278: API_Extensions_Strings;
  const VK_NV_extension_279: API_Extensions_Strings;
  const VK_KHR_extension_280: API_Extensions_Strings;
  const VK_ARM_extension_281: API_Extensions_Strings;
  const VK_EXT_TEXEL_BUFFER_ALIGNMENT_EXTENSION_NAME: API_Extensions_Strings;
  const VK_QCOM_extension_283: API_Extensions_Strings;
  const VK_EXT_extension_284: API_Extensions_Strings;
  const VK_EXT_extension_285: API_Extensions_Strings;
  const VK_EXT_extension_286: API_Extensions_Strings;
  const VK_NVX_EXTENSION_287_EXTENSION_NAME: API_Extensions_Strings;
  const VK_NVX_EXTENSION_288_EXTENSION_NAME: API_Extensions_Strings;
  const VK_EXT_EXTENSION_289_EXTENSION_NAME: API_Extensions_Strings;
  

  
  /**
   * 
   * @member VK_KHR_SURFACE_SPEC_VERSION
   * @member VK_KHR_SWAPCHAIN_SPEC_VERSION
   * @member VK_KHR_DISPLAY_SPEC_VERSION
   * @member VK_KHR_DISPLAY_SWAPCHAIN_SPEC_VERSION
   * @member VK_KHR_XLIB_SURFACE_SPEC_VERSION
   * @member VK_KHR_XCB_SURFACE_SPEC_VERSION
   * @member VK_KHR_WAYLAND_SURFACE_SPEC_VERSION
   * @member VK_KHR_MIR_SURFACE_SPEC_VERSION
   * @member VK_KHR_ANDROID_SURFACE_SPEC_VERSION
   * @member VK_KHR_WIN32_SURFACE_SPEC_VERSION
   * @member VK_ANDROID_NATIVE_BUFFER_SPEC_VERSION
   * @member VK_ANDROID_NATIVE_BUFFER_NUMBER
   * @member VK_EXT_DEBUG_REPORT_SPEC_VERSION
   * @member VK_NV_GLSL_SHADER_SPEC_VERSION
   * @member VK_EXT_DEPTH_RANGE_UNRESTRICTED_SPEC_VERSION
   * @member VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_SPEC_VERSION
   * @member VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE
   * @member VK_IMG_FILTER_CUBIC_SPEC_VERSION
   * @member VK_AMD_EXTENSION_17_SPEC_VERSION
   * @member VK_AMD_EXTENSION_18_SPEC_VERSION
   * @member VK_AMD_RASTERIZATION_ORDER_SPEC_VERSION
   * @member VK_AMD_EXTENSION_20_SPEC_VERSION
   * @member VK_AMD_SHADER_TRINARY_MINMAX_SPEC_VERSION
   * @member VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_SPEC_VERSION
   * @member VK_EXT_DEBUG_MARKER_SPEC_VERSION
   * @member VK_AMD_EXTENSION_24_SPEC_VERSION
   * @member VK_AMD_EXTENSION_25_SPEC_VERSION
   * @member VK_AMD_GCN_SHADER_SPEC_VERSION
   * @member VK_NV_DEDICATED_ALLOCATION_SPEC_VERSION
   * @member VK_EXT_EXTENSION_28_SPEC_VERSION
   * @member VK_EXT_TRANSFORM_FEEDBACK_SPEC_VERSION
   * @member VK_NVX_EXTENSION_30_SPEC_VERSION
   * @member VK_NVX_IMAGE_VIEW_HANDLE_SPEC_VERSION
   * @member VK_AMD_EXTENSION_32_SPEC_VERSION
   * @member VK_AMD_EXTENSION_33_SPEC_VERSION
   * @member VK_AMD_DRAW_INDIRECT_COUNT_SPEC_VERSION
   * @member VK_AMD_EXTENSION_35_SPEC_VERSION
   * @member VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_SPEC_VERSION
   * @member VK_AMD_GPU_SHADER_HALF_FLOAT_SPEC_VERSION
   * @member VK_AMD_SHADER_BALLOT_SPEC_VERSION
   * @member VK_AMD_EXTENSION_39_SPEC_VERSION
   * @member VK_AMD_EXTENSION_40_SPEC_VERSION
   * @member VK_AMD_EXTENSION_41_SPEC_VERSION
   * @member VK_AMD_TEXTURE_GATHER_BIAS_LOD_SPEC_VERSION
   * @member VK_AMD_SHADER_INFO_SPEC_VERSION
   * @member VK_AMD_EXTENSION_44_SPEC_VERSION
   * @member VK_AMD_EXTENSION_45_SPEC_VERSION
   * @member VK_AMD_EXTENSION_46_SPEC_VERSION
   * @member VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_SPEC_VERSION
   * @member VK_NVX_EXTENSION_48_SPEC_VERSION
   * @member VK_GOOGLE_EXTENSION_49_SPEC_VERSION
   * @member VK_GGP_STREAM_DESCRIPTOR_SURFACE_SPEC_VERSION
   * @member VK_NV_CORNER_SAMPLED_IMAGE_SPEC_VERSION
   * @member VK_NV_EXTENSION_52_SPEC_VERSION
   * @member VK_NV_EXTENSION_53_SPEC_VERSION
   * @member VK_KHR_MULTIVIEW_SPEC_VERSION
   * @member VK_IMG_FORMAT_PVRTC_SPEC_VERSION
   * @member VK_NV_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION
   * @member VK_NV_EXTERNAL_MEMORY_SPEC_VERSION
   * @member VK_NV_EXTERNAL_MEMORY_WIN32_SPEC_VERSION
   * @member VK_NV_WIN32_KEYED_MUTEX_SPEC_VERSION
   * @member VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_SPEC_VERSION
   * @member VK_KHR_DEVICE_GROUP_SPEC_VERSION
   * @member VK_EXT_VALIDATION_FLAGS_SPEC_VERSION
   * @member VK_NN_VI_SURFACE_SPEC_VERSION
   * @member VK_KHR_SHADER_DRAW_PARAMETERS_SPEC_VERSION
   * @member VK_EXT_SHADER_SUBGROUP_BALLOT_SPEC_VERSION
   * @member VK_EXT_SHADER_SUBGROUP_VOTE_SPEC_VERSION
   * @member VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_SPEC_VERSION
   * @member VK_EXT_ASTC_DECODE_MODE_SPEC_VERSION
   * @member VK_IMG_EXTENSION_69_SPEC_VERSION
   * @member VK_KHR_MAINTENANCE1_SPEC_VERSION
   * @member VK_KHR_DEVICE_GROUP_CREATION_SPEC_VERSION
   * @member VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION
   * @member VK_KHR_EXTERNAL_MEMORY_SPEC_VERSION
   * @member VK_KHR_EXTERNAL_MEMORY_WIN32_SPEC_VERSION
   * @member VK_KHR_EXTERNAL_MEMORY_FD_SPEC_VERSION
   * @member VK_KHR_WIN32_KEYED_MUTEX_SPEC_VERSION
   * @member VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_SPEC_VERSION
   * @member VK_KHR_EXTERNAL_SEMAPHORE_SPEC_VERSION
   * @member VK_KHR_EXTERNAL_SEMAPHORE_WIN32_SPEC_VERSION
   * @member VK_KHR_EXTERNAL_SEMAPHORE_FD_SPEC_VERSION
   * @member VK_KHR_PUSH_DESCRIPTOR_SPEC_VERSION
   * @member VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR
   * @member VK_EXT_CONDITIONAL_RENDERING_SPEC_VERSION
   * @member VK_KHR_SHADER_FLOAT16_INT8_SPEC_VERSION
   * @member VK_KHR_16BIT_STORAGE_SPEC_VERSION
   * @member VK_KHR_INCREMENTAL_PRESENT_SPEC_VERSION
   * @member VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_SPEC_VERSION
   * @member VK_NVX_DEVICE_GENERATED_COMMANDS_SPEC_VERSION
   * @member VK_NV_CLIP_SPACE_W_SCALING_SPEC_VERSION
   * @member VK_EXT_DIRECT_MODE_DISPLAY_SPEC_VERSION
   * @member VK_EXT_ACQUIRE_XLIB_DISPLAY_SPEC_VERSION
   * @member VK_EXT_DISPLAY_SURFACE_COUNTER_SPEC_VERSION
   * @member VK_EXT_DISPLAY_CONTROL_SPEC_VERSION
   * @member VK_GOOGLE_DISPLAY_TIMING_SPEC_VERSION
   * @member VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_SPEC_VERSION
   * @member VK_NV_GEOMETRY_SHADER_PASSTHROUGH_SPEC_VERSION
   * @member VK_NV_VIEWPORT_ARRAY2_SPEC_VERSION
   * @member VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_SPEC_VERSION
   * @member VK_NV_VIEWPORT_SWIZZLE_SPEC_VERSION
   * @member VK_EXT_DISCARD_RECTANGLES_SPEC_VERSION
   * @member VK_NV_EXTENSION_101_SPEC_VERSION
   * @member VK_EXT_CONSERVATIVE_RASTERIZATION_SPEC_VERSION
   * @member VK_EXT_DEPTH_CLIP_ENABLE_SPEC_VERSION
   * @member VK_NV_EXTENSION_104_SPEC_VERSION
   * @member VK_EXT_SWAPCHAIN_COLOR_SPACE_SPEC_VERSION
   * @member VK_EXT_HDR_METADATA_SPEC_VERSION
   * @member VK_IMG_EXTENSION_107_SPEC_VERSION
   * @member VK_IMG_EXTENSION_108_SPEC_VERSION
   * @member VK_KHR_IMAGELESS_FRAMEBUFFER_SPEC_VERSION
   * @member VK_KHR_CREATE_RENDERPASS_2_SPEC_VERSION
   * @member VK_IMG_EXTENSION_111_SPEC_VERSION
   * @member VK_KHR_SHARED_PRESENTABLE_IMAGE_SPEC_VERSION
   * @member VK_KHR_EXTERNAL_FENCE_CAPABILITIES_SPEC_VERSION
   * @member VK_KHR_EXTERNAL_FENCE_SPEC_VERSION
   * @member VK_KHR_EXTERNAL_FENCE_WIN32_SPEC_VERSION
   * @member VK_KHR_EXTERNAL_FENCE_FD_SPEC_VERSION
   * @member VK_KHR_EXTENSION_117_SPEC_VERSION
   * @member VK_KHR_MAINTENANCE2_SPEC_VERSION
   * @member VK_KHR_EXTENSION_119_SPEC_VERSION
   * @member VK_KHR_GET_SURFACE_CAPABILITIES_2_SPEC_VERSION
   * @member VK_KHR_VARIABLE_POINTERS_SPEC_VERSION
   * @member VK_KHR_GET_DISPLAY_PROPERTIES_2_SPEC_VERSION
   * @member VK_MVK_IOS_SURFACE_SPEC_VERSION
   * @member VK_MVK_MACOS_SURFACE_SPEC_VERSION
   * @member VK_MVK_MOLTENVK_SPEC_VERSION
   * @member VK_EXT_EXTERNAL_MEMORY_DMA_BUF_SPEC_VERSION
   * @member VK_EXT_QUEUE_FAMILY_FOREIGN_SPEC_VERSION
   * @member VK_KHR_DEDICATED_ALLOCATION_SPEC_VERSION
   * @member VK_EXT_DEBUG_UTILS_SPEC_VERSION
   * @member VK_ANDROID_EXTERNAL_MEMORY_ANDROID_HARDWARE_BUFFER_SPEC_VERSION
   * @member VK_EXT_SAMPLER_FILTER_MINMAX_SPEC_VERSION
   * @member VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_SPEC_VERSION
   * @member VK_AMD_GPU_SHADER_INT16_SPEC_VERSION
   * @member VK_AMD_EXTENSION_134_SPEC_VERSION
   * @member VK_AMD_EXTENSION_135_SPEC_VERSION
   * @member VK_AMD_EXTENSION_136_SPEC_VERSION
   * @member VK_AMD_MIXED_ATTACHMENT_SAMPLES_SPEC_VERSION
   * @member VK_AMD_SHADER_FRAGMENT_MASK_SPEC_VERSION
   * @member VK_EXT_INLINE_UNIFORM_BLOCK_SPEC_VERSION
   * @member VK_AMD_EXTENSION_140_SPEC_VERSION
   * @member VK_EXT_SHADER_STENCIL_EXPORT_SPEC_VERSION
   * @member VK_AMD_EXTENSION_142_SPEC_VERSION
   * @member VK_AMD_EXTENSION_143_SPEC_VERSION
   * @member VK_EXT_SAMPLE_LOCATIONS_SPEC_VERSION
   * @member VK_KHR_RELAXED_BLOCK_LAYOUT_SPEC_VERSION
   * @member VK_KHR_GET_MEMORY_REQUIREMENTS_2_SPEC_VERSION
   * @member VK_KHR_IMAGE_FORMAT_LIST_SPEC_VERSION
   * @member VK_EXT_BLEND_OPERATION_ADVANCED_SPEC_VERSION
   * @member VK_NV_FRAGMENT_COVERAGE_TO_COLOR_SPEC_VERSION
   * @member VK_NV_EXTENSION_151_SPEC_VERSION
   * @member VK_NV_EXTENSION_152_SPEC_VERSION
   * @member VK_NV_FRAMEBUFFER_MIXED_SAMPLES_SPEC_VERSION
   * @member VK_NV_FILL_RECTANGLE_SPEC_VERSION
   * @member VK_NV_SHADER_SM_BUILTINS_SPEC_VERSION
   * @member VK_EXT_POST_DEPTH_COVERAGE_SPEC_VERSION
   * @member VK_KHR_SAMPLER_YCBCR_CONVERSION_SPEC_VERSION
   * @member VK_KHR_BIND_MEMORY_2_SPEC_VERSION
   * @member VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_SPEC_VERSION
   * @member VK_EXT_EXTENSION_160_SPEC_VERSION
   * @member VK_EXT_VALIDATION_CACHE_SPEC_VERSION
   * @member VK_EXT_DESCRIPTOR_INDEXING_SPEC_VERSION
   * @member VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_SPEC_VERSION
   * @member VK_EXT_EXTENSION_164_SPEC_VERSION
   * @member VK_NV_SHADING_RATE_IMAGE_SPEC_VERSION
   * @member VK_NV_RAY_TRACING_SPEC_VERSION
   * @member VK_NV_REPRESENTATIVE_FRAGMENT_TEST_SPEC_VERSION
   * @member VK_EXT_EXTENSION_168_SPEC_VERSION
   * @member VK_KHR_MAINTENANCE3_SPEC_VERSION
   * @member VK_KHR_DRAW_INDIRECT_COUNT_SPEC_VERSION
   * @member VK_EXT_FILTER_CUBIC_SPEC_VERSION
   * @member VK_QCOM_extension_172_SPEC_VERSION
   * @member VK_QCOM_extension_173_SPEC_VERSION
   * @member VK_QCOM_extension_174_SPEC_VERSION
   * @member VK_EXT_GLOBAL_PRIORITY_SPEC_VERSION
   * @member VK_KHR_EXTENSION_176_SPEC_VERSION
   * @member VK_KHR_EXTENSION_177_SPEC_VERSION
   * @member VK_KHR_8BIT_STORAGE_SPEC_VERSION
   * @member VK_EXT_EXTERNAL_MEMORY_HOST_SPEC_VERSION
   * @member VK_AMD_BUFFER_MARKER_SPEC_VERSION
   * @member VK_KHR_SHADER_ATOMIC_INT64_SPEC_VERSION
   * @member VK_KHR_EXTENSION_182_SPEC_VERSION
   * @member VK_KHR_EXTENSION_183_SPEC_VERSION
   * @member VK_AMD_PIPELINE_COMPILER_CONTROL_SPEC_VERSION
   * @member VK_EXT_CALIBRATED_TIMESTAMPS_SPEC_VERSION
   * @member VK_AMD_SHADER_CORE_PROPERTIES_SPEC_VERSION
   * @member VK_KHR_EXTENSION_187_SPEC_VERSION
   * @member VK_KHR_EXTENSION_188_SPEC_VERSION
   * @member VK_KHR_EXTENSION_189_SPEC_VERSION
   * @member VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_SPEC_VERSION
   * @member VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_SPEC_VERSION
   * @member VK_GGP_FRAME_TOKEN_SPEC_VERSION
   * @member VK_EXT_PIPELINE_CREATION_FEEDBACK_SPEC_VERSION
   * @member VK_GOOGLE_EXTENSION_194_SPEC_VERSION
   * @member VK_GOOGLE_EXTENSION_195_SPEC_VERSION
   * @member VK_GOOGLE_EXTENSION_196_SPEC_VERSION
   * @member VK_KHR_DRIVER_PROPERTIES_SPEC_VERSION
   * @member VK_KHR_SHADER_FLOAT_CONTROLS_SPEC_VERSION
   * @member VK_NV_SHADER_SUBGROUP_PARTITIONED_SPEC_VERSION
   * @member VK_KHR_DEPTH_STENCIL_RESOLVE_SPEC_VERSION
   * @member VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_SPEC_VERSION
   * @member VK_NV_COMPUTE_SHADER_DERIVATIVES_SPEC_VERSION
   * @member VK_NV_MESH_SHADER_SPEC_VERSION
   * @member VK_NV_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION
   * @member VK_NV_SHADER_IMAGE_FOOTPRINT_SPEC_VERSION
   * @member VK_NV_SCISSOR_EXCLUSIVE_SPEC_VERSION
   * @member VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_SPEC_VERSION
   * @member VK_KHR_EXTENSION_208_SPEC_VERSION
   * @member VK_KHR_EXTENSION_209_SPEC_VERSION
   * @member VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_SPEC_VERSION
   * @member VK_INTEL_PERFORMANCE_QUERY_SPEC_VERSION
   * @member VK_KHR_VULKAN_MEMORY_MODEL_SPEC_VERSION
   * @member VK_EXT_PCI_BUS_INFO_SPEC_VERSION
   * @member VK_AMD_DISPLAY_NATIVE_HDR_SPEC_VERSION
   * @member VK_FUCHSIA_IMAGEPIPE_SURFACE_SPEC_VERSION
   * @member VK_KHR_EXTENSION_216_SPEC_VERSION
   * @member VK_KHR_EXTENSION_217_SPEC_VERSION
   * @member VK_EXT_METAL_SURFACE_SPEC_VERSION
   * @member VK_EXT_FRAGMENT_DENSITY_MAP_SPEC_VERSION
   * @member VK_EXT_EXTENSION_220_SPEC_VERSION
   * @member VK_KHR_EXTENSION_221_SPEC_VERSION
   * @member VK_EXT_SCALAR_BLOCK_LAYOUT_SPEC_VERSION
   * @member VK_EXT_EXTENSION_223_SPEC_VERSION
   * @member VK_GOOGLE_HLSL_FUNCTIONALITY1_SPEC_VERSION
   * @member VK_GOOGLE_DECORATE_STRING_SPEC_VERSION
   * @member VK_EXT_SUBGROUP_SIZE_CONTROL_SPEC_VERSION
   * @member VK_AMD_EXTENSION_227_SPEC_VERSION
   * @member VK_AMD_SHADER_CORE_PROPERTIES_2_SPEC_VERSION
   * @member VK_AMD_EXTENSION_229_SPEC_VERSION
   * @member VK_AMD_DEVICE_COHERENT_MEMORY_SPEC_VERSION
   * @member VK_AMD_EXTENSION_231_SPEC_VERSION
   * @member VK_AMD_EXTENSION_232_SPEC_VERSION
   * @member VK_AMD_EXTENSION_233_SPEC_VERSION
   * @member VK_AMD_EXTENSION_234_SPEC_VERSION
   * @member VK_AMD_EXTENSION_235_SPEC_VERSION
   * @member VK_AMD_EXTENSION_236_SPEC_VERSION
   * @member VK_KHR_EXTENSION_237_SPEC_VERSION
   * @member VK_EXT_MEMORY_BUDGET_SPEC_VERSION
   * @member VK_EXT_MEMORY_PRIORITY_SPEC_VERSION
   * @member VK_KHR_SURFACE_PROTECTED_CAPABILITIES_SPEC_VERSION
   * @member VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_SPEC_VERSION
   * @member VK_NV_EXTENSION_242_SPEC_VERSION
   * @member VK_INTEL_EXTENSION_243_SPEC_VERSION
   * @member VK_MESA_EXTENSION_244_SPEC_VERSION
   * @member VK_EXT_BUFFER_DEVICE_ADDRESS_SPEC_VERSION
   * @member VK_EXT_EXTENSION_246_SPEC_VERSION
   * @member VK_EXT_SEPARATE_STENCIL_USAGE_SPEC_VERSION
   * @member VK_EXT_VALIDATION_FEATURES_SPEC_VERSION
   * @member VK_KHR_EXTENSION_249_SPEC_VERSION
   * @member VK_NV_COOPERATIVE_MATRIX_SPEC_VERSION
   * @member VK_NV_COVERAGE_REDUCTION_MODE_SPEC_VERSION
   * @member VK_EXT_FRAGMENT_SHADER_INTERLOCK_SPEC_VERSION
   * @member VK_EXT_YCBCR_IMAGE_ARRAYS_SPEC_VERSION
   * @member VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_SPEC_VERSION
   * @member VK_EXT_EXTENSION_255_SPEC_VERSION
   * @member VK_EXT_FULL_SCREEN_EXCLUSIVE_SPEC_VERSION
   * @member VK_EXT_HEADLESS_SURFACE_SPEC_VERSION
   * @member VK_EXT_EXTENSION_258_SPEC_VERSION
   * @member VK_EXT_EXTENSION_259_SPEC_VERSION
   * @member VK_EXT_LINE_RASTERIZATION_SPEC_VERSION
   * @member VK_NV_EXTENSION_261_SPEC_VERSION
   * @member VK_EXT_HOST_QUERY_RESET_SPEC_VERSION
   * @member VK_GOOGLE_EXTENSION_263_SPEC_VERSION
   * @member VK_BRCM_EXTENSION_264_SPEC_VERSION
   * @member VK_BRCM_EXTENSION_265_SPEC_VERSION
   * @member VK_EXT_INDEX_TYPE_UINT8_SPEC_VERSION
   * @member VK_EXT_EXTENSION_267_SPEC_VERSION
   * @member VK_EXT_EXTENSION_268_SPEC_VERSION
   * @member VK_KHR_EXTENSION_269_SPEC_VERSION
   * @member VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_SPEC_VERSION
   * @member VK_INTEL_EXTENSION_271_SPEC_VERSION
   * @member VK_INTEL_EXTENSION_272_SPEC_VERSION
   * @member VK_INTEL_EXTENSION_273_SPEC_VERSION
   * @member VK_INTEL_EXTENSION_274_SPEC_VERSION
   * @member VK_KHR_EXTENSION_275_SPEC_VERSION
   * @member VK_KHR_EXTENSION_276_SPEC_VERSION
   * @member VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_SPEC_VERSION
   * @member VK_NV_EXTENSION_278_SPEC_VERSION
   * @member VK_NV_EXTENSION_279_SPEC_VERSION
   * @member VK_KHR_EXTENSION_280_SPEC_VERSION
   * @member VK_ARM_EXTENSION_281_SPEC_VERSION
   * @member VK_EXT_TEXEL_BUFFER_ALIGNMENT_SPEC_VERSION
   * @member VK_QCOM_EXTENSION_283_SPEC_VERSION
   * @member VK_EXT_EXTENSION_284_SPEC_VERSION
   * @member VK_EXT_EXTENSION_285_SPEC_VERSION
   * @member VK_EXT_EXTENSION_286_SPEC_VERSION
   * @member VK_NVX_EXTENSION_287_SPEC_VERSION
   * @member VK_NVX_EXTENSION_288_SPEC_VERSION
   * @member VK_EXT_EXTENSION_289_SPEC_VERSION
   */
  enum API_Extensions {
    VK_KHR_SURFACE_SPEC_VERSION,
    VK_KHR_SWAPCHAIN_SPEC_VERSION,
    VK_KHR_DISPLAY_SPEC_VERSION,
    VK_KHR_DISPLAY_SWAPCHAIN_SPEC_VERSION,
    VK_KHR_XLIB_SURFACE_SPEC_VERSION,
    VK_KHR_XCB_SURFACE_SPEC_VERSION,
    VK_KHR_WAYLAND_SURFACE_SPEC_VERSION,
    VK_KHR_MIR_SURFACE_SPEC_VERSION,
    VK_KHR_ANDROID_SURFACE_SPEC_VERSION,
    VK_KHR_WIN32_SURFACE_SPEC_VERSION,
    VK_ANDROID_NATIVE_BUFFER_SPEC_VERSION,
    VK_ANDROID_NATIVE_BUFFER_NUMBER,
    VK_EXT_DEBUG_REPORT_SPEC_VERSION,
    VK_NV_GLSL_SHADER_SPEC_VERSION,
    VK_EXT_DEPTH_RANGE_UNRESTRICTED_SPEC_VERSION,
    VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_SPEC_VERSION,
    VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE,
    VK_IMG_FILTER_CUBIC_SPEC_VERSION,
    VK_AMD_EXTENSION_17_SPEC_VERSION,
    VK_AMD_EXTENSION_18_SPEC_VERSION,
    VK_AMD_RASTERIZATION_ORDER_SPEC_VERSION,
    VK_AMD_EXTENSION_20_SPEC_VERSION,
    VK_AMD_SHADER_TRINARY_MINMAX_SPEC_VERSION,
    VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_SPEC_VERSION,
    VK_EXT_DEBUG_MARKER_SPEC_VERSION,
    VK_AMD_EXTENSION_24_SPEC_VERSION,
    VK_AMD_EXTENSION_25_SPEC_VERSION,
    VK_AMD_GCN_SHADER_SPEC_VERSION,
    VK_NV_DEDICATED_ALLOCATION_SPEC_VERSION,
    VK_EXT_EXTENSION_28_SPEC_VERSION,
    VK_EXT_TRANSFORM_FEEDBACK_SPEC_VERSION,
    VK_NVX_EXTENSION_30_SPEC_VERSION,
    VK_NVX_IMAGE_VIEW_HANDLE_SPEC_VERSION,
    VK_AMD_EXTENSION_32_SPEC_VERSION,
    VK_AMD_EXTENSION_33_SPEC_VERSION,
    VK_AMD_DRAW_INDIRECT_COUNT_SPEC_VERSION,
    VK_AMD_EXTENSION_35_SPEC_VERSION,
    VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_SPEC_VERSION,
    VK_AMD_GPU_SHADER_HALF_FLOAT_SPEC_VERSION,
    VK_AMD_SHADER_BALLOT_SPEC_VERSION,
    VK_AMD_EXTENSION_39_SPEC_VERSION,
    VK_AMD_EXTENSION_40_SPEC_VERSION,
    VK_AMD_EXTENSION_41_SPEC_VERSION,
    VK_AMD_TEXTURE_GATHER_BIAS_LOD_SPEC_VERSION,
    VK_AMD_SHADER_INFO_SPEC_VERSION,
    VK_AMD_EXTENSION_44_SPEC_VERSION,
    VK_AMD_EXTENSION_45_SPEC_VERSION,
    VK_AMD_EXTENSION_46_SPEC_VERSION,
    VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_SPEC_VERSION,
    VK_NVX_EXTENSION_48_SPEC_VERSION,
    VK_GOOGLE_EXTENSION_49_SPEC_VERSION,
    VK_GGP_STREAM_DESCRIPTOR_SURFACE_SPEC_VERSION,
    VK_NV_CORNER_SAMPLED_IMAGE_SPEC_VERSION,
    VK_NV_EXTENSION_52_SPEC_VERSION,
    VK_NV_EXTENSION_53_SPEC_VERSION,
    VK_KHR_MULTIVIEW_SPEC_VERSION,
    VK_IMG_FORMAT_PVRTC_SPEC_VERSION,
    VK_NV_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION,
    VK_NV_EXTERNAL_MEMORY_SPEC_VERSION,
    VK_NV_EXTERNAL_MEMORY_WIN32_SPEC_VERSION,
    VK_NV_WIN32_KEYED_MUTEX_SPEC_VERSION,
    VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_SPEC_VERSION,
    VK_KHR_DEVICE_GROUP_SPEC_VERSION,
    VK_EXT_VALIDATION_FLAGS_SPEC_VERSION,
    VK_NN_VI_SURFACE_SPEC_VERSION,
    VK_KHR_SHADER_DRAW_PARAMETERS_SPEC_VERSION,
    VK_EXT_SHADER_SUBGROUP_BALLOT_SPEC_VERSION,
    VK_EXT_SHADER_SUBGROUP_VOTE_SPEC_VERSION,
    VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_SPEC_VERSION,
    VK_EXT_ASTC_DECODE_MODE_SPEC_VERSION,
    VK_IMG_EXTENSION_69_SPEC_VERSION,
    VK_KHR_MAINTENANCE1_SPEC_VERSION,
    VK_KHR_DEVICE_GROUP_CREATION_SPEC_VERSION,
    VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION,
    VK_KHR_EXTERNAL_MEMORY_SPEC_VERSION,
    VK_KHR_EXTERNAL_MEMORY_WIN32_SPEC_VERSION,
    VK_KHR_EXTERNAL_MEMORY_FD_SPEC_VERSION,
    VK_KHR_WIN32_KEYED_MUTEX_SPEC_VERSION,
    VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_SPEC_VERSION,
    VK_KHR_EXTERNAL_SEMAPHORE_SPEC_VERSION,
    VK_KHR_EXTERNAL_SEMAPHORE_WIN32_SPEC_VERSION,
    VK_KHR_EXTERNAL_SEMAPHORE_FD_SPEC_VERSION,
    VK_KHR_PUSH_DESCRIPTOR_SPEC_VERSION,
    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR,
    VK_EXT_CONDITIONAL_RENDERING_SPEC_VERSION,
    VK_KHR_SHADER_FLOAT16_INT8_SPEC_VERSION,
    VK_KHR_16BIT_STORAGE_SPEC_VERSION,
    VK_KHR_INCREMENTAL_PRESENT_SPEC_VERSION,
    VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_SPEC_VERSION,
    VK_NVX_DEVICE_GENERATED_COMMANDS_SPEC_VERSION,
    VK_NV_CLIP_SPACE_W_SCALING_SPEC_VERSION,
    VK_EXT_DIRECT_MODE_DISPLAY_SPEC_VERSION,
    VK_EXT_ACQUIRE_XLIB_DISPLAY_SPEC_VERSION,
    VK_EXT_DISPLAY_SURFACE_COUNTER_SPEC_VERSION,
    VK_EXT_DISPLAY_CONTROL_SPEC_VERSION,
    VK_GOOGLE_DISPLAY_TIMING_SPEC_VERSION,
    VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_SPEC_VERSION,
    VK_NV_GEOMETRY_SHADER_PASSTHROUGH_SPEC_VERSION,
    VK_NV_VIEWPORT_ARRAY2_SPEC_VERSION,
    VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_SPEC_VERSION,
    VK_NV_VIEWPORT_SWIZZLE_SPEC_VERSION,
    VK_EXT_DISCARD_RECTANGLES_SPEC_VERSION,
    VK_NV_EXTENSION_101_SPEC_VERSION,
    VK_EXT_CONSERVATIVE_RASTERIZATION_SPEC_VERSION,
    VK_EXT_DEPTH_CLIP_ENABLE_SPEC_VERSION,
    VK_NV_EXTENSION_104_SPEC_VERSION,
    VK_EXT_SWAPCHAIN_COLOR_SPACE_SPEC_VERSION,
    VK_EXT_HDR_METADATA_SPEC_VERSION,
    VK_IMG_EXTENSION_107_SPEC_VERSION,
    VK_IMG_EXTENSION_108_SPEC_VERSION,
    VK_KHR_IMAGELESS_FRAMEBUFFER_SPEC_VERSION,
    VK_KHR_CREATE_RENDERPASS_2_SPEC_VERSION,
    VK_IMG_EXTENSION_111_SPEC_VERSION,
    VK_KHR_SHARED_PRESENTABLE_IMAGE_SPEC_VERSION,
    VK_KHR_EXTERNAL_FENCE_CAPABILITIES_SPEC_VERSION,
    VK_KHR_EXTERNAL_FENCE_SPEC_VERSION,
    VK_KHR_EXTERNAL_FENCE_WIN32_SPEC_VERSION,
    VK_KHR_EXTERNAL_FENCE_FD_SPEC_VERSION,
    VK_KHR_EXTENSION_117_SPEC_VERSION,
    VK_KHR_MAINTENANCE2_SPEC_VERSION,
    VK_KHR_EXTENSION_119_SPEC_VERSION,
    VK_KHR_GET_SURFACE_CAPABILITIES_2_SPEC_VERSION,
    VK_KHR_VARIABLE_POINTERS_SPEC_VERSION,
    VK_KHR_GET_DISPLAY_PROPERTIES_2_SPEC_VERSION,
    VK_MVK_IOS_SURFACE_SPEC_VERSION,
    VK_MVK_MACOS_SURFACE_SPEC_VERSION,
    VK_MVK_MOLTENVK_SPEC_VERSION,
    VK_EXT_EXTERNAL_MEMORY_DMA_BUF_SPEC_VERSION,
    VK_EXT_QUEUE_FAMILY_FOREIGN_SPEC_VERSION,
    VK_KHR_DEDICATED_ALLOCATION_SPEC_VERSION,
    VK_EXT_DEBUG_UTILS_SPEC_VERSION,
    VK_ANDROID_EXTERNAL_MEMORY_ANDROID_HARDWARE_BUFFER_SPEC_VERSION,
    VK_EXT_SAMPLER_FILTER_MINMAX_SPEC_VERSION,
    VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_SPEC_VERSION,
    VK_AMD_GPU_SHADER_INT16_SPEC_VERSION,
    VK_AMD_EXTENSION_134_SPEC_VERSION,
    VK_AMD_EXTENSION_135_SPEC_VERSION,
    VK_AMD_EXTENSION_136_SPEC_VERSION,
    VK_AMD_MIXED_ATTACHMENT_SAMPLES_SPEC_VERSION,
    VK_AMD_SHADER_FRAGMENT_MASK_SPEC_VERSION,
    VK_EXT_INLINE_UNIFORM_BLOCK_SPEC_VERSION,
    VK_AMD_EXTENSION_140_SPEC_VERSION,
    VK_EXT_SHADER_STENCIL_EXPORT_SPEC_VERSION,
    VK_AMD_EXTENSION_142_SPEC_VERSION,
    VK_AMD_EXTENSION_143_SPEC_VERSION,
    VK_EXT_SAMPLE_LOCATIONS_SPEC_VERSION,
    VK_KHR_RELAXED_BLOCK_LAYOUT_SPEC_VERSION,
    VK_KHR_GET_MEMORY_REQUIREMENTS_2_SPEC_VERSION,
    VK_KHR_IMAGE_FORMAT_LIST_SPEC_VERSION,
    VK_EXT_BLEND_OPERATION_ADVANCED_SPEC_VERSION,
    VK_NV_FRAGMENT_COVERAGE_TO_COLOR_SPEC_VERSION,
    VK_NV_EXTENSION_151_SPEC_VERSION,
    VK_NV_EXTENSION_152_SPEC_VERSION,
    VK_NV_FRAMEBUFFER_MIXED_SAMPLES_SPEC_VERSION,
    VK_NV_FILL_RECTANGLE_SPEC_VERSION,
    VK_NV_SHADER_SM_BUILTINS_SPEC_VERSION,
    VK_EXT_POST_DEPTH_COVERAGE_SPEC_VERSION,
    VK_KHR_SAMPLER_YCBCR_CONVERSION_SPEC_VERSION,
    VK_KHR_BIND_MEMORY_2_SPEC_VERSION,
    VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_SPEC_VERSION,
    VK_EXT_EXTENSION_160_SPEC_VERSION,
    VK_EXT_VALIDATION_CACHE_SPEC_VERSION,
    VK_EXT_DESCRIPTOR_INDEXING_SPEC_VERSION,
    VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_SPEC_VERSION,
    VK_EXT_EXTENSION_164_SPEC_VERSION,
    VK_NV_SHADING_RATE_IMAGE_SPEC_VERSION,
    VK_NV_RAY_TRACING_SPEC_VERSION,
    VK_NV_REPRESENTATIVE_FRAGMENT_TEST_SPEC_VERSION,
    VK_EXT_EXTENSION_168_SPEC_VERSION,
    VK_KHR_MAINTENANCE3_SPEC_VERSION,
    VK_KHR_DRAW_INDIRECT_COUNT_SPEC_VERSION,
    VK_EXT_FILTER_CUBIC_SPEC_VERSION,
    VK_QCOM_extension_172_SPEC_VERSION,
    VK_QCOM_extension_173_SPEC_VERSION,
    VK_QCOM_extension_174_SPEC_VERSION,
    VK_EXT_GLOBAL_PRIORITY_SPEC_VERSION,
    VK_KHR_EXTENSION_176_SPEC_VERSION,
    VK_KHR_EXTENSION_177_SPEC_VERSION,
    VK_KHR_8BIT_STORAGE_SPEC_VERSION,
    VK_EXT_EXTERNAL_MEMORY_HOST_SPEC_VERSION,
    VK_AMD_BUFFER_MARKER_SPEC_VERSION,
    VK_KHR_SHADER_ATOMIC_INT64_SPEC_VERSION,
    VK_KHR_EXTENSION_182_SPEC_VERSION,
    VK_KHR_EXTENSION_183_SPEC_VERSION,
    VK_AMD_PIPELINE_COMPILER_CONTROL_SPEC_VERSION,
    VK_EXT_CALIBRATED_TIMESTAMPS_SPEC_VERSION,
    VK_AMD_SHADER_CORE_PROPERTIES_SPEC_VERSION,
    VK_KHR_EXTENSION_187_SPEC_VERSION,
    VK_KHR_EXTENSION_188_SPEC_VERSION,
    VK_KHR_EXTENSION_189_SPEC_VERSION,
    VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_SPEC_VERSION,
    VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_SPEC_VERSION,
    VK_GGP_FRAME_TOKEN_SPEC_VERSION,
    VK_EXT_PIPELINE_CREATION_FEEDBACK_SPEC_VERSION,
    VK_GOOGLE_EXTENSION_194_SPEC_VERSION,
    VK_GOOGLE_EXTENSION_195_SPEC_VERSION,
    VK_GOOGLE_EXTENSION_196_SPEC_VERSION,
    VK_KHR_DRIVER_PROPERTIES_SPEC_VERSION,
    VK_KHR_SHADER_FLOAT_CONTROLS_SPEC_VERSION,
    VK_NV_SHADER_SUBGROUP_PARTITIONED_SPEC_VERSION,
    VK_KHR_DEPTH_STENCIL_RESOLVE_SPEC_VERSION,
    VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_SPEC_VERSION,
    VK_NV_COMPUTE_SHADER_DERIVATIVES_SPEC_VERSION,
    VK_NV_MESH_SHADER_SPEC_VERSION,
    VK_NV_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION,
    VK_NV_SHADER_IMAGE_FOOTPRINT_SPEC_VERSION,
    VK_NV_SCISSOR_EXCLUSIVE_SPEC_VERSION,
    VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_SPEC_VERSION,
    VK_KHR_EXTENSION_208_SPEC_VERSION,
    VK_KHR_EXTENSION_209_SPEC_VERSION,
    VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_SPEC_VERSION,
    VK_INTEL_PERFORMANCE_QUERY_SPEC_VERSION,
    VK_KHR_VULKAN_MEMORY_MODEL_SPEC_VERSION,
    VK_EXT_PCI_BUS_INFO_SPEC_VERSION,
    VK_AMD_DISPLAY_NATIVE_HDR_SPEC_VERSION,
    VK_FUCHSIA_IMAGEPIPE_SURFACE_SPEC_VERSION,
    VK_KHR_EXTENSION_216_SPEC_VERSION,
    VK_KHR_EXTENSION_217_SPEC_VERSION,
    VK_EXT_METAL_SURFACE_SPEC_VERSION,
    VK_EXT_FRAGMENT_DENSITY_MAP_SPEC_VERSION,
    VK_EXT_EXTENSION_220_SPEC_VERSION,
    VK_KHR_EXTENSION_221_SPEC_VERSION,
    VK_EXT_SCALAR_BLOCK_LAYOUT_SPEC_VERSION,
    VK_EXT_EXTENSION_223_SPEC_VERSION,
    VK_GOOGLE_HLSL_FUNCTIONALITY1_SPEC_VERSION,
    VK_GOOGLE_DECORATE_STRING_SPEC_VERSION,
    VK_EXT_SUBGROUP_SIZE_CONTROL_SPEC_VERSION,
    VK_AMD_EXTENSION_227_SPEC_VERSION,
    VK_AMD_SHADER_CORE_PROPERTIES_2_SPEC_VERSION,
    VK_AMD_EXTENSION_229_SPEC_VERSION,
    VK_AMD_DEVICE_COHERENT_MEMORY_SPEC_VERSION,
    VK_AMD_EXTENSION_231_SPEC_VERSION,
    VK_AMD_EXTENSION_232_SPEC_VERSION,
    VK_AMD_EXTENSION_233_SPEC_VERSION,
    VK_AMD_EXTENSION_234_SPEC_VERSION,
    VK_AMD_EXTENSION_235_SPEC_VERSION,
    VK_AMD_EXTENSION_236_SPEC_VERSION,
    VK_KHR_EXTENSION_237_SPEC_VERSION,
    VK_EXT_MEMORY_BUDGET_SPEC_VERSION,
    VK_EXT_MEMORY_PRIORITY_SPEC_VERSION,
    VK_KHR_SURFACE_PROTECTED_CAPABILITIES_SPEC_VERSION,
    VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_SPEC_VERSION,
    VK_NV_EXTENSION_242_SPEC_VERSION,
    VK_INTEL_EXTENSION_243_SPEC_VERSION,
    VK_MESA_EXTENSION_244_SPEC_VERSION,
    VK_EXT_BUFFER_DEVICE_ADDRESS_SPEC_VERSION,
    VK_EXT_EXTENSION_246_SPEC_VERSION,
    VK_EXT_SEPARATE_STENCIL_USAGE_SPEC_VERSION,
    VK_EXT_VALIDATION_FEATURES_SPEC_VERSION,
    VK_KHR_EXTENSION_249_SPEC_VERSION,
    VK_NV_COOPERATIVE_MATRIX_SPEC_VERSION,
    VK_NV_COVERAGE_REDUCTION_MODE_SPEC_VERSION,
    VK_EXT_FRAGMENT_SHADER_INTERLOCK_SPEC_VERSION,
    VK_EXT_YCBCR_IMAGE_ARRAYS_SPEC_VERSION,
    VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_SPEC_VERSION,
    VK_EXT_EXTENSION_255_SPEC_VERSION,
    VK_EXT_FULL_SCREEN_EXCLUSIVE_SPEC_VERSION,
    VK_EXT_HEADLESS_SURFACE_SPEC_VERSION,
    VK_EXT_EXTENSION_258_SPEC_VERSION,
    VK_EXT_EXTENSION_259_SPEC_VERSION,
    VK_EXT_LINE_RASTERIZATION_SPEC_VERSION,
    VK_NV_EXTENSION_261_SPEC_VERSION,
    VK_EXT_HOST_QUERY_RESET_SPEC_VERSION,
    VK_GOOGLE_EXTENSION_263_SPEC_VERSION,
    VK_BRCM_EXTENSION_264_SPEC_VERSION,
    VK_BRCM_EXTENSION_265_SPEC_VERSION,
    VK_EXT_INDEX_TYPE_UINT8_SPEC_VERSION,
    VK_EXT_EXTENSION_267_SPEC_VERSION,
    VK_EXT_EXTENSION_268_SPEC_VERSION,
    VK_KHR_EXTENSION_269_SPEC_VERSION,
    VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_SPEC_VERSION,
    VK_INTEL_EXTENSION_271_SPEC_VERSION,
    VK_INTEL_EXTENSION_272_SPEC_VERSION,
    VK_INTEL_EXTENSION_273_SPEC_VERSION,
    VK_INTEL_EXTENSION_274_SPEC_VERSION,
    VK_KHR_EXTENSION_275_SPEC_VERSION,
    VK_KHR_EXTENSION_276_SPEC_VERSION,
    VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_SPEC_VERSION,
    VK_NV_EXTENSION_278_SPEC_VERSION,
    VK_NV_EXTENSION_279_SPEC_VERSION,
    VK_KHR_EXTENSION_280_SPEC_VERSION,
    VK_ARM_EXTENSION_281_SPEC_VERSION,
    VK_EXT_TEXEL_BUFFER_ALIGNMENT_SPEC_VERSION,
    VK_QCOM_EXTENSION_283_SPEC_VERSION,
    VK_EXT_EXTENSION_284_SPEC_VERSION,
    VK_EXT_EXTENSION_285_SPEC_VERSION,
    VK_EXT_EXTENSION_286_SPEC_VERSION,
    VK_NVX_EXTENSION_287_SPEC_VERSION,
    VK_NVX_EXTENSION_288_SPEC_VERSION,
    VK_EXT_EXTENSION_289_SPEC_VERSION,
    
  }

  const VK_KHR_SURFACE_SPEC_VERSION: API_Extensions;
  const VK_KHR_SWAPCHAIN_SPEC_VERSION: API_Extensions;
  const VK_KHR_DISPLAY_SPEC_VERSION: API_Extensions;
  const VK_KHR_DISPLAY_SWAPCHAIN_SPEC_VERSION: API_Extensions;
  const VK_KHR_XLIB_SURFACE_SPEC_VERSION: API_Extensions;
  const VK_KHR_XCB_SURFACE_SPEC_VERSION: API_Extensions;
  const VK_KHR_WAYLAND_SURFACE_SPEC_VERSION: API_Extensions;
  const VK_KHR_MIR_SURFACE_SPEC_VERSION: API_Extensions;
  const VK_KHR_ANDROID_SURFACE_SPEC_VERSION: API_Extensions;
  const VK_KHR_WIN32_SURFACE_SPEC_VERSION: API_Extensions;
  const VK_ANDROID_NATIVE_BUFFER_SPEC_VERSION: API_Extensions;
  const VK_ANDROID_NATIVE_BUFFER_NUMBER: API_Extensions;
  const VK_EXT_DEBUG_REPORT_SPEC_VERSION: API_Extensions;
  const VK_NV_GLSL_SHADER_SPEC_VERSION: API_Extensions;
  const VK_EXT_DEPTH_RANGE_UNRESTRICTED_SPEC_VERSION: API_Extensions;
  const VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_SPEC_VERSION: API_Extensions;
  const VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE: API_Extensions;
  const VK_IMG_FILTER_CUBIC_SPEC_VERSION: API_Extensions;
  const VK_AMD_EXTENSION_17_SPEC_VERSION: API_Extensions;
  const VK_AMD_EXTENSION_18_SPEC_VERSION: API_Extensions;
  const VK_AMD_RASTERIZATION_ORDER_SPEC_VERSION: API_Extensions;
  const VK_AMD_EXTENSION_20_SPEC_VERSION: API_Extensions;
  const VK_AMD_SHADER_TRINARY_MINMAX_SPEC_VERSION: API_Extensions;
  const VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_SPEC_VERSION: API_Extensions;
  const VK_EXT_DEBUG_MARKER_SPEC_VERSION: API_Extensions;
  const VK_AMD_EXTENSION_24_SPEC_VERSION: API_Extensions;
  const VK_AMD_EXTENSION_25_SPEC_VERSION: API_Extensions;
  const VK_AMD_GCN_SHADER_SPEC_VERSION: API_Extensions;
  const VK_NV_DEDICATED_ALLOCATION_SPEC_VERSION: API_Extensions;
  const VK_EXT_EXTENSION_28_SPEC_VERSION: API_Extensions;
  const VK_EXT_TRANSFORM_FEEDBACK_SPEC_VERSION: API_Extensions;
  const VK_NVX_EXTENSION_30_SPEC_VERSION: API_Extensions;
  const VK_NVX_IMAGE_VIEW_HANDLE_SPEC_VERSION: API_Extensions;
  const VK_AMD_EXTENSION_32_SPEC_VERSION: API_Extensions;
  const VK_AMD_EXTENSION_33_SPEC_VERSION: API_Extensions;
  const VK_AMD_DRAW_INDIRECT_COUNT_SPEC_VERSION: API_Extensions;
  const VK_AMD_EXTENSION_35_SPEC_VERSION: API_Extensions;
  const VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_SPEC_VERSION: API_Extensions;
  const VK_AMD_GPU_SHADER_HALF_FLOAT_SPEC_VERSION: API_Extensions;
  const VK_AMD_SHADER_BALLOT_SPEC_VERSION: API_Extensions;
  const VK_AMD_EXTENSION_39_SPEC_VERSION: API_Extensions;
  const VK_AMD_EXTENSION_40_SPEC_VERSION: API_Extensions;
  const VK_AMD_EXTENSION_41_SPEC_VERSION: API_Extensions;
  const VK_AMD_TEXTURE_GATHER_BIAS_LOD_SPEC_VERSION: API_Extensions;
  const VK_AMD_SHADER_INFO_SPEC_VERSION: API_Extensions;
  const VK_AMD_EXTENSION_44_SPEC_VERSION: API_Extensions;
  const VK_AMD_EXTENSION_45_SPEC_VERSION: API_Extensions;
  const VK_AMD_EXTENSION_46_SPEC_VERSION: API_Extensions;
  const VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_SPEC_VERSION: API_Extensions;
  const VK_NVX_EXTENSION_48_SPEC_VERSION: API_Extensions;
  const VK_GOOGLE_EXTENSION_49_SPEC_VERSION: API_Extensions;
  const VK_GGP_STREAM_DESCRIPTOR_SURFACE_SPEC_VERSION: API_Extensions;
  const VK_NV_CORNER_SAMPLED_IMAGE_SPEC_VERSION: API_Extensions;
  const VK_NV_EXTENSION_52_SPEC_VERSION: API_Extensions;
  const VK_NV_EXTENSION_53_SPEC_VERSION: API_Extensions;
  const VK_KHR_MULTIVIEW_SPEC_VERSION: API_Extensions;
  const VK_IMG_FORMAT_PVRTC_SPEC_VERSION: API_Extensions;
  const VK_NV_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION: API_Extensions;
  const VK_NV_EXTERNAL_MEMORY_SPEC_VERSION: API_Extensions;
  const VK_NV_EXTERNAL_MEMORY_WIN32_SPEC_VERSION: API_Extensions;
  const VK_NV_WIN32_KEYED_MUTEX_SPEC_VERSION: API_Extensions;
  const VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_SPEC_VERSION: API_Extensions;
  const VK_KHR_DEVICE_GROUP_SPEC_VERSION: API_Extensions;
  const VK_EXT_VALIDATION_FLAGS_SPEC_VERSION: API_Extensions;
  const VK_NN_VI_SURFACE_SPEC_VERSION: API_Extensions;
  const VK_KHR_SHADER_DRAW_PARAMETERS_SPEC_VERSION: API_Extensions;
  const VK_EXT_SHADER_SUBGROUP_BALLOT_SPEC_VERSION: API_Extensions;
  const VK_EXT_SHADER_SUBGROUP_VOTE_SPEC_VERSION: API_Extensions;
  const VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_SPEC_VERSION: API_Extensions;
  const VK_EXT_ASTC_DECODE_MODE_SPEC_VERSION: API_Extensions;
  const VK_IMG_EXTENSION_69_SPEC_VERSION: API_Extensions;
  const VK_KHR_MAINTENANCE1_SPEC_VERSION: API_Extensions;
  const VK_KHR_DEVICE_GROUP_CREATION_SPEC_VERSION: API_Extensions;
  const VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION: API_Extensions;
  const VK_KHR_EXTERNAL_MEMORY_SPEC_VERSION: API_Extensions;
  const VK_KHR_EXTERNAL_MEMORY_WIN32_SPEC_VERSION: API_Extensions;
  const VK_KHR_EXTERNAL_MEMORY_FD_SPEC_VERSION: API_Extensions;
  const VK_KHR_WIN32_KEYED_MUTEX_SPEC_VERSION: API_Extensions;
  const VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_SPEC_VERSION: API_Extensions;
  const VK_KHR_EXTERNAL_SEMAPHORE_SPEC_VERSION: API_Extensions;
  const VK_KHR_EXTERNAL_SEMAPHORE_WIN32_SPEC_VERSION: API_Extensions;
  const VK_KHR_EXTERNAL_SEMAPHORE_FD_SPEC_VERSION: API_Extensions;
  const VK_KHR_PUSH_DESCRIPTOR_SPEC_VERSION: API_Extensions;
  const VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR: API_Extensions;
  const VK_EXT_CONDITIONAL_RENDERING_SPEC_VERSION: API_Extensions;
  const VK_KHR_SHADER_FLOAT16_INT8_SPEC_VERSION: API_Extensions;
  const VK_KHR_16BIT_STORAGE_SPEC_VERSION: API_Extensions;
  const VK_KHR_INCREMENTAL_PRESENT_SPEC_VERSION: API_Extensions;
  const VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_SPEC_VERSION: API_Extensions;
  const VK_NVX_DEVICE_GENERATED_COMMANDS_SPEC_VERSION: API_Extensions;
  const VK_NV_CLIP_SPACE_W_SCALING_SPEC_VERSION: API_Extensions;
  const VK_EXT_DIRECT_MODE_DISPLAY_SPEC_VERSION: API_Extensions;
  const VK_EXT_ACQUIRE_XLIB_DISPLAY_SPEC_VERSION: API_Extensions;
  const VK_EXT_DISPLAY_SURFACE_COUNTER_SPEC_VERSION: API_Extensions;
  const VK_EXT_DISPLAY_CONTROL_SPEC_VERSION: API_Extensions;
  const VK_GOOGLE_DISPLAY_TIMING_SPEC_VERSION: API_Extensions;
  const VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_SPEC_VERSION: API_Extensions;
  const VK_NV_GEOMETRY_SHADER_PASSTHROUGH_SPEC_VERSION: API_Extensions;
  const VK_NV_VIEWPORT_ARRAY2_SPEC_VERSION: API_Extensions;
  const VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_SPEC_VERSION: API_Extensions;
  const VK_NV_VIEWPORT_SWIZZLE_SPEC_VERSION: API_Extensions;
  const VK_EXT_DISCARD_RECTANGLES_SPEC_VERSION: API_Extensions;
  const VK_NV_EXTENSION_101_SPEC_VERSION: API_Extensions;
  const VK_EXT_CONSERVATIVE_RASTERIZATION_SPEC_VERSION: API_Extensions;
  const VK_EXT_DEPTH_CLIP_ENABLE_SPEC_VERSION: API_Extensions;
  const VK_NV_EXTENSION_104_SPEC_VERSION: API_Extensions;
  const VK_EXT_SWAPCHAIN_COLOR_SPACE_SPEC_VERSION: API_Extensions;
  const VK_EXT_HDR_METADATA_SPEC_VERSION: API_Extensions;
  const VK_IMG_EXTENSION_107_SPEC_VERSION: API_Extensions;
  const VK_IMG_EXTENSION_108_SPEC_VERSION: API_Extensions;
  const VK_KHR_IMAGELESS_FRAMEBUFFER_SPEC_VERSION: API_Extensions;
  const VK_KHR_CREATE_RENDERPASS_2_SPEC_VERSION: API_Extensions;
  const VK_IMG_EXTENSION_111_SPEC_VERSION: API_Extensions;
  const VK_KHR_SHARED_PRESENTABLE_IMAGE_SPEC_VERSION: API_Extensions;
  const VK_KHR_EXTERNAL_FENCE_CAPABILITIES_SPEC_VERSION: API_Extensions;
  const VK_KHR_EXTERNAL_FENCE_SPEC_VERSION: API_Extensions;
  const VK_KHR_EXTERNAL_FENCE_WIN32_SPEC_VERSION: API_Extensions;
  const VK_KHR_EXTERNAL_FENCE_FD_SPEC_VERSION: API_Extensions;
  const VK_KHR_EXTENSION_117_SPEC_VERSION: API_Extensions;
  const VK_KHR_MAINTENANCE2_SPEC_VERSION: API_Extensions;
  const VK_KHR_EXTENSION_119_SPEC_VERSION: API_Extensions;
  const VK_KHR_GET_SURFACE_CAPABILITIES_2_SPEC_VERSION: API_Extensions;
  const VK_KHR_VARIABLE_POINTERS_SPEC_VERSION: API_Extensions;
  const VK_KHR_GET_DISPLAY_PROPERTIES_2_SPEC_VERSION: API_Extensions;
  const VK_MVK_IOS_SURFACE_SPEC_VERSION: API_Extensions;
  const VK_MVK_MACOS_SURFACE_SPEC_VERSION: API_Extensions;
  const VK_MVK_MOLTENVK_SPEC_VERSION: API_Extensions;
  const VK_EXT_EXTERNAL_MEMORY_DMA_BUF_SPEC_VERSION: API_Extensions;
  const VK_EXT_QUEUE_FAMILY_FOREIGN_SPEC_VERSION: API_Extensions;
  const VK_KHR_DEDICATED_ALLOCATION_SPEC_VERSION: API_Extensions;
  const VK_EXT_DEBUG_UTILS_SPEC_VERSION: API_Extensions;
  const VK_ANDROID_EXTERNAL_MEMORY_ANDROID_HARDWARE_BUFFER_SPEC_VERSION: API_Extensions;
  const VK_EXT_SAMPLER_FILTER_MINMAX_SPEC_VERSION: API_Extensions;
  const VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_SPEC_VERSION: API_Extensions;
  const VK_AMD_GPU_SHADER_INT16_SPEC_VERSION: API_Extensions;
  const VK_AMD_EXTENSION_134_SPEC_VERSION: API_Extensions;
  const VK_AMD_EXTENSION_135_SPEC_VERSION: API_Extensions;
  const VK_AMD_EXTENSION_136_SPEC_VERSION: API_Extensions;
  const VK_AMD_MIXED_ATTACHMENT_SAMPLES_SPEC_VERSION: API_Extensions;
  const VK_AMD_SHADER_FRAGMENT_MASK_SPEC_VERSION: API_Extensions;
  const VK_EXT_INLINE_UNIFORM_BLOCK_SPEC_VERSION: API_Extensions;
  const VK_AMD_EXTENSION_140_SPEC_VERSION: API_Extensions;
  const VK_EXT_SHADER_STENCIL_EXPORT_SPEC_VERSION: API_Extensions;
  const VK_AMD_EXTENSION_142_SPEC_VERSION: API_Extensions;
  const VK_AMD_EXTENSION_143_SPEC_VERSION: API_Extensions;
  const VK_EXT_SAMPLE_LOCATIONS_SPEC_VERSION: API_Extensions;
  const VK_KHR_RELAXED_BLOCK_LAYOUT_SPEC_VERSION: API_Extensions;
  const VK_KHR_GET_MEMORY_REQUIREMENTS_2_SPEC_VERSION: API_Extensions;
  const VK_KHR_IMAGE_FORMAT_LIST_SPEC_VERSION: API_Extensions;
  const VK_EXT_BLEND_OPERATION_ADVANCED_SPEC_VERSION: API_Extensions;
  const VK_NV_FRAGMENT_COVERAGE_TO_COLOR_SPEC_VERSION: API_Extensions;
  const VK_NV_EXTENSION_151_SPEC_VERSION: API_Extensions;
  const VK_NV_EXTENSION_152_SPEC_VERSION: API_Extensions;
  const VK_NV_FRAMEBUFFER_MIXED_SAMPLES_SPEC_VERSION: API_Extensions;
  const VK_NV_FILL_RECTANGLE_SPEC_VERSION: API_Extensions;
  const VK_NV_SHADER_SM_BUILTINS_SPEC_VERSION: API_Extensions;
  const VK_EXT_POST_DEPTH_COVERAGE_SPEC_VERSION: API_Extensions;
  const VK_KHR_SAMPLER_YCBCR_CONVERSION_SPEC_VERSION: API_Extensions;
  const VK_KHR_BIND_MEMORY_2_SPEC_VERSION: API_Extensions;
  const VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_SPEC_VERSION: API_Extensions;
  const VK_EXT_EXTENSION_160_SPEC_VERSION: API_Extensions;
  const VK_EXT_VALIDATION_CACHE_SPEC_VERSION: API_Extensions;
  const VK_EXT_DESCRIPTOR_INDEXING_SPEC_VERSION: API_Extensions;
  const VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_SPEC_VERSION: API_Extensions;
  const VK_EXT_EXTENSION_164_SPEC_VERSION: API_Extensions;
  const VK_NV_SHADING_RATE_IMAGE_SPEC_VERSION: API_Extensions;
  const VK_NV_RAY_TRACING_SPEC_VERSION: API_Extensions;
  const VK_NV_REPRESENTATIVE_FRAGMENT_TEST_SPEC_VERSION: API_Extensions;
  const VK_EXT_EXTENSION_168_SPEC_VERSION: API_Extensions;
  const VK_KHR_MAINTENANCE3_SPEC_VERSION: API_Extensions;
  const VK_KHR_DRAW_INDIRECT_COUNT_SPEC_VERSION: API_Extensions;
  const VK_EXT_FILTER_CUBIC_SPEC_VERSION: API_Extensions;
  const VK_QCOM_extension_172_SPEC_VERSION: API_Extensions;
  const VK_QCOM_extension_173_SPEC_VERSION: API_Extensions;
  const VK_QCOM_extension_174_SPEC_VERSION: API_Extensions;
  const VK_EXT_GLOBAL_PRIORITY_SPEC_VERSION: API_Extensions;
  const VK_KHR_EXTENSION_176_SPEC_VERSION: API_Extensions;
  const VK_KHR_EXTENSION_177_SPEC_VERSION: API_Extensions;
  const VK_KHR_8BIT_STORAGE_SPEC_VERSION: API_Extensions;
  const VK_EXT_EXTERNAL_MEMORY_HOST_SPEC_VERSION: API_Extensions;
  const VK_AMD_BUFFER_MARKER_SPEC_VERSION: API_Extensions;
  const VK_KHR_SHADER_ATOMIC_INT64_SPEC_VERSION: API_Extensions;
  const VK_KHR_EXTENSION_182_SPEC_VERSION: API_Extensions;
  const VK_KHR_EXTENSION_183_SPEC_VERSION: API_Extensions;
  const VK_AMD_PIPELINE_COMPILER_CONTROL_SPEC_VERSION: API_Extensions;
  const VK_EXT_CALIBRATED_TIMESTAMPS_SPEC_VERSION: API_Extensions;
  const VK_AMD_SHADER_CORE_PROPERTIES_SPEC_VERSION: API_Extensions;
  const VK_KHR_EXTENSION_187_SPEC_VERSION: API_Extensions;
  const VK_KHR_EXTENSION_188_SPEC_VERSION: API_Extensions;
  const VK_KHR_EXTENSION_189_SPEC_VERSION: API_Extensions;
  const VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_SPEC_VERSION: API_Extensions;
  const VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_SPEC_VERSION: API_Extensions;
  const VK_GGP_FRAME_TOKEN_SPEC_VERSION: API_Extensions;
  const VK_EXT_PIPELINE_CREATION_FEEDBACK_SPEC_VERSION: API_Extensions;
  const VK_GOOGLE_EXTENSION_194_SPEC_VERSION: API_Extensions;
  const VK_GOOGLE_EXTENSION_195_SPEC_VERSION: API_Extensions;
  const VK_GOOGLE_EXTENSION_196_SPEC_VERSION: API_Extensions;
  const VK_KHR_DRIVER_PROPERTIES_SPEC_VERSION: API_Extensions;
  const VK_KHR_SHADER_FLOAT_CONTROLS_SPEC_VERSION: API_Extensions;
  const VK_NV_SHADER_SUBGROUP_PARTITIONED_SPEC_VERSION: API_Extensions;
  const VK_KHR_DEPTH_STENCIL_RESOLVE_SPEC_VERSION: API_Extensions;
  const VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_SPEC_VERSION: API_Extensions;
  const VK_NV_COMPUTE_SHADER_DERIVATIVES_SPEC_VERSION: API_Extensions;
  const VK_NV_MESH_SHADER_SPEC_VERSION: API_Extensions;
  const VK_NV_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION: API_Extensions;
  const VK_NV_SHADER_IMAGE_FOOTPRINT_SPEC_VERSION: API_Extensions;
  const VK_NV_SCISSOR_EXCLUSIVE_SPEC_VERSION: API_Extensions;
  const VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_SPEC_VERSION: API_Extensions;
  const VK_KHR_EXTENSION_208_SPEC_VERSION: API_Extensions;
  const VK_KHR_EXTENSION_209_SPEC_VERSION: API_Extensions;
  const VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_SPEC_VERSION: API_Extensions;
  const VK_INTEL_PERFORMANCE_QUERY_SPEC_VERSION: API_Extensions;
  const VK_KHR_VULKAN_MEMORY_MODEL_SPEC_VERSION: API_Extensions;
  const VK_EXT_PCI_BUS_INFO_SPEC_VERSION: API_Extensions;
  const VK_AMD_DISPLAY_NATIVE_HDR_SPEC_VERSION: API_Extensions;
  const VK_FUCHSIA_IMAGEPIPE_SURFACE_SPEC_VERSION: API_Extensions;
  const VK_KHR_EXTENSION_216_SPEC_VERSION: API_Extensions;
  const VK_KHR_EXTENSION_217_SPEC_VERSION: API_Extensions;
  const VK_EXT_METAL_SURFACE_SPEC_VERSION: API_Extensions;
  const VK_EXT_FRAGMENT_DENSITY_MAP_SPEC_VERSION: API_Extensions;
  const VK_EXT_EXTENSION_220_SPEC_VERSION: API_Extensions;
  const VK_KHR_EXTENSION_221_SPEC_VERSION: API_Extensions;
  const VK_EXT_SCALAR_BLOCK_LAYOUT_SPEC_VERSION: API_Extensions;
  const VK_EXT_EXTENSION_223_SPEC_VERSION: API_Extensions;
  const VK_GOOGLE_HLSL_FUNCTIONALITY1_SPEC_VERSION: API_Extensions;
  const VK_GOOGLE_DECORATE_STRING_SPEC_VERSION: API_Extensions;
  const VK_EXT_SUBGROUP_SIZE_CONTROL_SPEC_VERSION: API_Extensions;
  const VK_AMD_EXTENSION_227_SPEC_VERSION: API_Extensions;
  const VK_AMD_SHADER_CORE_PROPERTIES_2_SPEC_VERSION: API_Extensions;
  const VK_AMD_EXTENSION_229_SPEC_VERSION: API_Extensions;
  const VK_AMD_DEVICE_COHERENT_MEMORY_SPEC_VERSION: API_Extensions;
  const VK_AMD_EXTENSION_231_SPEC_VERSION: API_Extensions;
  const VK_AMD_EXTENSION_232_SPEC_VERSION: API_Extensions;
  const VK_AMD_EXTENSION_233_SPEC_VERSION: API_Extensions;
  const VK_AMD_EXTENSION_234_SPEC_VERSION: API_Extensions;
  const VK_AMD_EXTENSION_235_SPEC_VERSION: API_Extensions;
  const VK_AMD_EXTENSION_236_SPEC_VERSION: API_Extensions;
  const VK_KHR_EXTENSION_237_SPEC_VERSION: API_Extensions;
  const VK_EXT_MEMORY_BUDGET_SPEC_VERSION: API_Extensions;
  const VK_EXT_MEMORY_PRIORITY_SPEC_VERSION: API_Extensions;
  const VK_KHR_SURFACE_PROTECTED_CAPABILITIES_SPEC_VERSION: API_Extensions;
  const VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_SPEC_VERSION: API_Extensions;
  const VK_NV_EXTENSION_242_SPEC_VERSION: API_Extensions;
  const VK_INTEL_EXTENSION_243_SPEC_VERSION: API_Extensions;
  const VK_MESA_EXTENSION_244_SPEC_VERSION: API_Extensions;
  const VK_EXT_BUFFER_DEVICE_ADDRESS_SPEC_VERSION: API_Extensions;
  const VK_EXT_EXTENSION_246_SPEC_VERSION: API_Extensions;
  const VK_EXT_SEPARATE_STENCIL_USAGE_SPEC_VERSION: API_Extensions;
  const VK_EXT_VALIDATION_FEATURES_SPEC_VERSION: API_Extensions;
  const VK_KHR_EXTENSION_249_SPEC_VERSION: API_Extensions;
  const VK_NV_COOPERATIVE_MATRIX_SPEC_VERSION: API_Extensions;
  const VK_NV_COVERAGE_REDUCTION_MODE_SPEC_VERSION: API_Extensions;
  const VK_EXT_FRAGMENT_SHADER_INTERLOCK_SPEC_VERSION: API_Extensions;
  const VK_EXT_YCBCR_IMAGE_ARRAYS_SPEC_VERSION: API_Extensions;
  const VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_SPEC_VERSION: API_Extensions;
  const VK_EXT_EXTENSION_255_SPEC_VERSION: API_Extensions;
  const VK_EXT_FULL_SCREEN_EXCLUSIVE_SPEC_VERSION: API_Extensions;
  const VK_EXT_HEADLESS_SURFACE_SPEC_VERSION: API_Extensions;
  const VK_EXT_EXTENSION_258_SPEC_VERSION: API_Extensions;
  const VK_EXT_EXTENSION_259_SPEC_VERSION: API_Extensions;
  const VK_EXT_LINE_RASTERIZATION_SPEC_VERSION: API_Extensions;
  const VK_NV_EXTENSION_261_SPEC_VERSION: API_Extensions;
  const VK_EXT_HOST_QUERY_RESET_SPEC_VERSION: API_Extensions;
  const VK_GOOGLE_EXTENSION_263_SPEC_VERSION: API_Extensions;
  const VK_BRCM_EXTENSION_264_SPEC_VERSION: API_Extensions;
  const VK_BRCM_EXTENSION_265_SPEC_VERSION: API_Extensions;
  const VK_EXT_INDEX_TYPE_UINT8_SPEC_VERSION: API_Extensions;
  const VK_EXT_EXTENSION_267_SPEC_VERSION: API_Extensions;
  const VK_EXT_EXTENSION_268_SPEC_VERSION: API_Extensions;
  const VK_KHR_EXTENSION_269_SPEC_VERSION: API_Extensions;
  const VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_SPEC_VERSION: API_Extensions;
  const VK_INTEL_EXTENSION_271_SPEC_VERSION: API_Extensions;
  const VK_INTEL_EXTENSION_272_SPEC_VERSION: API_Extensions;
  const VK_INTEL_EXTENSION_273_SPEC_VERSION: API_Extensions;
  const VK_INTEL_EXTENSION_274_SPEC_VERSION: API_Extensions;
  const VK_KHR_EXTENSION_275_SPEC_VERSION: API_Extensions;
  const VK_KHR_EXTENSION_276_SPEC_VERSION: API_Extensions;
  const VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_SPEC_VERSION: API_Extensions;
  const VK_NV_EXTENSION_278_SPEC_VERSION: API_Extensions;
  const VK_NV_EXTENSION_279_SPEC_VERSION: API_Extensions;
  const VK_KHR_EXTENSION_280_SPEC_VERSION: API_Extensions;
  const VK_ARM_EXTENSION_281_SPEC_VERSION: API_Extensions;
  const VK_EXT_TEXEL_BUFFER_ALIGNMENT_SPEC_VERSION: API_Extensions;
  const VK_QCOM_EXTENSION_283_SPEC_VERSION: API_Extensions;
  const VK_EXT_EXTENSION_284_SPEC_VERSION: API_Extensions;
  const VK_EXT_EXTENSION_285_SPEC_VERSION: API_Extensions;
  const VK_EXT_EXTENSION_286_SPEC_VERSION: API_Extensions;
  const VK_NVX_EXTENSION_287_SPEC_VERSION: API_Extensions;
  const VK_NVX_EXTENSION_288_SPEC_VERSION: API_Extensions;
  const VK_EXT_EXTENSION_289_SPEC_VERSION: API_Extensions;
  

  
  /**
   * 
   * @member VK_MAX_PHYSICAL_DEVICE_NAME_SIZE
   * @member VK_UUID_SIZE
   * @member VK_LUID_SIZE
   * @member VK_LUID_SIZE_KHR
   * @member VK_MAX_EXTENSION_NAME_SIZE
   * @member VK_MAX_DESCRIPTION_SIZE
   * @member VK_MAX_MEMORY_TYPES
   * @member VK_MAX_MEMORY_HEAPS
   * @member VK_LOD_CLAMP_NONE
   * @member VK_REMAINING_MIP_LEVELS
   * @member VK_REMAINING_ARRAY_LAYERS
   * @member VK_WHOLE_SIZE
   * @member VK_ATTACHMENT_UNUSED
   * @member VK_TRUE
   * @member VK_FALSE
   * @member VK_QUEUE_FAMILY_IGNORED
   * @member VK_QUEUE_FAMILY_EXTERNAL
   * @member VK_QUEUE_FAMILY_EXTERNAL_KHR
   * @member VK_QUEUE_FAMILY_FOREIGN_EXT
   * @member VK_SUBPASS_EXTERNAL
   * @member VK_MAX_DEVICE_GROUP_SIZE
   * @member VK_MAX_DEVICE_GROUP_SIZE_KHR
   * @member VK_MAX_DRIVER_NAME_SIZE_KHR
   * @member VK_MAX_DRIVER_INFO_SIZE_KHR
   * @member VK_SHADER_UNUSED_NV
   * @member VK_NULL_HANDLE
   */
  enum API_Constants {
    VK_MAX_PHYSICAL_DEVICE_NAME_SIZE,
    VK_UUID_SIZE,
    VK_LUID_SIZE,
    VK_LUID_SIZE_KHR,
    VK_MAX_EXTENSION_NAME_SIZE,
    VK_MAX_DESCRIPTION_SIZE,
    VK_MAX_MEMORY_TYPES,
    VK_MAX_MEMORY_HEAPS,
    VK_LOD_CLAMP_NONE,
    VK_REMAINING_MIP_LEVELS,
    VK_REMAINING_ARRAY_LAYERS,
    VK_WHOLE_SIZE,
    VK_ATTACHMENT_UNUSED,
    VK_TRUE,
    VK_FALSE,
    VK_QUEUE_FAMILY_IGNORED,
    VK_QUEUE_FAMILY_EXTERNAL,
    VK_QUEUE_FAMILY_EXTERNAL_KHR,
    VK_QUEUE_FAMILY_FOREIGN_EXT,
    VK_SUBPASS_EXTERNAL,
    VK_MAX_DEVICE_GROUP_SIZE,
    VK_MAX_DEVICE_GROUP_SIZE_KHR,
    VK_MAX_DRIVER_NAME_SIZE_KHR,
    VK_MAX_DRIVER_INFO_SIZE_KHR,
    VK_SHADER_UNUSED_NV,
    VK_NULL_HANDLE,
    
  }

  const VK_MAX_PHYSICAL_DEVICE_NAME_SIZE: API_Constants;
  const VK_UUID_SIZE: API_Constants;
  const VK_LUID_SIZE: API_Constants;
  const VK_LUID_SIZE_KHR: API_Constants;
  const VK_MAX_EXTENSION_NAME_SIZE: API_Constants;
  const VK_MAX_DESCRIPTION_SIZE: API_Constants;
  const VK_MAX_MEMORY_TYPES: API_Constants;
  const VK_MAX_MEMORY_HEAPS: API_Constants;
  const VK_LOD_CLAMP_NONE: API_Constants;
  const VK_REMAINING_MIP_LEVELS: API_Constants;
  const VK_REMAINING_ARRAY_LAYERS: API_Constants;
  const VK_WHOLE_SIZE: API_Constants;
  const VK_ATTACHMENT_UNUSED: API_Constants;
  const VK_TRUE: API_Constants;
  const VK_FALSE: API_Constants;
  const VK_QUEUE_FAMILY_IGNORED: API_Constants;
  const VK_QUEUE_FAMILY_EXTERNAL: API_Constants;
  const VK_QUEUE_FAMILY_EXTERNAL_KHR: API_Constants;
  const VK_QUEUE_FAMILY_FOREIGN_EXT: API_Constants;
  const VK_SUBPASS_EXTERNAL: API_Constants;
  const VK_MAX_DEVICE_GROUP_SIZE: API_Constants;
  const VK_MAX_DEVICE_GROUP_SIZE_KHR: API_Constants;
  const VK_MAX_DRIVER_NAME_SIZE_KHR: API_Constants;
  const VK_MAX_DRIVER_INFO_SIZE_KHR: API_Constants;
  const VK_SHADER_UNUSED_NV: API_Constants;
  const VK_NULL_HANDLE: API_Constants;
  

  
  /**
   * 
   * @member VK_IMAGE_LAYOUT_UNDEFINED
   * @member VK_IMAGE_LAYOUT_GENERAL
   * @member VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL
   * @member VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL
   * @member VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL
   * @member VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL
   * @member VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL
   * @member VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL
   * @member VK_IMAGE_LAYOUT_PREINITIALIZED
   * @member VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL
   * @member VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL
   * @member VK_IMAGE_LAYOUT_PRESENT_SRC_KHR
   * @member VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR
   * @member VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV
   * @member VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT
   * @member VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR
   * @member VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR
   */
  enum VkImageLayout {
    VK_IMAGE_LAYOUT_UNDEFINED,
    VK_IMAGE_LAYOUT_GENERAL,
    VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL,
    VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL,
    VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL,
    VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL,
    VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL,
    VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL,
    VK_IMAGE_LAYOUT_PREINITIALIZED,
    VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL,
    VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL,
    VK_IMAGE_LAYOUT_PRESENT_SRC_KHR,
    VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR,
    VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV,
    VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT,
    VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR,
    VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR,
    
  }

  const VK_IMAGE_LAYOUT_UNDEFINED: VkImageLayout;
  const VK_IMAGE_LAYOUT_GENERAL: VkImageLayout;
  const VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL: VkImageLayout;
  const VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL: VkImageLayout;
  const VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL: VkImageLayout;
  const VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL: VkImageLayout;
  const VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL: VkImageLayout;
  const VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL: VkImageLayout;
  const VK_IMAGE_LAYOUT_PREINITIALIZED: VkImageLayout;
  const VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL: VkImageLayout;
  const VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL: VkImageLayout;
  const VK_IMAGE_LAYOUT_PRESENT_SRC_KHR: VkImageLayout;
  const VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR: VkImageLayout;
  const VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV: VkImageLayout;
  const VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT: VkImageLayout;
  const VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR: VkImageLayout;
  const VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR: VkImageLayout;
  

  
  /**
   * 
   * @member VK_ATTACHMENT_LOAD_OP_LOAD
   * @member VK_ATTACHMENT_LOAD_OP_CLEAR
   * @member VK_ATTACHMENT_LOAD_OP_DONT_CARE
   */
  enum VkAttachmentLoadOp {
    VK_ATTACHMENT_LOAD_OP_LOAD,
    VK_ATTACHMENT_LOAD_OP_CLEAR,
    VK_ATTACHMENT_LOAD_OP_DONT_CARE,
    
  }

  const VK_ATTACHMENT_LOAD_OP_LOAD: VkAttachmentLoadOp;
  const VK_ATTACHMENT_LOAD_OP_CLEAR: VkAttachmentLoadOp;
  const VK_ATTACHMENT_LOAD_OP_DONT_CARE: VkAttachmentLoadOp;
  

  
  /**
   * 
   * @member VK_ATTACHMENT_STORE_OP_STORE
   * @member VK_ATTACHMENT_STORE_OP_DONT_CARE
   */
  enum VkAttachmentStoreOp {
    VK_ATTACHMENT_STORE_OP_STORE,
    VK_ATTACHMENT_STORE_OP_DONT_CARE,
    
  }

  const VK_ATTACHMENT_STORE_OP_STORE: VkAttachmentStoreOp;
  const VK_ATTACHMENT_STORE_OP_DONT_CARE: VkAttachmentStoreOp;
  

  
  /**
   * 
   * @member VK_IMAGE_TYPE_1D
   * @member VK_IMAGE_TYPE_2D
   * @member VK_IMAGE_TYPE_3D
   */
  enum VkImageType {
    VK_IMAGE_TYPE_1D,
    VK_IMAGE_TYPE_2D,
    VK_IMAGE_TYPE_3D,
    
  }

  const VK_IMAGE_TYPE_1D: VkImageType;
  const VK_IMAGE_TYPE_2D: VkImageType;
  const VK_IMAGE_TYPE_3D: VkImageType;
  

  
  /**
   * 
   * @member VK_IMAGE_TILING_OPTIMAL
   * @member VK_IMAGE_TILING_LINEAR
   * @member VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT
   */
  enum VkImageTiling {
    VK_IMAGE_TILING_OPTIMAL,
    VK_IMAGE_TILING_LINEAR,
    VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT,
    
  }

  const VK_IMAGE_TILING_OPTIMAL: VkImageTiling;
  const VK_IMAGE_TILING_LINEAR: VkImageTiling;
  const VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT: VkImageTiling;
  

  
  /**
   * 
   * @member VK_IMAGE_VIEW_TYPE_1D
   * @member VK_IMAGE_VIEW_TYPE_2D
   * @member VK_IMAGE_VIEW_TYPE_3D
   * @member VK_IMAGE_VIEW_TYPE_CUBE
   * @member VK_IMAGE_VIEW_TYPE_1D_ARRAY
   * @member VK_IMAGE_VIEW_TYPE_2D_ARRAY
   * @member VK_IMAGE_VIEW_TYPE_CUBE_ARRAY
   */
  enum VkImageViewType {
    VK_IMAGE_VIEW_TYPE_1D,
    VK_IMAGE_VIEW_TYPE_2D,
    VK_IMAGE_VIEW_TYPE_3D,
    VK_IMAGE_VIEW_TYPE_CUBE,
    VK_IMAGE_VIEW_TYPE_1D_ARRAY,
    VK_IMAGE_VIEW_TYPE_2D_ARRAY,
    VK_IMAGE_VIEW_TYPE_CUBE_ARRAY,
    
  }

  const VK_IMAGE_VIEW_TYPE_1D: VkImageViewType;
  const VK_IMAGE_VIEW_TYPE_2D: VkImageViewType;
  const VK_IMAGE_VIEW_TYPE_3D: VkImageViewType;
  const VK_IMAGE_VIEW_TYPE_CUBE: VkImageViewType;
  const VK_IMAGE_VIEW_TYPE_1D_ARRAY: VkImageViewType;
  const VK_IMAGE_VIEW_TYPE_2D_ARRAY: VkImageViewType;
  const VK_IMAGE_VIEW_TYPE_CUBE_ARRAY: VkImageViewType;
  

  
  /**
   * 
   * @member VK_COMMAND_BUFFER_LEVEL_PRIMARY
   * @member VK_COMMAND_BUFFER_LEVEL_SECONDARY
   */
  enum VkCommandBufferLevel {
    VK_COMMAND_BUFFER_LEVEL_PRIMARY,
    VK_COMMAND_BUFFER_LEVEL_SECONDARY,
    
  }

  const VK_COMMAND_BUFFER_LEVEL_PRIMARY: VkCommandBufferLevel;
  const VK_COMMAND_BUFFER_LEVEL_SECONDARY: VkCommandBufferLevel;
  

  
  /**
   * 
   * @member VK_COMPONENT_SWIZZLE_IDENTITY
   * @member VK_COMPONENT_SWIZZLE_ZERO
   * @member VK_COMPONENT_SWIZZLE_ONE
   * @member VK_COMPONENT_SWIZZLE_R
   * @member VK_COMPONENT_SWIZZLE_G
   * @member VK_COMPONENT_SWIZZLE_B
   * @member VK_COMPONENT_SWIZZLE_A
   */
  enum VkComponentSwizzle {
    VK_COMPONENT_SWIZZLE_IDENTITY,
    VK_COMPONENT_SWIZZLE_ZERO,
    VK_COMPONENT_SWIZZLE_ONE,
    VK_COMPONENT_SWIZZLE_R,
    VK_COMPONENT_SWIZZLE_G,
    VK_COMPONENT_SWIZZLE_B,
    VK_COMPONENT_SWIZZLE_A,
    
  }

  const VK_COMPONENT_SWIZZLE_IDENTITY: VkComponentSwizzle;
  const VK_COMPONENT_SWIZZLE_ZERO: VkComponentSwizzle;
  const VK_COMPONENT_SWIZZLE_ONE: VkComponentSwizzle;
  const VK_COMPONENT_SWIZZLE_R: VkComponentSwizzle;
  const VK_COMPONENT_SWIZZLE_G: VkComponentSwizzle;
  const VK_COMPONENT_SWIZZLE_B: VkComponentSwizzle;
  const VK_COMPONENT_SWIZZLE_A: VkComponentSwizzle;
  

  
  /**
   * 
   * @member VK_DESCRIPTOR_TYPE_SAMPLER
   * @member VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER
   * @member VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE
   * @member VK_DESCRIPTOR_TYPE_STORAGE_IMAGE
   * @member VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER
   * @member VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER
   * @member VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER
   * @member VK_DESCRIPTOR_TYPE_STORAGE_BUFFER
   * @member VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC
   * @member VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC
   * @member VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT
   * @member VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT
   * @member VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV
   */
  enum VkDescriptorType {
    VK_DESCRIPTOR_TYPE_SAMPLER,
    VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER,
    VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE,
    VK_DESCRIPTOR_TYPE_STORAGE_IMAGE,
    VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER,
    VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER,
    VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER,
    VK_DESCRIPTOR_TYPE_STORAGE_BUFFER,
    VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC,
    VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC,
    VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT,
    VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT,
    VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV,
    
  }

  const VK_DESCRIPTOR_TYPE_SAMPLER: VkDescriptorType;
  const VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER: VkDescriptorType;
  const VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE: VkDescriptorType;
  const VK_DESCRIPTOR_TYPE_STORAGE_IMAGE: VkDescriptorType;
  const VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER: VkDescriptorType;
  const VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER: VkDescriptorType;
  const VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER: VkDescriptorType;
  const VK_DESCRIPTOR_TYPE_STORAGE_BUFFER: VkDescriptorType;
  const VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC: VkDescriptorType;
  const VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC: VkDescriptorType;
  const VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT: VkDescriptorType;
  const VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT: VkDescriptorType;
  const VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV: VkDescriptorType;
  

  
  /**
   * 
   * @member VK_QUERY_TYPE_OCCLUSION
   * @member VK_QUERY_TYPE_PIPELINE_STATISTICS
   * @member VK_QUERY_TYPE_TIMESTAMP
   * @member VK_QUERY_TYPE_RESERVED_8
   * @member VK_QUERY_TYPE_RESERVED_4
   * @member VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT
   * @member VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV
   * @member VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL
   */
  enum VkQueryType {
    VK_QUERY_TYPE_OCCLUSION,
    VK_QUERY_TYPE_PIPELINE_STATISTICS,
    VK_QUERY_TYPE_TIMESTAMP,
    VK_QUERY_TYPE_RESERVED_8,
    VK_QUERY_TYPE_RESERVED_4,
    VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT,
    VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV,
    VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL,
    
  }

  const VK_QUERY_TYPE_OCCLUSION: VkQueryType;
  const VK_QUERY_TYPE_PIPELINE_STATISTICS: VkQueryType;
  const VK_QUERY_TYPE_TIMESTAMP: VkQueryType;
  const VK_QUERY_TYPE_RESERVED_8: VkQueryType;
  const VK_QUERY_TYPE_RESERVED_4: VkQueryType;
  const VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT: VkQueryType;
  const VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV: VkQueryType;
  const VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL: VkQueryType;
  

  
  /**
   * 
   * @member VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK
   * @member VK_BORDER_COLOR_INT_TRANSPARENT_BLACK
   * @member VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK
   * @member VK_BORDER_COLOR_INT_OPAQUE_BLACK
   * @member VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE
   * @member VK_BORDER_COLOR_INT_OPAQUE_WHITE
   */
  enum VkBorderColor {
    VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK,
    VK_BORDER_COLOR_INT_TRANSPARENT_BLACK,
    VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK,
    VK_BORDER_COLOR_INT_OPAQUE_BLACK,
    VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE,
    VK_BORDER_COLOR_INT_OPAQUE_WHITE,
    
  }

  const VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK: VkBorderColor;
  const VK_BORDER_COLOR_INT_TRANSPARENT_BLACK: VkBorderColor;
  const VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK: VkBorderColor;
  const VK_BORDER_COLOR_INT_OPAQUE_BLACK: VkBorderColor;
  const VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE: VkBorderColor;
  const VK_BORDER_COLOR_INT_OPAQUE_WHITE: VkBorderColor;
  

  
  /**
   * 
   * @member VK_PIPELINE_BIND_POINT_GRAPHICS
   * @member VK_PIPELINE_BIND_POINT_COMPUTE
   * @member VK_PIPELINE_BIND_POINT_RAY_TRACING_NV
   */
  enum VkPipelineBindPoint {
    VK_PIPELINE_BIND_POINT_GRAPHICS,
    VK_PIPELINE_BIND_POINT_COMPUTE,
    VK_PIPELINE_BIND_POINT_RAY_TRACING_NV,
    
  }

  const VK_PIPELINE_BIND_POINT_GRAPHICS: VkPipelineBindPoint;
  const VK_PIPELINE_BIND_POINT_COMPUTE: VkPipelineBindPoint;
  const VK_PIPELINE_BIND_POINT_RAY_TRACING_NV: VkPipelineBindPoint;
  

  
  /**
   * 
   * @member VK_PIPELINE_CACHE_HEADER_VERSION_ONE
   */
  enum VkPipelineCacheHeaderVersion {
    VK_PIPELINE_CACHE_HEADER_VERSION_ONE,
    
  }

  const VK_PIPELINE_CACHE_HEADER_VERSION_ONE: VkPipelineCacheHeaderVersion;
  

  
  /**
   * 
   * @member VK_PRIMITIVE_TOPOLOGY_POINT_LIST
   * @member VK_PRIMITIVE_TOPOLOGY_LINE_LIST
   * @member VK_PRIMITIVE_TOPOLOGY_LINE_STRIP
   * @member VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST
   * @member VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP
   * @member VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN
   * @member VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY
   * @member VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY
   * @member VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY
   * @member VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY
   * @member VK_PRIMITIVE_TOPOLOGY_PATCH_LIST
   */
  enum VkPrimitiveTopology {
    VK_PRIMITIVE_TOPOLOGY_POINT_LIST,
    VK_PRIMITIVE_TOPOLOGY_LINE_LIST,
    VK_PRIMITIVE_TOPOLOGY_LINE_STRIP,
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST,
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP,
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN,
    VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY,
    VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY,
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY,
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY,
    VK_PRIMITIVE_TOPOLOGY_PATCH_LIST,
    
  }

  const VK_PRIMITIVE_TOPOLOGY_POINT_LIST: VkPrimitiveTopology;
  const VK_PRIMITIVE_TOPOLOGY_LINE_LIST: VkPrimitiveTopology;
  const VK_PRIMITIVE_TOPOLOGY_LINE_STRIP: VkPrimitiveTopology;
  const VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST: VkPrimitiveTopology;
  const VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP: VkPrimitiveTopology;
  const VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN: VkPrimitiveTopology;
  const VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY: VkPrimitiveTopology;
  const VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY: VkPrimitiveTopology;
  const VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY: VkPrimitiveTopology;
  const VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY: VkPrimitiveTopology;
  const VK_PRIMITIVE_TOPOLOGY_PATCH_LIST: VkPrimitiveTopology;
  

  
  /**
   * 
   * @member VK_SHARING_MODE_EXCLUSIVE
   * @member VK_SHARING_MODE_CONCURRENT
   */
  enum VkSharingMode {
    VK_SHARING_MODE_EXCLUSIVE,
    VK_SHARING_MODE_CONCURRENT,
    
  }

  const VK_SHARING_MODE_EXCLUSIVE: VkSharingMode;
  const VK_SHARING_MODE_CONCURRENT: VkSharingMode;
  

  
  /**
   * 
   * @member VK_INDEX_TYPE_UINT16
   * @member VK_INDEX_TYPE_UINT32
   * @member VK_INDEX_TYPE_NONE_NV
   * @member VK_INDEX_TYPE_UINT8_EXT
   */
  enum VkIndexType {
    VK_INDEX_TYPE_UINT16,
    VK_INDEX_TYPE_UINT32,
    VK_INDEX_TYPE_NONE_NV,
    VK_INDEX_TYPE_UINT8_EXT,
    
  }

  const VK_INDEX_TYPE_UINT16: VkIndexType;
  const VK_INDEX_TYPE_UINT32: VkIndexType;
  const VK_INDEX_TYPE_NONE_NV: VkIndexType;
  const VK_INDEX_TYPE_UINT8_EXT: VkIndexType;
  

  
  /**
   * 
   * @member VK_FILTER_NEAREST
   * @member VK_FILTER_LINEAR
   * @member VK_FILTER_CUBIC_IMG
   * @member VK_FILTER_CUBIC_EXT
   */
  enum VkFilter {
    VK_FILTER_NEAREST,
    VK_FILTER_LINEAR,
    VK_FILTER_CUBIC_IMG,
    VK_FILTER_CUBIC_EXT,
    
  }

  const VK_FILTER_NEAREST: VkFilter;
  const VK_FILTER_LINEAR: VkFilter;
  const VK_FILTER_CUBIC_IMG: VkFilter;
  const VK_FILTER_CUBIC_EXT: VkFilter;
  

  
  /**
   * 
   * @member VK_SAMPLER_MIPMAP_MODE_NEAREST
   * @member VK_SAMPLER_MIPMAP_MODE_LINEAR
   */
  enum VkSamplerMipmapMode {
    VK_SAMPLER_MIPMAP_MODE_NEAREST,
    VK_SAMPLER_MIPMAP_MODE_LINEAR,
    
  }

  const VK_SAMPLER_MIPMAP_MODE_NEAREST: VkSamplerMipmapMode;
  const VK_SAMPLER_MIPMAP_MODE_LINEAR: VkSamplerMipmapMode;
  

  
  /**
   * 
   * @member VK_SAMPLER_ADDRESS_MODE_REPEAT
   * @member VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT
   * @member VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE
   * @member VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER
   * @member VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR
   */
  enum VkSamplerAddressMode {
    VK_SAMPLER_ADDRESS_MODE_REPEAT,
    VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT,
    VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE,
    VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER,
    VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR,
    
  }

  const VK_SAMPLER_ADDRESS_MODE_REPEAT: VkSamplerAddressMode;
  const VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT: VkSamplerAddressMode;
  const VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE: VkSamplerAddressMode;
  const VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER: VkSamplerAddressMode;
  const VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR: VkSamplerAddressMode;
  

  
  /**
   * 
   * @member VK_COMPARE_OP_NEVER
   * @member VK_COMPARE_OP_LESS
   * @member VK_COMPARE_OP_EQUAL
   * @member VK_COMPARE_OP_LESS_OR_EQUAL
   * @member VK_COMPARE_OP_GREATER
   * @member VK_COMPARE_OP_NOT_EQUAL
   * @member VK_COMPARE_OP_GREATER_OR_EQUAL
   * @member VK_COMPARE_OP_ALWAYS
   */
  enum VkCompareOp {
    VK_COMPARE_OP_NEVER,
    VK_COMPARE_OP_LESS,
    VK_COMPARE_OP_EQUAL,
    VK_COMPARE_OP_LESS_OR_EQUAL,
    VK_COMPARE_OP_GREATER,
    VK_COMPARE_OP_NOT_EQUAL,
    VK_COMPARE_OP_GREATER_OR_EQUAL,
    VK_COMPARE_OP_ALWAYS,
    
  }

  const VK_COMPARE_OP_NEVER: VkCompareOp;
  const VK_COMPARE_OP_LESS: VkCompareOp;
  const VK_COMPARE_OP_EQUAL: VkCompareOp;
  const VK_COMPARE_OP_LESS_OR_EQUAL: VkCompareOp;
  const VK_COMPARE_OP_GREATER: VkCompareOp;
  const VK_COMPARE_OP_NOT_EQUAL: VkCompareOp;
  const VK_COMPARE_OP_GREATER_OR_EQUAL: VkCompareOp;
  const VK_COMPARE_OP_ALWAYS: VkCompareOp;
  

  
  /**
   * 
   * @member VK_POLYGON_MODE_FILL
   * @member VK_POLYGON_MODE_LINE
   * @member VK_POLYGON_MODE_POINT
   * @member VK_POLYGON_MODE_FILL_RECTANGLE_NV
   */
  enum VkPolygonMode {
    VK_POLYGON_MODE_FILL,
    VK_POLYGON_MODE_LINE,
    VK_POLYGON_MODE_POINT,
    VK_POLYGON_MODE_FILL_RECTANGLE_NV,
    
  }

  const VK_POLYGON_MODE_FILL: VkPolygonMode;
  const VK_POLYGON_MODE_LINE: VkPolygonMode;
  const VK_POLYGON_MODE_POINT: VkPolygonMode;
  const VK_POLYGON_MODE_FILL_RECTANGLE_NV: VkPolygonMode;
  

  
  /**
   * 
   * @member VK_FRONT_FACE_COUNTER_CLOCKWISE
   * @member VK_FRONT_FACE_CLOCKWISE
   */
  enum VkFrontFace {
    VK_FRONT_FACE_COUNTER_CLOCKWISE,
    VK_FRONT_FACE_CLOCKWISE,
    
  }

  const VK_FRONT_FACE_COUNTER_CLOCKWISE: VkFrontFace;
  const VK_FRONT_FACE_CLOCKWISE: VkFrontFace;
  

  
  /**
   * 
   * @member VK_BLEND_FACTOR_ZERO
   * @member VK_BLEND_FACTOR_ONE
   * @member VK_BLEND_FACTOR_SRC_COLOR
   * @member VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR
   * @member VK_BLEND_FACTOR_DST_COLOR
   * @member VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR
   * @member VK_BLEND_FACTOR_SRC_ALPHA
   * @member VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA
   * @member VK_BLEND_FACTOR_DST_ALPHA
   * @member VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA
   * @member VK_BLEND_FACTOR_CONSTANT_COLOR
   * @member VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR
   * @member VK_BLEND_FACTOR_CONSTANT_ALPHA
   * @member VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA
   * @member VK_BLEND_FACTOR_SRC_ALPHA_SATURATE
   * @member VK_BLEND_FACTOR_SRC1_COLOR
   * @member VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR
   * @member VK_BLEND_FACTOR_SRC1_ALPHA
   * @member VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA
   */
  enum VkBlendFactor {
    VK_BLEND_FACTOR_ZERO,
    VK_BLEND_FACTOR_ONE,
    VK_BLEND_FACTOR_SRC_COLOR,
    VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR,
    VK_BLEND_FACTOR_DST_COLOR,
    VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR,
    VK_BLEND_FACTOR_SRC_ALPHA,
    VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA,
    VK_BLEND_FACTOR_DST_ALPHA,
    VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA,
    VK_BLEND_FACTOR_CONSTANT_COLOR,
    VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR,
    VK_BLEND_FACTOR_CONSTANT_ALPHA,
    VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA,
    VK_BLEND_FACTOR_SRC_ALPHA_SATURATE,
    VK_BLEND_FACTOR_SRC1_COLOR,
    VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR,
    VK_BLEND_FACTOR_SRC1_ALPHA,
    VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA,
    
  }

  const VK_BLEND_FACTOR_ZERO: VkBlendFactor;
  const VK_BLEND_FACTOR_ONE: VkBlendFactor;
  const VK_BLEND_FACTOR_SRC_COLOR: VkBlendFactor;
  const VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR: VkBlendFactor;
  const VK_BLEND_FACTOR_DST_COLOR: VkBlendFactor;
  const VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR: VkBlendFactor;
  const VK_BLEND_FACTOR_SRC_ALPHA: VkBlendFactor;
  const VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA: VkBlendFactor;
  const VK_BLEND_FACTOR_DST_ALPHA: VkBlendFactor;
  const VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA: VkBlendFactor;
  const VK_BLEND_FACTOR_CONSTANT_COLOR: VkBlendFactor;
  const VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR: VkBlendFactor;
  const VK_BLEND_FACTOR_CONSTANT_ALPHA: VkBlendFactor;
  const VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA: VkBlendFactor;
  const VK_BLEND_FACTOR_SRC_ALPHA_SATURATE: VkBlendFactor;
  const VK_BLEND_FACTOR_SRC1_COLOR: VkBlendFactor;
  const VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR: VkBlendFactor;
  const VK_BLEND_FACTOR_SRC1_ALPHA: VkBlendFactor;
  const VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA: VkBlendFactor;
  

  
  /**
   * 
   * @member VK_BLEND_OP_ADD
   * @member VK_BLEND_OP_SUBTRACT
   * @member VK_BLEND_OP_REVERSE_SUBTRACT
   * @member VK_BLEND_OP_MIN
   * @member VK_BLEND_OP_MAX
   * @member VK_BLEND_OP_ZERO_EXT
   * @member VK_BLEND_OP_SRC_EXT
   * @member VK_BLEND_OP_DST_EXT
   * @member VK_BLEND_OP_SRC_OVER_EXT
   * @member VK_BLEND_OP_DST_OVER_EXT
   * @member VK_BLEND_OP_SRC_IN_EXT
   * @member VK_BLEND_OP_DST_IN_EXT
   * @member VK_BLEND_OP_SRC_OUT_EXT
   * @member VK_BLEND_OP_DST_OUT_EXT
   * @member VK_BLEND_OP_SRC_ATOP_EXT
   * @member VK_BLEND_OP_DST_ATOP_EXT
   * @member VK_BLEND_OP_XOR_EXT
   * @member VK_BLEND_OP_MULTIPLY_EXT
   * @member VK_BLEND_OP_SCREEN_EXT
   * @member VK_BLEND_OP_OVERLAY_EXT
   * @member VK_BLEND_OP_DARKEN_EXT
   * @member VK_BLEND_OP_LIGHTEN_EXT
   * @member VK_BLEND_OP_COLORDODGE_EXT
   * @member VK_BLEND_OP_COLORBURN_EXT
   * @member VK_BLEND_OP_HARDLIGHT_EXT
   * @member VK_BLEND_OP_SOFTLIGHT_EXT
   * @member VK_BLEND_OP_DIFFERENCE_EXT
   * @member VK_BLEND_OP_EXCLUSION_EXT
   * @member VK_BLEND_OP_INVERT_EXT
   * @member VK_BLEND_OP_INVERT_RGB_EXT
   * @member VK_BLEND_OP_LINEARDODGE_EXT
   * @member VK_BLEND_OP_LINEARBURN_EXT
   * @member VK_BLEND_OP_VIVIDLIGHT_EXT
   * @member VK_BLEND_OP_LINEARLIGHT_EXT
   * @member VK_BLEND_OP_PINLIGHT_EXT
   * @member VK_BLEND_OP_HARDMIX_EXT
   * @member VK_BLEND_OP_HSL_HUE_EXT
   * @member VK_BLEND_OP_HSL_SATURATION_EXT
   * @member VK_BLEND_OP_HSL_COLOR_EXT
   * @member VK_BLEND_OP_HSL_LUMINOSITY_EXT
   * @member VK_BLEND_OP_PLUS_EXT
   * @member VK_BLEND_OP_PLUS_CLAMPED_EXT
   * @member VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT
   * @member VK_BLEND_OP_PLUS_DARKER_EXT
   * @member VK_BLEND_OP_MINUS_EXT
   * @member VK_BLEND_OP_MINUS_CLAMPED_EXT
   * @member VK_BLEND_OP_CONTRAST_EXT
   * @member VK_BLEND_OP_INVERT_OVG_EXT
   * @member VK_BLEND_OP_RED_EXT
   * @member VK_BLEND_OP_GREEN_EXT
   * @member VK_BLEND_OP_BLUE_EXT
   */
  enum VkBlendOp {
    VK_BLEND_OP_ADD,
    VK_BLEND_OP_SUBTRACT,
    VK_BLEND_OP_REVERSE_SUBTRACT,
    VK_BLEND_OP_MIN,
    VK_BLEND_OP_MAX,
    VK_BLEND_OP_ZERO_EXT,
    VK_BLEND_OP_SRC_EXT,
    VK_BLEND_OP_DST_EXT,
    VK_BLEND_OP_SRC_OVER_EXT,
    VK_BLEND_OP_DST_OVER_EXT,
    VK_BLEND_OP_SRC_IN_EXT,
    VK_BLEND_OP_DST_IN_EXT,
    VK_BLEND_OP_SRC_OUT_EXT,
    VK_BLEND_OP_DST_OUT_EXT,
    VK_BLEND_OP_SRC_ATOP_EXT,
    VK_BLEND_OP_DST_ATOP_EXT,
    VK_BLEND_OP_XOR_EXT,
    VK_BLEND_OP_MULTIPLY_EXT,
    VK_BLEND_OP_SCREEN_EXT,
    VK_BLEND_OP_OVERLAY_EXT,
    VK_BLEND_OP_DARKEN_EXT,
    VK_BLEND_OP_LIGHTEN_EXT,
    VK_BLEND_OP_COLORDODGE_EXT,
    VK_BLEND_OP_COLORBURN_EXT,
    VK_BLEND_OP_HARDLIGHT_EXT,
    VK_BLEND_OP_SOFTLIGHT_EXT,
    VK_BLEND_OP_DIFFERENCE_EXT,
    VK_BLEND_OP_EXCLUSION_EXT,
    VK_BLEND_OP_INVERT_EXT,
    VK_BLEND_OP_INVERT_RGB_EXT,
    VK_BLEND_OP_LINEARDODGE_EXT,
    VK_BLEND_OP_LINEARBURN_EXT,
    VK_BLEND_OP_VIVIDLIGHT_EXT,
    VK_BLEND_OP_LINEARLIGHT_EXT,
    VK_BLEND_OP_PINLIGHT_EXT,
    VK_BLEND_OP_HARDMIX_EXT,
    VK_BLEND_OP_HSL_HUE_EXT,
    VK_BLEND_OP_HSL_SATURATION_EXT,
    VK_BLEND_OP_HSL_COLOR_EXT,
    VK_BLEND_OP_HSL_LUMINOSITY_EXT,
    VK_BLEND_OP_PLUS_EXT,
    VK_BLEND_OP_PLUS_CLAMPED_EXT,
    VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT,
    VK_BLEND_OP_PLUS_DARKER_EXT,
    VK_BLEND_OP_MINUS_EXT,
    VK_BLEND_OP_MINUS_CLAMPED_EXT,
    VK_BLEND_OP_CONTRAST_EXT,
    VK_BLEND_OP_INVERT_OVG_EXT,
    VK_BLEND_OP_RED_EXT,
    VK_BLEND_OP_GREEN_EXT,
    VK_BLEND_OP_BLUE_EXT,
    
  }

  const VK_BLEND_OP_ADD: VkBlendOp;
  const VK_BLEND_OP_SUBTRACT: VkBlendOp;
  const VK_BLEND_OP_REVERSE_SUBTRACT: VkBlendOp;
  const VK_BLEND_OP_MIN: VkBlendOp;
  const VK_BLEND_OP_MAX: VkBlendOp;
  const VK_BLEND_OP_ZERO_EXT: VkBlendOp;
  const VK_BLEND_OP_SRC_EXT: VkBlendOp;
  const VK_BLEND_OP_DST_EXT: VkBlendOp;
  const VK_BLEND_OP_SRC_OVER_EXT: VkBlendOp;
  const VK_BLEND_OP_DST_OVER_EXT: VkBlendOp;
  const VK_BLEND_OP_SRC_IN_EXT: VkBlendOp;
  const VK_BLEND_OP_DST_IN_EXT: VkBlendOp;
  const VK_BLEND_OP_SRC_OUT_EXT: VkBlendOp;
  const VK_BLEND_OP_DST_OUT_EXT: VkBlendOp;
  const VK_BLEND_OP_SRC_ATOP_EXT: VkBlendOp;
  const VK_BLEND_OP_DST_ATOP_EXT: VkBlendOp;
  const VK_BLEND_OP_XOR_EXT: VkBlendOp;
  const VK_BLEND_OP_MULTIPLY_EXT: VkBlendOp;
  const VK_BLEND_OP_SCREEN_EXT: VkBlendOp;
  const VK_BLEND_OP_OVERLAY_EXT: VkBlendOp;
  const VK_BLEND_OP_DARKEN_EXT: VkBlendOp;
  const VK_BLEND_OP_LIGHTEN_EXT: VkBlendOp;
  const VK_BLEND_OP_COLORDODGE_EXT: VkBlendOp;
  const VK_BLEND_OP_COLORBURN_EXT: VkBlendOp;
  const VK_BLEND_OP_HARDLIGHT_EXT: VkBlendOp;
  const VK_BLEND_OP_SOFTLIGHT_EXT: VkBlendOp;
  const VK_BLEND_OP_DIFFERENCE_EXT: VkBlendOp;
  const VK_BLEND_OP_EXCLUSION_EXT: VkBlendOp;
  const VK_BLEND_OP_INVERT_EXT: VkBlendOp;
  const VK_BLEND_OP_INVERT_RGB_EXT: VkBlendOp;
  const VK_BLEND_OP_LINEARDODGE_EXT: VkBlendOp;
  const VK_BLEND_OP_LINEARBURN_EXT: VkBlendOp;
  const VK_BLEND_OP_VIVIDLIGHT_EXT: VkBlendOp;
  const VK_BLEND_OP_LINEARLIGHT_EXT: VkBlendOp;
  const VK_BLEND_OP_PINLIGHT_EXT: VkBlendOp;
  const VK_BLEND_OP_HARDMIX_EXT: VkBlendOp;
  const VK_BLEND_OP_HSL_HUE_EXT: VkBlendOp;
  const VK_BLEND_OP_HSL_SATURATION_EXT: VkBlendOp;
  const VK_BLEND_OP_HSL_COLOR_EXT: VkBlendOp;
  const VK_BLEND_OP_HSL_LUMINOSITY_EXT: VkBlendOp;
  const VK_BLEND_OP_PLUS_EXT: VkBlendOp;
  const VK_BLEND_OP_PLUS_CLAMPED_EXT: VkBlendOp;
  const VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT: VkBlendOp;
  const VK_BLEND_OP_PLUS_DARKER_EXT: VkBlendOp;
  const VK_BLEND_OP_MINUS_EXT: VkBlendOp;
  const VK_BLEND_OP_MINUS_CLAMPED_EXT: VkBlendOp;
  const VK_BLEND_OP_CONTRAST_EXT: VkBlendOp;
  const VK_BLEND_OP_INVERT_OVG_EXT: VkBlendOp;
  const VK_BLEND_OP_RED_EXT: VkBlendOp;
  const VK_BLEND_OP_GREEN_EXT: VkBlendOp;
  const VK_BLEND_OP_BLUE_EXT: VkBlendOp;
  

  
  /**
   * 
   * @member VK_STENCIL_OP_KEEP
   * @member VK_STENCIL_OP_ZERO
   * @member VK_STENCIL_OP_REPLACE
   * @member VK_STENCIL_OP_INCREMENT_AND_CLAMP
   * @member VK_STENCIL_OP_DECREMENT_AND_CLAMP
   * @member VK_STENCIL_OP_INVERT
   * @member VK_STENCIL_OP_INCREMENT_AND_WRAP
   * @member VK_STENCIL_OP_DECREMENT_AND_WRAP
   */
  enum VkStencilOp {
    VK_STENCIL_OP_KEEP,
    VK_STENCIL_OP_ZERO,
    VK_STENCIL_OP_REPLACE,
    VK_STENCIL_OP_INCREMENT_AND_CLAMP,
    VK_STENCIL_OP_DECREMENT_AND_CLAMP,
    VK_STENCIL_OP_INVERT,
    VK_STENCIL_OP_INCREMENT_AND_WRAP,
    VK_STENCIL_OP_DECREMENT_AND_WRAP,
    
  }

  const VK_STENCIL_OP_KEEP: VkStencilOp;
  const VK_STENCIL_OP_ZERO: VkStencilOp;
  const VK_STENCIL_OP_REPLACE: VkStencilOp;
  const VK_STENCIL_OP_INCREMENT_AND_CLAMP: VkStencilOp;
  const VK_STENCIL_OP_DECREMENT_AND_CLAMP: VkStencilOp;
  const VK_STENCIL_OP_INVERT: VkStencilOp;
  const VK_STENCIL_OP_INCREMENT_AND_WRAP: VkStencilOp;
  const VK_STENCIL_OP_DECREMENT_AND_WRAP: VkStencilOp;
  

  
  /**
   * 
   * @member VK_LOGIC_OP_CLEAR
   * @member VK_LOGIC_OP_AND
   * @member VK_LOGIC_OP_AND_REVERSE
   * @member VK_LOGIC_OP_COPY
   * @member VK_LOGIC_OP_AND_INVERTED
   * @member VK_LOGIC_OP_NO_OP
   * @member VK_LOGIC_OP_XOR
   * @member VK_LOGIC_OP_OR
   * @member VK_LOGIC_OP_NOR
   * @member VK_LOGIC_OP_EQUIVALENT
   * @member VK_LOGIC_OP_INVERT
   * @member VK_LOGIC_OP_OR_REVERSE
   * @member VK_LOGIC_OP_COPY_INVERTED
   * @member VK_LOGIC_OP_OR_INVERTED
   * @member VK_LOGIC_OP_NAND
   * @member VK_LOGIC_OP_SET
   */
  enum VkLogicOp {
    VK_LOGIC_OP_CLEAR,
    VK_LOGIC_OP_AND,
    VK_LOGIC_OP_AND_REVERSE,
    VK_LOGIC_OP_COPY,
    VK_LOGIC_OP_AND_INVERTED,
    VK_LOGIC_OP_NO_OP,
    VK_LOGIC_OP_XOR,
    VK_LOGIC_OP_OR,
    VK_LOGIC_OP_NOR,
    VK_LOGIC_OP_EQUIVALENT,
    VK_LOGIC_OP_INVERT,
    VK_LOGIC_OP_OR_REVERSE,
    VK_LOGIC_OP_COPY_INVERTED,
    VK_LOGIC_OP_OR_INVERTED,
    VK_LOGIC_OP_NAND,
    VK_LOGIC_OP_SET,
    
  }

  const VK_LOGIC_OP_CLEAR: VkLogicOp;
  const VK_LOGIC_OP_AND: VkLogicOp;
  const VK_LOGIC_OP_AND_REVERSE: VkLogicOp;
  const VK_LOGIC_OP_COPY: VkLogicOp;
  const VK_LOGIC_OP_AND_INVERTED: VkLogicOp;
  const VK_LOGIC_OP_NO_OP: VkLogicOp;
  const VK_LOGIC_OP_XOR: VkLogicOp;
  const VK_LOGIC_OP_OR: VkLogicOp;
  const VK_LOGIC_OP_NOR: VkLogicOp;
  const VK_LOGIC_OP_EQUIVALENT: VkLogicOp;
  const VK_LOGIC_OP_INVERT: VkLogicOp;
  const VK_LOGIC_OP_OR_REVERSE: VkLogicOp;
  const VK_LOGIC_OP_COPY_INVERTED: VkLogicOp;
  const VK_LOGIC_OP_OR_INVERTED: VkLogicOp;
  const VK_LOGIC_OP_NAND: VkLogicOp;
  const VK_LOGIC_OP_SET: VkLogicOp;
  

  
  /**
   * 
   * @member VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE
   */
  enum VkInternalAllocationType {
    VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE,
    
  }

  const VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE: VkInternalAllocationType;
  

  
  /**
   * 
   * @member VK_SYSTEM_ALLOCATION_SCOPE_COMMAND
   * @member VK_SYSTEM_ALLOCATION_SCOPE_OBJECT
   * @member VK_SYSTEM_ALLOCATION_SCOPE_CACHE
   * @member VK_SYSTEM_ALLOCATION_SCOPE_DEVICE
   * @member VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE
   */
  enum VkSystemAllocationScope {
    VK_SYSTEM_ALLOCATION_SCOPE_COMMAND,
    VK_SYSTEM_ALLOCATION_SCOPE_OBJECT,
    VK_SYSTEM_ALLOCATION_SCOPE_CACHE,
    VK_SYSTEM_ALLOCATION_SCOPE_DEVICE,
    VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE,
    
  }

  const VK_SYSTEM_ALLOCATION_SCOPE_COMMAND: VkSystemAllocationScope;
  const VK_SYSTEM_ALLOCATION_SCOPE_OBJECT: VkSystemAllocationScope;
  const VK_SYSTEM_ALLOCATION_SCOPE_CACHE: VkSystemAllocationScope;
  const VK_SYSTEM_ALLOCATION_SCOPE_DEVICE: VkSystemAllocationScope;
  const VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE: VkSystemAllocationScope;
  

  
  /**
   * 
   * @member VK_PHYSICAL_DEVICE_TYPE_OTHER
   * @member VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU
   * @member VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU
   * @member VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU
   * @member VK_PHYSICAL_DEVICE_TYPE_CPU
   */
  enum VkPhysicalDeviceType {
    VK_PHYSICAL_DEVICE_TYPE_OTHER,
    VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU,
    VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU,
    VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU,
    VK_PHYSICAL_DEVICE_TYPE_CPU,
    
  }

  const VK_PHYSICAL_DEVICE_TYPE_OTHER: VkPhysicalDeviceType;
  const VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU: VkPhysicalDeviceType;
  const VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU: VkPhysicalDeviceType;
  const VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU: VkPhysicalDeviceType;
  const VK_PHYSICAL_DEVICE_TYPE_CPU: VkPhysicalDeviceType;
  

  
  /**
   * 
   * @member VK_VERTEX_INPUT_RATE_VERTEX
   * @member VK_VERTEX_INPUT_RATE_INSTANCE
   */
  enum VkVertexInputRate {
    VK_VERTEX_INPUT_RATE_VERTEX,
    VK_VERTEX_INPUT_RATE_INSTANCE,
    
  }

  const VK_VERTEX_INPUT_RATE_VERTEX: VkVertexInputRate;
  const VK_VERTEX_INPUT_RATE_INSTANCE: VkVertexInputRate;
  

  
  /**
   * 
   * @member VK_FORMAT_UNDEFINED
   * @member VK_FORMAT_R4G4_UNORM_PACK8
   * @member VK_FORMAT_R4G4B4A4_UNORM_PACK16
   * @member VK_FORMAT_B4G4R4A4_UNORM_PACK16
   * @member VK_FORMAT_R5G6B5_UNORM_PACK16
   * @member VK_FORMAT_B5G6R5_UNORM_PACK16
   * @member VK_FORMAT_R5G5B5A1_UNORM_PACK16
   * @member VK_FORMAT_B5G5R5A1_UNORM_PACK16
   * @member VK_FORMAT_A1R5G5B5_UNORM_PACK16
   * @member VK_FORMAT_R8_UNORM
   * @member VK_FORMAT_R8_SNORM
   * @member VK_FORMAT_R8_USCALED
   * @member VK_FORMAT_R8_SSCALED
   * @member VK_FORMAT_R8_UINT
   * @member VK_FORMAT_R8_SINT
   * @member VK_FORMAT_R8_SRGB
   * @member VK_FORMAT_R8G8_UNORM
   * @member VK_FORMAT_R8G8_SNORM
   * @member VK_FORMAT_R8G8_USCALED
   * @member VK_FORMAT_R8G8_SSCALED
   * @member VK_FORMAT_R8G8_UINT
   * @member VK_FORMAT_R8G8_SINT
   * @member VK_FORMAT_R8G8_SRGB
   * @member VK_FORMAT_R8G8B8_UNORM
   * @member VK_FORMAT_R8G8B8_SNORM
   * @member VK_FORMAT_R8G8B8_USCALED
   * @member VK_FORMAT_R8G8B8_SSCALED
   * @member VK_FORMAT_R8G8B8_UINT
   * @member VK_FORMAT_R8G8B8_SINT
   * @member VK_FORMAT_R8G8B8_SRGB
   * @member VK_FORMAT_B8G8R8_UNORM
   * @member VK_FORMAT_B8G8R8_SNORM
   * @member VK_FORMAT_B8G8R8_USCALED
   * @member VK_FORMAT_B8G8R8_SSCALED
   * @member VK_FORMAT_B8G8R8_UINT
   * @member VK_FORMAT_B8G8R8_SINT
   * @member VK_FORMAT_B8G8R8_SRGB
   * @member VK_FORMAT_R8G8B8A8_UNORM
   * @member VK_FORMAT_R8G8B8A8_SNORM
   * @member VK_FORMAT_R8G8B8A8_USCALED
   * @member VK_FORMAT_R8G8B8A8_SSCALED
   * @member VK_FORMAT_R8G8B8A8_UINT
   * @member VK_FORMAT_R8G8B8A8_SINT
   * @member VK_FORMAT_R8G8B8A8_SRGB
   * @member VK_FORMAT_B8G8R8A8_UNORM
   * @member VK_FORMAT_B8G8R8A8_SNORM
   * @member VK_FORMAT_B8G8R8A8_USCALED
   * @member VK_FORMAT_B8G8R8A8_SSCALED
   * @member VK_FORMAT_B8G8R8A8_UINT
   * @member VK_FORMAT_B8G8R8A8_SINT
   * @member VK_FORMAT_B8G8R8A8_SRGB
   * @member VK_FORMAT_A8B8G8R8_UNORM_PACK32
   * @member VK_FORMAT_A8B8G8R8_SNORM_PACK32
   * @member VK_FORMAT_A8B8G8R8_USCALED_PACK32
   * @member VK_FORMAT_A8B8G8R8_SSCALED_PACK32
   * @member VK_FORMAT_A8B8G8R8_UINT_PACK32
   * @member VK_FORMAT_A8B8G8R8_SINT_PACK32
   * @member VK_FORMAT_A8B8G8R8_SRGB_PACK32
   * @member VK_FORMAT_A2R10G10B10_UNORM_PACK32
   * @member VK_FORMAT_A2R10G10B10_SNORM_PACK32
   * @member VK_FORMAT_A2R10G10B10_USCALED_PACK32
   * @member VK_FORMAT_A2R10G10B10_SSCALED_PACK32
   * @member VK_FORMAT_A2R10G10B10_UINT_PACK32
   * @member VK_FORMAT_A2R10G10B10_SINT_PACK32
   * @member VK_FORMAT_A2B10G10R10_UNORM_PACK32
   * @member VK_FORMAT_A2B10G10R10_SNORM_PACK32
   * @member VK_FORMAT_A2B10G10R10_USCALED_PACK32
   * @member VK_FORMAT_A2B10G10R10_SSCALED_PACK32
   * @member VK_FORMAT_A2B10G10R10_UINT_PACK32
   * @member VK_FORMAT_A2B10G10R10_SINT_PACK32
   * @member VK_FORMAT_R16_UNORM
   * @member VK_FORMAT_R16_SNORM
   * @member VK_FORMAT_R16_USCALED
   * @member VK_FORMAT_R16_SSCALED
   * @member VK_FORMAT_R16_UINT
   * @member VK_FORMAT_R16_SINT
   * @member VK_FORMAT_R16_SFLOAT
   * @member VK_FORMAT_R16G16_UNORM
   * @member VK_FORMAT_R16G16_SNORM
   * @member VK_FORMAT_R16G16_USCALED
   * @member VK_FORMAT_R16G16_SSCALED
   * @member VK_FORMAT_R16G16_UINT
   * @member VK_FORMAT_R16G16_SINT
   * @member VK_FORMAT_R16G16_SFLOAT
   * @member VK_FORMAT_R16G16B16_UNORM
   * @member VK_FORMAT_R16G16B16_SNORM
   * @member VK_FORMAT_R16G16B16_USCALED
   * @member VK_FORMAT_R16G16B16_SSCALED
   * @member VK_FORMAT_R16G16B16_UINT
   * @member VK_FORMAT_R16G16B16_SINT
   * @member VK_FORMAT_R16G16B16_SFLOAT
   * @member VK_FORMAT_R16G16B16A16_UNORM
   * @member VK_FORMAT_R16G16B16A16_SNORM
   * @member VK_FORMAT_R16G16B16A16_USCALED
   * @member VK_FORMAT_R16G16B16A16_SSCALED
   * @member VK_FORMAT_R16G16B16A16_UINT
   * @member VK_FORMAT_R16G16B16A16_SINT
   * @member VK_FORMAT_R16G16B16A16_SFLOAT
   * @member VK_FORMAT_R32_UINT
   * @member VK_FORMAT_R32_SINT
   * @member VK_FORMAT_R32_SFLOAT
   * @member VK_FORMAT_R32G32_UINT
   * @member VK_FORMAT_R32G32_SINT
   * @member VK_FORMAT_R32G32_SFLOAT
   * @member VK_FORMAT_R32G32B32_UINT
   * @member VK_FORMAT_R32G32B32_SINT
   * @member VK_FORMAT_R32G32B32_SFLOAT
   * @member VK_FORMAT_R32G32B32A32_UINT
   * @member VK_FORMAT_R32G32B32A32_SINT
   * @member VK_FORMAT_R32G32B32A32_SFLOAT
   * @member VK_FORMAT_R64_UINT
   * @member VK_FORMAT_R64_SINT
   * @member VK_FORMAT_R64_SFLOAT
   * @member VK_FORMAT_R64G64_UINT
   * @member VK_FORMAT_R64G64_SINT
   * @member VK_FORMAT_R64G64_SFLOAT
   * @member VK_FORMAT_R64G64B64_UINT
   * @member VK_FORMAT_R64G64B64_SINT
   * @member VK_FORMAT_R64G64B64_SFLOAT
   * @member VK_FORMAT_R64G64B64A64_UINT
   * @member VK_FORMAT_R64G64B64A64_SINT
   * @member VK_FORMAT_R64G64B64A64_SFLOAT
   * @member VK_FORMAT_B10G11R11_UFLOAT_PACK32
   * @member VK_FORMAT_E5B9G9R9_UFLOAT_PACK32
   * @member VK_FORMAT_D16_UNORM
   * @member VK_FORMAT_X8_D24_UNORM_PACK32
   * @member VK_FORMAT_D32_SFLOAT
   * @member VK_FORMAT_S8_UINT
   * @member VK_FORMAT_D16_UNORM_S8_UINT
   * @member VK_FORMAT_D24_UNORM_S8_UINT
   * @member VK_FORMAT_D32_SFLOAT_S8_UINT
   * @member VK_FORMAT_BC1_RGB_UNORM_BLOCK
   * @member VK_FORMAT_BC1_RGB_SRGB_BLOCK
   * @member VK_FORMAT_BC1_RGBA_UNORM_BLOCK
   * @member VK_FORMAT_BC1_RGBA_SRGB_BLOCK
   * @member VK_FORMAT_BC2_UNORM_BLOCK
   * @member VK_FORMAT_BC2_SRGB_BLOCK
   * @member VK_FORMAT_BC3_UNORM_BLOCK
   * @member VK_FORMAT_BC3_SRGB_BLOCK
   * @member VK_FORMAT_BC4_UNORM_BLOCK
   * @member VK_FORMAT_BC4_SNORM_BLOCK
   * @member VK_FORMAT_BC5_UNORM_BLOCK
   * @member VK_FORMAT_BC5_SNORM_BLOCK
   * @member VK_FORMAT_BC6H_UFLOAT_BLOCK
   * @member VK_FORMAT_BC6H_SFLOAT_BLOCK
   * @member VK_FORMAT_BC7_UNORM_BLOCK
   * @member VK_FORMAT_BC7_SRGB_BLOCK
   * @member VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK
   * @member VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK
   * @member VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK
   * @member VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK
   * @member VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK
   * @member VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK
   * @member VK_FORMAT_EAC_R11_UNORM_BLOCK
   * @member VK_FORMAT_EAC_R11_SNORM_BLOCK
   * @member VK_FORMAT_EAC_R11G11_UNORM_BLOCK
   * @member VK_FORMAT_EAC_R11G11_SNORM_BLOCK
   * @member VK_FORMAT_ASTC_4x4_UNORM_BLOCK
   * @member VK_FORMAT_ASTC_4x4_SRGB_BLOCK
   * @member VK_FORMAT_ASTC_5x4_UNORM_BLOCK
   * @member VK_FORMAT_ASTC_5x4_SRGB_BLOCK
   * @member VK_FORMAT_ASTC_5x5_UNORM_BLOCK
   * @member VK_FORMAT_ASTC_5x5_SRGB_BLOCK
   * @member VK_FORMAT_ASTC_6x5_UNORM_BLOCK
   * @member VK_FORMAT_ASTC_6x5_SRGB_BLOCK
   * @member VK_FORMAT_ASTC_6x6_UNORM_BLOCK
   * @member VK_FORMAT_ASTC_6x6_SRGB_BLOCK
   * @member VK_FORMAT_ASTC_8x5_UNORM_BLOCK
   * @member VK_FORMAT_ASTC_8x5_SRGB_BLOCK
   * @member VK_FORMAT_ASTC_8x6_UNORM_BLOCK
   * @member VK_FORMAT_ASTC_8x6_SRGB_BLOCK
   * @member VK_FORMAT_ASTC_8x8_UNORM_BLOCK
   * @member VK_FORMAT_ASTC_8x8_SRGB_BLOCK
   * @member VK_FORMAT_ASTC_10x5_UNORM_BLOCK
   * @member VK_FORMAT_ASTC_10x5_SRGB_BLOCK
   * @member VK_FORMAT_ASTC_10x6_UNORM_BLOCK
   * @member VK_FORMAT_ASTC_10x6_SRGB_BLOCK
   * @member VK_FORMAT_ASTC_10x8_UNORM_BLOCK
   * @member VK_FORMAT_ASTC_10x8_SRGB_BLOCK
   * @member VK_FORMAT_ASTC_10x10_UNORM_BLOCK
   * @member VK_FORMAT_ASTC_10x10_SRGB_BLOCK
   * @member VK_FORMAT_ASTC_12x10_UNORM_BLOCK
   * @member VK_FORMAT_ASTC_12x10_SRGB_BLOCK
   * @member VK_FORMAT_ASTC_12x12_UNORM_BLOCK
   * @member VK_FORMAT_ASTC_12x12_SRGB_BLOCK
   * @member VK_FORMAT_G8B8G8R8_422_UNORM
   * @member VK_FORMAT_B8G8R8G8_422_UNORM
   * @member VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM
   * @member VK_FORMAT_G8_B8R8_2PLANE_420_UNORM
   * @member VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM
   * @member VK_FORMAT_G8_B8R8_2PLANE_422_UNORM
   * @member VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM
   * @member VK_FORMAT_R10X6_UNORM_PACK16
   * @member VK_FORMAT_R10X6G10X6_UNORM_2PACK16
   * @member VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16
   * @member VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16
   * @member VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16
   * @member VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16
   * @member VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16
   * @member VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16
   * @member VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16
   * @member VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16
   * @member VK_FORMAT_R12X4_UNORM_PACK16
   * @member VK_FORMAT_R12X4G12X4_UNORM_2PACK16
   * @member VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16
   * @member VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16
   * @member VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16
   * @member VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16
   * @member VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16
   * @member VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16
   * @member VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16
   * @member VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16
   * @member VK_FORMAT_G16B16G16R16_422_UNORM
   * @member VK_FORMAT_B16G16R16G16_422_UNORM
   * @member VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM
   * @member VK_FORMAT_G16_B16R16_2PLANE_420_UNORM
   * @member VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM
   * @member VK_FORMAT_G16_B16R16_2PLANE_422_UNORM
   * @member VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM
   * @member VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG
   * @member VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG
   * @member VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG
   * @member VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG
   * @member VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG
   * @member VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG
   * @member VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG
   * @member VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG
   * @member VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT
   * @member VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT
   * @member VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT
   * @member VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT
   * @member VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT
   * @member VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT
   * @member VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT
   * @member VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT
   * @member VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT
   * @member VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT
   * @member VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT
   * @member VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT
   * @member VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT
   * @member VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT
   * @member VK_FORMAT_G8B8G8R8_422_UNORM_KHR
   * @member VK_FORMAT_B8G8R8G8_422_UNORM_KHR
   * @member VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR
   * @member VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR
   * @member VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR
   * @member VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR
   * @member VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR
   * @member VK_FORMAT_R10X6_UNORM_PACK16_KHR
   * @member VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR
   * @member VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR
   * @member VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR
   * @member VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR
   * @member VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR
   * @member VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR
   * @member VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR
   * @member VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR
   * @member VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR
   * @member VK_FORMAT_R12X4_UNORM_PACK16_KHR
   * @member VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR
   * @member VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR
   * @member VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR
   * @member VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR
   * @member VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR
   * @member VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR
   * @member VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR
   * @member VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR
   * @member VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR
   * @member VK_FORMAT_G16B16G16R16_422_UNORM_KHR
   * @member VK_FORMAT_B16G16R16G16_422_UNORM_KHR
   * @member VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR
   * @member VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR
   * @member VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR
   * @member VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR
   * @member VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR
   */
  enum VkFormat {
    VK_FORMAT_UNDEFINED,
    VK_FORMAT_R4G4_UNORM_PACK8,
    VK_FORMAT_R4G4B4A4_UNORM_PACK16,
    VK_FORMAT_B4G4R4A4_UNORM_PACK16,
    VK_FORMAT_R5G6B5_UNORM_PACK16,
    VK_FORMAT_B5G6R5_UNORM_PACK16,
    VK_FORMAT_R5G5B5A1_UNORM_PACK16,
    VK_FORMAT_B5G5R5A1_UNORM_PACK16,
    VK_FORMAT_A1R5G5B5_UNORM_PACK16,
    VK_FORMAT_R8_UNORM,
    VK_FORMAT_R8_SNORM,
    VK_FORMAT_R8_USCALED,
    VK_FORMAT_R8_SSCALED,
    VK_FORMAT_R8_UINT,
    VK_FORMAT_R8_SINT,
    VK_FORMAT_R8_SRGB,
    VK_FORMAT_R8G8_UNORM,
    VK_FORMAT_R8G8_SNORM,
    VK_FORMAT_R8G8_USCALED,
    VK_FORMAT_R8G8_SSCALED,
    VK_FORMAT_R8G8_UINT,
    VK_FORMAT_R8G8_SINT,
    VK_FORMAT_R8G8_SRGB,
    VK_FORMAT_R8G8B8_UNORM,
    VK_FORMAT_R8G8B8_SNORM,
    VK_FORMAT_R8G8B8_USCALED,
    VK_FORMAT_R8G8B8_SSCALED,
    VK_FORMAT_R8G8B8_UINT,
    VK_FORMAT_R8G8B8_SINT,
    VK_FORMAT_R8G8B8_SRGB,
    VK_FORMAT_B8G8R8_UNORM,
    VK_FORMAT_B8G8R8_SNORM,
    VK_FORMAT_B8G8R8_USCALED,
    VK_FORMAT_B8G8R8_SSCALED,
    VK_FORMAT_B8G8R8_UINT,
    VK_FORMAT_B8G8R8_SINT,
    VK_FORMAT_B8G8R8_SRGB,
    VK_FORMAT_R8G8B8A8_UNORM,
    VK_FORMAT_R8G8B8A8_SNORM,
    VK_FORMAT_R8G8B8A8_USCALED,
    VK_FORMAT_R8G8B8A8_SSCALED,
    VK_FORMAT_R8G8B8A8_UINT,
    VK_FORMAT_R8G8B8A8_SINT,
    VK_FORMAT_R8G8B8A8_SRGB,
    VK_FORMAT_B8G8R8A8_UNORM,
    VK_FORMAT_B8G8R8A8_SNORM,
    VK_FORMAT_B8G8R8A8_USCALED,
    VK_FORMAT_B8G8R8A8_SSCALED,
    VK_FORMAT_B8G8R8A8_UINT,
    VK_FORMAT_B8G8R8A8_SINT,
    VK_FORMAT_B8G8R8A8_SRGB,
    VK_FORMAT_A8B8G8R8_UNORM_PACK32,
    VK_FORMAT_A8B8G8R8_SNORM_PACK32,
    VK_FORMAT_A8B8G8R8_USCALED_PACK32,
    VK_FORMAT_A8B8G8R8_SSCALED_PACK32,
    VK_FORMAT_A8B8G8R8_UINT_PACK32,
    VK_FORMAT_A8B8G8R8_SINT_PACK32,
    VK_FORMAT_A8B8G8R8_SRGB_PACK32,
    VK_FORMAT_A2R10G10B10_UNORM_PACK32,
    VK_FORMAT_A2R10G10B10_SNORM_PACK32,
    VK_FORMAT_A2R10G10B10_USCALED_PACK32,
    VK_FORMAT_A2R10G10B10_SSCALED_PACK32,
    VK_FORMAT_A2R10G10B10_UINT_PACK32,
    VK_FORMAT_A2R10G10B10_SINT_PACK32,
    VK_FORMAT_A2B10G10R10_UNORM_PACK32,
    VK_FORMAT_A2B10G10R10_SNORM_PACK32,
    VK_FORMAT_A2B10G10R10_USCALED_PACK32,
    VK_FORMAT_A2B10G10R10_SSCALED_PACK32,
    VK_FORMAT_A2B10G10R10_UINT_PACK32,
    VK_FORMAT_A2B10G10R10_SINT_PACK32,
    VK_FORMAT_R16_UNORM,
    VK_FORMAT_R16_SNORM,
    VK_FORMAT_R16_USCALED,
    VK_FORMAT_R16_SSCALED,
    VK_FORMAT_R16_UINT,
    VK_FORMAT_R16_SINT,
    VK_FORMAT_R16_SFLOAT,
    VK_FORMAT_R16G16_UNORM,
    VK_FORMAT_R16G16_SNORM,
    VK_FORMAT_R16G16_USCALED,
    VK_FORMAT_R16G16_SSCALED,
    VK_FORMAT_R16G16_UINT,
    VK_FORMAT_R16G16_SINT,
    VK_FORMAT_R16G16_SFLOAT,
    VK_FORMAT_R16G16B16_UNORM,
    VK_FORMAT_R16G16B16_SNORM,
    VK_FORMAT_R16G16B16_USCALED,
    VK_FORMAT_R16G16B16_SSCALED,
    VK_FORMAT_R16G16B16_UINT,
    VK_FORMAT_R16G16B16_SINT,
    VK_FORMAT_R16G16B16_SFLOAT,
    VK_FORMAT_R16G16B16A16_UNORM,
    VK_FORMAT_R16G16B16A16_SNORM,
    VK_FORMAT_R16G16B16A16_USCALED,
    VK_FORMAT_R16G16B16A16_SSCALED,
    VK_FORMAT_R16G16B16A16_UINT,
    VK_FORMAT_R16G16B16A16_SINT,
    VK_FORMAT_R16G16B16A16_SFLOAT,
    VK_FORMAT_R32_UINT,
    VK_FORMAT_R32_SINT,
    VK_FORMAT_R32_SFLOAT,
    VK_FORMAT_R32G32_UINT,
    VK_FORMAT_R32G32_SINT,
    VK_FORMAT_R32G32_SFLOAT,
    VK_FORMAT_R32G32B32_UINT,
    VK_FORMAT_R32G32B32_SINT,
    VK_FORMAT_R32G32B32_SFLOAT,
    VK_FORMAT_R32G32B32A32_UINT,
    VK_FORMAT_R32G32B32A32_SINT,
    VK_FORMAT_R32G32B32A32_SFLOAT,
    VK_FORMAT_R64_UINT,
    VK_FORMAT_R64_SINT,
    VK_FORMAT_R64_SFLOAT,
    VK_FORMAT_R64G64_UINT,
    VK_FORMAT_R64G64_SINT,
    VK_FORMAT_R64G64_SFLOAT,
    VK_FORMAT_R64G64B64_UINT,
    VK_FORMAT_R64G64B64_SINT,
    VK_FORMAT_R64G64B64_SFLOAT,
    VK_FORMAT_R64G64B64A64_UINT,
    VK_FORMAT_R64G64B64A64_SINT,
    VK_FORMAT_R64G64B64A64_SFLOAT,
    VK_FORMAT_B10G11R11_UFLOAT_PACK32,
    VK_FORMAT_E5B9G9R9_UFLOAT_PACK32,
    VK_FORMAT_D16_UNORM,
    VK_FORMAT_X8_D24_UNORM_PACK32,
    VK_FORMAT_D32_SFLOAT,
    VK_FORMAT_S8_UINT,
    VK_FORMAT_D16_UNORM_S8_UINT,
    VK_FORMAT_D24_UNORM_S8_UINT,
    VK_FORMAT_D32_SFLOAT_S8_UINT,
    VK_FORMAT_BC1_RGB_UNORM_BLOCK,
    VK_FORMAT_BC1_RGB_SRGB_BLOCK,
    VK_FORMAT_BC1_RGBA_UNORM_BLOCK,
    VK_FORMAT_BC1_RGBA_SRGB_BLOCK,
    VK_FORMAT_BC2_UNORM_BLOCK,
    VK_FORMAT_BC2_SRGB_BLOCK,
    VK_FORMAT_BC3_UNORM_BLOCK,
    VK_FORMAT_BC3_SRGB_BLOCK,
    VK_FORMAT_BC4_UNORM_BLOCK,
    VK_FORMAT_BC4_SNORM_BLOCK,
    VK_FORMAT_BC5_UNORM_BLOCK,
    VK_FORMAT_BC5_SNORM_BLOCK,
    VK_FORMAT_BC6H_UFLOAT_BLOCK,
    VK_FORMAT_BC6H_SFLOAT_BLOCK,
    VK_FORMAT_BC7_UNORM_BLOCK,
    VK_FORMAT_BC7_SRGB_BLOCK,
    VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK,
    VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK,
    VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK,
    VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK,
    VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK,
    VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK,
    VK_FORMAT_EAC_R11_UNORM_BLOCK,
    VK_FORMAT_EAC_R11_SNORM_BLOCK,
    VK_FORMAT_EAC_R11G11_UNORM_BLOCK,
    VK_FORMAT_EAC_R11G11_SNORM_BLOCK,
    VK_FORMAT_ASTC_4x4_UNORM_BLOCK,
    VK_FORMAT_ASTC_4x4_SRGB_BLOCK,
    VK_FORMAT_ASTC_5x4_UNORM_BLOCK,
    VK_FORMAT_ASTC_5x4_SRGB_BLOCK,
    VK_FORMAT_ASTC_5x5_UNORM_BLOCK,
    VK_FORMAT_ASTC_5x5_SRGB_BLOCK,
    VK_FORMAT_ASTC_6x5_UNORM_BLOCK,
    VK_FORMAT_ASTC_6x5_SRGB_BLOCK,
    VK_FORMAT_ASTC_6x6_UNORM_BLOCK,
    VK_FORMAT_ASTC_6x6_SRGB_BLOCK,
    VK_FORMAT_ASTC_8x5_UNORM_BLOCK,
    VK_FORMAT_ASTC_8x5_SRGB_BLOCK,
    VK_FORMAT_ASTC_8x6_UNORM_BLOCK,
    VK_FORMAT_ASTC_8x6_SRGB_BLOCK,
    VK_FORMAT_ASTC_8x8_UNORM_BLOCK,
    VK_FORMAT_ASTC_8x8_SRGB_BLOCK,
    VK_FORMAT_ASTC_10x5_UNORM_BLOCK,
    VK_FORMAT_ASTC_10x5_SRGB_BLOCK,
    VK_FORMAT_ASTC_10x6_UNORM_BLOCK,
    VK_FORMAT_ASTC_10x6_SRGB_BLOCK,
    VK_FORMAT_ASTC_10x8_UNORM_BLOCK,
    VK_FORMAT_ASTC_10x8_SRGB_BLOCK,
    VK_FORMAT_ASTC_10x10_UNORM_BLOCK,
    VK_FORMAT_ASTC_10x10_SRGB_BLOCK,
    VK_FORMAT_ASTC_12x10_UNORM_BLOCK,
    VK_FORMAT_ASTC_12x10_SRGB_BLOCK,
    VK_FORMAT_ASTC_12x12_UNORM_BLOCK,
    VK_FORMAT_ASTC_12x12_SRGB_BLOCK,
    VK_FORMAT_G8B8G8R8_422_UNORM,
    VK_FORMAT_B8G8R8G8_422_UNORM,
    VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM,
    VK_FORMAT_G8_B8R8_2PLANE_420_UNORM,
    VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM,
    VK_FORMAT_G8_B8R8_2PLANE_422_UNORM,
    VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM,
    VK_FORMAT_R10X6_UNORM_PACK16,
    VK_FORMAT_R10X6G10X6_UNORM_2PACK16,
    VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16,
    VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16,
    VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16,
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16,
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16,
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16,
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16,
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16,
    VK_FORMAT_R12X4_UNORM_PACK16,
    VK_FORMAT_R12X4G12X4_UNORM_2PACK16,
    VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16,
    VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16,
    VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16,
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16,
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16,
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16,
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16,
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16,
    VK_FORMAT_G16B16G16R16_422_UNORM,
    VK_FORMAT_B16G16R16G16_422_UNORM,
    VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM,
    VK_FORMAT_G16_B16R16_2PLANE_420_UNORM,
    VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM,
    VK_FORMAT_G16_B16R16_2PLANE_422_UNORM,
    VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM,
    VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG,
    VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG,
    VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG,
    VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG,
    VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG,
    VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG,
    VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG,
    VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG,
    VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT,
    VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT,
    VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT,
    VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT,
    VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT,
    VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT,
    VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT,
    VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT,
    VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT,
    VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT,
    VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT,
    VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT,
    VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT,
    VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT,
    VK_FORMAT_G8B8G8R8_422_UNORM_KHR,
    VK_FORMAT_B8G8R8G8_422_UNORM_KHR,
    VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR,
    VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR,
    VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR,
    VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR,
    VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR,
    VK_FORMAT_R10X6_UNORM_PACK16_KHR,
    VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR,
    VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR,
    VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR,
    VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR,
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR,
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR,
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR,
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR,
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR,
    VK_FORMAT_R12X4_UNORM_PACK16_KHR,
    VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR,
    VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR,
    VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR,
    VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR,
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR,
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR,
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR,
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR,
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR,
    VK_FORMAT_G16B16G16R16_422_UNORM_KHR,
    VK_FORMAT_B16G16R16G16_422_UNORM_KHR,
    VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR,
    VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR,
    VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR,
    VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR,
    VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR,
    
  }

  const VK_FORMAT_UNDEFINED: VkFormat;
  const VK_FORMAT_R4G4_UNORM_PACK8: VkFormat;
  const VK_FORMAT_R4G4B4A4_UNORM_PACK16: VkFormat;
  const VK_FORMAT_B4G4R4A4_UNORM_PACK16: VkFormat;
  const VK_FORMAT_R5G6B5_UNORM_PACK16: VkFormat;
  const VK_FORMAT_B5G6R5_UNORM_PACK16: VkFormat;
  const VK_FORMAT_R5G5B5A1_UNORM_PACK16: VkFormat;
  const VK_FORMAT_B5G5R5A1_UNORM_PACK16: VkFormat;
  const VK_FORMAT_A1R5G5B5_UNORM_PACK16: VkFormat;
  const VK_FORMAT_R8_UNORM: VkFormat;
  const VK_FORMAT_R8_SNORM: VkFormat;
  const VK_FORMAT_R8_USCALED: VkFormat;
  const VK_FORMAT_R8_SSCALED: VkFormat;
  const VK_FORMAT_R8_UINT: VkFormat;
  const VK_FORMAT_R8_SINT: VkFormat;
  const VK_FORMAT_R8_SRGB: VkFormat;
  const VK_FORMAT_R8G8_UNORM: VkFormat;
  const VK_FORMAT_R8G8_SNORM: VkFormat;
  const VK_FORMAT_R8G8_USCALED: VkFormat;
  const VK_FORMAT_R8G8_SSCALED: VkFormat;
  const VK_FORMAT_R8G8_UINT: VkFormat;
  const VK_FORMAT_R8G8_SINT: VkFormat;
  const VK_FORMAT_R8G8_SRGB: VkFormat;
  const VK_FORMAT_R8G8B8_UNORM: VkFormat;
  const VK_FORMAT_R8G8B8_SNORM: VkFormat;
  const VK_FORMAT_R8G8B8_USCALED: VkFormat;
  const VK_FORMAT_R8G8B8_SSCALED: VkFormat;
  const VK_FORMAT_R8G8B8_UINT: VkFormat;
  const VK_FORMAT_R8G8B8_SINT: VkFormat;
  const VK_FORMAT_R8G8B8_SRGB: VkFormat;
  const VK_FORMAT_B8G8R8_UNORM: VkFormat;
  const VK_FORMAT_B8G8R8_SNORM: VkFormat;
  const VK_FORMAT_B8G8R8_USCALED: VkFormat;
  const VK_FORMAT_B8G8R8_SSCALED: VkFormat;
  const VK_FORMAT_B8G8R8_UINT: VkFormat;
  const VK_FORMAT_B8G8R8_SINT: VkFormat;
  const VK_FORMAT_B8G8R8_SRGB: VkFormat;
  const VK_FORMAT_R8G8B8A8_UNORM: VkFormat;
  const VK_FORMAT_R8G8B8A8_SNORM: VkFormat;
  const VK_FORMAT_R8G8B8A8_USCALED: VkFormat;
  const VK_FORMAT_R8G8B8A8_SSCALED: VkFormat;
  const VK_FORMAT_R8G8B8A8_UINT: VkFormat;
  const VK_FORMAT_R8G8B8A8_SINT: VkFormat;
  const VK_FORMAT_R8G8B8A8_SRGB: VkFormat;
  const VK_FORMAT_B8G8R8A8_UNORM: VkFormat;
  const VK_FORMAT_B8G8R8A8_SNORM: VkFormat;
  const VK_FORMAT_B8G8R8A8_USCALED: VkFormat;
  const VK_FORMAT_B8G8R8A8_SSCALED: VkFormat;
  const VK_FORMAT_B8G8R8A8_UINT: VkFormat;
  const VK_FORMAT_B8G8R8A8_SINT: VkFormat;
  const VK_FORMAT_B8G8R8A8_SRGB: VkFormat;
  const VK_FORMAT_A8B8G8R8_UNORM_PACK32: VkFormat;
  const VK_FORMAT_A8B8G8R8_SNORM_PACK32: VkFormat;
  const VK_FORMAT_A8B8G8R8_USCALED_PACK32: VkFormat;
  const VK_FORMAT_A8B8G8R8_SSCALED_PACK32: VkFormat;
  const VK_FORMAT_A8B8G8R8_UINT_PACK32: VkFormat;
  const VK_FORMAT_A8B8G8R8_SINT_PACK32: VkFormat;
  const VK_FORMAT_A8B8G8R8_SRGB_PACK32: VkFormat;
  const VK_FORMAT_A2R10G10B10_UNORM_PACK32: VkFormat;
  const VK_FORMAT_A2R10G10B10_SNORM_PACK32: VkFormat;
  const VK_FORMAT_A2R10G10B10_USCALED_PACK32: VkFormat;
  const VK_FORMAT_A2R10G10B10_SSCALED_PACK32: VkFormat;
  const VK_FORMAT_A2R10G10B10_UINT_PACK32: VkFormat;
  const VK_FORMAT_A2R10G10B10_SINT_PACK32: VkFormat;
  const VK_FORMAT_A2B10G10R10_UNORM_PACK32: VkFormat;
  const VK_FORMAT_A2B10G10R10_SNORM_PACK32: VkFormat;
  const VK_FORMAT_A2B10G10R10_USCALED_PACK32: VkFormat;
  const VK_FORMAT_A2B10G10R10_SSCALED_PACK32: VkFormat;
  const VK_FORMAT_A2B10G10R10_UINT_PACK32: VkFormat;
  const VK_FORMAT_A2B10G10R10_SINT_PACK32: VkFormat;
  const VK_FORMAT_R16_UNORM: VkFormat;
  const VK_FORMAT_R16_SNORM: VkFormat;
  const VK_FORMAT_R16_USCALED: VkFormat;
  const VK_FORMAT_R16_SSCALED: VkFormat;
  const VK_FORMAT_R16_UINT: VkFormat;
  const VK_FORMAT_R16_SINT: VkFormat;
  const VK_FORMAT_R16_SFLOAT: VkFormat;
  const VK_FORMAT_R16G16_UNORM: VkFormat;
  const VK_FORMAT_R16G16_SNORM: VkFormat;
  const VK_FORMAT_R16G16_USCALED: VkFormat;
  const VK_FORMAT_R16G16_SSCALED: VkFormat;
  const VK_FORMAT_R16G16_UINT: VkFormat;
  const VK_FORMAT_R16G16_SINT: VkFormat;
  const VK_FORMAT_R16G16_SFLOAT: VkFormat;
  const VK_FORMAT_R16G16B16_UNORM: VkFormat;
  const VK_FORMAT_R16G16B16_SNORM: VkFormat;
  const VK_FORMAT_R16G16B16_USCALED: VkFormat;
  const VK_FORMAT_R16G16B16_SSCALED: VkFormat;
  const VK_FORMAT_R16G16B16_UINT: VkFormat;
  const VK_FORMAT_R16G16B16_SINT: VkFormat;
  const VK_FORMAT_R16G16B16_SFLOAT: VkFormat;
  const VK_FORMAT_R16G16B16A16_UNORM: VkFormat;
  const VK_FORMAT_R16G16B16A16_SNORM: VkFormat;
  const VK_FORMAT_R16G16B16A16_USCALED: VkFormat;
  const VK_FORMAT_R16G16B16A16_SSCALED: VkFormat;
  const VK_FORMAT_R16G16B16A16_UINT: VkFormat;
  const VK_FORMAT_R16G16B16A16_SINT: VkFormat;
  const VK_FORMAT_R16G16B16A16_SFLOAT: VkFormat;
  const VK_FORMAT_R32_UINT: VkFormat;
  const VK_FORMAT_R32_SINT: VkFormat;
  const VK_FORMAT_R32_SFLOAT: VkFormat;
  const VK_FORMAT_R32G32_UINT: VkFormat;
  const VK_FORMAT_R32G32_SINT: VkFormat;
  const VK_FORMAT_R32G32_SFLOAT: VkFormat;
  const VK_FORMAT_R32G32B32_UINT: VkFormat;
  const VK_FORMAT_R32G32B32_SINT: VkFormat;
  const VK_FORMAT_R32G32B32_SFLOAT: VkFormat;
  const VK_FORMAT_R32G32B32A32_UINT: VkFormat;
  const VK_FORMAT_R32G32B32A32_SINT: VkFormat;
  const VK_FORMAT_R32G32B32A32_SFLOAT: VkFormat;
  const VK_FORMAT_R64_UINT: VkFormat;
  const VK_FORMAT_R64_SINT: VkFormat;
  const VK_FORMAT_R64_SFLOAT: VkFormat;
  const VK_FORMAT_R64G64_UINT: VkFormat;
  const VK_FORMAT_R64G64_SINT: VkFormat;
  const VK_FORMAT_R64G64_SFLOAT: VkFormat;
  const VK_FORMAT_R64G64B64_UINT: VkFormat;
  const VK_FORMAT_R64G64B64_SINT: VkFormat;
  const VK_FORMAT_R64G64B64_SFLOAT: VkFormat;
  const VK_FORMAT_R64G64B64A64_UINT: VkFormat;
  const VK_FORMAT_R64G64B64A64_SINT: VkFormat;
  const VK_FORMAT_R64G64B64A64_SFLOAT: VkFormat;
  const VK_FORMAT_B10G11R11_UFLOAT_PACK32: VkFormat;
  const VK_FORMAT_E5B9G9R9_UFLOAT_PACK32: VkFormat;
  const VK_FORMAT_D16_UNORM: VkFormat;
  const VK_FORMAT_X8_D24_UNORM_PACK32: VkFormat;
  const VK_FORMAT_D32_SFLOAT: VkFormat;
  const VK_FORMAT_S8_UINT: VkFormat;
  const VK_FORMAT_D16_UNORM_S8_UINT: VkFormat;
  const VK_FORMAT_D24_UNORM_S8_UINT: VkFormat;
  const VK_FORMAT_D32_SFLOAT_S8_UINT: VkFormat;
  const VK_FORMAT_BC1_RGB_UNORM_BLOCK: VkFormat;
  const VK_FORMAT_BC1_RGB_SRGB_BLOCK: VkFormat;
  const VK_FORMAT_BC1_RGBA_UNORM_BLOCK: VkFormat;
  const VK_FORMAT_BC1_RGBA_SRGB_BLOCK: VkFormat;
  const VK_FORMAT_BC2_UNORM_BLOCK: VkFormat;
  const VK_FORMAT_BC2_SRGB_BLOCK: VkFormat;
  const VK_FORMAT_BC3_UNORM_BLOCK: VkFormat;
  const VK_FORMAT_BC3_SRGB_BLOCK: VkFormat;
  const VK_FORMAT_BC4_UNORM_BLOCK: VkFormat;
  const VK_FORMAT_BC4_SNORM_BLOCK: VkFormat;
  const VK_FORMAT_BC5_UNORM_BLOCK: VkFormat;
  const VK_FORMAT_BC5_SNORM_BLOCK: VkFormat;
  const VK_FORMAT_BC6H_UFLOAT_BLOCK: VkFormat;
  const VK_FORMAT_BC6H_SFLOAT_BLOCK: VkFormat;
  const VK_FORMAT_BC7_UNORM_BLOCK: VkFormat;
  const VK_FORMAT_BC7_SRGB_BLOCK: VkFormat;
  const VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK: VkFormat;
  const VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK: VkFormat;
  const VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK: VkFormat;
  const VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK: VkFormat;
  const VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK: VkFormat;
  const VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK: VkFormat;
  const VK_FORMAT_EAC_R11_UNORM_BLOCK: VkFormat;
  const VK_FORMAT_EAC_R11_SNORM_BLOCK: VkFormat;
  const VK_FORMAT_EAC_R11G11_UNORM_BLOCK: VkFormat;
  const VK_FORMAT_EAC_R11G11_SNORM_BLOCK: VkFormat;
  const VK_FORMAT_ASTC_4x4_UNORM_BLOCK: VkFormat;
  const VK_FORMAT_ASTC_4x4_SRGB_BLOCK: VkFormat;
  const VK_FORMAT_ASTC_5x4_UNORM_BLOCK: VkFormat;
  const VK_FORMAT_ASTC_5x4_SRGB_BLOCK: VkFormat;
  const VK_FORMAT_ASTC_5x5_UNORM_BLOCK: VkFormat;
  const VK_FORMAT_ASTC_5x5_SRGB_BLOCK: VkFormat;
  const VK_FORMAT_ASTC_6x5_UNORM_BLOCK: VkFormat;
  const VK_FORMAT_ASTC_6x5_SRGB_BLOCK: VkFormat;
  const VK_FORMAT_ASTC_6x6_UNORM_BLOCK: VkFormat;
  const VK_FORMAT_ASTC_6x6_SRGB_BLOCK: VkFormat;
  const VK_FORMAT_ASTC_8x5_UNORM_BLOCK: VkFormat;
  const VK_FORMAT_ASTC_8x5_SRGB_BLOCK: VkFormat;
  const VK_FORMAT_ASTC_8x6_UNORM_BLOCK: VkFormat;
  const VK_FORMAT_ASTC_8x6_SRGB_BLOCK: VkFormat;
  const VK_FORMAT_ASTC_8x8_UNORM_BLOCK: VkFormat;
  const VK_FORMAT_ASTC_8x8_SRGB_BLOCK: VkFormat;
  const VK_FORMAT_ASTC_10x5_UNORM_BLOCK: VkFormat;
  const VK_FORMAT_ASTC_10x5_SRGB_BLOCK: VkFormat;
  const VK_FORMAT_ASTC_10x6_UNORM_BLOCK: VkFormat;
  const VK_FORMAT_ASTC_10x6_SRGB_BLOCK: VkFormat;
  const VK_FORMAT_ASTC_10x8_UNORM_BLOCK: VkFormat;
  const VK_FORMAT_ASTC_10x8_SRGB_BLOCK: VkFormat;
  const VK_FORMAT_ASTC_10x10_UNORM_BLOCK: VkFormat;
  const VK_FORMAT_ASTC_10x10_SRGB_BLOCK: VkFormat;
  const VK_FORMAT_ASTC_12x10_UNORM_BLOCK: VkFormat;
  const VK_FORMAT_ASTC_12x10_SRGB_BLOCK: VkFormat;
  const VK_FORMAT_ASTC_12x12_UNORM_BLOCK: VkFormat;
  const VK_FORMAT_ASTC_12x12_SRGB_BLOCK: VkFormat;
  const VK_FORMAT_G8B8G8R8_422_UNORM: VkFormat;
  const VK_FORMAT_B8G8R8G8_422_UNORM: VkFormat;
  const VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM: VkFormat;
  const VK_FORMAT_G8_B8R8_2PLANE_420_UNORM: VkFormat;
  const VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM: VkFormat;
  const VK_FORMAT_G8_B8R8_2PLANE_422_UNORM: VkFormat;
  const VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM: VkFormat;
  const VK_FORMAT_R10X6_UNORM_PACK16: VkFormat;
  const VK_FORMAT_R10X6G10X6_UNORM_2PACK16: VkFormat;
  const VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16: VkFormat;
  const VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16: VkFormat;
  const VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16: VkFormat;
  const VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16: VkFormat;
  const VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16: VkFormat;
  const VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16: VkFormat;
  const VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16: VkFormat;
  const VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16: VkFormat;
  const VK_FORMAT_R12X4_UNORM_PACK16: VkFormat;
  const VK_FORMAT_R12X4G12X4_UNORM_2PACK16: VkFormat;
  const VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16: VkFormat;
  const VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16: VkFormat;
  const VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16: VkFormat;
  const VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16: VkFormat;
  const VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16: VkFormat;
  const VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16: VkFormat;
  const VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16: VkFormat;
  const VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16: VkFormat;
  const VK_FORMAT_G16B16G16R16_422_UNORM: VkFormat;
  const VK_FORMAT_B16G16R16G16_422_UNORM: VkFormat;
  const VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM: VkFormat;
  const VK_FORMAT_G16_B16R16_2PLANE_420_UNORM: VkFormat;
  const VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM: VkFormat;
  const VK_FORMAT_G16_B16R16_2PLANE_422_UNORM: VkFormat;
  const VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM: VkFormat;
  const VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG: VkFormat;
  const VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG: VkFormat;
  const VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG: VkFormat;
  const VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG: VkFormat;
  const VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG: VkFormat;
  const VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG: VkFormat;
  const VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG: VkFormat;
  const VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG: VkFormat;
  const VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT: VkFormat;
  const VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT: VkFormat;
  const VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT: VkFormat;
  const VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT: VkFormat;
  const VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT: VkFormat;
  const VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT: VkFormat;
  const VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT: VkFormat;
  const VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT: VkFormat;
  const VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT: VkFormat;
  const VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT: VkFormat;
  const VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT: VkFormat;
  const VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT: VkFormat;
  const VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT: VkFormat;
  const VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT: VkFormat;
  const VK_FORMAT_G8B8G8R8_422_UNORM_KHR: VkFormat;
  const VK_FORMAT_B8G8R8G8_422_UNORM_KHR: VkFormat;
  const VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR: VkFormat;
  const VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR: VkFormat;
  const VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR: VkFormat;
  const VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR: VkFormat;
  const VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR: VkFormat;
  const VK_FORMAT_R10X6_UNORM_PACK16_KHR: VkFormat;
  const VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR: VkFormat;
  const VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR: VkFormat;
  const VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR: VkFormat;
  const VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR: VkFormat;
  const VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR: VkFormat;
  const VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR: VkFormat;
  const VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR: VkFormat;
  const VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR: VkFormat;
  const VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR: VkFormat;
  const VK_FORMAT_R12X4_UNORM_PACK16_KHR: VkFormat;
  const VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR: VkFormat;
  const VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR: VkFormat;
  const VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR: VkFormat;
  const VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR: VkFormat;
  const VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR: VkFormat;
  const VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR: VkFormat;
  const VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR: VkFormat;
  const VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR: VkFormat;
  const VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR: VkFormat;
  const VK_FORMAT_G16B16G16R16_422_UNORM_KHR: VkFormat;
  const VK_FORMAT_B16G16R16G16_422_UNORM_KHR: VkFormat;
  const VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR: VkFormat;
  const VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR: VkFormat;
  const VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR: VkFormat;
  const VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR: VkFormat;
  const VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR: VkFormat;
  

  
  /**
   * 
   * @member VK_STRUCTURE_TYPE_APPLICATION_INFO
   * @member VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO
   * @member VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO
   * @member VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO
   * @member VK_STRUCTURE_TYPE_SUBMIT_INFO
   * @member VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO
   * @member VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE
   * @member VK_STRUCTURE_TYPE_BIND_SPARSE_INFO
   * @member VK_STRUCTURE_TYPE_FENCE_CREATE_INFO
   * @member VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO
   * @member VK_STRUCTURE_TYPE_EVENT_CREATE_INFO
   * @member VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO
   * @member VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO
   * @member VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO
   * @member VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO
   * @member VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO
   * @member VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO
   * @member VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO
   * @member VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO
   * @member VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO
   * @member VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO
   * @member VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO
   * @member VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO
   * @member VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO
   * @member VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO
   * @member VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO
   * @member VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO
   * @member VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO
   * @member VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO
   * @member VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO
   * @member VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO
   * @member VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO
   * @member VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO
   * @member VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO
   * @member VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO
   * @member VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET
   * @member VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET
   * @member VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO
   * @member VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO
   * @member VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO
   * @member VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO
   * @member VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO
   * @member VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO
   * @member VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO
   * @member VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER
   * @member VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER
   * @member VK_STRUCTURE_TYPE_MEMORY_BARRIER
   * @member VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO
   * @member VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES
   * @member VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO
   * @member VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES
   * @member VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS
   * @member VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO
   * @member VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO
   * @member VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO
   * @member VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO
   * @member VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO
   * @member VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO
   * @member VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO
   * @member VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES
   * @member VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO
   * @member VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2
   * @member VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2
   * @member VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2
   * @member VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2
   * @member VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2
   * @member VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2
   * @member VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2
   * @member VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2
   * @member VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES
   * @member VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO
   * @member VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO
   * @member VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO
   * @member VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES
   * @member VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES
   * @member VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2
   * @member VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO
   * @member VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO
   * @member VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO
   * @member VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES
   * @member VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES
   * @member VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO
   * @member VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO
   * @member VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES
   * @member VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO
   * @member VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO
   * @member VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO
   * @member VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES
   * @member VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO
   * @member VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO
   * @member VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES
   * @member VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES
   * @member VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR
   * @member VK_STRUCTURE_TYPE_PRESENT_INFO_KHR
   * @member VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR
   * @member VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR
   * @member VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR
   * @member VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR
   * @member VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR
   * @member VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR
   * @member VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR
   * @member VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR
   * @member VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR
   * @member VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR
   * @member VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR
   * @member VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR
   * @member VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR
   * @member VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR
   * @member VK_STRUCTURE_TYPE_NATIVE_BUFFER_ANDROID
   * @member VK_STRUCTURE_TYPE_SWAPCHAIN_IMAGE_CREATE_INFO_ANDROID
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENTATION_PROPERTIES_ANDROID
   * @member VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT
   * @member VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT
   * @member VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD
   * @member VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT
   * @member VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT
   * @member VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT
   * @member VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV
   * @member VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV
   * @member VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT
   * @member VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT
   * @member VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX
   * @member VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD
   * @member VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV
   * @member VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV
   * @member VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV
   * @member VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV
   * @member VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV
   * @member VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV
   * @member VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT
   * @member VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT
   * @member VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT
   * @member VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR
   * @member VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR
   * @member VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR
   * @member VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR
   * @member VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR
   * @member VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR
   * @member VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR
   * @member VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR
   * @member VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR
   * @member VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR
   * @member VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR
   * @member VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR
   * @member VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR
   * @member VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR
   * @member VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT
   * @member VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR
   * @member VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR
   * @member VK_STRUCTURE_TYPE_OBJECT_TABLE_CREATE_INFO_NVX
   * @member VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NVX
   * @member VK_STRUCTURE_TYPE_CMD_PROCESS_COMMANDS_INFO_NVX
   * @member VK_STRUCTURE_TYPE_CMD_RESERVE_SPACE_FOR_COMMANDS_INFO_NVX
   * @member VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_LIMITS_NVX
   * @member VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_FEATURES_NVX
   * @member VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV
   * @member VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT
   * @member VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT
   * @member VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT
   * @member VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT
   * @member VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT
   * @member VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT
   * @member VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX
   * @member VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT
   * @member VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT
   * @member VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT
   * @member VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT
   * @member VK_STRUCTURE_TYPE_HDR_METADATA_EXT
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR
   * @member VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR
   * @member VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR
   * @member VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR
   * @member VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR
   * @member VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR
   * @member VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR
   * @member VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR
   * @member VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR
   * @member VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR
   * @member VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR
   * @member VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR
   * @member VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR
   * @member VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR
   * @member VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR
   * @member VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR
   * @member VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR
   * @member VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR
   * @member VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR
   * @member VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR
   * @member VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR
   * @member VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR
   * @member VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR
   * @member VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR
   * @member VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK
   * @member VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK
   * @member VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT
   * @member VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT
   * @member VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT
   * @member VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT
   * @member VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT
   * @member VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID
   * @member VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID
   * @member VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID
   * @member VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID
   * @member VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID
   * @member VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT
   * @member VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT
   * @member VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT
   * @member VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT
   * @member VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT
   * @member VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT
   * @member VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT
   * @member VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT
   * @member VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT
   * @member VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT
   * @member VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV
   * @member VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV
   * @member VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT
   * @member VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT
   * @member VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT
   * @member VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT
   * @member VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT
   * @member VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT
   * @member VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT
   * @member VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT
   * @member VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT
   * @member VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT
   * @member VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV
   * @member VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV
   * @member VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV
   * @member VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV
   * @member VK_STRUCTURE_TYPE_GEOMETRY_NV
   * @member VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV
   * @member VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV
   * @member VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV
   * @member VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV
   * @member VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV
   * @member VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV
   * @member VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV
   * @member VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT
   * @member VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT
   * @member VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR
   * @member VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT
   * @member VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR
   * @member VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD
   * @member VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD
   * @member VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT
   * @member VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT
   * @member VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP
   * @member VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR
   * @member VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV
   * @member VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV
   * @member VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV
   * @member VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL
   * @member VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL
   * @member VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL
   * @member VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL
   * @member VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL
   * @member VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL
   * @member VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT
   * @member VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD
   * @member VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD
   * @member VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA
   * @member VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT
   * @member VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT
   * @member VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT
   * @member VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT
   * @member VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT
   * @member VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT
   * @member VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT
   * @member VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT
   * @member VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV
   * @member VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV
   * @member VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV
   * @member VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR
   * @member VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT
   * @member VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT
   * @member VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT
   * @member VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT
   * @member VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR
   * @member VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR
   * @member VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR
   * @member VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR
   * @member VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR
   * @member VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT
   * @member VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR
   * @member VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR
   * @member VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR
   * @member VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR
   * @member VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR
   * @member VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR
   * @member VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR
   * @member VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR
   * @member VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR
   * @member VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR
   * @member VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR
   * @member VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR
   * @member VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR
   * @member VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR
   * @member VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR
   * @member VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR
   * @member VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR
   * @member VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR
   * @member VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR
   * @member VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR
   * @member VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR
   * @member VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR
   * @member VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR
   * @member VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR
   * @member VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR
   * @member VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR
   * @member VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR
   * @member VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR
   * @member VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR
   * @member VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR
   * @member VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR
   * @member VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR
   * @member VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR
   * @member VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR
   * @member VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR
   * @member VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR
   * @member VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR
   * @member VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR
   * @member VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR
   * @member VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR
   * @member VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR
   * @member VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR
   */
  enum VkStructureType {
    VK_STRUCTURE_TYPE_APPLICATION_INFO,
    VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO,
    VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO,
    VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO,
    VK_STRUCTURE_TYPE_SUBMIT_INFO,
    VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO,
    VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE,
    VK_STRUCTURE_TYPE_BIND_SPARSE_INFO,
    VK_STRUCTURE_TYPE_FENCE_CREATE_INFO,
    VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO,
    VK_STRUCTURE_TYPE_EVENT_CREATE_INFO,
    VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO,
    VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO,
    VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO,
    VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO,
    VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO,
    VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO,
    VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO,
    VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO,
    VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO,
    VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO,
    VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO,
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO,
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO,
    VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO,
    VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO,
    VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO,
    VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO,
    VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO,
    VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO,
    VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO,
    VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO,
    VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO,
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET,
    VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET,
    VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO,
    VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO,
    VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO,
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO,
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO,
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO,
    VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO,
    VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER,
    VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER,
    VK_STRUCTURE_TYPE_MEMORY_BARRIER,
    VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO,
    VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES,
    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO,
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES,
    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS,
    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO,
    VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO,
    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO,
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO,
    VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2,
    VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2,
    VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2,
    VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2,
    VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2,
    VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2,
    VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2,
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2,
    VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES,
    VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO,
    VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO,
    VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO,
    VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES,
    VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES,
    VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2,
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO,
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO,
    VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO,
    VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES,
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES,
    VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO,
    VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO,
    VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES,
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO,
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO,
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO,
    VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES,
    VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO,
    VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO,
    VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES,
    VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR,
    VK_STRUCTURE_TYPE_PRESENT_INFO_KHR,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR,
    VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR,
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR,
    VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR,
    VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR,
    VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR,
    VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR,
    VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR,
    VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR,
    VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR,
    VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR,
    VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR,
    VK_STRUCTURE_TYPE_NATIVE_BUFFER_ANDROID,
    VK_STRUCTURE_TYPE_SWAPCHAIN_IMAGE_CREATE_INFO_ANDROID,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENTATION_PROPERTIES_ANDROID,
    VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT,
    VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT,
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD,
    VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT,
    VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT,
    VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT,
    VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV,
    VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV,
    VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT,
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT,
    VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX,
    VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD,
    VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV,
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV,
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV,
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV,
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV,
    VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV,
    VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT,
    VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT,
    VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT,
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR,
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR,
    VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR,
    VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR,
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR,
    VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR,
    VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR,
    VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR,
    VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR,
    VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR,
    VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR,
    VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR,
    VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR,
    VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR,
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT,
    VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR,
    VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR,
    VK_STRUCTURE_TYPE_OBJECT_TABLE_CREATE_INFO_NVX,
    VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NVX,
    VK_STRUCTURE_TYPE_CMD_PROCESS_COMMANDS_INFO_NVX,
    VK_STRUCTURE_TYPE_CMD_RESERVE_SPACE_FOR_COMMANDS_INFO_NVX,
    VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_LIMITS_NVX,
    VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_FEATURES_NVX,
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV,
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT,
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT,
    VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT,
    VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT,
    VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT,
    VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT,
    VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX,
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT,
    VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT,
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT,
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT,
    VK_STRUCTURE_TYPE_HDR_METADATA_EXT,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR,
    VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR,
    VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR,
    VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR,
    VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR,
    VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR,
    VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR,
    VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR,
    VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR,
    VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR,
    VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR,
    VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR,
    VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR,
    VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR,
    VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR,
    VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR,
    VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR,
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR,
    VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR,
    VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR,
    VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR,
    VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR,
    VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR,
    VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR,
    VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK,
    VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK,
    VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT,
    VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT,
    VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT,
    VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT,
    VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT,
    VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID,
    VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID,
    VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID,
    VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID,
    VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID,
    VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT,
    VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT,
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT,
    VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT,
    VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT,
    VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT,
    VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT,
    VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT,
    VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT,
    VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT,
    VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV,
    VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV,
    VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT,
    VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT,
    VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT,
    VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT,
    VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT,
    VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT,
    VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT,
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV,
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV,
    VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV,
    VK_STRUCTURE_TYPE_GEOMETRY_NV,
    VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV,
    VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV,
    VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV,
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV,
    VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV,
    VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT,
    VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT,
    VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR,
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT,
    VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR,
    VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD,
    VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD,
    VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT,
    VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT,
    VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP,
    VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR,
    VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV,
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV,
    VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV,
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL,
    VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL,
    VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL,
    VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL,
    VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL,
    VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL,
    VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT,
    VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD,
    VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD,
    VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA,
    VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT,
    VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT,
    VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT,
    VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT,
    VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT,
    VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT,
    VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT,
    VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT,
    VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV,
    VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV,
    VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV,
    VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR,
    VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT,
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT,
    VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT,
    VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT,
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR,
    VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR,
    VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR,
    VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR,
    VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR,
    VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT,
    VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR,
    VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR,
    VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR,
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR,
    VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR,
    VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR,
    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR,
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR,
    VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR,
    VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR,
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR,
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR,
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR,
    VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR,
    VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR,
    VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR,
    VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR,
    VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR,
    VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR,
    VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR,
    VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR,
    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR,
    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR,
    VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR,
    VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR,
    VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR,
    VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR,
    VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR,
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR,
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR,
    VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR,
    VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR,
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR,
    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR,
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR,
    
  }

  const VK_STRUCTURE_TYPE_APPLICATION_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_SUBMIT_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE: VkStructureType;
  const VK_STRUCTURE_TYPE_BIND_SPARSE_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_FENCE_CREATE_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_EVENT_CREATE_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET: VkStructureType;
  const VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET: VkStructureType;
  const VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER: VkStructureType;
  const VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER: VkStructureType;
  const VK_STRUCTURE_TYPE_MEMORY_BARRIER: VkStructureType;
  const VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES: VkStructureType;
  const VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES: VkStructureType;
  const VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS: VkStructureType;
  const VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES: VkStructureType;
  const VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2: VkStructureType;
  const VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2: VkStructureType;
  const VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2: VkStructureType;
  const VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2: VkStructureType;
  const VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2: VkStructureType;
  const VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2: VkStructureType;
  const VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2: VkStructureType;
  const VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2: VkStructureType;
  const VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES: VkStructureType;
  const VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES: VkStructureType;
  const VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES: VkStructureType;
  const VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2: VkStructureType;
  const VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES: VkStructureType;
  const VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES: VkStructureType;
  const VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES: VkStructureType;
  const VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES: VkStructureType;
  const VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO: VkStructureType;
  const VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES: VkStructureType;
  const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES: VkStructureType;
  const VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_PRESENT_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_NATIVE_BUFFER_ANDROID: VkStructureType;
  const VK_STRUCTURE_TYPE_SWAPCHAIN_IMAGE_CREATE_INFO_ANDROID: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENTATION_PROPERTIES_ANDROID: VkStructureType;
  const VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD: VkStructureType;
  const VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV: VkStructureType;
  const VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV: VkStructureType;
  const VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX: VkStructureType;
  const VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD: VkStructureType;
  const VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV: VkStructureType;
  const VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV: VkStructureType;
  const VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV: VkStructureType;
  const VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV: VkStructureType;
  const VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV: VkStructureType;
  const VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV: VkStructureType;
  const VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_OBJECT_TABLE_CREATE_INFO_NVX: VkStructureType;
  const VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NVX: VkStructureType;
  const VK_STRUCTURE_TYPE_CMD_PROCESS_COMMANDS_INFO_NVX: VkStructureType;
  const VK_STRUCTURE_TYPE_CMD_RESERVE_SPACE_FOR_COMMANDS_INFO_NVX: VkStructureType;
  const VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_LIMITS_NVX: VkStructureType;
  const VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_FEATURES_NVX: VkStructureType;
  const VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV: VkStructureType;
  const VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX: VkStructureType;
  const VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_HDR_METADATA_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK: VkStructureType;
  const VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK: VkStructureType;
  const VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID: VkStructureType;
  const VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID: VkStructureType;
  const VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID: VkStructureType;
  const VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID: VkStructureType;
  const VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID: VkStructureType;
  const VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV: VkStructureType;
  const VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV: VkStructureType;
  const VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV: VkStructureType;
  const VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV: VkStructureType;
  const VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV: VkStructureType;
  const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV: VkStructureType;
  const VK_STRUCTURE_TYPE_GEOMETRY_NV: VkStructureType;
  const VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV: VkStructureType;
  const VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV: VkStructureType;
  const VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV: VkStructureType;
  const VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV: VkStructureType;
  const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV: VkStructureType;
  const VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV: VkStructureType;
  const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV: VkStructureType;
  const VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD: VkStructureType;
  const VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD: VkStructureType;
  const VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP: VkStructureType;
  const VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV: VkStructureType;
  const VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV: VkStructureType;
  const VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV: VkStructureType;
  const VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL: VkStructureType;
  const VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL: VkStructureType;
  const VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL: VkStructureType;
  const VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL: VkStructureType;
  const VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL: VkStructureType;
  const VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL: VkStructureType;
  const VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD: VkStructureType;
  const VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD: VkStructureType;
  const VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA: VkStructureType;
  const VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV: VkStructureType;
  const VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV: VkStructureType;
  const VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV: VkStructureType;
  const VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT: VkStructureType;
  const VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR: VkStructureType;
  const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR: VkStructureType;
  

  
  /**
   * 
   * @member VK_SUBPASS_CONTENTS_INLINE
   * @member VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS
   */
  enum VkSubpassContents {
    VK_SUBPASS_CONTENTS_INLINE,
    VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS,
    
  }

  const VK_SUBPASS_CONTENTS_INLINE: VkSubpassContents;
  const VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS: VkSubpassContents;
  

  
  /**
   * 
   * @member VK_SUCCESS
   * @member VK_NOT_READY
   * @member VK_TIMEOUT
   * @member VK_EVENT_SET
   * @member VK_EVENT_RESET
   * @member VK_INCOMPLETE
   * @member VK_ERROR_OUT_OF_HOST_MEMORY
   * @member VK_ERROR_OUT_OF_DEVICE_MEMORY
   * @member VK_ERROR_INITIALIZATION_FAILED
   * @member VK_ERROR_DEVICE_LOST
   * @member VK_ERROR_MEMORY_MAP_FAILED
   * @member VK_ERROR_LAYER_NOT_PRESENT
   * @member VK_ERROR_EXTENSION_NOT_PRESENT
   * @member VK_ERROR_FEATURE_NOT_PRESENT
   * @member VK_ERROR_INCOMPATIBLE_DRIVER
   * @member VK_ERROR_TOO_MANY_OBJECTS
   * @member VK_ERROR_FORMAT_NOT_SUPPORTED
   * @member VK_ERROR_FRAGMENTED_POOL
   * @member VK_ERROR_OUT_OF_POOL_MEMORY
   * @member VK_ERROR_INVALID_EXTERNAL_HANDLE
   * @member VK_ERROR_SURFACE_LOST_KHR
   * @member VK_ERROR_NATIVE_WINDOW_IN_USE_KHR
   * @member VK_SUBOPTIMAL_KHR
   * @member VK_ERROR_OUT_OF_DATE_KHR
   * @member VK_ERROR_INCOMPATIBLE_DISPLAY_KHR
   * @member VK_ERROR_VALIDATION_FAILED_EXT
   * @member VK_ERROR_INVALID_SHADER_NV
   * @member VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT
   * @member VK_ERROR_FRAGMENTATION_EXT
   * @member VK_ERROR_NOT_PERMITTED_EXT
   * @member VK_ERROR_INVALID_DEVICE_ADDRESS_EXT
   * @member VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT
   * @member VK_ERROR_OUT_OF_POOL_MEMORY_KHR
   * @member VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR
   */
  enum VkResult {
    VK_SUCCESS,
    VK_NOT_READY,
    VK_TIMEOUT,
    VK_EVENT_SET,
    VK_EVENT_RESET,
    VK_INCOMPLETE,
    VK_ERROR_OUT_OF_HOST_MEMORY,
    VK_ERROR_OUT_OF_DEVICE_MEMORY,
    VK_ERROR_INITIALIZATION_FAILED,
    VK_ERROR_DEVICE_LOST,
    VK_ERROR_MEMORY_MAP_FAILED,
    VK_ERROR_LAYER_NOT_PRESENT,
    VK_ERROR_EXTENSION_NOT_PRESENT,
    VK_ERROR_FEATURE_NOT_PRESENT,
    VK_ERROR_INCOMPATIBLE_DRIVER,
    VK_ERROR_TOO_MANY_OBJECTS,
    VK_ERROR_FORMAT_NOT_SUPPORTED,
    VK_ERROR_FRAGMENTED_POOL,
    VK_ERROR_OUT_OF_POOL_MEMORY,
    VK_ERROR_INVALID_EXTERNAL_HANDLE,
    VK_ERROR_SURFACE_LOST_KHR,
    VK_ERROR_NATIVE_WINDOW_IN_USE_KHR,
    VK_SUBOPTIMAL_KHR,
    VK_ERROR_OUT_OF_DATE_KHR,
    VK_ERROR_INCOMPATIBLE_DISPLAY_KHR,
    VK_ERROR_VALIDATION_FAILED_EXT,
    VK_ERROR_INVALID_SHADER_NV,
    VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT,
    VK_ERROR_FRAGMENTATION_EXT,
    VK_ERROR_NOT_PERMITTED_EXT,
    VK_ERROR_INVALID_DEVICE_ADDRESS_EXT,
    VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT,
    VK_ERROR_OUT_OF_POOL_MEMORY_KHR,
    VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR,
    
  }

  const VK_SUCCESS: VkResult;
  const VK_NOT_READY: VkResult;
  const VK_TIMEOUT: VkResult;
  const VK_EVENT_SET: VkResult;
  const VK_EVENT_RESET: VkResult;
  const VK_INCOMPLETE: VkResult;
  const VK_ERROR_OUT_OF_HOST_MEMORY: VkResult;
  const VK_ERROR_OUT_OF_DEVICE_MEMORY: VkResult;
  const VK_ERROR_INITIALIZATION_FAILED: VkResult;
  const VK_ERROR_DEVICE_LOST: VkResult;
  const VK_ERROR_MEMORY_MAP_FAILED: VkResult;
  const VK_ERROR_LAYER_NOT_PRESENT: VkResult;
  const VK_ERROR_EXTENSION_NOT_PRESENT: VkResult;
  const VK_ERROR_FEATURE_NOT_PRESENT: VkResult;
  const VK_ERROR_INCOMPATIBLE_DRIVER: VkResult;
  const VK_ERROR_TOO_MANY_OBJECTS: VkResult;
  const VK_ERROR_FORMAT_NOT_SUPPORTED: VkResult;
  const VK_ERROR_FRAGMENTED_POOL: VkResult;
  const VK_ERROR_OUT_OF_POOL_MEMORY: VkResult;
  const VK_ERROR_INVALID_EXTERNAL_HANDLE: VkResult;
  const VK_ERROR_SURFACE_LOST_KHR: VkResult;
  const VK_ERROR_NATIVE_WINDOW_IN_USE_KHR: VkResult;
  const VK_SUBOPTIMAL_KHR: VkResult;
  const VK_ERROR_OUT_OF_DATE_KHR: VkResult;
  const VK_ERROR_INCOMPATIBLE_DISPLAY_KHR: VkResult;
  const VK_ERROR_VALIDATION_FAILED_EXT: VkResult;
  const VK_ERROR_INVALID_SHADER_NV: VkResult;
  const VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT: VkResult;
  const VK_ERROR_FRAGMENTATION_EXT: VkResult;
  const VK_ERROR_NOT_PERMITTED_EXT: VkResult;
  const VK_ERROR_INVALID_DEVICE_ADDRESS_EXT: VkResult;
  const VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT: VkResult;
  const VK_ERROR_OUT_OF_POOL_MEMORY_KHR: VkResult;
  const VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR: VkResult;
  

  
  /**
   * 
   * @member VK_DYNAMIC_STATE_VIEWPORT
   * @member VK_DYNAMIC_STATE_SCISSOR
   * @member VK_DYNAMIC_STATE_LINE_WIDTH
   * @member VK_DYNAMIC_STATE_DEPTH_BIAS
   * @member VK_DYNAMIC_STATE_BLEND_CONSTANTS
   * @member VK_DYNAMIC_STATE_DEPTH_BOUNDS
   * @member VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK
   * @member VK_DYNAMIC_STATE_STENCIL_WRITE_MASK
   * @member VK_DYNAMIC_STATE_STENCIL_REFERENCE
   * @member VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV
   * @member VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT
   * @member VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT
   * @member VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV
   * @member VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV
   * @member VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV
   * @member VK_DYNAMIC_STATE_LINE_STIPPLE_EXT
   */
  enum VkDynamicState {
    VK_DYNAMIC_STATE_VIEWPORT,
    VK_DYNAMIC_STATE_SCISSOR,
    VK_DYNAMIC_STATE_LINE_WIDTH,
    VK_DYNAMIC_STATE_DEPTH_BIAS,
    VK_DYNAMIC_STATE_BLEND_CONSTANTS,
    VK_DYNAMIC_STATE_DEPTH_BOUNDS,
    VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK,
    VK_DYNAMIC_STATE_STENCIL_WRITE_MASK,
    VK_DYNAMIC_STATE_STENCIL_REFERENCE,
    VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV,
    VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT,
    VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT,
    VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV,
    VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV,
    VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV,
    VK_DYNAMIC_STATE_LINE_STIPPLE_EXT,
    
  }

  const VK_DYNAMIC_STATE_VIEWPORT: VkDynamicState;
  const VK_DYNAMIC_STATE_SCISSOR: VkDynamicState;
  const VK_DYNAMIC_STATE_LINE_WIDTH: VkDynamicState;
  const VK_DYNAMIC_STATE_DEPTH_BIAS: VkDynamicState;
  const VK_DYNAMIC_STATE_BLEND_CONSTANTS: VkDynamicState;
  const VK_DYNAMIC_STATE_DEPTH_BOUNDS: VkDynamicState;
  const VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK: VkDynamicState;
  const VK_DYNAMIC_STATE_STENCIL_WRITE_MASK: VkDynamicState;
  const VK_DYNAMIC_STATE_STENCIL_REFERENCE: VkDynamicState;
  const VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV: VkDynamicState;
  const VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT: VkDynamicState;
  const VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT: VkDynamicState;
  const VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV: VkDynamicState;
  const VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV: VkDynamicState;
  const VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV: VkDynamicState;
  const VK_DYNAMIC_STATE_LINE_STIPPLE_EXT: VkDynamicState;
  

  
  /**
   * 
   * @member VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET
   * @member VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR
   */
  enum VkDescriptorUpdateTemplateType {
    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET,
    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR,
    
  }

  const VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET: VkDescriptorUpdateTemplateType;
  const VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR: VkDescriptorUpdateTemplateType;
  

  
  /**
   * 
   * @member VK_OBJECT_TYPE_UNKNOWN
   * @member VK_OBJECT_TYPE_INSTANCE
   * @member VK_OBJECT_TYPE_PHYSICAL_DEVICE
   * @member VK_OBJECT_TYPE_DEVICE
   * @member VK_OBJECT_TYPE_QUEUE
   * @member VK_OBJECT_TYPE_SEMAPHORE
   * @member VK_OBJECT_TYPE_COMMAND_BUFFER
   * @member VK_OBJECT_TYPE_FENCE
   * @member VK_OBJECT_TYPE_DEVICE_MEMORY
   * @member VK_OBJECT_TYPE_BUFFER
   * @member VK_OBJECT_TYPE_IMAGE
   * @member VK_OBJECT_TYPE_EVENT
   * @member VK_OBJECT_TYPE_QUERY_POOL
   * @member VK_OBJECT_TYPE_BUFFER_VIEW
   * @member VK_OBJECT_TYPE_IMAGE_VIEW
   * @member VK_OBJECT_TYPE_SHADER_MODULE
   * @member VK_OBJECT_TYPE_PIPELINE_CACHE
   * @member VK_OBJECT_TYPE_PIPELINE_LAYOUT
   * @member VK_OBJECT_TYPE_RENDER_PASS
   * @member VK_OBJECT_TYPE_PIPELINE
   * @member VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT
   * @member VK_OBJECT_TYPE_SAMPLER
   * @member VK_OBJECT_TYPE_DESCRIPTOR_POOL
   * @member VK_OBJECT_TYPE_DESCRIPTOR_SET
   * @member VK_OBJECT_TYPE_FRAMEBUFFER
   * @member VK_OBJECT_TYPE_COMMAND_POOL
   * @member VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION
   * @member VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE
   * @member VK_OBJECT_TYPE_SURFACE_KHR
   * @member VK_OBJECT_TYPE_SWAPCHAIN_KHR
   * @member VK_OBJECT_TYPE_DISPLAY_KHR
   * @member VK_OBJECT_TYPE_DISPLAY_MODE_KHR
   * @member VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT
   * @member VK_OBJECT_TYPE_OBJECT_TABLE_NVX
   * @member VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NVX
   * @member VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT
   * @member VK_OBJECT_TYPE_VALIDATION_CACHE_EXT
   * @member VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV
   * @member VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL
   * @member VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR
   * @member VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR
   */
  enum VkObjectType {
    VK_OBJECT_TYPE_UNKNOWN,
    VK_OBJECT_TYPE_INSTANCE,
    VK_OBJECT_TYPE_PHYSICAL_DEVICE,
    VK_OBJECT_TYPE_DEVICE,
    VK_OBJECT_TYPE_QUEUE,
    VK_OBJECT_TYPE_SEMAPHORE,
    VK_OBJECT_TYPE_COMMAND_BUFFER,
    VK_OBJECT_TYPE_FENCE,
    VK_OBJECT_TYPE_DEVICE_MEMORY,
    VK_OBJECT_TYPE_BUFFER,
    VK_OBJECT_TYPE_IMAGE,
    VK_OBJECT_TYPE_EVENT,
    VK_OBJECT_TYPE_QUERY_POOL,
    VK_OBJECT_TYPE_BUFFER_VIEW,
    VK_OBJECT_TYPE_IMAGE_VIEW,
    VK_OBJECT_TYPE_SHADER_MODULE,
    VK_OBJECT_TYPE_PIPELINE_CACHE,
    VK_OBJECT_TYPE_PIPELINE_LAYOUT,
    VK_OBJECT_TYPE_RENDER_PASS,
    VK_OBJECT_TYPE_PIPELINE,
    VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT,
    VK_OBJECT_TYPE_SAMPLER,
    VK_OBJECT_TYPE_DESCRIPTOR_POOL,
    VK_OBJECT_TYPE_DESCRIPTOR_SET,
    VK_OBJECT_TYPE_FRAMEBUFFER,
    VK_OBJECT_TYPE_COMMAND_POOL,
    VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION,
    VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE,
    VK_OBJECT_TYPE_SURFACE_KHR,
    VK_OBJECT_TYPE_SWAPCHAIN_KHR,
    VK_OBJECT_TYPE_DISPLAY_KHR,
    VK_OBJECT_TYPE_DISPLAY_MODE_KHR,
    VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT,
    VK_OBJECT_TYPE_OBJECT_TABLE_NVX,
    VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NVX,
    VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT,
    VK_OBJECT_TYPE_VALIDATION_CACHE_EXT,
    VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV,
    VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL,
    VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR,
    VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR,
    
  }

  const VK_OBJECT_TYPE_UNKNOWN: VkObjectType;
  const VK_OBJECT_TYPE_INSTANCE: VkObjectType;
  const VK_OBJECT_TYPE_PHYSICAL_DEVICE: VkObjectType;
  const VK_OBJECT_TYPE_DEVICE: VkObjectType;
  const VK_OBJECT_TYPE_QUEUE: VkObjectType;
  const VK_OBJECT_TYPE_SEMAPHORE: VkObjectType;
  const VK_OBJECT_TYPE_COMMAND_BUFFER: VkObjectType;
  const VK_OBJECT_TYPE_FENCE: VkObjectType;
  const VK_OBJECT_TYPE_DEVICE_MEMORY: VkObjectType;
  const VK_OBJECT_TYPE_BUFFER: VkObjectType;
  const VK_OBJECT_TYPE_IMAGE: VkObjectType;
  const VK_OBJECT_TYPE_EVENT: VkObjectType;
  const VK_OBJECT_TYPE_QUERY_POOL: VkObjectType;
  const VK_OBJECT_TYPE_BUFFER_VIEW: VkObjectType;
  const VK_OBJECT_TYPE_IMAGE_VIEW: VkObjectType;
  const VK_OBJECT_TYPE_SHADER_MODULE: VkObjectType;
  const VK_OBJECT_TYPE_PIPELINE_CACHE: VkObjectType;
  const VK_OBJECT_TYPE_PIPELINE_LAYOUT: VkObjectType;
  const VK_OBJECT_TYPE_RENDER_PASS: VkObjectType;
  const VK_OBJECT_TYPE_PIPELINE: VkObjectType;
  const VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT: VkObjectType;
  const VK_OBJECT_TYPE_SAMPLER: VkObjectType;
  const VK_OBJECT_TYPE_DESCRIPTOR_POOL: VkObjectType;
  const VK_OBJECT_TYPE_DESCRIPTOR_SET: VkObjectType;
  const VK_OBJECT_TYPE_FRAMEBUFFER: VkObjectType;
  const VK_OBJECT_TYPE_COMMAND_POOL: VkObjectType;
  const VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION: VkObjectType;
  const VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE: VkObjectType;
  const VK_OBJECT_TYPE_SURFACE_KHR: VkObjectType;
  const VK_OBJECT_TYPE_SWAPCHAIN_KHR: VkObjectType;
  const VK_OBJECT_TYPE_DISPLAY_KHR: VkObjectType;
  const VK_OBJECT_TYPE_DISPLAY_MODE_KHR: VkObjectType;
  const VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT: VkObjectType;
  const VK_OBJECT_TYPE_OBJECT_TABLE_NVX: VkObjectType;
  const VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NVX: VkObjectType;
  const VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT: VkObjectType;
  const VK_OBJECT_TYPE_VALIDATION_CACHE_EXT: VkObjectType;
  const VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV: VkObjectType;
  const VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL: VkObjectType;
  const VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR: VkObjectType;
  const VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR: VkObjectType;
  

  
  /**
   * 
   * @member VK_PRESENT_MODE_IMMEDIATE_KHR
   * @member VK_PRESENT_MODE_MAILBOX_KHR
   * @member VK_PRESENT_MODE_FIFO_KHR
   * @member VK_PRESENT_MODE_FIFO_RELAXED_KHR
   * @member VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR
   * @member VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR
   */
  enum VkPresentModeKHR {
    VK_PRESENT_MODE_IMMEDIATE_KHR,
    VK_PRESENT_MODE_MAILBOX_KHR,
    VK_PRESENT_MODE_FIFO_KHR,
    VK_PRESENT_MODE_FIFO_RELAXED_KHR,
    VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR,
    VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR,
    
  }

  const VK_PRESENT_MODE_IMMEDIATE_KHR: VkPresentModeKHR;
  const VK_PRESENT_MODE_MAILBOX_KHR: VkPresentModeKHR;
  const VK_PRESENT_MODE_FIFO_KHR: VkPresentModeKHR;
  const VK_PRESENT_MODE_FIFO_RELAXED_KHR: VkPresentModeKHR;
  const VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR: VkPresentModeKHR;
  const VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR: VkPresentModeKHR;
  

  
  /**
   * 
   * @member VK_COLOR_SPACE_SRGB_NONLINEAR_KHR
   * @member VK_COLORSPACE_SRGB_NONLINEAR_KHR
   * @member VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT
   * @member VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT
   * @member VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT
   * @member VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT
   * @member VK_COLOR_SPACE_BT709_LINEAR_EXT
   * @member VK_COLOR_SPACE_BT709_NONLINEAR_EXT
   * @member VK_COLOR_SPACE_BT2020_LINEAR_EXT
   * @member VK_COLOR_SPACE_HDR10_ST2084_EXT
   * @member VK_COLOR_SPACE_DOLBYVISION_EXT
   * @member VK_COLOR_SPACE_HDR10_HLG_EXT
   * @member VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT
   * @member VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT
   * @member VK_COLOR_SPACE_PASS_THROUGH_EXT
   * @member VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT
   * @member VK_COLOR_SPACE_DCI_P3_LINEAR_EXT
   * @member VK_COLOR_SPACE_DISPLAY_NATIVE_AMD
   */
  enum VkColorSpaceKHR {
    VK_COLOR_SPACE_SRGB_NONLINEAR_KHR,
    VK_COLORSPACE_SRGB_NONLINEAR_KHR,
    VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT,
    VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT,
    VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT,
    VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT,
    VK_COLOR_SPACE_BT709_LINEAR_EXT,
    VK_COLOR_SPACE_BT709_NONLINEAR_EXT,
    VK_COLOR_SPACE_BT2020_LINEAR_EXT,
    VK_COLOR_SPACE_HDR10_ST2084_EXT,
    VK_COLOR_SPACE_DOLBYVISION_EXT,
    VK_COLOR_SPACE_HDR10_HLG_EXT,
    VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT,
    VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT,
    VK_COLOR_SPACE_PASS_THROUGH_EXT,
    VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT,
    VK_COLOR_SPACE_DCI_P3_LINEAR_EXT,
    VK_COLOR_SPACE_DISPLAY_NATIVE_AMD,
    
  }

  const VK_COLOR_SPACE_SRGB_NONLINEAR_KHR: VkColorSpaceKHR;
  const VK_COLORSPACE_SRGB_NONLINEAR_KHR: VkColorSpaceKHR;
  const VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT: VkColorSpaceKHR;
  const VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT: VkColorSpaceKHR;
  const VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT: VkColorSpaceKHR;
  const VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT: VkColorSpaceKHR;
  const VK_COLOR_SPACE_BT709_LINEAR_EXT: VkColorSpaceKHR;
  const VK_COLOR_SPACE_BT709_NONLINEAR_EXT: VkColorSpaceKHR;
  const VK_COLOR_SPACE_BT2020_LINEAR_EXT: VkColorSpaceKHR;
  const VK_COLOR_SPACE_HDR10_ST2084_EXT: VkColorSpaceKHR;
  const VK_COLOR_SPACE_DOLBYVISION_EXT: VkColorSpaceKHR;
  const VK_COLOR_SPACE_HDR10_HLG_EXT: VkColorSpaceKHR;
  const VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT: VkColorSpaceKHR;
  const VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT: VkColorSpaceKHR;
  const VK_COLOR_SPACE_PASS_THROUGH_EXT: VkColorSpaceKHR;
  const VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT: VkColorSpaceKHR;
  const VK_COLOR_SPACE_DCI_P3_LINEAR_EXT: VkColorSpaceKHR;
  const VK_COLOR_SPACE_DISPLAY_NATIVE_AMD: VkColorSpaceKHR;
  

  
  /**
   * 
   * @member VK_TIME_DOMAIN_DEVICE_EXT
   * @member VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT
   * @member VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT
   * @member VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT
   */
  enum VkTimeDomainEXT {
    VK_TIME_DOMAIN_DEVICE_EXT,
    VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT,
    VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT,
    VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT,
    
  }

  const VK_TIME_DOMAIN_DEVICE_EXT: VkTimeDomainEXT;
  const VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT: VkTimeDomainEXT;
  const VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT: VkTimeDomainEXT;
  const VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT: VkTimeDomainEXT;
  

  
  /**
   * 
   * @member VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT
   * @member VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT
   * @member VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT
   * @member VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT
   * @member VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT
   * @member VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT
   * @member VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT
   * @member VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT
   * @member VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT
   * @member VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT
   * @member VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT
   * @member VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT
   * @member VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT
   * @member VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT
   * @member VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT
   * @member VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT
   * @member VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT
   * @member VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT
   * @member VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT
   * @member VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT
   * @member VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT
   * @member VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT
   * @member VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT
   * @member VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT
   * @member VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT
   * @member VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT
   * @member VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT
   * @member VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT
   * @member VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT
   * @member VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT
   * @member VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT
   * @member VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT
   * @member VK_DEBUG_REPORT_OBJECT_TYPE_OBJECT_TABLE_NVX_EXT
   * @member VK_DEBUG_REPORT_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NVX_EXT
   * @member VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT
   * @member VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT
   * @member VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT
   * @member VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT
   * @member VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT
   * @member VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT
   * @member VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT
   */
  enum VkDebugReportObjectTypeEXT {
    VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_OBJECT_TABLE_NVX_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NVX_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT,
    
  }

  const VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT: VkDebugReportObjectTypeEXT;
  const VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT: VkDebugReportObjectTypeEXT;
  const VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT: VkDebugReportObjectTypeEXT;
  const VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT: VkDebugReportObjectTypeEXT;
  const VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT: VkDebugReportObjectTypeEXT;
  const VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT: VkDebugReportObjectTypeEXT;
  const VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT: VkDebugReportObjectTypeEXT;
  const VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT: VkDebugReportObjectTypeEXT;
  const VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT: VkDebugReportObjectTypeEXT;
  const VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT: VkDebugReportObjectTypeEXT;
  const VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT: VkDebugReportObjectTypeEXT;
  const VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT: VkDebugReportObjectTypeEXT;
  const VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT: VkDebugReportObjectTypeEXT;
  const VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT: VkDebugReportObjectTypeEXT;
  const VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT: VkDebugReportObjectTypeEXT;
  const VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT: VkDebugReportObjectTypeEXT;
  const VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT: VkDebugReportObjectTypeEXT;
  const VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT: VkDebugReportObjectTypeEXT;
  const VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT: VkDebugReportObjectTypeEXT;
  const VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT: VkDebugReportObjectTypeEXT;
  const VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT: VkDebugReportObjectTypeEXT;
  const VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT: VkDebugReportObjectTypeEXT;
  const VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT: VkDebugReportObjectTypeEXT;
  const VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT: VkDebugReportObjectTypeEXT;
  const VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT: VkDebugReportObjectTypeEXT;
  const VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT: VkDebugReportObjectTypeEXT;
  const VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT: VkDebugReportObjectTypeEXT;
  const VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT: VkDebugReportObjectTypeEXT;
  const VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT: VkDebugReportObjectTypeEXT;
  const VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT: VkDebugReportObjectTypeEXT;
  const VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT: VkDebugReportObjectTypeEXT;
  const VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT: VkDebugReportObjectTypeEXT;
  const VK_DEBUG_REPORT_OBJECT_TYPE_OBJECT_TABLE_NVX_EXT: VkDebugReportObjectTypeEXT;
  const VK_DEBUG_REPORT_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NVX_EXT: VkDebugReportObjectTypeEXT;
  const VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT: VkDebugReportObjectTypeEXT;
  const VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT: VkDebugReportObjectTypeEXT;
  const VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT: VkDebugReportObjectTypeEXT;
  const VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT: VkDebugReportObjectTypeEXT;
  const VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT: VkDebugReportObjectTypeEXT;
  const VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT: VkDebugReportObjectTypeEXT;
  const VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT: VkDebugReportObjectTypeEXT;
  

  
  /**
   * 
   * @member VK_RASTERIZATION_ORDER_STRICT_AMD
   * @member VK_RASTERIZATION_ORDER_RELAXED_AMD
   */
  enum VkRasterizationOrderAMD {
    VK_RASTERIZATION_ORDER_STRICT_AMD,
    VK_RASTERIZATION_ORDER_RELAXED_AMD,
    
  }

  const VK_RASTERIZATION_ORDER_STRICT_AMD: VkRasterizationOrderAMD;
  const VK_RASTERIZATION_ORDER_RELAXED_AMD: VkRasterizationOrderAMD;
  

  
  /**
   * 
   * @member VK_VALIDATION_CHECK_ALL_EXT
   * @member VK_VALIDATION_CHECK_SHADERS_EXT
   */
  enum VkValidationCheckEXT {
    VK_VALIDATION_CHECK_ALL_EXT,
    VK_VALIDATION_CHECK_SHADERS_EXT,
    
  }

  const VK_VALIDATION_CHECK_ALL_EXT: VkValidationCheckEXT;
  const VK_VALIDATION_CHECK_SHADERS_EXT: VkValidationCheckEXT;
  

  
  /**
   * 
   * @member VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT
   * @member VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT
   * @member VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT
   */
  enum VkValidationFeatureEnableEXT {
    VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT,
    VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT,
    VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT,
    
  }

  const VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT: VkValidationFeatureEnableEXT;
  const VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT: VkValidationFeatureEnableEXT;
  const VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT: VkValidationFeatureEnableEXT;
  

  
  /**
   * 
   * @member VK_VALIDATION_FEATURE_DISABLE_ALL_EXT
   * @member VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT
   * @member VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT
   * @member VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT
   * @member VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT
   * @member VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT
   * @member VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT
   */
  enum VkValidationFeatureDisableEXT {
    VK_VALIDATION_FEATURE_DISABLE_ALL_EXT,
    VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT,
    VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT,
    VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT,
    VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT,
    VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT,
    VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT,
    
  }

  const VK_VALIDATION_FEATURE_DISABLE_ALL_EXT: VkValidationFeatureDisableEXT;
  const VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT: VkValidationFeatureDisableEXT;
  const VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT: VkValidationFeatureDisableEXT;
  const VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT: VkValidationFeatureDisableEXT;
  const VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT: VkValidationFeatureDisableEXT;
  const VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT: VkValidationFeatureDisableEXT;
  const VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT: VkValidationFeatureDisableEXT;
  

  
  /**
   * 
   * @member VK_INDIRECT_COMMANDS_TOKEN_TYPE_PIPELINE_NVX
   * @member VK_INDIRECT_COMMANDS_TOKEN_TYPE_DESCRIPTOR_SET_NVX
   * @member VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NVX
   * @member VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NVX
   * @member VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NVX
   * @member VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NVX
   * @member VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NVX
   * @member VK_INDIRECT_COMMANDS_TOKEN_TYPE_DISPATCH_NVX
   */
  enum VkIndirectCommandsTokenTypeNVX {
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_PIPELINE_NVX,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DESCRIPTOR_SET_NVX,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NVX,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NVX,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NVX,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NVX,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NVX,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DISPATCH_NVX,
    
  }

  const VK_INDIRECT_COMMANDS_TOKEN_TYPE_PIPELINE_NVX: VkIndirectCommandsTokenTypeNVX;
  const VK_INDIRECT_COMMANDS_TOKEN_TYPE_DESCRIPTOR_SET_NVX: VkIndirectCommandsTokenTypeNVX;
  const VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NVX: VkIndirectCommandsTokenTypeNVX;
  const VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NVX: VkIndirectCommandsTokenTypeNVX;
  const VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NVX: VkIndirectCommandsTokenTypeNVX;
  const VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NVX: VkIndirectCommandsTokenTypeNVX;
  const VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NVX: VkIndirectCommandsTokenTypeNVX;
  const VK_INDIRECT_COMMANDS_TOKEN_TYPE_DISPATCH_NVX: VkIndirectCommandsTokenTypeNVX;
  

  
  /**
   * 
   * @member VK_OBJECT_ENTRY_TYPE_DESCRIPTOR_SET_NVX
   * @member VK_OBJECT_ENTRY_TYPE_PIPELINE_NVX
   * @member VK_OBJECT_ENTRY_TYPE_INDEX_BUFFER_NVX
   * @member VK_OBJECT_ENTRY_TYPE_VERTEX_BUFFER_NVX
   * @member VK_OBJECT_ENTRY_TYPE_PUSH_CONSTANT_NVX
   */
  enum VkObjectEntryTypeNVX {
    VK_OBJECT_ENTRY_TYPE_DESCRIPTOR_SET_NVX,
    VK_OBJECT_ENTRY_TYPE_PIPELINE_NVX,
    VK_OBJECT_ENTRY_TYPE_INDEX_BUFFER_NVX,
    VK_OBJECT_ENTRY_TYPE_VERTEX_BUFFER_NVX,
    VK_OBJECT_ENTRY_TYPE_PUSH_CONSTANT_NVX,
    
  }

  const VK_OBJECT_ENTRY_TYPE_DESCRIPTOR_SET_NVX: VkObjectEntryTypeNVX;
  const VK_OBJECT_ENTRY_TYPE_PIPELINE_NVX: VkObjectEntryTypeNVX;
  const VK_OBJECT_ENTRY_TYPE_INDEX_BUFFER_NVX: VkObjectEntryTypeNVX;
  const VK_OBJECT_ENTRY_TYPE_VERTEX_BUFFER_NVX: VkObjectEntryTypeNVX;
  const VK_OBJECT_ENTRY_TYPE_PUSH_CONSTANT_NVX: VkObjectEntryTypeNVX;
  

  
  /**
   * 
   * @member VK_DISPLAY_POWER_STATE_OFF_EXT
   * @member VK_DISPLAY_POWER_STATE_SUSPEND_EXT
   * @member VK_DISPLAY_POWER_STATE_ON_EXT
   */
  enum VkDisplayPowerStateEXT {
    VK_DISPLAY_POWER_STATE_OFF_EXT,
    VK_DISPLAY_POWER_STATE_SUSPEND_EXT,
    VK_DISPLAY_POWER_STATE_ON_EXT,
    
  }

  const VK_DISPLAY_POWER_STATE_OFF_EXT: VkDisplayPowerStateEXT;
  const VK_DISPLAY_POWER_STATE_SUSPEND_EXT: VkDisplayPowerStateEXT;
  const VK_DISPLAY_POWER_STATE_ON_EXT: VkDisplayPowerStateEXT;
  

  
  /**
   * 
   * @member VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT
   */
  enum VkDeviceEventTypeEXT {
    VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT,
    
  }

  const VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT: VkDeviceEventTypeEXT;
  

  
  /**
   * 
   * @member VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT
   */
  enum VkDisplayEventTypeEXT {
    VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT,
    
  }

  const VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT: VkDisplayEventTypeEXT;
  

  
  /**
   * 
   * @member VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV
   * @member VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV
   * @member VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV
   * @member VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV
   * @member VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV
   * @member VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV
   * @member VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV
   * @member VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV
   */
  enum VkViewportCoordinateSwizzleNV {
    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV,
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV,
    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV,
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV,
    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV,
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV,
    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV,
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV,
    
  }

  const VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV: VkViewportCoordinateSwizzleNV;
  const VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV: VkViewportCoordinateSwizzleNV;
  const VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV: VkViewportCoordinateSwizzleNV;
  const VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV: VkViewportCoordinateSwizzleNV;
  const VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV: VkViewportCoordinateSwizzleNV;
  const VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV: VkViewportCoordinateSwizzleNV;
  const VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV: VkViewportCoordinateSwizzleNV;
  const VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV: VkViewportCoordinateSwizzleNV;
  

  
  /**
   * 
   * @member VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT
   * @member VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT
   */
  enum VkDiscardRectangleModeEXT {
    VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT,
    VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT,
    
  }

  const VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT: VkDiscardRectangleModeEXT;
  const VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT: VkDiscardRectangleModeEXT;
  

  
  /**
   * 
   * @member VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES
   * @member VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY
   * @member VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR
   * @member VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR
   */
  enum VkPointClippingBehavior {
    VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES,
    VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY,
    VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR,
    VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR,
    
  }

  const VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES: VkPointClippingBehavior;
  const VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY: VkPointClippingBehavior;
  const VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR: VkPointClippingBehavior;
  const VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR: VkPointClippingBehavior;
  

  
  /**
   * 
   * @member VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT
   * @member VK_SAMPLER_REDUCTION_MODE_MIN_EXT
   * @member VK_SAMPLER_REDUCTION_MODE_MAX_EXT
   */
  enum VkSamplerReductionModeEXT {
    VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT,
    VK_SAMPLER_REDUCTION_MODE_MIN_EXT,
    VK_SAMPLER_REDUCTION_MODE_MAX_EXT,
    
  }

  const VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT: VkSamplerReductionModeEXT;
  const VK_SAMPLER_REDUCTION_MODE_MIN_EXT: VkSamplerReductionModeEXT;
  const VK_SAMPLER_REDUCTION_MODE_MAX_EXT: VkSamplerReductionModeEXT;
  

  
  /**
   * 
   * @member VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT
   * @member VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT
   * @member VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR
   * @member VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR
   */
  enum VkTessellationDomainOrigin {
    VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT,
    VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT,
    VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR,
    VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR,
    
  }

  const VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT: VkTessellationDomainOrigin;
  const VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT: VkTessellationDomainOrigin;
  const VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR: VkTessellationDomainOrigin;
  const VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR: VkTessellationDomainOrigin;
  

  
  /**
   * 
   * @member VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY
   * @member VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY
   * @member VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709
   * @member VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601
   * @member VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020
   * @member VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR
   * @member VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR
   * @member VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR
   * @member VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR
   * @member VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR
   */
  enum VkSamplerYcbcrModelConversion {
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR,
    
  }

  const VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY: VkSamplerYcbcrModelConversion;
  const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY: VkSamplerYcbcrModelConversion;
  const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709: VkSamplerYcbcrModelConversion;
  const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601: VkSamplerYcbcrModelConversion;
  const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020: VkSamplerYcbcrModelConversion;
  const VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR: VkSamplerYcbcrModelConversion;
  const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR: VkSamplerYcbcrModelConversion;
  const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR: VkSamplerYcbcrModelConversion;
  const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR: VkSamplerYcbcrModelConversion;
  const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR: VkSamplerYcbcrModelConversion;
  

  
  /**
   * 
   * @member VK_SAMPLER_YCBCR_RANGE_ITU_FULL
   * @member VK_SAMPLER_YCBCR_RANGE_ITU_NARROW
   * @member VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR
   * @member VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR
   */
  enum VkSamplerYcbcrRange {
    VK_SAMPLER_YCBCR_RANGE_ITU_FULL,
    VK_SAMPLER_YCBCR_RANGE_ITU_NARROW,
    VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR,
    VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR,
    
  }

  const VK_SAMPLER_YCBCR_RANGE_ITU_FULL: VkSamplerYcbcrRange;
  const VK_SAMPLER_YCBCR_RANGE_ITU_NARROW: VkSamplerYcbcrRange;
  const VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR: VkSamplerYcbcrRange;
  const VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR: VkSamplerYcbcrRange;
  

  
  /**
   * 
   * @member VK_CHROMA_LOCATION_COSITED_EVEN
   * @member VK_CHROMA_LOCATION_MIDPOINT
   * @member VK_CHROMA_LOCATION_COSITED_EVEN_KHR
   * @member VK_CHROMA_LOCATION_MIDPOINT_KHR
   */
  enum VkChromaLocation {
    VK_CHROMA_LOCATION_COSITED_EVEN,
    VK_CHROMA_LOCATION_MIDPOINT,
    VK_CHROMA_LOCATION_COSITED_EVEN_KHR,
    VK_CHROMA_LOCATION_MIDPOINT_KHR,
    
  }

  const VK_CHROMA_LOCATION_COSITED_EVEN: VkChromaLocation;
  const VK_CHROMA_LOCATION_MIDPOINT: VkChromaLocation;
  const VK_CHROMA_LOCATION_COSITED_EVEN_KHR: VkChromaLocation;
  const VK_CHROMA_LOCATION_MIDPOINT_KHR: VkChromaLocation;
  

  
  /**
   * 
   * @member VK_BLEND_OVERLAP_UNCORRELATED_EXT
   * @member VK_BLEND_OVERLAP_DISJOINT_EXT
   * @member VK_BLEND_OVERLAP_CONJOINT_EXT
   */
  enum VkBlendOverlapEXT {
    VK_BLEND_OVERLAP_UNCORRELATED_EXT,
    VK_BLEND_OVERLAP_DISJOINT_EXT,
    VK_BLEND_OVERLAP_CONJOINT_EXT,
    
  }

  const VK_BLEND_OVERLAP_UNCORRELATED_EXT: VkBlendOverlapEXT;
  const VK_BLEND_OVERLAP_DISJOINT_EXT: VkBlendOverlapEXT;
  const VK_BLEND_OVERLAP_CONJOINT_EXT: VkBlendOverlapEXT;
  

  
  /**
   * 
   * @member VK_COVERAGE_MODULATION_MODE_NONE_NV
   * @member VK_COVERAGE_MODULATION_MODE_RGB_NV
   * @member VK_COVERAGE_MODULATION_MODE_ALPHA_NV
   * @member VK_COVERAGE_MODULATION_MODE_RGBA_NV
   */
  enum VkCoverageModulationModeNV {
    VK_COVERAGE_MODULATION_MODE_NONE_NV,
    VK_COVERAGE_MODULATION_MODE_RGB_NV,
    VK_COVERAGE_MODULATION_MODE_ALPHA_NV,
    VK_COVERAGE_MODULATION_MODE_RGBA_NV,
    
  }

  const VK_COVERAGE_MODULATION_MODE_NONE_NV: VkCoverageModulationModeNV;
  const VK_COVERAGE_MODULATION_MODE_RGB_NV: VkCoverageModulationModeNV;
  const VK_COVERAGE_MODULATION_MODE_ALPHA_NV: VkCoverageModulationModeNV;
  const VK_COVERAGE_MODULATION_MODE_RGBA_NV: VkCoverageModulationModeNV;
  

  
  /**
   * 
   * @member VK_COVERAGE_REDUCTION_MODE_MERGE_NV
   * @member VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV
   */
  enum VkCoverageReductionModeNV {
    VK_COVERAGE_REDUCTION_MODE_MERGE_NV,
    VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV,
    
  }

  const VK_COVERAGE_REDUCTION_MODE_MERGE_NV: VkCoverageReductionModeNV;
  const VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV: VkCoverageReductionModeNV;
  

  
  /**
   * 
   * @member VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT
   */
  enum VkValidationCacheHeaderVersionEXT {
    VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT,
    
  }

  const VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT: VkValidationCacheHeaderVersionEXT;
  

  
  /**
   * 
   * @member VK_SHADER_INFO_TYPE_STATISTICS_AMD
   * @member VK_SHADER_INFO_TYPE_BINARY_AMD
   * @member VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD
   */
  enum VkShaderInfoTypeAMD {
    VK_SHADER_INFO_TYPE_STATISTICS_AMD,
    VK_SHADER_INFO_TYPE_BINARY_AMD,
    VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD,
    
  }

  const VK_SHADER_INFO_TYPE_STATISTICS_AMD: VkShaderInfoTypeAMD;
  const VK_SHADER_INFO_TYPE_BINARY_AMD: VkShaderInfoTypeAMD;
  const VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD: VkShaderInfoTypeAMD;
  

  
  /**
   * 
   * @member VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT
   * @member VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT
   * @member VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT
   * @member VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT
   */
  enum VkQueueGlobalPriorityEXT {
    VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT,
    VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT,
    VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT,
    VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT,
    
  }

  const VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT: VkQueueGlobalPriorityEXT;
  const VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT: VkQueueGlobalPriorityEXT;
  const VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT: VkQueueGlobalPriorityEXT;
  const VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT: VkQueueGlobalPriorityEXT;
  

  
  /**
   * 
   * @member VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT
   * @member VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT
   * @member VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT
   */
  enum VkConservativeRasterizationModeEXT {
    VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT,
    VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT,
    VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT,
    
  }

  const VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT: VkConservativeRasterizationModeEXT;
  const VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT: VkConservativeRasterizationModeEXT;
  const VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT: VkConservativeRasterizationModeEXT;
  

  
  /**
   * 
   * @member VK_VENDOR_ID_VIV
   * @member VK_VENDOR_ID_VSI
   * @member VK_VENDOR_ID_KAZAN
   */
  enum VkVendorId {
    VK_VENDOR_ID_VIV,
    VK_VENDOR_ID_VSI,
    VK_VENDOR_ID_KAZAN,
    
  }

  const VK_VENDOR_ID_VIV: VkVendorId;
  const VK_VENDOR_ID_VSI: VkVendorId;
  const VK_VENDOR_ID_KAZAN: VkVendorId;
  

  
  /**
   * 
   * @member VK_DRIVER_ID_AMD_PROPRIETARY_KHR
   * @member VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR
   * @member VK_DRIVER_ID_MESA_RADV_KHR
   * @member VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR
   * @member VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR
   * @member VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR
   * @member VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR
   * @member VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR
   * @member VK_DRIVER_ID_ARM_PROPRIETARY_KHR
   * @member VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR
   * @member VK_DRIVER_ID_GGP_PROPRIETARY_KHR
   * @member VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR
   */
  enum VkDriverIdKHR {
    VK_DRIVER_ID_AMD_PROPRIETARY_KHR,
    VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR,
    VK_DRIVER_ID_MESA_RADV_KHR,
    VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR,
    VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR,
    VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR,
    VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR,
    VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR,
    VK_DRIVER_ID_ARM_PROPRIETARY_KHR,
    VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR,
    VK_DRIVER_ID_GGP_PROPRIETARY_KHR,
    VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR,
    
  }

  const VK_DRIVER_ID_AMD_PROPRIETARY_KHR: VkDriverIdKHR;
  const VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR: VkDriverIdKHR;
  const VK_DRIVER_ID_MESA_RADV_KHR: VkDriverIdKHR;
  const VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR: VkDriverIdKHR;
  const VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR: VkDriverIdKHR;
  const VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR: VkDriverIdKHR;
  const VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR: VkDriverIdKHR;
  const VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR: VkDriverIdKHR;
  const VK_DRIVER_ID_ARM_PROPRIETARY_KHR: VkDriverIdKHR;
  const VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR: VkDriverIdKHR;
  const VK_DRIVER_ID_GGP_PROPRIETARY_KHR: VkDriverIdKHR;
  const VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR: VkDriverIdKHR;
  

  
  /**
   * 
   * @member VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV
   * @member VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV
   * @member VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV
   * @member VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV
   * @member VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV
   * @member VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV
   * @member VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV
   * @member VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV
   * @member VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV
   * @member VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV
   * @member VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV
   * @member VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV
   */
  enum VkShadingRatePaletteEntryNV {
    VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV,
    VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV,
    VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV,
    VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV,
    VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV,
    
  }

  const VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV: VkShadingRatePaletteEntryNV;
  const VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV: VkShadingRatePaletteEntryNV;
  const VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV: VkShadingRatePaletteEntryNV;
  const VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV: VkShadingRatePaletteEntryNV;
  const VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV: VkShadingRatePaletteEntryNV;
  const VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV: VkShadingRatePaletteEntryNV;
  const VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV: VkShadingRatePaletteEntryNV;
  const VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV: VkShadingRatePaletteEntryNV;
  const VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV: VkShadingRatePaletteEntryNV;
  const VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV: VkShadingRatePaletteEntryNV;
  const VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV: VkShadingRatePaletteEntryNV;
  const VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV: VkShadingRatePaletteEntryNV;
  

  
  /**
   * 
   * @member VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV
   * @member VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV
   * @member VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV
   * @member VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV
   */
  enum VkCoarseSampleOrderTypeNV {
    VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV,
    VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV,
    VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV,
    VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV,
    
  }

  const VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV: VkCoarseSampleOrderTypeNV;
  const VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV: VkCoarseSampleOrderTypeNV;
  const VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV: VkCoarseSampleOrderTypeNV;
  const VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV: VkCoarseSampleOrderTypeNV;
  

  
  /**
   * 
   * @member VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV
   * @member VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV
   */
  enum VkCopyAccelerationStructureModeNV {
    VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV,
    VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV,
    
  }

  const VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV: VkCopyAccelerationStructureModeNV;
  const VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV: VkCopyAccelerationStructureModeNV;
  

  
  /**
   * 
   * @member VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV
   * @member VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV
   */
  enum VkAccelerationStructureTypeNV {
    VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV,
    VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV,
    
  }

  const VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV: VkAccelerationStructureTypeNV;
  const VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV: VkAccelerationStructureTypeNV;
  

  
  /**
   * 
   * @member VK_GEOMETRY_TYPE_TRIANGLES_NV
   * @member VK_GEOMETRY_TYPE_AABBS_NV
   */
  enum VkGeometryTypeNV {
    VK_GEOMETRY_TYPE_TRIANGLES_NV,
    VK_GEOMETRY_TYPE_AABBS_NV,
    
  }

  const VK_GEOMETRY_TYPE_TRIANGLES_NV: VkGeometryTypeNV;
  const VK_GEOMETRY_TYPE_AABBS_NV: VkGeometryTypeNV;
  

  
  /**
   * 
   * @member VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV
   * @member VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV
   * @member VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV
   */
  enum VkAccelerationStructureMemoryRequirementsTypeNV {
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV,
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV,
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV,
    
  }

  const VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV: VkAccelerationStructureMemoryRequirementsTypeNV;
  const VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV: VkAccelerationStructureMemoryRequirementsTypeNV;
  const VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV: VkAccelerationStructureMemoryRequirementsTypeNV;
  

  
  /**
   * 
   * @member VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV
   * @member VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV
   * @member VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV
   */
  enum VkRayTracingShaderGroupTypeNV {
    VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV,
    VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV,
    VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV,
    
  }

  const VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV: VkRayTracingShaderGroupTypeNV;
  const VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV: VkRayTracingShaderGroupTypeNV;
  const VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV: VkRayTracingShaderGroupTypeNV;
  

  
  /**
   * 
   * @member VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD
   * @member VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD
   * @member VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD
   */
  enum VkMemoryOverallocationBehaviorAMD {
    VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD,
    VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD,
    VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD,
    
  }

  const VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD: VkMemoryOverallocationBehaviorAMD;
  const VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD: VkMemoryOverallocationBehaviorAMD;
  const VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD: VkMemoryOverallocationBehaviorAMD;
  

  
  /**
   * 
   * @member VK_SCOPE_DEVICE_NV
   * @member VK_SCOPE_WORKGROUP_NV
   * @member VK_SCOPE_SUBGROUP_NV
   * @member VK_SCOPE_QUEUE_FAMILY_NV
   */
  enum VkScopeNV {
    VK_SCOPE_DEVICE_NV,
    VK_SCOPE_WORKGROUP_NV,
    VK_SCOPE_SUBGROUP_NV,
    VK_SCOPE_QUEUE_FAMILY_NV,
    
  }

  const VK_SCOPE_DEVICE_NV: VkScopeNV;
  const VK_SCOPE_WORKGROUP_NV: VkScopeNV;
  const VK_SCOPE_SUBGROUP_NV: VkScopeNV;
  const VK_SCOPE_QUEUE_FAMILY_NV: VkScopeNV;
  

  
  /**
   * 
   * @member VK_COMPONENT_TYPE_FLOAT16_NV
   * @member VK_COMPONENT_TYPE_FLOAT32_NV
   * @member VK_COMPONENT_TYPE_FLOAT64_NV
   * @member VK_COMPONENT_TYPE_SINT8_NV
   * @member VK_COMPONENT_TYPE_SINT16_NV
   * @member VK_COMPONENT_TYPE_SINT32_NV
   * @member VK_COMPONENT_TYPE_SINT64_NV
   * @member VK_COMPONENT_TYPE_UINT8_NV
   * @member VK_COMPONENT_TYPE_UINT16_NV
   * @member VK_COMPONENT_TYPE_UINT32_NV
   * @member VK_COMPONENT_TYPE_UINT64_NV
   */
  enum VkComponentTypeNV {
    VK_COMPONENT_TYPE_FLOAT16_NV,
    VK_COMPONENT_TYPE_FLOAT32_NV,
    VK_COMPONENT_TYPE_FLOAT64_NV,
    VK_COMPONENT_TYPE_SINT8_NV,
    VK_COMPONENT_TYPE_SINT16_NV,
    VK_COMPONENT_TYPE_SINT32_NV,
    VK_COMPONENT_TYPE_SINT64_NV,
    VK_COMPONENT_TYPE_UINT8_NV,
    VK_COMPONENT_TYPE_UINT16_NV,
    VK_COMPONENT_TYPE_UINT32_NV,
    VK_COMPONENT_TYPE_UINT64_NV,
    
  }

  const VK_COMPONENT_TYPE_FLOAT16_NV: VkComponentTypeNV;
  const VK_COMPONENT_TYPE_FLOAT32_NV: VkComponentTypeNV;
  const VK_COMPONENT_TYPE_FLOAT64_NV: VkComponentTypeNV;
  const VK_COMPONENT_TYPE_SINT8_NV: VkComponentTypeNV;
  const VK_COMPONENT_TYPE_SINT16_NV: VkComponentTypeNV;
  const VK_COMPONENT_TYPE_SINT32_NV: VkComponentTypeNV;
  const VK_COMPONENT_TYPE_SINT64_NV: VkComponentTypeNV;
  const VK_COMPONENT_TYPE_UINT8_NV: VkComponentTypeNV;
  const VK_COMPONENT_TYPE_UINT16_NV: VkComponentTypeNV;
  const VK_COMPONENT_TYPE_UINT32_NV: VkComponentTypeNV;
  const VK_COMPONENT_TYPE_UINT64_NV: VkComponentTypeNV;
  

  
  /**
   * 
   * @member VK_FULL_SCREEN_EXCLUSIVE_DEFAULT_EXT
   * @member VK_FULL_SCREEN_EXCLUSIVE_ALLOWED_EXT
   * @member VK_FULL_SCREEN_EXCLUSIVE_DISALLOWED_EXT
   * @member VK_FULL_SCREEN_EXCLUSIVE_APPLICATION_CONTROLLED_EXT
   */
  enum VkFullScreenExclusiveEXT {
    VK_FULL_SCREEN_EXCLUSIVE_DEFAULT_EXT,
    VK_FULL_SCREEN_EXCLUSIVE_ALLOWED_EXT,
    VK_FULL_SCREEN_EXCLUSIVE_DISALLOWED_EXT,
    VK_FULL_SCREEN_EXCLUSIVE_APPLICATION_CONTROLLED_EXT,
    
  }

  const VK_FULL_SCREEN_EXCLUSIVE_DEFAULT_EXT: VkFullScreenExclusiveEXT;
  const VK_FULL_SCREEN_EXCLUSIVE_ALLOWED_EXT: VkFullScreenExclusiveEXT;
  const VK_FULL_SCREEN_EXCLUSIVE_DISALLOWED_EXT: VkFullScreenExclusiveEXT;
  const VK_FULL_SCREEN_EXCLUSIVE_APPLICATION_CONTROLLED_EXT: VkFullScreenExclusiveEXT;
  

  
  /**
   * 
   * @member VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL
   */
  enum VkPerformanceConfigurationTypeINTEL {
    VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL,
    
  }

  const VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL: VkPerformanceConfigurationTypeINTEL;
  

  
  /**
   * 
   * @member VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL
   */
  enum VkQueryPoolSamplingModeINTEL {
    VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL,
    
  }

  const VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL: VkQueryPoolSamplingModeINTEL;
  

  
  /**
   * 
   * @member VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL
   * @member VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL
   */
  enum VkPerformanceOverrideTypeINTEL {
    VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL,
    VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL,
    
  }

  const VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL: VkPerformanceOverrideTypeINTEL;
  const VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL: VkPerformanceOverrideTypeINTEL;
  

  
  /**
   * 
   * @member VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL
   * @member VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL
   */
  enum VkPerformanceParameterTypeINTEL {
    VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL,
    VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL,
    
  }

  const VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL: VkPerformanceParameterTypeINTEL;
  const VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL: VkPerformanceParameterTypeINTEL;
  

  
  /**
   * 
   * @member VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL
   * @member VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL
   * @member VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL
   * @member VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL
   * @member VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL
   */
  enum VkPerformanceValueTypeINTEL {
    VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL,
    VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL,
    VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL,
    VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL,
    VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL,
    
  }

  const VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL: VkPerformanceValueTypeINTEL;
  const VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL: VkPerformanceValueTypeINTEL;
  const VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL: VkPerformanceValueTypeINTEL;
  const VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL: VkPerformanceValueTypeINTEL;
  const VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL: VkPerformanceValueTypeINTEL;
  

  
  /**
   * 
   * @member VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR
   * @member VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR
   * @member VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR
   * @member VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR
   */
  enum VkPipelineExecutableStatisticFormatKHR {
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR,
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR,
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR,
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR,
    
  }

  const VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR: VkPipelineExecutableStatisticFormatKHR;
  const VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR: VkPipelineExecutableStatisticFormatKHR;
  const VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR: VkPipelineExecutableStatisticFormatKHR;
  const VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR: VkPipelineExecutableStatisticFormatKHR;
  

  
  /**
   * 
   * @member VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR
   * @member VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR
   * @member VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR
   */
  enum VkShaderFloatControlsIndependenceKHR {
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR,
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR,
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR,
    
  }

  const VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR: VkShaderFloatControlsIndependenceKHR;
  const VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR: VkShaderFloatControlsIndependenceKHR;
  const VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR: VkShaderFloatControlsIndependenceKHR;
  

  
  /**
   * 
   * @member VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT
   * @member VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT
   * @member VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT
   * @member VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT
   */
  enum VkLineRasterizationModeEXT {
    VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT,
    VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT,
    VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT,
    VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT,
    
  }

  const VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT: VkLineRasterizationModeEXT;
  const VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT: VkLineRasterizationModeEXT;
  const VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT: VkLineRasterizationModeEXT;
  const VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT: VkLineRasterizationModeEXT;
  

  
  /**
   * 
   * @member VK_CULL_MODE_NONE
   * @member VK_CULL_MODE_FRONT_BIT
   * @member VK_CULL_MODE_BACK_BIT
   * @member VK_CULL_MODE_FRONT_AND_BACK
   */
  enum VkCullModeFlagBits {
    VK_CULL_MODE_NONE,
    VK_CULL_MODE_FRONT_BIT,
    VK_CULL_MODE_BACK_BIT,
    VK_CULL_MODE_FRONT_AND_BACK,
    
  }

  const VK_CULL_MODE_NONE: VkCullModeFlagBits;
  const VK_CULL_MODE_FRONT_BIT: VkCullModeFlagBits;
  const VK_CULL_MODE_BACK_BIT: VkCullModeFlagBits;
  const VK_CULL_MODE_FRONT_AND_BACK: VkCullModeFlagBits;
  

  
  /**
   * 
   * @member VK_QUEUE_GRAPHICS_BIT
   * @member VK_QUEUE_COMPUTE_BIT
   * @member VK_QUEUE_TRANSFER_BIT
   * @member VK_QUEUE_SPARSE_BINDING_BIT
   * @member VK_QUEUE_PROTECTED_BIT
   * @member VK_QUEUE_RESERVED_6_BIT_KHR
   * @member VK_QUEUE_RESERVED_5_BIT_KHR
   */
  enum VkQueueFlagBits {
    VK_QUEUE_GRAPHICS_BIT,
    VK_QUEUE_COMPUTE_BIT,
    VK_QUEUE_TRANSFER_BIT,
    VK_QUEUE_SPARSE_BINDING_BIT,
    VK_QUEUE_PROTECTED_BIT,
    VK_QUEUE_RESERVED_6_BIT_KHR,
    VK_QUEUE_RESERVED_5_BIT_KHR,
    
  }

  const VK_QUEUE_GRAPHICS_BIT: VkQueueFlagBits;
  const VK_QUEUE_COMPUTE_BIT: VkQueueFlagBits;
  const VK_QUEUE_TRANSFER_BIT: VkQueueFlagBits;
  const VK_QUEUE_SPARSE_BINDING_BIT: VkQueueFlagBits;
  const VK_QUEUE_PROTECTED_BIT: VkQueueFlagBits;
  const VK_QUEUE_RESERVED_6_BIT_KHR: VkQueueFlagBits;
  const VK_QUEUE_RESERVED_5_BIT_KHR: VkQueueFlagBits;
  

  
  /**
   * 
   * @member VK_RENDER_PASS_CREATE_RESERVED_0_BIT_KHR
   * @member VK_RENDER_PASS_RESERVED_BIT_1_QCOM
   */
  enum VkRenderPassCreateFlagBits {
    VK_RENDER_PASS_CREATE_RESERVED_0_BIT_KHR,
    VK_RENDER_PASS_RESERVED_BIT_1_QCOM,
    
  }

  const VK_RENDER_PASS_CREATE_RESERVED_0_BIT_KHR: VkRenderPassCreateFlagBits;
  const VK_RENDER_PASS_RESERVED_BIT_1_QCOM: VkRenderPassCreateFlagBits;
  

  
  /**
   * 
   * @member VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT
   */
  enum VkDeviceQueueCreateFlagBits {
    VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT,
    
  }

  const VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT: VkDeviceQueueCreateFlagBits;
  

  
  /**
   * 
   * @member VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT
   * @member VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT
   * @member VK_MEMORY_PROPERTY_HOST_COHERENT_BIT
   * @member VK_MEMORY_PROPERTY_HOST_CACHED_BIT
   * @member VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT
   * @member VK_MEMORY_PROPERTY_PROTECTED_BIT
   * @member VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD
   * @member VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD
   */
  enum VkMemoryPropertyFlagBits {
    VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT,
    VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT,
    VK_MEMORY_PROPERTY_HOST_COHERENT_BIT,
    VK_MEMORY_PROPERTY_HOST_CACHED_BIT,
    VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT,
    VK_MEMORY_PROPERTY_PROTECTED_BIT,
    VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD,
    VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD,
    
  }

  const VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT: VkMemoryPropertyFlagBits;
  const VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT: VkMemoryPropertyFlagBits;
  const VK_MEMORY_PROPERTY_HOST_COHERENT_BIT: VkMemoryPropertyFlagBits;
  const VK_MEMORY_PROPERTY_HOST_CACHED_BIT: VkMemoryPropertyFlagBits;
  const VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT: VkMemoryPropertyFlagBits;
  const VK_MEMORY_PROPERTY_PROTECTED_BIT: VkMemoryPropertyFlagBits;
  const VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD: VkMemoryPropertyFlagBits;
  const VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD: VkMemoryPropertyFlagBits;
  

  
  /**
   * 
   * @member VK_MEMORY_HEAP_DEVICE_LOCAL_BIT
   * @member VK_MEMORY_HEAP_MULTI_INSTANCE_BIT
   * @member VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR
   */
  enum VkMemoryHeapFlagBits {
    VK_MEMORY_HEAP_DEVICE_LOCAL_BIT,
    VK_MEMORY_HEAP_MULTI_INSTANCE_BIT,
    VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR,
    
  }

  const VK_MEMORY_HEAP_DEVICE_LOCAL_BIT: VkMemoryHeapFlagBits;
  const VK_MEMORY_HEAP_MULTI_INSTANCE_BIT: VkMemoryHeapFlagBits;
  const VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR: VkMemoryHeapFlagBits;
  

  
  /**
   * 
   * @member VK_ACCESS_INDIRECT_COMMAND_READ_BIT
   * @member VK_ACCESS_INDEX_READ_BIT
   * @member VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT
   * @member VK_ACCESS_UNIFORM_READ_BIT
   * @member VK_ACCESS_INPUT_ATTACHMENT_READ_BIT
   * @member VK_ACCESS_SHADER_READ_BIT
   * @member VK_ACCESS_SHADER_WRITE_BIT
   * @member VK_ACCESS_COLOR_ATTACHMENT_READ_BIT
   * @member VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT
   * @member VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT
   * @member VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT
   * @member VK_ACCESS_TRANSFER_READ_BIT
   * @member VK_ACCESS_TRANSFER_WRITE_BIT
   * @member VK_ACCESS_HOST_READ_BIT
   * @member VK_ACCESS_HOST_WRITE_BIT
   * @member VK_ACCESS_MEMORY_READ_BIT
   * @member VK_ACCESS_MEMORY_WRITE_BIT
   * @member VK_ACCESS_RESERVED_30_BIT_KHR
   * @member VK_ACCESS_RESERVED_31_BIT_KHR
   * @member VK_ACCESS_RESERVED_28_BIT_KHR
   * @member VK_ACCESS_RESERVED_29_BIT_KHR
   * @member VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT
   * @member VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT
   * @member VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT
   * @member VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT
   * @member VK_ACCESS_COMMAND_PROCESS_READ_BIT_NVX
   * @member VK_ACCESS_COMMAND_PROCESS_WRITE_BIT_NVX
   * @member VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT
   * @member VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV
   * @member VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV
   * @member VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV
   * @member VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT
   */
  enum VkAccessFlagBits {
    VK_ACCESS_INDIRECT_COMMAND_READ_BIT,
    VK_ACCESS_INDEX_READ_BIT,
    VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT,
    VK_ACCESS_UNIFORM_READ_BIT,
    VK_ACCESS_INPUT_ATTACHMENT_READ_BIT,
    VK_ACCESS_SHADER_READ_BIT,
    VK_ACCESS_SHADER_WRITE_BIT,
    VK_ACCESS_COLOR_ATTACHMENT_READ_BIT,
    VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT,
    VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT,
    VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT,
    VK_ACCESS_TRANSFER_READ_BIT,
    VK_ACCESS_TRANSFER_WRITE_BIT,
    VK_ACCESS_HOST_READ_BIT,
    VK_ACCESS_HOST_WRITE_BIT,
    VK_ACCESS_MEMORY_READ_BIT,
    VK_ACCESS_MEMORY_WRITE_BIT,
    VK_ACCESS_RESERVED_30_BIT_KHR,
    VK_ACCESS_RESERVED_31_BIT_KHR,
    VK_ACCESS_RESERVED_28_BIT_KHR,
    VK_ACCESS_RESERVED_29_BIT_KHR,
    VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT,
    VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT,
    VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT,
    VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT,
    VK_ACCESS_COMMAND_PROCESS_READ_BIT_NVX,
    VK_ACCESS_COMMAND_PROCESS_WRITE_BIT_NVX,
    VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT,
    VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV,
    VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV,
    VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV,
    VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT,
    
  }

  const VK_ACCESS_INDIRECT_COMMAND_READ_BIT: VkAccessFlagBits;
  const VK_ACCESS_INDEX_READ_BIT: VkAccessFlagBits;
  const VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT: VkAccessFlagBits;
  const VK_ACCESS_UNIFORM_READ_BIT: VkAccessFlagBits;
  const VK_ACCESS_INPUT_ATTACHMENT_READ_BIT: VkAccessFlagBits;
  const VK_ACCESS_SHADER_READ_BIT: VkAccessFlagBits;
  const VK_ACCESS_SHADER_WRITE_BIT: VkAccessFlagBits;
  const VK_ACCESS_COLOR_ATTACHMENT_READ_BIT: VkAccessFlagBits;
  const VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT: VkAccessFlagBits;
  const VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT: VkAccessFlagBits;
  const VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT: VkAccessFlagBits;
  const VK_ACCESS_TRANSFER_READ_BIT: VkAccessFlagBits;
  const VK_ACCESS_TRANSFER_WRITE_BIT: VkAccessFlagBits;
  const VK_ACCESS_HOST_READ_BIT: VkAccessFlagBits;
  const VK_ACCESS_HOST_WRITE_BIT: VkAccessFlagBits;
  const VK_ACCESS_MEMORY_READ_BIT: VkAccessFlagBits;
  const VK_ACCESS_MEMORY_WRITE_BIT: VkAccessFlagBits;
  const VK_ACCESS_RESERVED_30_BIT_KHR: VkAccessFlagBits;
  const VK_ACCESS_RESERVED_31_BIT_KHR: VkAccessFlagBits;
  const VK_ACCESS_RESERVED_28_BIT_KHR: VkAccessFlagBits;
  const VK_ACCESS_RESERVED_29_BIT_KHR: VkAccessFlagBits;
  const VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT: VkAccessFlagBits;
  const VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT: VkAccessFlagBits;
  const VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT: VkAccessFlagBits;
  const VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT: VkAccessFlagBits;
  const VK_ACCESS_COMMAND_PROCESS_READ_BIT_NVX: VkAccessFlagBits;
  const VK_ACCESS_COMMAND_PROCESS_WRITE_BIT_NVX: VkAccessFlagBits;
  const VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT: VkAccessFlagBits;
  const VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV: VkAccessFlagBits;
  const VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV: VkAccessFlagBits;
  const VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV: VkAccessFlagBits;
  const VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT: VkAccessFlagBits;
  

  
  /**
   * 
   * @member VK_BUFFER_USAGE_TRANSFER_SRC_BIT
   * @member VK_BUFFER_USAGE_TRANSFER_DST_BIT
   * @member VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT
   * @member VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT
   * @member VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT
   * @member VK_BUFFER_USAGE_STORAGE_BUFFER_BIT
   * @member VK_BUFFER_USAGE_INDEX_BUFFER_BIT
   * @member VK_BUFFER_USAGE_VERTEX_BUFFER_BIT
   * @member VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT
   * @member VK_BUFFER_USAGE_RESERVED_15_BIT_KHR
   * @member VK_BUFFER_USAGE_RESERVED_16_BIT_KHR
   * @member VK_BUFFER_USAGE_RESERVED_13_BIT_KHR
   * @member VK_BUFFER_USAGE_RESERVED_14_BIT_KHR
   * @member VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT
   * @member VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT
   * @member VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT
   * @member VK_BUFFER_USAGE_RAY_TRACING_BIT_NV
   * @member VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT
   */
  enum VkBufferUsageFlagBits {
    VK_BUFFER_USAGE_TRANSFER_SRC_BIT,
    VK_BUFFER_USAGE_TRANSFER_DST_BIT,
    VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT,
    VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT,
    VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT,
    VK_BUFFER_USAGE_STORAGE_BUFFER_BIT,
    VK_BUFFER_USAGE_INDEX_BUFFER_BIT,
    VK_BUFFER_USAGE_VERTEX_BUFFER_BIT,
    VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT,
    VK_BUFFER_USAGE_RESERVED_15_BIT_KHR,
    VK_BUFFER_USAGE_RESERVED_16_BIT_KHR,
    VK_BUFFER_USAGE_RESERVED_13_BIT_KHR,
    VK_BUFFER_USAGE_RESERVED_14_BIT_KHR,
    VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT,
    VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT,
    VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT,
    VK_BUFFER_USAGE_RAY_TRACING_BIT_NV,
    VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT,
    
  }

  const VK_BUFFER_USAGE_TRANSFER_SRC_BIT: VkBufferUsageFlagBits;
  const VK_BUFFER_USAGE_TRANSFER_DST_BIT: VkBufferUsageFlagBits;
  const VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT: VkBufferUsageFlagBits;
  const VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT: VkBufferUsageFlagBits;
  const VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT: VkBufferUsageFlagBits;
  const VK_BUFFER_USAGE_STORAGE_BUFFER_BIT: VkBufferUsageFlagBits;
  const VK_BUFFER_USAGE_INDEX_BUFFER_BIT: VkBufferUsageFlagBits;
  const VK_BUFFER_USAGE_VERTEX_BUFFER_BIT: VkBufferUsageFlagBits;
  const VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT: VkBufferUsageFlagBits;
  const VK_BUFFER_USAGE_RESERVED_15_BIT_KHR: VkBufferUsageFlagBits;
  const VK_BUFFER_USAGE_RESERVED_16_BIT_KHR: VkBufferUsageFlagBits;
  const VK_BUFFER_USAGE_RESERVED_13_BIT_KHR: VkBufferUsageFlagBits;
  const VK_BUFFER_USAGE_RESERVED_14_BIT_KHR: VkBufferUsageFlagBits;
  const VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT: VkBufferUsageFlagBits;
  const VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT: VkBufferUsageFlagBits;
  const VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT: VkBufferUsageFlagBits;
  const VK_BUFFER_USAGE_RAY_TRACING_BIT_NV: VkBufferUsageFlagBits;
  const VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT: VkBufferUsageFlagBits;
  

  
  /**
   * 
   * @member VK_BUFFER_CREATE_SPARSE_BINDING_BIT
   * @member VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT
   * @member VK_BUFFER_CREATE_SPARSE_ALIASED_BIT
   * @member VK_BUFFER_CREATE_PROTECTED_BIT
   * @member VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT
   */
  enum VkBufferCreateFlagBits {
    VK_BUFFER_CREATE_SPARSE_BINDING_BIT,
    VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT,
    VK_BUFFER_CREATE_SPARSE_ALIASED_BIT,
    VK_BUFFER_CREATE_PROTECTED_BIT,
    VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT,
    
  }

  const VK_BUFFER_CREATE_SPARSE_BINDING_BIT: VkBufferCreateFlagBits;
  const VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT: VkBufferCreateFlagBits;
  const VK_BUFFER_CREATE_SPARSE_ALIASED_BIT: VkBufferCreateFlagBits;
  const VK_BUFFER_CREATE_PROTECTED_BIT: VkBufferCreateFlagBits;
  const VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT: VkBufferCreateFlagBits;
  

  
  /**
   * 
   * @member VK_SHADER_STAGE_VERTEX_BIT
   * @member VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT
   * @member VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT
   * @member VK_SHADER_STAGE_GEOMETRY_BIT
   * @member VK_SHADER_STAGE_FRAGMENT_BIT
   * @member VK_SHADER_STAGE_COMPUTE_BIT
   * @member VK_SHADER_STAGE_ALL_GRAPHICS
   * @member VK_SHADER_STAGE_ALL
   * @member VK_SHADER_STAGE_RAYGEN_BIT_NV
   * @member VK_SHADER_STAGE_ANY_HIT_BIT_NV
   * @member VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV
   * @member VK_SHADER_STAGE_MISS_BIT_NV
   * @member VK_SHADER_STAGE_INTERSECTION_BIT_NV
   * @member VK_SHADER_STAGE_CALLABLE_BIT_NV
   * @member VK_SHADER_STAGE_TASK_BIT_NV
   * @member VK_SHADER_STAGE_MESH_BIT_NV
   */
  enum VkShaderStageFlagBits {
    VK_SHADER_STAGE_VERTEX_BIT,
    VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT,
    VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT,
    VK_SHADER_STAGE_GEOMETRY_BIT,
    VK_SHADER_STAGE_FRAGMENT_BIT,
    VK_SHADER_STAGE_COMPUTE_BIT,
    VK_SHADER_STAGE_ALL_GRAPHICS,
    VK_SHADER_STAGE_ALL,
    VK_SHADER_STAGE_RAYGEN_BIT_NV,
    VK_SHADER_STAGE_ANY_HIT_BIT_NV,
    VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV,
    VK_SHADER_STAGE_MISS_BIT_NV,
    VK_SHADER_STAGE_INTERSECTION_BIT_NV,
    VK_SHADER_STAGE_CALLABLE_BIT_NV,
    VK_SHADER_STAGE_TASK_BIT_NV,
    VK_SHADER_STAGE_MESH_BIT_NV,
    
  }

  const VK_SHADER_STAGE_VERTEX_BIT: VkShaderStageFlagBits;
  const VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT: VkShaderStageFlagBits;
  const VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT: VkShaderStageFlagBits;
  const VK_SHADER_STAGE_GEOMETRY_BIT: VkShaderStageFlagBits;
  const VK_SHADER_STAGE_FRAGMENT_BIT: VkShaderStageFlagBits;
  const VK_SHADER_STAGE_COMPUTE_BIT: VkShaderStageFlagBits;
  const VK_SHADER_STAGE_ALL_GRAPHICS: VkShaderStageFlagBits;
  const VK_SHADER_STAGE_ALL: VkShaderStageFlagBits;
  const VK_SHADER_STAGE_RAYGEN_BIT_NV: VkShaderStageFlagBits;
  const VK_SHADER_STAGE_ANY_HIT_BIT_NV: VkShaderStageFlagBits;
  const VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV: VkShaderStageFlagBits;
  const VK_SHADER_STAGE_MISS_BIT_NV: VkShaderStageFlagBits;
  const VK_SHADER_STAGE_INTERSECTION_BIT_NV: VkShaderStageFlagBits;
  const VK_SHADER_STAGE_CALLABLE_BIT_NV: VkShaderStageFlagBits;
  const VK_SHADER_STAGE_TASK_BIT_NV: VkShaderStageFlagBits;
  const VK_SHADER_STAGE_MESH_BIT_NV: VkShaderStageFlagBits;
  

  
  /**
   * 
   * @member VK_IMAGE_USAGE_TRANSFER_SRC_BIT
   * @member VK_IMAGE_USAGE_TRANSFER_DST_BIT
   * @member VK_IMAGE_USAGE_SAMPLED_BIT
   * @member VK_IMAGE_USAGE_STORAGE_BIT
   * @member VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT
   * @member VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT
   * @member VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT
   * @member VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT
   * @member VK_IMAGE_USAGE_RESERVED_13_BIT_KHR
   * @member VK_IMAGE_USAGE_RESERVED_14_BIT_KHR
   * @member VK_IMAGE_USAGE_RESERVED_15_BIT_KHR
   * @member VK_IMAGE_USAGE_RESERVED_10_BIT_KHR
   * @member VK_IMAGE_USAGE_RESERVED_11_BIT_KHR
   * @member VK_IMAGE_USAGE_RESERVED_12_BIT_KHR
   * @member VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV
   * @member VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT
   */
  enum VkImageUsageFlagBits {
    VK_IMAGE_USAGE_TRANSFER_SRC_BIT,
    VK_IMAGE_USAGE_TRANSFER_DST_BIT,
    VK_IMAGE_USAGE_SAMPLED_BIT,
    VK_IMAGE_USAGE_STORAGE_BIT,
    VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT,
    VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT,
    VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT,
    VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT,
    VK_IMAGE_USAGE_RESERVED_13_BIT_KHR,
    VK_IMAGE_USAGE_RESERVED_14_BIT_KHR,
    VK_IMAGE_USAGE_RESERVED_15_BIT_KHR,
    VK_IMAGE_USAGE_RESERVED_10_BIT_KHR,
    VK_IMAGE_USAGE_RESERVED_11_BIT_KHR,
    VK_IMAGE_USAGE_RESERVED_12_BIT_KHR,
    VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV,
    VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT,
    
  }

  const VK_IMAGE_USAGE_TRANSFER_SRC_BIT: VkImageUsageFlagBits;
  const VK_IMAGE_USAGE_TRANSFER_DST_BIT: VkImageUsageFlagBits;
  const VK_IMAGE_USAGE_SAMPLED_BIT: VkImageUsageFlagBits;
  const VK_IMAGE_USAGE_STORAGE_BIT: VkImageUsageFlagBits;
  const VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT: VkImageUsageFlagBits;
  const VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT: VkImageUsageFlagBits;
  const VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT: VkImageUsageFlagBits;
  const VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT: VkImageUsageFlagBits;
  const VK_IMAGE_USAGE_RESERVED_13_BIT_KHR: VkImageUsageFlagBits;
  const VK_IMAGE_USAGE_RESERVED_14_BIT_KHR: VkImageUsageFlagBits;
  const VK_IMAGE_USAGE_RESERVED_15_BIT_KHR: VkImageUsageFlagBits;
  const VK_IMAGE_USAGE_RESERVED_10_BIT_KHR: VkImageUsageFlagBits;
  const VK_IMAGE_USAGE_RESERVED_11_BIT_KHR: VkImageUsageFlagBits;
  const VK_IMAGE_USAGE_RESERVED_12_BIT_KHR: VkImageUsageFlagBits;
  const VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV: VkImageUsageFlagBits;
  const VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT: VkImageUsageFlagBits;
  

  
  /**
   * 
   * @member VK_IMAGE_CREATE_SPARSE_BINDING_BIT
   * @member VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT
   * @member VK_IMAGE_CREATE_SPARSE_ALIASED_BIT
   * @member VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT
   * @member VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT
   * @member VK_IMAGE_CREATE_ALIAS_BIT
   * @member VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT
   * @member VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT
   * @member VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT
   * @member VK_IMAGE_CREATE_EXTENDED_USAGE_BIT
   * @member VK_IMAGE_CREATE_PROTECTED_BIT
   * @member VK_IMAGE_CREATE_DISJOINT_BIT
   * @member VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV
   * @member VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT
   * @member VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT
   * @member VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR
   * @member VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR
   * @member VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR
   * @member VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR
   * @member VK_IMAGE_CREATE_DISJOINT_BIT_KHR
   * @member VK_IMAGE_CREATE_ALIAS_BIT_KHR
   */
  enum VkImageCreateFlagBits {
    VK_IMAGE_CREATE_SPARSE_BINDING_BIT,
    VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT,
    VK_IMAGE_CREATE_SPARSE_ALIASED_BIT,
    VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT,
    VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT,
    VK_IMAGE_CREATE_ALIAS_BIT,
    VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT,
    VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT,
    VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT,
    VK_IMAGE_CREATE_EXTENDED_USAGE_BIT,
    VK_IMAGE_CREATE_PROTECTED_BIT,
    VK_IMAGE_CREATE_DISJOINT_BIT,
    VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV,
    VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT,
    VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT,
    VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR,
    VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR,
    VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR,
    VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR,
    VK_IMAGE_CREATE_DISJOINT_BIT_KHR,
    VK_IMAGE_CREATE_ALIAS_BIT_KHR,
    
  }

  const VK_IMAGE_CREATE_SPARSE_BINDING_BIT: VkImageCreateFlagBits;
  const VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT: VkImageCreateFlagBits;
  const VK_IMAGE_CREATE_SPARSE_ALIASED_BIT: VkImageCreateFlagBits;
  const VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT: VkImageCreateFlagBits;
  const VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT: VkImageCreateFlagBits;
  const VK_IMAGE_CREATE_ALIAS_BIT: VkImageCreateFlagBits;
  const VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT: VkImageCreateFlagBits;
  const VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT: VkImageCreateFlagBits;
  const VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT: VkImageCreateFlagBits;
  const VK_IMAGE_CREATE_EXTENDED_USAGE_BIT: VkImageCreateFlagBits;
  const VK_IMAGE_CREATE_PROTECTED_BIT: VkImageCreateFlagBits;
  const VK_IMAGE_CREATE_DISJOINT_BIT: VkImageCreateFlagBits;
  const VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV: VkImageCreateFlagBits;
  const VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT: VkImageCreateFlagBits;
  const VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT: VkImageCreateFlagBits;
  const VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR: VkImageCreateFlagBits;
  const VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR: VkImageCreateFlagBits;
  const VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR: VkImageCreateFlagBits;
  const VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR: VkImageCreateFlagBits;
  const VK_IMAGE_CREATE_DISJOINT_BIT_KHR: VkImageCreateFlagBits;
  const VK_IMAGE_CREATE_ALIAS_BIT_KHR: VkImageCreateFlagBits;
  

  
  /**
   * 
   * @member VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT
   */
  enum VkImageViewCreateFlagBits {
    VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT,
    
  }

  const VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT: VkImageViewCreateFlagBits;
  

  
  /**
   * 
   * @member VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT
   * @member VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT
   */
  enum VkSamplerCreateFlagBits {
    VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT,
    VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT,
    
  }

  const VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT: VkSamplerCreateFlagBits;
  const VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT: VkSamplerCreateFlagBits;
  

  
  /**
   * 
   * @member VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT
   * @member VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT
   * @member VK_PIPELINE_CREATE_DERIVATIVE_BIT
   * @member VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT
   * @member VK_PIPELINE_CREATE_DISPATCH_BASE
   * @member VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV
   * @member VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR
   * @member VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR
   * @member VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR
   * @member VK_PIPELINE_CREATE_DISPATCH_BASE_KHR
   */
  enum VkPipelineCreateFlagBits {
    VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT,
    VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT,
    VK_PIPELINE_CREATE_DERIVATIVE_BIT,
    VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT,
    VK_PIPELINE_CREATE_DISPATCH_BASE,
    VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV,
    VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR,
    VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR,
    VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR,
    VK_PIPELINE_CREATE_DISPATCH_BASE_KHR,
    
  }

  const VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT: VkPipelineCreateFlagBits;
  const VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT: VkPipelineCreateFlagBits;
  const VK_PIPELINE_CREATE_DERIVATIVE_BIT: VkPipelineCreateFlagBits;
  const VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT: VkPipelineCreateFlagBits;
  const VK_PIPELINE_CREATE_DISPATCH_BASE: VkPipelineCreateFlagBits;
  const VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV: VkPipelineCreateFlagBits;
  const VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR: VkPipelineCreateFlagBits;
  const VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR: VkPipelineCreateFlagBits;
  const VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR: VkPipelineCreateFlagBits;
  const VK_PIPELINE_CREATE_DISPATCH_BASE_KHR: VkPipelineCreateFlagBits;
  

  
  /**
   * 
   * @member VK_PIPELINE_SHADER_STAGE_CREATE_RESERVED_2_BIT_NV
   * @member VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT
   * @member VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT
   */
  enum VkPipelineShaderStageCreateFlagBits {
    VK_PIPELINE_SHADER_STAGE_CREATE_RESERVED_2_BIT_NV,
    VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT,
    VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT,
    
  }

  const VK_PIPELINE_SHADER_STAGE_CREATE_RESERVED_2_BIT_NV: VkPipelineShaderStageCreateFlagBits;
  const VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT: VkPipelineShaderStageCreateFlagBits;
  const VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT: VkPipelineShaderStageCreateFlagBits;
  

  
  /**
   * 
   * @member VK_COLOR_COMPONENT_R_BIT
   * @member VK_COLOR_COMPONENT_G_BIT
   * @member VK_COLOR_COMPONENT_B_BIT
   * @member VK_COLOR_COMPONENT_A_BIT
   */
  enum VkColorComponentFlagBits {
    VK_COLOR_COMPONENT_R_BIT,
    VK_COLOR_COMPONENT_G_BIT,
    VK_COLOR_COMPONENT_B_BIT,
    VK_COLOR_COMPONENT_A_BIT,
    
  }

  const VK_COLOR_COMPONENT_R_BIT: VkColorComponentFlagBits;
  const VK_COLOR_COMPONENT_G_BIT: VkColorComponentFlagBits;
  const VK_COLOR_COMPONENT_B_BIT: VkColorComponentFlagBits;
  const VK_COLOR_COMPONENT_A_BIT: VkColorComponentFlagBits;
  

  
  /**
   * 
   * @member VK_FENCE_CREATE_SIGNALED_BIT
   */
  enum VkFenceCreateFlagBits {
    VK_FENCE_CREATE_SIGNALED_BIT,
    
  }

  const VK_FENCE_CREATE_SIGNALED_BIT: VkFenceCreateFlagBits;
  

  
  /**
   * 
   * @member VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT
   * @member VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT
   * @member VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT
   * @member VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT
   * @member VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT
   * @member VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT
   * @member VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT
   * @member VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT
   * @member VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT
   * @member VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT
   * @member VK_FORMAT_FEATURE_BLIT_SRC_BIT
   * @member VK_FORMAT_FEATURE_BLIT_DST_BIT
   * @member VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT
   * @member VK_FORMAT_FEATURE_TRANSFER_SRC_BIT
   * @member VK_FORMAT_FEATURE_TRANSFER_DST_BIT
   * @member VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT
   * @member VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT
   * @member VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT
   * @member VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT
   * @member VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT
   * @member VK_FORMAT_FEATURE_DISJOINT_BIT
   * @member VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT
   * @member VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG
   * @member VK_FORMAT_FEATURE_RESERVED_27_BIT_KHR
   * @member VK_FORMAT_FEATURE_RESERVED_28_BIT_KHR
   * @member VK_FORMAT_FEATURE_RESERVED_25_BIT_KHR
   * @member VK_FORMAT_FEATURE_RESERVED_26_BIT_KHR
   * @member VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT
   * @member VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT
   * @member VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR
   * @member VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR
   * @member VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR
   * @member VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR
   * @member VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR
   * @member VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR
   * @member VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR
   * @member VK_FORMAT_FEATURE_DISJOINT_BIT_KHR
   * @member VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR
   * @member VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT
   */
  enum VkFormatFeatureFlagBits {
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT,
    VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT,
    VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT,
    VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT,
    VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT,
    VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT,
    VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT,
    VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT,
    VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT,
    VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT,
    VK_FORMAT_FEATURE_BLIT_SRC_BIT,
    VK_FORMAT_FEATURE_BLIT_DST_BIT,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT,
    VK_FORMAT_FEATURE_TRANSFER_SRC_BIT,
    VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
    VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT,
    VK_FORMAT_FEATURE_DISJOINT_BIT,
    VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG,
    VK_FORMAT_FEATURE_RESERVED_27_BIT_KHR,
    VK_FORMAT_FEATURE_RESERVED_28_BIT_KHR,
    VK_FORMAT_FEATURE_RESERVED_25_BIT_KHR,
    VK_FORMAT_FEATURE_RESERVED_26_BIT_KHR,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT,
    VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT,
    VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR,
    VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR,
    VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR,
    VK_FORMAT_FEATURE_DISJOINT_BIT_KHR,
    VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT,
    
  }

  const VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT: VkFormatFeatureFlagBits;
  const VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT: VkFormatFeatureFlagBits;
  const VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT: VkFormatFeatureFlagBits;
  const VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT: VkFormatFeatureFlagBits;
  const VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT: VkFormatFeatureFlagBits;
  const VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT: VkFormatFeatureFlagBits;
  const VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT: VkFormatFeatureFlagBits;
  const VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT: VkFormatFeatureFlagBits;
  const VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT: VkFormatFeatureFlagBits;
  const VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT: VkFormatFeatureFlagBits;
  const VK_FORMAT_FEATURE_BLIT_SRC_BIT: VkFormatFeatureFlagBits;
  const VK_FORMAT_FEATURE_BLIT_DST_BIT: VkFormatFeatureFlagBits;
  const VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT: VkFormatFeatureFlagBits;
  const VK_FORMAT_FEATURE_TRANSFER_SRC_BIT: VkFormatFeatureFlagBits;
  const VK_FORMAT_FEATURE_TRANSFER_DST_BIT: VkFormatFeatureFlagBits;
  const VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT: VkFormatFeatureFlagBits;
  const VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT: VkFormatFeatureFlagBits;
  const VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT: VkFormatFeatureFlagBits;
  const VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT: VkFormatFeatureFlagBits;
  const VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT: VkFormatFeatureFlagBits;
  const VK_FORMAT_FEATURE_DISJOINT_BIT: VkFormatFeatureFlagBits;
  const VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT: VkFormatFeatureFlagBits;
  const VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG: VkFormatFeatureFlagBits;
  const VK_FORMAT_FEATURE_RESERVED_27_BIT_KHR: VkFormatFeatureFlagBits;
  const VK_FORMAT_FEATURE_RESERVED_28_BIT_KHR: VkFormatFeatureFlagBits;
  const VK_FORMAT_FEATURE_RESERVED_25_BIT_KHR: VkFormatFeatureFlagBits;
  const VK_FORMAT_FEATURE_RESERVED_26_BIT_KHR: VkFormatFeatureFlagBits;
  const VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT: VkFormatFeatureFlagBits;
  const VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT: VkFormatFeatureFlagBits;
  const VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR: VkFormatFeatureFlagBits;
  const VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR: VkFormatFeatureFlagBits;
  const VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR: VkFormatFeatureFlagBits;
  const VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR: VkFormatFeatureFlagBits;
  const VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR: VkFormatFeatureFlagBits;
  const VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR: VkFormatFeatureFlagBits;
  const VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR: VkFormatFeatureFlagBits;
  const VK_FORMAT_FEATURE_DISJOINT_BIT_KHR: VkFormatFeatureFlagBits;
  const VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR: VkFormatFeatureFlagBits;
  const VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT: VkFormatFeatureFlagBits;
  

  
  /**
   * 
   * @member VK_QUERY_CONTROL_PRECISE_BIT
   */
  enum VkQueryControlFlagBits {
    VK_QUERY_CONTROL_PRECISE_BIT,
    
  }

  const VK_QUERY_CONTROL_PRECISE_BIT: VkQueryControlFlagBits;
  

  
  /**
   * 
   * @member VK_QUERY_RESULT_64_BIT
   * @member VK_QUERY_RESULT_WAIT_BIT
   * @member VK_QUERY_RESULT_WITH_AVAILABILITY_BIT
   * @member VK_QUERY_RESULT_PARTIAL_BIT
   */
  enum VkQueryResultFlagBits {
    VK_QUERY_RESULT_64_BIT,
    VK_QUERY_RESULT_WAIT_BIT,
    VK_QUERY_RESULT_WITH_AVAILABILITY_BIT,
    VK_QUERY_RESULT_PARTIAL_BIT,
    
  }

  const VK_QUERY_RESULT_64_BIT: VkQueryResultFlagBits;
  const VK_QUERY_RESULT_WAIT_BIT: VkQueryResultFlagBits;
  const VK_QUERY_RESULT_WITH_AVAILABILITY_BIT: VkQueryResultFlagBits;
  const VK_QUERY_RESULT_PARTIAL_BIT: VkQueryResultFlagBits;
  

  
  /**
   * 
   * @member VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT
   * @member VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT
   * @member VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT
   */
  enum VkCommandBufferUsageFlagBits {
    VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT,
    VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT,
    VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT,
    
  }

  const VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT: VkCommandBufferUsageFlagBits;
  const VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT: VkCommandBufferUsageFlagBits;
  const VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT: VkCommandBufferUsageFlagBits;
  

  
  /**
   * 
   * @member VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT
   * @member VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT
   * @member VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT
   * @member VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT
   * @member VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT
   * @member VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT
   * @member VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT
   * @member VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT
   * @member VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT
   * @member VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT
   * @member VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT
   */
  enum VkQueryPipelineStatisticFlagBits {
    VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT,
    VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT,
    VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT,
    VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT,
    VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT,
    VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT,
    VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT,
    VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT,
    VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT,
    VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT,
    VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT,
    
  }

  const VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT: VkQueryPipelineStatisticFlagBits;
  const VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT: VkQueryPipelineStatisticFlagBits;
  const VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT: VkQueryPipelineStatisticFlagBits;
  const VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT: VkQueryPipelineStatisticFlagBits;
  const VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT: VkQueryPipelineStatisticFlagBits;
  const VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT: VkQueryPipelineStatisticFlagBits;
  const VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT: VkQueryPipelineStatisticFlagBits;
  const VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT: VkQueryPipelineStatisticFlagBits;
  const VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT: VkQueryPipelineStatisticFlagBits;
  const VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT: VkQueryPipelineStatisticFlagBits;
  const VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT: VkQueryPipelineStatisticFlagBits;
  

  
  /**
   * 
   * @member VK_IMAGE_ASPECT_COLOR_BIT
   * @member VK_IMAGE_ASPECT_DEPTH_BIT
   * @member VK_IMAGE_ASPECT_STENCIL_BIT
   * @member VK_IMAGE_ASPECT_METADATA_BIT
   * @member VK_IMAGE_ASPECT_PLANE_0_BIT
   * @member VK_IMAGE_ASPECT_PLANE_1_BIT
   * @member VK_IMAGE_ASPECT_PLANE_2_BIT
   * @member VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT
   * @member VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT
   * @member VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT
   * @member VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT
   * @member VK_IMAGE_ASPECT_PLANE_0_BIT_KHR
   * @member VK_IMAGE_ASPECT_PLANE_1_BIT_KHR
   * @member VK_IMAGE_ASPECT_PLANE_2_BIT_KHR
   */
  enum VkImageAspectFlagBits {
    VK_IMAGE_ASPECT_COLOR_BIT,
    VK_IMAGE_ASPECT_DEPTH_BIT,
    VK_IMAGE_ASPECT_STENCIL_BIT,
    VK_IMAGE_ASPECT_METADATA_BIT,
    VK_IMAGE_ASPECT_PLANE_0_BIT,
    VK_IMAGE_ASPECT_PLANE_1_BIT,
    VK_IMAGE_ASPECT_PLANE_2_BIT,
    VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT,
    VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT,
    VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT,
    VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT,
    VK_IMAGE_ASPECT_PLANE_0_BIT_KHR,
    VK_IMAGE_ASPECT_PLANE_1_BIT_KHR,
    VK_IMAGE_ASPECT_PLANE_2_BIT_KHR,
    
  }

  const VK_IMAGE_ASPECT_COLOR_BIT: VkImageAspectFlagBits;
  const VK_IMAGE_ASPECT_DEPTH_BIT: VkImageAspectFlagBits;
  const VK_IMAGE_ASPECT_STENCIL_BIT: VkImageAspectFlagBits;
  const VK_IMAGE_ASPECT_METADATA_BIT: VkImageAspectFlagBits;
  const VK_IMAGE_ASPECT_PLANE_0_BIT: VkImageAspectFlagBits;
  const VK_IMAGE_ASPECT_PLANE_1_BIT: VkImageAspectFlagBits;
  const VK_IMAGE_ASPECT_PLANE_2_BIT: VkImageAspectFlagBits;
  const VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT: VkImageAspectFlagBits;
  const VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT: VkImageAspectFlagBits;
  const VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT: VkImageAspectFlagBits;
  const VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT: VkImageAspectFlagBits;
  const VK_IMAGE_ASPECT_PLANE_0_BIT_KHR: VkImageAspectFlagBits;
  const VK_IMAGE_ASPECT_PLANE_1_BIT_KHR: VkImageAspectFlagBits;
  const VK_IMAGE_ASPECT_PLANE_2_BIT_KHR: VkImageAspectFlagBits;
  

  
  /**
   * 
   * @member VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT
   * @member VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT
   * @member VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT
   */
  enum VkSparseImageFormatFlagBits {
    VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT,
    VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT,
    VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT,
    
  }

  const VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT: VkSparseImageFormatFlagBits;
  const VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT: VkSparseImageFormatFlagBits;
  const VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT: VkSparseImageFormatFlagBits;
  

  
  /**
   * 
   * @member VK_SPARSE_MEMORY_BIND_METADATA_BIT
   */
  enum VkSparseMemoryBindFlagBits {
    VK_SPARSE_MEMORY_BIND_METADATA_BIT,
    
  }

  const VK_SPARSE_MEMORY_BIND_METADATA_BIT: VkSparseMemoryBindFlagBits;
  

  
  /**
   * 
   * @member VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT
   * @member VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT
   * @member VK_PIPELINE_STAGE_VERTEX_INPUT_BIT
   * @member VK_PIPELINE_STAGE_VERTEX_SHADER_BIT
   * @member VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT
   * @member VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT
   * @member VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT
   * @member VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT
   * @member VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT
   * @member VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT
   * @member VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT
   * @member VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT
   * @member VK_PIPELINE_STAGE_TRANSFER_BIT
   * @member VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT
   * @member VK_PIPELINE_STAGE_HOST_BIT
   * @member VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT
   * @member VK_PIPELINE_STAGE_ALL_COMMANDS_BIT
   * @member VK_PIPELINE_STAGE_RESERVED_27_BIT_KHR
   * @member VK_PIPELINE_STAGE_RESERVED_26_BIT_KHR
   * @member VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT
   * @member VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT
   * @member VK_PIPELINE_STAGE_COMMAND_PROCESS_BIT_NVX
   * @member VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV
   * @member VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV
   * @member VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV
   * @member VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV
   * @member VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV
   * @member VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT
   */
  enum VkPipelineStageFlagBits {
    VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT,
    VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT,
    VK_PIPELINE_STAGE_VERTEX_INPUT_BIT,
    VK_PIPELINE_STAGE_VERTEX_SHADER_BIT,
    VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT,
    VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT,
    VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT,
    VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT,
    VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT,
    VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT,
    VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT,
    VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT,
    VK_PIPELINE_STAGE_TRANSFER_BIT,
    VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT,
    VK_PIPELINE_STAGE_HOST_BIT,
    VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT,
    VK_PIPELINE_STAGE_ALL_COMMANDS_BIT,
    VK_PIPELINE_STAGE_RESERVED_27_BIT_KHR,
    VK_PIPELINE_STAGE_RESERVED_26_BIT_KHR,
    VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT,
    VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT,
    VK_PIPELINE_STAGE_COMMAND_PROCESS_BIT_NVX,
    VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV,
    VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV,
    VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV,
    VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV,
    VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV,
    VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT,
    
  }

  const VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT: VkPipelineStageFlagBits;
  const VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT: VkPipelineStageFlagBits;
  const VK_PIPELINE_STAGE_VERTEX_INPUT_BIT: VkPipelineStageFlagBits;
  const VK_PIPELINE_STAGE_VERTEX_SHADER_BIT: VkPipelineStageFlagBits;
  const VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT: VkPipelineStageFlagBits;
  const VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT: VkPipelineStageFlagBits;
  const VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT: VkPipelineStageFlagBits;
  const VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT: VkPipelineStageFlagBits;
  const VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT: VkPipelineStageFlagBits;
  const VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT: VkPipelineStageFlagBits;
  const VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT: VkPipelineStageFlagBits;
  const VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT: VkPipelineStageFlagBits;
  const VK_PIPELINE_STAGE_TRANSFER_BIT: VkPipelineStageFlagBits;
  const VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT: VkPipelineStageFlagBits;
  const VK_PIPELINE_STAGE_HOST_BIT: VkPipelineStageFlagBits;
  const VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT: VkPipelineStageFlagBits;
  const VK_PIPELINE_STAGE_ALL_COMMANDS_BIT: VkPipelineStageFlagBits;
  const VK_PIPELINE_STAGE_RESERVED_27_BIT_KHR: VkPipelineStageFlagBits;
  const VK_PIPELINE_STAGE_RESERVED_26_BIT_KHR: VkPipelineStageFlagBits;
  const VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT: VkPipelineStageFlagBits;
  const VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT: VkPipelineStageFlagBits;
  const VK_PIPELINE_STAGE_COMMAND_PROCESS_BIT_NVX: VkPipelineStageFlagBits;
  const VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV: VkPipelineStageFlagBits;
  const VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV: VkPipelineStageFlagBits;
  const VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV: VkPipelineStageFlagBits;
  const VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV: VkPipelineStageFlagBits;
  const VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV: VkPipelineStageFlagBits;
  const VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT: VkPipelineStageFlagBits;
  

  
  /**
   * 
   * @member VK_COMMAND_POOL_CREATE_TRANSIENT_BIT
   * @member VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT
   * @member VK_COMMAND_POOL_CREATE_PROTECTED_BIT
   */
  enum VkCommandPoolCreateFlagBits {
    VK_COMMAND_POOL_CREATE_TRANSIENT_BIT,
    VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT,
    VK_COMMAND_POOL_CREATE_PROTECTED_BIT,
    
  }

  const VK_COMMAND_POOL_CREATE_TRANSIENT_BIT: VkCommandPoolCreateFlagBits;
  const VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT: VkCommandPoolCreateFlagBits;
  const VK_COMMAND_POOL_CREATE_PROTECTED_BIT: VkCommandPoolCreateFlagBits;
  

  
  /**
   * 
   * @member VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT
   */
  enum VkCommandPoolResetFlagBits {
    VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT,
    
  }

  const VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT: VkCommandPoolResetFlagBits;
  

  
  /**
   * 
   * @member VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT
   */
  enum VkCommandBufferResetFlagBits {
    VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT,
    
  }

  const VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT: VkCommandBufferResetFlagBits;
  

  
  /**
   * 
   * @member VK_SAMPLE_COUNT_1_BIT
   * @member VK_SAMPLE_COUNT_2_BIT
   * @member VK_SAMPLE_COUNT_4_BIT
   * @member VK_SAMPLE_COUNT_8_BIT
   * @member VK_SAMPLE_COUNT_16_BIT
   * @member VK_SAMPLE_COUNT_32_BIT
   * @member VK_SAMPLE_COUNT_64_BIT
   */
  enum VkSampleCountFlagBits {
    VK_SAMPLE_COUNT_1_BIT,
    VK_SAMPLE_COUNT_2_BIT,
    VK_SAMPLE_COUNT_4_BIT,
    VK_SAMPLE_COUNT_8_BIT,
    VK_SAMPLE_COUNT_16_BIT,
    VK_SAMPLE_COUNT_32_BIT,
    VK_SAMPLE_COUNT_64_BIT,
    
  }

  const VK_SAMPLE_COUNT_1_BIT: VkSampleCountFlagBits;
  const VK_SAMPLE_COUNT_2_BIT: VkSampleCountFlagBits;
  const VK_SAMPLE_COUNT_4_BIT: VkSampleCountFlagBits;
  const VK_SAMPLE_COUNT_8_BIT: VkSampleCountFlagBits;
  const VK_SAMPLE_COUNT_16_BIT: VkSampleCountFlagBits;
  const VK_SAMPLE_COUNT_32_BIT: VkSampleCountFlagBits;
  const VK_SAMPLE_COUNT_64_BIT: VkSampleCountFlagBits;
  

  
  /**
   * 
   * @member VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT
   */
  enum VkAttachmentDescriptionFlagBits {
    VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT,
    
  }

  const VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT: VkAttachmentDescriptionFlagBits;
  

  
  /**
   * 
   * @member VK_STENCIL_FACE_FRONT_BIT
   * @member VK_STENCIL_FACE_BACK_BIT
   * @member VK_STENCIL_FACE_FRONT_AND_BACK
   * @member VK_STENCIL_FRONT_AND_BACK
   */
  enum VkStencilFaceFlagBits {
    VK_STENCIL_FACE_FRONT_BIT,
    VK_STENCIL_FACE_BACK_BIT,
    VK_STENCIL_FACE_FRONT_AND_BACK,
    VK_STENCIL_FRONT_AND_BACK,
    
  }

  const VK_STENCIL_FACE_FRONT_BIT: VkStencilFaceFlagBits;
  const VK_STENCIL_FACE_BACK_BIT: VkStencilFaceFlagBits;
  const VK_STENCIL_FACE_FRONT_AND_BACK: VkStencilFaceFlagBits;
  const VK_STENCIL_FRONT_AND_BACK: VkStencilFaceFlagBits;
  

  
  /**
   * 
   * @member VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT
   * @member VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT
   */
  enum VkDescriptorPoolCreateFlagBits {
    VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT,
    VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT,
    
  }

  const VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT: VkDescriptorPoolCreateFlagBits;
  const VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT: VkDescriptorPoolCreateFlagBits;
  

  
  /**
   * 
   * @member VK_DEPENDENCY_BY_REGION_BIT
   * @member VK_DEPENDENCY_DEVICE_GROUP_BIT
   * @member VK_DEPENDENCY_VIEW_LOCAL_BIT
   * @member VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR
   * @member VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR
   */
  enum VkDependencyFlagBits {
    VK_DEPENDENCY_BY_REGION_BIT,
    VK_DEPENDENCY_DEVICE_GROUP_BIT,
    VK_DEPENDENCY_VIEW_LOCAL_BIT,
    VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR,
    VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR,
    
  }

  const VK_DEPENDENCY_BY_REGION_BIT: VkDependencyFlagBits;
  const VK_DEPENDENCY_DEVICE_GROUP_BIT: VkDependencyFlagBits;
  const VK_DEPENDENCY_VIEW_LOCAL_BIT: VkDependencyFlagBits;
  const VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR: VkDependencyFlagBits;
  const VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR: VkDependencyFlagBits;
  

  
  /**
   * 
   * @member VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR
   * @member VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR
   * @member VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR
   * @member VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR
   */
  enum VkDisplayPlaneAlphaFlagBitsKHR {
    VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR,
    VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR,
    VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR,
    VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR,
    
  }

  const VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR: VkDisplayPlaneAlphaFlagBitsKHR;
  const VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR: VkDisplayPlaneAlphaFlagBitsKHR;
  const VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR: VkDisplayPlaneAlphaFlagBitsKHR;
  const VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR: VkDisplayPlaneAlphaFlagBitsKHR;
  

  
  /**
   * 
   * @member VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR
   * @member VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR
   * @member VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR
   * @member VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR
   */
  enum VkCompositeAlphaFlagBitsKHR {
    VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR,
    VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR,
    VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR,
    VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR,
    
  }

  const VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR: VkCompositeAlphaFlagBitsKHR;
  const VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR: VkCompositeAlphaFlagBitsKHR;
  const VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR: VkCompositeAlphaFlagBitsKHR;
  const VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR: VkCompositeAlphaFlagBitsKHR;
  

  
  /**
   * 
   * @member VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR
   * @member VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR
   * @member VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR
   * @member VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR
   * @member VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR
   * @member VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR
   * @member VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR
   * @member VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR
   * @member VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR
   */
  enum VkSurfaceTransformFlagBitsKHR {
    VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR,
    VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR,
    VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR,
    VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR,
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR,
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR,
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR,
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR,
    VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR,
    
  }

  const VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR: VkSurfaceTransformFlagBitsKHR;
  const VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR: VkSurfaceTransformFlagBitsKHR;
  const VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR: VkSurfaceTransformFlagBitsKHR;
  const VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR: VkSurfaceTransformFlagBitsKHR;
  const VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR: VkSurfaceTransformFlagBitsKHR;
  const VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR: VkSurfaceTransformFlagBitsKHR;
  const VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR: VkSurfaceTransformFlagBitsKHR;
  const VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR: VkSurfaceTransformFlagBitsKHR;
  const VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR: VkSurfaceTransformFlagBitsKHR;
  

  
  /**
   * 
   * @member VK_SWAPCHAIN_IMAGE_USAGE_SHARED_BIT_ANDROID
   */
  enum VkSwapchainImageUsageFlagBitsANDROID {
    VK_SWAPCHAIN_IMAGE_USAGE_SHARED_BIT_ANDROID,
    
  }

  const VK_SWAPCHAIN_IMAGE_USAGE_SHARED_BIT_ANDROID: VkSwapchainImageUsageFlagBitsANDROID;
  

  
  /**
   * 
   * @member VK_DEBUG_REPORT_INFORMATION_BIT_EXT
   * @member VK_DEBUG_REPORT_WARNING_BIT_EXT
   * @member VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT
   * @member VK_DEBUG_REPORT_ERROR_BIT_EXT
   * @member VK_DEBUG_REPORT_DEBUG_BIT_EXT
   */
  enum VkDebugReportFlagBitsEXT {
    VK_DEBUG_REPORT_INFORMATION_BIT_EXT,
    VK_DEBUG_REPORT_WARNING_BIT_EXT,
    VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT,
    VK_DEBUG_REPORT_ERROR_BIT_EXT,
    VK_DEBUG_REPORT_DEBUG_BIT_EXT,
    
  }

  const VK_DEBUG_REPORT_INFORMATION_BIT_EXT: VkDebugReportFlagBitsEXT;
  const VK_DEBUG_REPORT_WARNING_BIT_EXT: VkDebugReportFlagBitsEXT;
  const VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT: VkDebugReportFlagBitsEXT;
  const VK_DEBUG_REPORT_ERROR_BIT_EXT: VkDebugReportFlagBitsEXT;
  const VK_DEBUG_REPORT_DEBUG_BIT_EXT: VkDebugReportFlagBitsEXT;
  

  
  /**
   * 
   * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV
   * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV
   * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV
   * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV
   */
  enum VkExternalMemoryHandleTypeFlagBitsNV {
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV,
    
  }

  const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV: VkExternalMemoryHandleTypeFlagBitsNV;
  const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV: VkExternalMemoryHandleTypeFlagBitsNV;
  const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV: VkExternalMemoryHandleTypeFlagBitsNV;
  const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV: VkExternalMemoryHandleTypeFlagBitsNV;
  

  
  /**
   * 
   * @member VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV
   * @member VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV
   * @member VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV
   */
  enum VkExternalMemoryFeatureFlagBitsNV {
    VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV,
    VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV,
    VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV,
    
  }

  const VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV: VkExternalMemoryFeatureFlagBitsNV;
  const VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV: VkExternalMemoryFeatureFlagBitsNV;
  const VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV: VkExternalMemoryFeatureFlagBitsNV;
  

  
  /**
   * 
   * @member VK_SUBGROUP_FEATURE_BASIC_BIT
   * @member VK_SUBGROUP_FEATURE_VOTE_BIT
   * @member VK_SUBGROUP_FEATURE_ARITHMETIC_BIT
   * @member VK_SUBGROUP_FEATURE_BALLOT_BIT
   * @member VK_SUBGROUP_FEATURE_SHUFFLE_BIT
   * @member VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT
   * @member VK_SUBGROUP_FEATURE_CLUSTERED_BIT
   * @member VK_SUBGROUP_FEATURE_QUAD_BIT
   * @member VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV
   */
  enum VkSubgroupFeatureFlagBits {
    VK_SUBGROUP_FEATURE_BASIC_BIT,
    VK_SUBGROUP_FEATURE_VOTE_BIT,
    VK_SUBGROUP_FEATURE_ARITHMETIC_BIT,
    VK_SUBGROUP_FEATURE_BALLOT_BIT,
    VK_SUBGROUP_FEATURE_SHUFFLE_BIT,
    VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT,
    VK_SUBGROUP_FEATURE_CLUSTERED_BIT,
    VK_SUBGROUP_FEATURE_QUAD_BIT,
    VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV,
    
  }

  const VK_SUBGROUP_FEATURE_BASIC_BIT: VkSubgroupFeatureFlagBits;
  const VK_SUBGROUP_FEATURE_VOTE_BIT: VkSubgroupFeatureFlagBits;
  const VK_SUBGROUP_FEATURE_ARITHMETIC_BIT: VkSubgroupFeatureFlagBits;
  const VK_SUBGROUP_FEATURE_BALLOT_BIT: VkSubgroupFeatureFlagBits;
  const VK_SUBGROUP_FEATURE_SHUFFLE_BIT: VkSubgroupFeatureFlagBits;
  const VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT: VkSubgroupFeatureFlagBits;
  const VK_SUBGROUP_FEATURE_CLUSTERED_BIT: VkSubgroupFeatureFlagBits;
  const VK_SUBGROUP_FEATURE_QUAD_BIT: VkSubgroupFeatureFlagBits;
  const VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV: VkSubgroupFeatureFlagBits;
  

  
  /**
   * 
   * @member VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NVX
   * @member VK_INDIRECT_COMMANDS_LAYOUT_USAGE_SPARSE_SEQUENCES_BIT_NVX
   * @member VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EMPTY_EXECUTIONS_BIT_NVX
   * @member VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NVX
   */
  enum VkIndirectCommandsLayoutUsageFlagBitsNVX {
    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NVX,
    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_SPARSE_SEQUENCES_BIT_NVX,
    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EMPTY_EXECUTIONS_BIT_NVX,
    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NVX,
    
  }

  const VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NVX: VkIndirectCommandsLayoutUsageFlagBitsNVX;
  const VK_INDIRECT_COMMANDS_LAYOUT_USAGE_SPARSE_SEQUENCES_BIT_NVX: VkIndirectCommandsLayoutUsageFlagBitsNVX;
  const VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EMPTY_EXECUTIONS_BIT_NVX: VkIndirectCommandsLayoutUsageFlagBitsNVX;
  const VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NVX: VkIndirectCommandsLayoutUsageFlagBitsNVX;
  

  
  /**
   * 
   * @member VK_OBJECT_ENTRY_USAGE_GRAPHICS_BIT_NVX
   * @member VK_OBJECT_ENTRY_USAGE_COMPUTE_BIT_NVX
   */
  enum VkObjectEntryUsageFlagBitsNVX {
    VK_OBJECT_ENTRY_USAGE_GRAPHICS_BIT_NVX,
    VK_OBJECT_ENTRY_USAGE_COMPUTE_BIT_NVX,
    
  }

  const VK_OBJECT_ENTRY_USAGE_GRAPHICS_BIT_NVX: VkObjectEntryUsageFlagBitsNVX;
  const VK_OBJECT_ENTRY_USAGE_COMPUTE_BIT_NVX: VkObjectEntryUsageFlagBitsNVX;
  

  
  /**
   * 
   * @member VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR
   * @member VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT
   */
  enum VkDescriptorSetLayoutCreateFlagBits {
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR,
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT,
    
  }

  const VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR: VkDescriptorSetLayoutCreateFlagBits;
  const VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT: VkDescriptorSetLayoutCreateFlagBits;
  

  
  /**
   * 
   * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT
   * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT
   * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT
   * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT
   * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT
   * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT
   * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT
   * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT
   * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID
   * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT
   * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT
   * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR
   * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR
   * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR
   * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR
   * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR
   * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR
   * @member VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR
   */
  enum VkExternalMemoryHandleTypeFlagBits {
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR,
    
  }

  const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT: VkExternalMemoryHandleTypeFlagBits;
  const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT: VkExternalMemoryHandleTypeFlagBits;
  const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT: VkExternalMemoryHandleTypeFlagBits;
  const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT: VkExternalMemoryHandleTypeFlagBits;
  const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT: VkExternalMemoryHandleTypeFlagBits;
  const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT: VkExternalMemoryHandleTypeFlagBits;
  const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT: VkExternalMemoryHandleTypeFlagBits;
  const VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT: VkExternalMemoryHandleTypeFlagBits;
  const VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID: VkExternalMemoryHandleTypeFlagBits;
  const VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT: VkExternalMemoryHandleTypeFlagBits;
  const VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT: VkExternalMemoryHandleTypeFlagBits;
  const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR: VkExternalMemoryHandleTypeFlagBits;
  const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR: VkExternalMemoryHandleTypeFlagBits;
  const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR: VkExternalMemoryHandleTypeFlagBits;
  const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR: VkExternalMemoryHandleTypeFlagBits;
  const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR: VkExternalMemoryHandleTypeFlagBits;
  const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR: VkExternalMemoryHandleTypeFlagBits;
  const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR: VkExternalMemoryHandleTypeFlagBits;
  

  
  /**
   * 
   * @member VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT
   * @member VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT
   * @member VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT
   * @member VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR
   * @member VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR
   * @member VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR
   */
  enum VkExternalMemoryFeatureFlagBits {
    VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT,
    VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT,
    VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT,
    VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR,
    VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR,
    VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR,
    
  }

  const VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT: VkExternalMemoryFeatureFlagBits;
  const VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT: VkExternalMemoryFeatureFlagBits;
  const VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT: VkExternalMemoryFeatureFlagBits;
  const VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR: VkExternalMemoryFeatureFlagBits;
  const VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR: VkExternalMemoryFeatureFlagBits;
  const VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR: VkExternalMemoryFeatureFlagBits;
  

  
  /**
   * 
   * @member VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT
   * @member VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT
   * @member VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT
   * @member VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT
   * @member VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT
   * @member VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR
   * @member VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR
   * @member VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR
   * @member VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR
   * @member VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR
   */
  enum VkExternalSemaphoreHandleTypeFlagBits {
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR,
    
  }

  const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT: VkExternalSemaphoreHandleTypeFlagBits;
  const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT: VkExternalSemaphoreHandleTypeFlagBits;
  const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT: VkExternalSemaphoreHandleTypeFlagBits;
  const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT: VkExternalSemaphoreHandleTypeFlagBits;
  const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT: VkExternalSemaphoreHandleTypeFlagBits;
  const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR: VkExternalSemaphoreHandleTypeFlagBits;
  const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR: VkExternalSemaphoreHandleTypeFlagBits;
  const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR: VkExternalSemaphoreHandleTypeFlagBits;
  const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR: VkExternalSemaphoreHandleTypeFlagBits;
  const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR: VkExternalSemaphoreHandleTypeFlagBits;
  

  
  /**
   * 
   * @member VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT
   * @member VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT
   * @member VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR
   * @member VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR
   */
  enum VkExternalSemaphoreFeatureFlagBits {
    VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT,
    VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT,
    VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR,
    VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR,
    
  }

  const VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT: VkExternalSemaphoreFeatureFlagBits;
  const VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT: VkExternalSemaphoreFeatureFlagBits;
  const VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR: VkExternalSemaphoreFeatureFlagBits;
  const VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR: VkExternalSemaphoreFeatureFlagBits;
  

  
  /**
   * 
   * @member VK_SEMAPHORE_IMPORT_TEMPORARY_BIT
   * @member VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR
   */
  enum VkSemaphoreImportFlagBits {
    VK_SEMAPHORE_IMPORT_TEMPORARY_BIT,
    VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR,
    
  }

  const VK_SEMAPHORE_IMPORT_TEMPORARY_BIT: VkSemaphoreImportFlagBits;
  const VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR: VkSemaphoreImportFlagBits;
  

  
  /**
   * 
   * @member VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT
   * @member VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT
   * @member VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT
   * @member VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT
   * @member VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR
   * @member VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR
   * @member VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR
   * @member VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR
   */
  enum VkExternalFenceHandleTypeFlagBits {
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR,
    
  }

  const VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT: VkExternalFenceHandleTypeFlagBits;
  const VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT: VkExternalFenceHandleTypeFlagBits;
  const VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT: VkExternalFenceHandleTypeFlagBits;
  const VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT: VkExternalFenceHandleTypeFlagBits;
  const VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR: VkExternalFenceHandleTypeFlagBits;
  const VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR: VkExternalFenceHandleTypeFlagBits;
  const VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR: VkExternalFenceHandleTypeFlagBits;
  const VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR: VkExternalFenceHandleTypeFlagBits;
  

  
  /**
   * 
   * @member VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT
   * @member VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT
   * @member VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR
   * @member VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR
   */
  enum VkExternalFenceFeatureFlagBits {
    VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT,
    VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT,
    VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR,
    VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR,
    
  }

  const VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT: VkExternalFenceFeatureFlagBits;
  const VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT: VkExternalFenceFeatureFlagBits;
  const VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR: VkExternalFenceFeatureFlagBits;
  const VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR: VkExternalFenceFeatureFlagBits;
  

  
  /**
   * 
   * @member VK_FENCE_IMPORT_TEMPORARY_BIT
   * @member VK_FENCE_IMPORT_TEMPORARY_BIT_KHR
   */
  enum VkFenceImportFlagBits {
    VK_FENCE_IMPORT_TEMPORARY_BIT,
    VK_FENCE_IMPORT_TEMPORARY_BIT_KHR,
    
  }

  const VK_FENCE_IMPORT_TEMPORARY_BIT: VkFenceImportFlagBits;
  const VK_FENCE_IMPORT_TEMPORARY_BIT_KHR: VkFenceImportFlagBits;
  

  
  /**
   * 
   * @member VK_SURFACE_COUNTER_VBLANK_EXT
   */
  enum VkSurfaceCounterFlagBitsEXT {
    VK_SURFACE_COUNTER_VBLANK_EXT,
    
  }

  const VK_SURFACE_COUNTER_VBLANK_EXT: VkSurfaceCounterFlagBitsEXT;
  

  
  /**
   * 
   * @member VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT
   * @member VK_PEER_MEMORY_FEATURE_COPY_DST_BIT
   * @member VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT
   * @member VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT
   * @member VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR
   * @member VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR
   * @member VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR
   * @member VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR
   */
  enum VkPeerMemoryFeatureFlagBits {
    VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT,
    VK_PEER_MEMORY_FEATURE_COPY_DST_BIT,
    VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT,
    VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT,
    VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR,
    VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR,
    VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR,
    VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR,
    
  }

  const VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT: VkPeerMemoryFeatureFlagBits;
  const VK_PEER_MEMORY_FEATURE_COPY_DST_BIT: VkPeerMemoryFeatureFlagBits;
  const VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT: VkPeerMemoryFeatureFlagBits;
  const VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT: VkPeerMemoryFeatureFlagBits;
  const VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR: VkPeerMemoryFeatureFlagBits;
  const VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR: VkPeerMemoryFeatureFlagBits;
  const VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR: VkPeerMemoryFeatureFlagBits;
  const VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR: VkPeerMemoryFeatureFlagBits;
  

  
  /**
   * 
   * @member VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT
   * @member VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR
   */
  enum VkMemoryAllocateFlagBits {
    VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT,
    VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR,
    
  }

  const VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT: VkMemoryAllocateFlagBits;
  const VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR: VkMemoryAllocateFlagBits;
  

  
  /**
   * 
   * @member VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR
   * @member VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR
   * @member VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR
   * @member VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR
   */
  enum VkDeviceGroupPresentModeFlagBitsKHR {
    VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR,
    VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR,
    VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR,
    VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR,
    
  }

  const VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR: VkDeviceGroupPresentModeFlagBitsKHR;
  const VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR: VkDeviceGroupPresentModeFlagBitsKHR;
  const VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR: VkDeviceGroupPresentModeFlagBitsKHR;
  const VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR: VkDeviceGroupPresentModeFlagBitsKHR;
  

  
  /**
   * 
   * @member VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR
   * @member VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR
   * @member VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR
   */
  enum VkSwapchainCreateFlagBitsKHR {
    VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR,
    VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR,
    VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR,
    
  }

  const VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR: VkSwapchainCreateFlagBitsKHR;
  const VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR: VkSwapchainCreateFlagBitsKHR;
  const VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR: VkSwapchainCreateFlagBitsKHR;
  

  
  /**
   * 
   * @member VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX
   * @member VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX
   * @member VK_SUBPASS_DESCRIPTION_RESERVED_2_BIT_QCOM
   * @member VK_SUBPASS_DESCRIPTION_RESERVED_3_BIT_QCOM
   */
  enum VkSubpassDescriptionFlagBits {
    VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX,
    VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX,
    VK_SUBPASS_DESCRIPTION_RESERVED_2_BIT_QCOM,
    VK_SUBPASS_DESCRIPTION_RESERVED_3_BIT_QCOM,
    
  }

  const VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX: VkSubpassDescriptionFlagBits;
  const VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX: VkSubpassDescriptionFlagBits;
  const VK_SUBPASS_DESCRIPTION_RESERVED_2_BIT_QCOM: VkSubpassDescriptionFlagBits;
  const VK_SUBPASS_DESCRIPTION_RESERVED_3_BIT_QCOM: VkSubpassDescriptionFlagBits;
  

  
  /**
   * 
   * @member VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT
   * @member VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT
   * @member VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT
   * @member VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT
   */
  enum VkDebugUtilsMessageSeverityFlagBitsEXT {
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT,
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT,
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT,
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT,
    
  }

  const VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT: VkDebugUtilsMessageSeverityFlagBitsEXT;
  const VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT: VkDebugUtilsMessageSeverityFlagBitsEXT;
  const VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT: VkDebugUtilsMessageSeverityFlagBitsEXT;
  const VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT: VkDebugUtilsMessageSeverityFlagBitsEXT;
  

  
  /**
   * 
   * @member VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT
   * @member VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT
   * @member VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT
   */
  enum VkDebugUtilsMessageTypeFlagBitsEXT {
    VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT,
    VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT,
    VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT,
    
  }

  const VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT: VkDebugUtilsMessageTypeFlagBitsEXT;
  const VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT: VkDebugUtilsMessageTypeFlagBitsEXT;
  const VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT: VkDebugUtilsMessageTypeFlagBitsEXT;
  

  
  /**
   * 
   * @member VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT
   * @member VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT
   * @member VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT
   * @member VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT
   */
  enum VkDescriptorBindingFlagBitsEXT {
    VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT,
    VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT,
    VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT,
    VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT,
    
  }

  const VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT: VkDescriptorBindingFlagBitsEXT;
  const VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT: VkDescriptorBindingFlagBitsEXT;
  const VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT: VkDescriptorBindingFlagBitsEXT;
  const VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT: VkDescriptorBindingFlagBitsEXT;
  

  
  /**
   * 
   * @member VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT
   */
  enum VkConditionalRenderingFlagBitsEXT {
    VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT,
    
  }

  const VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT: VkConditionalRenderingFlagBitsEXT;
  

  
  /**
   * 
   * @member VK_RESOLVE_MODE_NONE_KHR
   * @member VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR
   * @member VK_RESOLVE_MODE_AVERAGE_BIT_KHR
   * @member VK_RESOLVE_MODE_MIN_BIT_KHR
   * @member VK_RESOLVE_MODE_MAX_BIT_KHR
   */
  enum VkResolveModeFlagBitsKHR {
    VK_RESOLVE_MODE_NONE_KHR,
    VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR,
    VK_RESOLVE_MODE_AVERAGE_BIT_KHR,
    VK_RESOLVE_MODE_MIN_BIT_KHR,
    VK_RESOLVE_MODE_MAX_BIT_KHR,
    
  }

  const VK_RESOLVE_MODE_NONE_KHR: VkResolveModeFlagBitsKHR;
  const VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR: VkResolveModeFlagBitsKHR;
  const VK_RESOLVE_MODE_AVERAGE_BIT_KHR: VkResolveModeFlagBitsKHR;
  const VK_RESOLVE_MODE_MIN_BIT_KHR: VkResolveModeFlagBitsKHR;
  const VK_RESOLVE_MODE_MAX_BIT_KHR: VkResolveModeFlagBitsKHR;
  

  
  /**
   * 
   * @member VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV
   * @member VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV
   * @member VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV
   * @member VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV
   */
  enum VkGeometryInstanceFlagBitsNV {
    VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV,
    VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV,
    VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV,
    VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV,
    
  }

  const VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV: VkGeometryInstanceFlagBitsNV;
  const VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV: VkGeometryInstanceFlagBitsNV;
  const VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV: VkGeometryInstanceFlagBitsNV;
  const VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV: VkGeometryInstanceFlagBitsNV;
  

  
  /**
   * 
   * @member VK_GEOMETRY_OPAQUE_BIT_NV
   * @member VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV
   */
  enum VkGeometryFlagBitsNV {
    VK_GEOMETRY_OPAQUE_BIT_NV,
    VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV,
    
  }

  const VK_GEOMETRY_OPAQUE_BIT_NV: VkGeometryFlagBitsNV;
  const VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV: VkGeometryFlagBitsNV;
  

  
  /**
   * 
   * @member VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV
   * @member VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV
   * @member VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV
   * @member VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV
   * @member VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV
   */
  enum VkBuildAccelerationStructureFlagBitsNV {
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV,
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV,
    VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV,
    VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV,
    VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV,
    
  }

  const VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV: VkBuildAccelerationStructureFlagBitsNV;
  const VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV: VkBuildAccelerationStructureFlagBitsNV;
  const VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV: VkBuildAccelerationStructureFlagBitsNV;
  const VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV: VkBuildAccelerationStructureFlagBitsNV;
  const VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV: VkBuildAccelerationStructureFlagBitsNV;
  

  
  /**
   * 
   * @member VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR
   */
  enum VkFramebufferCreateFlagBits {
    VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR,
    
  }

  const VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR: VkFramebufferCreateFlagBits;
  

  
  /**
   * 
   * @member VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT
   * @member VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT
   * @member VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT
   */
  enum VkPipelineCreationFeedbackFlagBitsEXT {
    VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT,
    VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT,
    VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT,
    
  }

  const VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT: VkPipelineCreationFeedbackFlagBitsEXT;
  const VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT: VkPipelineCreationFeedbackFlagBitsEXT;
  const VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT: VkPipelineCreationFeedbackFlagBitsEXT;
  

  
  /**
   * 
   */
  enum VkShaderCorePropertiesFlagBitsAMD {
    
  }

  

  
  /**
   * 
   * @member VK_SHADER_MODULE_CREATE_RESERVED_0_BIT_NV
   */
  enum VkShaderModuleCreateFlagBits {
    VK_SHADER_MODULE_CREATE_RESERVED_0_BIT_NV,
    
  }

  const VK_SHADER_MODULE_CREATE_RESERVED_0_BIT_NV: VkShaderModuleCreateFlagBits;
  

  
  /**
   * 
   */
  enum VkPipelineCompilerControlFlagBitsAMD {
    
  }

  

  

  
  /**
   * 
   */
  interface VkDebugUtilsMessengerEXT {

    /**
     * Memory reference to the original vulkan handle.
     */
    address: bigint;

  }

  interface VkDebugUtilsMessengerEXTConstructor {
    readonly prototype: VkDebugUtilsMessengerEXT;
    new(): VkDebugUtilsMessengerEXT;

  }

  var VkDebugUtilsMessengerEXT: VkDebugUtilsMessengerEXTConstructor;

  
  /**
   * 
   */
  interface VkDebugReportCallbackEXT {

    /**
     * Memory reference to the original vulkan handle.
     */
    address: bigint;

  }

  interface VkDebugReportCallbackEXTConstructor {
    readonly prototype: VkDebugReportCallbackEXT;
    new(): VkDebugReportCallbackEXT;

  }

  var VkDebugReportCallbackEXT: VkDebugReportCallbackEXTConstructor;

  
  /**
   * 
   */
  interface VkSwapchainKHR {

    /**
     * Memory reference to the original vulkan handle.
     */
    address: bigint;

  }

  interface VkSwapchainKHRConstructor {
    readonly prototype: VkSwapchainKHR;
    new(): VkSwapchainKHR;

  }

  var VkSwapchainKHR: VkSwapchainKHRConstructor;

  
  /**
   * 
   */
  interface VkSurfaceKHR {

    /**
     * Memory reference to the original vulkan handle.
     */
    address: bigint;

  }

  interface VkSurfaceKHRConstructor {
    readonly prototype: VkSurfaceKHR;
    new(): VkSurfaceKHR;

  }

  var VkSurfaceKHR: VkSurfaceKHRConstructor;

  
  /**
   * 
   */
  interface VkDisplayModeKHR {

    /**
     * Memory reference to the original vulkan handle.
     */
    address: bigint;

  }

  interface VkDisplayModeKHRConstructor {
    readonly prototype: VkDisplayModeKHR;
    new(): VkDisplayModeKHR;

  }

  var VkDisplayModeKHR: VkDisplayModeKHRConstructor;

  
  /**
   * 
   */
  interface VkDisplayKHR {

    /**
     * Memory reference to the original vulkan handle.
     */
    address: bigint;

  }

  interface VkDisplayKHRConstructor {
    readonly prototype: VkDisplayKHR;
    new(): VkDisplayKHR;

  }

  var VkDisplayKHR: VkDisplayKHRConstructor;

  
  /**
   * 
   */
  interface VkPerformanceConfigurationINTEL {

    /**
     * Memory reference to the original vulkan handle.
     */
    address: bigint;

  }

  interface VkPerformanceConfigurationINTELConstructor {
    readonly prototype: VkPerformanceConfigurationINTEL;
    new(): VkPerformanceConfigurationINTEL;

  }

  var VkPerformanceConfigurationINTEL: VkPerformanceConfigurationINTELConstructor;

  
  /**
   * 
   */
  interface VkAccelerationStructureNV {

    /**
     * Memory reference to the original vulkan handle.
     */
    address: bigint;

  }

  interface VkAccelerationStructureNVConstructor {
    readonly prototype: VkAccelerationStructureNV;
    new(): VkAccelerationStructureNV;

  }

  var VkAccelerationStructureNV: VkAccelerationStructureNVConstructor;

  
  /**
   * 
   */
  interface VkValidationCacheEXT {

    /**
     * Memory reference to the original vulkan handle.
     */
    address: bigint;

  }

  interface VkValidationCacheEXTConstructor {
    readonly prototype: VkValidationCacheEXT;
    new(): VkValidationCacheEXT;

  }

  var VkValidationCacheEXT: VkValidationCacheEXTConstructor;

  
  /**
   * 
   */
  interface VkSamplerYcbcrConversion {

    /**
     * Memory reference to the original vulkan handle.
     */
    address: bigint;

  }

  interface VkSamplerYcbcrConversionConstructor {
    readonly prototype: VkSamplerYcbcrConversion;
    new(): VkSamplerYcbcrConversion;

  }

  var VkSamplerYcbcrConversion: VkSamplerYcbcrConversionConstructor;

  
  /**
   * 
   */
  interface VkDescriptorUpdateTemplate {

    /**
     * Memory reference to the original vulkan handle.
     */
    address: bigint;

  }

  interface VkDescriptorUpdateTemplateConstructor {
    readonly prototype: VkDescriptorUpdateTemplate;
    new(): VkDescriptorUpdateTemplate;

  }

  var VkDescriptorUpdateTemplate: VkDescriptorUpdateTemplateConstructor;

  
  /**
   * 
   */
  interface VkIndirectCommandsLayoutNVX {

    /**
     * Memory reference to the original vulkan handle.
     */
    address: bigint;

  }

  interface VkIndirectCommandsLayoutNVXConstructor {
    readonly prototype: VkIndirectCommandsLayoutNVX;
    new(): VkIndirectCommandsLayoutNVX;

  }

  var VkIndirectCommandsLayoutNVX: VkIndirectCommandsLayoutNVXConstructor;

  
  /**
   * 
   */
  interface VkObjectTableNVX {

    /**
     * Memory reference to the original vulkan handle.
     */
    address: bigint;

  }

  interface VkObjectTableNVXConstructor {
    readonly prototype: VkObjectTableNVX;
    new(): VkObjectTableNVX;

  }

  var VkObjectTableNVX: VkObjectTableNVXConstructor;

  
  /**
   * 
   */
  interface VkPipelineCache {

    /**
     * Memory reference to the original vulkan handle.
     */
    address: bigint;

  }

  interface VkPipelineCacheConstructor {
    readonly prototype: VkPipelineCache;
    new(): VkPipelineCache;

  }

  var VkPipelineCache: VkPipelineCacheConstructor;

  
  /**
   * 
   */
  interface VkRenderPass {

    /**
     * Memory reference to the original vulkan handle.
     */
    address: bigint;

  }

  interface VkRenderPassConstructor {
    readonly prototype: VkRenderPass;
    new(): VkRenderPass;

  }

  var VkRenderPass: VkRenderPassConstructor;

  
  /**
   * 
   */
  interface VkFramebuffer {

    /**
     * Memory reference to the original vulkan handle.
     */
    address: bigint;

  }

  interface VkFramebufferConstructor {
    readonly prototype: VkFramebuffer;
    new(): VkFramebuffer;

  }

  var VkFramebuffer: VkFramebufferConstructor;

  
  /**
   * 
   */
  interface VkQueryPool {

    /**
     * Memory reference to the original vulkan handle.
     */
    address: bigint;

  }

  interface VkQueryPoolConstructor {
    readonly prototype: VkQueryPool;
    new(): VkQueryPool;

  }

  var VkQueryPool: VkQueryPoolConstructor;

  
  /**
   * 
   */
  interface VkEvent {

    /**
     * Memory reference to the original vulkan handle.
     */
    address: bigint;

  }

  interface VkEventConstructor {
    readonly prototype: VkEvent;
    new(): VkEvent;

  }

  var VkEvent: VkEventConstructor;

  
  /**
   * 
   */
  interface VkSemaphore {

    /**
     * Memory reference to the original vulkan handle.
     */
    address: bigint;

  }

  interface VkSemaphoreConstructor {
    readonly prototype: VkSemaphore;
    new(): VkSemaphore;

  }

  var VkSemaphore: VkSemaphoreConstructor;

  
  /**
   * 
   */
  interface VkFence {

    /**
     * Memory reference to the original vulkan handle.
     */
    address: bigint;

  }

  interface VkFenceConstructor {
    readonly prototype: VkFence;
    new(): VkFence;

  }

  var VkFence: VkFenceConstructor;

  
  /**
   * 
   */
  interface VkDescriptorPool {

    /**
     * Memory reference to the original vulkan handle.
     */
    address: bigint;

  }

  interface VkDescriptorPoolConstructor {
    readonly prototype: VkDescriptorPool;
    new(): VkDescriptorPool;

  }

  var VkDescriptorPool: VkDescriptorPoolConstructor;

  
  /**
   * 
   */
  interface VkDescriptorSetLayout {

    /**
     * Memory reference to the original vulkan handle.
     */
    address: bigint;

  }

  interface VkDescriptorSetLayoutConstructor {
    readonly prototype: VkDescriptorSetLayout;
    new(): VkDescriptorSetLayout;

  }

  var VkDescriptorSetLayout: VkDescriptorSetLayoutConstructor;

  
  /**
   * 
   */
  interface VkDescriptorSet {

    /**
     * Memory reference to the original vulkan handle.
     */
    address: bigint;

  }

  interface VkDescriptorSetConstructor {
    readonly prototype: VkDescriptorSet;
    new(): VkDescriptorSet;

  }

  var VkDescriptorSet: VkDescriptorSetConstructor;

  
  /**
   * 
   */
  interface VkSampler {

    /**
     * Memory reference to the original vulkan handle.
     */
    address: bigint;

  }

  interface VkSamplerConstructor {
    readonly prototype: VkSampler;
    new(): VkSampler;

  }

  var VkSampler: VkSamplerConstructor;

  
  /**
   * 
   */
  interface VkPipelineLayout {

    /**
     * Memory reference to the original vulkan handle.
     */
    address: bigint;

  }

  interface VkPipelineLayoutConstructor {
    readonly prototype: VkPipelineLayout;
    new(): VkPipelineLayout;

  }

  var VkPipelineLayout: VkPipelineLayoutConstructor;

  
  /**
   * 
   */
  interface VkPipeline {

    /**
     * Memory reference to the original vulkan handle.
     */
    address: bigint;

  }

  interface VkPipelineConstructor {
    readonly prototype: VkPipeline;
    new(): VkPipeline;

  }

  var VkPipeline: VkPipelineConstructor;

  
  /**
   * 
   */
  interface VkShaderModule {

    /**
     * Memory reference to the original vulkan handle.
     */
    address: bigint;

  }

  interface VkShaderModuleConstructor {
    readonly prototype: VkShaderModule;
    new(): VkShaderModule;

  }

  var VkShaderModule: VkShaderModuleConstructor;

  
  /**
   * 
   */
  interface VkImageView {

    /**
     * Memory reference to the original vulkan handle.
     */
    address: bigint;

  }

  interface VkImageViewConstructor {
    readonly prototype: VkImageView;
    new(): VkImageView;

  }

  var VkImageView: VkImageViewConstructor;

  
  /**
   * 
   */
  interface VkImage {

    /**
     * Memory reference to the original vulkan handle.
     */
    address: bigint;

  }

  interface VkImageConstructor {
    readonly prototype: VkImage;
    new(): VkImage;

  }

  var VkImage: VkImageConstructor;

  
  /**
   * 
   */
  interface VkBufferView {

    /**
     * Memory reference to the original vulkan handle.
     */
    address: bigint;

  }

  interface VkBufferViewConstructor {
    readonly prototype: VkBufferView;
    new(): VkBufferView;

  }

  var VkBufferView: VkBufferViewConstructor;

  
  /**
   * 
   */
  interface VkBuffer {

    /**
     * Memory reference to the original vulkan handle.
     */
    address: bigint;

  }

  interface VkBufferConstructor {
    readonly prototype: VkBuffer;
    new(): VkBuffer;

  }

  var VkBuffer: VkBufferConstructor;

  
  /**
   * 
   */
  interface VkCommandPool {

    /**
     * Memory reference to the original vulkan handle.
     */
    address: bigint;

  }

  interface VkCommandPoolConstructor {
    readonly prototype: VkCommandPool;
    new(): VkCommandPool;

  }

  var VkCommandPool: VkCommandPoolConstructor;

  
  /**
   * 
   */
  interface VkDeviceMemory {

    /**
     * Memory reference to the original vulkan handle.
     */
    address: bigint;

  }

  interface VkDeviceMemoryConstructor {
    readonly prototype: VkDeviceMemory;
    new(): VkDeviceMemory;

  }

  var VkDeviceMemory: VkDeviceMemoryConstructor;

  
  /**
   * 
   */
  interface VkCommandBuffer {

    /**
     * Memory reference to the original vulkan handle.
     */
    address: bigint;

  }

  interface VkCommandBufferConstructor {
    readonly prototype: VkCommandBuffer;
    new(): VkCommandBuffer;

  }

  var VkCommandBuffer: VkCommandBufferConstructor;

  
  /**
   * 
   */
  interface VkQueue {

    /**
     * Memory reference to the original vulkan handle.
     */
    address: bigint;

  }

  interface VkQueueConstructor {
    readonly prototype: VkQueue;
    new(): VkQueue;

  }

  var VkQueue: VkQueueConstructor;

  
  /**
   * 
   */
  interface VkDevice {

    /**
     * Memory reference to the original vulkan handle.
     */
    address: bigint;

  }

  interface VkDeviceConstructor {
    readonly prototype: VkDevice;
    new(): VkDevice;

  }

  var VkDevice: VkDeviceConstructor;

  
  /**
   * 
   */
  interface VkPhysicalDevice {

    /**
     * Memory reference to the original vulkan handle.
     */
    address: bigint;

  }

  interface VkPhysicalDeviceConstructor {
    readonly prototype: VkPhysicalDevice;
    new(): VkPhysicalDevice;

  }

  var VkPhysicalDevice: VkPhysicalDeviceConstructor;

  
  /**
   * 
   */
  interface VkInstance {

    /**
     * Memory reference to the original vulkan handle.
     */
    address: bigint;

  }

  interface VkInstanceConstructor {
    readonly prototype: VkInstance;
    new(): VkInstance;

  }

  var VkInstance: VkInstanceConstructor;

  

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  /**
   * 
   */
  interface VkPipelineExecutableStatisticValueKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly b32: boolean;

    /**
     *
     */
    readonly i64: bigint | number;

    /**
     *
     */
    readonly u64: bigint | number;

    /**
     *
     */
    readonly f64: bigint | number;

  }

  interface VkPipelineExecutableStatisticValueKHRInitializer {
    
    /**
     *
     */
    readonly b32?: boolean;

    /**
     *
     */
    readonly i64?: bigint | number;

    /**
     *
     */
    readonly u64?: bigint | number;

    /**
     *
     */
    readonly f64?: bigint | number;
  }

  interface VkPipelineExecutableStatisticValueKHRConstructor {
    readonly prototype: VkPipelineExecutableStatisticValueKHR;
    new(param?: VkPipelineExecutableStatisticValueKHRInitializer | null): VkPipelineExecutableStatisticValueKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPipelineExecutableStatisticValueKHR: VkPipelineExecutableStatisticValueKHRConstructor;

  
  
  /**
   * 
   */
  interface VkPerformanceValueDataINTEL {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    value32: number;

    /**
     *
     */
    value64: bigint | number;

    /**
     *
     */
    valueFloat: number;

    /**
     *
     */
    valueBool: boolean;

    /**
     *
     */
    valueString: string | null;

  }

  interface VkPerformanceValueDataINTELInitializer {
    
    /**
     *
     */
    value32?: number;

    /**
     *
     */
    value64?: bigint | number;

    /**
     *
     */
    valueFloat?: number;

    /**
     *
     */
    valueBool?: boolean;

    /**
     *
     */
    valueString?: string | null;
  }

  interface VkPerformanceValueDataINTELConstructor {
    readonly prototype: VkPerformanceValueDataINTEL;
    new(param?: VkPerformanceValueDataINTELInitializer | null): VkPerformanceValueDataINTEL;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPerformanceValueDataINTEL: VkPerformanceValueDataINTELConstructor;

  
  
  /**
   * 
   */
  interface VkClearValue {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    color: VkClearColorValue | null;

    /**
     *
     */
    depthStencil: VkClearDepthStencilValue | null;

  }

  interface VkClearValueInitializer {
    
    /**
     *
     */
    color?: VkClearColorValue | null;

    /**
     *
     */
    depthStencil?: VkClearDepthStencilValue | null;
  }

  interface VkClearValueConstructor {
    readonly prototype: VkClearValue;
    new(param?: VkClearValueInitializer | null): VkClearValue;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkClearValue: VkClearValueConstructor;

  
  
  /**
   * 
   */
  interface VkClearColorValue {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    float32: number[] | null;

    /**
     *
     */
    int32: number[] | null;

    /**
     *
     */
    uint32: number[] | null;

  }

  interface VkClearColorValueInitializer {
    
    /**
     *
     */
    float32?: number[] | null;

    /**
     *
     */
    int32?: number[] | null;

    /**
     *
     */
    uint32?: number[] | null;
  }

  interface VkClearColorValueConstructor {
    readonly prototype: VkClearColorValue;
    new(param?: VkClearColorValueInitializer | null): VkClearColorValue;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkClearColorValue: VkClearColorValueConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceCoherentMemoryFeaturesAMD {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    deviceCoherentMemory: boolean;

  }

  interface VkPhysicalDeviceCoherentMemoryFeaturesAMDInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    deviceCoherentMemory?: boolean;
  }

  interface VkPhysicalDeviceCoherentMemoryFeaturesAMDConstructor {
    readonly prototype: VkPhysicalDeviceCoherentMemoryFeaturesAMD;
    new(param?: VkPhysicalDeviceCoherentMemoryFeaturesAMDInitializer | null): VkPhysicalDeviceCoherentMemoryFeaturesAMD;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceCoherentMemoryFeaturesAMD: VkPhysicalDeviceCoherentMemoryFeaturesAMDConstructor;

  
  
  /**
   * 
   */
  interface VkPipelineCompilerControlCreateInfoAMD {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    compilerControlFlags: VkPipelineCompilerControlFlagBitsAMD;

  }

  interface VkPipelineCompilerControlCreateInfoAMDInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    compilerControlFlags?: VkPipelineCompilerControlFlagBitsAMD;
  }

  interface VkPipelineCompilerControlCreateInfoAMDConstructor {
    readonly prototype: VkPipelineCompilerControlCreateInfoAMD;
    new(param?: VkPipelineCompilerControlCreateInfoAMDInitializer | null): VkPipelineCompilerControlCreateInfoAMD;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPipelineCompilerControlCreateInfoAMD: VkPipelineCompilerControlCreateInfoAMDConstructor;

  
  
  /**
   * 
   */
  interface VkPipelineRasterizationLineStateCreateInfoEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    lineRasterizationMode: VkLineRasterizationModeEXT;

    /**
     *
     */
    stippledLineEnable: boolean;

    /**
     *
     */
    lineStippleFactor: number;

    /**
     *
     */
    lineStipplePattern: number;

  }

  interface VkPipelineRasterizationLineStateCreateInfoEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    lineRasterizationMode?: VkLineRasterizationModeEXT;

    /**
     *
     */
    stippledLineEnable?: boolean;

    /**
     *
     */
    lineStippleFactor?: number;

    /**
     *
     */
    lineStipplePattern?: number;
  }

  interface VkPipelineRasterizationLineStateCreateInfoEXTConstructor {
    readonly prototype: VkPipelineRasterizationLineStateCreateInfoEXT;
    new(param?: VkPipelineRasterizationLineStateCreateInfoEXTInitializer | null): VkPipelineRasterizationLineStateCreateInfoEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPipelineRasterizationLineStateCreateInfoEXT: VkPipelineRasterizationLineStateCreateInfoEXTConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceLineRasterizationPropertiesEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly lineSubPixelPrecisionBits: number;

  }

  interface VkPhysicalDeviceLineRasterizationPropertiesEXTInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly lineSubPixelPrecisionBits?: number;
  }

  interface VkPhysicalDeviceLineRasterizationPropertiesEXTConstructor {
    readonly prototype: VkPhysicalDeviceLineRasterizationPropertiesEXT;
    new(param?: VkPhysicalDeviceLineRasterizationPropertiesEXTInitializer | null): VkPhysicalDeviceLineRasterizationPropertiesEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceLineRasterizationPropertiesEXT: VkPhysicalDeviceLineRasterizationPropertiesEXTConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceLineRasterizationFeaturesEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    rectangularLines: boolean;

    /**
     *
     */
    bresenhamLines: boolean;

    /**
     *
     */
    smoothLines: boolean;

    /**
     *
     */
    stippledRectangularLines: boolean;

    /**
     *
     */
    stippledBresenhamLines: boolean;

    /**
     *
     */
    stippledSmoothLines: boolean;

  }

  interface VkPhysicalDeviceLineRasterizationFeaturesEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    rectangularLines?: boolean;

    /**
     *
     */
    bresenhamLines?: boolean;

    /**
     *
     */
    smoothLines?: boolean;

    /**
     *
     */
    stippledRectangularLines?: boolean;

    /**
     *
     */
    stippledBresenhamLines?: boolean;

    /**
     *
     */
    stippledSmoothLines?: boolean;
  }

  interface VkPhysicalDeviceLineRasterizationFeaturesEXTConstructor {
    readonly prototype: VkPhysicalDeviceLineRasterizationFeaturesEXT;
    new(param?: VkPhysicalDeviceLineRasterizationFeaturesEXTInitializer | null): VkPhysicalDeviceLineRasterizationFeaturesEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceLineRasterizationFeaturesEXT: VkPhysicalDeviceLineRasterizationFeaturesEXTConstructor;

  
  
  /**
   * 
   */
  interface VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly requiredSubgroupSize: number;

  }

  interface VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXTInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly requiredSubgroupSize?: number;
  }

  interface VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXTConstructor {
    readonly prototype: VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT;
    new(param?: VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXTInitializer | null): VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT: VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXTConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceSubgroupSizeControlPropertiesEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly minSubgroupSize: number;

    /**
     *
     */
    readonly maxSubgroupSize: number;

    /**
     *
     */
    readonly maxComputeWorkgroupSubgroups: number;

    /**
     *
     */
    readonly requiredSubgroupSizeStages: VkShaderStageFlagBits;

  }

  interface VkPhysicalDeviceSubgroupSizeControlPropertiesEXTInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly minSubgroupSize?: number;

    /**
     *
     */
    readonly maxSubgroupSize?: number;

    /**
     *
     */
    readonly maxComputeWorkgroupSubgroups?: number;

    /**
     *
     */
    readonly requiredSubgroupSizeStages?: VkShaderStageFlagBits;
  }

  interface VkPhysicalDeviceSubgroupSizeControlPropertiesEXTConstructor {
    readonly prototype: VkPhysicalDeviceSubgroupSizeControlPropertiesEXT;
    new(param?: VkPhysicalDeviceSubgroupSizeControlPropertiesEXTInitializer | null): VkPhysicalDeviceSubgroupSizeControlPropertiesEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceSubgroupSizeControlPropertiesEXT: VkPhysicalDeviceSubgroupSizeControlPropertiesEXTConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceSubgroupSizeControlFeaturesEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    subgroupSizeControl: boolean;

    /**
     *
     */
    computeFullSubgroups: boolean;

  }

  interface VkPhysicalDeviceSubgroupSizeControlFeaturesEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    subgroupSizeControl?: boolean;

    /**
     *
     */
    computeFullSubgroups?: boolean;
  }

  interface VkPhysicalDeviceSubgroupSizeControlFeaturesEXTConstructor {
    readonly prototype: VkPhysicalDeviceSubgroupSizeControlFeaturesEXT;
    new(param?: VkPhysicalDeviceSubgroupSizeControlFeaturesEXTInitializer | null): VkPhysicalDeviceSubgroupSizeControlFeaturesEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceSubgroupSizeControlFeaturesEXT: VkPhysicalDeviceSubgroupSizeControlFeaturesEXTConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly storageTexelBufferOffsetAlignmentBytes: bigint | number;

    /**
     *
     */
    readonly storageTexelBufferOffsetSingleTexelAlignment: boolean;

    /**
     *
     */
    readonly uniformTexelBufferOffsetAlignmentBytes: bigint | number;

    /**
     *
     */
    readonly uniformTexelBufferOffsetSingleTexelAlignment: boolean;

  }

  interface VkPhysicalDeviceTexelBufferAlignmentPropertiesEXTInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly storageTexelBufferOffsetAlignmentBytes?: bigint | number;

    /**
     *
     */
    readonly storageTexelBufferOffsetSingleTexelAlignment?: boolean;

    /**
     *
     */
    readonly uniformTexelBufferOffsetAlignmentBytes?: bigint | number;

    /**
     *
     */
    readonly uniformTexelBufferOffsetSingleTexelAlignment?: boolean;
  }

  interface VkPhysicalDeviceTexelBufferAlignmentPropertiesEXTConstructor {
    readonly prototype: VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT;
    new(param?: VkPhysicalDeviceTexelBufferAlignmentPropertiesEXTInitializer | null): VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT: VkPhysicalDeviceTexelBufferAlignmentPropertiesEXTConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    texelBufferAlignment: boolean;

  }

  interface VkPhysicalDeviceTexelBufferAlignmentFeaturesEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    texelBufferAlignment?: boolean;
  }

  interface VkPhysicalDeviceTexelBufferAlignmentFeaturesEXTConstructor {
    readonly prototype: VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT;
    new(param?: VkPhysicalDeviceTexelBufferAlignmentFeaturesEXTInitializer | null): VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT: VkPhysicalDeviceTexelBufferAlignmentFeaturesEXTConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    shaderDemoteToHelperInvocation: boolean;

  }

  interface VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    shaderDemoteToHelperInvocation?: boolean;
  }

  interface VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXTConstructor {
    readonly prototype: VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT;
    new(param?: VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXTInitializer | null): VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT: VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXTConstructor;

  
  
  /**
   * 
   */
  interface VkPipelineExecutableInternalRepresentationKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    name: string | null;

    /**
     *
     */
    description: string | null;

    /**
     *
     */
    isText: boolean;

    /**
     *
     */
    dataSize: bigint | number;

    /**
     *
     */
    pData: ArrayBuffer | null;

  }

  interface VkPipelineExecutableInternalRepresentationKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    name?: string | null;

    /**
     *
     */
    description?: string | null;

    /**
     *
     */
    isText?: boolean;

    /**
     *
     */
    dataSize?: bigint | number;

    /**
     *
     */
    pData?: ArrayBuffer | null;
  }

  interface VkPipelineExecutableInternalRepresentationKHRConstructor {
    readonly prototype: VkPipelineExecutableInternalRepresentationKHR;
    new(param?: VkPipelineExecutableInternalRepresentationKHRInitializer | null): VkPipelineExecutableInternalRepresentationKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPipelineExecutableInternalRepresentationKHR: VkPipelineExecutableInternalRepresentationKHRConstructor;

  
  
  /**
   * 
   */
  interface VkPipelineExecutableStatisticKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly name: string | null;

    /**
     *
     */
    readonly description: string | null;

    /**
     *
     */
    readonly format: VkPipelineExecutableStatisticFormatKHR;

    /**
     *
     */
    readonly value: VkPipelineExecutableStatisticValueKHR | null;

  }

  interface VkPipelineExecutableStatisticKHRInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly name?: string | null;

    /**
     *
     */
    readonly description?: string | null;

    /**
     *
     */
    readonly format?: VkPipelineExecutableStatisticFormatKHR;

    /**
     *
     */
    readonly value?: VkPipelineExecutableStatisticValueKHR | null;
  }

  interface VkPipelineExecutableStatisticKHRConstructor {
    readonly prototype: VkPipelineExecutableStatisticKHR;
    new(param?: VkPipelineExecutableStatisticKHRInitializer | null): VkPipelineExecutableStatisticKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPipelineExecutableStatisticKHR: VkPipelineExecutableStatisticKHRConstructor;

  
  
  /**
   * 
   */
  interface VkPipelineExecutableInfoKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    pipeline: VkPipeline | null;

    /**
     *
     */
    executableIndex: number;

  }

  interface VkPipelineExecutableInfoKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    pipeline?: VkPipeline | null;

    /**
     *
     */
    executableIndex?: number;
  }

  interface VkPipelineExecutableInfoKHRConstructor {
    readonly prototype: VkPipelineExecutableInfoKHR;
    new(param?: VkPipelineExecutableInfoKHRInitializer | null): VkPipelineExecutableInfoKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPipelineExecutableInfoKHR: VkPipelineExecutableInfoKHRConstructor;

  
  
  /**
   * 
   */
  interface VkPipelineExecutablePropertiesKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly stages: VkShaderStageFlagBits;

    /**
     *
     */
    readonly name: string | null;

    /**
     *
     */
    readonly description: string | null;

    /**
     *
     */
    readonly subgroupSize: number;

  }

  interface VkPipelineExecutablePropertiesKHRInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly stages?: VkShaderStageFlagBits;

    /**
     *
     */
    readonly name?: string | null;

    /**
     *
     */
    readonly description?: string | null;

    /**
     *
     */
    readonly subgroupSize?: number;
  }

  interface VkPipelineExecutablePropertiesKHRConstructor {
    readonly prototype: VkPipelineExecutablePropertiesKHR;
    new(param?: VkPipelineExecutablePropertiesKHRInitializer | null): VkPipelineExecutablePropertiesKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPipelineExecutablePropertiesKHR: VkPipelineExecutablePropertiesKHRConstructor;

  
  
  /**
   * 
   */
  interface VkPipelineInfoKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    pipeline: VkPipeline | null;

  }

  interface VkPipelineInfoKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    pipeline?: VkPipeline | null;
  }

  interface VkPipelineInfoKHRConstructor {
    readonly prototype: VkPipelineInfoKHR;
    new(param?: VkPipelineInfoKHRInitializer | null): VkPipelineInfoKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPipelineInfoKHR: VkPipelineInfoKHRConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    pipelineExecutableInfo: boolean;

  }

  interface VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    pipelineExecutableInfo?: boolean;
  }

  interface VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHRConstructor {
    readonly prototype: VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR;
    new(param?: VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHRInitializer | null): VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR: VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHRConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    fragmentShaderSampleInterlock: boolean;

    /**
     *
     */
    fragmentShaderPixelInterlock: boolean;

    /**
     *
     */
    fragmentShaderShadingRateInterlock: boolean;

  }

  interface VkPhysicalDeviceFragmentShaderInterlockFeaturesEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    fragmentShaderSampleInterlock?: boolean;

    /**
     *
     */
    fragmentShaderPixelInterlock?: boolean;

    /**
     *
     */
    fragmentShaderShadingRateInterlock?: boolean;
  }

  interface VkPhysicalDeviceFragmentShaderInterlockFeaturesEXTConstructor {
    readonly prototype: VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT;
    new(param?: VkPhysicalDeviceFragmentShaderInterlockFeaturesEXTInitializer | null): VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT: VkPhysicalDeviceFragmentShaderInterlockFeaturesEXTConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceShaderSMBuiltinsFeaturesNV {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    shaderSMBuiltins: boolean;

  }

  interface VkPhysicalDeviceShaderSMBuiltinsFeaturesNVInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    shaderSMBuiltins?: boolean;
  }

  interface VkPhysicalDeviceShaderSMBuiltinsFeaturesNVConstructor {
    readonly prototype: VkPhysicalDeviceShaderSMBuiltinsFeaturesNV;
    new(param?: VkPhysicalDeviceShaderSMBuiltinsFeaturesNVInitializer | null): VkPhysicalDeviceShaderSMBuiltinsFeaturesNV;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceShaderSMBuiltinsFeaturesNV: VkPhysicalDeviceShaderSMBuiltinsFeaturesNVConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceShaderSMBuiltinsPropertiesNV {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly shaderSMCount: number;

    /**
     *
     */
    readonly shaderWarpsPerSM: number;

  }

  interface VkPhysicalDeviceShaderSMBuiltinsPropertiesNVInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly shaderSMCount?: number;

    /**
     *
     */
    readonly shaderWarpsPerSM?: number;
  }

  interface VkPhysicalDeviceShaderSMBuiltinsPropertiesNVConstructor {
    readonly prototype: VkPhysicalDeviceShaderSMBuiltinsPropertiesNV;
    new(param?: VkPhysicalDeviceShaderSMBuiltinsPropertiesNVInitializer | null): VkPhysicalDeviceShaderSMBuiltinsPropertiesNV;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceShaderSMBuiltinsPropertiesNV: VkPhysicalDeviceShaderSMBuiltinsPropertiesNVConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceIndexTypeUint8FeaturesEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    indexTypeUint8: boolean;

  }

  interface VkPhysicalDeviceIndexTypeUint8FeaturesEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    indexTypeUint8?: boolean;
  }

  interface VkPhysicalDeviceIndexTypeUint8FeaturesEXTConstructor {
    readonly prototype: VkPhysicalDeviceIndexTypeUint8FeaturesEXT;
    new(param?: VkPhysicalDeviceIndexTypeUint8FeaturesEXTInitializer | null): VkPhysicalDeviceIndexTypeUint8FeaturesEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceIndexTypeUint8FeaturesEXT: VkPhysicalDeviceIndexTypeUint8FeaturesEXTConstructor;

  
  
  /**
   * 
   */
  interface VkPerformanceConfigurationAcquireInfoINTEL {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    type: VkPerformanceConfigurationTypeINTEL;

  }

  interface VkPerformanceConfigurationAcquireInfoINTELInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    type?: VkPerformanceConfigurationTypeINTEL;
  }

  interface VkPerformanceConfigurationAcquireInfoINTELConstructor {
    readonly prototype: VkPerformanceConfigurationAcquireInfoINTEL;
    new(param?: VkPerformanceConfigurationAcquireInfoINTELInitializer | null): VkPerformanceConfigurationAcquireInfoINTEL;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPerformanceConfigurationAcquireInfoINTEL: VkPerformanceConfigurationAcquireInfoINTELConstructor;

  
  
  /**
   * 
   */
  interface VkPerformanceOverrideInfoINTEL {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    type: VkPerformanceOverrideTypeINTEL;

    /**
     *
     */
    enable: boolean;

    /**
     *
     */
    parameter: bigint | number;

  }

  interface VkPerformanceOverrideInfoINTELInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    type?: VkPerformanceOverrideTypeINTEL;

    /**
     *
     */
    enable?: boolean;

    /**
     *
     */
    parameter?: bigint | number;
  }

  interface VkPerformanceOverrideInfoINTELConstructor {
    readonly prototype: VkPerformanceOverrideInfoINTEL;
    new(param?: VkPerformanceOverrideInfoINTELInitializer | null): VkPerformanceOverrideInfoINTEL;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPerformanceOverrideInfoINTEL: VkPerformanceOverrideInfoINTELConstructor;

  
  
  /**
   * 
   */
  interface VkPerformanceStreamMarkerInfoINTEL {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    marker: number;

  }

  interface VkPerformanceStreamMarkerInfoINTELInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    marker?: number;
  }

  interface VkPerformanceStreamMarkerInfoINTELConstructor {
    readonly prototype: VkPerformanceStreamMarkerInfoINTEL;
    new(param?: VkPerformanceStreamMarkerInfoINTELInitializer | null): VkPerformanceStreamMarkerInfoINTEL;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPerformanceStreamMarkerInfoINTEL: VkPerformanceStreamMarkerInfoINTELConstructor;

  
  
  /**
   * 
   */
  interface VkPerformanceMarkerInfoINTEL {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    marker: bigint | number;

  }

  interface VkPerformanceMarkerInfoINTELInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    marker?: bigint | number;
  }

  interface VkPerformanceMarkerInfoINTELConstructor {
    readonly prototype: VkPerformanceMarkerInfoINTEL;
    new(param?: VkPerformanceMarkerInfoINTELInitializer | null): VkPerformanceMarkerInfoINTEL;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPerformanceMarkerInfoINTEL: VkPerformanceMarkerInfoINTELConstructor;

  
  
  /**
   * 
   */
  interface VkQueryPoolCreateInfoINTEL {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    performanceCountersSampling: VkQueryPoolSamplingModeINTEL;

  }

  interface VkQueryPoolCreateInfoINTELInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    performanceCountersSampling?: VkQueryPoolSamplingModeINTEL;
  }

  interface VkQueryPoolCreateInfoINTELConstructor {
    readonly prototype: VkQueryPoolCreateInfoINTEL;
    new(param?: VkQueryPoolCreateInfoINTELInitializer | null): VkQueryPoolCreateInfoINTEL;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkQueryPoolCreateInfoINTEL: VkQueryPoolCreateInfoINTELConstructor;

  
  
  /**
   * 
   */
  interface VkInitializePerformanceApiInfoINTEL {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    pUserData: ArrayBuffer | null;

  }

  interface VkInitializePerformanceApiInfoINTELInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    pUserData?: ArrayBuffer | null;
  }

  interface VkInitializePerformanceApiInfoINTELConstructor {
    readonly prototype: VkInitializePerformanceApiInfoINTEL;
    new(param?: VkInitializePerformanceApiInfoINTELInitializer | null): VkInitializePerformanceApiInfoINTEL;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkInitializePerformanceApiInfoINTEL: VkInitializePerformanceApiInfoINTELConstructor;

  
  
  /**
   * 
   */
  interface VkPerformanceValueINTEL {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    type: VkPerformanceValueTypeINTEL;

    /**
     *
     */
    data: VkPerformanceValueDataINTEL | null;

  }

  interface VkPerformanceValueINTELInitializer {
    
    /**
     *
     */
    type?: VkPerformanceValueTypeINTEL;

    /**
     *
     */
    data?: VkPerformanceValueDataINTEL | null;
  }

  interface VkPerformanceValueINTELConstructor {
    readonly prototype: VkPerformanceValueINTEL;
    new(param?: VkPerformanceValueINTELInitializer | null): VkPerformanceValueINTEL;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPerformanceValueINTEL: VkPerformanceValueINTELConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    shaderIntegerFunctions2: boolean;

  }

  interface VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTELInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    shaderIntegerFunctions2?: boolean;
  }

  interface VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTELConstructor {
    readonly prototype: VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL;
    new(param?: VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTELInitializer | null): VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL: VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTELConstructor;

  
  
  /**
   * 
   */
  interface VkFramebufferMixedSamplesCombinationNV {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly coverageReductionMode: VkCoverageReductionModeNV;

    /**
     *
     */
    readonly rasterizationSamples: VkSampleCountFlagBits;

    /**
     *
     */
    readonly depthStencilSamples: VkSampleCountFlagBits;

    /**
     *
     */
    readonly colorSamples: VkSampleCountFlagBits;

  }

  interface VkFramebufferMixedSamplesCombinationNVInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly coverageReductionMode?: VkCoverageReductionModeNV;

    /**
     *
     */
    readonly rasterizationSamples?: VkSampleCountFlagBits;

    /**
     *
     */
    readonly depthStencilSamples?: VkSampleCountFlagBits;

    /**
     *
     */
    readonly colorSamples?: VkSampleCountFlagBits;
  }

  interface VkFramebufferMixedSamplesCombinationNVConstructor {
    readonly prototype: VkFramebufferMixedSamplesCombinationNV;
    new(param?: VkFramebufferMixedSamplesCombinationNVInitializer | null): VkFramebufferMixedSamplesCombinationNV;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkFramebufferMixedSamplesCombinationNV: VkFramebufferMixedSamplesCombinationNVConstructor;

  
  
  /**
   * 
   */
  interface VkPipelineCoverageReductionStateCreateInfoNV {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

    /**
     *
     */
    coverageReductionMode: VkCoverageReductionModeNV;

  }

  interface VkPipelineCoverageReductionStateCreateInfoNVInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;

    /**
     *
     */
    coverageReductionMode?: VkCoverageReductionModeNV;
  }

  interface VkPipelineCoverageReductionStateCreateInfoNVConstructor {
    readonly prototype: VkPipelineCoverageReductionStateCreateInfoNV;
    new(param?: VkPipelineCoverageReductionStateCreateInfoNVInitializer | null): VkPipelineCoverageReductionStateCreateInfoNV;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPipelineCoverageReductionStateCreateInfoNV: VkPipelineCoverageReductionStateCreateInfoNVConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceCoverageReductionModeFeaturesNV {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    coverageReductionMode: boolean;

  }

  interface VkPhysicalDeviceCoverageReductionModeFeaturesNVInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    coverageReductionMode?: boolean;
  }

  interface VkPhysicalDeviceCoverageReductionModeFeaturesNVConstructor {
    readonly prototype: VkPhysicalDeviceCoverageReductionModeFeaturesNV;
    new(param?: VkPhysicalDeviceCoverageReductionModeFeaturesNVInitializer | null): VkPhysicalDeviceCoverageReductionModeFeaturesNV;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceCoverageReductionModeFeaturesNV: VkPhysicalDeviceCoverageReductionModeFeaturesNVConstructor;

  
  
  /**
   * 
   */
  interface VkHeadlessSurfaceCreateInfoEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

  }

  interface VkHeadlessSurfaceCreateInfoEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;
  }

  interface VkHeadlessSurfaceCreateInfoEXTConstructor {
    readonly prototype: VkHeadlessSurfaceCreateInfoEXT;
    new(param?: VkHeadlessSurfaceCreateInfoEXTInitializer | null): VkHeadlessSurfaceCreateInfoEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkHeadlessSurfaceCreateInfoEXT: VkHeadlessSurfaceCreateInfoEXTConstructor;

  
  
  /**
   * 
   */
  interface VkSurfaceCapabilitiesFullScreenExclusiveEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    fullScreenExclusiveSupported: boolean;

  }

  interface VkSurfaceCapabilitiesFullScreenExclusiveEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    fullScreenExclusiveSupported?: boolean;
  }

  interface VkSurfaceCapabilitiesFullScreenExclusiveEXTConstructor {
    readonly prototype: VkSurfaceCapabilitiesFullScreenExclusiveEXT;
    new(param?: VkSurfaceCapabilitiesFullScreenExclusiveEXTInitializer | null): VkSurfaceCapabilitiesFullScreenExclusiveEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkSurfaceCapabilitiesFullScreenExclusiveEXT: VkSurfaceCapabilitiesFullScreenExclusiveEXTConstructor;

  
  
  /**
   * 
   */
  interface VkSurfaceFullScreenExclusiveWin32InfoEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    hmonitor: null;

  }

  interface VkSurfaceFullScreenExclusiveWin32InfoEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    hmonitor?: null;
  }

  interface VkSurfaceFullScreenExclusiveWin32InfoEXTConstructor {
    readonly prototype: VkSurfaceFullScreenExclusiveWin32InfoEXT;
    new(param?: VkSurfaceFullScreenExclusiveWin32InfoEXTInitializer | null): VkSurfaceFullScreenExclusiveWin32InfoEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkSurfaceFullScreenExclusiveWin32InfoEXT: VkSurfaceFullScreenExclusiveWin32InfoEXTConstructor;

  
  
  /**
   * 
   */
  interface VkSurfaceFullScreenExclusiveInfoEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    fullScreenExclusive: VkFullScreenExclusiveEXT;

  }

  interface VkSurfaceFullScreenExclusiveInfoEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    fullScreenExclusive?: VkFullScreenExclusiveEXT;
  }

  interface VkSurfaceFullScreenExclusiveInfoEXTConstructor {
    readonly prototype: VkSurfaceFullScreenExclusiveInfoEXT;
    new(param?: VkSurfaceFullScreenExclusiveInfoEXTInitializer | null): VkSurfaceFullScreenExclusiveInfoEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkSurfaceFullScreenExclusiveInfoEXT: VkSurfaceFullScreenExclusiveInfoEXTConstructor;

  
  
  /**
   * 
   */
  interface VkPipelineCreationFeedbackCreateInfoEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    pPipelineCreationFeedback: VkPipelineCreationFeedbackEXT | null;

    /**
     *
     */
    pipelineStageCreationFeedbackCount: number;

    /**
     *
     */
    pPipelineStageCreationFeedbacks: VkPipelineCreationFeedbackEXT[] | null;

  }

  interface VkPipelineCreationFeedbackCreateInfoEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    pPipelineCreationFeedback?: VkPipelineCreationFeedbackEXT | null;

    /**
     *
     */
    pipelineStageCreationFeedbackCount?: number;

    /**
     *
     */
    pPipelineStageCreationFeedbacks?: VkPipelineCreationFeedbackEXT[] | null;
  }

  interface VkPipelineCreationFeedbackCreateInfoEXTConstructor {
    readonly prototype: VkPipelineCreationFeedbackCreateInfoEXT;
    new(param?: VkPipelineCreationFeedbackCreateInfoEXTInitializer | null): VkPipelineCreationFeedbackCreateInfoEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPipelineCreationFeedbackCreateInfoEXT: VkPipelineCreationFeedbackCreateInfoEXTConstructor;

  
  
  /**
   * 
   */
  interface VkPipelineCreationFeedbackEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly flags: VkPipelineCreationFeedbackFlagBitsEXT;

    /**
     *
     */
    readonly duration: bigint | number;

  }

  interface VkPipelineCreationFeedbackEXTInitializer {
    
    /**
     *
     */
    readonly flags?: VkPipelineCreationFeedbackFlagBitsEXT;

    /**
     *
     */
    readonly duration?: bigint | number;
  }

  interface VkPipelineCreationFeedbackEXTConstructor {
    readonly prototype: VkPipelineCreationFeedbackEXT;
    new(param?: VkPipelineCreationFeedbackEXTInitializer | null): VkPipelineCreationFeedbackEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPipelineCreationFeedbackEXT: VkPipelineCreationFeedbackEXTConstructor;

  
  
  /**
   * 
   */
  interface VkImageViewHandleInfoNVX {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    imageView: VkImageView | null;

    /**
     *
     */
    descriptorType: VkDescriptorType;

    /**
     *
     */
    sampler: VkSampler | null;

  }

  interface VkImageViewHandleInfoNVXInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    imageView?: VkImageView | null;

    /**
     *
     */
    descriptorType?: VkDescriptorType;

    /**
     *
     */
    sampler?: VkSampler | null;
  }

  interface VkImageViewHandleInfoNVXConstructor {
    readonly prototype: VkImageViewHandleInfoNVX;
    new(param?: VkImageViewHandleInfoNVXInitializer | null): VkImageViewHandleInfoNVX;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkImageViewHandleInfoNVX: VkImageViewHandleInfoNVXConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceYcbcrImageArraysFeaturesEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    ycbcrImageArrays: boolean;

  }

  interface VkPhysicalDeviceYcbcrImageArraysFeaturesEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    ycbcrImageArrays?: boolean;
  }

  interface VkPhysicalDeviceYcbcrImageArraysFeaturesEXTConstructor {
    readonly prototype: VkPhysicalDeviceYcbcrImageArraysFeaturesEXT;
    new(param?: VkPhysicalDeviceYcbcrImageArraysFeaturesEXTInitializer | null): VkPhysicalDeviceYcbcrImageArraysFeaturesEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceYcbcrImageArraysFeaturesEXT: VkPhysicalDeviceYcbcrImageArraysFeaturesEXTConstructor;

  
  
  /**
   * 
   */
  interface VkCooperativeMatrixPropertiesNV {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    MSize: number;

    /**
     *
     */
    NSize: number;

    /**
     *
     */
    KSize: number;

    /**
     *
     */
    AType: VkComponentTypeNV;

    /**
     *
     */
    BType: VkComponentTypeNV;

    /**
     *
     */
    CType: VkComponentTypeNV;

    /**
     *
     */
    DType: VkComponentTypeNV;

    /**
     *
     */
    scope: VkScopeNV;

  }

  interface VkCooperativeMatrixPropertiesNVInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    MSize?: number;

    /**
     *
     */
    NSize?: number;

    /**
     *
     */
    KSize?: number;

    /**
     *
     */
    AType?: VkComponentTypeNV;

    /**
     *
     */
    BType?: VkComponentTypeNV;

    /**
     *
     */
    CType?: VkComponentTypeNV;

    /**
     *
     */
    DType?: VkComponentTypeNV;

    /**
     *
     */
    scope?: VkScopeNV;
  }

  interface VkCooperativeMatrixPropertiesNVConstructor {
    readonly prototype: VkCooperativeMatrixPropertiesNV;
    new(param?: VkCooperativeMatrixPropertiesNVInitializer | null): VkCooperativeMatrixPropertiesNV;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkCooperativeMatrixPropertiesNV: VkCooperativeMatrixPropertiesNVConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceCooperativeMatrixPropertiesNV {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly cooperativeMatrixSupportedStages: VkShaderStageFlagBits;

  }

  interface VkPhysicalDeviceCooperativeMatrixPropertiesNVInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly cooperativeMatrixSupportedStages?: VkShaderStageFlagBits;
  }

  interface VkPhysicalDeviceCooperativeMatrixPropertiesNVConstructor {
    readonly prototype: VkPhysicalDeviceCooperativeMatrixPropertiesNV;
    new(param?: VkPhysicalDeviceCooperativeMatrixPropertiesNVInitializer | null): VkPhysicalDeviceCooperativeMatrixPropertiesNV;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceCooperativeMatrixPropertiesNV: VkPhysicalDeviceCooperativeMatrixPropertiesNVConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceCooperativeMatrixFeaturesNV {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    cooperativeMatrix: boolean;

    /**
     *
     */
    cooperativeMatrixRobustBufferAccess: boolean;

  }

  interface VkPhysicalDeviceCooperativeMatrixFeaturesNVInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    cooperativeMatrix?: boolean;

    /**
     *
     */
    cooperativeMatrixRobustBufferAccess?: boolean;
  }

  interface VkPhysicalDeviceCooperativeMatrixFeaturesNVConstructor {
    readonly prototype: VkPhysicalDeviceCooperativeMatrixFeaturesNV;
    new(param?: VkPhysicalDeviceCooperativeMatrixFeaturesNVInitializer | null): VkPhysicalDeviceCooperativeMatrixFeaturesNV;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceCooperativeMatrixFeaturesNV: VkPhysicalDeviceCooperativeMatrixFeaturesNVConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    textureCompressionASTC_HDR: boolean;

  }

  interface VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    textureCompressionASTC_HDR?: boolean;
  }

  interface VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXTConstructor {
    readonly prototype: VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT;
    new(param?: VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXTInitializer | null): VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT: VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXTConstructor;

  
  
  /**
   * 
   */
  interface VkRenderPassAttachmentBeginInfoKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    attachmentCount: number;

    /**
     *
     */
    pAttachments: VkImageView[] | null;

  }

  interface VkRenderPassAttachmentBeginInfoKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    attachmentCount?: number;

    /**
     *
     */
    pAttachments?: VkImageView[] | null;
  }

  interface VkRenderPassAttachmentBeginInfoKHRConstructor {
    readonly prototype: VkRenderPassAttachmentBeginInfoKHR;
    new(param?: VkRenderPassAttachmentBeginInfoKHRInitializer | null): VkRenderPassAttachmentBeginInfoKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkRenderPassAttachmentBeginInfoKHR: VkRenderPassAttachmentBeginInfoKHRConstructor;

  
  
  /**
   * 
   */
  interface VkFramebufferAttachmentImageInfoKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkImageCreateFlagBits;

    /**
     *
     */
    usage: VkImageUsageFlagBits;

    /**
     *
     */
    width: number;

    /**
     *
     */
    height: number;

    /**
     *
     */
    layerCount: number;

    /**
     *
     */
    viewFormatCount: number;

    /**
     *
     */
    pViewFormats: Int32Array | null;

  }

  interface VkFramebufferAttachmentImageInfoKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkImageCreateFlagBits;

    /**
     *
     */
    usage?: VkImageUsageFlagBits;

    /**
     *
     */
    width?: number;

    /**
     *
     */
    height?: number;

    /**
     *
     */
    layerCount?: number;

    /**
     *
     */
    viewFormatCount?: number;

    /**
     *
     */
    pViewFormats?: Int32Array | null;
  }

  interface VkFramebufferAttachmentImageInfoKHRConstructor {
    readonly prototype: VkFramebufferAttachmentImageInfoKHR;
    new(param?: VkFramebufferAttachmentImageInfoKHRInitializer | null): VkFramebufferAttachmentImageInfoKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkFramebufferAttachmentImageInfoKHR: VkFramebufferAttachmentImageInfoKHRConstructor;

  
  
  /**
   * 
   */
  interface VkFramebufferAttachmentsCreateInfoKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    attachmentImageInfoCount: number;

    /**
     *
     */
    pAttachmentImageInfos: VkFramebufferAttachmentImageInfoKHR[] | null;

  }

  interface VkFramebufferAttachmentsCreateInfoKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    attachmentImageInfoCount?: number;

    /**
     *
     */
    pAttachmentImageInfos?: VkFramebufferAttachmentImageInfoKHR[] | null;
  }

  interface VkFramebufferAttachmentsCreateInfoKHRConstructor {
    readonly prototype: VkFramebufferAttachmentsCreateInfoKHR;
    new(param?: VkFramebufferAttachmentsCreateInfoKHRInitializer | null): VkFramebufferAttachmentsCreateInfoKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkFramebufferAttachmentsCreateInfoKHR: VkFramebufferAttachmentsCreateInfoKHRConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceImagelessFramebufferFeaturesKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    imagelessFramebuffer: boolean;

  }

  interface VkPhysicalDeviceImagelessFramebufferFeaturesKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    imagelessFramebuffer?: boolean;
  }

  interface VkPhysicalDeviceImagelessFramebufferFeaturesKHRConstructor {
    readonly prototype: VkPhysicalDeviceImagelessFramebufferFeaturesKHR;
    new(param?: VkPhysicalDeviceImagelessFramebufferFeaturesKHRInitializer | null): VkPhysicalDeviceImagelessFramebufferFeaturesKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceImagelessFramebufferFeaturesKHR: VkPhysicalDeviceImagelessFramebufferFeaturesKHRConstructor;

  
  
  /**
   * 
   */
  interface VkFilterCubicImageViewImageFormatPropertiesEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly filterCubic: boolean;

    /**
     *
     */
    readonly filterCubicMinmax: boolean;

  }

  interface VkFilterCubicImageViewImageFormatPropertiesEXTInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly filterCubic?: boolean;

    /**
     *
     */
    readonly filterCubicMinmax?: boolean;
  }

  interface VkFilterCubicImageViewImageFormatPropertiesEXTConstructor {
    readonly prototype: VkFilterCubicImageViewImageFormatPropertiesEXT;
    new(param?: VkFilterCubicImageViewImageFormatPropertiesEXTInitializer | null): VkFilterCubicImageViewImageFormatPropertiesEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkFilterCubicImageViewImageFormatPropertiesEXT: VkFilterCubicImageViewImageFormatPropertiesEXTConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceImageViewImageFormatInfoEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    imageViewType: VkImageViewType;

  }

  interface VkPhysicalDeviceImageViewImageFormatInfoEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    imageViewType?: VkImageViewType;
  }

  interface VkPhysicalDeviceImageViewImageFormatInfoEXTConstructor {
    readonly prototype: VkPhysicalDeviceImageViewImageFormatInfoEXT;
    new(param?: VkPhysicalDeviceImageViewImageFormatInfoEXTInitializer | null): VkPhysicalDeviceImageViewImageFormatInfoEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceImageViewImageFormatInfoEXT: VkPhysicalDeviceImageViewImageFormatInfoEXTConstructor;

  
  
  /**
   * 
   */
  interface VkBufferDeviceAddressCreateInfoEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    deviceAddress: bigint | number;

  }

  interface VkBufferDeviceAddressCreateInfoEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    deviceAddress?: bigint | number;
  }

  interface VkBufferDeviceAddressCreateInfoEXTConstructor {
    readonly prototype: VkBufferDeviceAddressCreateInfoEXT;
    new(param?: VkBufferDeviceAddressCreateInfoEXTInitializer | null): VkBufferDeviceAddressCreateInfoEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkBufferDeviceAddressCreateInfoEXT: VkBufferDeviceAddressCreateInfoEXTConstructor;

  
  
  /**
   * 
   */
  interface VkBufferDeviceAddressInfoEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    buffer: VkBuffer | null;

  }

  interface VkBufferDeviceAddressInfoEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    buffer?: VkBuffer | null;
  }

  interface VkBufferDeviceAddressInfoEXTConstructor {
    readonly prototype: VkBufferDeviceAddressInfoEXT;
    new(param?: VkBufferDeviceAddressInfoEXTInitializer | null): VkBufferDeviceAddressInfoEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkBufferDeviceAddressInfoEXT: VkBufferDeviceAddressInfoEXTConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceBufferAddressFeaturesEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    bufferDeviceAddress: boolean;

    /**
     *
     */
    bufferDeviceAddressCaptureReplay: boolean;

    /**
     *
     */
    bufferDeviceAddressMultiDevice: boolean;

  }

  interface VkPhysicalDeviceBufferAddressFeaturesEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    bufferDeviceAddress?: boolean;

    /**
     *
     */
    bufferDeviceAddressCaptureReplay?: boolean;

    /**
     *
     */
    bufferDeviceAddressMultiDevice?: boolean;
  }

  interface VkPhysicalDeviceBufferAddressFeaturesEXTConstructor {
    readonly prototype: VkPhysicalDeviceBufferAddressFeaturesEXT;
    new(param?: VkPhysicalDeviceBufferAddressFeaturesEXTInitializer | null): VkPhysicalDeviceBufferAddressFeaturesEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceBufferAddressFeaturesEXT: VkPhysicalDeviceBufferAddressFeaturesEXTConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceBufferDeviceAddressFeaturesEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    bufferDeviceAddress: boolean;

    /**
     *
     */
    bufferDeviceAddressCaptureReplay: boolean;

    /**
     *
     */
    bufferDeviceAddressMultiDevice: boolean;

  }

  interface VkPhysicalDeviceBufferDeviceAddressFeaturesEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    bufferDeviceAddress?: boolean;

    /**
     *
     */
    bufferDeviceAddressCaptureReplay?: boolean;

    /**
     *
     */
    bufferDeviceAddressMultiDevice?: boolean;
  }

  interface VkPhysicalDeviceBufferDeviceAddressFeaturesEXTConstructor {
    readonly prototype: VkPhysicalDeviceBufferDeviceAddressFeaturesEXT;
    new(param?: VkPhysicalDeviceBufferDeviceAddressFeaturesEXTInitializer | null): VkPhysicalDeviceBufferDeviceAddressFeaturesEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceBufferDeviceAddressFeaturesEXT: VkPhysicalDeviceBufferDeviceAddressFeaturesEXTConstructor;

  
  
  /**
   * 
   */
  interface VkMemoryPriorityAllocateInfoEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    priority: number;

  }

  interface VkMemoryPriorityAllocateInfoEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    priority?: number;
  }

  interface VkMemoryPriorityAllocateInfoEXTConstructor {
    readonly prototype: VkMemoryPriorityAllocateInfoEXT;
    new(param?: VkMemoryPriorityAllocateInfoEXTInitializer | null): VkMemoryPriorityAllocateInfoEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkMemoryPriorityAllocateInfoEXT: VkMemoryPriorityAllocateInfoEXTConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceMemoryPriorityFeaturesEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    memoryPriority: boolean;

  }

  interface VkPhysicalDeviceMemoryPriorityFeaturesEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    memoryPriority?: boolean;
  }

  interface VkPhysicalDeviceMemoryPriorityFeaturesEXTConstructor {
    readonly prototype: VkPhysicalDeviceMemoryPriorityFeaturesEXT;
    new(param?: VkPhysicalDeviceMemoryPriorityFeaturesEXTInitializer | null): VkPhysicalDeviceMemoryPriorityFeaturesEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceMemoryPriorityFeaturesEXT: VkPhysicalDeviceMemoryPriorityFeaturesEXTConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceMemoryBudgetPropertiesEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly heapBudget: number[] | null;

    /**
     *
     */
    readonly heapUsage: number[] | null;

  }

  interface VkPhysicalDeviceMemoryBudgetPropertiesEXTInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly heapBudget?: number[] | null;

    /**
     *
     */
    readonly heapUsage?: number[] | null;
  }

  interface VkPhysicalDeviceMemoryBudgetPropertiesEXTConstructor {
    readonly prototype: VkPhysicalDeviceMemoryBudgetPropertiesEXT;
    new(param?: VkPhysicalDeviceMemoryBudgetPropertiesEXTInitializer | null): VkPhysicalDeviceMemoryBudgetPropertiesEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceMemoryBudgetPropertiesEXT: VkPhysicalDeviceMemoryBudgetPropertiesEXTConstructor;

  
  
  /**
   * 
   */
  interface VkPipelineRasterizationDepthClipStateCreateInfoEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

    /**
     *
     */
    depthClipEnable: boolean;

  }

  interface VkPipelineRasterizationDepthClipStateCreateInfoEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;

    /**
     *
     */
    depthClipEnable?: boolean;
  }

  interface VkPipelineRasterizationDepthClipStateCreateInfoEXTConstructor {
    readonly prototype: VkPipelineRasterizationDepthClipStateCreateInfoEXT;
    new(param?: VkPipelineRasterizationDepthClipStateCreateInfoEXTInitializer | null): VkPipelineRasterizationDepthClipStateCreateInfoEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPipelineRasterizationDepthClipStateCreateInfoEXT: VkPipelineRasterizationDepthClipStateCreateInfoEXTConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceDepthClipEnableFeaturesEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    depthClipEnable: boolean;

  }

  interface VkPhysicalDeviceDepthClipEnableFeaturesEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    depthClipEnable?: boolean;
  }

  interface VkPhysicalDeviceDepthClipEnableFeaturesEXTConstructor {
    readonly prototype: VkPhysicalDeviceDepthClipEnableFeaturesEXT;
    new(param?: VkPhysicalDeviceDepthClipEnableFeaturesEXTInitializer | null): VkPhysicalDeviceDepthClipEnableFeaturesEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceDepthClipEnableFeaturesEXT: VkPhysicalDeviceDepthClipEnableFeaturesEXTConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    uniformBufferStandardLayout: boolean;

  }

  interface VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    uniformBufferStandardLayout?: boolean;
  }

  interface VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHRConstructor {
    readonly prototype: VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR;
    new(param?: VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHRInitializer | null): VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR: VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHRConstructor;

  
  
  /**
   * 
   */
  interface VkSurfaceProtectedCapabilitiesKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    supportsProtected: boolean;

  }

  interface VkSurfaceProtectedCapabilitiesKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    supportsProtected?: boolean;
  }

  interface VkSurfaceProtectedCapabilitiesKHRConstructor {
    readonly prototype: VkSurfaceProtectedCapabilitiesKHR;
    new(param?: VkSurfaceProtectedCapabilitiesKHRInitializer | null): VkSurfaceProtectedCapabilitiesKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkSurfaceProtectedCapabilitiesKHR: VkSurfaceProtectedCapabilitiesKHRConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceScalarBlockLayoutFeaturesEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    scalarBlockLayout: boolean;

  }

  interface VkPhysicalDeviceScalarBlockLayoutFeaturesEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    scalarBlockLayout?: boolean;
  }

  interface VkPhysicalDeviceScalarBlockLayoutFeaturesEXTConstructor {
    readonly prototype: VkPhysicalDeviceScalarBlockLayoutFeaturesEXT;
    new(param?: VkPhysicalDeviceScalarBlockLayoutFeaturesEXTInitializer | null): VkPhysicalDeviceScalarBlockLayoutFeaturesEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceScalarBlockLayoutFeaturesEXT: VkPhysicalDeviceScalarBlockLayoutFeaturesEXTConstructor;

  
  
  /**
   * 
   */
  interface VkRenderPassFragmentDensityMapCreateInfoEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    fragmentDensityMapAttachment: VkAttachmentReference | null;

  }

  interface VkRenderPassFragmentDensityMapCreateInfoEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    fragmentDensityMapAttachment?: VkAttachmentReference | null;
  }

  interface VkRenderPassFragmentDensityMapCreateInfoEXTConstructor {
    readonly prototype: VkRenderPassFragmentDensityMapCreateInfoEXT;
    new(param?: VkRenderPassFragmentDensityMapCreateInfoEXTInitializer | null): VkRenderPassFragmentDensityMapCreateInfoEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkRenderPassFragmentDensityMapCreateInfoEXT: VkRenderPassFragmentDensityMapCreateInfoEXTConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceFragmentDensityMapPropertiesEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly minFragmentDensityTexelSize: VkExtent2D | null;

    /**
     *
     */
    readonly maxFragmentDensityTexelSize: VkExtent2D | null;

    /**
     *
     */
    readonly fragmentDensityInvocations: boolean;

  }

  interface VkPhysicalDeviceFragmentDensityMapPropertiesEXTInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly minFragmentDensityTexelSize?: VkExtent2D | null;

    /**
     *
     */
    readonly maxFragmentDensityTexelSize?: VkExtent2D | null;

    /**
     *
     */
    readonly fragmentDensityInvocations?: boolean;
  }

  interface VkPhysicalDeviceFragmentDensityMapPropertiesEXTConstructor {
    readonly prototype: VkPhysicalDeviceFragmentDensityMapPropertiesEXT;
    new(param?: VkPhysicalDeviceFragmentDensityMapPropertiesEXTInitializer | null): VkPhysicalDeviceFragmentDensityMapPropertiesEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceFragmentDensityMapPropertiesEXT: VkPhysicalDeviceFragmentDensityMapPropertiesEXTConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceFragmentDensityMapFeaturesEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly fragmentDensityMap: boolean;

    /**
     *
     */
    readonly fragmentDensityMapDynamic: boolean;

    /**
     *
     */
    readonly fragmentDensityMapNonSubsampledImages: boolean;

  }

  interface VkPhysicalDeviceFragmentDensityMapFeaturesEXTInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly fragmentDensityMap?: boolean;

    /**
     *
     */
    readonly fragmentDensityMapDynamic?: boolean;

    /**
     *
     */
    readonly fragmentDensityMapNonSubsampledImages?: boolean;
  }

  interface VkPhysicalDeviceFragmentDensityMapFeaturesEXTConstructor {
    readonly prototype: VkPhysicalDeviceFragmentDensityMapFeaturesEXT;
    new(param?: VkPhysicalDeviceFragmentDensityMapFeaturesEXTInitializer | null): VkPhysicalDeviceFragmentDensityMapFeaturesEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceFragmentDensityMapFeaturesEXT: VkPhysicalDeviceFragmentDensityMapFeaturesEXTConstructor;

  
  
  /**
   * 
   */
  interface VkDeviceMemoryOverallocationCreateInfoAMD {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    overallocationBehavior: VkMemoryOverallocationBehaviorAMD;

  }

  interface VkDeviceMemoryOverallocationCreateInfoAMDInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    overallocationBehavior?: VkMemoryOverallocationBehaviorAMD;
  }

  interface VkDeviceMemoryOverallocationCreateInfoAMDConstructor {
    readonly prototype: VkDeviceMemoryOverallocationCreateInfoAMD;
    new(param?: VkDeviceMemoryOverallocationCreateInfoAMDInitializer | null): VkDeviceMemoryOverallocationCreateInfoAMD;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDeviceMemoryOverallocationCreateInfoAMD: VkDeviceMemoryOverallocationCreateInfoAMDConstructor;

  
  
  /**
   * 
   */
  interface VkImageStencilUsageCreateInfoEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    stencilUsage: VkImageUsageFlagBits;

  }

  interface VkImageStencilUsageCreateInfoEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    stencilUsage?: VkImageUsageFlagBits;
  }

  interface VkImageStencilUsageCreateInfoEXTConstructor {
    readonly prototype: VkImageStencilUsageCreateInfoEXT;
    new(param?: VkImageStencilUsageCreateInfoEXTInitializer | null): VkImageStencilUsageCreateInfoEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkImageStencilUsageCreateInfoEXT: VkImageStencilUsageCreateInfoEXTConstructor;

  
  
  /**
   * 
   */
  interface VkImageDrmFormatModifierPropertiesEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly drmFormatModifier: bigint | number;

  }

  interface VkImageDrmFormatModifierPropertiesEXTInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly drmFormatModifier?: bigint | number;
  }

  interface VkImageDrmFormatModifierPropertiesEXTConstructor {
    readonly prototype: VkImageDrmFormatModifierPropertiesEXT;
    new(param?: VkImageDrmFormatModifierPropertiesEXTInitializer | null): VkImageDrmFormatModifierPropertiesEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkImageDrmFormatModifierPropertiesEXT: VkImageDrmFormatModifierPropertiesEXTConstructor;

  
  
  /**
   * 
   */
  interface VkImageDrmFormatModifierExplicitCreateInfoEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    drmFormatModifier: bigint | number;

    /**
     *
     */
    drmFormatModifierPlaneCount: number;

    /**
     *
     */
    pPlaneLayouts: VkSubresourceLayout[] | null;

  }

  interface VkImageDrmFormatModifierExplicitCreateInfoEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    drmFormatModifier?: bigint | number;

    /**
     *
     */
    drmFormatModifierPlaneCount?: number;

    /**
     *
     */
    pPlaneLayouts?: VkSubresourceLayout[] | null;
  }

  interface VkImageDrmFormatModifierExplicitCreateInfoEXTConstructor {
    readonly prototype: VkImageDrmFormatModifierExplicitCreateInfoEXT;
    new(param?: VkImageDrmFormatModifierExplicitCreateInfoEXTInitializer | null): VkImageDrmFormatModifierExplicitCreateInfoEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkImageDrmFormatModifierExplicitCreateInfoEXT: VkImageDrmFormatModifierExplicitCreateInfoEXTConstructor;

  
  
  /**
   * 
   */
  interface VkImageDrmFormatModifierListCreateInfoEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    drmFormatModifierCount: number;

    /**
     *
     */
    pDrmFormatModifiers: BigUint64Array | null;

  }

  interface VkImageDrmFormatModifierListCreateInfoEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    drmFormatModifierCount?: number;

    /**
     *
     */
    pDrmFormatModifiers?: BigUint64Array | null;
  }

  interface VkImageDrmFormatModifierListCreateInfoEXTConstructor {
    readonly prototype: VkImageDrmFormatModifierListCreateInfoEXT;
    new(param?: VkImageDrmFormatModifierListCreateInfoEXTInitializer | null): VkImageDrmFormatModifierListCreateInfoEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkImageDrmFormatModifierListCreateInfoEXT: VkImageDrmFormatModifierListCreateInfoEXTConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceImageDrmFormatModifierInfoEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    drmFormatModifier: bigint | number;

    /**
     *
     */
    sharingMode: VkSharingMode;

    /**
     *
     */
    queueFamilyIndexCount: number;

    /**
     *
     */
    pQueueFamilyIndices: Uint32Array | null;

  }

  interface VkPhysicalDeviceImageDrmFormatModifierInfoEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    drmFormatModifier?: bigint | number;

    /**
     *
     */
    sharingMode?: VkSharingMode;

    /**
     *
     */
    queueFamilyIndexCount?: number;

    /**
     *
     */
    pQueueFamilyIndices?: Uint32Array | null;
  }

  interface VkPhysicalDeviceImageDrmFormatModifierInfoEXTConstructor {
    readonly prototype: VkPhysicalDeviceImageDrmFormatModifierInfoEXT;
    new(param?: VkPhysicalDeviceImageDrmFormatModifierInfoEXTInitializer | null): VkPhysicalDeviceImageDrmFormatModifierInfoEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceImageDrmFormatModifierInfoEXT: VkPhysicalDeviceImageDrmFormatModifierInfoEXTConstructor;

  
  
  /**
   * 
   */
  interface VkDrmFormatModifierPropertiesEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly drmFormatModifier: bigint | number;

    /**
     *
     */
    readonly drmFormatModifierPlaneCount: number;

    /**
     *
     */
    readonly drmFormatModifierTilingFeatures: VkFormatFeatureFlagBits;

  }

  interface VkDrmFormatModifierPropertiesEXTInitializer {
    
    /**
     *
     */
    readonly drmFormatModifier?: bigint | number;

    /**
     *
     */
    readonly drmFormatModifierPlaneCount?: number;

    /**
     *
     */
    readonly drmFormatModifierTilingFeatures?: VkFormatFeatureFlagBits;
  }

  interface VkDrmFormatModifierPropertiesEXTConstructor {
    readonly prototype: VkDrmFormatModifierPropertiesEXT;
    new(param?: VkDrmFormatModifierPropertiesEXTInitializer | null): VkDrmFormatModifierPropertiesEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDrmFormatModifierPropertiesEXT: VkDrmFormatModifierPropertiesEXTConstructor;

  
  
  /**
   * 
   */
  interface VkDrmFormatModifierPropertiesListEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly drmFormatModifierCount: number;

    /**
     *
     */
    readonly pDrmFormatModifierProperties: VkDrmFormatModifierPropertiesEXT[] | null;

  }

  interface VkDrmFormatModifierPropertiesListEXTInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly drmFormatModifierCount?: number;

    /**
     *
     */
    readonly pDrmFormatModifierProperties?: VkDrmFormatModifierPropertiesEXT[] | null;
  }

  interface VkDrmFormatModifierPropertiesListEXTConstructor {
    readonly prototype: VkDrmFormatModifierPropertiesListEXT;
    new(param?: VkDrmFormatModifierPropertiesListEXTInitializer | null): VkDrmFormatModifierPropertiesListEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDrmFormatModifierPropertiesListEXT: VkDrmFormatModifierPropertiesListEXTConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceRayTracingPropertiesNV {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly shaderGroupHandleSize: number;

    /**
     *
     */
    readonly maxRecursionDepth: number;

    /**
     *
     */
    readonly maxShaderGroupStride: number;

    /**
     *
     */
    readonly shaderGroupBaseAlignment: number;

    /**
     *
     */
    readonly maxGeometryCount: bigint | number;

    /**
     *
     */
    readonly maxInstanceCount: bigint | number;

    /**
     *
     */
    readonly maxTriangleCount: bigint | number;

    /**
     *
     */
    readonly maxDescriptorSetAccelerationStructures: number;

  }

  interface VkPhysicalDeviceRayTracingPropertiesNVInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly shaderGroupHandleSize?: number;

    /**
     *
     */
    readonly maxRecursionDepth?: number;

    /**
     *
     */
    readonly maxShaderGroupStride?: number;

    /**
     *
     */
    readonly shaderGroupBaseAlignment?: number;

    /**
     *
     */
    readonly maxGeometryCount?: bigint | number;

    /**
     *
     */
    readonly maxInstanceCount?: bigint | number;

    /**
     *
     */
    readonly maxTriangleCount?: bigint | number;

    /**
     *
     */
    readonly maxDescriptorSetAccelerationStructures?: number;
  }

  interface VkPhysicalDeviceRayTracingPropertiesNVConstructor {
    readonly prototype: VkPhysicalDeviceRayTracingPropertiesNV;
    new(param?: VkPhysicalDeviceRayTracingPropertiesNVInitializer | null): VkPhysicalDeviceRayTracingPropertiesNV;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceRayTracingPropertiesNV: VkPhysicalDeviceRayTracingPropertiesNVConstructor;

  
  
  /**
   * 
   */
  interface VkAccelerationStructureMemoryRequirementsInfoNV {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    type: VkAccelerationStructureMemoryRequirementsTypeNV;

    /**
     *
     */
    accelerationStructure: VkAccelerationStructureNV | null;

  }

  interface VkAccelerationStructureMemoryRequirementsInfoNVInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    type?: VkAccelerationStructureMemoryRequirementsTypeNV;

    /**
     *
     */
    accelerationStructure?: VkAccelerationStructureNV | null;
  }

  interface VkAccelerationStructureMemoryRequirementsInfoNVConstructor {
    readonly prototype: VkAccelerationStructureMemoryRequirementsInfoNV;
    new(param?: VkAccelerationStructureMemoryRequirementsInfoNVInitializer | null): VkAccelerationStructureMemoryRequirementsInfoNV;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkAccelerationStructureMemoryRequirementsInfoNV: VkAccelerationStructureMemoryRequirementsInfoNVConstructor;

  
  
  /**
   * 
   */
  interface VkWriteDescriptorSetAccelerationStructureNV {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    accelerationStructureCount: number;

    /**
     *
     */
    pAccelerationStructures: VkAccelerationStructureNV[] | null;

  }

  interface VkWriteDescriptorSetAccelerationStructureNVInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    accelerationStructureCount?: number;

    /**
     *
     */
    pAccelerationStructures?: VkAccelerationStructureNV[] | null;
  }

  interface VkWriteDescriptorSetAccelerationStructureNVConstructor {
    readonly prototype: VkWriteDescriptorSetAccelerationStructureNV;
    new(param?: VkWriteDescriptorSetAccelerationStructureNVInitializer | null): VkWriteDescriptorSetAccelerationStructureNV;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkWriteDescriptorSetAccelerationStructureNV: VkWriteDescriptorSetAccelerationStructureNVConstructor;

  
  
  /**
   * 
   */
  interface VkBindAccelerationStructureMemoryInfoNV {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    accelerationStructure: VkAccelerationStructureNV | null;

    /**
     *
     */
    memory: VkDeviceMemory | null;

    /**
     *
     */
    memoryOffset: bigint | number;

    /**
     *
     */
    deviceIndexCount: number;

    /**
     *
     */
    pDeviceIndices: Uint32Array | null;

  }

  interface VkBindAccelerationStructureMemoryInfoNVInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    accelerationStructure?: VkAccelerationStructureNV | null;

    /**
     *
     */
    memory?: VkDeviceMemory | null;

    /**
     *
     */
    memoryOffset?: bigint | number;

    /**
     *
     */
    deviceIndexCount?: number;

    /**
     *
     */
    pDeviceIndices?: Uint32Array | null;
  }

  interface VkBindAccelerationStructureMemoryInfoNVConstructor {
    readonly prototype: VkBindAccelerationStructureMemoryInfoNV;
    new(param?: VkBindAccelerationStructureMemoryInfoNVInitializer | null): VkBindAccelerationStructureMemoryInfoNV;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkBindAccelerationStructureMemoryInfoNV: VkBindAccelerationStructureMemoryInfoNVConstructor;

  
  
  /**
   * 
   */
  interface VkAccelerationStructureCreateInfoNV {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    compactedSize: bigint | number;

    /**
     *
     */
    info: VkAccelerationStructureInfoNV | null;

  }

  interface VkAccelerationStructureCreateInfoNVInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    compactedSize?: bigint | number;

    /**
     *
     */
    info?: VkAccelerationStructureInfoNV | null;
  }

  interface VkAccelerationStructureCreateInfoNVConstructor {
    readonly prototype: VkAccelerationStructureCreateInfoNV;
    new(param?: VkAccelerationStructureCreateInfoNVInitializer | null): VkAccelerationStructureCreateInfoNV;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkAccelerationStructureCreateInfoNV: VkAccelerationStructureCreateInfoNVConstructor;

  
  
  /**
   * 
   */
  interface VkAccelerationStructureInfoNV {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    type: VkAccelerationStructureTypeNV;

    /**
     *
     */
    flags: VkBuildAccelerationStructureFlagBitsNV;

    /**
     *
     */
    instanceCount: number;

    /**
     *
     */
    geometryCount: number;

    /**
     *
     */
    pGeometries: VkGeometryNV[] | null;

  }

  interface VkAccelerationStructureInfoNVInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    type?: VkAccelerationStructureTypeNV;

    /**
     *
     */
    flags?: VkBuildAccelerationStructureFlagBitsNV;

    /**
     *
     */
    instanceCount?: number;

    /**
     *
     */
    geometryCount?: number;

    /**
     *
     */
    pGeometries?: VkGeometryNV[] | null;
  }

  interface VkAccelerationStructureInfoNVConstructor {
    readonly prototype: VkAccelerationStructureInfoNV;
    new(param?: VkAccelerationStructureInfoNVInitializer | null): VkAccelerationStructureInfoNV;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkAccelerationStructureInfoNV: VkAccelerationStructureInfoNVConstructor;

  
  
  /**
   * 
   */
  interface VkGeometryNV {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    geometryType: VkGeometryTypeNV;

    /**
     *
     */
    geometry: VkGeometryDataNV | null;

    /**
     *
     */
    flags: VkGeometryFlagBitsNV;

  }

  interface VkGeometryNVInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    geometryType?: VkGeometryTypeNV;

    /**
     *
     */
    geometry?: VkGeometryDataNV | null;

    /**
     *
     */
    flags?: VkGeometryFlagBitsNV;
  }

  interface VkGeometryNVConstructor {
    readonly prototype: VkGeometryNV;
    new(param?: VkGeometryNVInitializer | null): VkGeometryNV;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkGeometryNV: VkGeometryNVConstructor;

  
  
  /**
   * 
   */
  interface VkGeometryDataNV {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    triangles: VkGeometryTrianglesNV | null;

    /**
     *
     */
    aabbs: VkGeometryAABBNV | null;

  }

  interface VkGeometryDataNVInitializer {
    
    /**
     *
     */
    triangles?: VkGeometryTrianglesNV | null;

    /**
     *
     */
    aabbs?: VkGeometryAABBNV | null;
  }

  interface VkGeometryDataNVConstructor {
    readonly prototype: VkGeometryDataNV;
    new(param?: VkGeometryDataNVInitializer | null): VkGeometryDataNV;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkGeometryDataNV: VkGeometryDataNVConstructor;

  
  
  /**
   * 
   */
  interface VkGeometryAABBNV {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    aabbData: VkBuffer | null;

    /**
     *
     */
    numAABBs: number;

    /**
     *
     */
    stride: number;

    /**
     *
     */
    offset: bigint | number;

  }

  interface VkGeometryAABBNVInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    aabbData?: VkBuffer | null;

    /**
     *
     */
    numAABBs?: number;

    /**
     *
     */
    stride?: number;

    /**
     *
     */
    offset?: bigint | number;
  }

  interface VkGeometryAABBNVConstructor {
    readonly prototype: VkGeometryAABBNV;
    new(param?: VkGeometryAABBNVInitializer | null): VkGeometryAABBNV;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkGeometryAABBNV: VkGeometryAABBNVConstructor;

  
  
  /**
   * 
   */
  interface VkGeometryTrianglesNV {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    vertexData: VkBuffer | null;

    /**
     *
     */
    vertexOffset: bigint | number;

    /**
     *
     */
    vertexCount: number;

    /**
     *
     */
    vertexStride: bigint | number;

    /**
     *
     */
    vertexFormat: VkFormat;

    /**
     *
     */
    indexData: VkBuffer | null;

    /**
     *
     */
    indexOffset: bigint | number;

    /**
     *
     */
    indexCount: number;

    /**
     *
     */
    indexType: VkIndexType;

    /**
     *
     */
    transformData: VkBuffer | null;

    /**
     *
     */
    transformOffset: bigint | number;

  }

  interface VkGeometryTrianglesNVInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    vertexData?: VkBuffer | null;

    /**
     *
     */
    vertexOffset?: bigint | number;

    /**
     *
     */
    vertexCount?: number;

    /**
     *
     */
    vertexStride?: bigint | number;

    /**
     *
     */
    vertexFormat?: VkFormat;

    /**
     *
     */
    indexData?: VkBuffer | null;

    /**
     *
     */
    indexOffset?: bigint | number;

    /**
     *
     */
    indexCount?: number;

    /**
     *
     */
    indexType?: VkIndexType;

    /**
     *
     */
    transformData?: VkBuffer | null;

    /**
     *
     */
    transformOffset?: bigint | number;
  }

  interface VkGeometryTrianglesNVConstructor {
    readonly prototype: VkGeometryTrianglesNV;
    new(param?: VkGeometryTrianglesNVInitializer | null): VkGeometryTrianglesNV;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkGeometryTrianglesNV: VkGeometryTrianglesNVConstructor;

  
  
  /**
   * 
   */
  interface VkRayTracingPipelineCreateInfoNV {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkPipelineCreateFlagBits;

    /**
     *
     */
    stageCount: number;

    /**
     *
     */
    pStages: VkPipelineShaderStageCreateInfo[] | null;

    /**
     *
     */
    groupCount: number;

    /**
     *
     */
    pGroups: VkRayTracingShaderGroupCreateInfoNV[] | null;

    /**
     *
     */
    maxRecursionDepth: number;

    /**
     *
     */
    layout: VkPipelineLayout | null;

    /**
     *
     */
    basePipelineHandle: VkPipeline | null;

    /**
     *
     */
    basePipelineIndex: number;

  }

  interface VkRayTracingPipelineCreateInfoNVInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkPipelineCreateFlagBits;

    /**
     *
     */
    stageCount?: number;

    /**
     *
     */
    pStages?: VkPipelineShaderStageCreateInfo[] | null;

    /**
     *
     */
    groupCount?: number;

    /**
     *
     */
    pGroups?: VkRayTracingShaderGroupCreateInfoNV[] | null;

    /**
     *
     */
    maxRecursionDepth?: number;

    /**
     *
     */
    layout?: VkPipelineLayout | null;

    /**
     *
     */
    basePipelineHandle?: VkPipeline | null;

    /**
     *
     */
    basePipelineIndex?: number;
  }

  interface VkRayTracingPipelineCreateInfoNVConstructor {
    readonly prototype: VkRayTracingPipelineCreateInfoNV;
    new(param?: VkRayTracingPipelineCreateInfoNVInitializer | null): VkRayTracingPipelineCreateInfoNV;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkRayTracingPipelineCreateInfoNV: VkRayTracingPipelineCreateInfoNVConstructor;

  
  
  /**
   * 
   */
  interface VkRayTracingShaderGroupCreateInfoNV {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    type: VkRayTracingShaderGroupTypeNV;

    /**
     *
     */
    generalShader: number;

    /**
     *
     */
    closestHitShader: number;

    /**
     *
     */
    anyHitShader: number;

    /**
     *
     */
    intersectionShader: number;

  }

  interface VkRayTracingShaderGroupCreateInfoNVInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    type?: VkRayTracingShaderGroupTypeNV;

    /**
     *
     */
    generalShader?: number;

    /**
     *
     */
    closestHitShader?: number;

    /**
     *
     */
    anyHitShader?: number;

    /**
     *
     */
    intersectionShader?: number;
  }

  interface VkRayTracingShaderGroupCreateInfoNVConstructor {
    readonly prototype: VkRayTracingShaderGroupCreateInfoNV;
    new(param?: VkRayTracingShaderGroupCreateInfoNVInitializer | null): VkRayTracingShaderGroupCreateInfoNV;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkRayTracingShaderGroupCreateInfoNV: VkRayTracingShaderGroupCreateInfoNVConstructor;

  
  
  /**
   * 
   */
  interface VkDrawMeshTasksIndirectCommandNV {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    taskCount: number;

    /**
     *
     */
    firstTask: number;

  }

  interface VkDrawMeshTasksIndirectCommandNVInitializer {
    
    /**
     *
     */
    taskCount?: number;

    /**
     *
     */
    firstTask?: number;
  }

  interface VkDrawMeshTasksIndirectCommandNVConstructor {
    readonly prototype: VkDrawMeshTasksIndirectCommandNV;
    new(param?: VkDrawMeshTasksIndirectCommandNVInitializer | null): VkDrawMeshTasksIndirectCommandNV;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDrawMeshTasksIndirectCommandNV: VkDrawMeshTasksIndirectCommandNVConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceMeshShaderPropertiesNV {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly maxDrawMeshTasksCount: number;

    /**
     *
     */
    readonly maxTaskWorkGroupInvocations: number;

    /**
     *
     */
    readonly maxTaskWorkGroupSize: number[] | null;

    /**
     *
     */
    readonly maxTaskTotalMemorySize: number;

    /**
     *
     */
    readonly maxTaskOutputCount: number;

    /**
     *
     */
    readonly maxMeshWorkGroupInvocations: number;

    /**
     *
     */
    readonly maxMeshWorkGroupSize: number[] | null;

    /**
     *
     */
    readonly maxMeshTotalMemorySize: number;

    /**
     *
     */
    readonly maxMeshOutputVertices: number;

    /**
     *
     */
    readonly maxMeshOutputPrimitives: number;

    /**
     *
     */
    readonly maxMeshMultiviewViewCount: number;

    /**
     *
     */
    readonly meshOutputPerVertexGranularity: number;

    /**
     *
     */
    readonly meshOutputPerPrimitiveGranularity: number;

  }

  interface VkPhysicalDeviceMeshShaderPropertiesNVInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly maxDrawMeshTasksCount?: number;

    /**
     *
     */
    readonly maxTaskWorkGroupInvocations?: number;

    /**
     *
     */
    readonly maxTaskWorkGroupSize?: number[] | null;

    /**
     *
     */
    readonly maxTaskTotalMemorySize?: number;

    /**
     *
     */
    readonly maxTaskOutputCount?: number;

    /**
     *
     */
    readonly maxMeshWorkGroupInvocations?: number;

    /**
     *
     */
    readonly maxMeshWorkGroupSize?: number[] | null;

    /**
     *
     */
    readonly maxMeshTotalMemorySize?: number;

    /**
     *
     */
    readonly maxMeshOutputVertices?: number;

    /**
     *
     */
    readonly maxMeshOutputPrimitives?: number;

    /**
     *
     */
    readonly maxMeshMultiviewViewCount?: number;

    /**
     *
     */
    readonly meshOutputPerVertexGranularity?: number;

    /**
     *
     */
    readonly meshOutputPerPrimitiveGranularity?: number;
  }

  interface VkPhysicalDeviceMeshShaderPropertiesNVConstructor {
    readonly prototype: VkPhysicalDeviceMeshShaderPropertiesNV;
    new(param?: VkPhysicalDeviceMeshShaderPropertiesNVInitializer | null): VkPhysicalDeviceMeshShaderPropertiesNV;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceMeshShaderPropertiesNV: VkPhysicalDeviceMeshShaderPropertiesNVConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceMeshShaderFeaturesNV {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    taskShader: boolean;

    /**
     *
     */
    meshShader: boolean;

  }

  interface VkPhysicalDeviceMeshShaderFeaturesNVInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    taskShader?: boolean;

    /**
     *
     */
    meshShader?: boolean;
  }

  interface VkPhysicalDeviceMeshShaderFeaturesNVConstructor {
    readonly prototype: VkPhysicalDeviceMeshShaderFeaturesNV;
    new(param?: VkPhysicalDeviceMeshShaderFeaturesNVInitializer | null): VkPhysicalDeviceMeshShaderFeaturesNV;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceMeshShaderFeaturesNV: VkPhysicalDeviceMeshShaderFeaturesNVConstructor;

  
  
  /**
   * 
   */
  interface VkPipelineViewportCoarseSampleOrderStateCreateInfoNV {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    sampleOrderType: VkCoarseSampleOrderTypeNV;

    /**
     *
     */
    customSampleOrderCount: number;

    /**
     *
     */
    pCustomSampleOrders: VkCoarseSampleOrderCustomNV[] | null;

  }

  interface VkPipelineViewportCoarseSampleOrderStateCreateInfoNVInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    sampleOrderType?: VkCoarseSampleOrderTypeNV;

    /**
     *
     */
    customSampleOrderCount?: number;

    /**
     *
     */
    pCustomSampleOrders?: VkCoarseSampleOrderCustomNV[] | null;
  }

  interface VkPipelineViewportCoarseSampleOrderStateCreateInfoNVConstructor {
    readonly prototype: VkPipelineViewportCoarseSampleOrderStateCreateInfoNV;
    new(param?: VkPipelineViewportCoarseSampleOrderStateCreateInfoNVInitializer | null): VkPipelineViewportCoarseSampleOrderStateCreateInfoNV;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPipelineViewportCoarseSampleOrderStateCreateInfoNV: VkPipelineViewportCoarseSampleOrderStateCreateInfoNVConstructor;

  
  
  /**
   * 
   */
  interface VkCoarseSampleOrderCustomNV {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    shadingRate: VkShadingRatePaletteEntryNV;

    /**
     *
     */
    sampleCount: number;

    /**
     *
     */
    sampleLocationCount: number;

    /**
     *
     */
    pSampleLocations: VkCoarseSampleLocationNV[] | null;

  }

  interface VkCoarseSampleOrderCustomNVInitializer {
    
    /**
     *
     */
    shadingRate?: VkShadingRatePaletteEntryNV;

    /**
     *
     */
    sampleCount?: number;

    /**
     *
     */
    sampleLocationCount?: number;

    /**
     *
     */
    pSampleLocations?: VkCoarseSampleLocationNV[] | null;
  }

  interface VkCoarseSampleOrderCustomNVConstructor {
    readonly prototype: VkCoarseSampleOrderCustomNV;
    new(param?: VkCoarseSampleOrderCustomNVInitializer | null): VkCoarseSampleOrderCustomNV;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkCoarseSampleOrderCustomNV: VkCoarseSampleOrderCustomNVConstructor;

  
  
  /**
   * 
   */
  interface VkCoarseSampleLocationNV {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    pixelX: number;

    /**
     *
     */
    pixelY: number;

    /**
     *
     */
    sample: number;

  }

  interface VkCoarseSampleLocationNVInitializer {
    
    /**
     *
     */
    pixelX?: number;

    /**
     *
     */
    pixelY?: number;

    /**
     *
     */
    sample?: number;
  }

  interface VkCoarseSampleLocationNVConstructor {
    readonly prototype: VkCoarseSampleLocationNV;
    new(param?: VkCoarseSampleLocationNVInitializer | null): VkCoarseSampleLocationNV;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkCoarseSampleLocationNV: VkCoarseSampleLocationNVConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceShadingRateImagePropertiesNV {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly shadingRateTexelSize: VkExtent2D | null;

    /**
     *
     */
    readonly shadingRatePaletteSize: number;

    /**
     *
     */
    readonly shadingRateMaxCoarseSamples: number;

  }

  interface VkPhysicalDeviceShadingRateImagePropertiesNVInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly shadingRateTexelSize?: VkExtent2D | null;

    /**
     *
     */
    readonly shadingRatePaletteSize?: number;

    /**
     *
     */
    readonly shadingRateMaxCoarseSamples?: number;
  }

  interface VkPhysicalDeviceShadingRateImagePropertiesNVConstructor {
    readonly prototype: VkPhysicalDeviceShadingRateImagePropertiesNV;
    new(param?: VkPhysicalDeviceShadingRateImagePropertiesNVInitializer | null): VkPhysicalDeviceShadingRateImagePropertiesNV;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceShadingRateImagePropertiesNV: VkPhysicalDeviceShadingRateImagePropertiesNVConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceShadingRateImageFeaturesNV {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    shadingRateImage: boolean;

    /**
     *
     */
    shadingRateCoarseSampleOrder: boolean;

  }

  interface VkPhysicalDeviceShadingRateImageFeaturesNVInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    shadingRateImage?: boolean;

    /**
     *
     */
    shadingRateCoarseSampleOrder?: boolean;
  }

  interface VkPhysicalDeviceShadingRateImageFeaturesNVConstructor {
    readonly prototype: VkPhysicalDeviceShadingRateImageFeaturesNV;
    new(param?: VkPhysicalDeviceShadingRateImageFeaturesNVInitializer | null): VkPhysicalDeviceShadingRateImageFeaturesNV;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceShadingRateImageFeaturesNV: VkPhysicalDeviceShadingRateImageFeaturesNVConstructor;

  
  
  /**
   * 
   */
  interface VkPipelineViewportShadingRateImageStateCreateInfoNV {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    shadingRateImageEnable: boolean;

    /**
     *
     */
    viewportCount: number;

    /**
     *
     */
    pShadingRatePalettes: VkShadingRatePaletteNV[] | null;

  }

  interface VkPipelineViewportShadingRateImageStateCreateInfoNVInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    shadingRateImageEnable?: boolean;

    /**
     *
     */
    viewportCount?: number;

    /**
     *
     */
    pShadingRatePalettes?: VkShadingRatePaletteNV[] | null;
  }

  interface VkPipelineViewportShadingRateImageStateCreateInfoNVConstructor {
    readonly prototype: VkPipelineViewportShadingRateImageStateCreateInfoNV;
    new(param?: VkPipelineViewportShadingRateImageStateCreateInfoNVInitializer | null): VkPipelineViewportShadingRateImageStateCreateInfoNV;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPipelineViewportShadingRateImageStateCreateInfoNV: VkPipelineViewportShadingRateImageStateCreateInfoNVConstructor;

  
  
  /**
   * 
   */
  interface VkShadingRatePaletteNV {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    shadingRatePaletteEntryCount: number;

    /**
     *
     */
    pShadingRatePaletteEntries: Int32Array | null;

  }

  interface VkShadingRatePaletteNVInitializer {
    
    /**
     *
     */
    shadingRatePaletteEntryCount?: number;

    /**
     *
     */
    pShadingRatePaletteEntries?: Int32Array | null;
  }

  interface VkShadingRatePaletteNVConstructor {
    readonly prototype: VkShadingRatePaletteNV;
    new(param?: VkShadingRatePaletteNVInitializer | null): VkShadingRatePaletteNV;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkShadingRatePaletteNV: VkShadingRatePaletteNVConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    dedicatedAllocationImageAliasing: boolean;

  }

  interface VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNVInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    dedicatedAllocationImageAliasing?: boolean;
  }

  interface VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNVConstructor {
    readonly prototype: VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV;
    new(param?: VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNVInitializer | null): VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV: VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNVConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceShaderImageFootprintFeaturesNV {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    imageFootprint: boolean;

  }

  interface VkPhysicalDeviceShaderImageFootprintFeaturesNVInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    imageFootprint?: boolean;
  }

  interface VkPhysicalDeviceShaderImageFootprintFeaturesNVConstructor {
    readonly prototype: VkPhysicalDeviceShaderImageFootprintFeaturesNV;
    new(param?: VkPhysicalDeviceShaderImageFootprintFeaturesNVInitializer | null): VkPhysicalDeviceShaderImageFootprintFeaturesNV;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceShaderImageFootprintFeaturesNV: VkPhysicalDeviceShaderImageFootprintFeaturesNVConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    fragmentShaderBarycentric: boolean;

  }

  interface VkPhysicalDeviceFragmentShaderBarycentricFeaturesNVInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    fragmentShaderBarycentric?: boolean;
  }

  interface VkPhysicalDeviceFragmentShaderBarycentricFeaturesNVConstructor {
    readonly prototype: VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV;
    new(param?: VkPhysicalDeviceFragmentShaderBarycentricFeaturesNVInitializer | null): VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV: VkPhysicalDeviceFragmentShaderBarycentricFeaturesNVConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceComputeShaderDerivativesFeaturesNV {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    computeDerivativeGroupQuads: boolean;

    /**
     *
     */
    computeDerivativeGroupLinear: boolean;

  }

  interface VkPhysicalDeviceComputeShaderDerivativesFeaturesNVInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    computeDerivativeGroupQuads?: boolean;

    /**
     *
     */
    computeDerivativeGroupLinear?: boolean;
  }

  interface VkPhysicalDeviceComputeShaderDerivativesFeaturesNVConstructor {
    readonly prototype: VkPhysicalDeviceComputeShaderDerivativesFeaturesNV;
    new(param?: VkPhysicalDeviceComputeShaderDerivativesFeaturesNVInitializer | null): VkPhysicalDeviceComputeShaderDerivativesFeaturesNV;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceComputeShaderDerivativesFeaturesNV: VkPhysicalDeviceComputeShaderDerivativesFeaturesNVConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceCornerSampledImageFeaturesNV {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    cornerSampledImage: boolean;

  }

  interface VkPhysicalDeviceCornerSampledImageFeaturesNVInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    cornerSampledImage?: boolean;
  }

  interface VkPhysicalDeviceCornerSampledImageFeaturesNVConstructor {
    readonly prototype: VkPhysicalDeviceCornerSampledImageFeaturesNV;
    new(param?: VkPhysicalDeviceCornerSampledImageFeaturesNVInitializer | null): VkPhysicalDeviceCornerSampledImageFeaturesNV;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceCornerSampledImageFeaturesNV: VkPhysicalDeviceCornerSampledImageFeaturesNVConstructor;

  
  
  /**
   * 
   */
  interface VkPipelineViewportExclusiveScissorStateCreateInfoNV {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    exclusiveScissorCount: number;

    /**
     *
     */
    pExclusiveScissors: VkRect2D[] | null;

  }

  interface VkPipelineViewportExclusiveScissorStateCreateInfoNVInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    exclusiveScissorCount?: number;

    /**
     *
     */
    pExclusiveScissors?: VkRect2D[] | null;
  }

  interface VkPipelineViewportExclusiveScissorStateCreateInfoNVConstructor {
    readonly prototype: VkPipelineViewportExclusiveScissorStateCreateInfoNV;
    new(param?: VkPipelineViewportExclusiveScissorStateCreateInfoNVInitializer | null): VkPipelineViewportExclusiveScissorStateCreateInfoNV;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPipelineViewportExclusiveScissorStateCreateInfoNV: VkPipelineViewportExclusiveScissorStateCreateInfoNVConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceExclusiveScissorFeaturesNV {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    exclusiveScissor: boolean;

  }

  interface VkPhysicalDeviceExclusiveScissorFeaturesNVInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    exclusiveScissor?: boolean;
  }

  interface VkPhysicalDeviceExclusiveScissorFeaturesNVConstructor {
    readonly prototype: VkPhysicalDeviceExclusiveScissorFeaturesNV;
    new(param?: VkPhysicalDeviceExclusiveScissorFeaturesNVInitializer | null): VkPhysicalDeviceExclusiveScissorFeaturesNV;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceExclusiveScissorFeaturesNV: VkPhysicalDeviceExclusiveScissorFeaturesNVConstructor;

  
  
  /**
   * 
   */
  interface VkPipelineRepresentativeFragmentTestStateCreateInfoNV {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    representativeFragmentTestEnable: boolean;

  }

  interface VkPipelineRepresentativeFragmentTestStateCreateInfoNVInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    representativeFragmentTestEnable?: boolean;
  }

  interface VkPipelineRepresentativeFragmentTestStateCreateInfoNVConstructor {
    readonly prototype: VkPipelineRepresentativeFragmentTestStateCreateInfoNV;
    new(param?: VkPipelineRepresentativeFragmentTestStateCreateInfoNVInitializer | null): VkPipelineRepresentativeFragmentTestStateCreateInfoNV;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPipelineRepresentativeFragmentTestStateCreateInfoNV: VkPipelineRepresentativeFragmentTestStateCreateInfoNVConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    representativeFragmentTest: boolean;

  }

  interface VkPhysicalDeviceRepresentativeFragmentTestFeaturesNVInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    representativeFragmentTest?: boolean;
  }

  interface VkPhysicalDeviceRepresentativeFragmentTestFeaturesNVConstructor {
    readonly prototype: VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV;
    new(param?: VkPhysicalDeviceRepresentativeFragmentTestFeaturesNVInitializer | null): VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV: VkPhysicalDeviceRepresentativeFragmentTestFeaturesNVConstructor;

  
  
  /**
   * 
   */
  interface VkPipelineRasterizationStateStreamCreateInfoEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

    /**
     *
     */
    rasterizationStream: number;

  }

  interface VkPipelineRasterizationStateStreamCreateInfoEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;

    /**
     *
     */
    rasterizationStream?: number;
  }

  interface VkPipelineRasterizationStateStreamCreateInfoEXTConstructor {
    readonly prototype: VkPipelineRasterizationStateStreamCreateInfoEXT;
    new(param?: VkPipelineRasterizationStateStreamCreateInfoEXTInitializer | null): VkPipelineRasterizationStateStreamCreateInfoEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPipelineRasterizationStateStreamCreateInfoEXT: VkPipelineRasterizationStateStreamCreateInfoEXTConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceTransformFeedbackPropertiesEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly maxTransformFeedbackStreams: number;

    /**
     *
     */
    readonly maxTransformFeedbackBuffers: number;

    /**
     *
     */
    readonly maxTransformFeedbackBufferSize: bigint | number;

    /**
     *
     */
    readonly maxTransformFeedbackStreamDataSize: number;

    /**
     *
     */
    readonly maxTransformFeedbackBufferDataSize: number;

    /**
     *
     */
    readonly maxTransformFeedbackBufferDataStride: number;

    /**
     *
     */
    readonly transformFeedbackQueries: boolean;

    /**
     *
     */
    readonly transformFeedbackStreamsLinesTriangles: boolean;

    /**
     *
     */
    readonly transformFeedbackRasterizationStreamSelect: boolean;

    /**
     *
     */
    readonly transformFeedbackDraw: boolean;

  }

  interface VkPhysicalDeviceTransformFeedbackPropertiesEXTInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly maxTransformFeedbackStreams?: number;

    /**
     *
     */
    readonly maxTransformFeedbackBuffers?: number;

    /**
     *
     */
    readonly maxTransformFeedbackBufferSize?: bigint | number;

    /**
     *
     */
    readonly maxTransformFeedbackStreamDataSize?: number;

    /**
     *
     */
    readonly maxTransformFeedbackBufferDataSize?: number;

    /**
     *
     */
    readonly maxTransformFeedbackBufferDataStride?: number;

    /**
     *
     */
    readonly transformFeedbackQueries?: boolean;

    /**
     *
     */
    readonly transformFeedbackStreamsLinesTriangles?: boolean;

    /**
     *
     */
    readonly transformFeedbackRasterizationStreamSelect?: boolean;

    /**
     *
     */
    readonly transformFeedbackDraw?: boolean;
  }

  interface VkPhysicalDeviceTransformFeedbackPropertiesEXTConstructor {
    readonly prototype: VkPhysicalDeviceTransformFeedbackPropertiesEXT;
    new(param?: VkPhysicalDeviceTransformFeedbackPropertiesEXTInitializer | null): VkPhysicalDeviceTransformFeedbackPropertiesEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceTransformFeedbackPropertiesEXT: VkPhysicalDeviceTransformFeedbackPropertiesEXTConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceTransformFeedbackFeaturesEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    transformFeedback: boolean;

    /**
     *
     */
    geometryStreams: boolean;

  }

  interface VkPhysicalDeviceTransformFeedbackFeaturesEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    transformFeedback?: boolean;

    /**
     *
     */
    geometryStreams?: boolean;
  }

  interface VkPhysicalDeviceTransformFeedbackFeaturesEXTConstructor {
    readonly prototype: VkPhysicalDeviceTransformFeedbackFeaturesEXT;
    new(param?: VkPhysicalDeviceTransformFeedbackFeaturesEXTInitializer | null): VkPhysicalDeviceTransformFeedbackFeaturesEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceTransformFeedbackFeaturesEXT: VkPhysicalDeviceTransformFeedbackFeaturesEXTConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceASTCDecodeFeaturesEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    decodeModeSharedExponent: boolean;

  }

  interface VkPhysicalDeviceASTCDecodeFeaturesEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    decodeModeSharedExponent?: boolean;
  }

  interface VkPhysicalDeviceASTCDecodeFeaturesEXTConstructor {
    readonly prototype: VkPhysicalDeviceASTCDecodeFeaturesEXT;
    new(param?: VkPhysicalDeviceASTCDecodeFeaturesEXTInitializer | null): VkPhysicalDeviceASTCDecodeFeaturesEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceASTCDecodeFeaturesEXT: VkPhysicalDeviceASTCDecodeFeaturesEXTConstructor;

  
  
  /**
   * 
   */
  interface VkImageViewASTCDecodeModeEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    decodeMode: VkFormat;

  }

  interface VkImageViewASTCDecodeModeEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    decodeMode?: VkFormat;
  }

  interface VkImageViewASTCDecodeModeEXTConstructor {
    readonly prototype: VkImageViewASTCDecodeModeEXT;
    new(param?: VkImageViewASTCDecodeModeEXTInitializer | null): VkImageViewASTCDecodeModeEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkImageViewASTCDecodeModeEXT: VkImageViewASTCDecodeModeEXTConstructor;

  
  
  /**
   * 
   */
  interface VkSubpassDescriptionDepthStencilResolveKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    depthResolveMode: VkResolveModeFlagBitsKHR;

    /**
     *
     */
    stencilResolveMode: VkResolveModeFlagBitsKHR;

    /**
     *
     */
    pDepthStencilResolveAttachment: VkAttachmentReference2KHR | null;

  }

  interface VkSubpassDescriptionDepthStencilResolveKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    depthResolveMode?: VkResolveModeFlagBitsKHR;

    /**
     *
     */
    stencilResolveMode?: VkResolveModeFlagBitsKHR;

    /**
     *
     */
    pDepthStencilResolveAttachment?: VkAttachmentReference2KHR | null;
  }

  interface VkSubpassDescriptionDepthStencilResolveKHRConstructor {
    readonly prototype: VkSubpassDescriptionDepthStencilResolveKHR;
    new(param?: VkSubpassDescriptionDepthStencilResolveKHRInitializer | null): VkSubpassDescriptionDepthStencilResolveKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkSubpassDescriptionDepthStencilResolveKHR: VkSubpassDescriptionDepthStencilResolveKHRConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceDepthStencilResolvePropertiesKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly supportedDepthResolveModes: VkResolveModeFlagBitsKHR;

    /**
     *
     */
    readonly supportedStencilResolveModes: VkResolveModeFlagBitsKHR;

    /**
     *
     */
    readonly independentResolveNone: boolean;

    /**
     *
     */
    readonly independentResolve: boolean;

  }

  interface VkPhysicalDeviceDepthStencilResolvePropertiesKHRInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly supportedDepthResolveModes?: VkResolveModeFlagBitsKHR;

    /**
     *
     */
    readonly supportedStencilResolveModes?: VkResolveModeFlagBitsKHR;

    /**
     *
     */
    readonly independentResolveNone?: boolean;

    /**
     *
     */
    readonly independentResolve?: boolean;
  }

  interface VkPhysicalDeviceDepthStencilResolvePropertiesKHRConstructor {
    readonly prototype: VkPhysicalDeviceDepthStencilResolvePropertiesKHR;
    new(param?: VkPhysicalDeviceDepthStencilResolvePropertiesKHRInitializer | null): VkPhysicalDeviceDepthStencilResolvePropertiesKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceDepthStencilResolvePropertiesKHR: VkPhysicalDeviceDepthStencilResolvePropertiesKHRConstructor;

  
  
  /**
   * 
   */
  interface VkCheckpointDataNV {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly stage: VkPipelineStageFlagBits;

    /**
     *
     */
    readonly pCheckpointMarker: ArrayBuffer | null;

  }

  interface VkCheckpointDataNVInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly stage?: VkPipelineStageFlagBits;

    /**
     *
     */
    readonly pCheckpointMarker?: ArrayBuffer | null;
  }

  interface VkCheckpointDataNVConstructor {
    readonly prototype: VkCheckpointDataNV;
    new(param?: VkCheckpointDataNVInitializer | null): VkCheckpointDataNV;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkCheckpointDataNV: VkCheckpointDataNVConstructor;

  
  
  /**
   * 
   */
  interface VkQueueFamilyCheckpointPropertiesNV {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly checkpointExecutionStageMask: VkPipelineStageFlagBits;

  }

  interface VkQueueFamilyCheckpointPropertiesNVInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly checkpointExecutionStageMask?: VkPipelineStageFlagBits;
  }

  interface VkQueueFamilyCheckpointPropertiesNVConstructor {
    readonly prototype: VkQueueFamilyCheckpointPropertiesNV;
    new(param?: VkQueueFamilyCheckpointPropertiesNVInitializer | null): VkQueueFamilyCheckpointPropertiesNV;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkQueueFamilyCheckpointPropertiesNV: VkQueueFamilyCheckpointPropertiesNVConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    vertexAttributeInstanceRateDivisor: boolean;

    /**
     *
     */
    vertexAttributeInstanceRateZeroDivisor: boolean;

  }

  interface VkPhysicalDeviceVertexAttributeDivisorFeaturesEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    vertexAttributeInstanceRateDivisor?: boolean;

    /**
     *
     */
    vertexAttributeInstanceRateZeroDivisor?: boolean;
  }

  interface VkPhysicalDeviceVertexAttributeDivisorFeaturesEXTConstructor {
    readonly prototype: VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT;
    new(param?: VkPhysicalDeviceVertexAttributeDivisorFeaturesEXTInitializer | null): VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT: VkPhysicalDeviceVertexAttributeDivisorFeaturesEXTConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceShaderAtomicInt64FeaturesKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    shaderBufferInt64Atomics: boolean;

    /**
     *
     */
    shaderSharedInt64Atomics: boolean;

  }

  interface VkPhysicalDeviceShaderAtomicInt64FeaturesKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    shaderBufferInt64Atomics?: boolean;

    /**
     *
     */
    shaderSharedInt64Atomics?: boolean;
  }

  interface VkPhysicalDeviceShaderAtomicInt64FeaturesKHRConstructor {
    readonly prototype: VkPhysicalDeviceShaderAtomicInt64FeaturesKHR;
    new(param?: VkPhysicalDeviceShaderAtomicInt64FeaturesKHRInitializer | null): VkPhysicalDeviceShaderAtomicInt64FeaturesKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceShaderAtomicInt64FeaturesKHR: VkPhysicalDeviceShaderAtomicInt64FeaturesKHRConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceVulkanMemoryModelFeaturesKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    vulkanMemoryModel: boolean;

    /**
     *
     */
    vulkanMemoryModelDeviceScope: boolean;

    /**
     *
     */
    vulkanMemoryModelAvailabilityVisibilityChains: boolean;

  }

  interface VkPhysicalDeviceVulkanMemoryModelFeaturesKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    vulkanMemoryModel?: boolean;

    /**
     *
     */
    vulkanMemoryModelDeviceScope?: boolean;

    /**
     *
     */
    vulkanMemoryModelAvailabilityVisibilityChains?: boolean;
  }

  interface VkPhysicalDeviceVulkanMemoryModelFeaturesKHRConstructor {
    readonly prototype: VkPhysicalDeviceVulkanMemoryModelFeaturesKHR;
    new(param?: VkPhysicalDeviceVulkanMemoryModelFeaturesKHRInitializer | null): VkPhysicalDeviceVulkanMemoryModelFeaturesKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceVulkanMemoryModelFeaturesKHR: VkPhysicalDeviceVulkanMemoryModelFeaturesKHRConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceConditionalRenderingFeaturesEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    conditionalRendering: boolean;

    /**
     *
     */
    inheritedConditionalRendering: boolean;

  }

  interface VkPhysicalDeviceConditionalRenderingFeaturesEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    conditionalRendering?: boolean;

    /**
     *
     */
    inheritedConditionalRendering?: boolean;
  }

  interface VkPhysicalDeviceConditionalRenderingFeaturesEXTConstructor {
    readonly prototype: VkPhysicalDeviceConditionalRenderingFeaturesEXT;
    new(param?: VkPhysicalDeviceConditionalRenderingFeaturesEXTInitializer | null): VkPhysicalDeviceConditionalRenderingFeaturesEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceConditionalRenderingFeaturesEXT: VkPhysicalDeviceConditionalRenderingFeaturesEXTConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDevice8BitStorageFeaturesKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    storageBuffer8BitAccess: boolean;

    /**
     *
     */
    uniformAndStorageBuffer8BitAccess: boolean;

    /**
     *
     */
    storagePushConstant8: boolean;

  }

  interface VkPhysicalDevice8BitStorageFeaturesKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    storageBuffer8BitAccess?: boolean;

    /**
     *
     */
    uniformAndStorageBuffer8BitAccess?: boolean;

    /**
     *
     */
    storagePushConstant8?: boolean;
  }

  interface VkPhysicalDevice8BitStorageFeaturesKHRConstructor {
    readonly prototype: VkPhysicalDevice8BitStorageFeaturesKHR;
    new(param?: VkPhysicalDevice8BitStorageFeaturesKHRInitializer | null): VkPhysicalDevice8BitStorageFeaturesKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDevice8BitStorageFeaturesKHR: VkPhysicalDevice8BitStorageFeaturesKHRConstructor;

  
  
  /**
   * 
   */
  interface VkCommandBufferInheritanceConditionalRenderingInfoEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    conditionalRenderingEnable: boolean;

  }

  interface VkCommandBufferInheritanceConditionalRenderingInfoEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    conditionalRenderingEnable?: boolean;
  }

  interface VkCommandBufferInheritanceConditionalRenderingInfoEXTConstructor {
    readonly prototype: VkCommandBufferInheritanceConditionalRenderingInfoEXT;
    new(param?: VkCommandBufferInheritanceConditionalRenderingInfoEXTInitializer | null): VkCommandBufferInheritanceConditionalRenderingInfoEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkCommandBufferInheritanceConditionalRenderingInfoEXT: VkCommandBufferInheritanceConditionalRenderingInfoEXTConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDevicePCIBusInfoPropertiesEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly pciDomain: number;

    /**
     *
     */
    readonly pciBus: number;

    /**
     *
     */
    readonly pciDevice: number;

    /**
     *
     */
    readonly pciFunction: number;

  }

  interface VkPhysicalDevicePCIBusInfoPropertiesEXTInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly pciDomain?: number;

    /**
     *
     */
    readonly pciBus?: number;

    /**
     *
     */
    readonly pciDevice?: number;

    /**
     *
     */
    readonly pciFunction?: number;
  }

  interface VkPhysicalDevicePCIBusInfoPropertiesEXTConstructor {
    readonly prototype: VkPhysicalDevicePCIBusInfoPropertiesEXT;
    new(param?: VkPhysicalDevicePCIBusInfoPropertiesEXTInitializer | null): VkPhysicalDevicePCIBusInfoPropertiesEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDevicePCIBusInfoPropertiesEXT: VkPhysicalDevicePCIBusInfoPropertiesEXTConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly maxVertexAttribDivisor: number;

  }

  interface VkPhysicalDeviceVertexAttributeDivisorPropertiesEXTInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly maxVertexAttribDivisor?: number;
  }

  interface VkPhysicalDeviceVertexAttributeDivisorPropertiesEXTConstructor {
    readonly prototype: VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT;
    new(param?: VkPhysicalDeviceVertexAttributeDivisorPropertiesEXTInitializer | null): VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT: VkPhysicalDeviceVertexAttributeDivisorPropertiesEXTConstructor;

  
  
  /**
   * 
   */
  interface VkPipelineVertexInputDivisorStateCreateInfoEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    vertexBindingDivisorCount: number;

    /**
     *
     */
    pVertexBindingDivisors: VkVertexInputBindingDivisorDescriptionEXT[] | null;

  }

  interface VkPipelineVertexInputDivisorStateCreateInfoEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    vertexBindingDivisorCount?: number;

    /**
     *
     */
    pVertexBindingDivisors?: VkVertexInputBindingDivisorDescriptionEXT[] | null;
  }

  interface VkPipelineVertexInputDivisorStateCreateInfoEXTConstructor {
    readonly prototype: VkPipelineVertexInputDivisorStateCreateInfoEXT;
    new(param?: VkPipelineVertexInputDivisorStateCreateInfoEXTInitializer | null): VkPipelineVertexInputDivisorStateCreateInfoEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPipelineVertexInputDivisorStateCreateInfoEXT: VkPipelineVertexInputDivisorStateCreateInfoEXTConstructor;

  
  
  /**
   * 
   */
  interface VkVertexInputBindingDivisorDescriptionEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    binding: number;

    /**
     *
     */
    divisor: number;

  }

  interface VkVertexInputBindingDivisorDescriptionEXTInitializer {
    
    /**
     *
     */
    binding?: number;

    /**
     *
     */
    divisor?: number;
  }

  interface VkVertexInputBindingDivisorDescriptionEXTConstructor {
    readonly prototype: VkVertexInputBindingDivisorDescriptionEXT;
    new(param?: VkVertexInputBindingDivisorDescriptionEXTInitializer | null): VkVertexInputBindingDivisorDescriptionEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkVertexInputBindingDivisorDescriptionEXT: VkVertexInputBindingDivisorDescriptionEXTConstructor;

  
  
  /**
   * 
   */
  interface VkSubpassEndInfoKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

  }

  interface VkSubpassEndInfoKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;
  }

  interface VkSubpassEndInfoKHRConstructor {
    readonly prototype: VkSubpassEndInfoKHR;
    new(param?: VkSubpassEndInfoKHRInitializer | null): VkSubpassEndInfoKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkSubpassEndInfoKHR: VkSubpassEndInfoKHRConstructor;

  
  
  /**
   * 
   */
  interface VkSubpassBeginInfoKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    contents: VkSubpassContents;

  }

  interface VkSubpassBeginInfoKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    contents?: VkSubpassContents;
  }

  interface VkSubpassBeginInfoKHRConstructor {
    readonly prototype: VkSubpassBeginInfoKHR;
    new(param?: VkSubpassBeginInfoKHRInitializer | null): VkSubpassBeginInfoKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkSubpassBeginInfoKHR: VkSubpassBeginInfoKHRConstructor;

  
  
  /**
   * 
   */
  interface VkRenderPassCreateInfo2KHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkRenderPassCreateFlagBits;

    /**
     *
     */
    attachmentCount: number;

    /**
     *
     */
    pAttachments: VkAttachmentDescription2KHR[] | null;

    /**
     *
     */
    subpassCount: number;

    /**
     *
     */
    pSubpasses: VkSubpassDescription2KHR[] | null;

    /**
     *
     */
    dependencyCount: number;

    /**
     *
     */
    pDependencies: VkSubpassDependency2KHR[] | null;

    /**
     *
     */
    correlatedViewMaskCount: number;

    /**
     *
     */
    pCorrelatedViewMasks: Uint32Array | null;

  }

  interface VkRenderPassCreateInfo2KHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkRenderPassCreateFlagBits;

    /**
     *
     */
    attachmentCount?: number;

    /**
     *
     */
    pAttachments?: VkAttachmentDescription2KHR[] | null;

    /**
     *
     */
    subpassCount?: number;

    /**
     *
     */
    pSubpasses?: VkSubpassDescription2KHR[] | null;

    /**
     *
     */
    dependencyCount?: number;

    /**
     *
     */
    pDependencies?: VkSubpassDependency2KHR[] | null;

    /**
     *
     */
    correlatedViewMaskCount?: number;

    /**
     *
     */
    pCorrelatedViewMasks?: Uint32Array | null;
  }

  interface VkRenderPassCreateInfo2KHRConstructor {
    readonly prototype: VkRenderPassCreateInfo2KHR;
    new(param?: VkRenderPassCreateInfo2KHRInitializer | null): VkRenderPassCreateInfo2KHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkRenderPassCreateInfo2KHR: VkRenderPassCreateInfo2KHRConstructor;

  
  
  /**
   * 
   */
  interface VkSubpassDependency2KHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    srcSubpass: number;

    /**
     *
     */
    dstSubpass: number;

    /**
     *
     */
    srcStageMask: VkPipelineStageFlagBits;

    /**
     *
     */
    dstStageMask: VkPipelineStageFlagBits;

    /**
     *
     */
    srcAccessMask: VkAccessFlagBits;

    /**
     *
     */
    dstAccessMask: VkAccessFlagBits;

    /**
     *
     */
    dependencyFlags: VkDependencyFlagBits;

    /**
     *
     */
    viewOffset: number;

  }

  interface VkSubpassDependency2KHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    srcSubpass?: number;

    /**
     *
     */
    dstSubpass?: number;

    /**
     *
     */
    srcStageMask?: VkPipelineStageFlagBits;

    /**
     *
     */
    dstStageMask?: VkPipelineStageFlagBits;

    /**
     *
     */
    srcAccessMask?: VkAccessFlagBits;

    /**
     *
     */
    dstAccessMask?: VkAccessFlagBits;

    /**
     *
     */
    dependencyFlags?: VkDependencyFlagBits;

    /**
     *
     */
    viewOffset?: number;
  }

  interface VkSubpassDependency2KHRConstructor {
    readonly prototype: VkSubpassDependency2KHR;
    new(param?: VkSubpassDependency2KHRInitializer | null): VkSubpassDependency2KHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkSubpassDependency2KHR: VkSubpassDependency2KHRConstructor;

  
  
  /**
   * 
   */
  interface VkSubpassDescription2KHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkSubpassDescriptionFlagBits;

    /**
     *
     */
    pipelineBindPoint: VkPipelineBindPoint;

    /**
     *
     */
    viewMask: number;

    /**
     *
     */
    inputAttachmentCount: number;

    /**
     *
     */
    pInputAttachments: VkAttachmentReference2KHR[] | null;

    /**
     *
     */
    colorAttachmentCount: number;

    /**
     *
     */
    pColorAttachments: VkAttachmentReference2KHR[] | null;

    /**
     *
     */
    pResolveAttachments: VkAttachmentReference2KHR[] | null;

    /**
     *
     */
    pDepthStencilAttachment: VkAttachmentReference2KHR | null;

    /**
     *
     */
    preserveAttachmentCount: number;

    /**
     *
     */
    pPreserveAttachments: Uint32Array | null;

  }

  interface VkSubpassDescription2KHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkSubpassDescriptionFlagBits;

    /**
     *
     */
    pipelineBindPoint?: VkPipelineBindPoint;

    /**
     *
     */
    viewMask?: number;

    /**
     *
     */
    inputAttachmentCount?: number;

    /**
     *
     */
    pInputAttachments?: VkAttachmentReference2KHR[] | null;

    /**
     *
     */
    colorAttachmentCount?: number;

    /**
     *
     */
    pColorAttachments?: VkAttachmentReference2KHR[] | null;

    /**
     *
     */
    pResolveAttachments?: VkAttachmentReference2KHR[] | null;

    /**
     *
     */
    pDepthStencilAttachment?: VkAttachmentReference2KHR | null;

    /**
     *
     */
    preserveAttachmentCount?: number;

    /**
     *
     */
    pPreserveAttachments?: Uint32Array | null;
  }

  interface VkSubpassDescription2KHRConstructor {
    readonly prototype: VkSubpassDescription2KHR;
    new(param?: VkSubpassDescription2KHRInitializer | null): VkSubpassDescription2KHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkSubpassDescription2KHR: VkSubpassDescription2KHRConstructor;

  
  
  /**
   * 
   */
  interface VkAttachmentReference2KHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    attachment: number;

    /**
     *
     */
    layout: VkImageLayout;

    /**
     *
     */
    aspectMask: VkImageAspectFlagBits;

  }

  interface VkAttachmentReference2KHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    attachment?: number;

    /**
     *
     */
    layout?: VkImageLayout;

    /**
     *
     */
    aspectMask?: VkImageAspectFlagBits;
  }

  interface VkAttachmentReference2KHRConstructor {
    readonly prototype: VkAttachmentReference2KHR;
    new(param?: VkAttachmentReference2KHRInitializer | null): VkAttachmentReference2KHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkAttachmentReference2KHR: VkAttachmentReference2KHRConstructor;

  
  
  /**
   * 
   */
  interface VkAttachmentDescription2KHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkAttachmentDescriptionFlagBits;

    /**
     *
     */
    format: VkFormat;

    /**
     *
     */
    samples: VkSampleCountFlagBits;

    /**
     *
     */
    loadOp: VkAttachmentLoadOp;

    /**
     *
     */
    storeOp: VkAttachmentStoreOp;

    /**
     *
     */
    stencilLoadOp: VkAttachmentLoadOp;

    /**
     *
     */
    stencilStoreOp: VkAttachmentStoreOp;

    /**
     *
     */
    initialLayout: VkImageLayout;

    /**
     *
     */
    finalLayout: VkImageLayout;

  }

  interface VkAttachmentDescription2KHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkAttachmentDescriptionFlagBits;

    /**
     *
     */
    format?: VkFormat;

    /**
     *
     */
    samples?: VkSampleCountFlagBits;

    /**
     *
     */
    loadOp?: VkAttachmentLoadOp;

    /**
     *
     */
    storeOp?: VkAttachmentStoreOp;

    /**
     *
     */
    stencilLoadOp?: VkAttachmentLoadOp;

    /**
     *
     */
    stencilStoreOp?: VkAttachmentStoreOp;

    /**
     *
     */
    initialLayout?: VkImageLayout;

    /**
     *
     */
    finalLayout?: VkImageLayout;
  }

  interface VkAttachmentDescription2KHRConstructor {
    readonly prototype: VkAttachmentDescription2KHR;
    new(param?: VkAttachmentDescription2KHRInitializer | null): VkAttachmentDescription2KHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkAttachmentDescription2KHR: VkAttachmentDescription2KHRConstructor;

  
  
  /**
   * 
   */
  interface VkDescriptorSetVariableDescriptorCountLayoutSupportEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly maxVariableDescriptorCount: number;

  }

  interface VkDescriptorSetVariableDescriptorCountLayoutSupportEXTInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly maxVariableDescriptorCount?: number;
  }

  interface VkDescriptorSetVariableDescriptorCountLayoutSupportEXTConstructor {
    readonly prototype: VkDescriptorSetVariableDescriptorCountLayoutSupportEXT;
    new(param?: VkDescriptorSetVariableDescriptorCountLayoutSupportEXTInitializer | null): VkDescriptorSetVariableDescriptorCountLayoutSupportEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDescriptorSetVariableDescriptorCountLayoutSupportEXT: VkDescriptorSetVariableDescriptorCountLayoutSupportEXTConstructor;

  
  
  /**
   * 
   */
  interface VkDescriptorSetVariableDescriptorCountAllocateInfoEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    descriptorSetCount: number;

    /**
     *
     */
    pDescriptorCounts: Uint32Array | null;

  }

  interface VkDescriptorSetVariableDescriptorCountAllocateInfoEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    descriptorSetCount?: number;

    /**
     *
     */
    pDescriptorCounts?: Uint32Array | null;
  }

  interface VkDescriptorSetVariableDescriptorCountAllocateInfoEXTConstructor {
    readonly prototype: VkDescriptorSetVariableDescriptorCountAllocateInfoEXT;
    new(param?: VkDescriptorSetVariableDescriptorCountAllocateInfoEXTInitializer | null): VkDescriptorSetVariableDescriptorCountAllocateInfoEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDescriptorSetVariableDescriptorCountAllocateInfoEXT: VkDescriptorSetVariableDescriptorCountAllocateInfoEXTConstructor;

  
  
  /**
   * 
   */
  interface VkDescriptorSetLayoutBindingFlagsCreateInfoEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    bindingCount: number;

    /**
     *
     */
    pBindingFlags: Int32Array | null;

  }

  interface VkDescriptorSetLayoutBindingFlagsCreateInfoEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    bindingCount?: number;

    /**
     *
     */
    pBindingFlags?: Int32Array | null;
  }

  interface VkDescriptorSetLayoutBindingFlagsCreateInfoEXTConstructor {
    readonly prototype: VkDescriptorSetLayoutBindingFlagsCreateInfoEXT;
    new(param?: VkDescriptorSetLayoutBindingFlagsCreateInfoEXTInitializer | null): VkDescriptorSetLayoutBindingFlagsCreateInfoEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDescriptorSetLayoutBindingFlagsCreateInfoEXT: VkDescriptorSetLayoutBindingFlagsCreateInfoEXTConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceDescriptorIndexingPropertiesEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly maxUpdateAfterBindDescriptorsInAllPools: number;

    /**
     *
     */
    readonly shaderUniformBufferArrayNonUniformIndexingNative: boolean;

    /**
     *
     */
    readonly shaderSampledImageArrayNonUniformIndexingNative: boolean;

    /**
     *
     */
    readonly shaderStorageBufferArrayNonUniformIndexingNative: boolean;

    /**
     *
     */
    readonly shaderStorageImageArrayNonUniformIndexingNative: boolean;

    /**
     *
     */
    readonly shaderInputAttachmentArrayNonUniformIndexingNative: boolean;

    /**
     *
     */
    readonly robustBufferAccessUpdateAfterBind: boolean;

    /**
     *
     */
    readonly quadDivergentImplicitLod: boolean;

    /**
     *
     */
    readonly maxPerStageDescriptorUpdateAfterBindSamplers: number;

    /**
     *
     */
    readonly maxPerStageDescriptorUpdateAfterBindUniformBuffers: number;

    /**
     *
     */
    readonly maxPerStageDescriptorUpdateAfterBindStorageBuffers: number;

    /**
     *
     */
    readonly maxPerStageDescriptorUpdateAfterBindSampledImages: number;

    /**
     *
     */
    readonly maxPerStageDescriptorUpdateAfterBindStorageImages: number;

    /**
     *
     */
    readonly maxPerStageDescriptorUpdateAfterBindInputAttachments: number;

    /**
     *
     */
    readonly maxPerStageUpdateAfterBindResources: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindSamplers: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindUniformBuffers: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindStorageBuffers: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindSampledImages: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindStorageImages: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindInputAttachments: number;

  }

  interface VkPhysicalDeviceDescriptorIndexingPropertiesEXTInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly maxUpdateAfterBindDescriptorsInAllPools?: number;

    /**
     *
     */
    readonly shaderUniformBufferArrayNonUniformIndexingNative?: boolean;

    /**
     *
     */
    readonly shaderSampledImageArrayNonUniformIndexingNative?: boolean;

    /**
     *
     */
    readonly shaderStorageBufferArrayNonUniformIndexingNative?: boolean;

    /**
     *
     */
    readonly shaderStorageImageArrayNonUniformIndexingNative?: boolean;

    /**
     *
     */
    readonly shaderInputAttachmentArrayNonUniformIndexingNative?: boolean;

    /**
     *
     */
    readonly robustBufferAccessUpdateAfterBind?: boolean;

    /**
     *
     */
    readonly quadDivergentImplicitLod?: boolean;

    /**
     *
     */
    readonly maxPerStageDescriptorUpdateAfterBindSamplers?: number;

    /**
     *
     */
    readonly maxPerStageDescriptorUpdateAfterBindUniformBuffers?: number;

    /**
     *
     */
    readonly maxPerStageDescriptorUpdateAfterBindStorageBuffers?: number;

    /**
     *
     */
    readonly maxPerStageDescriptorUpdateAfterBindSampledImages?: number;

    /**
     *
     */
    readonly maxPerStageDescriptorUpdateAfterBindStorageImages?: number;

    /**
     *
     */
    readonly maxPerStageDescriptorUpdateAfterBindInputAttachments?: number;

    /**
     *
     */
    readonly maxPerStageUpdateAfterBindResources?: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindSamplers?: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindUniformBuffers?: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindUniformBuffersDynamic?: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindStorageBuffers?: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindStorageBuffersDynamic?: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindSampledImages?: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindStorageImages?: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindInputAttachments?: number;
  }

  interface VkPhysicalDeviceDescriptorIndexingPropertiesEXTConstructor {
    readonly prototype: VkPhysicalDeviceDescriptorIndexingPropertiesEXT;
    new(param?: VkPhysicalDeviceDescriptorIndexingPropertiesEXTInitializer | null): VkPhysicalDeviceDescriptorIndexingPropertiesEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceDescriptorIndexingPropertiesEXT: VkPhysicalDeviceDescriptorIndexingPropertiesEXTConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceDescriptorIndexingFeaturesEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    shaderInputAttachmentArrayDynamicIndexing: boolean;

    /**
     *
     */
    shaderUniformTexelBufferArrayDynamicIndexing: boolean;

    /**
     *
     */
    shaderStorageTexelBufferArrayDynamicIndexing: boolean;

    /**
     *
     */
    shaderUniformBufferArrayNonUniformIndexing: boolean;

    /**
     *
     */
    shaderSampledImageArrayNonUniformIndexing: boolean;

    /**
     *
     */
    shaderStorageBufferArrayNonUniformIndexing: boolean;

    /**
     *
     */
    shaderStorageImageArrayNonUniformIndexing: boolean;

    /**
     *
     */
    shaderInputAttachmentArrayNonUniformIndexing: boolean;

    /**
     *
     */
    shaderUniformTexelBufferArrayNonUniformIndexing: boolean;

    /**
     *
     */
    shaderStorageTexelBufferArrayNonUniformIndexing: boolean;

    /**
     *
     */
    descriptorBindingUniformBufferUpdateAfterBind: boolean;

    /**
     *
     */
    descriptorBindingSampledImageUpdateAfterBind: boolean;

    /**
     *
     */
    descriptorBindingStorageImageUpdateAfterBind: boolean;

    /**
     *
     */
    descriptorBindingStorageBufferUpdateAfterBind: boolean;

    /**
     *
     */
    descriptorBindingUniformTexelBufferUpdateAfterBind: boolean;

    /**
     *
     */
    descriptorBindingStorageTexelBufferUpdateAfterBind: boolean;

    /**
     *
     */
    descriptorBindingUpdateUnusedWhilePending: boolean;

    /**
     *
     */
    descriptorBindingPartiallyBound: boolean;

    /**
     *
     */
    descriptorBindingVariableDescriptorCount: boolean;

    /**
     *
     */
    runtimeDescriptorArray: boolean;

  }

  interface VkPhysicalDeviceDescriptorIndexingFeaturesEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    shaderInputAttachmentArrayDynamicIndexing?: boolean;

    /**
     *
     */
    shaderUniformTexelBufferArrayDynamicIndexing?: boolean;

    /**
     *
     */
    shaderStorageTexelBufferArrayDynamicIndexing?: boolean;

    /**
     *
     */
    shaderUniformBufferArrayNonUniformIndexing?: boolean;

    /**
     *
     */
    shaderSampledImageArrayNonUniformIndexing?: boolean;

    /**
     *
     */
    shaderStorageBufferArrayNonUniformIndexing?: boolean;

    /**
     *
     */
    shaderStorageImageArrayNonUniformIndexing?: boolean;

    /**
     *
     */
    shaderInputAttachmentArrayNonUniformIndexing?: boolean;

    /**
     *
     */
    shaderUniformTexelBufferArrayNonUniformIndexing?: boolean;

    /**
     *
     */
    shaderStorageTexelBufferArrayNonUniformIndexing?: boolean;

    /**
     *
     */
    descriptorBindingUniformBufferUpdateAfterBind?: boolean;

    /**
     *
     */
    descriptorBindingSampledImageUpdateAfterBind?: boolean;

    /**
     *
     */
    descriptorBindingStorageImageUpdateAfterBind?: boolean;

    /**
     *
     */
    descriptorBindingStorageBufferUpdateAfterBind?: boolean;

    /**
     *
     */
    descriptorBindingUniformTexelBufferUpdateAfterBind?: boolean;

    /**
     *
     */
    descriptorBindingStorageTexelBufferUpdateAfterBind?: boolean;

    /**
     *
     */
    descriptorBindingUpdateUnusedWhilePending?: boolean;

    /**
     *
     */
    descriptorBindingPartiallyBound?: boolean;

    /**
     *
     */
    descriptorBindingVariableDescriptorCount?: boolean;

    /**
     *
     */
    runtimeDescriptorArray?: boolean;
  }

  interface VkPhysicalDeviceDescriptorIndexingFeaturesEXTConstructor {
    readonly prototype: VkPhysicalDeviceDescriptorIndexingFeaturesEXT;
    new(param?: VkPhysicalDeviceDescriptorIndexingFeaturesEXTInitializer | null): VkPhysicalDeviceDescriptorIndexingFeaturesEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceDescriptorIndexingFeaturesEXT: VkPhysicalDeviceDescriptorIndexingFeaturesEXTConstructor;

  
  
  /**
   * 
   */
  interface VkPipelineRasterizationConservativeStateCreateInfoEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

    /**
     *
     */
    conservativeRasterizationMode: VkConservativeRasterizationModeEXT;

    /**
     *
     */
    extraPrimitiveOverestimationSize: number;

  }

  interface VkPipelineRasterizationConservativeStateCreateInfoEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;

    /**
     *
     */
    conservativeRasterizationMode?: VkConservativeRasterizationModeEXT;

    /**
     *
     */
    extraPrimitiveOverestimationSize?: number;
  }

  interface VkPipelineRasterizationConservativeStateCreateInfoEXTConstructor {
    readonly prototype: VkPipelineRasterizationConservativeStateCreateInfoEXT;
    new(param?: VkPipelineRasterizationConservativeStateCreateInfoEXTInitializer | null): VkPipelineRasterizationConservativeStateCreateInfoEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPipelineRasterizationConservativeStateCreateInfoEXT: VkPipelineRasterizationConservativeStateCreateInfoEXTConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceShaderCoreProperties2AMD {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly shaderCoreFeatures: VkShaderCorePropertiesFlagBitsAMD;

    /**
     *
     */
    readonly activeComputeUnitCount: number;

  }

  interface VkPhysicalDeviceShaderCoreProperties2AMDInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly shaderCoreFeatures?: VkShaderCorePropertiesFlagBitsAMD;

    /**
     *
     */
    readonly activeComputeUnitCount?: number;
  }

  interface VkPhysicalDeviceShaderCoreProperties2AMDConstructor {
    readonly prototype: VkPhysicalDeviceShaderCoreProperties2AMD;
    new(param?: VkPhysicalDeviceShaderCoreProperties2AMDInitializer | null): VkPhysicalDeviceShaderCoreProperties2AMD;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceShaderCoreProperties2AMD: VkPhysicalDeviceShaderCoreProperties2AMDConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceShaderCorePropertiesAMD {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly shaderEngineCount: number;

    /**
     *
     */
    readonly shaderArraysPerEngineCount: number;

    /**
     *
     */
    readonly computeUnitsPerShaderArray: number;

    /**
     *
     */
    readonly simdPerComputeUnit: number;

    /**
     *
     */
    readonly wavefrontsPerSimd: number;

    /**
     *
     */
    readonly wavefrontSize: number;

    /**
     *
     */
    readonly sgprsPerSimd: number;

    /**
     *
     */
    readonly minSgprAllocation: number;

    /**
     *
     */
    readonly maxSgprAllocation: number;

    /**
     *
     */
    readonly sgprAllocationGranularity: number;

    /**
     *
     */
    readonly vgprsPerSimd: number;

    /**
     *
     */
    readonly minVgprAllocation: number;

    /**
     *
     */
    readonly maxVgprAllocation: number;

    /**
     *
     */
    readonly vgprAllocationGranularity: number;

  }

  interface VkPhysicalDeviceShaderCorePropertiesAMDInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly shaderEngineCount?: number;

    /**
     *
     */
    readonly shaderArraysPerEngineCount?: number;

    /**
     *
     */
    readonly computeUnitsPerShaderArray?: number;

    /**
     *
     */
    readonly simdPerComputeUnit?: number;

    /**
     *
     */
    readonly wavefrontsPerSimd?: number;

    /**
     *
     */
    readonly wavefrontSize?: number;

    /**
     *
     */
    readonly sgprsPerSimd?: number;

    /**
     *
     */
    readonly minSgprAllocation?: number;

    /**
     *
     */
    readonly maxSgprAllocation?: number;

    /**
     *
     */
    readonly sgprAllocationGranularity?: number;

    /**
     *
     */
    readonly vgprsPerSimd?: number;

    /**
     *
     */
    readonly minVgprAllocation?: number;

    /**
     *
     */
    readonly maxVgprAllocation?: number;

    /**
     *
     */
    readonly vgprAllocationGranularity?: number;
  }

  interface VkPhysicalDeviceShaderCorePropertiesAMDConstructor {
    readonly prototype: VkPhysicalDeviceShaderCorePropertiesAMD;
    new(param?: VkPhysicalDeviceShaderCorePropertiesAMDInitializer | null): VkPhysicalDeviceShaderCorePropertiesAMD;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceShaderCorePropertiesAMD: VkPhysicalDeviceShaderCorePropertiesAMDConstructor;

  
  
  /**
   * 
   */
  interface VkCalibratedTimestampInfoEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    timeDomain: VkTimeDomainEXT;

  }

  interface VkCalibratedTimestampInfoEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    timeDomain?: VkTimeDomainEXT;
  }

  interface VkCalibratedTimestampInfoEXTConstructor {
    readonly prototype: VkCalibratedTimestampInfoEXT;
    new(param?: VkCalibratedTimestampInfoEXTInitializer | null): VkCalibratedTimestampInfoEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkCalibratedTimestampInfoEXT: VkCalibratedTimestampInfoEXTConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceConservativeRasterizationPropertiesEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly primitiveOverestimationSize: number;

    /**
     *
     */
    readonly maxExtraPrimitiveOverestimationSize: number;

    /**
     *
     */
    readonly extraPrimitiveOverestimationSizeGranularity: number;

    /**
     *
     */
    readonly primitiveUnderestimation: boolean;

    /**
     *
     */
    readonly conservativePointAndLineRasterization: boolean;

    /**
     *
     */
    readonly degenerateTrianglesRasterized: boolean;

    /**
     *
     */
    readonly degenerateLinesRasterized: boolean;

    /**
     *
     */
    readonly fullyCoveredFragmentShaderInputVariable: boolean;

    /**
     *
     */
    readonly conservativeRasterizationPostDepthCoverage: boolean;

  }

  interface VkPhysicalDeviceConservativeRasterizationPropertiesEXTInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly primitiveOverestimationSize?: number;

    /**
     *
     */
    readonly maxExtraPrimitiveOverestimationSize?: number;

    /**
     *
     */
    readonly extraPrimitiveOverestimationSizeGranularity?: number;

    /**
     *
     */
    readonly primitiveUnderestimation?: boolean;

    /**
     *
     */
    readonly conservativePointAndLineRasterization?: boolean;

    /**
     *
     */
    readonly degenerateTrianglesRasterized?: boolean;

    /**
     *
     */
    readonly degenerateLinesRasterized?: boolean;

    /**
     *
     */
    readonly fullyCoveredFragmentShaderInputVariable?: boolean;

    /**
     *
     */
    readonly conservativeRasterizationPostDepthCoverage?: boolean;
  }

  interface VkPhysicalDeviceConservativeRasterizationPropertiesEXTConstructor {
    readonly prototype: VkPhysicalDeviceConservativeRasterizationPropertiesEXT;
    new(param?: VkPhysicalDeviceConservativeRasterizationPropertiesEXTInitializer | null): VkPhysicalDeviceConservativeRasterizationPropertiesEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceConservativeRasterizationPropertiesEXT: VkPhysicalDeviceConservativeRasterizationPropertiesEXTConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceExternalMemoryHostPropertiesEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly minImportedHostPointerAlignment: bigint | number;

  }

  interface VkPhysicalDeviceExternalMemoryHostPropertiesEXTInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly minImportedHostPointerAlignment?: bigint | number;
  }

  interface VkPhysicalDeviceExternalMemoryHostPropertiesEXTConstructor {
    readonly prototype: VkPhysicalDeviceExternalMemoryHostPropertiesEXT;
    new(param?: VkPhysicalDeviceExternalMemoryHostPropertiesEXTInitializer | null): VkPhysicalDeviceExternalMemoryHostPropertiesEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceExternalMemoryHostPropertiesEXT: VkPhysicalDeviceExternalMemoryHostPropertiesEXTConstructor;

  
  
  /**
   * 
   */
  interface VkMemoryHostPointerPropertiesEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly memoryTypeBits: number;

  }

  interface VkMemoryHostPointerPropertiesEXTInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly memoryTypeBits?: number;
  }

  interface VkMemoryHostPointerPropertiesEXTConstructor {
    readonly prototype: VkMemoryHostPointerPropertiesEXT;
    new(param?: VkMemoryHostPointerPropertiesEXTInitializer | null): VkMemoryHostPointerPropertiesEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkMemoryHostPointerPropertiesEXT: VkMemoryHostPointerPropertiesEXTConstructor;

  
  
  /**
   * 
   */
  interface VkImportMemoryHostPointerInfoEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    handleType: VkExternalMemoryHandleTypeFlagBits;

    /**
     *
     */
    pHostPointer: ArrayBuffer | null;

  }

  interface VkImportMemoryHostPointerInfoEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    handleType?: VkExternalMemoryHandleTypeFlagBits;

    /**
     *
     */
    pHostPointer?: ArrayBuffer | null;
  }

  interface VkImportMemoryHostPointerInfoEXTConstructor {
    readonly prototype: VkImportMemoryHostPointerInfoEXT;
    new(param?: VkImportMemoryHostPointerInfoEXTInitializer | null): VkImportMemoryHostPointerInfoEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkImportMemoryHostPointerInfoEXT: VkImportMemoryHostPointerInfoEXTConstructor;

  
  
  /**
   * 
   */
  interface VkDebugUtilsMessengerCallbackDataEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

    /**
     *
     */
    pMessageIdName: string | null;

    /**
     *
     */
    messageIdNumber: number;

    /**
     *
     */
    pMessage: string | null;

    /**
     *
     */
    queueLabelCount: number;

    /**
     *
     */
    pQueueLabels: VkDebugUtilsLabelEXT[] | null;

    /**
     *
     */
    cmdBufLabelCount: number;

    /**
     *
     */
    pCmdBufLabels: VkDebugUtilsLabelEXT[] | null;

    /**
     *
     */
    objectCount: number;

    /**
     *
     */
    pObjects: VkDebugUtilsObjectNameInfoEXT[] | null;

  }

  interface VkDebugUtilsMessengerCallbackDataEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;

    /**
     *
     */
    pMessageIdName?: string | null;

    /**
     *
     */
    messageIdNumber?: number;

    /**
     *
     */
    pMessage?: string | null;

    /**
     *
     */
    queueLabelCount?: number;

    /**
     *
     */
    pQueueLabels?: VkDebugUtilsLabelEXT[] | null;

    /**
     *
     */
    cmdBufLabelCount?: number;

    /**
     *
     */
    pCmdBufLabels?: VkDebugUtilsLabelEXT[] | null;

    /**
     *
     */
    objectCount?: number;

    /**
     *
     */
    pObjects?: VkDebugUtilsObjectNameInfoEXT[] | null;
  }

  interface VkDebugUtilsMessengerCallbackDataEXTConstructor {
    readonly prototype: VkDebugUtilsMessengerCallbackDataEXT;
    new(param?: VkDebugUtilsMessengerCallbackDataEXTInitializer | null): VkDebugUtilsMessengerCallbackDataEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDebugUtilsMessengerCallbackDataEXT: VkDebugUtilsMessengerCallbackDataEXTConstructor;

  
  
  /**
   * 
   */
  interface VkDebugUtilsMessengerCreateInfoEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

    /**
     *
     */
    messageSeverity: VkDebugUtilsMessageSeverityFlagBitsEXT;

    /**
     *
     */
    messageType: VkDebugUtilsMessageTypeFlagBitsEXT;

    /**
     *
     */
    pfnUserCallback: null;

    /**
     *
     */
    pUserData: ArrayBuffer | null;

  }

  interface VkDebugUtilsMessengerCreateInfoEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;

    /**
     *
     */
    messageSeverity?: VkDebugUtilsMessageSeverityFlagBitsEXT;

    /**
     *
     */
    messageType?: VkDebugUtilsMessageTypeFlagBitsEXT;

    /**
     *
     */
    pfnUserCallback?: null;

    /**
     *
     */
    pUserData?: ArrayBuffer | null;
  }

  interface VkDebugUtilsMessengerCreateInfoEXTConstructor {
    readonly prototype: VkDebugUtilsMessengerCreateInfoEXT;
    new(param?: VkDebugUtilsMessengerCreateInfoEXTInitializer | null): VkDebugUtilsMessengerCreateInfoEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDebugUtilsMessengerCreateInfoEXT: VkDebugUtilsMessengerCreateInfoEXTConstructor;

  
  
  /**
   * 
   */
  interface VkDebugUtilsLabelEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    pLabelName: string | null;

    /**
     *
     */
    color: number[] | null;

  }

  interface VkDebugUtilsLabelEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    pLabelName?: string | null;

    /**
     *
     */
    color?: number[] | null;
  }

  interface VkDebugUtilsLabelEXTConstructor {
    readonly prototype: VkDebugUtilsLabelEXT;
    new(param?: VkDebugUtilsLabelEXTInitializer | null): VkDebugUtilsLabelEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDebugUtilsLabelEXT: VkDebugUtilsLabelEXTConstructor;

  
  
  /**
   * 
   */
  interface VkDebugUtilsObjectTagInfoEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    objectType: VkObjectType;

    /**
     *
     */
    objectHandle: bigint | number;

    /**
     *
     */
    tagName: bigint | number;

    /**
     *
     */
    tagSize: bigint | number;

    /**
     *
     */
    pTag: ArrayBuffer | null;

  }

  interface VkDebugUtilsObjectTagInfoEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    objectType?: VkObjectType;

    /**
     *
     */
    objectHandle?: bigint | number;

    /**
     *
     */
    tagName?: bigint | number;

    /**
     *
     */
    tagSize?: bigint | number;

    /**
     *
     */
    pTag?: ArrayBuffer | null;
  }

  interface VkDebugUtilsObjectTagInfoEXTConstructor {
    readonly prototype: VkDebugUtilsObjectTagInfoEXT;
    new(param?: VkDebugUtilsObjectTagInfoEXTInitializer | null): VkDebugUtilsObjectTagInfoEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDebugUtilsObjectTagInfoEXT: VkDebugUtilsObjectTagInfoEXTConstructor;

  
  
  /**
   * 
   */
  interface VkDebugUtilsObjectNameInfoEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    objectType: VkObjectType;

    /**
     *
     */
    objectHandle: bigint | number;

    /**
     *
     */
    pObjectName: string | null;

  }

  interface VkDebugUtilsObjectNameInfoEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    objectType?: VkObjectType;

    /**
     *
     */
    objectHandle?: bigint | number;

    /**
     *
     */
    pObjectName?: string | null;
  }

  interface VkDebugUtilsObjectNameInfoEXTConstructor {
    readonly prototype: VkDebugUtilsObjectNameInfoEXT;
    new(param?: VkDebugUtilsObjectNameInfoEXTInitializer | null): VkDebugUtilsObjectNameInfoEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDebugUtilsObjectNameInfoEXT: VkDebugUtilsObjectNameInfoEXTConstructor;

  
  
  /**
   * 
   */
  interface VkDeviceQueueGlobalPriorityCreateInfoEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    globalPriority: VkQueueGlobalPriorityEXT;

  }

  interface VkDeviceQueueGlobalPriorityCreateInfoEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    globalPriority?: VkQueueGlobalPriorityEXT;
  }

  interface VkDeviceQueueGlobalPriorityCreateInfoEXTConstructor {
    readonly prototype: VkDeviceQueueGlobalPriorityCreateInfoEXT;
    new(param?: VkDeviceQueueGlobalPriorityCreateInfoEXTInitializer | null): VkDeviceQueueGlobalPriorityCreateInfoEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDeviceQueueGlobalPriorityCreateInfoEXT: VkDeviceQueueGlobalPriorityCreateInfoEXTConstructor;

  
  
  /**
   * 
   */
  interface VkShaderStatisticsInfoAMD {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly shaderStageMask: VkShaderStageFlagBits;

    /**
     *
     */
    readonly resourceUsage: VkShaderResourceUsageAMD | null;

    /**
     *
     */
    readonly numPhysicalVgprs: number;

    /**
     *
     */
    readonly numPhysicalSgprs: number;

    /**
     *
     */
    readonly numAvailableVgprs: number;

    /**
     *
     */
    readonly numAvailableSgprs: number;

    /**
     *
     */
    readonly computeWorkGroupSize: number[] | null;

  }

  interface VkShaderStatisticsInfoAMDInitializer {
    
    /**
     *
     */
    readonly shaderStageMask?: VkShaderStageFlagBits;

    /**
     *
     */
    readonly resourceUsage?: VkShaderResourceUsageAMD | null;

    /**
     *
     */
    readonly numPhysicalVgprs?: number;

    /**
     *
     */
    readonly numPhysicalSgprs?: number;

    /**
     *
     */
    readonly numAvailableVgprs?: number;

    /**
     *
     */
    readonly numAvailableSgprs?: number;

    /**
     *
     */
    readonly computeWorkGroupSize?: number[] | null;
  }

  interface VkShaderStatisticsInfoAMDConstructor {
    readonly prototype: VkShaderStatisticsInfoAMD;
    new(param?: VkShaderStatisticsInfoAMDInitializer | null): VkShaderStatisticsInfoAMD;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkShaderStatisticsInfoAMD: VkShaderStatisticsInfoAMDConstructor;

  
  
  /**
   * 
   */
  interface VkShaderResourceUsageAMD {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly numUsedVgprs: number;

    /**
     *
     */
    readonly numUsedSgprs: number;

    /**
     *
     */
    readonly ldsSizePerLocalWorkGroup: number;

    /**
     *
     */
    readonly ldsUsageSizeInBytes: bigint | number;

    /**
     *
     */
    readonly scratchMemUsageInBytes: bigint | number;

  }

  interface VkShaderResourceUsageAMDInitializer {
    
    /**
     *
     */
    readonly numUsedVgprs?: number;

    /**
     *
     */
    readonly numUsedSgprs?: number;

    /**
     *
     */
    readonly ldsSizePerLocalWorkGroup?: number;

    /**
     *
     */
    readonly ldsUsageSizeInBytes?: bigint | number;

    /**
     *
     */
    readonly scratchMemUsageInBytes?: bigint | number;
  }

  interface VkShaderResourceUsageAMDConstructor {
    readonly prototype: VkShaderResourceUsageAMD;
    new(param?: VkShaderResourceUsageAMDInitializer | null): VkShaderResourceUsageAMD;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkShaderResourceUsageAMD: VkShaderResourceUsageAMDConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceHostQueryResetFeaturesEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    hostQueryReset: boolean;

  }

  interface VkPhysicalDeviceHostQueryResetFeaturesEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    hostQueryReset?: boolean;
  }

  interface VkPhysicalDeviceHostQueryResetFeaturesEXTConstructor {
    readonly prototype: VkPhysicalDeviceHostQueryResetFeaturesEXT;
    new(param?: VkPhysicalDeviceHostQueryResetFeaturesEXTInitializer | null): VkPhysicalDeviceHostQueryResetFeaturesEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceHostQueryResetFeaturesEXT: VkPhysicalDeviceHostQueryResetFeaturesEXTConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceFloatControlsPropertiesKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly denormBehaviorIndependence: VkShaderFloatControlsIndependenceKHR;

    /**
     *
     */
    readonly roundingModeIndependence: VkShaderFloatControlsIndependenceKHR;

    /**
     *
     */
    readonly shaderSignedZeroInfNanPreserveFloat16: boolean;

    /**
     *
     */
    readonly shaderSignedZeroInfNanPreserveFloat32: boolean;

    /**
     *
     */
    readonly shaderSignedZeroInfNanPreserveFloat64: boolean;

    /**
     *
     */
    readonly shaderDenormPreserveFloat16: boolean;

    /**
     *
     */
    readonly shaderDenormPreserveFloat32: boolean;

    /**
     *
     */
    readonly shaderDenormPreserveFloat64: boolean;

    /**
     *
     */
    readonly shaderDenormFlushToZeroFloat16: boolean;

    /**
     *
     */
    readonly shaderDenormFlushToZeroFloat32: boolean;

    /**
     *
     */
    readonly shaderDenormFlushToZeroFloat64: boolean;

    /**
     *
     */
    readonly shaderRoundingModeRTEFloat16: boolean;

    /**
     *
     */
    readonly shaderRoundingModeRTEFloat32: boolean;

    /**
     *
     */
    readonly shaderRoundingModeRTEFloat64: boolean;

    /**
     *
     */
    readonly shaderRoundingModeRTZFloat16: boolean;

    /**
     *
     */
    readonly shaderRoundingModeRTZFloat32: boolean;

    /**
     *
     */
    readonly shaderRoundingModeRTZFloat64: boolean;

  }

  interface VkPhysicalDeviceFloatControlsPropertiesKHRInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly denormBehaviorIndependence?: VkShaderFloatControlsIndependenceKHR;

    /**
     *
     */
    readonly roundingModeIndependence?: VkShaderFloatControlsIndependenceKHR;

    /**
     *
     */
    readonly shaderSignedZeroInfNanPreserveFloat16?: boolean;

    /**
     *
     */
    readonly shaderSignedZeroInfNanPreserveFloat32?: boolean;

    /**
     *
     */
    readonly shaderSignedZeroInfNanPreserveFloat64?: boolean;

    /**
     *
     */
    readonly shaderDenormPreserveFloat16?: boolean;

    /**
     *
     */
    readonly shaderDenormPreserveFloat32?: boolean;

    /**
     *
     */
    readonly shaderDenormPreserveFloat64?: boolean;

    /**
     *
     */
    readonly shaderDenormFlushToZeroFloat16?: boolean;

    /**
     *
     */
    readonly shaderDenormFlushToZeroFloat32?: boolean;

    /**
     *
     */
    readonly shaderDenormFlushToZeroFloat64?: boolean;

    /**
     *
     */
    readonly shaderRoundingModeRTEFloat16?: boolean;

    /**
     *
     */
    readonly shaderRoundingModeRTEFloat32?: boolean;

    /**
     *
     */
    readonly shaderRoundingModeRTEFloat64?: boolean;

    /**
     *
     */
    readonly shaderRoundingModeRTZFloat16?: boolean;

    /**
     *
     */
    readonly shaderRoundingModeRTZFloat32?: boolean;

    /**
     *
     */
    readonly shaderRoundingModeRTZFloat64?: boolean;
  }

  interface VkPhysicalDeviceFloatControlsPropertiesKHRConstructor {
    readonly prototype: VkPhysicalDeviceFloatControlsPropertiesKHR;
    new(param?: VkPhysicalDeviceFloatControlsPropertiesKHRInitializer | null): VkPhysicalDeviceFloatControlsPropertiesKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceFloatControlsPropertiesKHR: VkPhysicalDeviceFloatControlsPropertiesKHRConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceFloat16Int8FeaturesKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    shaderFloat16: boolean;

    /**
     *
     */
    shaderInt8: boolean;

  }

  interface VkPhysicalDeviceFloat16Int8FeaturesKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    shaderFloat16?: boolean;

    /**
     *
     */
    shaderInt8?: boolean;
  }

  interface VkPhysicalDeviceFloat16Int8FeaturesKHRConstructor {
    readonly prototype: VkPhysicalDeviceFloat16Int8FeaturesKHR;
    new(param?: VkPhysicalDeviceFloat16Int8FeaturesKHRInitializer | null): VkPhysicalDeviceFloat16Int8FeaturesKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceFloat16Int8FeaturesKHR: VkPhysicalDeviceFloat16Int8FeaturesKHRConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceShaderFloat16Int8FeaturesKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    shaderFloat16: boolean;

    /**
     *
     */
    shaderInt8: boolean;

  }

  interface VkPhysicalDeviceShaderFloat16Int8FeaturesKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    shaderFloat16?: boolean;

    /**
     *
     */
    shaderInt8?: boolean;
  }

  interface VkPhysicalDeviceShaderFloat16Int8FeaturesKHRConstructor {
    readonly prototype: VkPhysicalDeviceShaderFloat16Int8FeaturesKHR;
    new(param?: VkPhysicalDeviceShaderFloat16Int8FeaturesKHRInitializer | null): VkPhysicalDeviceShaderFloat16Int8FeaturesKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceShaderFloat16Int8FeaturesKHR: VkPhysicalDeviceShaderFloat16Int8FeaturesKHRConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceShaderDrawParameterFeatures {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    shaderDrawParameters: boolean;

  }

  interface VkPhysicalDeviceShaderDrawParameterFeaturesInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    shaderDrawParameters?: boolean;
  }

  interface VkPhysicalDeviceShaderDrawParameterFeaturesConstructor {
    readonly prototype: VkPhysicalDeviceShaderDrawParameterFeatures;
    new(param?: VkPhysicalDeviceShaderDrawParameterFeaturesInitializer | null): VkPhysicalDeviceShaderDrawParameterFeatures;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceShaderDrawParameterFeatures: VkPhysicalDeviceShaderDrawParameterFeaturesConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceShaderDrawParametersFeatures {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    shaderDrawParameters: boolean;

  }

  interface VkPhysicalDeviceShaderDrawParametersFeaturesInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    shaderDrawParameters?: boolean;
  }

  interface VkPhysicalDeviceShaderDrawParametersFeaturesConstructor {
    readonly prototype: VkPhysicalDeviceShaderDrawParametersFeatures;
    new(param?: VkPhysicalDeviceShaderDrawParametersFeaturesInitializer | null): VkPhysicalDeviceShaderDrawParametersFeatures;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceShaderDrawParametersFeatures: VkPhysicalDeviceShaderDrawParametersFeaturesConstructor;

  
  
  /**
   * 
   */
  interface VkDescriptorSetLayoutSupportKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly supported: boolean;

  }

  interface VkDescriptorSetLayoutSupportKHRInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly supported?: boolean;
  }

  interface VkDescriptorSetLayoutSupportKHRConstructor {
    readonly prototype: VkDescriptorSetLayoutSupportKHR;
    new(param?: VkDescriptorSetLayoutSupportKHRInitializer | null): VkDescriptorSetLayoutSupportKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDescriptorSetLayoutSupportKHR: VkDescriptorSetLayoutSupportKHRConstructor;

  
  
  /**
   * 
   */
  interface VkDescriptorSetLayoutSupport {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly supported: boolean;

  }

  interface VkDescriptorSetLayoutSupportInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly supported?: boolean;
  }

  interface VkDescriptorSetLayoutSupportConstructor {
    readonly prototype: VkDescriptorSetLayoutSupport;
    new(param?: VkDescriptorSetLayoutSupportInitializer | null): VkDescriptorSetLayoutSupport;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDescriptorSetLayoutSupport: VkDescriptorSetLayoutSupportConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceMaintenance3PropertiesKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly maxPerSetDescriptors: number;

    /**
     *
     */
    readonly maxMemoryAllocationSize: bigint | number;

  }

  interface VkPhysicalDeviceMaintenance3PropertiesKHRInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly maxPerSetDescriptors?: number;

    /**
     *
     */
    readonly maxMemoryAllocationSize?: bigint | number;
  }

  interface VkPhysicalDeviceMaintenance3PropertiesKHRConstructor {
    readonly prototype: VkPhysicalDeviceMaintenance3PropertiesKHR;
    new(param?: VkPhysicalDeviceMaintenance3PropertiesKHRInitializer | null): VkPhysicalDeviceMaintenance3PropertiesKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceMaintenance3PropertiesKHR: VkPhysicalDeviceMaintenance3PropertiesKHRConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceMaintenance3Properties {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly maxPerSetDescriptors: number;

    /**
     *
     */
    readonly maxMemoryAllocationSize: bigint | number;

  }

  interface VkPhysicalDeviceMaintenance3PropertiesInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly maxPerSetDescriptors?: number;

    /**
     *
     */
    readonly maxMemoryAllocationSize?: bigint | number;
  }

  interface VkPhysicalDeviceMaintenance3PropertiesConstructor {
    readonly prototype: VkPhysicalDeviceMaintenance3Properties;
    new(param?: VkPhysicalDeviceMaintenance3PropertiesInitializer | null): VkPhysicalDeviceMaintenance3Properties;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceMaintenance3Properties: VkPhysicalDeviceMaintenance3PropertiesConstructor;

  
  
  /**
   * 
   */
  interface VkShaderModuleValidationCacheCreateInfoEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    validationCache: VkValidationCacheEXT | null;

  }

  interface VkShaderModuleValidationCacheCreateInfoEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    validationCache?: VkValidationCacheEXT | null;
  }

  interface VkShaderModuleValidationCacheCreateInfoEXTConstructor {
    readonly prototype: VkShaderModuleValidationCacheCreateInfoEXT;
    new(param?: VkShaderModuleValidationCacheCreateInfoEXTInitializer | null): VkShaderModuleValidationCacheCreateInfoEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkShaderModuleValidationCacheCreateInfoEXT: VkShaderModuleValidationCacheCreateInfoEXTConstructor;

  
  
  /**
   * 
   */
  interface VkValidationCacheCreateInfoEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

    /**
     *
     */
    initialDataSize: bigint | number;

    /**
     *
     */
    pInitialData: ArrayBuffer | null;

  }

  interface VkValidationCacheCreateInfoEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;

    /**
     *
     */
    initialDataSize?: bigint | number;

    /**
     *
     */
    pInitialData?: ArrayBuffer | null;
  }

  interface VkValidationCacheCreateInfoEXTConstructor {
    readonly prototype: VkValidationCacheCreateInfoEXT;
    new(param?: VkValidationCacheCreateInfoEXTInitializer | null): VkValidationCacheCreateInfoEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkValidationCacheCreateInfoEXT: VkValidationCacheCreateInfoEXTConstructor;

  
  
  /**
   * 
   */
  interface VkImageFormatListCreateInfoKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    viewFormatCount: number;

    /**
     *
     */
    pViewFormats: Int32Array | null;

  }

  interface VkImageFormatListCreateInfoKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    viewFormatCount?: number;

    /**
     *
     */
    pViewFormats?: Int32Array | null;
  }

  interface VkImageFormatListCreateInfoKHRConstructor {
    readonly prototype: VkImageFormatListCreateInfoKHR;
    new(param?: VkImageFormatListCreateInfoKHRInitializer | null): VkImageFormatListCreateInfoKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkImageFormatListCreateInfoKHR: VkImageFormatListCreateInfoKHRConstructor;

  
  
  /**
   * 
   */
  interface VkPipelineCoverageModulationStateCreateInfoNV {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

    /**
     *
     */
    coverageModulationMode: VkCoverageModulationModeNV;

    /**
     *
     */
    coverageModulationTableEnable: boolean;

    /**
     *
     */
    coverageModulationTableCount: number;

    /**
     *
     */
    pCoverageModulationTable: Float32Array | null;

  }

  interface VkPipelineCoverageModulationStateCreateInfoNVInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;

    /**
     *
     */
    coverageModulationMode?: VkCoverageModulationModeNV;

    /**
     *
     */
    coverageModulationTableEnable?: boolean;

    /**
     *
     */
    coverageModulationTableCount?: number;

    /**
     *
     */
    pCoverageModulationTable?: Float32Array | null;
  }

  interface VkPipelineCoverageModulationStateCreateInfoNVConstructor {
    readonly prototype: VkPipelineCoverageModulationStateCreateInfoNV;
    new(param?: VkPipelineCoverageModulationStateCreateInfoNVInitializer | null): VkPipelineCoverageModulationStateCreateInfoNV;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPipelineCoverageModulationStateCreateInfoNV: VkPipelineCoverageModulationStateCreateInfoNVConstructor;

  
  
  /**
   * 
   */
  interface VkDescriptorPoolInlineUniformBlockCreateInfoEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    maxInlineUniformBlockBindings: number;

  }

  interface VkDescriptorPoolInlineUniformBlockCreateInfoEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    maxInlineUniformBlockBindings?: number;
  }

  interface VkDescriptorPoolInlineUniformBlockCreateInfoEXTConstructor {
    readonly prototype: VkDescriptorPoolInlineUniformBlockCreateInfoEXT;
    new(param?: VkDescriptorPoolInlineUniformBlockCreateInfoEXTInitializer | null): VkDescriptorPoolInlineUniformBlockCreateInfoEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDescriptorPoolInlineUniformBlockCreateInfoEXT: VkDescriptorPoolInlineUniformBlockCreateInfoEXTConstructor;

  
  
  /**
   * 
   */
  interface VkWriteDescriptorSetInlineUniformBlockEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    dataSize: number;

    /**
     *
     */
    pData: ArrayBuffer | null;

  }

  interface VkWriteDescriptorSetInlineUniformBlockEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    dataSize?: number;

    /**
     *
     */
    pData?: ArrayBuffer | null;
  }

  interface VkWriteDescriptorSetInlineUniformBlockEXTConstructor {
    readonly prototype: VkWriteDescriptorSetInlineUniformBlockEXT;
    new(param?: VkWriteDescriptorSetInlineUniformBlockEXTInitializer | null): VkWriteDescriptorSetInlineUniformBlockEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkWriteDescriptorSetInlineUniformBlockEXT: VkWriteDescriptorSetInlineUniformBlockEXTConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceInlineUniformBlockPropertiesEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly maxInlineUniformBlockSize: number;

    /**
     *
     */
    readonly maxPerStageDescriptorInlineUniformBlocks: number;

    /**
     *
     */
    readonly maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks: number;

    /**
     *
     */
    readonly maxDescriptorSetInlineUniformBlocks: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindInlineUniformBlocks: number;

  }

  interface VkPhysicalDeviceInlineUniformBlockPropertiesEXTInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly maxInlineUniformBlockSize?: number;

    /**
     *
     */
    readonly maxPerStageDescriptorInlineUniformBlocks?: number;

    /**
     *
     */
    readonly maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks?: number;

    /**
     *
     */
    readonly maxDescriptorSetInlineUniformBlocks?: number;

    /**
     *
     */
    readonly maxDescriptorSetUpdateAfterBindInlineUniformBlocks?: number;
  }

  interface VkPhysicalDeviceInlineUniformBlockPropertiesEXTConstructor {
    readonly prototype: VkPhysicalDeviceInlineUniformBlockPropertiesEXT;
    new(param?: VkPhysicalDeviceInlineUniformBlockPropertiesEXTInitializer | null): VkPhysicalDeviceInlineUniformBlockPropertiesEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceInlineUniformBlockPropertiesEXT: VkPhysicalDeviceInlineUniformBlockPropertiesEXTConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceInlineUniformBlockFeaturesEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    inlineUniformBlock: boolean;

    /**
     *
     */
    descriptorBindingInlineUniformBlockUpdateAfterBind: boolean;

  }

  interface VkPhysicalDeviceInlineUniformBlockFeaturesEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    inlineUniformBlock?: boolean;

    /**
     *
     */
    descriptorBindingInlineUniformBlockUpdateAfterBind?: boolean;
  }

  interface VkPhysicalDeviceInlineUniformBlockFeaturesEXTConstructor {
    readonly prototype: VkPhysicalDeviceInlineUniformBlockFeaturesEXT;
    new(param?: VkPhysicalDeviceInlineUniformBlockFeaturesEXTInitializer | null): VkPhysicalDeviceInlineUniformBlockFeaturesEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceInlineUniformBlockFeaturesEXT: VkPhysicalDeviceInlineUniformBlockFeaturesEXTConstructor;

  
  
  /**
   * 
   */
  interface VkPipelineColorBlendAdvancedStateCreateInfoEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    srcPremultiplied: boolean;

    /**
     *
     */
    dstPremultiplied: boolean;

    /**
     *
     */
    blendOverlap: VkBlendOverlapEXT;

  }

  interface VkPipelineColorBlendAdvancedStateCreateInfoEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    srcPremultiplied?: boolean;

    /**
     *
     */
    dstPremultiplied?: boolean;

    /**
     *
     */
    blendOverlap?: VkBlendOverlapEXT;
  }

  interface VkPipelineColorBlendAdvancedStateCreateInfoEXTConstructor {
    readonly prototype: VkPipelineColorBlendAdvancedStateCreateInfoEXT;
    new(param?: VkPipelineColorBlendAdvancedStateCreateInfoEXTInitializer | null): VkPipelineColorBlendAdvancedStateCreateInfoEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPipelineColorBlendAdvancedStateCreateInfoEXT: VkPipelineColorBlendAdvancedStateCreateInfoEXTConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly advancedBlendMaxColorAttachments: number;

    /**
     *
     */
    readonly advancedBlendIndependentBlend: boolean;

    /**
     *
     */
    readonly advancedBlendNonPremultipliedSrcColor: boolean;

    /**
     *
     */
    readonly advancedBlendNonPremultipliedDstColor: boolean;

    /**
     *
     */
    readonly advancedBlendCorrelatedOverlap: boolean;

    /**
     *
     */
    readonly advancedBlendAllOperations: boolean;

  }

  interface VkPhysicalDeviceBlendOperationAdvancedPropertiesEXTInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly advancedBlendMaxColorAttachments?: number;

    /**
     *
     */
    readonly advancedBlendIndependentBlend?: boolean;

    /**
     *
     */
    readonly advancedBlendNonPremultipliedSrcColor?: boolean;

    /**
     *
     */
    readonly advancedBlendNonPremultipliedDstColor?: boolean;

    /**
     *
     */
    readonly advancedBlendCorrelatedOverlap?: boolean;

    /**
     *
     */
    readonly advancedBlendAllOperations?: boolean;
  }

  interface VkPhysicalDeviceBlendOperationAdvancedPropertiesEXTConstructor {
    readonly prototype: VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT;
    new(param?: VkPhysicalDeviceBlendOperationAdvancedPropertiesEXTInitializer | null): VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT: VkPhysicalDeviceBlendOperationAdvancedPropertiesEXTConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    advancedBlendCoherentOperations: boolean;

  }

  interface VkPhysicalDeviceBlendOperationAdvancedFeaturesEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    advancedBlendCoherentOperations?: boolean;
  }

  interface VkPhysicalDeviceBlendOperationAdvancedFeaturesEXTConstructor {
    readonly prototype: VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT;
    new(param?: VkPhysicalDeviceBlendOperationAdvancedFeaturesEXTInitializer | null): VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT: VkPhysicalDeviceBlendOperationAdvancedFeaturesEXTConstructor;

  
  
  /**
   * 
   */
  interface VkSamplerReductionModeCreateInfoEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    reductionMode: VkSamplerReductionModeEXT;

  }

  interface VkSamplerReductionModeCreateInfoEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    reductionMode?: VkSamplerReductionModeEXT;
  }

  interface VkSamplerReductionModeCreateInfoEXTConstructor {
    readonly prototype: VkSamplerReductionModeCreateInfoEXT;
    new(param?: VkSamplerReductionModeCreateInfoEXTInitializer | null): VkSamplerReductionModeCreateInfoEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkSamplerReductionModeCreateInfoEXT: VkSamplerReductionModeCreateInfoEXTConstructor;

  
  
  /**
   * 
   */
  interface VkMultisamplePropertiesEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly maxSampleLocationGridSize: VkExtent2D | null;

  }

  interface VkMultisamplePropertiesEXTInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly maxSampleLocationGridSize?: VkExtent2D | null;
  }

  interface VkMultisamplePropertiesEXTConstructor {
    readonly prototype: VkMultisamplePropertiesEXT;
    new(param?: VkMultisamplePropertiesEXTInitializer | null): VkMultisamplePropertiesEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkMultisamplePropertiesEXT: VkMultisamplePropertiesEXTConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceSampleLocationsPropertiesEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly sampleLocationSampleCounts: VkSampleCountFlagBits;

    /**
     *
     */
    readonly maxSampleLocationGridSize: VkExtent2D | null;

    /**
     *
     */
    readonly sampleLocationCoordinateRange: number[] | null;

    /**
     *
     */
    readonly sampleLocationSubPixelBits: number;

    /**
     *
     */
    readonly variableSampleLocations: boolean;

  }

  interface VkPhysicalDeviceSampleLocationsPropertiesEXTInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly sampleLocationSampleCounts?: VkSampleCountFlagBits;

    /**
     *
     */
    readonly maxSampleLocationGridSize?: VkExtent2D | null;

    /**
     *
     */
    readonly sampleLocationCoordinateRange?: number[] | null;

    /**
     *
     */
    readonly sampleLocationSubPixelBits?: number;

    /**
     *
     */
    readonly variableSampleLocations?: boolean;
  }

  interface VkPhysicalDeviceSampleLocationsPropertiesEXTConstructor {
    readonly prototype: VkPhysicalDeviceSampleLocationsPropertiesEXT;
    new(param?: VkPhysicalDeviceSampleLocationsPropertiesEXTInitializer | null): VkPhysicalDeviceSampleLocationsPropertiesEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceSampleLocationsPropertiesEXT: VkPhysicalDeviceSampleLocationsPropertiesEXTConstructor;

  
  
  /**
   * 
   */
  interface VkPipelineSampleLocationsStateCreateInfoEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    sampleLocationsEnable: boolean;

    /**
     *
     */
    sampleLocationsInfo: VkSampleLocationsInfoEXT | null;

  }

  interface VkPipelineSampleLocationsStateCreateInfoEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    sampleLocationsEnable?: boolean;

    /**
     *
     */
    sampleLocationsInfo?: VkSampleLocationsInfoEXT | null;
  }

  interface VkPipelineSampleLocationsStateCreateInfoEXTConstructor {
    readonly prototype: VkPipelineSampleLocationsStateCreateInfoEXT;
    new(param?: VkPipelineSampleLocationsStateCreateInfoEXTInitializer | null): VkPipelineSampleLocationsStateCreateInfoEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPipelineSampleLocationsStateCreateInfoEXT: VkPipelineSampleLocationsStateCreateInfoEXTConstructor;

  
  
  /**
   * 
   */
  interface VkRenderPassSampleLocationsBeginInfoEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    attachmentInitialSampleLocationsCount: number;

    /**
     *
     */
    pAttachmentInitialSampleLocations: VkAttachmentSampleLocationsEXT[] | null;

    /**
     *
     */
    postSubpassSampleLocationsCount: number;

    /**
     *
     */
    pPostSubpassSampleLocations: VkSubpassSampleLocationsEXT[] | null;

  }

  interface VkRenderPassSampleLocationsBeginInfoEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    attachmentInitialSampleLocationsCount?: number;

    /**
     *
     */
    pAttachmentInitialSampleLocations?: VkAttachmentSampleLocationsEXT[] | null;

    /**
     *
     */
    postSubpassSampleLocationsCount?: number;

    /**
     *
     */
    pPostSubpassSampleLocations?: VkSubpassSampleLocationsEXT[] | null;
  }

  interface VkRenderPassSampleLocationsBeginInfoEXTConstructor {
    readonly prototype: VkRenderPassSampleLocationsBeginInfoEXT;
    new(param?: VkRenderPassSampleLocationsBeginInfoEXTInitializer | null): VkRenderPassSampleLocationsBeginInfoEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkRenderPassSampleLocationsBeginInfoEXT: VkRenderPassSampleLocationsBeginInfoEXTConstructor;

  
  
  /**
   * 
   */
  interface VkSubpassSampleLocationsEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    subpassIndex: number;

    /**
     *
     */
    sampleLocationsInfo: VkSampleLocationsInfoEXT | null;

  }

  interface VkSubpassSampleLocationsEXTInitializer {
    
    /**
     *
     */
    subpassIndex?: number;

    /**
     *
     */
    sampleLocationsInfo?: VkSampleLocationsInfoEXT | null;
  }

  interface VkSubpassSampleLocationsEXTConstructor {
    readonly prototype: VkSubpassSampleLocationsEXT;
    new(param?: VkSubpassSampleLocationsEXTInitializer | null): VkSubpassSampleLocationsEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkSubpassSampleLocationsEXT: VkSubpassSampleLocationsEXTConstructor;

  
  
  /**
   * 
   */
  interface VkAttachmentSampleLocationsEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    attachmentIndex: number;

    /**
     *
     */
    sampleLocationsInfo: VkSampleLocationsInfoEXT | null;

  }

  interface VkAttachmentSampleLocationsEXTInitializer {
    
    /**
     *
     */
    attachmentIndex?: number;

    /**
     *
     */
    sampleLocationsInfo?: VkSampleLocationsInfoEXT | null;
  }

  interface VkAttachmentSampleLocationsEXTConstructor {
    readonly prototype: VkAttachmentSampleLocationsEXT;
    new(param?: VkAttachmentSampleLocationsEXTInitializer | null): VkAttachmentSampleLocationsEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkAttachmentSampleLocationsEXT: VkAttachmentSampleLocationsEXTConstructor;

  
  
  /**
   * 
   */
  interface VkSampleLocationsInfoEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    sampleLocationsPerPixel: VkSampleCountFlagBits;

    /**
     *
     */
    sampleLocationGridSize: VkExtent2D | null;

    /**
     *
     */
    sampleLocationsCount: number;

    /**
     *
     */
    pSampleLocations: VkSampleLocationEXT[] | null;

  }

  interface VkSampleLocationsInfoEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    sampleLocationsPerPixel?: VkSampleCountFlagBits;

    /**
     *
     */
    sampleLocationGridSize?: VkExtent2D | null;

    /**
     *
     */
    sampleLocationsCount?: number;

    /**
     *
     */
    pSampleLocations?: VkSampleLocationEXT[] | null;
  }

  interface VkSampleLocationsInfoEXTConstructor {
    readonly prototype: VkSampleLocationsInfoEXT;
    new(param?: VkSampleLocationsInfoEXTInitializer | null): VkSampleLocationsInfoEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkSampleLocationsInfoEXT: VkSampleLocationsInfoEXTConstructor;

  
  
  /**
   * 
   */
  interface VkSampleLocationEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    x: number;

    /**
     *
     */
    y: number;

  }

  interface VkSampleLocationEXTInitializer {
    
    /**
     *
     */
    x?: number;

    /**
     *
     */
    y?: number;
  }

  interface VkSampleLocationEXTConstructor {
    readonly prototype: VkSampleLocationEXT;
    new(param?: VkSampleLocationEXTInitializer | null): VkSampleLocationEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkSampleLocationEXT: VkSampleLocationEXTConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly filterMinmaxSingleComponentFormats: boolean;

    /**
     *
     */
    readonly filterMinmaxImageComponentMapping: boolean;

  }

  interface VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXTInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly filterMinmaxSingleComponentFormats?: boolean;

    /**
     *
     */
    readonly filterMinmaxImageComponentMapping?: boolean;
  }

  interface VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXTConstructor {
    readonly prototype: VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT;
    new(param?: VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXTInitializer | null): VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT: VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXTConstructor;

  
  
  /**
   * 
   */
  interface VkPipelineCoverageToColorStateCreateInfoNV {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

    /**
     *
     */
    coverageToColorEnable: boolean;

    /**
     *
     */
    coverageToColorLocation: number;

  }

  interface VkPipelineCoverageToColorStateCreateInfoNVInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;

    /**
     *
     */
    coverageToColorEnable?: boolean;

    /**
     *
     */
    coverageToColorLocation?: number;
  }

  interface VkPipelineCoverageToColorStateCreateInfoNVConstructor {
    readonly prototype: VkPipelineCoverageToColorStateCreateInfoNV;
    new(param?: VkPipelineCoverageToColorStateCreateInfoNVInitializer | null): VkPipelineCoverageToColorStateCreateInfoNV;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPipelineCoverageToColorStateCreateInfoNV: VkPipelineCoverageToColorStateCreateInfoNVConstructor;

  
  
  /**
   * 
   */
  interface VkDeviceQueueInfo2 {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkDeviceQueueCreateFlagBits;

    /**
     *
     */
    queueFamilyIndex: number;

    /**
     *
     */
    queueIndex: number;

  }

  interface VkDeviceQueueInfo2Initializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkDeviceQueueCreateFlagBits;

    /**
     *
     */
    queueFamilyIndex?: number;

    /**
     *
     */
    queueIndex?: number;
  }

  interface VkDeviceQueueInfo2Constructor {
    readonly prototype: VkDeviceQueueInfo2;
    new(param?: VkDeviceQueueInfo2Initializer | null): VkDeviceQueueInfo2;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDeviceQueueInfo2: VkDeviceQueueInfo2Constructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceProtectedMemoryProperties {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly protectedNoFault: boolean;

  }

  interface VkPhysicalDeviceProtectedMemoryPropertiesInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly protectedNoFault?: boolean;
  }

  interface VkPhysicalDeviceProtectedMemoryPropertiesConstructor {
    readonly prototype: VkPhysicalDeviceProtectedMemoryProperties;
    new(param?: VkPhysicalDeviceProtectedMemoryPropertiesInitializer | null): VkPhysicalDeviceProtectedMemoryProperties;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceProtectedMemoryProperties: VkPhysicalDeviceProtectedMemoryPropertiesConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceProtectedMemoryFeatures {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    protectedMemory: boolean;

  }

  interface VkPhysicalDeviceProtectedMemoryFeaturesInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    protectedMemory?: boolean;
  }

  interface VkPhysicalDeviceProtectedMemoryFeaturesConstructor {
    readonly prototype: VkPhysicalDeviceProtectedMemoryFeatures;
    new(param?: VkPhysicalDeviceProtectedMemoryFeaturesInitializer | null): VkPhysicalDeviceProtectedMemoryFeatures;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceProtectedMemoryFeatures: VkPhysicalDeviceProtectedMemoryFeaturesConstructor;

  
  
  /**
   * 
   */
  interface VkProtectedSubmitInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    protectedSubmit: boolean;

  }

  interface VkProtectedSubmitInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    protectedSubmit?: boolean;
  }

  interface VkProtectedSubmitInfoConstructor {
    readonly prototype: VkProtectedSubmitInfo;
    new(param?: VkProtectedSubmitInfoInitializer | null): VkProtectedSubmitInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkProtectedSubmitInfo: VkProtectedSubmitInfoConstructor;

  
  
  /**
   * 
   */
  interface VkConditionalRenderingBeginInfoEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    buffer: VkBuffer | null;

    /**
     *
     */
    offset: bigint | number;

    /**
     *
     */
    flags: VkConditionalRenderingFlagBitsEXT;

  }

  interface VkConditionalRenderingBeginInfoEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    buffer?: VkBuffer | null;

    /**
     *
     */
    offset?: bigint | number;

    /**
     *
     */
    flags?: VkConditionalRenderingFlagBitsEXT;
  }

  interface VkConditionalRenderingBeginInfoEXTConstructor {
    readonly prototype: VkConditionalRenderingBeginInfoEXT;
    new(param?: VkConditionalRenderingBeginInfoEXTInitializer | null): VkConditionalRenderingBeginInfoEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkConditionalRenderingBeginInfoEXT: VkConditionalRenderingBeginInfoEXTConstructor;

  
  
  /**
   * 
   */
  interface VkTextureLODGatherFormatPropertiesAMD {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly supportsTextureGatherLODBiasAMD: boolean;

  }

  interface VkTextureLODGatherFormatPropertiesAMDInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly supportsTextureGatherLODBiasAMD?: boolean;
  }

  interface VkTextureLODGatherFormatPropertiesAMDConstructor {
    readonly prototype: VkTextureLODGatherFormatPropertiesAMD;
    new(param?: VkTextureLODGatherFormatPropertiesAMDInitializer | null): VkTextureLODGatherFormatPropertiesAMD;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkTextureLODGatherFormatPropertiesAMD: VkTextureLODGatherFormatPropertiesAMDConstructor;

  
  
  /**
   * 
   */
  interface VkSamplerYcbcrConversionImageFormatPropertiesKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly combinedImageSamplerDescriptorCount: number;

  }

  interface VkSamplerYcbcrConversionImageFormatPropertiesKHRInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly combinedImageSamplerDescriptorCount?: number;
  }

  interface VkSamplerYcbcrConversionImageFormatPropertiesKHRConstructor {
    readonly prototype: VkSamplerYcbcrConversionImageFormatPropertiesKHR;
    new(param?: VkSamplerYcbcrConversionImageFormatPropertiesKHRInitializer | null): VkSamplerYcbcrConversionImageFormatPropertiesKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkSamplerYcbcrConversionImageFormatPropertiesKHR: VkSamplerYcbcrConversionImageFormatPropertiesKHRConstructor;

  
  
  /**
   * 
   */
  interface VkSamplerYcbcrConversionImageFormatProperties {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly combinedImageSamplerDescriptorCount: number;

  }

  interface VkSamplerYcbcrConversionImageFormatPropertiesInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly combinedImageSamplerDescriptorCount?: number;
  }

  interface VkSamplerYcbcrConversionImageFormatPropertiesConstructor {
    readonly prototype: VkSamplerYcbcrConversionImageFormatProperties;
    new(param?: VkSamplerYcbcrConversionImageFormatPropertiesInitializer | null): VkSamplerYcbcrConversionImageFormatProperties;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkSamplerYcbcrConversionImageFormatProperties: VkSamplerYcbcrConversionImageFormatPropertiesConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    samplerYcbcrConversion: boolean;

  }

  interface VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    samplerYcbcrConversion?: boolean;
  }

  interface VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHRConstructor {
    readonly prototype: VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR;
    new(param?: VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHRInitializer | null): VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR: VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHRConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceSamplerYcbcrConversionFeatures {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    samplerYcbcrConversion: boolean;

  }

  interface VkPhysicalDeviceSamplerYcbcrConversionFeaturesInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    samplerYcbcrConversion?: boolean;
  }

  interface VkPhysicalDeviceSamplerYcbcrConversionFeaturesConstructor {
    readonly prototype: VkPhysicalDeviceSamplerYcbcrConversionFeatures;
    new(param?: VkPhysicalDeviceSamplerYcbcrConversionFeaturesInitializer | null): VkPhysicalDeviceSamplerYcbcrConversionFeatures;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceSamplerYcbcrConversionFeatures: VkPhysicalDeviceSamplerYcbcrConversionFeaturesConstructor;

  
  
  /**
   * 
   */
  interface VkImagePlaneMemoryRequirementsInfoKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    planeAspect: VkImageAspectFlagBits;

  }

  interface VkImagePlaneMemoryRequirementsInfoKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    planeAspect?: VkImageAspectFlagBits;
  }

  interface VkImagePlaneMemoryRequirementsInfoKHRConstructor {
    readonly prototype: VkImagePlaneMemoryRequirementsInfoKHR;
    new(param?: VkImagePlaneMemoryRequirementsInfoKHRInitializer | null): VkImagePlaneMemoryRequirementsInfoKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkImagePlaneMemoryRequirementsInfoKHR: VkImagePlaneMemoryRequirementsInfoKHRConstructor;

  
  
  /**
   * 
   */
  interface VkImagePlaneMemoryRequirementsInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    planeAspect: VkImageAspectFlagBits;

  }

  interface VkImagePlaneMemoryRequirementsInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    planeAspect?: VkImageAspectFlagBits;
  }

  interface VkImagePlaneMemoryRequirementsInfoConstructor {
    readonly prototype: VkImagePlaneMemoryRequirementsInfo;
    new(param?: VkImagePlaneMemoryRequirementsInfoInitializer | null): VkImagePlaneMemoryRequirementsInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkImagePlaneMemoryRequirementsInfo: VkImagePlaneMemoryRequirementsInfoConstructor;

  
  
  /**
   * 
   */
  interface VkBindImagePlaneMemoryInfoKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    planeAspect: VkImageAspectFlagBits;

  }

  interface VkBindImagePlaneMemoryInfoKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    planeAspect?: VkImageAspectFlagBits;
  }

  interface VkBindImagePlaneMemoryInfoKHRConstructor {
    readonly prototype: VkBindImagePlaneMemoryInfoKHR;
    new(param?: VkBindImagePlaneMemoryInfoKHRInitializer | null): VkBindImagePlaneMemoryInfoKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkBindImagePlaneMemoryInfoKHR: VkBindImagePlaneMemoryInfoKHRConstructor;

  
  
  /**
   * 
   */
  interface VkBindImagePlaneMemoryInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    planeAspect: VkImageAspectFlagBits;

  }

  interface VkBindImagePlaneMemoryInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    planeAspect?: VkImageAspectFlagBits;
  }

  interface VkBindImagePlaneMemoryInfoConstructor {
    readonly prototype: VkBindImagePlaneMemoryInfo;
    new(param?: VkBindImagePlaneMemoryInfoInitializer | null): VkBindImagePlaneMemoryInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkBindImagePlaneMemoryInfo: VkBindImagePlaneMemoryInfoConstructor;

  
  
  /**
   * 
   */
  interface VkSamplerYcbcrConversionCreateInfoKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    format: VkFormat;

    /**
     *
     */
    ycbcrModel: VkSamplerYcbcrModelConversion;

    /**
     *
     */
    ycbcrRange: VkSamplerYcbcrRange;

    /**
     *
     */
    components: VkComponentMapping | null;

    /**
     *
     */
    xChromaOffset: VkChromaLocation;

    /**
     *
     */
    yChromaOffset: VkChromaLocation;

    /**
     *
     */
    chromaFilter: VkFilter;

    /**
     *
     */
    forceExplicitReconstruction: boolean;

  }

  interface VkSamplerYcbcrConversionCreateInfoKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    format?: VkFormat;

    /**
     *
     */
    ycbcrModel?: VkSamplerYcbcrModelConversion;

    /**
     *
     */
    ycbcrRange?: VkSamplerYcbcrRange;

    /**
     *
     */
    components?: VkComponentMapping | null;

    /**
     *
     */
    xChromaOffset?: VkChromaLocation;

    /**
     *
     */
    yChromaOffset?: VkChromaLocation;

    /**
     *
     */
    chromaFilter?: VkFilter;

    /**
     *
     */
    forceExplicitReconstruction?: boolean;
  }

  interface VkSamplerYcbcrConversionCreateInfoKHRConstructor {
    readonly prototype: VkSamplerYcbcrConversionCreateInfoKHR;
    new(param?: VkSamplerYcbcrConversionCreateInfoKHRInitializer | null): VkSamplerYcbcrConversionCreateInfoKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkSamplerYcbcrConversionCreateInfoKHR: VkSamplerYcbcrConversionCreateInfoKHRConstructor;

  
  
  /**
   * 
   */
  interface VkSamplerYcbcrConversionCreateInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    format: VkFormat;

    /**
     *
     */
    ycbcrModel: VkSamplerYcbcrModelConversion;

    /**
     *
     */
    ycbcrRange: VkSamplerYcbcrRange;

    /**
     *
     */
    components: VkComponentMapping | null;

    /**
     *
     */
    xChromaOffset: VkChromaLocation;

    /**
     *
     */
    yChromaOffset: VkChromaLocation;

    /**
     *
     */
    chromaFilter: VkFilter;

    /**
     *
     */
    forceExplicitReconstruction: boolean;

  }

  interface VkSamplerYcbcrConversionCreateInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    format?: VkFormat;

    /**
     *
     */
    ycbcrModel?: VkSamplerYcbcrModelConversion;

    /**
     *
     */
    ycbcrRange?: VkSamplerYcbcrRange;

    /**
     *
     */
    components?: VkComponentMapping | null;

    /**
     *
     */
    xChromaOffset?: VkChromaLocation;

    /**
     *
     */
    yChromaOffset?: VkChromaLocation;

    /**
     *
     */
    chromaFilter?: VkFilter;

    /**
     *
     */
    forceExplicitReconstruction?: boolean;
  }

  interface VkSamplerYcbcrConversionCreateInfoConstructor {
    readonly prototype: VkSamplerYcbcrConversionCreateInfo;
    new(param?: VkSamplerYcbcrConversionCreateInfoInitializer | null): VkSamplerYcbcrConversionCreateInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkSamplerYcbcrConversionCreateInfo: VkSamplerYcbcrConversionCreateInfoConstructor;

  
  
  /**
   * 
   */
  interface VkSamplerYcbcrConversionInfoKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    conversion: VkSamplerYcbcrConversion | null;

  }

  interface VkSamplerYcbcrConversionInfoKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    conversion?: VkSamplerYcbcrConversion | null;
  }

  interface VkSamplerYcbcrConversionInfoKHRConstructor {
    readonly prototype: VkSamplerYcbcrConversionInfoKHR;
    new(param?: VkSamplerYcbcrConversionInfoKHRInitializer | null): VkSamplerYcbcrConversionInfoKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkSamplerYcbcrConversionInfoKHR: VkSamplerYcbcrConversionInfoKHRConstructor;

  
  
  /**
   * 
   */
  interface VkSamplerYcbcrConversionInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    conversion: VkSamplerYcbcrConversion | null;

  }

  interface VkSamplerYcbcrConversionInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    conversion?: VkSamplerYcbcrConversion | null;
  }

  interface VkSamplerYcbcrConversionInfoConstructor {
    readonly prototype: VkSamplerYcbcrConversionInfo;
    new(param?: VkSamplerYcbcrConversionInfoInitializer | null): VkSamplerYcbcrConversionInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkSamplerYcbcrConversionInfo: VkSamplerYcbcrConversionInfoConstructor;

  
  
  /**
   * 
   */
  interface VkPipelineTessellationDomainOriginStateCreateInfoKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    domainOrigin: VkTessellationDomainOrigin;

  }

  interface VkPipelineTessellationDomainOriginStateCreateInfoKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    domainOrigin?: VkTessellationDomainOrigin;
  }

  interface VkPipelineTessellationDomainOriginStateCreateInfoKHRConstructor {
    readonly prototype: VkPipelineTessellationDomainOriginStateCreateInfoKHR;
    new(param?: VkPipelineTessellationDomainOriginStateCreateInfoKHRInitializer | null): VkPipelineTessellationDomainOriginStateCreateInfoKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPipelineTessellationDomainOriginStateCreateInfoKHR: VkPipelineTessellationDomainOriginStateCreateInfoKHRConstructor;

  
  
  /**
   * 
   */
  interface VkPipelineTessellationDomainOriginStateCreateInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    domainOrigin: VkTessellationDomainOrigin;

  }

  interface VkPipelineTessellationDomainOriginStateCreateInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    domainOrigin?: VkTessellationDomainOrigin;
  }

  interface VkPipelineTessellationDomainOriginStateCreateInfoConstructor {
    readonly prototype: VkPipelineTessellationDomainOriginStateCreateInfo;
    new(param?: VkPipelineTessellationDomainOriginStateCreateInfoInitializer | null): VkPipelineTessellationDomainOriginStateCreateInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPipelineTessellationDomainOriginStateCreateInfo: VkPipelineTessellationDomainOriginStateCreateInfoConstructor;

  
  
  /**
   * 
   */
  interface VkImageViewUsageCreateInfoKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    usage: VkImageUsageFlagBits;

  }

  interface VkImageViewUsageCreateInfoKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    usage?: VkImageUsageFlagBits;
  }

  interface VkImageViewUsageCreateInfoKHRConstructor {
    readonly prototype: VkImageViewUsageCreateInfoKHR;
    new(param?: VkImageViewUsageCreateInfoKHRInitializer | null): VkImageViewUsageCreateInfoKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkImageViewUsageCreateInfoKHR: VkImageViewUsageCreateInfoKHRConstructor;

  
  
  /**
   * 
   */
  interface VkImageViewUsageCreateInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    usage: VkImageUsageFlagBits;

  }

  interface VkImageViewUsageCreateInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    usage?: VkImageUsageFlagBits;
  }

  interface VkImageViewUsageCreateInfoConstructor {
    readonly prototype: VkImageViewUsageCreateInfo;
    new(param?: VkImageViewUsageCreateInfoInitializer | null): VkImageViewUsageCreateInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkImageViewUsageCreateInfo: VkImageViewUsageCreateInfoConstructor;

  
  
  /**
   * 
   */
  interface VkMemoryDedicatedAllocateInfoKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    image: VkImage | null;

    /**
     *
     */
    buffer: VkBuffer | null;

  }

  interface VkMemoryDedicatedAllocateInfoKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    image?: VkImage | null;

    /**
     *
     */
    buffer?: VkBuffer | null;
  }

  interface VkMemoryDedicatedAllocateInfoKHRConstructor {
    readonly prototype: VkMemoryDedicatedAllocateInfoKHR;
    new(param?: VkMemoryDedicatedAllocateInfoKHRInitializer | null): VkMemoryDedicatedAllocateInfoKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkMemoryDedicatedAllocateInfoKHR: VkMemoryDedicatedAllocateInfoKHRConstructor;

  
  
  /**
   * 
   */
  interface VkMemoryDedicatedAllocateInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    image: VkImage | null;

    /**
     *
     */
    buffer: VkBuffer | null;

  }

  interface VkMemoryDedicatedAllocateInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    image?: VkImage | null;

    /**
     *
     */
    buffer?: VkBuffer | null;
  }

  interface VkMemoryDedicatedAllocateInfoConstructor {
    readonly prototype: VkMemoryDedicatedAllocateInfo;
    new(param?: VkMemoryDedicatedAllocateInfoInitializer | null): VkMemoryDedicatedAllocateInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkMemoryDedicatedAllocateInfo: VkMemoryDedicatedAllocateInfoConstructor;

  
  
  /**
   * 
   */
  interface VkMemoryDedicatedRequirementsKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly prefersDedicatedAllocation: boolean;

    /**
     *
     */
    readonly requiresDedicatedAllocation: boolean;

  }

  interface VkMemoryDedicatedRequirementsKHRInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly prefersDedicatedAllocation?: boolean;

    /**
     *
     */
    readonly requiresDedicatedAllocation?: boolean;
  }

  interface VkMemoryDedicatedRequirementsKHRConstructor {
    readonly prototype: VkMemoryDedicatedRequirementsKHR;
    new(param?: VkMemoryDedicatedRequirementsKHRInitializer | null): VkMemoryDedicatedRequirementsKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkMemoryDedicatedRequirementsKHR: VkMemoryDedicatedRequirementsKHRConstructor;

  
  
  /**
   * 
   */
  interface VkMemoryDedicatedRequirements {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly prefersDedicatedAllocation: boolean;

    /**
     *
     */
    readonly requiresDedicatedAllocation: boolean;

  }

  interface VkMemoryDedicatedRequirementsInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly prefersDedicatedAllocation?: boolean;

    /**
     *
     */
    readonly requiresDedicatedAllocation?: boolean;
  }

  interface VkMemoryDedicatedRequirementsConstructor {
    readonly prototype: VkMemoryDedicatedRequirements;
    new(param?: VkMemoryDedicatedRequirementsInitializer | null): VkMemoryDedicatedRequirements;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkMemoryDedicatedRequirements: VkMemoryDedicatedRequirementsConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDevicePointClippingPropertiesKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly pointClippingBehavior: VkPointClippingBehavior;

  }

  interface VkPhysicalDevicePointClippingPropertiesKHRInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly pointClippingBehavior?: VkPointClippingBehavior;
  }

  interface VkPhysicalDevicePointClippingPropertiesKHRConstructor {
    readonly prototype: VkPhysicalDevicePointClippingPropertiesKHR;
    new(param?: VkPhysicalDevicePointClippingPropertiesKHRInitializer | null): VkPhysicalDevicePointClippingPropertiesKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDevicePointClippingPropertiesKHR: VkPhysicalDevicePointClippingPropertiesKHRConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDevicePointClippingProperties {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly pointClippingBehavior: VkPointClippingBehavior;

  }

  interface VkPhysicalDevicePointClippingPropertiesInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly pointClippingBehavior?: VkPointClippingBehavior;
  }

  interface VkPhysicalDevicePointClippingPropertiesConstructor {
    readonly prototype: VkPhysicalDevicePointClippingProperties;
    new(param?: VkPhysicalDevicePointClippingPropertiesInitializer | null): VkPhysicalDevicePointClippingProperties;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDevicePointClippingProperties: VkPhysicalDevicePointClippingPropertiesConstructor;

  
  
  /**
   * 
   */
  interface VkSparseImageMemoryRequirements2KHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly memoryRequirements: VkSparseImageMemoryRequirements | null;

  }

  interface VkSparseImageMemoryRequirements2KHRInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly memoryRequirements?: VkSparseImageMemoryRequirements | null;
  }

  interface VkSparseImageMemoryRequirements2KHRConstructor {
    readonly prototype: VkSparseImageMemoryRequirements2KHR;
    new(param?: VkSparseImageMemoryRequirements2KHRInitializer | null): VkSparseImageMemoryRequirements2KHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkSparseImageMemoryRequirements2KHR: VkSparseImageMemoryRequirements2KHRConstructor;

  
  
  /**
   * 
   */
  interface VkSparseImageMemoryRequirements2 {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly memoryRequirements: VkSparseImageMemoryRequirements | null;

  }

  interface VkSparseImageMemoryRequirements2Initializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly memoryRequirements?: VkSparseImageMemoryRequirements | null;
  }

  interface VkSparseImageMemoryRequirements2Constructor {
    readonly prototype: VkSparseImageMemoryRequirements2;
    new(param?: VkSparseImageMemoryRequirements2Initializer | null): VkSparseImageMemoryRequirements2;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkSparseImageMemoryRequirements2: VkSparseImageMemoryRequirements2Constructor;

  
  
  /**
   * 
   */
  interface VkMemoryRequirements2KHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly memoryRequirements: VkMemoryRequirements | null;

  }

  interface VkMemoryRequirements2KHRInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly memoryRequirements?: VkMemoryRequirements | null;
  }

  interface VkMemoryRequirements2KHRConstructor {
    readonly prototype: VkMemoryRequirements2KHR;
    new(param?: VkMemoryRequirements2KHRInitializer | null): VkMemoryRequirements2KHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkMemoryRequirements2KHR: VkMemoryRequirements2KHRConstructor;

  
  
  /**
   * 
   */
  interface VkMemoryRequirements2 {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly memoryRequirements: VkMemoryRequirements | null;

  }

  interface VkMemoryRequirements2Initializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly memoryRequirements?: VkMemoryRequirements | null;
  }

  interface VkMemoryRequirements2Constructor {
    readonly prototype: VkMemoryRequirements2;
    new(param?: VkMemoryRequirements2Initializer | null): VkMemoryRequirements2;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkMemoryRequirements2: VkMemoryRequirements2Constructor;

  
  
  /**
   * 
   */
  interface VkImageSparseMemoryRequirementsInfo2KHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    image: VkImage | null;

  }

  interface VkImageSparseMemoryRequirementsInfo2KHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    image?: VkImage | null;
  }

  interface VkImageSparseMemoryRequirementsInfo2KHRConstructor {
    readonly prototype: VkImageSparseMemoryRequirementsInfo2KHR;
    new(param?: VkImageSparseMemoryRequirementsInfo2KHRInitializer | null): VkImageSparseMemoryRequirementsInfo2KHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkImageSparseMemoryRequirementsInfo2KHR: VkImageSparseMemoryRequirementsInfo2KHRConstructor;

  
  
  /**
   * 
   */
  interface VkImageSparseMemoryRequirementsInfo2 {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    image: VkImage | null;

  }

  interface VkImageSparseMemoryRequirementsInfo2Initializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    image?: VkImage | null;
  }

  interface VkImageSparseMemoryRequirementsInfo2Constructor {
    readonly prototype: VkImageSparseMemoryRequirementsInfo2;
    new(param?: VkImageSparseMemoryRequirementsInfo2Initializer | null): VkImageSparseMemoryRequirementsInfo2;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkImageSparseMemoryRequirementsInfo2: VkImageSparseMemoryRequirementsInfo2Constructor;

  
  
  /**
   * 
   */
  interface VkImageMemoryRequirementsInfo2KHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    image: VkImage | null;

  }

  interface VkImageMemoryRequirementsInfo2KHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    image?: VkImage | null;
  }

  interface VkImageMemoryRequirementsInfo2KHRConstructor {
    readonly prototype: VkImageMemoryRequirementsInfo2KHR;
    new(param?: VkImageMemoryRequirementsInfo2KHRInitializer | null): VkImageMemoryRequirementsInfo2KHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkImageMemoryRequirementsInfo2KHR: VkImageMemoryRequirementsInfo2KHRConstructor;

  
  
  /**
   * 
   */
  interface VkImageMemoryRequirementsInfo2 {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    image: VkImage | null;

  }

  interface VkImageMemoryRequirementsInfo2Initializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    image?: VkImage | null;
  }

  interface VkImageMemoryRequirementsInfo2Constructor {
    readonly prototype: VkImageMemoryRequirementsInfo2;
    new(param?: VkImageMemoryRequirementsInfo2Initializer | null): VkImageMemoryRequirementsInfo2;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkImageMemoryRequirementsInfo2: VkImageMemoryRequirementsInfo2Constructor;

  
  
  /**
   * 
   */
  interface VkBufferMemoryRequirementsInfo2KHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    buffer: VkBuffer | null;

  }

  interface VkBufferMemoryRequirementsInfo2KHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    buffer?: VkBuffer | null;
  }

  interface VkBufferMemoryRequirementsInfo2KHRConstructor {
    readonly prototype: VkBufferMemoryRequirementsInfo2KHR;
    new(param?: VkBufferMemoryRequirementsInfo2KHRInitializer | null): VkBufferMemoryRequirementsInfo2KHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkBufferMemoryRequirementsInfo2KHR: VkBufferMemoryRequirementsInfo2KHRConstructor;

  
  
  /**
   * 
   */
  interface VkBufferMemoryRequirementsInfo2 {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    buffer: VkBuffer | null;

  }

  interface VkBufferMemoryRequirementsInfo2Initializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    buffer?: VkBuffer | null;
  }

  interface VkBufferMemoryRequirementsInfo2Constructor {
    readonly prototype: VkBufferMemoryRequirementsInfo2;
    new(param?: VkBufferMemoryRequirementsInfo2Initializer | null): VkBufferMemoryRequirementsInfo2;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkBufferMemoryRequirementsInfo2: VkBufferMemoryRequirementsInfo2Constructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceSubgroupProperties {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly subgroupSize: number;

    /**
     *
     */
    readonly supportedStages: VkShaderStageFlagBits;

    /**
     *
     */
    readonly supportedOperations: VkSubgroupFeatureFlagBits;

    /**
     *
     */
    readonly quadOperationsInAllStages: boolean;

  }

  interface VkPhysicalDeviceSubgroupPropertiesInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly subgroupSize?: number;

    /**
     *
     */
    readonly supportedStages?: VkShaderStageFlagBits;

    /**
     *
     */
    readonly supportedOperations?: VkSubgroupFeatureFlagBits;

    /**
     *
     */
    readonly quadOperationsInAllStages?: boolean;
  }

  interface VkPhysicalDeviceSubgroupPropertiesConstructor {
    readonly prototype: VkPhysicalDeviceSubgroupProperties;
    new(param?: VkPhysicalDeviceSubgroupPropertiesInitializer | null): VkPhysicalDeviceSubgroupProperties;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceSubgroupProperties: VkPhysicalDeviceSubgroupPropertiesConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDevice16BitStorageFeaturesKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    storageBuffer16BitAccess: boolean;

    /**
     *
     */
    uniformAndStorageBuffer16BitAccess: boolean;

    /**
     *
     */
    storagePushConstant16: boolean;

    /**
     *
     */
    storageInputOutput16: boolean;

  }

  interface VkPhysicalDevice16BitStorageFeaturesKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    storageBuffer16BitAccess?: boolean;

    /**
     *
     */
    uniformAndStorageBuffer16BitAccess?: boolean;

    /**
     *
     */
    storagePushConstant16?: boolean;

    /**
     *
     */
    storageInputOutput16?: boolean;
  }

  interface VkPhysicalDevice16BitStorageFeaturesKHRConstructor {
    readonly prototype: VkPhysicalDevice16BitStorageFeaturesKHR;
    new(param?: VkPhysicalDevice16BitStorageFeaturesKHRInitializer | null): VkPhysicalDevice16BitStorageFeaturesKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDevice16BitStorageFeaturesKHR: VkPhysicalDevice16BitStorageFeaturesKHRConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDevice16BitStorageFeatures {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    storageBuffer16BitAccess: boolean;

    /**
     *
     */
    uniformAndStorageBuffer16BitAccess: boolean;

    /**
     *
     */
    storagePushConstant16: boolean;

    /**
     *
     */
    storageInputOutput16: boolean;

  }

  interface VkPhysicalDevice16BitStorageFeaturesInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    storageBuffer16BitAccess?: boolean;

    /**
     *
     */
    uniformAndStorageBuffer16BitAccess?: boolean;

    /**
     *
     */
    storagePushConstant16?: boolean;

    /**
     *
     */
    storageInputOutput16?: boolean;
  }

  interface VkPhysicalDevice16BitStorageFeaturesConstructor {
    readonly prototype: VkPhysicalDevice16BitStorageFeatures;
    new(param?: VkPhysicalDevice16BitStorageFeaturesInitializer | null): VkPhysicalDevice16BitStorageFeatures;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDevice16BitStorageFeatures: VkPhysicalDevice16BitStorageFeaturesConstructor;

  
  
  /**
   * 
   */
  interface VkSharedPresentSurfaceCapabilitiesKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly sharedPresentSupportedUsageFlags: VkImageUsageFlagBits;

  }

  interface VkSharedPresentSurfaceCapabilitiesKHRInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly sharedPresentSupportedUsageFlags?: VkImageUsageFlagBits;
  }

  interface VkSharedPresentSurfaceCapabilitiesKHRConstructor {
    readonly prototype: VkSharedPresentSurfaceCapabilitiesKHR;
    new(param?: VkSharedPresentSurfaceCapabilitiesKHRInitializer | null): VkSharedPresentSurfaceCapabilitiesKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkSharedPresentSurfaceCapabilitiesKHR: VkSharedPresentSurfaceCapabilitiesKHRConstructor;

  
  
  /**
   * 
   */
  interface VkDisplayPlaneCapabilities2KHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly capabilities: VkDisplayPlaneCapabilitiesKHR | null;

  }

  interface VkDisplayPlaneCapabilities2KHRInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly capabilities?: VkDisplayPlaneCapabilitiesKHR | null;
  }

  interface VkDisplayPlaneCapabilities2KHRConstructor {
    readonly prototype: VkDisplayPlaneCapabilities2KHR;
    new(param?: VkDisplayPlaneCapabilities2KHRInitializer | null): VkDisplayPlaneCapabilities2KHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDisplayPlaneCapabilities2KHR: VkDisplayPlaneCapabilities2KHRConstructor;

  
  
  /**
   * 
   */
  interface VkDisplayPlaneInfo2KHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    mode: VkDisplayModeKHR | null;

    /**
     *
     */
    planeIndex: number;

  }

  interface VkDisplayPlaneInfo2KHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    mode?: VkDisplayModeKHR | null;

    /**
     *
     */
    planeIndex?: number;
  }

  interface VkDisplayPlaneInfo2KHRConstructor {
    readonly prototype: VkDisplayPlaneInfo2KHR;
    new(param?: VkDisplayPlaneInfo2KHRInitializer | null): VkDisplayPlaneInfo2KHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDisplayPlaneInfo2KHR: VkDisplayPlaneInfo2KHRConstructor;

  
  
  /**
   * 
   */
  interface VkDisplayModeProperties2KHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly displayModeProperties: VkDisplayModePropertiesKHR | null;

  }

  interface VkDisplayModeProperties2KHRInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly displayModeProperties?: VkDisplayModePropertiesKHR | null;
  }

  interface VkDisplayModeProperties2KHRConstructor {
    readonly prototype: VkDisplayModeProperties2KHR;
    new(param?: VkDisplayModeProperties2KHRInitializer | null): VkDisplayModeProperties2KHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDisplayModeProperties2KHR: VkDisplayModeProperties2KHRConstructor;

  
  
  /**
   * 
   */
  interface VkDisplayPlaneProperties2KHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly displayPlaneProperties: VkDisplayPlanePropertiesKHR | null;

  }

  interface VkDisplayPlaneProperties2KHRInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly displayPlaneProperties?: VkDisplayPlanePropertiesKHR | null;
  }

  interface VkDisplayPlaneProperties2KHRConstructor {
    readonly prototype: VkDisplayPlaneProperties2KHR;
    new(param?: VkDisplayPlaneProperties2KHRInitializer | null): VkDisplayPlaneProperties2KHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDisplayPlaneProperties2KHR: VkDisplayPlaneProperties2KHRConstructor;

  
  
  /**
   * 
   */
  interface VkDisplayProperties2KHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly displayProperties: VkDisplayPropertiesKHR | null;

  }

  interface VkDisplayProperties2KHRInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly displayProperties?: VkDisplayPropertiesKHR | null;
  }

  interface VkDisplayProperties2KHRConstructor {
    readonly prototype: VkDisplayProperties2KHR;
    new(param?: VkDisplayProperties2KHRInitializer | null): VkDisplayProperties2KHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDisplayProperties2KHR: VkDisplayProperties2KHRConstructor;

  
  
  /**
   * 
   */
  interface VkSurfaceFormat2KHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly surfaceFormat: VkSurfaceFormatKHR | null;

  }

  interface VkSurfaceFormat2KHRInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly surfaceFormat?: VkSurfaceFormatKHR | null;
  }

  interface VkSurfaceFormat2KHRConstructor {
    readonly prototype: VkSurfaceFormat2KHR;
    new(param?: VkSurfaceFormat2KHRInitializer | null): VkSurfaceFormat2KHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkSurfaceFormat2KHR: VkSurfaceFormat2KHRConstructor;

  
  
  /**
   * 
   */
  interface VkSurfaceCapabilities2KHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly surfaceCapabilities: VkSurfaceCapabilitiesKHR | null;

  }

  interface VkSurfaceCapabilities2KHRInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly surfaceCapabilities?: VkSurfaceCapabilitiesKHR | null;
  }

  interface VkSurfaceCapabilities2KHRConstructor {
    readonly prototype: VkSurfaceCapabilities2KHR;
    new(param?: VkSurfaceCapabilities2KHRInitializer | null): VkSurfaceCapabilities2KHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkSurfaceCapabilities2KHR: VkSurfaceCapabilities2KHRConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceSurfaceInfo2KHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    surface: VkSurfaceKHR | null;

  }

  interface VkPhysicalDeviceSurfaceInfo2KHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    surface?: VkSurfaceKHR | null;
  }

  interface VkPhysicalDeviceSurfaceInfo2KHRConstructor {
    readonly prototype: VkPhysicalDeviceSurfaceInfo2KHR;
    new(param?: VkPhysicalDeviceSurfaceInfo2KHRInitializer | null): VkPhysicalDeviceSurfaceInfo2KHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceSurfaceInfo2KHR: VkPhysicalDeviceSurfaceInfo2KHRConstructor;

  
  
  /**
   * 
   */
  interface VkRenderPassInputAttachmentAspectCreateInfoKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    aspectReferenceCount: number;

    /**
     *
     */
    pAspectReferences: VkInputAttachmentAspectReference[] | null;

  }

  interface VkRenderPassInputAttachmentAspectCreateInfoKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    aspectReferenceCount?: number;

    /**
     *
     */
    pAspectReferences?: VkInputAttachmentAspectReference[] | null;
  }

  interface VkRenderPassInputAttachmentAspectCreateInfoKHRConstructor {
    readonly prototype: VkRenderPassInputAttachmentAspectCreateInfoKHR;
    new(param?: VkRenderPassInputAttachmentAspectCreateInfoKHRInitializer | null): VkRenderPassInputAttachmentAspectCreateInfoKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkRenderPassInputAttachmentAspectCreateInfoKHR: VkRenderPassInputAttachmentAspectCreateInfoKHRConstructor;

  
  
  /**
   * 
   */
  interface VkRenderPassInputAttachmentAspectCreateInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    aspectReferenceCount: number;

    /**
     *
     */
    pAspectReferences: VkInputAttachmentAspectReference[] | null;

  }

  interface VkRenderPassInputAttachmentAspectCreateInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    aspectReferenceCount?: number;

    /**
     *
     */
    pAspectReferences?: VkInputAttachmentAspectReference[] | null;
  }

  interface VkRenderPassInputAttachmentAspectCreateInfoConstructor {
    readonly prototype: VkRenderPassInputAttachmentAspectCreateInfo;
    new(param?: VkRenderPassInputAttachmentAspectCreateInfoInitializer | null): VkRenderPassInputAttachmentAspectCreateInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkRenderPassInputAttachmentAspectCreateInfo: VkRenderPassInputAttachmentAspectCreateInfoConstructor;

  
  
  /**
   * 
   */
  interface VkInputAttachmentAspectReferenceKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    subpass: number;

    /**
     *
     */
    inputAttachmentIndex: number;

    /**
     *
     */
    aspectMask: VkImageAspectFlagBits;

  }

  interface VkInputAttachmentAspectReferenceKHRInitializer {
    
    /**
     *
     */
    subpass?: number;

    /**
     *
     */
    inputAttachmentIndex?: number;

    /**
     *
     */
    aspectMask?: VkImageAspectFlagBits;
  }

  interface VkInputAttachmentAspectReferenceKHRConstructor {
    readonly prototype: VkInputAttachmentAspectReferenceKHR;
    new(param?: VkInputAttachmentAspectReferenceKHRInitializer | null): VkInputAttachmentAspectReferenceKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkInputAttachmentAspectReferenceKHR: VkInputAttachmentAspectReferenceKHRConstructor;

  
  
  /**
   * 
   */
  interface VkInputAttachmentAspectReference {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    subpass: number;

    /**
     *
     */
    inputAttachmentIndex: number;

    /**
     *
     */
    aspectMask: VkImageAspectFlagBits;

  }

  interface VkInputAttachmentAspectReferenceInitializer {
    
    /**
     *
     */
    subpass?: number;

    /**
     *
     */
    inputAttachmentIndex?: number;

    /**
     *
     */
    aspectMask?: VkImageAspectFlagBits;
  }

  interface VkInputAttachmentAspectReferenceConstructor {
    readonly prototype: VkInputAttachmentAspectReference;
    new(param?: VkInputAttachmentAspectReferenceInitializer | null): VkInputAttachmentAspectReference;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkInputAttachmentAspectReference: VkInputAttachmentAspectReferenceConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly perViewPositionAllComponents: boolean;

  }

  interface VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVXInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly perViewPositionAllComponents?: boolean;
  }

  interface VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVXConstructor {
    readonly prototype: VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX;
    new(param?: VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVXInitializer | null): VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX: VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVXConstructor;

  
  
  /**
   * 
   */
  interface VkPipelineDiscardRectangleStateCreateInfoEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

    /**
     *
     */
    discardRectangleMode: VkDiscardRectangleModeEXT;

    /**
     *
     */
    discardRectangleCount: number;

    /**
     *
     */
    pDiscardRectangles: VkRect2D[] | null;

  }

  interface VkPipelineDiscardRectangleStateCreateInfoEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;

    /**
     *
     */
    discardRectangleMode?: VkDiscardRectangleModeEXT;

    /**
     *
     */
    discardRectangleCount?: number;

    /**
     *
     */
    pDiscardRectangles?: VkRect2D[] | null;
  }

  interface VkPipelineDiscardRectangleStateCreateInfoEXTConstructor {
    readonly prototype: VkPipelineDiscardRectangleStateCreateInfoEXT;
    new(param?: VkPipelineDiscardRectangleStateCreateInfoEXTInitializer | null): VkPipelineDiscardRectangleStateCreateInfoEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPipelineDiscardRectangleStateCreateInfoEXT: VkPipelineDiscardRectangleStateCreateInfoEXTConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceDiscardRectanglePropertiesEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly maxDiscardRectangles: number;

  }

  interface VkPhysicalDeviceDiscardRectanglePropertiesEXTInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly maxDiscardRectangles?: number;
  }

  interface VkPhysicalDeviceDiscardRectanglePropertiesEXTConstructor {
    readonly prototype: VkPhysicalDeviceDiscardRectanglePropertiesEXT;
    new(param?: VkPhysicalDeviceDiscardRectanglePropertiesEXTInitializer | null): VkPhysicalDeviceDiscardRectanglePropertiesEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceDiscardRectanglePropertiesEXT: VkPhysicalDeviceDiscardRectanglePropertiesEXTConstructor;

  
  
  /**
   * 
   */
  interface VkPipelineViewportSwizzleStateCreateInfoNV {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

    /**
     *
     */
    viewportCount: number;

    /**
     *
     */
    pViewportSwizzles: VkViewportSwizzleNV[] | null;

  }

  interface VkPipelineViewportSwizzleStateCreateInfoNVInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;

    /**
     *
     */
    viewportCount?: number;

    /**
     *
     */
    pViewportSwizzles?: VkViewportSwizzleNV[] | null;
  }

  interface VkPipelineViewportSwizzleStateCreateInfoNVConstructor {
    readonly prototype: VkPipelineViewportSwizzleStateCreateInfoNV;
    new(param?: VkPipelineViewportSwizzleStateCreateInfoNVInitializer | null): VkPipelineViewportSwizzleStateCreateInfoNV;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPipelineViewportSwizzleStateCreateInfoNV: VkPipelineViewportSwizzleStateCreateInfoNVConstructor;

  
  
  /**
   * 
   */
  interface VkViewportSwizzleNV {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    x: VkViewportCoordinateSwizzleNV;

    /**
     *
     */
    y: VkViewportCoordinateSwizzleNV;

    /**
     *
     */
    z: VkViewportCoordinateSwizzleNV;

    /**
     *
     */
    w: VkViewportCoordinateSwizzleNV;

  }

  interface VkViewportSwizzleNVInitializer {
    
    /**
     *
     */
    x?: VkViewportCoordinateSwizzleNV;

    /**
     *
     */
    y?: VkViewportCoordinateSwizzleNV;

    /**
     *
     */
    z?: VkViewportCoordinateSwizzleNV;

    /**
     *
     */
    w?: VkViewportCoordinateSwizzleNV;
  }

  interface VkViewportSwizzleNVConstructor {
    readonly prototype: VkViewportSwizzleNV;
    new(param?: VkViewportSwizzleNVInitializer | null): VkViewportSwizzleNV;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkViewportSwizzleNV: VkViewportSwizzleNVConstructor;

  
  
  /**
   * 
   */
  interface VkPipelineViewportWScalingStateCreateInfoNV {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    viewportWScalingEnable: boolean;

    /**
     *
     */
    viewportCount: number;

    /**
     *
     */
    pViewportWScalings: VkViewportWScalingNV[] | null;

  }

  interface VkPipelineViewportWScalingStateCreateInfoNVInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    viewportWScalingEnable?: boolean;

    /**
     *
     */
    viewportCount?: number;

    /**
     *
     */
    pViewportWScalings?: VkViewportWScalingNV[] | null;
  }

  interface VkPipelineViewportWScalingStateCreateInfoNVConstructor {
    readonly prototype: VkPipelineViewportWScalingStateCreateInfoNV;
    new(param?: VkPipelineViewportWScalingStateCreateInfoNVInitializer | null): VkPipelineViewportWScalingStateCreateInfoNV;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPipelineViewportWScalingStateCreateInfoNV: VkPipelineViewportWScalingStateCreateInfoNVConstructor;

  
  
  /**
   * 
   */
  interface VkViewportWScalingNV {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    xcoeff: number;

    /**
     *
     */
    ycoeff: number;

  }

  interface VkViewportWScalingNVInitializer {
    
    /**
     *
     */
    xcoeff?: number;

    /**
     *
     */
    ycoeff?: number;
  }

  interface VkViewportWScalingNVConstructor {
    readonly prototype: VkViewportWScalingNV;
    new(param?: VkViewportWScalingNVInitializer | null): VkViewportWScalingNV;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkViewportWScalingNV: VkViewportWScalingNVConstructor;

  
  
  /**
   * 
   */
  interface VkPresentTimeGOOGLE {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    presentID: number;

    /**
     *
     */
    desiredPresentTime: bigint | number;

  }

  interface VkPresentTimeGOOGLEInitializer {
    
    /**
     *
     */
    presentID?: number;

    /**
     *
     */
    desiredPresentTime?: bigint | number;
  }

  interface VkPresentTimeGOOGLEConstructor {
    readonly prototype: VkPresentTimeGOOGLE;
    new(param?: VkPresentTimeGOOGLEInitializer | null): VkPresentTimeGOOGLE;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPresentTimeGOOGLE: VkPresentTimeGOOGLEConstructor;

  
  
  /**
   * 
   */
  interface VkPresentTimesInfoGOOGLE {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    swapchainCount: number;

    /**
     *
     */
    pTimes: VkPresentTimeGOOGLE[] | null;

  }

  interface VkPresentTimesInfoGOOGLEInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    swapchainCount?: number;

    /**
     *
     */
    pTimes?: VkPresentTimeGOOGLE[] | null;
  }

  interface VkPresentTimesInfoGOOGLEConstructor {
    readonly prototype: VkPresentTimesInfoGOOGLE;
    new(param?: VkPresentTimesInfoGOOGLEInitializer | null): VkPresentTimesInfoGOOGLE;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPresentTimesInfoGOOGLE: VkPresentTimesInfoGOOGLEConstructor;

  
  
  /**
   * 
   */
  interface VkPastPresentationTimingGOOGLE {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly presentID: number;

    /**
     *
     */
    readonly desiredPresentTime: bigint | number;

    /**
     *
     */
    readonly actualPresentTime: bigint | number;

    /**
     *
     */
    readonly earliestPresentTime: bigint | number;

    /**
     *
     */
    readonly presentMargin: bigint | number;

  }

  interface VkPastPresentationTimingGOOGLEInitializer {
    
    /**
     *
     */
    readonly presentID?: number;

    /**
     *
     */
    readonly desiredPresentTime?: bigint | number;

    /**
     *
     */
    readonly actualPresentTime?: bigint | number;

    /**
     *
     */
    readonly earliestPresentTime?: bigint | number;

    /**
     *
     */
    readonly presentMargin?: bigint | number;
  }

  interface VkPastPresentationTimingGOOGLEConstructor {
    readonly prototype: VkPastPresentationTimingGOOGLE;
    new(param?: VkPastPresentationTimingGOOGLEInitializer | null): VkPastPresentationTimingGOOGLE;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPastPresentationTimingGOOGLE: VkPastPresentationTimingGOOGLEConstructor;

  
  
  /**
   * 
   */
  interface VkRefreshCycleDurationGOOGLE {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly refreshDuration: bigint | number;

  }

  interface VkRefreshCycleDurationGOOGLEInitializer {
    
    /**
     *
     */
    readonly refreshDuration?: bigint | number;
  }

  interface VkRefreshCycleDurationGOOGLEConstructor {
    readonly prototype: VkRefreshCycleDurationGOOGLE;
    new(param?: VkRefreshCycleDurationGOOGLEInitializer | null): VkRefreshCycleDurationGOOGLE;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkRefreshCycleDurationGOOGLE: VkRefreshCycleDurationGOOGLEConstructor;

  
  
  /**
   * 
   */
  interface VkSwapchainDisplayNativeHdrCreateInfoAMD {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    localDimmingEnable: boolean;

  }

  interface VkSwapchainDisplayNativeHdrCreateInfoAMDInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    localDimmingEnable?: boolean;
  }

  interface VkSwapchainDisplayNativeHdrCreateInfoAMDConstructor {
    readonly prototype: VkSwapchainDisplayNativeHdrCreateInfoAMD;
    new(param?: VkSwapchainDisplayNativeHdrCreateInfoAMDInitializer | null): VkSwapchainDisplayNativeHdrCreateInfoAMD;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkSwapchainDisplayNativeHdrCreateInfoAMD: VkSwapchainDisplayNativeHdrCreateInfoAMDConstructor;

  
  
  /**
   * 
   */
  interface VkDisplayNativeHdrSurfaceCapabilitiesAMD {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly localDimmingSupport: boolean;

  }

  interface VkDisplayNativeHdrSurfaceCapabilitiesAMDInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly localDimmingSupport?: boolean;
  }

  interface VkDisplayNativeHdrSurfaceCapabilitiesAMDConstructor {
    readonly prototype: VkDisplayNativeHdrSurfaceCapabilitiesAMD;
    new(param?: VkDisplayNativeHdrSurfaceCapabilitiesAMDInitializer | null): VkDisplayNativeHdrSurfaceCapabilitiesAMD;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDisplayNativeHdrSurfaceCapabilitiesAMD: VkDisplayNativeHdrSurfaceCapabilitiesAMDConstructor;

  
  
  /**
   * 
   */
  interface VkHdrMetadataEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    displayPrimaryRed: VkXYColorEXT | null;

    /**
     *
     */
    displayPrimaryGreen: VkXYColorEXT | null;

    /**
     *
     */
    displayPrimaryBlue: VkXYColorEXT | null;

    /**
     *
     */
    whitePoint: VkXYColorEXT | null;

    /**
     *
     */
    maxLuminance: number;

    /**
     *
     */
    minLuminance: number;

    /**
     *
     */
    maxContentLightLevel: number;

    /**
     *
     */
    maxFrameAverageLightLevel: number;

  }

  interface VkHdrMetadataEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    displayPrimaryRed?: VkXYColorEXT | null;

    /**
     *
     */
    displayPrimaryGreen?: VkXYColorEXT | null;

    /**
     *
     */
    displayPrimaryBlue?: VkXYColorEXT | null;

    /**
     *
     */
    whitePoint?: VkXYColorEXT | null;

    /**
     *
     */
    maxLuminance?: number;

    /**
     *
     */
    minLuminance?: number;

    /**
     *
     */
    maxContentLightLevel?: number;

    /**
     *
     */
    maxFrameAverageLightLevel?: number;
  }

  interface VkHdrMetadataEXTConstructor {
    readonly prototype: VkHdrMetadataEXT;
    new(param?: VkHdrMetadataEXTInitializer | null): VkHdrMetadataEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkHdrMetadataEXT: VkHdrMetadataEXTConstructor;

  
  
  /**
   * 
   */
  interface VkXYColorEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    x: number;

    /**
     *
     */
    y: number;

  }

  interface VkXYColorEXTInitializer {
    
    /**
     *
     */
    x?: number;

    /**
     *
     */
    y?: number;
  }

  interface VkXYColorEXTConstructor {
    readonly prototype: VkXYColorEXT;
    new(param?: VkXYColorEXTInitializer | null): VkXYColorEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkXYColorEXT: VkXYColorEXTConstructor;

  
  
  /**
   * 
   */
  interface VkDescriptorUpdateTemplateCreateInfoKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

    /**
     *
     */
    descriptorUpdateEntryCount: number;

    /**
     *
     */
    pDescriptorUpdateEntries: VkDescriptorUpdateTemplateEntry[] | null;

    /**
     *
     */
    templateType: VkDescriptorUpdateTemplateType;

    /**
     *
     */
    descriptorSetLayout: VkDescriptorSetLayout | null;

    /**
     *
     */
    pipelineBindPoint: VkPipelineBindPoint;

    /**
     *
     */
    pipelineLayout: VkPipelineLayout | null;

    /**
     *
     */
    set: number;

  }

  interface VkDescriptorUpdateTemplateCreateInfoKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;

    /**
     *
     */
    descriptorUpdateEntryCount?: number;

    /**
     *
     */
    pDescriptorUpdateEntries?: VkDescriptorUpdateTemplateEntry[] | null;

    /**
     *
     */
    templateType?: VkDescriptorUpdateTemplateType;

    /**
     *
     */
    descriptorSetLayout?: VkDescriptorSetLayout | null;

    /**
     *
     */
    pipelineBindPoint?: VkPipelineBindPoint;

    /**
     *
     */
    pipelineLayout?: VkPipelineLayout | null;

    /**
     *
     */
    set?: number;
  }

  interface VkDescriptorUpdateTemplateCreateInfoKHRConstructor {
    readonly prototype: VkDescriptorUpdateTemplateCreateInfoKHR;
    new(param?: VkDescriptorUpdateTemplateCreateInfoKHRInitializer | null): VkDescriptorUpdateTemplateCreateInfoKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDescriptorUpdateTemplateCreateInfoKHR: VkDescriptorUpdateTemplateCreateInfoKHRConstructor;

  
  
  /**
   * 
   */
  interface VkDescriptorUpdateTemplateCreateInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

    /**
     *
     */
    descriptorUpdateEntryCount: number;

    /**
     *
     */
    pDescriptorUpdateEntries: VkDescriptorUpdateTemplateEntry[] | null;

    /**
     *
     */
    templateType: VkDescriptorUpdateTemplateType;

    /**
     *
     */
    descriptorSetLayout: VkDescriptorSetLayout | null;

    /**
     *
     */
    pipelineBindPoint: VkPipelineBindPoint;

    /**
     *
     */
    pipelineLayout: VkPipelineLayout | null;

    /**
     *
     */
    set: number;

  }

  interface VkDescriptorUpdateTemplateCreateInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;

    /**
     *
     */
    descriptorUpdateEntryCount?: number;

    /**
     *
     */
    pDescriptorUpdateEntries?: VkDescriptorUpdateTemplateEntry[] | null;

    /**
     *
     */
    templateType?: VkDescriptorUpdateTemplateType;

    /**
     *
     */
    descriptorSetLayout?: VkDescriptorSetLayout | null;

    /**
     *
     */
    pipelineBindPoint?: VkPipelineBindPoint;

    /**
     *
     */
    pipelineLayout?: VkPipelineLayout | null;

    /**
     *
     */
    set?: number;
  }

  interface VkDescriptorUpdateTemplateCreateInfoConstructor {
    readonly prototype: VkDescriptorUpdateTemplateCreateInfo;
    new(param?: VkDescriptorUpdateTemplateCreateInfoInitializer | null): VkDescriptorUpdateTemplateCreateInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDescriptorUpdateTemplateCreateInfo: VkDescriptorUpdateTemplateCreateInfoConstructor;

  
  
  /**
   * 
   */
  interface VkDescriptorUpdateTemplateEntryKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    dstBinding: number;

    /**
     *
     */
    dstArrayElement: number;

    /**
     *
     */
    descriptorCount: number;

    /**
     *
     */
    descriptorType: VkDescriptorType;

    /**
     *
     */
    offset: bigint | number;

    /**
     *
     */
    stride: bigint | number;

  }

  interface VkDescriptorUpdateTemplateEntryKHRInitializer {
    
    /**
     *
     */
    dstBinding?: number;

    /**
     *
     */
    dstArrayElement?: number;

    /**
     *
     */
    descriptorCount?: number;

    /**
     *
     */
    descriptorType?: VkDescriptorType;

    /**
     *
     */
    offset?: bigint | number;

    /**
     *
     */
    stride?: bigint | number;
  }

  interface VkDescriptorUpdateTemplateEntryKHRConstructor {
    readonly prototype: VkDescriptorUpdateTemplateEntryKHR;
    new(param?: VkDescriptorUpdateTemplateEntryKHRInitializer | null): VkDescriptorUpdateTemplateEntryKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDescriptorUpdateTemplateEntryKHR: VkDescriptorUpdateTemplateEntryKHRConstructor;

  
  
  /**
   * 
   */
  interface VkDescriptorUpdateTemplateEntry {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    dstBinding: number;

    /**
     *
     */
    dstArrayElement: number;

    /**
     *
     */
    descriptorCount: number;

    /**
     *
     */
    descriptorType: VkDescriptorType;

    /**
     *
     */
    offset: bigint | number;

    /**
     *
     */
    stride: bigint | number;

  }

  interface VkDescriptorUpdateTemplateEntryInitializer {
    
    /**
     *
     */
    dstBinding?: number;

    /**
     *
     */
    dstArrayElement?: number;

    /**
     *
     */
    descriptorCount?: number;

    /**
     *
     */
    descriptorType?: VkDescriptorType;

    /**
     *
     */
    offset?: bigint | number;

    /**
     *
     */
    stride?: bigint | number;
  }

  interface VkDescriptorUpdateTemplateEntryConstructor {
    readonly prototype: VkDescriptorUpdateTemplateEntry;
    new(param?: VkDescriptorUpdateTemplateEntryInitializer | null): VkDescriptorUpdateTemplateEntry;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDescriptorUpdateTemplateEntry: VkDescriptorUpdateTemplateEntryConstructor;

  
  
  /**
   * 
   */
  interface VkDeviceGroupSwapchainCreateInfoKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    modes: VkDeviceGroupPresentModeFlagBitsKHR;

  }

  interface VkDeviceGroupSwapchainCreateInfoKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    modes?: VkDeviceGroupPresentModeFlagBitsKHR;
  }

  interface VkDeviceGroupSwapchainCreateInfoKHRConstructor {
    readonly prototype: VkDeviceGroupSwapchainCreateInfoKHR;
    new(param?: VkDeviceGroupSwapchainCreateInfoKHRInitializer | null): VkDeviceGroupSwapchainCreateInfoKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDeviceGroupSwapchainCreateInfoKHR: VkDeviceGroupSwapchainCreateInfoKHRConstructor;

  
  
  /**
   * 
   */
  interface VkDeviceGroupDeviceCreateInfoKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    physicalDeviceCount: number;

    /**
     *
     */
    pPhysicalDevices: VkPhysicalDevice[] | null;

  }

  interface VkDeviceGroupDeviceCreateInfoKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    physicalDeviceCount?: number;

    /**
     *
     */
    pPhysicalDevices?: VkPhysicalDevice[] | null;
  }

  interface VkDeviceGroupDeviceCreateInfoKHRConstructor {
    readonly prototype: VkDeviceGroupDeviceCreateInfoKHR;
    new(param?: VkDeviceGroupDeviceCreateInfoKHRInitializer | null): VkDeviceGroupDeviceCreateInfoKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDeviceGroupDeviceCreateInfoKHR: VkDeviceGroupDeviceCreateInfoKHRConstructor;

  
  
  /**
   * 
   */
  interface VkDeviceGroupDeviceCreateInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    physicalDeviceCount: number;

    /**
     *
     */
    pPhysicalDevices: VkPhysicalDevice[] | null;

  }

  interface VkDeviceGroupDeviceCreateInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    physicalDeviceCount?: number;

    /**
     *
     */
    pPhysicalDevices?: VkPhysicalDevice[] | null;
  }

  interface VkDeviceGroupDeviceCreateInfoConstructor {
    readonly prototype: VkDeviceGroupDeviceCreateInfo;
    new(param?: VkDeviceGroupDeviceCreateInfoInitializer | null): VkDeviceGroupDeviceCreateInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDeviceGroupDeviceCreateInfo: VkDeviceGroupDeviceCreateInfoConstructor;

  
  
  /**
   * 
   */
  interface VkDeviceGroupPresentInfoKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    swapchainCount: number;

    /**
     *
     */
    pDeviceMasks: Uint32Array | null;

    /**
     *
     */
    mode: VkDeviceGroupPresentModeFlagBitsKHR;

  }

  interface VkDeviceGroupPresentInfoKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    swapchainCount?: number;

    /**
     *
     */
    pDeviceMasks?: Uint32Array | null;

    /**
     *
     */
    mode?: VkDeviceGroupPresentModeFlagBitsKHR;
  }

  interface VkDeviceGroupPresentInfoKHRConstructor {
    readonly prototype: VkDeviceGroupPresentInfoKHR;
    new(param?: VkDeviceGroupPresentInfoKHRInitializer | null): VkDeviceGroupPresentInfoKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDeviceGroupPresentInfoKHR: VkDeviceGroupPresentInfoKHRConstructor;

  
  
  /**
   * 
   */
  interface VkAcquireNextImageInfoKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    swapchain: VkSwapchainKHR | null;

    /**
     *
     */
    timeout: bigint | number;

    /**
     *
     */
    semaphore: VkSemaphore | null;

    /**
     *
     */
    fence: VkFence | null;

    /**
     *
     */
    deviceMask: number;

  }

  interface VkAcquireNextImageInfoKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    swapchain?: VkSwapchainKHR | null;

    /**
     *
     */
    timeout?: bigint | number;

    /**
     *
     */
    semaphore?: VkSemaphore | null;

    /**
     *
     */
    fence?: VkFence | null;

    /**
     *
     */
    deviceMask?: number;
  }

  interface VkAcquireNextImageInfoKHRConstructor {
    readonly prototype: VkAcquireNextImageInfoKHR;
    new(param?: VkAcquireNextImageInfoKHRInitializer | null): VkAcquireNextImageInfoKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkAcquireNextImageInfoKHR: VkAcquireNextImageInfoKHRConstructor;

  
  
  /**
   * 
   */
  interface VkBindImageMemorySwapchainInfoKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    swapchain: VkSwapchainKHR | null;

    /**
     *
     */
    imageIndex: number;

  }

  interface VkBindImageMemorySwapchainInfoKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    swapchain?: VkSwapchainKHR | null;

    /**
     *
     */
    imageIndex?: number;
  }

  interface VkBindImageMemorySwapchainInfoKHRConstructor {
    readonly prototype: VkBindImageMemorySwapchainInfoKHR;
    new(param?: VkBindImageMemorySwapchainInfoKHRInitializer | null): VkBindImageMemorySwapchainInfoKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkBindImageMemorySwapchainInfoKHR: VkBindImageMemorySwapchainInfoKHRConstructor;

  
  
  /**
   * 
   */
  interface VkImageSwapchainCreateInfoKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    swapchain: VkSwapchainKHR | null;

  }

  interface VkImageSwapchainCreateInfoKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    swapchain?: VkSwapchainKHR | null;
  }

  interface VkImageSwapchainCreateInfoKHRConstructor {
    readonly prototype: VkImageSwapchainCreateInfoKHR;
    new(param?: VkImageSwapchainCreateInfoKHRInitializer | null): VkImageSwapchainCreateInfoKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkImageSwapchainCreateInfoKHR: VkImageSwapchainCreateInfoKHRConstructor;

  
  
  /**
   * 
   */
  interface VkDeviceGroupPresentCapabilitiesKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly presentMask: number[] | null;

    /**
     *
     */
    readonly modes: VkDeviceGroupPresentModeFlagBitsKHR;

  }

  interface VkDeviceGroupPresentCapabilitiesKHRInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly presentMask?: number[] | null;

    /**
     *
     */
    readonly modes?: VkDeviceGroupPresentModeFlagBitsKHR;
  }

  interface VkDeviceGroupPresentCapabilitiesKHRConstructor {
    readonly prototype: VkDeviceGroupPresentCapabilitiesKHR;
    new(param?: VkDeviceGroupPresentCapabilitiesKHRInitializer | null): VkDeviceGroupPresentCapabilitiesKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDeviceGroupPresentCapabilitiesKHR: VkDeviceGroupPresentCapabilitiesKHRConstructor;

  
  
  /**
   * 
   */
  interface VkDeviceGroupBindSparseInfoKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    resourceDeviceIndex: number;

    /**
     *
     */
    memoryDeviceIndex: number;

  }

  interface VkDeviceGroupBindSparseInfoKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    resourceDeviceIndex?: number;

    /**
     *
     */
    memoryDeviceIndex?: number;
  }

  interface VkDeviceGroupBindSparseInfoKHRConstructor {
    readonly prototype: VkDeviceGroupBindSparseInfoKHR;
    new(param?: VkDeviceGroupBindSparseInfoKHRInitializer | null): VkDeviceGroupBindSparseInfoKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDeviceGroupBindSparseInfoKHR: VkDeviceGroupBindSparseInfoKHRConstructor;

  
  
  /**
   * 
   */
  interface VkDeviceGroupBindSparseInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    resourceDeviceIndex: number;

    /**
     *
     */
    memoryDeviceIndex: number;

  }

  interface VkDeviceGroupBindSparseInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    resourceDeviceIndex?: number;

    /**
     *
     */
    memoryDeviceIndex?: number;
  }

  interface VkDeviceGroupBindSparseInfoConstructor {
    readonly prototype: VkDeviceGroupBindSparseInfo;
    new(param?: VkDeviceGroupBindSparseInfoInitializer | null): VkDeviceGroupBindSparseInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDeviceGroupBindSparseInfo: VkDeviceGroupBindSparseInfoConstructor;

  
  
  /**
   * 
   */
  interface VkDeviceGroupSubmitInfoKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    waitSemaphoreCount: number;

    /**
     *
     */
    pWaitSemaphoreDeviceIndices: Uint32Array | null;

    /**
     *
     */
    commandBufferCount: number;

    /**
     *
     */
    pCommandBufferDeviceMasks: Uint32Array | null;

    /**
     *
     */
    signalSemaphoreCount: number;

    /**
     *
     */
    pSignalSemaphoreDeviceIndices: Uint32Array | null;

  }

  interface VkDeviceGroupSubmitInfoKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    waitSemaphoreCount?: number;

    /**
     *
     */
    pWaitSemaphoreDeviceIndices?: Uint32Array | null;

    /**
     *
     */
    commandBufferCount?: number;

    /**
     *
     */
    pCommandBufferDeviceMasks?: Uint32Array | null;

    /**
     *
     */
    signalSemaphoreCount?: number;

    /**
     *
     */
    pSignalSemaphoreDeviceIndices?: Uint32Array | null;
  }

  interface VkDeviceGroupSubmitInfoKHRConstructor {
    readonly prototype: VkDeviceGroupSubmitInfoKHR;
    new(param?: VkDeviceGroupSubmitInfoKHRInitializer | null): VkDeviceGroupSubmitInfoKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDeviceGroupSubmitInfoKHR: VkDeviceGroupSubmitInfoKHRConstructor;

  
  
  /**
   * 
   */
  interface VkDeviceGroupSubmitInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    waitSemaphoreCount: number;

    /**
     *
     */
    pWaitSemaphoreDeviceIndices: Uint32Array | null;

    /**
     *
     */
    commandBufferCount: number;

    /**
     *
     */
    pCommandBufferDeviceMasks: Uint32Array | null;

    /**
     *
     */
    signalSemaphoreCount: number;

    /**
     *
     */
    pSignalSemaphoreDeviceIndices: Uint32Array | null;

  }

  interface VkDeviceGroupSubmitInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    waitSemaphoreCount?: number;

    /**
     *
     */
    pWaitSemaphoreDeviceIndices?: Uint32Array | null;

    /**
     *
     */
    commandBufferCount?: number;

    /**
     *
     */
    pCommandBufferDeviceMasks?: Uint32Array | null;

    /**
     *
     */
    signalSemaphoreCount?: number;

    /**
     *
     */
    pSignalSemaphoreDeviceIndices?: Uint32Array | null;
  }

  interface VkDeviceGroupSubmitInfoConstructor {
    readonly prototype: VkDeviceGroupSubmitInfo;
    new(param?: VkDeviceGroupSubmitInfoInitializer | null): VkDeviceGroupSubmitInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDeviceGroupSubmitInfo: VkDeviceGroupSubmitInfoConstructor;

  
  
  /**
   * 
   */
  interface VkDeviceGroupCommandBufferBeginInfoKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    deviceMask: number;

  }

  interface VkDeviceGroupCommandBufferBeginInfoKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    deviceMask?: number;
  }

  interface VkDeviceGroupCommandBufferBeginInfoKHRConstructor {
    readonly prototype: VkDeviceGroupCommandBufferBeginInfoKHR;
    new(param?: VkDeviceGroupCommandBufferBeginInfoKHRInitializer | null): VkDeviceGroupCommandBufferBeginInfoKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDeviceGroupCommandBufferBeginInfoKHR: VkDeviceGroupCommandBufferBeginInfoKHRConstructor;

  
  
  /**
   * 
   */
  interface VkDeviceGroupCommandBufferBeginInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    deviceMask: number;

  }

  interface VkDeviceGroupCommandBufferBeginInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    deviceMask?: number;
  }

  interface VkDeviceGroupCommandBufferBeginInfoConstructor {
    readonly prototype: VkDeviceGroupCommandBufferBeginInfo;
    new(param?: VkDeviceGroupCommandBufferBeginInfoInitializer | null): VkDeviceGroupCommandBufferBeginInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDeviceGroupCommandBufferBeginInfo: VkDeviceGroupCommandBufferBeginInfoConstructor;

  
  
  /**
   * 
   */
  interface VkDeviceGroupRenderPassBeginInfoKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    deviceMask: number;

    /**
     *
     */
    deviceRenderAreaCount: number;

    /**
     *
     */
    pDeviceRenderAreas: VkRect2D[] | null;

  }

  interface VkDeviceGroupRenderPassBeginInfoKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    deviceMask?: number;

    /**
     *
     */
    deviceRenderAreaCount?: number;

    /**
     *
     */
    pDeviceRenderAreas?: VkRect2D[] | null;
  }

  interface VkDeviceGroupRenderPassBeginInfoKHRConstructor {
    readonly prototype: VkDeviceGroupRenderPassBeginInfoKHR;
    new(param?: VkDeviceGroupRenderPassBeginInfoKHRInitializer | null): VkDeviceGroupRenderPassBeginInfoKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDeviceGroupRenderPassBeginInfoKHR: VkDeviceGroupRenderPassBeginInfoKHRConstructor;

  
  
  /**
   * 
   */
  interface VkDeviceGroupRenderPassBeginInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    deviceMask: number;

    /**
     *
     */
    deviceRenderAreaCount: number;

    /**
     *
     */
    pDeviceRenderAreas: VkRect2D[] | null;

  }

  interface VkDeviceGroupRenderPassBeginInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    deviceMask?: number;

    /**
     *
     */
    deviceRenderAreaCount?: number;

    /**
     *
     */
    pDeviceRenderAreas?: VkRect2D[] | null;
  }

  interface VkDeviceGroupRenderPassBeginInfoConstructor {
    readonly prototype: VkDeviceGroupRenderPassBeginInfo;
    new(param?: VkDeviceGroupRenderPassBeginInfoInitializer | null): VkDeviceGroupRenderPassBeginInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDeviceGroupRenderPassBeginInfo: VkDeviceGroupRenderPassBeginInfoConstructor;

  
  
  /**
   * 
   */
  interface VkBindImageMemoryDeviceGroupInfoKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    deviceIndexCount: number;

    /**
     *
     */
    pDeviceIndices: Uint32Array | null;

    /**
     *
     */
    splitInstanceBindRegionCount: number;

    /**
     *
     */
    pSplitInstanceBindRegions: VkRect2D[] | null;

  }

  interface VkBindImageMemoryDeviceGroupInfoKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    deviceIndexCount?: number;

    /**
     *
     */
    pDeviceIndices?: Uint32Array | null;

    /**
     *
     */
    splitInstanceBindRegionCount?: number;

    /**
     *
     */
    pSplitInstanceBindRegions?: VkRect2D[] | null;
  }

  interface VkBindImageMemoryDeviceGroupInfoKHRConstructor {
    readonly prototype: VkBindImageMemoryDeviceGroupInfoKHR;
    new(param?: VkBindImageMemoryDeviceGroupInfoKHRInitializer | null): VkBindImageMemoryDeviceGroupInfoKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkBindImageMemoryDeviceGroupInfoKHR: VkBindImageMemoryDeviceGroupInfoKHRConstructor;

  
  
  /**
   * 
   */
  interface VkBindImageMemoryDeviceGroupInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    deviceIndexCount: number;

    /**
     *
     */
    pDeviceIndices: Uint32Array | null;

    /**
     *
     */
    splitInstanceBindRegionCount: number;

    /**
     *
     */
    pSplitInstanceBindRegions: VkRect2D[] | null;

  }

  interface VkBindImageMemoryDeviceGroupInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    deviceIndexCount?: number;

    /**
     *
     */
    pDeviceIndices?: Uint32Array | null;

    /**
     *
     */
    splitInstanceBindRegionCount?: number;

    /**
     *
     */
    pSplitInstanceBindRegions?: VkRect2D[] | null;
  }

  interface VkBindImageMemoryDeviceGroupInfoConstructor {
    readonly prototype: VkBindImageMemoryDeviceGroupInfo;
    new(param?: VkBindImageMemoryDeviceGroupInfoInitializer | null): VkBindImageMemoryDeviceGroupInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkBindImageMemoryDeviceGroupInfo: VkBindImageMemoryDeviceGroupInfoConstructor;

  
  
  /**
   * 
   */
  interface VkBindImageMemoryInfoKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    image: VkImage | null;

    /**
     *
     */
    memory: VkDeviceMemory | null;

    /**
     *
     */
    memoryOffset: bigint | number;

  }

  interface VkBindImageMemoryInfoKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    image?: VkImage | null;

    /**
     *
     */
    memory?: VkDeviceMemory | null;

    /**
     *
     */
    memoryOffset?: bigint | number;
  }

  interface VkBindImageMemoryInfoKHRConstructor {
    readonly prototype: VkBindImageMemoryInfoKHR;
    new(param?: VkBindImageMemoryInfoKHRInitializer | null): VkBindImageMemoryInfoKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkBindImageMemoryInfoKHR: VkBindImageMemoryInfoKHRConstructor;

  
  
  /**
   * 
   */
  interface VkBindImageMemoryInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    image: VkImage | null;

    /**
     *
     */
    memory: VkDeviceMemory | null;

    /**
     *
     */
    memoryOffset: bigint | number;

  }

  interface VkBindImageMemoryInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    image?: VkImage | null;

    /**
     *
     */
    memory?: VkDeviceMemory | null;

    /**
     *
     */
    memoryOffset?: bigint | number;
  }

  interface VkBindImageMemoryInfoConstructor {
    readonly prototype: VkBindImageMemoryInfo;
    new(param?: VkBindImageMemoryInfoInitializer | null): VkBindImageMemoryInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkBindImageMemoryInfo: VkBindImageMemoryInfoConstructor;

  
  
  /**
   * 
   */
  interface VkBindBufferMemoryDeviceGroupInfoKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    deviceIndexCount: number;

    /**
     *
     */
    pDeviceIndices: Uint32Array | null;

  }

  interface VkBindBufferMemoryDeviceGroupInfoKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    deviceIndexCount?: number;

    /**
     *
     */
    pDeviceIndices?: Uint32Array | null;
  }

  interface VkBindBufferMemoryDeviceGroupInfoKHRConstructor {
    readonly prototype: VkBindBufferMemoryDeviceGroupInfoKHR;
    new(param?: VkBindBufferMemoryDeviceGroupInfoKHRInitializer | null): VkBindBufferMemoryDeviceGroupInfoKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkBindBufferMemoryDeviceGroupInfoKHR: VkBindBufferMemoryDeviceGroupInfoKHRConstructor;

  
  
  /**
   * 
   */
  interface VkBindBufferMemoryDeviceGroupInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    deviceIndexCount: number;

    /**
     *
     */
    pDeviceIndices: Uint32Array | null;

  }

  interface VkBindBufferMemoryDeviceGroupInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    deviceIndexCount?: number;

    /**
     *
     */
    pDeviceIndices?: Uint32Array | null;
  }

  interface VkBindBufferMemoryDeviceGroupInfoConstructor {
    readonly prototype: VkBindBufferMemoryDeviceGroupInfo;
    new(param?: VkBindBufferMemoryDeviceGroupInfoInitializer | null): VkBindBufferMemoryDeviceGroupInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkBindBufferMemoryDeviceGroupInfo: VkBindBufferMemoryDeviceGroupInfoConstructor;

  
  
  /**
   * 
   */
  interface VkBindBufferMemoryInfoKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    buffer: VkBuffer | null;

    /**
     *
     */
    memory: VkDeviceMemory | null;

    /**
     *
     */
    memoryOffset: bigint | number;

  }

  interface VkBindBufferMemoryInfoKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    buffer?: VkBuffer | null;

    /**
     *
     */
    memory?: VkDeviceMemory | null;

    /**
     *
     */
    memoryOffset?: bigint | number;
  }

  interface VkBindBufferMemoryInfoKHRConstructor {
    readonly prototype: VkBindBufferMemoryInfoKHR;
    new(param?: VkBindBufferMemoryInfoKHRInitializer | null): VkBindBufferMemoryInfoKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkBindBufferMemoryInfoKHR: VkBindBufferMemoryInfoKHRConstructor;

  
  
  /**
   * 
   */
  interface VkBindBufferMemoryInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    buffer: VkBuffer | null;

    /**
     *
     */
    memory: VkDeviceMemory | null;

    /**
     *
     */
    memoryOffset: bigint | number;

  }

  interface VkBindBufferMemoryInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    buffer?: VkBuffer | null;

    /**
     *
     */
    memory?: VkDeviceMemory | null;

    /**
     *
     */
    memoryOffset?: bigint | number;
  }

  interface VkBindBufferMemoryInfoConstructor {
    readonly prototype: VkBindBufferMemoryInfo;
    new(param?: VkBindBufferMemoryInfoInitializer | null): VkBindBufferMemoryInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkBindBufferMemoryInfo: VkBindBufferMemoryInfoConstructor;

  
  
  /**
   * 
   */
  interface VkMemoryAllocateFlagsInfoKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkMemoryAllocateFlagBits;

    /**
     *
     */
    deviceMask: number;

  }

  interface VkMemoryAllocateFlagsInfoKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkMemoryAllocateFlagBits;

    /**
     *
     */
    deviceMask?: number;
  }

  interface VkMemoryAllocateFlagsInfoKHRConstructor {
    readonly prototype: VkMemoryAllocateFlagsInfoKHR;
    new(param?: VkMemoryAllocateFlagsInfoKHRInitializer | null): VkMemoryAllocateFlagsInfoKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkMemoryAllocateFlagsInfoKHR: VkMemoryAllocateFlagsInfoKHRConstructor;

  
  
  /**
   * 
   */
  interface VkMemoryAllocateFlagsInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkMemoryAllocateFlagBits;

    /**
     *
     */
    deviceMask: number;

  }

  interface VkMemoryAllocateFlagsInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkMemoryAllocateFlagBits;

    /**
     *
     */
    deviceMask?: number;
  }

  interface VkMemoryAllocateFlagsInfoConstructor {
    readonly prototype: VkMemoryAllocateFlagsInfo;
    new(param?: VkMemoryAllocateFlagsInfoInitializer | null): VkMemoryAllocateFlagsInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkMemoryAllocateFlagsInfo: VkMemoryAllocateFlagsInfoConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceGroupPropertiesKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly physicalDeviceCount: number;

    /**
     *
     */
    readonly physicalDevices: VkPhysicalDevice[] | null;

    /**
     *
     */
    readonly subsetAllocation: boolean;

  }

  interface VkPhysicalDeviceGroupPropertiesKHRInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly physicalDeviceCount?: number;

    /**
     *
     */
    readonly physicalDevices?: VkPhysicalDevice[] | null;

    /**
     *
     */
    readonly subsetAllocation?: boolean;
  }

  interface VkPhysicalDeviceGroupPropertiesKHRConstructor {
    readonly prototype: VkPhysicalDeviceGroupPropertiesKHR;
    new(param?: VkPhysicalDeviceGroupPropertiesKHRInitializer | null): VkPhysicalDeviceGroupPropertiesKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceGroupPropertiesKHR: VkPhysicalDeviceGroupPropertiesKHRConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceGroupProperties {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly physicalDeviceCount: number;

    /**
     *
     */
    readonly physicalDevices: VkPhysicalDevice[] | null;

    /**
     *
     */
    readonly subsetAllocation: boolean;

  }

  interface VkPhysicalDeviceGroupPropertiesInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly physicalDeviceCount?: number;

    /**
     *
     */
    readonly physicalDevices?: VkPhysicalDevice[] | null;

    /**
     *
     */
    readonly subsetAllocation?: boolean;
  }

  interface VkPhysicalDeviceGroupPropertiesConstructor {
    readonly prototype: VkPhysicalDeviceGroupProperties;
    new(param?: VkPhysicalDeviceGroupPropertiesInitializer | null): VkPhysicalDeviceGroupProperties;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceGroupProperties: VkPhysicalDeviceGroupPropertiesConstructor;

  
  
  /**
   * 
   */
  interface VkSwapchainCounterCreateInfoEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    surfaceCounters: VkSurfaceCounterFlagBitsEXT;

  }

  interface VkSwapchainCounterCreateInfoEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    surfaceCounters?: VkSurfaceCounterFlagBitsEXT;
  }

  interface VkSwapchainCounterCreateInfoEXTConstructor {
    readonly prototype: VkSwapchainCounterCreateInfoEXT;
    new(param?: VkSwapchainCounterCreateInfoEXTInitializer | null): VkSwapchainCounterCreateInfoEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkSwapchainCounterCreateInfoEXT: VkSwapchainCounterCreateInfoEXTConstructor;

  
  
  /**
   * 
   */
  interface VkDisplayEventInfoEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    displayEvent: VkDisplayEventTypeEXT;

  }

  interface VkDisplayEventInfoEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    displayEvent?: VkDisplayEventTypeEXT;
  }

  interface VkDisplayEventInfoEXTConstructor {
    readonly prototype: VkDisplayEventInfoEXT;
    new(param?: VkDisplayEventInfoEXTInitializer | null): VkDisplayEventInfoEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDisplayEventInfoEXT: VkDisplayEventInfoEXTConstructor;

  
  
  /**
   * 
   */
  interface VkDeviceEventInfoEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    deviceEvent: VkDeviceEventTypeEXT;

  }

  interface VkDeviceEventInfoEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    deviceEvent?: VkDeviceEventTypeEXT;
  }

  interface VkDeviceEventInfoEXTConstructor {
    readonly prototype: VkDeviceEventInfoEXT;
    new(param?: VkDeviceEventInfoEXTInitializer | null): VkDeviceEventInfoEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDeviceEventInfoEXT: VkDeviceEventInfoEXTConstructor;

  
  
  /**
   * 
   */
  interface VkDisplayPowerInfoEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    powerState: VkDisplayPowerStateEXT;

  }

  interface VkDisplayPowerInfoEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    powerState?: VkDisplayPowerStateEXT;
  }

  interface VkDisplayPowerInfoEXTConstructor {
    readonly prototype: VkDisplayPowerInfoEXT;
    new(param?: VkDisplayPowerInfoEXTInitializer | null): VkDisplayPowerInfoEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDisplayPowerInfoEXT: VkDisplayPowerInfoEXTConstructor;

  
  
  /**
   * 
   */
  interface VkSurfaceCapabilities2EXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly minImageCount: number;

    /**
     *
     */
    readonly maxImageCount: number;

    /**
     *
     */
    readonly currentExtent: VkExtent2D | null;

    /**
     *
     */
    readonly minImageExtent: VkExtent2D | null;

    /**
     *
     */
    readonly maxImageExtent: VkExtent2D | null;

    /**
     *
     */
    readonly maxImageArrayLayers: number;

    /**
     *
     */
    readonly supportedTransforms: VkSurfaceTransformFlagBitsKHR;

    /**
     *
     */
    readonly currentTransform: VkSurfaceTransformFlagBitsKHR;

    /**
     *
     */
    readonly supportedCompositeAlpha: VkCompositeAlphaFlagBitsKHR;

    /**
     *
     */
    readonly supportedUsageFlags: VkImageUsageFlagBits;

    /**
     *
     */
    readonly supportedSurfaceCounters: VkSurfaceCounterFlagBitsEXT;

  }

  interface VkSurfaceCapabilities2EXTInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly minImageCount?: number;

    /**
     *
     */
    readonly maxImageCount?: number;

    /**
     *
     */
    readonly currentExtent?: VkExtent2D | null;

    /**
     *
     */
    readonly minImageExtent?: VkExtent2D | null;

    /**
     *
     */
    readonly maxImageExtent?: VkExtent2D | null;

    /**
     *
     */
    readonly maxImageArrayLayers?: number;

    /**
     *
     */
    readonly supportedTransforms?: VkSurfaceTransformFlagBitsKHR;

    /**
     *
     */
    readonly currentTransform?: VkSurfaceTransformFlagBitsKHR;

    /**
     *
     */
    readonly supportedCompositeAlpha?: VkCompositeAlphaFlagBitsKHR;

    /**
     *
     */
    readonly supportedUsageFlags?: VkImageUsageFlagBits;

    /**
     *
     */
    readonly supportedSurfaceCounters?: VkSurfaceCounterFlagBitsEXT;
  }

  interface VkSurfaceCapabilities2EXTConstructor {
    readonly prototype: VkSurfaceCapabilities2EXT;
    new(param?: VkSurfaceCapabilities2EXTInitializer | null): VkSurfaceCapabilities2EXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkSurfaceCapabilities2EXT: VkSurfaceCapabilities2EXTConstructor;

  
  
  /**
   * 
   */
  interface VkRenderPassMultiviewCreateInfoKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    subpassCount: number;

    /**
     *
     */
    pViewMasks: Uint32Array | null;

    /**
     *
     */
    dependencyCount: number;

    /**
     *
     */
    pViewOffsets: Int32Array | null;

    /**
     *
     */
    correlationMaskCount: number;

    /**
     *
     */
    pCorrelationMasks: Uint32Array | null;

  }

  interface VkRenderPassMultiviewCreateInfoKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    subpassCount?: number;

    /**
     *
     */
    pViewMasks?: Uint32Array | null;

    /**
     *
     */
    dependencyCount?: number;

    /**
     *
     */
    pViewOffsets?: Int32Array | null;

    /**
     *
     */
    correlationMaskCount?: number;

    /**
     *
     */
    pCorrelationMasks?: Uint32Array | null;
  }

  interface VkRenderPassMultiviewCreateInfoKHRConstructor {
    readonly prototype: VkRenderPassMultiviewCreateInfoKHR;
    new(param?: VkRenderPassMultiviewCreateInfoKHRInitializer | null): VkRenderPassMultiviewCreateInfoKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkRenderPassMultiviewCreateInfoKHR: VkRenderPassMultiviewCreateInfoKHRConstructor;

  
  
  /**
   * 
   */
  interface VkRenderPassMultiviewCreateInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    subpassCount: number;

    /**
     *
     */
    pViewMasks: Uint32Array | null;

    /**
     *
     */
    dependencyCount: number;

    /**
     *
     */
    pViewOffsets: Int32Array | null;

    /**
     *
     */
    correlationMaskCount: number;

    /**
     *
     */
    pCorrelationMasks: Uint32Array | null;

  }

  interface VkRenderPassMultiviewCreateInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    subpassCount?: number;

    /**
     *
     */
    pViewMasks?: Uint32Array | null;

    /**
     *
     */
    dependencyCount?: number;

    /**
     *
     */
    pViewOffsets?: Int32Array | null;

    /**
     *
     */
    correlationMaskCount?: number;

    /**
     *
     */
    pCorrelationMasks?: Uint32Array | null;
  }

  interface VkRenderPassMultiviewCreateInfoConstructor {
    readonly prototype: VkRenderPassMultiviewCreateInfo;
    new(param?: VkRenderPassMultiviewCreateInfoInitializer | null): VkRenderPassMultiviewCreateInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkRenderPassMultiviewCreateInfo: VkRenderPassMultiviewCreateInfoConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceMultiviewPropertiesKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly maxMultiviewViewCount: number;

    /**
     *
     */
    readonly maxMultiviewInstanceIndex: number;

  }

  interface VkPhysicalDeviceMultiviewPropertiesKHRInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly maxMultiviewViewCount?: number;

    /**
     *
     */
    readonly maxMultiviewInstanceIndex?: number;
  }

  interface VkPhysicalDeviceMultiviewPropertiesKHRConstructor {
    readonly prototype: VkPhysicalDeviceMultiviewPropertiesKHR;
    new(param?: VkPhysicalDeviceMultiviewPropertiesKHRInitializer | null): VkPhysicalDeviceMultiviewPropertiesKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceMultiviewPropertiesKHR: VkPhysicalDeviceMultiviewPropertiesKHRConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceMultiviewProperties {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly maxMultiviewViewCount: number;

    /**
     *
     */
    readonly maxMultiviewInstanceIndex: number;

  }

  interface VkPhysicalDeviceMultiviewPropertiesInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly maxMultiviewViewCount?: number;

    /**
     *
     */
    readonly maxMultiviewInstanceIndex?: number;
  }

  interface VkPhysicalDeviceMultiviewPropertiesConstructor {
    readonly prototype: VkPhysicalDeviceMultiviewProperties;
    new(param?: VkPhysicalDeviceMultiviewPropertiesInitializer | null): VkPhysicalDeviceMultiviewProperties;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceMultiviewProperties: VkPhysicalDeviceMultiviewPropertiesConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceMultiviewFeaturesKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    multiview: boolean;

    /**
     *
     */
    multiviewGeometryShader: boolean;

    /**
     *
     */
    multiviewTessellationShader: boolean;

  }

  interface VkPhysicalDeviceMultiviewFeaturesKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    multiview?: boolean;

    /**
     *
     */
    multiviewGeometryShader?: boolean;

    /**
     *
     */
    multiviewTessellationShader?: boolean;
  }

  interface VkPhysicalDeviceMultiviewFeaturesKHRConstructor {
    readonly prototype: VkPhysicalDeviceMultiviewFeaturesKHR;
    new(param?: VkPhysicalDeviceMultiviewFeaturesKHRInitializer | null): VkPhysicalDeviceMultiviewFeaturesKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceMultiviewFeaturesKHR: VkPhysicalDeviceMultiviewFeaturesKHRConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceMultiviewFeatures {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    multiview: boolean;

    /**
     *
     */
    multiviewGeometryShader: boolean;

    /**
     *
     */
    multiviewTessellationShader: boolean;

  }

  interface VkPhysicalDeviceMultiviewFeaturesInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    multiview?: boolean;

    /**
     *
     */
    multiviewGeometryShader?: boolean;

    /**
     *
     */
    multiviewTessellationShader?: boolean;
  }

  interface VkPhysicalDeviceMultiviewFeaturesConstructor {
    readonly prototype: VkPhysicalDeviceMultiviewFeatures;
    new(param?: VkPhysicalDeviceMultiviewFeaturesInitializer | null): VkPhysicalDeviceMultiviewFeatures;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceMultiviewFeatures: VkPhysicalDeviceMultiviewFeaturesConstructor;

  
  
  /**
   * 
   */
  interface VkFenceGetFdInfoKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    fence: VkFence | null;

    /**
     *
     */
    handleType: VkExternalFenceHandleTypeFlagBits;

  }

  interface VkFenceGetFdInfoKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    fence?: VkFence | null;

    /**
     *
     */
    handleType?: VkExternalFenceHandleTypeFlagBits;
  }

  interface VkFenceGetFdInfoKHRConstructor {
    readonly prototype: VkFenceGetFdInfoKHR;
    new(param?: VkFenceGetFdInfoKHRInitializer | null): VkFenceGetFdInfoKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkFenceGetFdInfoKHR: VkFenceGetFdInfoKHRConstructor;

  
  
  /**
   * 
   */
  interface VkImportFenceFdInfoKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    fence: VkFence | null;

    /**
     *
     */
    flags: VkFenceImportFlagBits;

    /**
     *
     */
    handleType: VkExternalFenceHandleTypeFlagBits;

    /**
     *
     */
    fd: number;

  }

  interface VkImportFenceFdInfoKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    fence?: VkFence | null;

    /**
     *
     */
    flags?: VkFenceImportFlagBits;

    /**
     *
     */
    handleType?: VkExternalFenceHandleTypeFlagBits;

    /**
     *
     */
    fd?: number;
  }

  interface VkImportFenceFdInfoKHRConstructor {
    readonly prototype: VkImportFenceFdInfoKHR;
    new(param?: VkImportFenceFdInfoKHRInitializer | null): VkImportFenceFdInfoKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkImportFenceFdInfoKHR: VkImportFenceFdInfoKHRConstructor;

  
  
  /**
   * 
   */
  interface VkFenceGetWin32HandleInfoKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    fence: VkFence | null;

    /**
     *
     */
    handleType: VkExternalFenceHandleTypeFlagBits;

  }

  interface VkFenceGetWin32HandleInfoKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    fence?: VkFence | null;

    /**
     *
     */
    handleType?: VkExternalFenceHandleTypeFlagBits;
  }

  interface VkFenceGetWin32HandleInfoKHRConstructor {
    readonly prototype: VkFenceGetWin32HandleInfoKHR;
    new(param?: VkFenceGetWin32HandleInfoKHRInitializer | null): VkFenceGetWin32HandleInfoKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkFenceGetWin32HandleInfoKHR: VkFenceGetWin32HandleInfoKHRConstructor;

  
  
  /**
   * 
   */
  interface VkExportFenceWin32HandleInfoKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    pAttributes: null;

    /**
     *
     */
    dwAccess: null;

    /**
     *
     */
    name: string | null;

  }

  interface VkExportFenceWin32HandleInfoKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    pAttributes?: null;

    /**
     *
     */
    dwAccess?: null;

    /**
     *
     */
    name?: string | null;
  }

  interface VkExportFenceWin32HandleInfoKHRConstructor {
    readonly prototype: VkExportFenceWin32HandleInfoKHR;
    new(param?: VkExportFenceWin32HandleInfoKHRInitializer | null): VkExportFenceWin32HandleInfoKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkExportFenceWin32HandleInfoKHR: VkExportFenceWin32HandleInfoKHRConstructor;

  
  
  /**
   * 
   */
  interface VkImportFenceWin32HandleInfoKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    fence: VkFence | null;

    /**
     *
     */
    flags: VkFenceImportFlagBits;

    /**
     *
     */
    handleType: VkExternalFenceHandleTypeFlagBits;

    /**
     *
     */
    handle: bigint | number;

    /**
     *
     */
    name: string | null;

  }

  interface VkImportFenceWin32HandleInfoKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    fence?: VkFence | null;

    /**
     *
     */
    flags?: VkFenceImportFlagBits;

    /**
     *
     */
    handleType?: VkExternalFenceHandleTypeFlagBits;

    /**
     *
     */
    handle?: bigint | number;

    /**
     *
     */
    name?: string | null;
  }

  interface VkImportFenceWin32HandleInfoKHRConstructor {
    readonly prototype: VkImportFenceWin32HandleInfoKHR;
    new(param?: VkImportFenceWin32HandleInfoKHRInitializer | null): VkImportFenceWin32HandleInfoKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkImportFenceWin32HandleInfoKHR: VkImportFenceWin32HandleInfoKHRConstructor;

  
  
  /**
   * 
   */
  interface VkExportFenceCreateInfoKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    handleTypes: VkExternalFenceHandleTypeFlagBits;

  }

  interface VkExportFenceCreateInfoKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    handleTypes?: VkExternalFenceHandleTypeFlagBits;
  }

  interface VkExportFenceCreateInfoKHRConstructor {
    readonly prototype: VkExportFenceCreateInfoKHR;
    new(param?: VkExportFenceCreateInfoKHRInitializer | null): VkExportFenceCreateInfoKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkExportFenceCreateInfoKHR: VkExportFenceCreateInfoKHRConstructor;

  
  
  /**
   * 
   */
  interface VkExportFenceCreateInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    handleTypes: VkExternalFenceHandleTypeFlagBits;

  }

  interface VkExportFenceCreateInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    handleTypes?: VkExternalFenceHandleTypeFlagBits;
  }

  interface VkExportFenceCreateInfoConstructor {
    readonly prototype: VkExportFenceCreateInfo;
    new(param?: VkExportFenceCreateInfoInitializer | null): VkExportFenceCreateInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkExportFenceCreateInfo: VkExportFenceCreateInfoConstructor;

  
  
  /**
   * 
   */
  interface VkExternalFencePropertiesKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly exportFromImportedHandleTypes: VkExternalFenceHandleTypeFlagBits;

    /**
     *
     */
    readonly compatibleHandleTypes: VkExternalFenceHandleTypeFlagBits;

    /**
     *
     */
    readonly externalFenceFeatures: VkExternalFenceFeatureFlagBits;

  }

  interface VkExternalFencePropertiesKHRInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly exportFromImportedHandleTypes?: VkExternalFenceHandleTypeFlagBits;

    /**
     *
     */
    readonly compatibleHandleTypes?: VkExternalFenceHandleTypeFlagBits;

    /**
     *
     */
    readonly externalFenceFeatures?: VkExternalFenceFeatureFlagBits;
  }

  interface VkExternalFencePropertiesKHRConstructor {
    readonly prototype: VkExternalFencePropertiesKHR;
    new(param?: VkExternalFencePropertiesKHRInitializer | null): VkExternalFencePropertiesKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkExternalFencePropertiesKHR: VkExternalFencePropertiesKHRConstructor;

  
  
  /**
   * 
   */
  interface VkExternalFenceProperties {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly exportFromImportedHandleTypes: VkExternalFenceHandleTypeFlagBits;

    /**
     *
     */
    readonly compatibleHandleTypes: VkExternalFenceHandleTypeFlagBits;

    /**
     *
     */
    readonly externalFenceFeatures: VkExternalFenceFeatureFlagBits;

  }

  interface VkExternalFencePropertiesInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly exportFromImportedHandleTypes?: VkExternalFenceHandleTypeFlagBits;

    /**
     *
     */
    readonly compatibleHandleTypes?: VkExternalFenceHandleTypeFlagBits;

    /**
     *
     */
    readonly externalFenceFeatures?: VkExternalFenceFeatureFlagBits;
  }

  interface VkExternalFencePropertiesConstructor {
    readonly prototype: VkExternalFenceProperties;
    new(param?: VkExternalFencePropertiesInitializer | null): VkExternalFenceProperties;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkExternalFenceProperties: VkExternalFencePropertiesConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceExternalFenceInfoKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    handleType: VkExternalFenceHandleTypeFlagBits;

  }

  interface VkPhysicalDeviceExternalFenceInfoKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    handleType?: VkExternalFenceHandleTypeFlagBits;
  }

  interface VkPhysicalDeviceExternalFenceInfoKHRConstructor {
    readonly prototype: VkPhysicalDeviceExternalFenceInfoKHR;
    new(param?: VkPhysicalDeviceExternalFenceInfoKHRInitializer | null): VkPhysicalDeviceExternalFenceInfoKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceExternalFenceInfoKHR: VkPhysicalDeviceExternalFenceInfoKHRConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceExternalFenceInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    handleType: VkExternalFenceHandleTypeFlagBits;

  }

  interface VkPhysicalDeviceExternalFenceInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    handleType?: VkExternalFenceHandleTypeFlagBits;
  }

  interface VkPhysicalDeviceExternalFenceInfoConstructor {
    readonly prototype: VkPhysicalDeviceExternalFenceInfo;
    new(param?: VkPhysicalDeviceExternalFenceInfoInitializer | null): VkPhysicalDeviceExternalFenceInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceExternalFenceInfo: VkPhysicalDeviceExternalFenceInfoConstructor;

  
  
  /**
   * 
   */
  interface VkSemaphoreGetFdInfoKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    semaphore: VkSemaphore | null;

    /**
     *
     */
    handleType: VkExternalSemaphoreHandleTypeFlagBits;

  }

  interface VkSemaphoreGetFdInfoKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    semaphore?: VkSemaphore | null;

    /**
     *
     */
    handleType?: VkExternalSemaphoreHandleTypeFlagBits;
  }

  interface VkSemaphoreGetFdInfoKHRConstructor {
    readonly prototype: VkSemaphoreGetFdInfoKHR;
    new(param?: VkSemaphoreGetFdInfoKHRInitializer | null): VkSemaphoreGetFdInfoKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkSemaphoreGetFdInfoKHR: VkSemaphoreGetFdInfoKHRConstructor;

  
  
  /**
   * 
   */
  interface VkImportSemaphoreFdInfoKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    semaphore: VkSemaphore | null;

    /**
     *
     */
    flags: VkSemaphoreImportFlagBits;

    /**
     *
     */
    handleType: VkExternalSemaphoreHandleTypeFlagBits;

    /**
     *
     */
    fd: number;

  }

  interface VkImportSemaphoreFdInfoKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    semaphore?: VkSemaphore | null;

    /**
     *
     */
    flags?: VkSemaphoreImportFlagBits;

    /**
     *
     */
    handleType?: VkExternalSemaphoreHandleTypeFlagBits;

    /**
     *
     */
    fd?: number;
  }

  interface VkImportSemaphoreFdInfoKHRConstructor {
    readonly prototype: VkImportSemaphoreFdInfoKHR;
    new(param?: VkImportSemaphoreFdInfoKHRInitializer | null): VkImportSemaphoreFdInfoKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkImportSemaphoreFdInfoKHR: VkImportSemaphoreFdInfoKHRConstructor;

  
  
  /**
   * 
   */
  interface VkSemaphoreGetWin32HandleInfoKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    semaphore: VkSemaphore | null;

    /**
     *
     */
    handleType: VkExternalSemaphoreHandleTypeFlagBits;

  }

  interface VkSemaphoreGetWin32HandleInfoKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    semaphore?: VkSemaphore | null;

    /**
     *
     */
    handleType?: VkExternalSemaphoreHandleTypeFlagBits;
  }

  interface VkSemaphoreGetWin32HandleInfoKHRConstructor {
    readonly prototype: VkSemaphoreGetWin32HandleInfoKHR;
    new(param?: VkSemaphoreGetWin32HandleInfoKHRInitializer | null): VkSemaphoreGetWin32HandleInfoKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkSemaphoreGetWin32HandleInfoKHR: VkSemaphoreGetWin32HandleInfoKHRConstructor;

  
  
  /**
   * 
   */
  interface VkD3D12FenceSubmitInfoKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    waitSemaphoreValuesCount: number;

    /**
     *
     */
    pWaitSemaphoreValues: BigUint64Array | null;

    /**
     *
     */
    signalSemaphoreValuesCount: number;

    /**
     *
     */
    pSignalSemaphoreValues: BigUint64Array | null;

  }

  interface VkD3D12FenceSubmitInfoKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    waitSemaphoreValuesCount?: number;

    /**
     *
     */
    pWaitSemaphoreValues?: BigUint64Array | null;

    /**
     *
     */
    signalSemaphoreValuesCount?: number;

    /**
     *
     */
    pSignalSemaphoreValues?: BigUint64Array | null;
  }

  interface VkD3D12FenceSubmitInfoKHRConstructor {
    readonly prototype: VkD3D12FenceSubmitInfoKHR;
    new(param?: VkD3D12FenceSubmitInfoKHRInitializer | null): VkD3D12FenceSubmitInfoKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkD3D12FenceSubmitInfoKHR: VkD3D12FenceSubmitInfoKHRConstructor;

  
  
  /**
   * 
   */
  interface VkExportSemaphoreWin32HandleInfoKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    pAttributes: null;

    /**
     *
     */
    dwAccess: null;

    /**
     *
     */
    name: string | null;

  }

  interface VkExportSemaphoreWin32HandleInfoKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    pAttributes?: null;

    /**
     *
     */
    dwAccess?: null;

    /**
     *
     */
    name?: string | null;
  }

  interface VkExportSemaphoreWin32HandleInfoKHRConstructor {
    readonly prototype: VkExportSemaphoreWin32HandleInfoKHR;
    new(param?: VkExportSemaphoreWin32HandleInfoKHRInitializer | null): VkExportSemaphoreWin32HandleInfoKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkExportSemaphoreWin32HandleInfoKHR: VkExportSemaphoreWin32HandleInfoKHRConstructor;

  
  
  /**
   * 
   */
  interface VkImportSemaphoreWin32HandleInfoKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    semaphore: VkSemaphore | null;

    /**
     *
     */
    flags: VkSemaphoreImportFlagBits;

    /**
     *
     */
    handleType: VkExternalSemaphoreHandleTypeFlagBits;

    /**
     *
     */
    handle: bigint | number;

    /**
     *
     */
    name: string | null;

  }

  interface VkImportSemaphoreWin32HandleInfoKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    semaphore?: VkSemaphore | null;

    /**
     *
     */
    flags?: VkSemaphoreImportFlagBits;

    /**
     *
     */
    handleType?: VkExternalSemaphoreHandleTypeFlagBits;

    /**
     *
     */
    handle?: bigint | number;

    /**
     *
     */
    name?: string | null;
  }

  interface VkImportSemaphoreWin32HandleInfoKHRConstructor {
    readonly prototype: VkImportSemaphoreWin32HandleInfoKHR;
    new(param?: VkImportSemaphoreWin32HandleInfoKHRInitializer | null): VkImportSemaphoreWin32HandleInfoKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkImportSemaphoreWin32HandleInfoKHR: VkImportSemaphoreWin32HandleInfoKHRConstructor;

  
  
  /**
   * 
   */
  interface VkExportSemaphoreCreateInfoKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    handleTypes: VkExternalSemaphoreHandleTypeFlagBits;

  }

  interface VkExportSemaphoreCreateInfoKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    handleTypes?: VkExternalSemaphoreHandleTypeFlagBits;
  }

  interface VkExportSemaphoreCreateInfoKHRConstructor {
    readonly prototype: VkExportSemaphoreCreateInfoKHR;
    new(param?: VkExportSemaphoreCreateInfoKHRInitializer | null): VkExportSemaphoreCreateInfoKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkExportSemaphoreCreateInfoKHR: VkExportSemaphoreCreateInfoKHRConstructor;

  
  
  /**
   * 
   */
  interface VkExportSemaphoreCreateInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    handleTypes: VkExternalSemaphoreHandleTypeFlagBits;

  }

  interface VkExportSemaphoreCreateInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    handleTypes?: VkExternalSemaphoreHandleTypeFlagBits;
  }

  interface VkExportSemaphoreCreateInfoConstructor {
    readonly prototype: VkExportSemaphoreCreateInfo;
    new(param?: VkExportSemaphoreCreateInfoInitializer | null): VkExportSemaphoreCreateInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkExportSemaphoreCreateInfo: VkExportSemaphoreCreateInfoConstructor;

  
  
  /**
   * 
   */
  interface VkExternalSemaphorePropertiesKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly exportFromImportedHandleTypes: VkExternalSemaphoreHandleTypeFlagBits;

    /**
     *
     */
    readonly compatibleHandleTypes: VkExternalSemaphoreHandleTypeFlagBits;

    /**
     *
     */
    readonly externalSemaphoreFeatures: VkExternalSemaphoreFeatureFlagBits;

  }

  interface VkExternalSemaphorePropertiesKHRInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly exportFromImportedHandleTypes?: VkExternalSemaphoreHandleTypeFlagBits;

    /**
     *
     */
    readonly compatibleHandleTypes?: VkExternalSemaphoreHandleTypeFlagBits;

    /**
     *
     */
    readonly externalSemaphoreFeatures?: VkExternalSemaphoreFeatureFlagBits;
  }

  interface VkExternalSemaphorePropertiesKHRConstructor {
    readonly prototype: VkExternalSemaphorePropertiesKHR;
    new(param?: VkExternalSemaphorePropertiesKHRInitializer | null): VkExternalSemaphorePropertiesKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkExternalSemaphorePropertiesKHR: VkExternalSemaphorePropertiesKHRConstructor;

  
  
  /**
   * 
   */
  interface VkExternalSemaphoreProperties {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly exportFromImportedHandleTypes: VkExternalSemaphoreHandleTypeFlagBits;

    /**
     *
     */
    readonly compatibleHandleTypes: VkExternalSemaphoreHandleTypeFlagBits;

    /**
     *
     */
    readonly externalSemaphoreFeatures: VkExternalSemaphoreFeatureFlagBits;

  }

  interface VkExternalSemaphorePropertiesInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly exportFromImportedHandleTypes?: VkExternalSemaphoreHandleTypeFlagBits;

    /**
     *
     */
    readonly compatibleHandleTypes?: VkExternalSemaphoreHandleTypeFlagBits;

    /**
     *
     */
    readonly externalSemaphoreFeatures?: VkExternalSemaphoreFeatureFlagBits;
  }

  interface VkExternalSemaphorePropertiesConstructor {
    readonly prototype: VkExternalSemaphoreProperties;
    new(param?: VkExternalSemaphorePropertiesInitializer | null): VkExternalSemaphoreProperties;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkExternalSemaphoreProperties: VkExternalSemaphorePropertiesConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceExternalSemaphoreInfoKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    handleType: VkExternalSemaphoreHandleTypeFlagBits;

  }

  interface VkPhysicalDeviceExternalSemaphoreInfoKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    handleType?: VkExternalSemaphoreHandleTypeFlagBits;
  }

  interface VkPhysicalDeviceExternalSemaphoreInfoKHRConstructor {
    readonly prototype: VkPhysicalDeviceExternalSemaphoreInfoKHR;
    new(param?: VkPhysicalDeviceExternalSemaphoreInfoKHRInitializer | null): VkPhysicalDeviceExternalSemaphoreInfoKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceExternalSemaphoreInfoKHR: VkPhysicalDeviceExternalSemaphoreInfoKHRConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceExternalSemaphoreInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    handleType: VkExternalSemaphoreHandleTypeFlagBits;

  }

  interface VkPhysicalDeviceExternalSemaphoreInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    handleType?: VkExternalSemaphoreHandleTypeFlagBits;
  }

  interface VkPhysicalDeviceExternalSemaphoreInfoConstructor {
    readonly prototype: VkPhysicalDeviceExternalSemaphoreInfo;
    new(param?: VkPhysicalDeviceExternalSemaphoreInfoInitializer | null): VkPhysicalDeviceExternalSemaphoreInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceExternalSemaphoreInfo: VkPhysicalDeviceExternalSemaphoreInfoConstructor;

  
  
  /**
   * 
   */
  interface VkWin32KeyedMutexAcquireReleaseInfoKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    acquireCount: number;

    /**
     *
     */
    pAcquireSyncs: VkDeviceMemory[] | null;

    /**
     *
     */
    pAcquireKeys: BigUint64Array | null;

    /**
     *
     */
    pAcquireTimeouts: Uint32Array | null;

    /**
     *
     */
    releaseCount: number;

    /**
     *
     */
    pReleaseSyncs: VkDeviceMemory[] | null;

    /**
     *
     */
    pReleaseKeys: BigUint64Array | null;

  }

  interface VkWin32KeyedMutexAcquireReleaseInfoKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    acquireCount?: number;

    /**
     *
     */
    pAcquireSyncs?: VkDeviceMemory[] | null;

    /**
     *
     */
    pAcquireKeys?: BigUint64Array | null;

    /**
     *
     */
    pAcquireTimeouts?: Uint32Array | null;

    /**
     *
     */
    releaseCount?: number;

    /**
     *
     */
    pReleaseSyncs?: VkDeviceMemory[] | null;

    /**
     *
     */
    pReleaseKeys?: BigUint64Array | null;
  }

  interface VkWin32KeyedMutexAcquireReleaseInfoKHRConstructor {
    readonly prototype: VkWin32KeyedMutexAcquireReleaseInfoKHR;
    new(param?: VkWin32KeyedMutexAcquireReleaseInfoKHRInitializer | null): VkWin32KeyedMutexAcquireReleaseInfoKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkWin32KeyedMutexAcquireReleaseInfoKHR: VkWin32KeyedMutexAcquireReleaseInfoKHRConstructor;

  
  
  /**
   * 
   */
  interface VkMemoryGetFdInfoKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    memory: VkDeviceMemory | null;

    /**
     *
     */
    handleType: VkExternalMemoryHandleTypeFlagBits;

  }

  interface VkMemoryGetFdInfoKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    memory?: VkDeviceMemory | null;

    /**
     *
     */
    handleType?: VkExternalMemoryHandleTypeFlagBits;
  }

  interface VkMemoryGetFdInfoKHRConstructor {
    readonly prototype: VkMemoryGetFdInfoKHR;
    new(param?: VkMemoryGetFdInfoKHRInitializer | null): VkMemoryGetFdInfoKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkMemoryGetFdInfoKHR: VkMemoryGetFdInfoKHRConstructor;

  
  
  /**
   * 
   */
  interface VkMemoryFdPropertiesKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly memoryTypeBits: number;

  }

  interface VkMemoryFdPropertiesKHRInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly memoryTypeBits?: number;
  }

  interface VkMemoryFdPropertiesKHRConstructor {
    readonly prototype: VkMemoryFdPropertiesKHR;
    new(param?: VkMemoryFdPropertiesKHRInitializer | null): VkMemoryFdPropertiesKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkMemoryFdPropertiesKHR: VkMemoryFdPropertiesKHRConstructor;

  
  
  /**
   * 
   */
  interface VkImportMemoryFdInfoKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    handleType: VkExternalMemoryHandleTypeFlagBits;

    /**
     *
     */
    fd: number;

  }

  interface VkImportMemoryFdInfoKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    handleType?: VkExternalMemoryHandleTypeFlagBits;

    /**
     *
     */
    fd?: number;
  }

  interface VkImportMemoryFdInfoKHRConstructor {
    readonly prototype: VkImportMemoryFdInfoKHR;
    new(param?: VkImportMemoryFdInfoKHRInitializer | null): VkImportMemoryFdInfoKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkImportMemoryFdInfoKHR: VkImportMemoryFdInfoKHRConstructor;

  
  
  /**
   * 
   */
  interface VkMemoryGetWin32HandleInfoKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    memory: VkDeviceMemory | null;

    /**
     *
     */
    handleType: VkExternalMemoryHandleTypeFlagBits;

  }

  interface VkMemoryGetWin32HandleInfoKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    memory?: VkDeviceMemory | null;

    /**
     *
     */
    handleType?: VkExternalMemoryHandleTypeFlagBits;
  }

  interface VkMemoryGetWin32HandleInfoKHRConstructor {
    readonly prototype: VkMemoryGetWin32HandleInfoKHR;
    new(param?: VkMemoryGetWin32HandleInfoKHRInitializer | null): VkMemoryGetWin32HandleInfoKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkMemoryGetWin32HandleInfoKHR: VkMemoryGetWin32HandleInfoKHRConstructor;

  
  
  /**
   * 
   */
  interface VkMemoryWin32HandlePropertiesKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly memoryTypeBits: number;

  }

  interface VkMemoryWin32HandlePropertiesKHRInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly memoryTypeBits?: number;
  }

  interface VkMemoryWin32HandlePropertiesKHRConstructor {
    readonly prototype: VkMemoryWin32HandlePropertiesKHR;
    new(param?: VkMemoryWin32HandlePropertiesKHRInitializer | null): VkMemoryWin32HandlePropertiesKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkMemoryWin32HandlePropertiesKHR: VkMemoryWin32HandlePropertiesKHRConstructor;

  
  
  /**
   * 
   */
  interface VkExportMemoryWin32HandleInfoKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    pAttributes: null;

    /**
     *
     */
    dwAccess: null;

    /**
     *
     */
    name: string | null;

  }

  interface VkExportMemoryWin32HandleInfoKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    pAttributes?: null;

    /**
     *
     */
    dwAccess?: null;

    /**
     *
     */
    name?: string | null;
  }

  interface VkExportMemoryWin32HandleInfoKHRConstructor {
    readonly prototype: VkExportMemoryWin32HandleInfoKHR;
    new(param?: VkExportMemoryWin32HandleInfoKHRInitializer | null): VkExportMemoryWin32HandleInfoKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkExportMemoryWin32HandleInfoKHR: VkExportMemoryWin32HandleInfoKHRConstructor;

  
  
  /**
   * 
   */
  interface VkImportMemoryWin32HandleInfoKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    handleType: VkExternalMemoryHandleTypeFlagBits;

    /**
     *
     */
    handle: bigint | number;

    /**
     *
     */
    name: string | null;

  }

  interface VkImportMemoryWin32HandleInfoKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    handleType?: VkExternalMemoryHandleTypeFlagBits;

    /**
     *
     */
    handle?: bigint | number;

    /**
     *
     */
    name?: string | null;
  }

  interface VkImportMemoryWin32HandleInfoKHRConstructor {
    readonly prototype: VkImportMemoryWin32HandleInfoKHR;
    new(param?: VkImportMemoryWin32HandleInfoKHRInitializer | null): VkImportMemoryWin32HandleInfoKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkImportMemoryWin32HandleInfoKHR: VkImportMemoryWin32HandleInfoKHRConstructor;

  
  
  /**
   * 
   */
  interface VkExportMemoryAllocateInfoKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    handleTypes: VkExternalMemoryHandleTypeFlagBits;

  }

  interface VkExportMemoryAllocateInfoKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    handleTypes?: VkExternalMemoryHandleTypeFlagBits;
  }

  interface VkExportMemoryAllocateInfoKHRConstructor {
    readonly prototype: VkExportMemoryAllocateInfoKHR;
    new(param?: VkExportMemoryAllocateInfoKHRInitializer | null): VkExportMemoryAllocateInfoKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkExportMemoryAllocateInfoKHR: VkExportMemoryAllocateInfoKHRConstructor;

  
  
  /**
   * 
   */
  interface VkExportMemoryAllocateInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    handleTypes: VkExternalMemoryHandleTypeFlagBits;

  }

  interface VkExportMemoryAllocateInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    handleTypes?: VkExternalMemoryHandleTypeFlagBits;
  }

  interface VkExportMemoryAllocateInfoConstructor {
    readonly prototype: VkExportMemoryAllocateInfo;
    new(param?: VkExportMemoryAllocateInfoInitializer | null): VkExportMemoryAllocateInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkExportMemoryAllocateInfo: VkExportMemoryAllocateInfoConstructor;

  
  
  /**
   * 
   */
  interface VkExternalMemoryBufferCreateInfoKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    handleTypes: VkExternalMemoryHandleTypeFlagBits;

  }

  interface VkExternalMemoryBufferCreateInfoKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    handleTypes?: VkExternalMemoryHandleTypeFlagBits;
  }

  interface VkExternalMemoryBufferCreateInfoKHRConstructor {
    readonly prototype: VkExternalMemoryBufferCreateInfoKHR;
    new(param?: VkExternalMemoryBufferCreateInfoKHRInitializer | null): VkExternalMemoryBufferCreateInfoKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkExternalMemoryBufferCreateInfoKHR: VkExternalMemoryBufferCreateInfoKHRConstructor;

  
  
  /**
   * 
   */
  interface VkExternalMemoryBufferCreateInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    handleTypes: VkExternalMemoryHandleTypeFlagBits;

  }

  interface VkExternalMemoryBufferCreateInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    handleTypes?: VkExternalMemoryHandleTypeFlagBits;
  }

  interface VkExternalMemoryBufferCreateInfoConstructor {
    readonly prototype: VkExternalMemoryBufferCreateInfo;
    new(param?: VkExternalMemoryBufferCreateInfoInitializer | null): VkExternalMemoryBufferCreateInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkExternalMemoryBufferCreateInfo: VkExternalMemoryBufferCreateInfoConstructor;

  
  
  /**
   * 
   */
  interface VkExternalMemoryImageCreateInfoKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    handleTypes: VkExternalMemoryHandleTypeFlagBits;

  }

  interface VkExternalMemoryImageCreateInfoKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    handleTypes?: VkExternalMemoryHandleTypeFlagBits;
  }

  interface VkExternalMemoryImageCreateInfoKHRConstructor {
    readonly prototype: VkExternalMemoryImageCreateInfoKHR;
    new(param?: VkExternalMemoryImageCreateInfoKHRInitializer | null): VkExternalMemoryImageCreateInfoKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkExternalMemoryImageCreateInfoKHR: VkExternalMemoryImageCreateInfoKHRConstructor;

  
  
  /**
   * 
   */
  interface VkExternalMemoryImageCreateInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    handleTypes: VkExternalMemoryHandleTypeFlagBits;

  }

  interface VkExternalMemoryImageCreateInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    handleTypes?: VkExternalMemoryHandleTypeFlagBits;
  }

  interface VkExternalMemoryImageCreateInfoConstructor {
    readonly prototype: VkExternalMemoryImageCreateInfo;
    new(param?: VkExternalMemoryImageCreateInfoInitializer | null): VkExternalMemoryImageCreateInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkExternalMemoryImageCreateInfo: VkExternalMemoryImageCreateInfoConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceIDPropertiesKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly deviceUUID: number[] | null;

    /**
     *
     */
    readonly driverUUID: number[] | null;

    /**
     *
     */
    readonly deviceLUID: number[] | null;

    /**
     *
     */
    readonly deviceNodeMask: number;

    /**
     *
     */
    readonly deviceLUIDValid: boolean;

  }

  interface VkPhysicalDeviceIDPropertiesKHRInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly deviceUUID?: number[] | null;

    /**
     *
     */
    readonly driverUUID?: number[] | null;

    /**
     *
     */
    readonly deviceLUID?: number[] | null;

    /**
     *
     */
    readonly deviceNodeMask?: number;

    /**
     *
     */
    readonly deviceLUIDValid?: boolean;
  }

  interface VkPhysicalDeviceIDPropertiesKHRConstructor {
    readonly prototype: VkPhysicalDeviceIDPropertiesKHR;
    new(param?: VkPhysicalDeviceIDPropertiesKHRInitializer | null): VkPhysicalDeviceIDPropertiesKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceIDPropertiesKHR: VkPhysicalDeviceIDPropertiesKHRConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceIDProperties {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly deviceUUID: number[] | null;

    /**
     *
     */
    readonly driverUUID: number[] | null;

    /**
     *
     */
    readonly deviceLUID: number[] | null;

    /**
     *
     */
    readonly deviceNodeMask: number;

    /**
     *
     */
    readonly deviceLUIDValid: boolean;

  }

  interface VkPhysicalDeviceIDPropertiesInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly deviceUUID?: number[] | null;

    /**
     *
     */
    readonly driverUUID?: number[] | null;

    /**
     *
     */
    readonly deviceLUID?: number[] | null;

    /**
     *
     */
    readonly deviceNodeMask?: number;

    /**
     *
     */
    readonly deviceLUIDValid?: boolean;
  }

  interface VkPhysicalDeviceIDPropertiesConstructor {
    readonly prototype: VkPhysicalDeviceIDProperties;
    new(param?: VkPhysicalDeviceIDPropertiesInitializer | null): VkPhysicalDeviceIDProperties;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceIDProperties: VkPhysicalDeviceIDPropertiesConstructor;

  
  
  /**
   * 
   */
  interface VkExternalBufferPropertiesKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly externalMemoryProperties: VkExternalMemoryProperties | null;

  }

  interface VkExternalBufferPropertiesKHRInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly externalMemoryProperties?: VkExternalMemoryProperties | null;
  }

  interface VkExternalBufferPropertiesKHRConstructor {
    readonly prototype: VkExternalBufferPropertiesKHR;
    new(param?: VkExternalBufferPropertiesKHRInitializer | null): VkExternalBufferPropertiesKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkExternalBufferPropertiesKHR: VkExternalBufferPropertiesKHRConstructor;

  
  
  /**
   * 
   */
  interface VkExternalBufferProperties {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly externalMemoryProperties: VkExternalMemoryProperties | null;

  }

  interface VkExternalBufferPropertiesInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly externalMemoryProperties?: VkExternalMemoryProperties | null;
  }

  interface VkExternalBufferPropertiesConstructor {
    readonly prototype: VkExternalBufferProperties;
    new(param?: VkExternalBufferPropertiesInitializer | null): VkExternalBufferProperties;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkExternalBufferProperties: VkExternalBufferPropertiesConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceExternalBufferInfoKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkBufferCreateFlagBits;

    /**
     *
     */
    usage: VkBufferUsageFlagBits;

    /**
     *
     */
    handleType: VkExternalMemoryHandleTypeFlagBits;

  }

  interface VkPhysicalDeviceExternalBufferInfoKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkBufferCreateFlagBits;

    /**
     *
     */
    usage?: VkBufferUsageFlagBits;

    /**
     *
     */
    handleType?: VkExternalMemoryHandleTypeFlagBits;
  }

  interface VkPhysicalDeviceExternalBufferInfoKHRConstructor {
    readonly prototype: VkPhysicalDeviceExternalBufferInfoKHR;
    new(param?: VkPhysicalDeviceExternalBufferInfoKHRInitializer | null): VkPhysicalDeviceExternalBufferInfoKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceExternalBufferInfoKHR: VkPhysicalDeviceExternalBufferInfoKHRConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceExternalBufferInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkBufferCreateFlagBits;

    /**
     *
     */
    usage: VkBufferUsageFlagBits;

    /**
     *
     */
    handleType: VkExternalMemoryHandleTypeFlagBits;

  }

  interface VkPhysicalDeviceExternalBufferInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkBufferCreateFlagBits;

    /**
     *
     */
    usage?: VkBufferUsageFlagBits;

    /**
     *
     */
    handleType?: VkExternalMemoryHandleTypeFlagBits;
  }

  interface VkPhysicalDeviceExternalBufferInfoConstructor {
    readonly prototype: VkPhysicalDeviceExternalBufferInfo;
    new(param?: VkPhysicalDeviceExternalBufferInfoInitializer | null): VkPhysicalDeviceExternalBufferInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceExternalBufferInfo: VkPhysicalDeviceExternalBufferInfoConstructor;

  
  
  /**
   * 
   */
  interface VkExternalImageFormatPropertiesKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly externalMemoryProperties: VkExternalMemoryProperties | null;

  }

  interface VkExternalImageFormatPropertiesKHRInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly externalMemoryProperties?: VkExternalMemoryProperties | null;
  }

  interface VkExternalImageFormatPropertiesKHRConstructor {
    readonly prototype: VkExternalImageFormatPropertiesKHR;
    new(param?: VkExternalImageFormatPropertiesKHRInitializer | null): VkExternalImageFormatPropertiesKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkExternalImageFormatPropertiesKHR: VkExternalImageFormatPropertiesKHRConstructor;

  
  
  /**
   * 
   */
  interface VkExternalImageFormatProperties {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly externalMemoryProperties: VkExternalMemoryProperties | null;

  }

  interface VkExternalImageFormatPropertiesInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly externalMemoryProperties?: VkExternalMemoryProperties | null;
  }

  interface VkExternalImageFormatPropertiesConstructor {
    readonly prototype: VkExternalImageFormatProperties;
    new(param?: VkExternalImageFormatPropertiesInitializer | null): VkExternalImageFormatProperties;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkExternalImageFormatProperties: VkExternalImageFormatPropertiesConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceExternalImageFormatInfoKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    handleType: VkExternalMemoryHandleTypeFlagBits;

  }

  interface VkPhysicalDeviceExternalImageFormatInfoKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    handleType?: VkExternalMemoryHandleTypeFlagBits;
  }

  interface VkPhysicalDeviceExternalImageFormatInfoKHRConstructor {
    readonly prototype: VkPhysicalDeviceExternalImageFormatInfoKHR;
    new(param?: VkPhysicalDeviceExternalImageFormatInfoKHRInitializer | null): VkPhysicalDeviceExternalImageFormatInfoKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceExternalImageFormatInfoKHR: VkPhysicalDeviceExternalImageFormatInfoKHRConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceExternalImageFormatInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    handleType: VkExternalMemoryHandleTypeFlagBits;

  }

  interface VkPhysicalDeviceExternalImageFormatInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    handleType?: VkExternalMemoryHandleTypeFlagBits;
  }

  interface VkPhysicalDeviceExternalImageFormatInfoConstructor {
    readonly prototype: VkPhysicalDeviceExternalImageFormatInfo;
    new(param?: VkPhysicalDeviceExternalImageFormatInfoInitializer | null): VkPhysicalDeviceExternalImageFormatInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceExternalImageFormatInfo: VkPhysicalDeviceExternalImageFormatInfoConstructor;

  
  
  /**
   * 
   */
  interface VkExternalMemoryPropertiesKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly externalMemoryFeatures: VkExternalMemoryFeatureFlagBits;

    /**
     *
     */
    readonly exportFromImportedHandleTypes: VkExternalMemoryHandleTypeFlagBits;

    /**
     *
     */
    readonly compatibleHandleTypes: VkExternalMemoryHandleTypeFlagBits;

  }

  interface VkExternalMemoryPropertiesKHRInitializer {
    
    /**
     *
     */
    readonly externalMemoryFeatures?: VkExternalMemoryFeatureFlagBits;

    /**
     *
     */
    readonly exportFromImportedHandleTypes?: VkExternalMemoryHandleTypeFlagBits;

    /**
     *
     */
    readonly compatibleHandleTypes?: VkExternalMemoryHandleTypeFlagBits;
  }

  interface VkExternalMemoryPropertiesKHRConstructor {
    readonly prototype: VkExternalMemoryPropertiesKHR;
    new(param?: VkExternalMemoryPropertiesKHRInitializer | null): VkExternalMemoryPropertiesKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkExternalMemoryPropertiesKHR: VkExternalMemoryPropertiesKHRConstructor;

  
  
  /**
   * 
   */
  interface VkExternalMemoryProperties {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly externalMemoryFeatures: VkExternalMemoryFeatureFlagBits;

    /**
     *
     */
    readonly exportFromImportedHandleTypes: VkExternalMemoryHandleTypeFlagBits;

    /**
     *
     */
    readonly compatibleHandleTypes: VkExternalMemoryHandleTypeFlagBits;

  }

  interface VkExternalMemoryPropertiesInitializer {
    
    /**
     *
     */
    readonly externalMemoryFeatures?: VkExternalMemoryFeatureFlagBits;

    /**
     *
     */
    readonly exportFromImportedHandleTypes?: VkExternalMemoryHandleTypeFlagBits;

    /**
     *
     */
    readonly compatibleHandleTypes?: VkExternalMemoryHandleTypeFlagBits;
  }

  interface VkExternalMemoryPropertiesConstructor {
    readonly prototype: VkExternalMemoryProperties;
    new(param?: VkExternalMemoryPropertiesInitializer | null): VkExternalMemoryProperties;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkExternalMemoryProperties: VkExternalMemoryPropertiesConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceVariablePointerFeatures {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    variablePointersStorageBuffer: boolean;

    /**
     *
     */
    variablePointers: boolean;

  }

  interface VkPhysicalDeviceVariablePointerFeaturesInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    variablePointersStorageBuffer?: boolean;

    /**
     *
     */
    variablePointers?: boolean;
  }

  interface VkPhysicalDeviceVariablePointerFeaturesConstructor {
    readonly prototype: VkPhysicalDeviceVariablePointerFeatures;
    new(param?: VkPhysicalDeviceVariablePointerFeaturesInitializer | null): VkPhysicalDeviceVariablePointerFeatures;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceVariablePointerFeatures: VkPhysicalDeviceVariablePointerFeaturesConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceVariablePointerFeaturesKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    variablePointersStorageBuffer: boolean;

    /**
     *
     */
    variablePointers: boolean;

  }

  interface VkPhysicalDeviceVariablePointerFeaturesKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    variablePointersStorageBuffer?: boolean;

    /**
     *
     */
    variablePointers?: boolean;
  }

  interface VkPhysicalDeviceVariablePointerFeaturesKHRConstructor {
    readonly prototype: VkPhysicalDeviceVariablePointerFeaturesKHR;
    new(param?: VkPhysicalDeviceVariablePointerFeaturesKHRInitializer | null): VkPhysicalDeviceVariablePointerFeaturesKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceVariablePointerFeaturesKHR: VkPhysicalDeviceVariablePointerFeaturesKHRConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceVariablePointersFeaturesKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    variablePointersStorageBuffer: boolean;

    /**
     *
     */
    variablePointers: boolean;

  }

  interface VkPhysicalDeviceVariablePointersFeaturesKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    variablePointersStorageBuffer?: boolean;

    /**
     *
     */
    variablePointers?: boolean;
  }

  interface VkPhysicalDeviceVariablePointersFeaturesKHRConstructor {
    readonly prototype: VkPhysicalDeviceVariablePointersFeaturesKHR;
    new(param?: VkPhysicalDeviceVariablePointersFeaturesKHRInitializer | null): VkPhysicalDeviceVariablePointersFeaturesKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceVariablePointersFeaturesKHR: VkPhysicalDeviceVariablePointersFeaturesKHRConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceVariablePointersFeatures {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    variablePointersStorageBuffer: boolean;

    /**
     *
     */
    variablePointers: boolean;

  }

  interface VkPhysicalDeviceVariablePointersFeaturesInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    variablePointersStorageBuffer?: boolean;

    /**
     *
     */
    variablePointers?: boolean;
  }

  interface VkPhysicalDeviceVariablePointersFeaturesConstructor {
    readonly prototype: VkPhysicalDeviceVariablePointersFeatures;
    new(param?: VkPhysicalDeviceVariablePointersFeaturesInitializer | null): VkPhysicalDeviceVariablePointersFeatures;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceVariablePointersFeatures: VkPhysicalDeviceVariablePointersFeaturesConstructor;

  
  
  /**
   * 
   */
  interface VkRectLayerKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    offset: VkOffset2D | null;

    /**
     *
     */
    extent: VkExtent2D | null;

    /**
     *
     */
    layer: number;

  }

  interface VkRectLayerKHRInitializer {
    
    /**
     *
     */
    offset?: VkOffset2D | null;

    /**
     *
     */
    extent?: VkExtent2D | null;

    /**
     *
     */
    layer?: number;
  }

  interface VkRectLayerKHRConstructor {
    readonly prototype: VkRectLayerKHR;
    new(param?: VkRectLayerKHRInitializer | null): VkRectLayerKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkRectLayerKHR: VkRectLayerKHRConstructor;

  
  
  /**
   * 
   */
  interface VkPresentRegionKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    rectangleCount: number;

    /**
     *
     */
    pRectangles: VkRectLayerKHR[] | null;

  }

  interface VkPresentRegionKHRInitializer {
    
    /**
     *
     */
    rectangleCount?: number;

    /**
     *
     */
    pRectangles?: VkRectLayerKHR[] | null;
  }

  interface VkPresentRegionKHRConstructor {
    readonly prototype: VkPresentRegionKHR;
    new(param?: VkPresentRegionKHRInitializer | null): VkPresentRegionKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPresentRegionKHR: VkPresentRegionKHRConstructor;

  
  
  /**
   * 
   */
  interface VkPresentRegionsKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    swapchainCount: number;

    /**
     *
     */
    pRegions: VkPresentRegionKHR[] | null;

  }

  interface VkPresentRegionsKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    swapchainCount?: number;

    /**
     *
     */
    pRegions?: VkPresentRegionKHR[] | null;
  }

  interface VkPresentRegionsKHRConstructor {
    readonly prototype: VkPresentRegionsKHR;
    new(param?: VkPresentRegionsKHRInitializer | null): VkPresentRegionsKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPresentRegionsKHR: VkPresentRegionsKHRConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceDriverPropertiesKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly driverID: VkDriverIdKHR;

    /**
     *
     */
    readonly driverName: string | null;

    /**
     *
     */
    readonly driverInfo: string | null;

    /**
     *
     */
    readonly conformanceVersion: VkConformanceVersionKHR | null;

  }

  interface VkPhysicalDeviceDriverPropertiesKHRInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly driverID?: VkDriverIdKHR;

    /**
     *
     */
    readonly driverName?: string | null;

    /**
     *
     */
    readonly driverInfo?: string | null;

    /**
     *
     */
    readonly conformanceVersion?: VkConformanceVersionKHR | null;
  }

  interface VkPhysicalDeviceDriverPropertiesKHRConstructor {
    readonly prototype: VkPhysicalDeviceDriverPropertiesKHR;
    new(param?: VkPhysicalDeviceDriverPropertiesKHRInitializer | null): VkPhysicalDeviceDriverPropertiesKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceDriverPropertiesKHR: VkPhysicalDeviceDriverPropertiesKHRConstructor;

  
  
  /**
   * 
   */
  interface VkConformanceVersionKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    major: number;

    /**
     *
     */
    minor: number;

    /**
     *
     */
    subminor: number;

    /**
     *
     */
    patch: number;

  }

  interface VkConformanceVersionKHRInitializer {
    
    /**
     *
     */
    major?: number;

    /**
     *
     */
    minor?: number;

    /**
     *
     */
    subminor?: number;

    /**
     *
     */
    patch?: number;
  }

  interface VkConformanceVersionKHRConstructor {
    readonly prototype: VkConformanceVersionKHR;
    new(param?: VkConformanceVersionKHRInitializer | null): VkConformanceVersionKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkConformanceVersionKHR: VkConformanceVersionKHRConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDevicePushDescriptorPropertiesKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly maxPushDescriptors: number;

  }

  interface VkPhysicalDevicePushDescriptorPropertiesKHRInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly maxPushDescriptors?: number;
  }

  interface VkPhysicalDevicePushDescriptorPropertiesKHRConstructor {
    readonly prototype: VkPhysicalDevicePushDescriptorPropertiesKHR;
    new(param?: VkPhysicalDevicePushDescriptorPropertiesKHRInitializer | null): VkPhysicalDevicePushDescriptorPropertiesKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDevicePushDescriptorPropertiesKHR: VkPhysicalDevicePushDescriptorPropertiesKHRConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceSparseImageFormatInfo2KHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    format: VkFormat;

    /**
     *
     */
    type: VkImageType;

    /**
     *
     */
    samples: VkSampleCountFlagBits;

    /**
     *
     */
    usage: VkImageUsageFlagBits;

    /**
     *
     */
    tiling: VkImageTiling;

  }

  interface VkPhysicalDeviceSparseImageFormatInfo2KHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    format?: VkFormat;

    /**
     *
     */
    type?: VkImageType;

    /**
     *
     */
    samples?: VkSampleCountFlagBits;

    /**
     *
     */
    usage?: VkImageUsageFlagBits;

    /**
     *
     */
    tiling?: VkImageTiling;
  }

  interface VkPhysicalDeviceSparseImageFormatInfo2KHRConstructor {
    readonly prototype: VkPhysicalDeviceSparseImageFormatInfo2KHR;
    new(param?: VkPhysicalDeviceSparseImageFormatInfo2KHRInitializer | null): VkPhysicalDeviceSparseImageFormatInfo2KHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceSparseImageFormatInfo2KHR: VkPhysicalDeviceSparseImageFormatInfo2KHRConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceSparseImageFormatInfo2 {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    format: VkFormat;

    /**
     *
     */
    type: VkImageType;

    /**
     *
     */
    samples: VkSampleCountFlagBits;

    /**
     *
     */
    usage: VkImageUsageFlagBits;

    /**
     *
     */
    tiling: VkImageTiling;

  }

  interface VkPhysicalDeviceSparseImageFormatInfo2Initializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    format?: VkFormat;

    /**
     *
     */
    type?: VkImageType;

    /**
     *
     */
    samples?: VkSampleCountFlagBits;

    /**
     *
     */
    usage?: VkImageUsageFlagBits;

    /**
     *
     */
    tiling?: VkImageTiling;
  }

  interface VkPhysicalDeviceSparseImageFormatInfo2Constructor {
    readonly prototype: VkPhysicalDeviceSparseImageFormatInfo2;
    new(param?: VkPhysicalDeviceSparseImageFormatInfo2Initializer | null): VkPhysicalDeviceSparseImageFormatInfo2;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceSparseImageFormatInfo2: VkPhysicalDeviceSparseImageFormatInfo2Constructor;

  
  
  /**
   * 
   */
  interface VkSparseImageFormatProperties2KHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly properties: VkSparseImageFormatProperties | null;

  }

  interface VkSparseImageFormatProperties2KHRInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly properties?: VkSparseImageFormatProperties | null;
  }

  interface VkSparseImageFormatProperties2KHRConstructor {
    readonly prototype: VkSparseImageFormatProperties2KHR;
    new(param?: VkSparseImageFormatProperties2KHRInitializer | null): VkSparseImageFormatProperties2KHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkSparseImageFormatProperties2KHR: VkSparseImageFormatProperties2KHRConstructor;

  
  
  /**
   * 
   */
  interface VkSparseImageFormatProperties2 {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly properties: VkSparseImageFormatProperties | null;

  }

  interface VkSparseImageFormatProperties2Initializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly properties?: VkSparseImageFormatProperties | null;
  }

  interface VkSparseImageFormatProperties2Constructor {
    readonly prototype: VkSparseImageFormatProperties2;
    new(param?: VkSparseImageFormatProperties2Initializer | null): VkSparseImageFormatProperties2;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkSparseImageFormatProperties2: VkSparseImageFormatProperties2Constructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceMemoryProperties2KHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly memoryProperties: VkPhysicalDeviceMemoryProperties | null;

  }

  interface VkPhysicalDeviceMemoryProperties2KHRInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly memoryProperties?: VkPhysicalDeviceMemoryProperties | null;
  }

  interface VkPhysicalDeviceMemoryProperties2KHRConstructor {
    readonly prototype: VkPhysicalDeviceMemoryProperties2KHR;
    new(param?: VkPhysicalDeviceMemoryProperties2KHRInitializer | null): VkPhysicalDeviceMemoryProperties2KHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceMemoryProperties2KHR: VkPhysicalDeviceMemoryProperties2KHRConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceMemoryProperties2 {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly memoryProperties: VkPhysicalDeviceMemoryProperties | null;

  }

  interface VkPhysicalDeviceMemoryProperties2Initializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly memoryProperties?: VkPhysicalDeviceMemoryProperties | null;
  }

  interface VkPhysicalDeviceMemoryProperties2Constructor {
    readonly prototype: VkPhysicalDeviceMemoryProperties2;
    new(param?: VkPhysicalDeviceMemoryProperties2Initializer | null): VkPhysicalDeviceMemoryProperties2;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceMemoryProperties2: VkPhysicalDeviceMemoryProperties2Constructor;

  
  
  /**
   * 
   */
  interface VkQueueFamilyProperties2KHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly queueFamilyProperties: VkQueueFamilyProperties | null;

  }

  interface VkQueueFamilyProperties2KHRInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly queueFamilyProperties?: VkQueueFamilyProperties | null;
  }

  interface VkQueueFamilyProperties2KHRConstructor {
    readonly prototype: VkQueueFamilyProperties2KHR;
    new(param?: VkQueueFamilyProperties2KHRInitializer | null): VkQueueFamilyProperties2KHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkQueueFamilyProperties2KHR: VkQueueFamilyProperties2KHRConstructor;

  
  
  /**
   * 
   */
  interface VkQueueFamilyProperties2 {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly queueFamilyProperties: VkQueueFamilyProperties | null;

  }

  interface VkQueueFamilyProperties2Initializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly queueFamilyProperties?: VkQueueFamilyProperties | null;
  }

  interface VkQueueFamilyProperties2Constructor {
    readonly prototype: VkQueueFamilyProperties2;
    new(param?: VkQueueFamilyProperties2Initializer | null): VkQueueFamilyProperties2;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkQueueFamilyProperties2: VkQueueFamilyProperties2Constructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceImageFormatInfo2KHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    format: VkFormat;

    /**
     *
     */
    type: VkImageType;

    /**
     *
     */
    tiling: VkImageTiling;

    /**
     *
     */
    usage: VkImageUsageFlagBits;

    /**
     *
     */
    flags: VkImageCreateFlagBits;

  }

  interface VkPhysicalDeviceImageFormatInfo2KHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    format?: VkFormat;

    /**
     *
     */
    type?: VkImageType;

    /**
     *
     */
    tiling?: VkImageTiling;

    /**
     *
     */
    usage?: VkImageUsageFlagBits;

    /**
     *
     */
    flags?: VkImageCreateFlagBits;
  }

  interface VkPhysicalDeviceImageFormatInfo2KHRConstructor {
    readonly prototype: VkPhysicalDeviceImageFormatInfo2KHR;
    new(param?: VkPhysicalDeviceImageFormatInfo2KHRInitializer | null): VkPhysicalDeviceImageFormatInfo2KHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceImageFormatInfo2KHR: VkPhysicalDeviceImageFormatInfo2KHRConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceImageFormatInfo2 {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    format: VkFormat;

    /**
     *
     */
    type: VkImageType;

    /**
     *
     */
    tiling: VkImageTiling;

    /**
     *
     */
    usage: VkImageUsageFlagBits;

    /**
     *
     */
    flags: VkImageCreateFlagBits;

  }

  interface VkPhysicalDeviceImageFormatInfo2Initializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    format?: VkFormat;

    /**
     *
     */
    type?: VkImageType;

    /**
     *
     */
    tiling?: VkImageTiling;

    /**
     *
     */
    usage?: VkImageUsageFlagBits;

    /**
     *
     */
    flags?: VkImageCreateFlagBits;
  }

  interface VkPhysicalDeviceImageFormatInfo2Constructor {
    readonly prototype: VkPhysicalDeviceImageFormatInfo2;
    new(param?: VkPhysicalDeviceImageFormatInfo2Initializer | null): VkPhysicalDeviceImageFormatInfo2;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceImageFormatInfo2: VkPhysicalDeviceImageFormatInfo2Constructor;

  
  
  /**
   * 
   */
  interface VkImageFormatProperties2KHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly imageFormatProperties: VkImageFormatProperties | null;

  }

  interface VkImageFormatProperties2KHRInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly imageFormatProperties?: VkImageFormatProperties | null;
  }

  interface VkImageFormatProperties2KHRConstructor {
    readonly prototype: VkImageFormatProperties2KHR;
    new(param?: VkImageFormatProperties2KHRInitializer | null): VkImageFormatProperties2KHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkImageFormatProperties2KHR: VkImageFormatProperties2KHRConstructor;

  
  
  /**
   * 
   */
  interface VkImageFormatProperties2 {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly imageFormatProperties: VkImageFormatProperties | null;

  }

  interface VkImageFormatProperties2Initializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly imageFormatProperties?: VkImageFormatProperties | null;
  }

  interface VkImageFormatProperties2Constructor {
    readonly prototype: VkImageFormatProperties2;
    new(param?: VkImageFormatProperties2Initializer | null): VkImageFormatProperties2;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkImageFormatProperties2: VkImageFormatProperties2Constructor;

  
  
  /**
   * 
   */
  interface VkFormatProperties2KHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly formatProperties: VkFormatProperties | null;

  }

  interface VkFormatProperties2KHRInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly formatProperties?: VkFormatProperties | null;
  }

  interface VkFormatProperties2KHRConstructor {
    readonly prototype: VkFormatProperties2KHR;
    new(param?: VkFormatProperties2KHRInitializer | null): VkFormatProperties2KHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkFormatProperties2KHR: VkFormatProperties2KHRConstructor;

  
  
  /**
   * 
   */
  interface VkFormatProperties2 {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly formatProperties: VkFormatProperties | null;

  }

  interface VkFormatProperties2Initializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly formatProperties?: VkFormatProperties | null;
  }

  interface VkFormatProperties2Constructor {
    readonly prototype: VkFormatProperties2;
    new(param?: VkFormatProperties2Initializer | null): VkFormatProperties2;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkFormatProperties2: VkFormatProperties2Constructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceProperties2KHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly properties: VkPhysicalDeviceProperties | null;

  }

  interface VkPhysicalDeviceProperties2KHRInitializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly properties?: VkPhysicalDeviceProperties | null;
  }

  interface VkPhysicalDeviceProperties2KHRConstructor {
    readonly prototype: VkPhysicalDeviceProperties2KHR;
    new(param?: VkPhysicalDeviceProperties2KHRInitializer | null): VkPhysicalDeviceProperties2KHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceProperties2KHR: VkPhysicalDeviceProperties2KHRConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceProperties2 {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly sType: VkStructureType;

    /**
     *
     */
    readonly pNext: null;

    /**
     *
     */
    readonly properties: VkPhysicalDeviceProperties | null;

  }

  interface VkPhysicalDeviceProperties2Initializer {
    
    /**
     *
     */
    readonly sType?: VkStructureType;

    /**
     *
     */
    readonly pNext?: null;

    /**
     *
     */
    readonly properties?: VkPhysicalDeviceProperties | null;
  }

  interface VkPhysicalDeviceProperties2Constructor {
    readonly prototype: VkPhysicalDeviceProperties2;
    new(param?: VkPhysicalDeviceProperties2Initializer | null): VkPhysicalDeviceProperties2;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceProperties2: VkPhysicalDeviceProperties2Constructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceFeatures2KHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    features: VkPhysicalDeviceFeatures | null;

  }

  interface VkPhysicalDeviceFeatures2KHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    features?: VkPhysicalDeviceFeatures | null;
  }

  interface VkPhysicalDeviceFeatures2KHRConstructor {
    readonly prototype: VkPhysicalDeviceFeatures2KHR;
    new(param?: VkPhysicalDeviceFeatures2KHRInitializer | null): VkPhysicalDeviceFeatures2KHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceFeatures2KHR: VkPhysicalDeviceFeatures2KHRConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceFeatures2 {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    features: VkPhysicalDeviceFeatures | null;

  }

  interface VkPhysicalDeviceFeatures2Initializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    features?: VkPhysicalDeviceFeatures | null;
  }

  interface VkPhysicalDeviceFeatures2Constructor {
    readonly prototype: VkPhysicalDeviceFeatures2;
    new(param?: VkPhysicalDeviceFeatures2Initializer | null): VkPhysicalDeviceFeatures2;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceFeatures2: VkPhysicalDeviceFeatures2Constructor;

  
  
  /**
   * 
   */
  interface VkObjectTablePushConstantEntryNVX {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    type: VkObjectEntryTypeNVX;

    /**
     *
     */
    flags: VkObjectEntryUsageFlagBitsNVX;

    /**
     *
     */
    pipelineLayout: VkPipelineLayout | null;

    /**
     *
     */
    stageFlags: VkShaderStageFlagBits;

  }

  interface VkObjectTablePushConstantEntryNVXInitializer {
    
    /**
     *
     */
    type?: VkObjectEntryTypeNVX;

    /**
     *
     */
    flags?: VkObjectEntryUsageFlagBitsNVX;

    /**
     *
     */
    pipelineLayout?: VkPipelineLayout | null;

    /**
     *
     */
    stageFlags?: VkShaderStageFlagBits;
  }

  interface VkObjectTablePushConstantEntryNVXConstructor {
    readonly prototype: VkObjectTablePushConstantEntryNVX;
    new(param?: VkObjectTablePushConstantEntryNVXInitializer | null): VkObjectTablePushConstantEntryNVX;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkObjectTablePushConstantEntryNVX: VkObjectTablePushConstantEntryNVXConstructor;

  
  
  /**
   * 
   */
  interface VkObjectTableIndexBufferEntryNVX {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    type: VkObjectEntryTypeNVX;

    /**
     *
     */
    flags: VkObjectEntryUsageFlagBitsNVX;

    /**
     *
     */
    buffer: VkBuffer | null;

    /**
     *
     */
    indexType: VkIndexType;

  }

  interface VkObjectTableIndexBufferEntryNVXInitializer {
    
    /**
     *
     */
    type?: VkObjectEntryTypeNVX;

    /**
     *
     */
    flags?: VkObjectEntryUsageFlagBitsNVX;

    /**
     *
     */
    buffer?: VkBuffer | null;

    /**
     *
     */
    indexType?: VkIndexType;
  }

  interface VkObjectTableIndexBufferEntryNVXConstructor {
    readonly prototype: VkObjectTableIndexBufferEntryNVX;
    new(param?: VkObjectTableIndexBufferEntryNVXInitializer | null): VkObjectTableIndexBufferEntryNVX;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkObjectTableIndexBufferEntryNVX: VkObjectTableIndexBufferEntryNVXConstructor;

  
  
  /**
   * 
   */
  interface VkObjectTableVertexBufferEntryNVX {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    type: VkObjectEntryTypeNVX;

    /**
     *
     */
    flags: VkObjectEntryUsageFlagBitsNVX;

    /**
     *
     */
    buffer: VkBuffer | null;

  }

  interface VkObjectTableVertexBufferEntryNVXInitializer {
    
    /**
     *
     */
    type?: VkObjectEntryTypeNVX;

    /**
     *
     */
    flags?: VkObjectEntryUsageFlagBitsNVX;

    /**
     *
     */
    buffer?: VkBuffer | null;
  }

  interface VkObjectTableVertexBufferEntryNVXConstructor {
    readonly prototype: VkObjectTableVertexBufferEntryNVX;
    new(param?: VkObjectTableVertexBufferEntryNVXInitializer | null): VkObjectTableVertexBufferEntryNVX;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkObjectTableVertexBufferEntryNVX: VkObjectTableVertexBufferEntryNVXConstructor;

  
  
  /**
   * 
   */
  interface VkObjectTableDescriptorSetEntryNVX {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    type: VkObjectEntryTypeNVX;

    /**
     *
     */
    flags: VkObjectEntryUsageFlagBitsNVX;

    /**
     *
     */
    pipelineLayout: VkPipelineLayout | null;

    /**
     *
     */
    descriptorSet: VkDescriptorSet | null;

  }

  interface VkObjectTableDescriptorSetEntryNVXInitializer {
    
    /**
     *
     */
    type?: VkObjectEntryTypeNVX;

    /**
     *
     */
    flags?: VkObjectEntryUsageFlagBitsNVX;

    /**
     *
     */
    pipelineLayout?: VkPipelineLayout | null;

    /**
     *
     */
    descriptorSet?: VkDescriptorSet | null;
  }

  interface VkObjectTableDescriptorSetEntryNVXConstructor {
    readonly prototype: VkObjectTableDescriptorSetEntryNVX;
    new(param?: VkObjectTableDescriptorSetEntryNVXInitializer | null): VkObjectTableDescriptorSetEntryNVX;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkObjectTableDescriptorSetEntryNVX: VkObjectTableDescriptorSetEntryNVXConstructor;

  
  
  /**
   * 
   */
  interface VkObjectTablePipelineEntryNVX {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    type: VkObjectEntryTypeNVX;

    /**
     *
     */
    flags: VkObjectEntryUsageFlagBitsNVX;

    /**
     *
     */
    pipeline: VkPipeline | null;

  }

  interface VkObjectTablePipelineEntryNVXInitializer {
    
    /**
     *
     */
    type?: VkObjectEntryTypeNVX;

    /**
     *
     */
    flags?: VkObjectEntryUsageFlagBitsNVX;

    /**
     *
     */
    pipeline?: VkPipeline | null;
  }

  interface VkObjectTablePipelineEntryNVXConstructor {
    readonly prototype: VkObjectTablePipelineEntryNVX;
    new(param?: VkObjectTablePipelineEntryNVXInitializer | null): VkObjectTablePipelineEntryNVX;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkObjectTablePipelineEntryNVX: VkObjectTablePipelineEntryNVXConstructor;

  
  
  /**
   * 
   */
  interface VkObjectTableEntryNVX {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    type: VkObjectEntryTypeNVX;

    /**
     *
     */
    flags: VkObjectEntryUsageFlagBitsNVX;

  }

  interface VkObjectTableEntryNVXInitializer {
    
    /**
     *
     */
    type?: VkObjectEntryTypeNVX;

    /**
     *
     */
    flags?: VkObjectEntryUsageFlagBitsNVX;
  }

  interface VkObjectTableEntryNVXConstructor {
    readonly prototype: VkObjectTableEntryNVX;
    new(param?: VkObjectTableEntryNVXInitializer | null): VkObjectTableEntryNVX;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkObjectTableEntryNVX: VkObjectTableEntryNVXConstructor;

  
  
  /**
   * 
   */
  interface VkObjectTableCreateInfoNVX {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    objectCount: number;

    /**
     *
     */
    pObjectEntryTypes: Int32Array | null;

    /**
     *
     */
    pObjectEntryCounts: Uint32Array | null;

    /**
     *
     */
    pObjectEntryUsageFlags: Int32Array | null;

    /**
     *
     */
    maxUniformBuffersPerDescriptor: number;

    /**
     *
     */
    maxStorageBuffersPerDescriptor: number;

    /**
     *
     */
    maxStorageImagesPerDescriptor: number;

    /**
     *
     */
    maxSampledImagesPerDescriptor: number;

    /**
     *
     */
    maxPipelineLayouts: number;

  }

  interface VkObjectTableCreateInfoNVXInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    objectCount?: number;

    /**
     *
     */
    pObjectEntryTypes?: Int32Array | null;

    /**
     *
     */
    pObjectEntryCounts?: Uint32Array | null;

    /**
     *
     */
    pObjectEntryUsageFlags?: Int32Array | null;

    /**
     *
     */
    maxUniformBuffersPerDescriptor?: number;

    /**
     *
     */
    maxStorageBuffersPerDescriptor?: number;

    /**
     *
     */
    maxStorageImagesPerDescriptor?: number;

    /**
     *
     */
    maxSampledImagesPerDescriptor?: number;

    /**
     *
     */
    maxPipelineLayouts?: number;
  }

  interface VkObjectTableCreateInfoNVXConstructor {
    readonly prototype: VkObjectTableCreateInfoNVX;
    new(param?: VkObjectTableCreateInfoNVXInitializer | null): VkObjectTableCreateInfoNVX;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkObjectTableCreateInfoNVX: VkObjectTableCreateInfoNVXConstructor;

  
  
  /**
   * 
   */
  interface VkCmdReserveSpaceForCommandsInfoNVX {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    objectTable: VkObjectTableNVX | null;

    /**
     *
     */
    indirectCommandsLayout: VkIndirectCommandsLayoutNVX | null;

    /**
     *
     */
    maxSequencesCount: number;

  }

  interface VkCmdReserveSpaceForCommandsInfoNVXInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    objectTable?: VkObjectTableNVX | null;

    /**
     *
     */
    indirectCommandsLayout?: VkIndirectCommandsLayoutNVX | null;

    /**
     *
     */
    maxSequencesCount?: number;
  }

  interface VkCmdReserveSpaceForCommandsInfoNVXConstructor {
    readonly prototype: VkCmdReserveSpaceForCommandsInfoNVX;
    new(param?: VkCmdReserveSpaceForCommandsInfoNVXInitializer | null): VkCmdReserveSpaceForCommandsInfoNVX;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkCmdReserveSpaceForCommandsInfoNVX: VkCmdReserveSpaceForCommandsInfoNVXConstructor;

  
  
  /**
   * 
   */
  interface VkCmdProcessCommandsInfoNVX {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    objectTable: VkObjectTableNVX | null;

    /**
     *
     */
    indirectCommandsLayout: VkIndirectCommandsLayoutNVX | null;

    /**
     *
     */
    indirectCommandsTokenCount: number;

    /**
     *
     */
    pIndirectCommandsTokens: VkIndirectCommandsTokenNVX[] | null;

    /**
     *
     */
    maxSequencesCount: number;

    /**
     *
     */
    targetCommandBuffer: VkCommandBuffer | null;

    /**
     *
     */
    sequencesCountBuffer: VkBuffer | null;

    /**
     *
     */
    sequencesCountOffset: bigint | number;

    /**
     *
     */
    sequencesIndexBuffer: VkBuffer | null;

    /**
     *
     */
    sequencesIndexOffset: bigint | number;

  }

  interface VkCmdProcessCommandsInfoNVXInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    objectTable?: VkObjectTableNVX | null;

    /**
     *
     */
    indirectCommandsLayout?: VkIndirectCommandsLayoutNVX | null;

    /**
     *
     */
    indirectCommandsTokenCount?: number;

    /**
     *
     */
    pIndirectCommandsTokens?: VkIndirectCommandsTokenNVX[] | null;

    /**
     *
     */
    maxSequencesCount?: number;

    /**
     *
     */
    targetCommandBuffer?: VkCommandBuffer | null;

    /**
     *
     */
    sequencesCountBuffer?: VkBuffer | null;

    /**
     *
     */
    sequencesCountOffset?: bigint | number;

    /**
     *
     */
    sequencesIndexBuffer?: VkBuffer | null;

    /**
     *
     */
    sequencesIndexOffset?: bigint | number;
  }

  interface VkCmdProcessCommandsInfoNVXConstructor {
    readonly prototype: VkCmdProcessCommandsInfoNVX;
    new(param?: VkCmdProcessCommandsInfoNVXInitializer | null): VkCmdProcessCommandsInfoNVX;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkCmdProcessCommandsInfoNVX: VkCmdProcessCommandsInfoNVXConstructor;

  
  
  /**
   * 
   */
  interface VkIndirectCommandsLayoutCreateInfoNVX {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    pipelineBindPoint: VkPipelineBindPoint;

    /**
     *
     */
    flags: VkIndirectCommandsLayoutUsageFlagBitsNVX;

    /**
     *
     */
    tokenCount: number;

    /**
     *
     */
    pTokens: VkIndirectCommandsLayoutTokenNVX[] | null;

  }

  interface VkIndirectCommandsLayoutCreateInfoNVXInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    pipelineBindPoint?: VkPipelineBindPoint;

    /**
     *
     */
    flags?: VkIndirectCommandsLayoutUsageFlagBitsNVX;

    /**
     *
     */
    tokenCount?: number;

    /**
     *
     */
    pTokens?: VkIndirectCommandsLayoutTokenNVX[] | null;
  }

  interface VkIndirectCommandsLayoutCreateInfoNVXConstructor {
    readonly prototype: VkIndirectCommandsLayoutCreateInfoNVX;
    new(param?: VkIndirectCommandsLayoutCreateInfoNVXInitializer | null): VkIndirectCommandsLayoutCreateInfoNVX;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkIndirectCommandsLayoutCreateInfoNVX: VkIndirectCommandsLayoutCreateInfoNVXConstructor;

  
  
  /**
   * 
   */
  interface VkIndirectCommandsLayoutTokenNVX {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    tokenType: VkIndirectCommandsTokenTypeNVX;

    /**
     *
     */
    bindingUnit: number;

    /**
     *
     */
    dynamicCount: number;

    /**
     *
     */
    divisor: number;

  }

  interface VkIndirectCommandsLayoutTokenNVXInitializer {
    
    /**
     *
     */
    tokenType?: VkIndirectCommandsTokenTypeNVX;

    /**
     *
     */
    bindingUnit?: number;

    /**
     *
     */
    dynamicCount?: number;

    /**
     *
     */
    divisor?: number;
  }

  interface VkIndirectCommandsLayoutTokenNVXConstructor {
    readonly prototype: VkIndirectCommandsLayoutTokenNVX;
    new(param?: VkIndirectCommandsLayoutTokenNVXInitializer | null): VkIndirectCommandsLayoutTokenNVX;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkIndirectCommandsLayoutTokenNVX: VkIndirectCommandsLayoutTokenNVXConstructor;

  
  
  /**
   * 
   */
  interface VkIndirectCommandsTokenNVX {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    tokenType: VkIndirectCommandsTokenTypeNVX;

    /**
     *
     */
    buffer: VkBuffer | null;

    /**
     *
     */
    offset: bigint | number;

  }

  interface VkIndirectCommandsTokenNVXInitializer {
    
    /**
     *
     */
    tokenType?: VkIndirectCommandsTokenTypeNVX;

    /**
     *
     */
    buffer?: VkBuffer | null;

    /**
     *
     */
    offset?: bigint | number;
  }

  interface VkIndirectCommandsTokenNVXConstructor {
    readonly prototype: VkIndirectCommandsTokenNVX;
    new(param?: VkIndirectCommandsTokenNVXInitializer | null): VkIndirectCommandsTokenNVX;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkIndirectCommandsTokenNVX: VkIndirectCommandsTokenNVXConstructor;

  
  
  /**
   * 
   */
  interface VkDeviceGeneratedCommandsLimitsNVX {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    maxIndirectCommandsLayoutTokenCount: number;

    /**
     *
     */
    maxObjectEntryCounts: number;

    /**
     *
     */
    minSequenceCountBufferOffsetAlignment: number;

    /**
     *
     */
    minSequenceIndexBufferOffsetAlignment: number;

    /**
     *
     */
    minCommandsTokenBufferOffsetAlignment: number;

  }

  interface VkDeviceGeneratedCommandsLimitsNVXInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    maxIndirectCommandsLayoutTokenCount?: number;

    /**
     *
     */
    maxObjectEntryCounts?: number;

    /**
     *
     */
    minSequenceCountBufferOffsetAlignment?: number;

    /**
     *
     */
    minSequenceIndexBufferOffsetAlignment?: number;

    /**
     *
     */
    minCommandsTokenBufferOffsetAlignment?: number;
  }

  interface VkDeviceGeneratedCommandsLimitsNVXConstructor {
    readonly prototype: VkDeviceGeneratedCommandsLimitsNVX;
    new(param?: VkDeviceGeneratedCommandsLimitsNVXInitializer | null): VkDeviceGeneratedCommandsLimitsNVX;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDeviceGeneratedCommandsLimitsNVX: VkDeviceGeneratedCommandsLimitsNVXConstructor;

  
  
  /**
   * 
   */
  interface VkDeviceGeneratedCommandsFeaturesNVX {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    computeBindingPointSupport: boolean;

  }

  interface VkDeviceGeneratedCommandsFeaturesNVXInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    computeBindingPointSupport?: boolean;
  }

  interface VkDeviceGeneratedCommandsFeaturesNVXConstructor {
    readonly prototype: VkDeviceGeneratedCommandsFeaturesNVX;
    new(param?: VkDeviceGeneratedCommandsFeaturesNVXInitializer | null): VkDeviceGeneratedCommandsFeaturesNVX;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDeviceGeneratedCommandsFeaturesNVX: VkDeviceGeneratedCommandsFeaturesNVXConstructor;

  
  
  /**
   * 
   */
  interface VkWin32KeyedMutexAcquireReleaseInfoNV {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    acquireCount: number;

    /**
     *
     */
    pAcquireSyncs: VkDeviceMemory[] | null;

    /**
     *
     */
    pAcquireKeys: BigUint64Array | null;

    /**
     *
     */
    pAcquireTimeoutMilliseconds: Uint32Array | null;

    /**
     *
     */
    releaseCount: number;

    /**
     *
     */
    pReleaseSyncs: VkDeviceMemory[] | null;

    /**
     *
     */
    pReleaseKeys: BigUint64Array | null;

  }

  interface VkWin32KeyedMutexAcquireReleaseInfoNVInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    acquireCount?: number;

    /**
     *
     */
    pAcquireSyncs?: VkDeviceMemory[] | null;

    /**
     *
     */
    pAcquireKeys?: BigUint64Array | null;

    /**
     *
     */
    pAcquireTimeoutMilliseconds?: Uint32Array | null;

    /**
     *
     */
    releaseCount?: number;

    /**
     *
     */
    pReleaseSyncs?: VkDeviceMemory[] | null;

    /**
     *
     */
    pReleaseKeys?: BigUint64Array | null;
  }

  interface VkWin32KeyedMutexAcquireReleaseInfoNVConstructor {
    readonly prototype: VkWin32KeyedMutexAcquireReleaseInfoNV;
    new(param?: VkWin32KeyedMutexAcquireReleaseInfoNVInitializer | null): VkWin32KeyedMutexAcquireReleaseInfoNV;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkWin32KeyedMutexAcquireReleaseInfoNV: VkWin32KeyedMutexAcquireReleaseInfoNVConstructor;

  
  
  /**
   * 
   */
  interface VkExportMemoryWin32HandleInfoNV {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    pAttributes: null;

    /**
     *
     */
    dwAccess: null;

  }

  interface VkExportMemoryWin32HandleInfoNVInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    pAttributes?: null;

    /**
     *
     */
    dwAccess?: null;
  }

  interface VkExportMemoryWin32HandleInfoNVConstructor {
    readonly prototype: VkExportMemoryWin32HandleInfoNV;
    new(param?: VkExportMemoryWin32HandleInfoNVInitializer | null): VkExportMemoryWin32HandleInfoNV;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkExportMemoryWin32HandleInfoNV: VkExportMemoryWin32HandleInfoNVConstructor;

  
  
  /**
   * 
   */
  interface VkImportMemoryWin32HandleInfoNV {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    handleType: VkExternalMemoryHandleTypeFlagBitsNV;

    /**
     *
     */
    handle: bigint | number;

  }

  interface VkImportMemoryWin32HandleInfoNVInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    handleType?: VkExternalMemoryHandleTypeFlagBitsNV;

    /**
     *
     */
    handle?: bigint | number;
  }

  interface VkImportMemoryWin32HandleInfoNVConstructor {
    readonly prototype: VkImportMemoryWin32HandleInfoNV;
    new(param?: VkImportMemoryWin32HandleInfoNVInitializer | null): VkImportMemoryWin32HandleInfoNV;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkImportMemoryWin32HandleInfoNV: VkImportMemoryWin32HandleInfoNVConstructor;

  
  
  /**
   * 
   */
  interface VkExportMemoryAllocateInfoNV {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    handleTypes: VkExternalMemoryHandleTypeFlagBitsNV;

  }

  interface VkExportMemoryAllocateInfoNVInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    handleTypes?: VkExternalMemoryHandleTypeFlagBitsNV;
  }

  interface VkExportMemoryAllocateInfoNVConstructor {
    readonly prototype: VkExportMemoryAllocateInfoNV;
    new(param?: VkExportMemoryAllocateInfoNVInitializer | null): VkExportMemoryAllocateInfoNV;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkExportMemoryAllocateInfoNV: VkExportMemoryAllocateInfoNVConstructor;

  
  
  /**
   * 
   */
  interface VkExternalMemoryImageCreateInfoNV {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    handleTypes: VkExternalMemoryHandleTypeFlagBitsNV;

  }

  interface VkExternalMemoryImageCreateInfoNVInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    handleTypes?: VkExternalMemoryHandleTypeFlagBitsNV;
  }

  interface VkExternalMemoryImageCreateInfoNVConstructor {
    readonly prototype: VkExternalMemoryImageCreateInfoNV;
    new(param?: VkExternalMemoryImageCreateInfoNVInitializer | null): VkExternalMemoryImageCreateInfoNV;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkExternalMemoryImageCreateInfoNV: VkExternalMemoryImageCreateInfoNVConstructor;

  
  
  /**
   * 
   */
  interface VkExternalImageFormatPropertiesNV {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly imageFormatProperties: VkImageFormatProperties | null;

    /**
     *
     */
    readonly externalMemoryFeatures: VkExternalMemoryFeatureFlagBitsNV;

    /**
     *
     */
    readonly exportFromImportedHandleTypes: VkExternalMemoryHandleTypeFlagBitsNV;

    /**
     *
     */
    readonly compatibleHandleTypes: VkExternalMemoryHandleTypeFlagBitsNV;

  }

  interface VkExternalImageFormatPropertiesNVInitializer {
    
    /**
     *
     */
    readonly imageFormatProperties?: VkImageFormatProperties | null;

    /**
     *
     */
    readonly externalMemoryFeatures?: VkExternalMemoryFeatureFlagBitsNV;

    /**
     *
     */
    readonly exportFromImportedHandleTypes?: VkExternalMemoryHandleTypeFlagBitsNV;

    /**
     *
     */
    readonly compatibleHandleTypes?: VkExternalMemoryHandleTypeFlagBitsNV;
  }

  interface VkExternalImageFormatPropertiesNVConstructor {
    readonly prototype: VkExternalImageFormatPropertiesNV;
    new(param?: VkExternalImageFormatPropertiesNVInitializer | null): VkExternalImageFormatPropertiesNV;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkExternalImageFormatPropertiesNV: VkExternalImageFormatPropertiesNVConstructor;

  
  
  /**
   * 
   */
  interface VkDedicatedAllocationMemoryAllocateInfoNV {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    image: VkImage | null;

    /**
     *
     */
    buffer: VkBuffer | null;

  }

  interface VkDedicatedAllocationMemoryAllocateInfoNVInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    image?: VkImage | null;

    /**
     *
     */
    buffer?: VkBuffer | null;
  }

  interface VkDedicatedAllocationMemoryAllocateInfoNVConstructor {
    readonly prototype: VkDedicatedAllocationMemoryAllocateInfoNV;
    new(param?: VkDedicatedAllocationMemoryAllocateInfoNVInitializer | null): VkDedicatedAllocationMemoryAllocateInfoNV;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDedicatedAllocationMemoryAllocateInfoNV: VkDedicatedAllocationMemoryAllocateInfoNVConstructor;

  
  
  /**
   * 
   */
  interface VkDedicatedAllocationBufferCreateInfoNV {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    dedicatedAllocation: boolean;

  }

  interface VkDedicatedAllocationBufferCreateInfoNVInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    dedicatedAllocation?: boolean;
  }

  interface VkDedicatedAllocationBufferCreateInfoNVConstructor {
    readonly prototype: VkDedicatedAllocationBufferCreateInfoNV;
    new(param?: VkDedicatedAllocationBufferCreateInfoNVInitializer | null): VkDedicatedAllocationBufferCreateInfoNV;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDedicatedAllocationBufferCreateInfoNV: VkDedicatedAllocationBufferCreateInfoNVConstructor;

  
  
  /**
   * 
   */
  interface VkDedicatedAllocationImageCreateInfoNV {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    dedicatedAllocation: boolean;

  }

  interface VkDedicatedAllocationImageCreateInfoNVInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    dedicatedAllocation?: boolean;
  }

  interface VkDedicatedAllocationImageCreateInfoNVConstructor {
    readonly prototype: VkDedicatedAllocationImageCreateInfoNV;
    new(param?: VkDedicatedAllocationImageCreateInfoNVInitializer | null): VkDedicatedAllocationImageCreateInfoNV;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDedicatedAllocationImageCreateInfoNV: VkDedicatedAllocationImageCreateInfoNVConstructor;

  
  
  /**
   * 
   */
  interface VkDebugMarkerMarkerInfoEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    pMarkerName: string | null;

    /**
     *
     */
    color: number[] | null;

  }

  interface VkDebugMarkerMarkerInfoEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    pMarkerName?: string | null;

    /**
     *
     */
    color?: number[] | null;
  }

  interface VkDebugMarkerMarkerInfoEXTConstructor {
    readonly prototype: VkDebugMarkerMarkerInfoEXT;
    new(param?: VkDebugMarkerMarkerInfoEXTInitializer | null): VkDebugMarkerMarkerInfoEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDebugMarkerMarkerInfoEXT: VkDebugMarkerMarkerInfoEXTConstructor;

  
  
  /**
   * 
   */
  interface VkDebugMarkerObjectTagInfoEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    objectType: VkDebugReportObjectTypeEXT;

    /**
     *
     */
    object: bigint | number;

    /**
     *
     */
    tagName: bigint | number;

    /**
     *
     */
    tagSize: bigint | number;

    /**
     *
     */
    pTag: ArrayBuffer | null;

  }

  interface VkDebugMarkerObjectTagInfoEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    objectType?: VkDebugReportObjectTypeEXT;

    /**
     *
     */
    object?: bigint | number;

    /**
     *
     */
    tagName?: bigint | number;

    /**
     *
     */
    tagSize?: bigint | number;

    /**
     *
     */
    pTag?: ArrayBuffer | null;
  }

  interface VkDebugMarkerObjectTagInfoEXTConstructor {
    readonly prototype: VkDebugMarkerObjectTagInfoEXT;
    new(param?: VkDebugMarkerObjectTagInfoEXTInitializer | null): VkDebugMarkerObjectTagInfoEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDebugMarkerObjectTagInfoEXT: VkDebugMarkerObjectTagInfoEXTConstructor;

  
  
  /**
   * 
   */
  interface VkDebugMarkerObjectNameInfoEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    objectType: VkDebugReportObjectTypeEXT;

    /**
     *
     */
    object: bigint | number;

    /**
     *
     */
    pObjectName: string | null;

  }

  interface VkDebugMarkerObjectNameInfoEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    objectType?: VkDebugReportObjectTypeEXT;

    /**
     *
     */
    object?: bigint | number;

    /**
     *
     */
    pObjectName?: string | null;
  }

  interface VkDebugMarkerObjectNameInfoEXTConstructor {
    readonly prototype: VkDebugMarkerObjectNameInfoEXT;
    new(param?: VkDebugMarkerObjectNameInfoEXTInitializer | null): VkDebugMarkerObjectNameInfoEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDebugMarkerObjectNameInfoEXT: VkDebugMarkerObjectNameInfoEXTConstructor;

  
  
  /**
   * 
   */
  interface VkPipelineRasterizationStateRasterizationOrderAMD {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    rasterizationOrder: VkRasterizationOrderAMD;

  }

  interface VkPipelineRasterizationStateRasterizationOrderAMDInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    rasterizationOrder?: VkRasterizationOrderAMD;
  }

  interface VkPipelineRasterizationStateRasterizationOrderAMDConstructor {
    readonly prototype: VkPipelineRasterizationStateRasterizationOrderAMD;
    new(param?: VkPipelineRasterizationStateRasterizationOrderAMDInitializer | null): VkPipelineRasterizationStateRasterizationOrderAMD;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPipelineRasterizationStateRasterizationOrderAMD: VkPipelineRasterizationStateRasterizationOrderAMDConstructor;

  
  
  /**
   * 
   */
  interface VkValidationFeaturesEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    enabledValidationFeatureCount: number;

    /**
     *
     */
    pEnabledValidationFeatures: Int32Array | null;

    /**
     *
     */
    disabledValidationFeatureCount: number;

    /**
     *
     */
    pDisabledValidationFeatures: Int32Array | null;

  }

  interface VkValidationFeaturesEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    enabledValidationFeatureCount?: number;

    /**
     *
     */
    pEnabledValidationFeatures?: Int32Array | null;

    /**
     *
     */
    disabledValidationFeatureCount?: number;

    /**
     *
     */
    pDisabledValidationFeatures?: Int32Array | null;
  }

  interface VkValidationFeaturesEXTConstructor {
    readonly prototype: VkValidationFeaturesEXT;
    new(param?: VkValidationFeaturesEXTInitializer | null): VkValidationFeaturesEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkValidationFeaturesEXT: VkValidationFeaturesEXTConstructor;

  
  
  /**
   * 
   */
  interface VkValidationFlagsEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    disabledValidationCheckCount: number;

    /**
     *
     */
    pDisabledValidationChecks: Int32Array | null;

  }

  interface VkValidationFlagsEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    disabledValidationCheckCount?: number;

    /**
     *
     */
    pDisabledValidationChecks?: Int32Array | null;
  }

  interface VkValidationFlagsEXTConstructor {
    readonly prototype: VkValidationFlagsEXT;
    new(param?: VkValidationFlagsEXTInitializer | null): VkValidationFlagsEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkValidationFlagsEXT: VkValidationFlagsEXTConstructor;

  
  
  /**
   * 
   */
  interface VkDebugReportCallbackCreateInfoEXT {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkDebugReportFlagBitsEXT;

    /**
     *
     */
    pfnCallback: null;

    /**
     *
     */
    pUserData: ArrayBuffer | null;

  }

  interface VkDebugReportCallbackCreateInfoEXTInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkDebugReportFlagBitsEXT;

    /**
     *
     */
    pfnCallback?: null;

    /**
     *
     */
    pUserData?: ArrayBuffer | null;
  }

  interface VkDebugReportCallbackCreateInfoEXTConstructor {
    readonly prototype: VkDebugReportCallbackCreateInfoEXT;
    new(param?: VkDebugReportCallbackCreateInfoEXTInitializer | null): VkDebugReportCallbackCreateInfoEXT;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDebugReportCallbackCreateInfoEXT: VkDebugReportCallbackCreateInfoEXTConstructor;

  
  
  /**
   * 
   */
  interface VkPresentInfoKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    waitSemaphoreCount: number;

    /**
     *
     */
    pWaitSemaphores: VkSemaphore[] | null;

    /**
     *
     */
    swapchainCount: number;

    /**
     *
     */
    pSwapchains: VkSwapchainKHR[] | null;

    /**
     *
     */
    pImageIndices: Uint32Array | null;

    /**
     *
     */
    pResults: Int32Array | null;

  }

  interface VkPresentInfoKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    waitSemaphoreCount?: number;

    /**
     *
     */
    pWaitSemaphores?: VkSemaphore[] | null;

    /**
     *
     */
    swapchainCount?: number;

    /**
     *
     */
    pSwapchains?: VkSwapchainKHR[] | null;

    /**
     *
     */
    pImageIndices?: Uint32Array | null;

    /**
     *
     */
    pResults?: Int32Array | null;
  }

  interface VkPresentInfoKHRConstructor {
    readonly prototype: VkPresentInfoKHR;
    new(param?: VkPresentInfoKHRInitializer | null): VkPresentInfoKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPresentInfoKHR: VkPresentInfoKHRConstructor;

  
  
  /**
   * 
   */
  interface VkSwapchainCreateInfoKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkSwapchainCreateFlagBitsKHR;

    /**
     *
     */
    surface: VkSurfaceKHR | null;

    /**
     *
     */
    minImageCount: number;

    /**
     *
     */
    imageFormat: VkFormat;

    /**
     *
     */
    imageColorSpace: VkColorSpaceKHR;

    /**
     *
     */
    imageExtent: VkExtent2D | null;

    /**
     *
     */
    imageArrayLayers: number;

    /**
     *
     */
    imageUsage: VkImageUsageFlagBits;

    /**
     *
     */
    imageSharingMode: VkSharingMode;

    /**
     *
     */
    queueFamilyIndexCount: number;

    /**
     *
     */
    pQueueFamilyIndices: Uint32Array | null;

    /**
     *
     */
    preTransform: VkSurfaceTransformFlagBitsKHR;

    /**
     *
     */
    compositeAlpha: VkCompositeAlphaFlagBitsKHR;

    /**
     *
     */
    presentMode: VkPresentModeKHR;

    /**
     *
     */
    clipped: boolean;

    /**
     *
     */
    oldSwapchain: VkSwapchainKHR | null;

  }

  interface VkSwapchainCreateInfoKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkSwapchainCreateFlagBitsKHR;

    /**
     *
     */
    surface?: VkSurfaceKHR | null;

    /**
     *
     */
    minImageCount?: number;

    /**
     *
     */
    imageFormat?: VkFormat;

    /**
     *
     */
    imageColorSpace?: VkColorSpaceKHR;

    /**
     *
     */
    imageExtent?: VkExtent2D | null;

    /**
     *
     */
    imageArrayLayers?: number;

    /**
     *
     */
    imageUsage?: VkImageUsageFlagBits;

    /**
     *
     */
    imageSharingMode?: VkSharingMode;

    /**
     *
     */
    queueFamilyIndexCount?: number;

    /**
     *
     */
    pQueueFamilyIndices?: Uint32Array | null;

    /**
     *
     */
    preTransform?: VkSurfaceTransformFlagBitsKHR;

    /**
     *
     */
    compositeAlpha?: VkCompositeAlphaFlagBitsKHR;

    /**
     *
     */
    presentMode?: VkPresentModeKHR;

    /**
     *
     */
    clipped?: boolean;

    /**
     *
     */
    oldSwapchain?: VkSwapchainKHR | null;
  }

  interface VkSwapchainCreateInfoKHRConstructor {
    readonly prototype: VkSwapchainCreateInfoKHR;
    new(param?: VkSwapchainCreateInfoKHRInitializer | null): VkSwapchainCreateInfoKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkSwapchainCreateInfoKHR: VkSwapchainCreateInfoKHRConstructor;

  
  
  /**
   * 
   */
  interface VkSurfaceFormatKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly format: VkFormat;

    /**
     *
     */
    readonly colorSpace: VkColorSpaceKHR;

  }

  interface VkSurfaceFormatKHRInitializer {
    
    /**
     *
     */
    readonly format?: VkFormat;

    /**
     *
     */
    readonly colorSpace?: VkColorSpaceKHR;
  }

  interface VkSurfaceFormatKHRConstructor {
    readonly prototype: VkSurfaceFormatKHR;
    new(param?: VkSurfaceFormatKHRInitializer | null): VkSurfaceFormatKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkSurfaceFormatKHR: VkSurfaceFormatKHRConstructor;

  
  
  /**
   * 
   */
  interface VkWin32SurfaceCreateInfoKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

    /**
     *
     */
    hinstance: bigint | number;

    /**
     *
     */
    hwnd: bigint | number;

  }

  interface VkWin32SurfaceCreateInfoKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;

    /**
     *
     */
    hinstance?: bigint | number;

    /**
     *
     */
    hwnd?: bigint | number;
  }

  interface VkWin32SurfaceCreateInfoKHRConstructor {
    readonly prototype: VkWin32SurfaceCreateInfoKHR;
    new(param?: VkWin32SurfaceCreateInfoKHRInitializer | null): VkWin32SurfaceCreateInfoKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkWin32SurfaceCreateInfoKHR: VkWin32SurfaceCreateInfoKHRConstructor;

  
  
  /**
   * 
   */
  interface VkSurfaceCapabilitiesKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly minImageCount: number;

    /**
     *
     */
    readonly maxImageCount: number;

    /**
     *
     */
    readonly currentExtent: VkExtent2D | null;

    /**
     *
     */
    readonly minImageExtent: VkExtent2D | null;

    /**
     *
     */
    readonly maxImageExtent: VkExtent2D | null;

    /**
     *
     */
    readonly maxImageArrayLayers: number;

    /**
     *
     */
    readonly supportedTransforms: VkSurfaceTransformFlagBitsKHR;

    /**
     *
     */
    readonly currentTransform: VkSurfaceTransformFlagBitsKHR;

    /**
     *
     */
    readonly supportedCompositeAlpha: VkCompositeAlphaFlagBitsKHR;

    /**
     *
     */
    readonly supportedUsageFlags: VkImageUsageFlagBits;

  }

  interface VkSurfaceCapabilitiesKHRInitializer {
    
    /**
     *
     */
    readonly minImageCount?: number;

    /**
     *
     */
    readonly maxImageCount?: number;

    /**
     *
     */
    readonly currentExtent?: VkExtent2D | null;

    /**
     *
     */
    readonly minImageExtent?: VkExtent2D | null;

    /**
     *
     */
    readonly maxImageExtent?: VkExtent2D | null;

    /**
     *
     */
    readonly maxImageArrayLayers?: number;

    /**
     *
     */
    readonly supportedTransforms?: VkSurfaceTransformFlagBitsKHR;

    /**
     *
     */
    readonly currentTransform?: VkSurfaceTransformFlagBitsKHR;

    /**
     *
     */
    readonly supportedCompositeAlpha?: VkCompositeAlphaFlagBitsKHR;

    /**
     *
     */
    readonly supportedUsageFlags?: VkImageUsageFlagBits;
  }

  interface VkSurfaceCapabilitiesKHRConstructor {
    readonly prototype: VkSurfaceCapabilitiesKHR;
    new(param?: VkSurfaceCapabilitiesKHRInitializer | null): VkSurfaceCapabilitiesKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkSurfaceCapabilitiesKHR: VkSurfaceCapabilitiesKHRConstructor;

  
  
  /**
   * 
   */
  interface VkDisplayPresentInfoKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    srcRect: VkRect2D | null;

    /**
     *
     */
    dstRect: VkRect2D | null;

    /**
     *
     */
    persistent: boolean;

  }

  interface VkDisplayPresentInfoKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    srcRect?: VkRect2D | null;

    /**
     *
     */
    dstRect?: VkRect2D | null;

    /**
     *
     */
    persistent?: boolean;
  }

  interface VkDisplayPresentInfoKHRConstructor {
    readonly prototype: VkDisplayPresentInfoKHR;
    new(param?: VkDisplayPresentInfoKHRInitializer | null): VkDisplayPresentInfoKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDisplayPresentInfoKHR: VkDisplayPresentInfoKHRConstructor;

  
  
  /**
   * 
   */
  interface VkDisplaySurfaceCreateInfoKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

    /**
     *
     */
    displayMode: VkDisplayModeKHR | null;

    /**
     *
     */
    planeIndex: number;

    /**
     *
     */
    planeStackIndex: number;

    /**
     *
     */
    transform: VkSurfaceTransformFlagBitsKHR;

    /**
     *
     */
    globalAlpha: number;

    /**
     *
     */
    alphaMode: VkDisplayPlaneAlphaFlagBitsKHR;

    /**
     *
     */
    imageExtent: VkExtent2D | null;

  }

  interface VkDisplaySurfaceCreateInfoKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;

    /**
     *
     */
    displayMode?: VkDisplayModeKHR | null;

    /**
     *
     */
    planeIndex?: number;

    /**
     *
     */
    planeStackIndex?: number;

    /**
     *
     */
    transform?: VkSurfaceTransformFlagBitsKHR;

    /**
     *
     */
    globalAlpha?: number;

    /**
     *
     */
    alphaMode?: VkDisplayPlaneAlphaFlagBitsKHR;

    /**
     *
     */
    imageExtent?: VkExtent2D | null;
  }

  interface VkDisplaySurfaceCreateInfoKHRConstructor {
    readonly prototype: VkDisplaySurfaceCreateInfoKHR;
    new(param?: VkDisplaySurfaceCreateInfoKHRInitializer | null): VkDisplaySurfaceCreateInfoKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDisplaySurfaceCreateInfoKHR: VkDisplaySurfaceCreateInfoKHRConstructor;

  
  
  /**
   * 
   */
  interface VkDisplayPlaneCapabilitiesKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly supportedAlpha: VkDisplayPlaneAlphaFlagBitsKHR;

    /**
     *
     */
    readonly minSrcPosition: VkOffset2D | null;

    /**
     *
     */
    readonly maxSrcPosition: VkOffset2D | null;

    /**
     *
     */
    readonly minSrcExtent: VkExtent2D | null;

    /**
     *
     */
    readonly maxSrcExtent: VkExtent2D | null;

    /**
     *
     */
    readonly minDstPosition: VkOffset2D | null;

    /**
     *
     */
    readonly maxDstPosition: VkOffset2D | null;

    /**
     *
     */
    readonly minDstExtent: VkExtent2D | null;

    /**
     *
     */
    readonly maxDstExtent: VkExtent2D | null;

  }

  interface VkDisplayPlaneCapabilitiesKHRInitializer {
    
    /**
     *
     */
    readonly supportedAlpha?: VkDisplayPlaneAlphaFlagBitsKHR;

    /**
     *
     */
    readonly minSrcPosition?: VkOffset2D | null;

    /**
     *
     */
    readonly maxSrcPosition?: VkOffset2D | null;

    /**
     *
     */
    readonly minSrcExtent?: VkExtent2D | null;

    /**
     *
     */
    readonly maxSrcExtent?: VkExtent2D | null;

    /**
     *
     */
    readonly minDstPosition?: VkOffset2D | null;

    /**
     *
     */
    readonly maxDstPosition?: VkOffset2D | null;

    /**
     *
     */
    readonly minDstExtent?: VkExtent2D | null;

    /**
     *
     */
    readonly maxDstExtent?: VkExtent2D | null;
  }

  interface VkDisplayPlaneCapabilitiesKHRConstructor {
    readonly prototype: VkDisplayPlaneCapabilitiesKHR;
    new(param?: VkDisplayPlaneCapabilitiesKHRInitializer | null): VkDisplayPlaneCapabilitiesKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDisplayPlaneCapabilitiesKHR: VkDisplayPlaneCapabilitiesKHRConstructor;

  
  
  /**
   * 
   */
  interface VkDisplayModeCreateInfoKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

    /**
     *
     */
    parameters: VkDisplayModeParametersKHR | null;

  }

  interface VkDisplayModeCreateInfoKHRInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;

    /**
     *
     */
    parameters?: VkDisplayModeParametersKHR | null;
  }

  interface VkDisplayModeCreateInfoKHRConstructor {
    readonly prototype: VkDisplayModeCreateInfoKHR;
    new(param?: VkDisplayModeCreateInfoKHRInitializer | null): VkDisplayModeCreateInfoKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDisplayModeCreateInfoKHR: VkDisplayModeCreateInfoKHRConstructor;

  
  
  /**
   * 
   */
  interface VkDisplayModePropertiesKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly displayMode: VkDisplayModeKHR | null;

    /**
     *
     */
    readonly parameters: VkDisplayModeParametersKHR | null;

  }

  interface VkDisplayModePropertiesKHRInitializer {
    
    /**
     *
     */
    readonly displayMode?: VkDisplayModeKHR | null;

    /**
     *
     */
    readonly parameters?: VkDisplayModeParametersKHR | null;
  }

  interface VkDisplayModePropertiesKHRConstructor {
    readonly prototype: VkDisplayModePropertiesKHR;
    new(param?: VkDisplayModePropertiesKHRInitializer | null): VkDisplayModePropertiesKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDisplayModePropertiesKHR: VkDisplayModePropertiesKHRConstructor;

  
  
  /**
   * 
   */
  interface VkDisplayModeParametersKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    visibleRegion: VkExtent2D | null;

    /**
     *
     */
    refreshRate: number;

  }

  interface VkDisplayModeParametersKHRInitializer {
    
    /**
     *
     */
    visibleRegion?: VkExtent2D | null;

    /**
     *
     */
    refreshRate?: number;
  }

  interface VkDisplayModeParametersKHRConstructor {
    readonly prototype: VkDisplayModeParametersKHR;
    new(param?: VkDisplayModeParametersKHRInitializer | null): VkDisplayModeParametersKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDisplayModeParametersKHR: VkDisplayModeParametersKHRConstructor;

  
  
  /**
   * 
   */
  interface VkDisplayPlanePropertiesKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly currentDisplay: VkDisplayKHR | null;

    /**
     *
     */
    readonly currentStackIndex: number;

  }

  interface VkDisplayPlanePropertiesKHRInitializer {
    
    /**
     *
     */
    readonly currentDisplay?: VkDisplayKHR | null;

    /**
     *
     */
    readonly currentStackIndex?: number;
  }

  interface VkDisplayPlanePropertiesKHRConstructor {
    readonly prototype: VkDisplayPlanePropertiesKHR;
    new(param?: VkDisplayPlanePropertiesKHRInitializer | null): VkDisplayPlanePropertiesKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDisplayPlanePropertiesKHR: VkDisplayPlanePropertiesKHRConstructor;

  
  
  /**
   * 
   */
  interface VkDisplayPropertiesKHR {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly display: VkDisplayKHR | null;

    /**
     *
     */
    readonly displayName: string | null;

    /**
     *
     */
    readonly physicalDimensions: VkExtent2D | null;

    /**
     *
     */
    readonly physicalResolution: VkExtent2D | null;

    /**
     *
     */
    readonly supportedTransforms: VkSurfaceTransformFlagBitsKHR;

    /**
     *
     */
    readonly planeReorderPossible: boolean;

    /**
     *
     */
    readonly persistentContent: boolean;

  }

  interface VkDisplayPropertiesKHRInitializer {
    
    /**
     *
     */
    readonly display?: VkDisplayKHR | null;

    /**
     *
     */
    readonly displayName?: string | null;

    /**
     *
     */
    readonly physicalDimensions?: VkExtent2D | null;

    /**
     *
     */
    readonly physicalResolution?: VkExtent2D | null;

    /**
     *
     */
    readonly supportedTransforms?: VkSurfaceTransformFlagBitsKHR;

    /**
     *
     */
    readonly planeReorderPossible?: boolean;

    /**
     *
     */
    readonly persistentContent?: boolean;
  }

  interface VkDisplayPropertiesKHRConstructor {
    readonly prototype: VkDisplayPropertiesKHR;
    new(param?: VkDisplayPropertiesKHRInitializer | null): VkDisplayPropertiesKHR;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDisplayPropertiesKHR: VkDisplayPropertiesKHRConstructor;

  
  
  /**
   * 
   */
  interface VkSubmitInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    waitSemaphoreCount: number;

    /**
     *
     */
    pWaitSemaphores: VkSemaphore[] | null;

    /**
     *
     */
    pWaitDstStageMask: Int32Array | null;

    /**
     *
     */
    commandBufferCount: number;

    /**
     *
     */
    pCommandBuffers: VkCommandBuffer[] | null;

    /**
     *
     */
    signalSemaphoreCount: number;

    /**
     *
     */
    pSignalSemaphores: VkSemaphore[] | null;

  }

  interface VkSubmitInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    waitSemaphoreCount?: number;

    /**
     *
     */
    pWaitSemaphores?: VkSemaphore[] | null;

    /**
     *
     */
    pWaitDstStageMask?: Int32Array | null;

    /**
     *
     */
    commandBufferCount?: number;

    /**
     *
     */
    pCommandBuffers?: VkCommandBuffer[] | null;

    /**
     *
     */
    signalSemaphoreCount?: number;

    /**
     *
     */
    pSignalSemaphores?: VkSemaphore[] | null;
  }

  interface VkSubmitInfoConstructor {
    readonly prototype: VkSubmitInfo;
    new(param?: VkSubmitInfoInitializer | null): VkSubmitInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkSubmitInfo: VkSubmitInfoConstructor;

  
  
  /**
   * 
   */
  interface VkDispatchIndirectCommand {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    x: number;

    /**
     *
     */
    y: number;

    /**
     *
     */
    z: number;

  }

  interface VkDispatchIndirectCommandInitializer {
    
    /**
     *
     */
    x?: number;

    /**
     *
     */
    y?: number;

    /**
     *
     */
    z?: number;
  }

  interface VkDispatchIndirectCommandConstructor {
    readonly prototype: VkDispatchIndirectCommand;
    new(param?: VkDispatchIndirectCommandInitializer | null): VkDispatchIndirectCommand;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDispatchIndirectCommand: VkDispatchIndirectCommandConstructor;

  
  
  /**
   * 
   */
  interface VkDrawIndexedIndirectCommand {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    indexCount: number;

    /**
     *
     */
    instanceCount: number;

    /**
     *
     */
    firstIndex: number;

    /**
     *
     */
    vertexOffset: number;

    /**
     *
     */
    firstInstance: number;

  }

  interface VkDrawIndexedIndirectCommandInitializer {
    
    /**
     *
     */
    indexCount?: number;

    /**
     *
     */
    instanceCount?: number;

    /**
     *
     */
    firstIndex?: number;

    /**
     *
     */
    vertexOffset?: number;

    /**
     *
     */
    firstInstance?: number;
  }

  interface VkDrawIndexedIndirectCommandConstructor {
    readonly prototype: VkDrawIndexedIndirectCommand;
    new(param?: VkDrawIndexedIndirectCommandInitializer | null): VkDrawIndexedIndirectCommand;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDrawIndexedIndirectCommand: VkDrawIndexedIndirectCommandConstructor;

  
  
  /**
   * 
   */
  interface VkDrawIndirectCommand {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    vertexCount: number;

    /**
     *
     */
    instanceCount: number;

    /**
     *
     */
    firstVertex: number;

    /**
     *
     */
    firstInstance: number;

  }

  interface VkDrawIndirectCommandInitializer {
    
    /**
     *
     */
    vertexCount?: number;

    /**
     *
     */
    instanceCount?: number;

    /**
     *
     */
    firstVertex?: number;

    /**
     *
     */
    firstInstance?: number;
  }

  interface VkDrawIndirectCommandConstructor {
    readonly prototype: VkDrawIndirectCommand;
    new(param?: VkDrawIndirectCommandInitializer | null): VkDrawIndirectCommand;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDrawIndirectCommand: VkDrawIndirectCommandConstructor;

  
  
  /**
   * 
   */
  interface VkFramebufferCreateInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkFramebufferCreateFlagBits;

    /**
     *
     */
    renderPass: VkRenderPass | null;

    /**
     *
     */
    attachmentCount: number;

    /**
     *
     */
    pAttachments: VkImageView[] | null;

    /**
     *
     */
    width: number;

    /**
     *
     */
    height: number;

    /**
     *
     */
    layers: number;

  }

  interface VkFramebufferCreateInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkFramebufferCreateFlagBits;

    /**
     *
     */
    renderPass?: VkRenderPass | null;

    /**
     *
     */
    attachmentCount?: number;

    /**
     *
     */
    pAttachments?: VkImageView[] | null;

    /**
     *
     */
    width?: number;

    /**
     *
     */
    height?: number;

    /**
     *
     */
    layers?: number;
  }

  interface VkFramebufferCreateInfoConstructor {
    readonly prototype: VkFramebufferCreateInfo;
    new(param?: VkFramebufferCreateInfoInitializer | null): VkFramebufferCreateInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkFramebufferCreateInfo: VkFramebufferCreateInfoConstructor;

  
  
  /**
   * 
   */
  interface VkQueryPoolCreateInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

    /**
     *
     */
    queryType: VkQueryType;

    /**
     *
     */
    queryCount: number;

    /**
     *
     */
    pipelineStatistics: VkQueryPipelineStatisticFlagBits;

  }

  interface VkQueryPoolCreateInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;

    /**
     *
     */
    queryType?: VkQueryType;

    /**
     *
     */
    queryCount?: number;

    /**
     *
     */
    pipelineStatistics?: VkQueryPipelineStatisticFlagBits;
  }

  interface VkQueryPoolCreateInfoConstructor {
    readonly prototype: VkQueryPoolCreateInfo;
    new(param?: VkQueryPoolCreateInfoInitializer | null): VkQueryPoolCreateInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkQueryPoolCreateInfo: VkQueryPoolCreateInfoConstructor;

  
  
  /**
   * 
   */
  interface VkSemaphoreCreateInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

  }

  interface VkSemaphoreCreateInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;
  }

  interface VkSemaphoreCreateInfoConstructor {
    readonly prototype: VkSemaphoreCreateInfo;
    new(param?: VkSemaphoreCreateInfoInitializer | null): VkSemaphoreCreateInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkSemaphoreCreateInfo: VkSemaphoreCreateInfoConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceLimits {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly maxImageDimension1D: number;

    /**
     *
     */
    readonly maxImageDimension2D: number;

    /**
     *
     */
    readonly maxImageDimension3D: number;

    /**
     *
     */
    readonly maxImageDimensionCube: number;

    /**
     *
     */
    readonly maxImageArrayLayers: number;

    /**
     *
     */
    readonly maxTexelBufferElements: number;

    /**
     *
     */
    readonly maxUniformBufferRange: number;

    /**
     *
     */
    readonly maxStorageBufferRange: number;

    /**
     *
     */
    readonly maxPushConstantsSize: number;

    /**
     *
     */
    readonly maxMemoryAllocationCount: number;

    /**
     *
     */
    readonly maxSamplerAllocationCount: number;

    /**
     *
     */
    readonly bufferImageGranularity: bigint | number;

    /**
     *
     */
    readonly sparseAddressSpaceSize: bigint | number;

    /**
     *
     */
    readonly maxBoundDescriptorSets: number;

    /**
     *
     */
    readonly maxPerStageDescriptorSamplers: number;

    /**
     *
     */
    readonly maxPerStageDescriptorUniformBuffers: number;

    /**
     *
     */
    readonly maxPerStageDescriptorStorageBuffers: number;

    /**
     *
     */
    readonly maxPerStageDescriptorSampledImages: number;

    /**
     *
     */
    readonly maxPerStageDescriptorStorageImages: number;

    /**
     *
     */
    readonly maxPerStageDescriptorInputAttachments: number;

    /**
     *
     */
    readonly maxPerStageResources: number;

    /**
     *
     */
    readonly maxDescriptorSetSamplers: number;

    /**
     *
     */
    readonly maxDescriptorSetUniformBuffers: number;

    /**
     *
     */
    readonly maxDescriptorSetUniformBuffersDynamic: number;

    /**
     *
     */
    readonly maxDescriptorSetStorageBuffers: number;

    /**
     *
     */
    readonly maxDescriptorSetStorageBuffersDynamic: number;

    /**
     *
     */
    readonly maxDescriptorSetSampledImages: number;

    /**
     *
     */
    readonly maxDescriptorSetStorageImages: number;

    /**
     *
     */
    readonly maxDescriptorSetInputAttachments: number;

    /**
     *
     */
    readonly maxVertexInputAttributes: number;

    /**
     *
     */
    readonly maxVertexInputBindings: number;

    /**
     *
     */
    readonly maxVertexInputAttributeOffset: number;

    /**
     *
     */
    readonly maxVertexInputBindingStride: number;

    /**
     *
     */
    readonly maxVertexOutputComponents: number;

    /**
     *
     */
    readonly maxTessellationGenerationLevel: number;

    /**
     *
     */
    readonly maxTessellationPatchSize: number;

    /**
     *
     */
    readonly maxTessellationControlPerVertexInputComponents: number;

    /**
     *
     */
    readonly maxTessellationControlPerVertexOutputComponents: number;

    /**
     *
     */
    readonly maxTessellationControlPerPatchOutputComponents: number;

    /**
     *
     */
    readonly maxTessellationControlTotalOutputComponents: number;

    /**
     *
     */
    readonly maxTessellationEvaluationInputComponents: number;

    /**
     *
     */
    readonly maxTessellationEvaluationOutputComponents: number;

    /**
     *
     */
    readonly maxGeometryShaderInvocations: number;

    /**
     *
     */
    readonly maxGeometryInputComponents: number;

    /**
     *
     */
    readonly maxGeometryOutputComponents: number;

    /**
     *
     */
    readonly maxGeometryOutputVertices: number;

    /**
     *
     */
    readonly maxGeometryTotalOutputComponents: number;

    /**
     *
     */
    readonly maxFragmentInputComponents: number;

    /**
     *
     */
    readonly maxFragmentOutputAttachments: number;

    /**
     *
     */
    readonly maxFragmentDualSrcAttachments: number;

    /**
     *
     */
    readonly maxFragmentCombinedOutputResources: number;

    /**
     *
     */
    readonly maxComputeSharedMemorySize: number;

    /**
     *
     */
    readonly maxComputeWorkGroupCount: number[] | null;

    /**
     *
     */
    readonly maxComputeWorkGroupInvocations: number;

    /**
     *
     */
    readonly maxComputeWorkGroupSize: number[] | null;

    /**
     *
     */
    readonly subPixelPrecisionBits: number;

    /**
     *
     */
    readonly subTexelPrecisionBits: number;

    /**
     *
     */
    readonly mipmapPrecisionBits: number;

    /**
     *
     */
    readonly maxDrawIndexedIndexValue: number;

    /**
     *
     */
    readonly maxDrawIndirectCount: number;

    /**
     *
     */
    readonly maxSamplerLodBias: number;

    /**
     *
     */
    readonly maxSamplerAnisotropy: number;

    /**
     *
     */
    readonly maxViewports: number;

    /**
     *
     */
    readonly maxViewportDimensions: number[] | null;

    /**
     *
     */
    readonly viewportBoundsRange: number[] | null;

    /**
     *
     */
    readonly viewportSubPixelBits: number;

    /**
     *
     */
    readonly minMemoryMapAlignment: bigint | number;

    /**
     *
     */
    readonly minTexelBufferOffsetAlignment: bigint | number;

    /**
     *
     */
    readonly minUniformBufferOffsetAlignment: bigint | number;

    /**
     *
     */
    readonly minStorageBufferOffsetAlignment: bigint | number;

    /**
     *
     */
    readonly minTexelOffset: number;

    /**
     *
     */
    readonly maxTexelOffset: number;

    /**
     *
     */
    readonly minTexelGatherOffset: number;

    /**
     *
     */
    readonly maxTexelGatherOffset: number;

    /**
     *
     */
    readonly minInterpolationOffset: number;

    /**
     *
     */
    readonly maxInterpolationOffset: number;

    /**
     *
     */
    readonly subPixelInterpolationOffsetBits: number;

    /**
     *
     */
    readonly maxFramebufferWidth: number;

    /**
     *
     */
    readonly maxFramebufferHeight: number;

    /**
     *
     */
    readonly maxFramebufferLayers: number;

    /**
     *
     */
    readonly framebufferColorSampleCounts: VkSampleCountFlagBits;

    /**
     *
     */
    readonly framebufferDepthSampleCounts: VkSampleCountFlagBits;

    /**
     *
     */
    readonly framebufferStencilSampleCounts: VkSampleCountFlagBits;

    /**
     *
     */
    readonly framebufferNoAttachmentsSampleCounts: VkSampleCountFlagBits;

    /**
     *
     */
    readonly maxColorAttachments: number;

    /**
     *
     */
    readonly sampledImageColorSampleCounts: VkSampleCountFlagBits;

    /**
     *
     */
    readonly sampledImageIntegerSampleCounts: VkSampleCountFlagBits;

    /**
     *
     */
    readonly sampledImageDepthSampleCounts: VkSampleCountFlagBits;

    /**
     *
     */
    readonly sampledImageStencilSampleCounts: VkSampleCountFlagBits;

    /**
     *
     */
    readonly storageImageSampleCounts: VkSampleCountFlagBits;

    /**
     *
     */
    readonly maxSampleMaskWords: number;

    /**
     *
     */
    readonly timestampComputeAndGraphics: boolean;

    /**
     *
     */
    readonly timestampPeriod: number;

    /**
     *
     */
    readonly maxClipDistances: number;

    /**
     *
     */
    readonly maxCullDistances: number;

    /**
     *
     */
    readonly maxCombinedClipAndCullDistances: number;

    /**
     *
     */
    readonly discreteQueuePriorities: number;

    /**
     *
     */
    readonly pointSizeRange: number[] | null;

    /**
     *
     */
    readonly lineWidthRange: number[] | null;

    /**
     *
     */
    readonly pointSizeGranularity: number;

    /**
     *
     */
    readonly lineWidthGranularity: number;

    /**
     *
     */
    readonly strictLines: boolean;

    /**
     *
     */
    readonly standardSampleLocations: boolean;

    /**
     *
     */
    readonly optimalBufferCopyOffsetAlignment: bigint | number;

    /**
     *
     */
    readonly optimalBufferCopyRowPitchAlignment: bigint | number;

    /**
     *
     */
    readonly nonCoherentAtomSize: bigint | number;

  }

  interface VkPhysicalDeviceLimitsInitializer {
    
    /**
     *
     */
    readonly maxImageDimension1D?: number;

    /**
     *
     */
    readonly maxImageDimension2D?: number;

    /**
     *
     */
    readonly maxImageDimension3D?: number;

    /**
     *
     */
    readonly maxImageDimensionCube?: number;

    /**
     *
     */
    readonly maxImageArrayLayers?: number;

    /**
     *
     */
    readonly maxTexelBufferElements?: number;

    /**
     *
     */
    readonly maxUniformBufferRange?: number;

    /**
     *
     */
    readonly maxStorageBufferRange?: number;

    /**
     *
     */
    readonly maxPushConstantsSize?: number;

    /**
     *
     */
    readonly maxMemoryAllocationCount?: number;

    /**
     *
     */
    readonly maxSamplerAllocationCount?: number;

    /**
     *
     */
    readonly bufferImageGranularity?: bigint | number;

    /**
     *
     */
    readonly sparseAddressSpaceSize?: bigint | number;

    /**
     *
     */
    readonly maxBoundDescriptorSets?: number;

    /**
     *
     */
    readonly maxPerStageDescriptorSamplers?: number;

    /**
     *
     */
    readonly maxPerStageDescriptorUniformBuffers?: number;

    /**
     *
     */
    readonly maxPerStageDescriptorStorageBuffers?: number;

    /**
     *
     */
    readonly maxPerStageDescriptorSampledImages?: number;

    /**
     *
     */
    readonly maxPerStageDescriptorStorageImages?: number;

    /**
     *
     */
    readonly maxPerStageDescriptorInputAttachments?: number;

    /**
     *
     */
    readonly maxPerStageResources?: number;

    /**
     *
     */
    readonly maxDescriptorSetSamplers?: number;

    /**
     *
     */
    readonly maxDescriptorSetUniformBuffers?: number;

    /**
     *
     */
    readonly maxDescriptorSetUniformBuffersDynamic?: number;

    /**
     *
     */
    readonly maxDescriptorSetStorageBuffers?: number;

    /**
     *
     */
    readonly maxDescriptorSetStorageBuffersDynamic?: number;

    /**
     *
     */
    readonly maxDescriptorSetSampledImages?: number;

    /**
     *
     */
    readonly maxDescriptorSetStorageImages?: number;

    /**
     *
     */
    readonly maxDescriptorSetInputAttachments?: number;

    /**
     *
     */
    readonly maxVertexInputAttributes?: number;

    /**
     *
     */
    readonly maxVertexInputBindings?: number;

    /**
     *
     */
    readonly maxVertexInputAttributeOffset?: number;

    /**
     *
     */
    readonly maxVertexInputBindingStride?: number;

    /**
     *
     */
    readonly maxVertexOutputComponents?: number;

    /**
     *
     */
    readonly maxTessellationGenerationLevel?: number;

    /**
     *
     */
    readonly maxTessellationPatchSize?: number;

    /**
     *
     */
    readonly maxTessellationControlPerVertexInputComponents?: number;

    /**
     *
     */
    readonly maxTessellationControlPerVertexOutputComponents?: number;

    /**
     *
     */
    readonly maxTessellationControlPerPatchOutputComponents?: number;

    /**
     *
     */
    readonly maxTessellationControlTotalOutputComponents?: number;

    /**
     *
     */
    readonly maxTessellationEvaluationInputComponents?: number;

    /**
     *
     */
    readonly maxTessellationEvaluationOutputComponents?: number;

    /**
     *
     */
    readonly maxGeometryShaderInvocations?: number;

    /**
     *
     */
    readonly maxGeometryInputComponents?: number;

    /**
     *
     */
    readonly maxGeometryOutputComponents?: number;

    /**
     *
     */
    readonly maxGeometryOutputVertices?: number;

    /**
     *
     */
    readonly maxGeometryTotalOutputComponents?: number;

    /**
     *
     */
    readonly maxFragmentInputComponents?: number;

    /**
     *
     */
    readonly maxFragmentOutputAttachments?: number;

    /**
     *
     */
    readonly maxFragmentDualSrcAttachments?: number;

    /**
     *
     */
    readonly maxFragmentCombinedOutputResources?: number;

    /**
     *
     */
    readonly maxComputeSharedMemorySize?: number;

    /**
     *
     */
    readonly maxComputeWorkGroupCount?: number[] | null;

    /**
     *
     */
    readonly maxComputeWorkGroupInvocations?: number;

    /**
     *
     */
    readonly maxComputeWorkGroupSize?: number[] | null;

    /**
     *
     */
    readonly subPixelPrecisionBits?: number;

    /**
     *
     */
    readonly subTexelPrecisionBits?: number;

    /**
     *
     */
    readonly mipmapPrecisionBits?: number;

    /**
     *
     */
    readonly maxDrawIndexedIndexValue?: number;

    /**
     *
     */
    readonly maxDrawIndirectCount?: number;

    /**
     *
     */
    readonly maxSamplerLodBias?: number;

    /**
     *
     */
    readonly maxSamplerAnisotropy?: number;

    /**
     *
     */
    readonly maxViewports?: number;

    /**
     *
     */
    readonly maxViewportDimensions?: number[] | null;

    /**
     *
     */
    readonly viewportBoundsRange?: number[] | null;

    /**
     *
     */
    readonly viewportSubPixelBits?: number;

    /**
     *
     */
    readonly minMemoryMapAlignment?: bigint | number;

    /**
     *
     */
    readonly minTexelBufferOffsetAlignment?: bigint | number;

    /**
     *
     */
    readonly minUniformBufferOffsetAlignment?: bigint | number;

    /**
     *
     */
    readonly minStorageBufferOffsetAlignment?: bigint | number;

    /**
     *
     */
    readonly minTexelOffset?: number;

    /**
     *
     */
    readonly maxTexelOffset?: number;

    /**
     *
     */
    readonly minTexelGatherOffset?: number;

    /**
     *
     */
    readonly maxTexelGatherOffset?: number;

    /**
     *
     */
    readonly minInterpolationOffset?: number;

    /**
     *
     */
    readonly maxInterpolationOffset?: number;

    /**
     *
     */
    readonly subPixelInterpolationOffsetBits?: number;

    /**
     *
     */
    readonly maxFramebufferWidth?: number;

    /**
     *
     */
    readonly maxFramebufferHeight?: number;

    /**
     *
     */
    readonly maxFramebufferLayers?: number;

    /**
     *
     */
    readonly framebufferColorSampleCounts?: VkSampleCountFlagBits;

    /**
     *
     */
    readonly framebufferDepthSampleCounts?: VkSampleCountFlagBits;

    /**
     *
     */
    readonly framebufferStencilSampleCounts?: VkSampleCountFlagBits;

    /**
     *
     */
    readonly framebufferNoAttachmentsSampleCounts?: VkSampleCountFlagBits;

    /**
     *
     */
    readonly maxColorAttachments?: number;

    /**
     *
     */
    readonly sampledImageColorSampleCounts?: VkSampleCountFlagBits;

    /**
     *
     */
    readonly sampledImageIntegerSampleCounts?: VkSampleCountFlagBits;

    /**
     *
     */
    readonly sampledImageDepthSampleCounts?: VkSampleCountFlagBits;

    /**
     *
     */
    readonly sampledImageStencilSampleCounts?: VkSampleCountFlagBits;

    /**
     *
     */
    readonly storageImageSampleCounts?: VkSampleCountFlagBits;

    /**
     *
     */
    readonly maxSampleMaskWords?: number;

    /**
     *
     */
    readonly timestampComputeAndGraphics?: boolean;

    /**
     *
     */
    readonly timestampPeriod?: number;

    /**
     *
     */
    readonly maxClipDistances?: number;

    /**
     *
     */
    readonly maxCullDistances?: number;

    /**
     *
     */
    readonly maxCombinedClipAndCullDistances?: number;

    /**
     *
     */
    readonly discreteQueuePriorities?: number;

    /**
     *
     */
    readonly pointSizeRange?: number[] | null;

    /**
     *
     */
    readonly lineWidthRange?: number[] | null;

    /**
     *
     */
    readonly pointSizeGranularity?: number;

    /**
     *
     */
    readonly lineWidthGranularity?: number;

    /**
     *
     */
    readonly strictLines?: boolean;

    /**
     *
     */
    readonly standardSampleLocations?: boolean;

    /**
     *
     */
    readonly optimalBufferCopyOffsetAlignment?: bigint | number;

    /**
     *
     */
    readonly optimalBufferCopyRowPitchAlignment?: bigint | number;

    /**
     *
     */
    readonly nonCoherentAtomSize?: bigint | number;
  }

  interface VkPhysicalDeviceLimitsConstructor {
    readonly prototype: VkPhysicalDeviceLimits;
    new(param?: VkPhysicalDeviceLimitsInitializer | null): VkPhysicalDeviceLimits;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceLimits: VkPhysicalDeviceLimitsConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceSparseProperties {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly residencyStandard2DBlockShape: boolean;

    /**
     *
     */
    readonly residencyStandard2DMultisampleBlockShape: boolean;

    /**
     *
     */
    readonly residencyStandard3DBlockShape: boolean;

    /**
     *
     */
    readonly residencyAlignedMipSize: boolean;

    /**
     *
     */
    readonly residencyNonResidentStrict: boolean;

  }

  interface VkPhysicalDeviceSparsePropertiesInitializer {
    
    /**
     *
     */
    readonly residencyStandard2DBlockShape?: boolean;

    /**
     *
     */
    readonly residencyStandard2DMultisampleBlockShape?: boolean;

    /**
     *
     */
    readonly residencyStandard3DBlockShape?: boolean;

    /**
     *
     */
    readonly residencyAlignedMipSize?: boolean;

    /**
     *
     */
    readonly residencyNonResidentStrict?: boolean;
  }

  interface VkPhysicalDeviceSparsePropertiesConstructor {
    readonly prototype: VkPhysicalDeviceSparseProperties;
    new(param?: VkPhysicalDeviceSparsePropertiesInitializer | null): VkPhysicalDeviceSparseProperties;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceSparseProperties: VkPhysicalDeviceSparsePropertiesConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceFeatures {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    robustBufferAccess: boolean;

    /**
     *
     */
    fullDrawIndexUint32: boolean;

    /**
     *
     */
    imageCubeArray: boolean;

    /**
     *
     */
    independentBlend: boolean;

    /**
     *
     */
    geometryShader: boolean;

    /**
     *
     */
    tessellationShader: boolean;

    /**
     *
     */
    sampleRateShading: boolean;

    /**
     *
     */
    dualSrcBlend: boolean;

    /**
     *
     */
    logicOp: boolean;

    /**
     *
     */
    multiDrawIndirect: boolean;

    /**
     *
     */
    drawIndirectFirstInstance: boolean;

    /**
     *
     */
    depthClamp: boolean;

    /**
     *
     */
    depthBiasClamp: boolean;

    /**
     *
     */
    fillModeNonSolid: boolean;

    /**
     *
     */
    depthBounds: boolean;

    /**
     *
     */
    wideLines: boolean;

    /**
     *
     */
    largePoints: boolean;

    /**
     *
     */
    alphaToOne: boolean;

    /**
     *
     */
    multiViewport: boolean;

    /**
     *
     */
    samplerAnisotropy: boolean;

    /**
     *
     */
    textureCompressionETC2: boolean;

    /**
     *
     */
    textureCompressionASTC_LDR: boolean;

    /**
     *
     */
    textureCompressionBC: boolean;

    /**
     *
     */
    occlusionQueryPrecise: boolean;

    /**
     *
     */
    pipelineStatisticsQuery: boolean;

    /**
     *
     */
    vertexPipelineStoresAndAtomics: boolean;

    /**
     *
     */
    fragmentStoresAndAtomics: boolean;

    /**
     *
     */
    shaderTessellationAndGeometryPointSize: boolean;

    /**
     *
     */
    shaderImageGatherExtended: boolean;

    /**
     *
     */
    shaderStorageImageExtendedFormats: boolean;

    /**
     *
     */
    shaderStorageImageMultisample: boolean;

    /**
     *
     */
    shaderStorageImageReadWithoutFormat: boolean;

    /**
     *
     */
    shaderStorageImageWriteWithoutFormat: boolean;

    /**
     *
     */
    shaderUniformBufferArrayDynamicIndexing: boolean;

    /**
     *
     */
    shaderSampledImageArrayDynamicIndexing: boolean;

    /**
     *
     */
    shaderStorageBufferArrayDynamicIndexing: boolean;

    /**
     *
     */
    shaderStorageImageArrayDynamicIndexing: boolean;

    /**
     *
     */
    shaderClipDistance: boolean;

    /**
     *
     */
    shaderCullDistance: boolean;

    /**
     *
     */
    shaderFloat64: boolean;

    /**
     *
     */
    shaderInt64: boolean;

    /**
     *
     */
    shaderInt16: boolean;

    /**
     *
     */
    shaderResourceResidency: boolean;

    /**
     *
     */
    shaderResourceMinLod: boolean;

    /**
     *
     */
    sparseBinding: boolean;

    /**
     *
     */
    sparseResidencyBuffer: boolean;

    /**
     *
     */
    sparseResidencyImage2D: boolean;

    /**
     *
     */
    sparseResidencyImage3D: boolean;

    /**
     *
     */
    sparseResidency2Samples: boolean;

    /**
     *
     */
    sparseResidency4Samples: boolean;

    /**
     *
     */
    sparseResidency8Samples: boolean;

    /**
     *
     */
    sparseResidency16Samples: boolean;

    /**
     *
     */
    sparseResidencyAliased: boolean;

    /**
     *
     */
    variableMultisampleRate: boolean;

    /**
     *
     */
    inheritedQueries: boolean;

  }

  interface VkPhysicalDeviceFeaturesInitializer {
    
    /**
     *
     */
    robustBufferAccess?: boolean;

    /**
     *
     */
    fullDrawIndexUint32?: boolean;

    /**
     *
     */
    imageCubeArray?: boolean;

    /**
     *
     */
    independentBlend?: boolean;

    /**
     *
     */
    geometryShader?: boolean;

    /**
     *
     */
    tessellationShader?: boolean;

    /**
     *
     */
    sampleRateShading?: boolean;

    /**
     *
     */
    dualSrcBlend?: boolean;

    /**
     *
     */
    logicOp?: boolean;

    /**
     *
     */
    multiDrawIndirect?: boolean;

    /**
     *
     */
    drawIndirectFirstInstance?: boolean;

    /**
     *
     */
    depthClamp?: boolean;

    /**
     *
     */
    depthBiasClamp?: boolean;

    /**
     *
     */
    fillModeNonSolid?: boolean;

    /**
     *
     */
    depthBounds?: boolean;

    /**
     *
     */
    wideLines?: boolean;

    /**
     *
     */
    largePoints?: boolean;

    /**
     *
     */
    alphaToOne?: boolean;

    /**
     *
     */
    multiViewport?: boolean;

    /**
     *
     */
    samplerAnisotropy?: boolean;

    /**
     *
     */
    textureCompressionETC2?: boolean;

    /**
     *
     */
    textureCompressionASTC_LDR?: boolean;

    /**
     *
     */
    textureCompressionBC?: boolean;

    /**
     *
     */
    occlusionQueryPrecise?: boolean;

    /**
     *
     */
    pipelineStatisticsQuery?: boolean;

    /**
     *
     */
    vertexPipelineStoresAndAtomics?: boolean;

    /**
     *
     */
    fragmentStoresAndAtomics?: boolean;

    /**
     *
     */
    shaderTessellationAndGeometryPointSize?: boolean;

    /**
     *
     */
    shaderImageGatherExtended?: boolean;

    /**
     *
     */
    shaderStorageImageExtendedFormats?: boolean;

    /**
     *
     */
    shaderStorageImageMultisample?: boolean;

    /**
     *
     */
    shaderStorageImageReadWithoutFormat?: boolean;

    /**
     *
     */
    shaderStorageImageWriteWithoutFormat?: boolean;

    /**
     *
     */
    shaderUniformBufferArrayDynamicIndexing?: boolean;

    /**
     *
     */
    shaderSampledImageArrayDynamicIndexing?: boolean;

    /**
     *
     */
    shaderStorageBufferArrayDynamicIndexing?: boolean;

    /**
     *
     */
    shaderStorageImageArrayDynamicIndexing?: boolean;

    /**
     *
     */
    shaderClipDistance?: boolean;

    /**
     *
     */
    shaderCullDistance?: boolean;

    /**
     *
     */
    shaderFloat64?: boolean;

    /**
     *
     */
    shaderInt64?: boolean;

    /**
     *
     */
    shaderInt16?: boolean;

    /**
     *
     */
    shaderResourceResidency?: boolean;

    /**
     *
     */
    shaderResourceMinLod?: boolean;

    /**
     *
     */
    sparseBinding?: boolean;

    /**
     *
     */
    sparseResidencyBuffer?: boolean;

    /**
     *
     */
    sparseResidencyImage2D?: boolean;

    /**
     *
     */
    sparseResidencyImage3D?: boolean;

    /**
     *
     */
    sparseResidency2Samples?: boolean;

    /**
     *
     */
    sparseResidency4Samples?: boolean;

    /**
     *
     */
    sparseResidency8Samples?: boolean;

    /**
     *
     */
    sparseResidency16Samples?: boolean;

    /**
     *
     */
    sparseResidencyAliased?: boolean;

    /**
     *
     */
    variableMultisampleRate?: boolean;

    /**
     *
     */
    inheritedQueries?: boolean;
  }

  interface VkPhysicalDeviceFeaturesConstructor {
    readonly prototype: VkPhysicalDeviceFeatures;
    new(param?: VkPhysicalDeviceFeaturesInitializer | null): VkPhysicalDeviceFeatures;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceFeatures: VkPhysicalDeviceFeaturesConstructor;

  
  
  /**
   * 
   */
  interface VkFenceCreateInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkFenceCreateFlagBits;

  }

  interface VkFenceCreateInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkFenceCreateFlagBits;
  }

  interface VkFenceCreateInfoConstructor {
    readonly prototype: VkFenceCreateInfo;
    new(param?: VkFenceCreateInfoInitializer | null): VkFenceCreateInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkFenceCreateInfo: VkFenceCreateInfoConstructor;

  
  
  /**
   * 
   */
  interface VkEventCreateInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

  }

  interface VkEventCreateInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;
  }

  interface VkEventCreateInfoConstructor {
    readonly prototype: VkEventCreateInfo;
    new(param?: VkEventCreateInfoInitializer | null): VkEventCreateInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkEventCreateInfo: VkEventCreateInfoConstructor;

  
  
  /**
   * 
   */
  interface VkRenderPassCreateInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkRenderPassCreateFlagBits;

    /**
     *
     */
    attachmentCount: number;

    /**
     *
     */
    pAttachments: VkAttachmentDescription[] | null;

    /**
     *
     */
    subpassCount: number;

    /**
     *
     */
    pSubpasses: VkSubpassDescription[] | null;

    /**
     *
     */
    dependencyCount: number;

    /**
     *
     */
    pDependencies: VkSubpassDependency[] | null;

  }

  interface VkRenderPassCreateInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkRenderPassCreateFlagBits;

    /**
     *
     */
    attachmentCount?: number;

    /**
     *
     */
    pAttachments?: VkAttachmentDescription[] | null;

    /**
     *
     */
    subpassCount?: number;

    /**
     *
     */
    pSubpasses?: VkSubpassDescription[] | null;

    /**
     *
     */
    dependencyCount?: number;

    /**
     *
     */
    pDependencies?: VkSubpassDependency[] | null;
  }

  interface VkRenderPassCreateInfoConstructor {
    readonly prototype: VkRenderPassCreateInfo;
    new(param?: VkRenderPassCreateInfoInitializer | null): VkRenderPassCreateInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkRenderPassCreateInfo: VkRenderPassCreateInfoConstructor;

  
  
  /**
   * 
   */
  interface VkSubpassDependency {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    srcSubpass: number;

    /**
     *
     */
    dstSubpass: number;

    /**
     *
     */
    srcStageMask: VkPipelineStageFlagBits;

    /**
     *
     */
    dstStageMask: VkPipelineStageFlagBits;

    /**
     *
     */
    srcAccessMask: VkAccessFlagBits;

    /**
     *
     */
    dstAccessMask: VkAccessFlagBits;

    /**
     *
     */
    dependencyFlags: VkDependencyFlagBits;

  }

  interface VkSubpassDependencyInitializer {
    
    /**
     *
     */
    srcSubpass?: number;

    /**
     *
     */
    dstSubpass?: number;

    /**
     *
     */
    srcStageMask?: VkPipelineStageFlagBits;

    /**
     *
     */
    dstStageMask?: VkPipelineStageFlagBits;

    /**
     *
     */
    srcAccessMask?: VkAccessFlagBits;

    /**
     *
     */
    dstAccessMask?: VkAccessFlagBits;

    /**
     *
     */
    dependencyFlags?: VkDependencyFlagBits;
  }

  interface VkSubpassDependencyConstructor {
    readonly prototype: VkSubpassDependency;
    new(param?: VkSubpassDependencyInitializer | null): VkSubpassDependency;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkSubpassDependency: VkSubpassDependencyConstructor;

  
  
  /**
   * 
   */
  interface VkSubpassDescription {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    flags: VkSubpassDescriptionFlagBits;

    /**
     *
     */
    pipelineBindPoint: VkPipelineBindPoint;

    /**
     *
     */
    inputAttachmentCount: number;

    /**
     *
     */
    pInputAttachments: VkAttachmentReference[] | null;

    /**
     *
     */
    colorAttachmentCount: number;

    /**
     *
     */
    pColorAttachments: VkAttachmentReference[] | null;

    /**
     *
     */
    pResolveAttachments: VkAttachmentReference[] | null;

    /**
     *
     */
    pDepthStencilAttachment: VkAttachmentReference | null;

    /**
     *
     */
    preserveAttachmentCount: number;

    /**
     *
     */
    pPreserveAttachments: Uint32Array | null;

  }

  interface VkSubpassDescriptionInitializer {
    
    /**
     *
     */
    flags?: VkSubpassDescriptionFlagBits;

    /**
     *
     */
    pipelineBindPoint?: VkPipelineBindPoint;

    /**
     *
     */
    inputAttachmentCount?: number;

    /**
     *
     */
    pInputAttachments?: VkAttachmentReference[] | null;

    /**
     *
     */
    colorAttachmentCount?: number;

    /**
     *
     */
    pColorAttachments?: VkAttachmentReference[] | null;

    /**
     *
     */
    pResolveAttachments?: VkAttachmentReference[] | null;

    /**
     *
     */
    pDepthStencilAttachment?: VkAttachmentReference | null;

    /**
     *
     */
    preserveAttachmentCount?: number;

    /**
     *
     */
    pPreserveAttachments?: Uint32Array | null;
  }

  interface VkSubpassDescriptionConstructor {
    readonly prototype: VkSubpassDescription;
    new(param?: VkSubpassDescriptionInitializer | null): VkSubpassDescription;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkSubpassDescription: VkSubpassDescriptionConstructor;

  
  
  /**
   * 
   */
  interface VkAttachmentReference {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    attachment: number;

    /**
     *
     */
    layout: VkImageLayout;

  }

  interface VkAttachmentReferenceInitializer {
    
    /**
     *
     */
    attachment?: number;

    /**
     *
     */
    layout?: VkImageLayout;
  }

  interface VkAttachmentReferenceConstructor {
    readonly prototype: VkAttachmentReference;
    new(param?: VkAttachmentReferenceInitializer | null): VkAttachmentReference;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkAttachmentReference: VkAttachmentReferenceConstructor;

  
  
  /**
   * 
   */
  interface VkAttachmentDescription {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    flags: VkAttachmentDescriptionFlagBits;

    /**
     *
     */
    format: VkFormat;

    /**
     *
     */
    samples: VkSampleCountFlagBits;

    /**
     *
     */
    loadOp: VkAttachmentLoadOp;

    /**
     *
     */
    storeOp: VkAttachmentStoreOp;

    /**
     *
     */
    stencilLoadOp: VkAttachmentLoadOp;

    /**
     *
     */
    stencilStoreOp: VkAttachmentStoreOp;

    /**
     *
     */
    initialLayout: VkImageLayout;

    /**
     *
     */
    finalLayout: VkImageLayout;

  }

  interface VkAttachmentDescriptionInitializer {
    
    /**
     *
     */
    flags?: VkAttachmentDescriptionFlagBits;

    /**
     *
     */
    format?: VkFormat;

    /**
     *
     */
    samples?: VkSampleCountFlagBits;

    /**
     *
     */
    loadOp?: VkAttachmentLoadOp;

    /**
     *
     */
    storeOp?: VkAttachmentStoreOp;

    /**
     *
     */
    stencilLoadOp?: VkAttachmentLoadOp;

    /**
     *
     */
    stencilStoreOp?: VkAttachmentStoreOp;

    /**
     *
     */
    initialLayout?: VkImageLayout;

    /**
     *
     */
    finalLayout?: VkImageLayout;
  }

  interface VkAttachmentDescriptionConstructor {
    readonly prototype: VkAttachmentDescription;
    new(param?: VkAttachmentDescriptionInitializer | null): VkAttachmentDescription;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkAttachmentDescription: VkAttachmentDescriptionConstructor;

  
  
  /**
   * 
   */
  interface VkClearAttachment {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    aspectMask: VkImageAspectFlagBits;

    /**
     *
     */
    colorAttachment: number;

    /**
     *
     */
    clearValue: VkClearValue | null;

  }

  interface VkClearAttachmentInitializer {
    
    /**
     *
     */
    aspectMask?: VkImageAspectFlagBits;

    /**
     *
     */
    colorAttachment?: number;

    /**
     *
     */
    clearValue?: VkClearValue | null;
  }

  interface VkClearAttachmentConstructor {
    readonly prototype: VkClearAttachment;
    new(param?: VkClearAttachmentInitializer | null): VkClearAttachment;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkClearAttachment: VkClearAttachmentConstructor;

  
  
  /**
   * 
   */
  interface VkClearDepthStencilValue {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    depth: number;

    /**
     *
     */
    stencil: number;

  }

  interface VkClearDepthStencilValueInitializer {
    
    /**
     *
     */
    depth?: number;

    /**
     *
     */
    stencil?: number;
  }

  interface VkClearDepthStencilValueConstructor {
    readonly prototype: VkClearDepthStencilValue;
    new(param?: VkClearDepthStencilValueInitializer | null): VkClearDepthStencilValue;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkClearDepthStencilValue: VkClearDepthStencilValueConstructor;

  
  
  /**
   * 
   */
  interface VkRenderPassBeginInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    renderPass: VkRenderPass | null;

    /**
     *
     */
    framebuffer: VkFramebuffer | null;

    /**
     *
     */
    renderArea: VkRect2D | null;

    /**
     *
     */
    clearValueCount: number;

    /**
     *
     */
    pClearValues: VkClearValue[] | null;

  }

  interface VkRenderPassBeginInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    renderPass?: VkRenderPass | null;

    /**
     *
     */
    framebuffer?: VkFramebuffer | null;

    /**
     *
     */
    renderArea?: VkRect2D | null;

    /**
     *
     */
    clearValueCount?: number;

    /**
     *
     */
    pClearValues?: VkClearValue[] | null;
  }

  interface VkRenderPassBeginInfoConstructor {
    readonly prototype: VkRenderPassBeginInfo;
    new(param?: VkRenderPassBeginInfoInitializer | null): VkRenderPassBeginInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkRenderPassBeginInfo: VkRenderPassBeginInfoConstructor;

  
  
  /**
   * 
   */
  interface VkCommandBufferBeginInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkCommandBufferUsageFlagBits;

    /**
     *
     */
    pInheritanceInfo: VkCommandBufferInheritanceInfo | null;

  }

  interface VkCommandBufferBeginInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkCommandBufferUsageFlagBits;

    /**
     *
     */
    pInheritanceInfo?: VkCommandBufferInheritanceInfo | null;
  }

  interface VkCommandBufferBeginInfoConstructor {
    readonly prototype: VkCommandBufferBeginInfo;
    new(param?: VkCommandBufferBeginInfoInitializer | null): VkCommandBufferBeginInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkCommandBufferBeginInfo: VkCommandBufferBeginInfoConstructor;

  
  
  /**
   * 
   */
  interface VkCommandBufferInheritanceInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    renderPass: VkRenderPass | null;

    /**
     *
     */
    subpass: number;

    /**
     *
     */
    framebuffer: VkFramebuffer | null;

    /**
     *
     */
    occlusionQueryEnable: boolean;

    /**
     *
     */
    queryFlags: VkQueryControlFlagBits;

    /**
     *
     */
    pipelineStatistics: VkQueryPipelineStatisticFlagBits;

  }

  interface VkCommandBufferInheritanceInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    renderPass?: VkRenderPass | null;

    /**
     *
     */
    subpass?: number;

    /**
     *
     */
    framebuffer?: VkFramebuffer | null;

    /**
     *
     */
    occlusionQueryEnable?: boolean;

    /**
     *
     */
    queryFlags?: VkQueryControlFlagBits;

    /**
     *
     */
    pipelineStatistics?: VkQueryPipelineStatisticFlagBits;
  }

  interface VkCommandBufferInheritanceInfoConstructor {
    readonly prototype: VkCommandBufferInheritanceInfo;
    new(param?: VkCommandBufferInheritanceInfoInitializer | null): VkCommandBufferInheritanceInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkCommandBufferInheritanceInfo: VkCommandBufferInheritanceInfoConstructor;

  
  
  /**
   * 
   */
  interface VkCommandBufferAllocateInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    commandPool: VkCommandPool | null;

    /**
     *
     */
    level: VkCommandBufferLevel;

    /**
     *
     */
    commandBufferCount: number;

  }

  interface VkCommandBufferAllocateInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    commandPool?: VkCommandPool | null;

    /**
     *
     */
    level?: VkCommandBufferLevel;

    /**
     *
     */
    commandBufferCount?: number;
  }

  interface VkCommandBufferAllocateInfoConstructor {
    readonly prototype: VkCommandBufferAllocateInfo;
    new(param?: VkCommandBufferAllocateInfoInitializer | null): VkCommandBufferAllocateInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkCommandBufferAllocateInfo: VkCommandBufferAllocateInfoConstructor;

  
  
  /**
   * 
   */
  interface VkCommandPoolCreateInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkCommandPoolCreateFlagBits;

    /**
     *
     */
    queueFamilyIndex: number;

  }

  interface VkCommandPoolCreateInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkCommandPoolCreateFlagBits;

    /**
     *
     */
    queueFamilyIndex?: number;
  }

  interface VkCommandPoolCreateInfoConstructor {
    readonly prototype: VkCommandPoolCreateInfo;
    new(param?: VkCommandPoolCreateInfoInitializer | null): VkCommandPoolCreateInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkCommandPoolCreateInfo: VkCommandPoolCreateInfoConstructor;

  
  
  /**
   * 
   */
  interface VkSamplerCreateInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkSamplerCreateFlagBits;

    /**
     *
     */
    magFilter: VkFilter;

    /**
     *
     */
    minFilter: VkFilter;

    /**
     *
     */
    mipmapMode: VkSamplerMipmapMode;

    /**
     *
     */
    addressModeU: VkSamplerAddressMode;

    /**
     *
     */
    addressModeV: VkSamplerAddressMode;

    /**
     *
     */
    addressModeW: VkSamplerAddressMode;

    /**
     *
     */
    mipLodBias: number;

    /**
     *
     */
    anisotropyEnable: boolean;

    /**
     *
     */
    maxAnisotropy: number;

    /**
     *
     */
    compareEnable: boolean;

    /**
     *
     */
    compareOp: VkCompareOp;

    /**
     *
     */
    minLod: number;

    /**
     *
     */
    maxLod: number;

    /**
     *
     */
    borderColor: VkBorderColor;

    /**
     *
     */
    unnormalizedCoordinates: boolean;

  }

  interface VkSamplerCreateInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkSamplerCreateFlagBits;

    /**
     *
     */
    magFilter?: VkFilter;

    /**
     *
     */
    minFilter?: VkFilter;

    /**
     *
     */
    mipmapMode?: VkSamplerMipmapMode;

    /**
     *
     */
    addressModeU?: VkSamplerAddressMode;

    /**
     *
     */
    addressModeV?: VkSamplerAddressMode;

    /**
     *
     */
    addressModeW?: VkSamplerAddressMode;

    /**
     *
     */
    mipLodBias?: number;

    /**
     *
     */
    anisotropyEnable?: boolean;

    /**
     *
     */
    maxAnisotropy?: number;

    /**
     *
     */
    compareEnable?: boolean;

    /**
     *
     */
    compareOp?: VkCompareOp;

    /**
     *
     */
    minLod?: number;

    /**
     *
     */
    maxLod?: number;

    /**
     *
     */
    borderColor?: VkBorderColor;

    /**
     *
     */
    unnormalizedCoordinates?: boolean;
  }

  interface VkSamplerCreateInfoConstructor {
    readonly prototype: VkSamplerCreateInfo;
    new(param?: VkSamplerCreateInfoInitializer | null): VkSamplerCreateInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkSamplerCreateInfo: VkSamplerCreateInfoConstructor;

  
  
  /**
   * 
   */
  interface VkPipelineLayoutCreateInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

    /**
     *
     */
    setLayoutCount: number;

    /**
     *
     */
    pSetLayouts: VkDescriptorSetLayout[] | null;

    /**
     *
     */
    pushConstantRangeCount: number;

    /**
     *
     */
    pPushConstantRanges: VkPushConstantRange[] | null;

  }

  interface VkPipelineLayoutCreateInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;

    /**
     *
     */
    setLayoutCount?: number;

    /**
     *
     */
    pSetLayouts?: VkDescriptorSetLayout[] | null;

    /**
     *
     */
    pushConstantRangeCount?: number;

    /**
     *
     */
    pPushConstantRanges?: VkPushConstantRange[] | null;
  }

  interface VkPipelineLayoutCreateInfoConstructor {
    readonly prototype: VkPipelineLayoutCreateInfo;
    new(param?: VkPipelineLayoutCreateInfoInitializer | null): VkPipelineLayoutCreateInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPipelineLayoutCreateInfo: VkPipelineLayoutCreateInfoConstructor;

  
  
  /**
   * 
   */
  interface VkPushConstantRange {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    stageFlags: VkShaderStageFlagBits;

    /**
     *
     */
    offset: number;

    /**
     *
     */
    size: number;

  }

  interface VkPushConstantRangeInitializer {
    
    /**
     *
     */
    stageFlags?: VkShaderStageFlagBits;

    /**
     *
     */
    offset?: number;

    /**
     *
     */
    size?: number;
  }

  interface VkPushConstantRangeConstructor {
    readonly prototype: VkPushConstantRange;
    new(param?: VkPushConstantRangeInitializer | null): VkPushConstantRange;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPushConstantRange: VkPushConstantRangeConstructor;

  
  
  /**
   * 
   */
  interface VkPipelineCacheCreateInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

    /**
     *
     */
    initialDataSize: bigint | number;

    /**
     *
     */
    pInitialData: ArrayBuffer | null;

  }

  interface VkPipelineCacheCreateInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;

    /**
     *
     */
    initialDataSize?: bigint | number;

    /**
     *
     */
    pInitialData?: ArrayBuffer | null;
  }

  interface VkPipelineCacheCreateInfoConstructor {
    readonly prototype: VkPipelineCacheCreateInfo;
    new(param?: VkPipelineCacheCreateInfoInitializer | null): VkPipelineCacheCreateInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPipelineCacheCreateInfo: VkPipelineCacheCreateInfoConstructor;

  
  
  /**
   * 
   */
  interface VkGraphicsPipelineCreateInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkPipelineCreateFlagBits;

    /**
     *
     */
    stageCount: number;

    /**
     *
     */
    pStages: VkPipelineShaderStageCreateInfo[] | null;

    /**
     *
     */
    pVertexInputState: VkPipelineVertexInputStateCreateInfo | null;

    /**
     *
     */
    pInputAssemblyState: VkPipelineInputAssemblyStateCreateInfo | null;

    /**
     *
     */
    pTessellationState: VkPipelineTessellationStateCreateInfo | null;

    /**
     *
     */
    pViewportState: VkPipelineViewportStateCreateInfo | null;

    /**
     *
     */
    pRasterizationState: VkPipelineRasterizationStateCreateInfo | null;

    /**
     *
     */
    pMultisampleState: VkPipelineMultisampleStateCreateInfo | null;

    /**
     *
     */
    pDepthStencilState: VkPipelineDepthStencilStateCreateInfo | null;

    /**
     *
     */
    pColorBlendState: VkPipelineColorBlendStateCreateInfo | null;

    /**
     *
     */
    pDynamicState: VkPipelineDynamicStateCreateInfo | null;

    /**
     *
     */
    layout: VkPipelineLayout | null;

    /**
     *
     */
    renderPass: VkRenderPass | null;

    /**
     *
     */
    subpass: number;

    /**
     *
     */
    basePipelineHandle: VkPipeline | null;

    /**
     *
     */
    basePipelineIndex: number;

  }

  interface VkGraphicsPipelineCreateInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkPipelineCreateFlagBits;

    /**
     *
     */
    stageCount?: number;

    /**
     *
     */
    pStages?: VkPipelineShaderStageCreateInfo[] | null;

    /**
     *
     */
    pVertexInputState?: VkPipelineVertexInputStateCreateInfo | null;

    /**
     *
     */
    pInputAssemblyState?: VkPipelineInputAssemblyStateCreateInfo | null;

    /**
     *
     */
    pTessellationState?: VkPipelineTessellationStateCreateInfo | null;

    /**
     *
     */
    pViewportState?: VkPipelineViewportStateCreateInfo | null;

    /**
     *
     */
    pRasterizationState?: VkPipelineRasterizationStateCreateInfo | null;

    /**
     *
     */
    pMultisampleState?: VkPipelineMultisampleStateCreateInfo | null;

    /**
     *
     */
    pDepthStencilState?: VkPipelineDepthStencilStateCreateInfo | null;

    /**
     *
     */
    pColorBlendState?: VkPipelineColorBlendStateCreateInfo | null;

    /**
     *
     */
    pDynamicState?: VkPipelineDynamicStateCreateInfo | null;

    /**
     *
     */
    layout?: VkPipelineLayout | null;

    /**
     *
     */
    renderPass?: VkRenderPass | null;

    /**
     *
     */
    subpass?: number;

    /**
     *
     */
    basePipelineHandle?: VkPipeline | null;

    /**
     *
     */
    basePipelineIndex?: number;
  }

  interface VkGraphicsPipelineCreateInfoConstructor {
    readonly prototype: VkGraphicsPipelineCreateInfo;
    new(param?: VkGraphicsPipelineCreateInfoInitializer | null): VkGraphicsPipelineCreateInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkGraphicsPipelineCreateInfo: VkGraphicsPipelineCreateInfoConstructor;

  
  
  /**
   * 
   */
  interface VkPipelineDepthStencilStateCreateInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

    /**
     *
     */
    depthTestEnable: boolean;

    /**
     *
     */
    depthWriteEnable: boolean;

    /**
     *
     */
    depthCompareOp: VkCompareOp;

    /**
     *
     */
    depthBoundsTestEnable: boolean;

    /**
     *
     */
    stencilTestEnable: boolean;

    /**
     *
     */
    front: VkStencilOpState | null;

    /**
     *
     */
    back: VkStencilOpState | null;

    /**
     *
     */
    minDepthBounds: number;

    /**
     *
     */
    maxDepthBounds: number;

  }

  interface VkPipelineDepthStencilStateCreateInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;

    /**
     *
     */
    depthTestEnable?: boolean;

    /**
     *
     */
    depthWriteEnable?: boolean;

    /**
     *
     */
    depthCompareOp?: VkCompareOp;

    /**
     *
     */
    depthBoundsTestEnable?: boolean;

    /**
     *
     */
    stencilTestEnable?: boolean;

    /**
     *
     */
    front?: VkStencilOpState | null;

    /**
     *
     */
    back?: VkStencilOpState | null;

    /**
     *
     */
    minDepthBounds?: number;

    /**
     *
     */
    maxDepthBounds?: number;
  }

  interface VkPipelineDepthStencilStateCreateInfoConstructor {
    readonly prototype: VkPipelineDepthStencilStateCreateInfo;
    new(param?: VkPipelineDepthStencilStateCreateInfoInitializer | null): VkPipelineDepthStencilStateCreateInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPipelineDepthStencilStateCreateInfo: VkPipelineDepthStencilStateCreateInfoConstructor;

  
  
  /**
   * 
   */
  interface VkStencilOpState {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    failOp: VkStencilOp;

    /**
     *
     */
    passOp: VkStencilOp;

    /**
     *
     */
    depthFailOp: VkStencilOp;

    /**
     *
     */
    compareOp: VkCompareOp;

    /**
     *
     */
    compareMask: number;

    /**
     *
     */
    writeMask: number;

    /**
     *
     */
    reference: number;

  }

  interface VkStencilOpStateInitializer {
    
    /**
     *
     */
    failOp?: VkStencilOp;

    /**
     *
     */
    passOp?: VkStencilOp;

    /**
     *
     */
    depthFailOp?: VkStencilOp;

    /**
     *
     */
    compareOp?: VkCompareOp;

    /**
     *
     */
    compareMask?: number;

    /**
     *
     */
    writeMask?: number;

    /**
     *
     */
    reference?: number;
  }

  interface VkStencilOpStateConstructor {
    readonly prototype: VkStencilOpState;
    new(param?: VkStencilOpStateInitializer | null): VkStencilOpState;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkStencilOpState: VkStencilOpStateConstructor;

  
  
  /**
   * 
   */
  interface VkPipelineDynamicStateCreateInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

    /**
     *
     */
    dynamicStateCount: number;

    /**
     *
     */
    pDynamicStates: Int32Array | null;

  }

  interface VkPipelineDynamicStateCreateInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;

    /**
     *
     */
    dynamicStateCount?: number;

    /**
     *
     */
    pDynamicStates?: Int32Array | null;
  }

  interface VkPipelineDynamicStateCreateInfoConstructor {
    readonly prototype: VkPipelineDynamicStateCreateInfo;
    new(param?: VkPipelineDynamicStateCreateInfoInitializer | null): VkPipelineDynamicStateCreateInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPipelineDynamicStateCreateInfo: VkPipelineDynamicStateCreateInfoConstructor;

  
  
  /**
   * 
   */
  interface VkPipelineColorBlendStateCreateInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

    /**
     *
     */
    logicOpEnable: boolean;

    /**
     *
     */
    logicOp: VkLogicOp;

    /**
     *
     */
    attachmentCount: number;

    /**
     *
     */
    pAttachments: VkPipelineColorBlendAttachmentState[] | null;

    /**
     *
     */
    blendConstants: number[] | null;

  }

  interface VkPipelineColorBlendStateCreateInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;

    /**
     *
     */
    logicOpEnable?: boolean;

    /**
     *
     */
    logicOp?: VkLogicOp;

    /**
     *
     */
    attachmentCount?: number;

    /**
     *
     */
    pAttachments?: VkPipelineColorBlendAttachmentState[] | null;

    /**
     *
     */
    blendConstants?: number[] | null;
  }

  interface VkPipelineColorBlendStateCreateInfoConstructor {
    readonly prototype: VkPipelineColorBlendStateCreateInfo;
    new(param?: VkPipelineColorBlendStateCreateInfoInitializer | null): VkPipelineColorBlendStateCreateInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPipelineColorBlendStateCreateInfo: VkPipelineColorBlendStateCreateInfoConstructor;

  
  
  /**
   * 
   */
  interface VkPipelineColorBlendAttachmentState {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    blendEnable: boolean;

    /**
     *
     */
    srcColorBlendFactor: VkBlendFactor;

    /**
     *
     */
    dstColorBlendFactor: VkBlendFactor;

    /**
     *
     */
    colorBlendOp: VkBlendOp;

    /**
     *
     */
    srcAlphaBlendFactor: VkBlendFactor;

    /**
     *
     */
    dstAlphaBlendFactor: VkBlendFactor;

    /**
     *
     */
    alphaBlendOp: VkBlendOp;

    /**
     *
     */
    colorWriteMask: VkColorComponentFlagBits;

  }

  interface VkPipelineColorBlendAttachmentStateInitializer {
    
    /**
     *
     */
    blendEnable?: boolean;

    /**
     *
     */
    srcColorBlendFactor?: VkBlendFactor;

    /**
     *
     */
    dstColorBlendFactor?: VkBlendFactor;

    /**
     *
     */
    colorBlendOp?: VkBlendOp;

    /**
     *
     */
    srcAlphaBlendFactor?: VkBlendFactor;

    /**
     *
     */
    dstAlphaBlendFactor?: VkBlendFactor;

    /**
     *
     */
    alphaBlendOp?: VkBlendOp;

    /**
     *
     */
    colorWriteMask?: VkColorComponentFlagBits;
  }

  interface VkPipelineColorBlendAttachmentStateConstructor {
    readonly prototype: VkPipelineColorBlendAttachmentState;
    new(param?: VkPipelineColorBlendAttachmentStateInitializer | null): VkPipelineColorBlendAttachmentState;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPipelineColorBlendAttachmentState: VkPipelineColorBlendAttachmentStateConstructor;

  
  
  /**
   * 
   */
  interface VkPipelineMultisampleStateCreateInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

    /**
     *
     */
    rasterizationSamples: VkSampleCountFlagBits;

    /**
     *
     */
    sampleShadingEnable: boolean;

    /**
     *
     */
    minSampleShading: number;

    /**
     *
     */
    pSampleMask: Uint32Array | null;

    /**
     *
     */
    alphaToCoverageEnable: boolean;

    /**
     *
     */
    alphaToOneEnable: boolean;

  }

  interface VkPipelineMultisampleStateCreateInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;

    /**
     *
     */
    rasterizationSamples?: VkSampleCountFlagBits;

    /**
     *
     */
    sampleShadingEnable?: boolean;

    /**
     *
     */
    minSampleShading?: number;

    /**
     *
     */
    pSampleMask?: Uint32Array | null;

    /**
     *
     */
    alphaToCoverageEnable?: boolean;

    /**
     *
     */
    alphaToOneEnable?: boolean;
  }

  interface VkPipelineMultisampleStateCreateInfoConstructor {
    readonly prototype: VkPipelineMultisampleStateCreateInfo;
    new(param?: VkPipelineMultisampleStateCreateInfoInitializer | null): VkPipelineMultisampleStateCreateInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPipelineMultisampleStateCreateInfo: VkPipelineMultisampleStateCreateInfoConstructor;

  
  
  /**
   * 
   */
  interface VkPipelineRasterizationStateCreateInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

    /**
     *
     */
    depthClampEnable: boolean;

    /**
     *
     */
    rasterizerDiscardEnable: boolean;

    /**
     *
     */
    polygonMode: VkPolygonMode;

    /**
     *
     */
    cullMode: VkCullModeFlagBits;

    /**
     *
     */
    frontFace: VkFrontFace;

    /**
     *
     */
    depthBiasEnable: boolean;

    /**
     *
     */
    depthBiasConstantFactor: number;

    /**
     *
     */
    depthBiasClamp: number;

    /**
     *
     */
    depthBiasSlopeFactor: number;

    /**
     *
     */
    lineWidth: number;

  }

  interface VkPipelineRasterizationStateCreateInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;

    /**
     *
     */
    depthClampEnable?: boolean;

    /**
     *
     */
    rasterizerDiscardEnable?: boolean;

    /**
     *
     */
    polygonMode?: VkPolygonMode;

    /**
     *
     */
    cullMode?: VkCullModeFlagBits;

    /**
     *
     */
    frontFace?: VkFrontFace;

    /**
     *
     */
    depthBiasEnable?: boolean;

    /**
     *
     */
    depthBiasConstantFactor?: number;

    /**
     *
     */
    depthBiasClamp?: number;

    /**
     *
     */
    depthBiasSlopeFactor?: number;

    /**
     *
     */
    lineWidth?: number;
  }

  interface VkPipelineRasterizationStateCreateInfoConstructor {
    readonly prototype: VkPipelineRasterizationStateCreateInfo;
    new(param?: VkPipelineRasterizationStateCreateInfoInitializer | null): VkPipelineRasterizationStateCreateInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPipelineRasterizationStateCreateInfo: VkPipelineRasterizationStateCreateInfoConstructor;

  
  
  /**
   * 
   */
  interface VkPipelineViewportStateCreateInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

    /**
     *
     */
    viewportCount: number;

    /**
     *
     */
    pViewports: VkViewport[] | null;

    /**
     *
     */
    scissorCount: number;

    /**
     *
     */
    pScissors: VkRect2D[] | null;

  }

  interface VkPipelineViewportStateCreateInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;

    /**
     *
     */
    viewportCount?: number;

    /**
     *
     */
    pViewports?: VkViewport[] | null;

    /**
     *
     */
    scissorCount?: number;

    /**
     *
     */
    pScissors?: VkRect2D[] | null;
  }

  interface VkPipelineViewportStateCreateInfoConstructor {
    readonly prototype: VkPipelineViewportStateCreateInfo;
    new(param?: VkPipelineViewportStateCreateInfoInitializer | null): VkPipelineViewportStateCreateInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPipelineViewportStateCreateInfo: VkPipelineViewportStateCreateInfoConstructor;

  
  
  /**
   * 
   */
  interface VkPipelineTessellationStateCreateInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

    /**
     *
     */
    patchControlPoints: number;

  }

  interface VkPipelineTessellationStateCreateInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;

    /**
     *
     */
    patchControlPoints?: number;
  }

  interface VkPipelineTessellationStateCreateInfoConstructor {
    readonly prototype: VkPipelineTessellationStateCreateInfo;
    new(param?: VkPipelineTessellationStateCreateInfoInitializer | null): VkPipelineTessellationStateCreateInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPipelineTessellationStateCreateInfo: VkPipelineTessellationStateCreateInfoConstructor;

  
  
  /**
   * 
   */
  interface VkPipelineInputAssemblyStateCreateInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

    /**
     *
     */
    topology: VkPrimitiveTopology;

    /**
     *
     */
    primitiveRestartEnable: boolean;

  }

  interface VkPipelineInputAssemblyStateCreateInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;

    /**
     *
     */
    topology?: VkPrimitiveTopology;

    /**
     *
     */
    primitiveRestartEnable?: boolean;
  }

  interface VkPipelineInputAssemblyStateCreateInfoConstructor {
    readonly prototype: VkPipelineInputAssemblyStateCreateInfo;
    new(param?: VkPipelineInputAssemblyStateCreateInfoInitializer | null): VkPipelineInputAssemblyStateCreateInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPipelineInputAssemblyStateCreateInfo: VkPipelineInputAssemblyStateCreateInfoConstructor;

  
  
  /**
   * 
   */
  interface VkPipelineVertexInputStateCreateInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

    /**
     *
     */
    vertexBindingDescriptionCount: number;

    /**
     *
     */
    pVertexBindingDescriptions: VkVertexInputBindingDescription[] | null;

    /**
     *
     */
    vertexAttributeDescriptionCount: number;

    /**
     *
     */
    pVertexAttributeDescriptions: VkVertexInputAttributeDescription[] | null;

  }

  interface VkPipelineVertexInputStateCreateInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;

    /**
     *
     */
    vertexBindingDescriptionCount?: number;

    /**
     *
     */
    pVertexBindingDescriptions?: VkVertexInputBindingDescription[] | null;

    /**
     *
     */
    vertexAttributeDescriptionCount?: number;

    /**
     *
     */
    pVertexAttributeDescriptions?: VkVertexInputAttributeDescription[] | null;
  }

  interface VkPipelineVertexInputStateCreateInfoConstructor {
    readonly prototype: VkPipelineVertexInputStateCreateInfo;
    new(param?: VkPipelineVertexInputStateCreateInfoInitializer | null): VkPipelineVertexInputStateCreateInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPipelineVertexInputStateCreateInfo: VkPipelineVertexInputStateCreateInfoConstructor;

  
  
  /**
   * 
   */
  interface VkVertexInputAttributeDescription {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    location: number;

    /**
     *
     */
    binding: number;

    /**
     *
     */
    format: VkFormat;

    /**
     *
     */
    offset: number;

  }

  interface VkVertexInputAttributeDescriptionInitializer {
    
    /**
     *
     */
    location?: number;

    /**
     *
     */
    binding?: number;

    /**
     *
     */
    format?: VkFormat;

    /**
     *
     */
    offset?: number;
  }

  interface VkVertexInputAttributeDescriptionConstructor {
    readonly prototype: VkVertexInputAttributeDescription;
    new(param?: VkVertexInputAttributeDescriptionInitializer | null): VkVertexInputAttributeDescription;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkVertexInputAttributeDescription: VkVertexInputAttributeDescriptionConstructor;

  
  
  /**
   * 
   */
  interface VkVertexInputBindingDescription {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    binding: number;

    /**
     *
     */
    stride: number;

    /**
     *
     */
    inputRate: VkVertexInputRate;

  }

  interface VkVertexInputBindingDescriptionInitializer {
    
    /**
     *
     */
    binding?: number;

    /**
     *
     */
    stride?: number;

    /**
     *
     */
    inputRate?: VkVertexInputRate;
  }

  interface VkVertexInputBindingDescriptionConstructor {
    readonly prototype: VkVertexInputBindingDescription;
    new(param?: VkVertexInputBindingDescriptionInitializer | null): VkVertexInputBindingDescription;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkVertexInputBindingDescription: VkVertexInputBindingDescriptionConstructor;

  
  
  /**
   * 
   */
  interface VkComputePipelineCreateInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkPipelineCreateFlagBits;

    /**
     *
     */
    stage: VkPipelineShaderStageCreateInfo | null;

    /**
     *
     */
    layout: VkPipelineLayout | null;

    /**
     *
     */
    basePipelineHandle: VkPipeline | null;

    /**
     *
     */
    basePipelineIndex: number;

  }

  interface VkComputePipelineCreateInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkPipelineCreateFlagBits;

    /**
     *
     */
    stage?: VkPipelineShaderStageCreateInfo | null;

    /**
     *
     */
    layout?: VkPipelineLayout | null;

    /**
     *
     */
    basePipelineHandle?: VkPipeline | null;

    /**
     *
     */
    basePipelineIndex?: number;
  }

  interface VkComputePipelineCreateInfoConstructor {
    readonly prototype: VkComputePipelineCreateInfo;
    new(param?: VkComputePipelineCreateInfoInitializer | null): VkComputePipelineCreateInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkComputePipelineCreateInfo: VkComputePipelineCreateInfoConstructor;

  
  
  /**
   * 
   */
  interface VkPipelineShaderStageCreateInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkPipelineShaderStageCreateFlagBits;

    /**
     *
     */
    stage: VkShaderStageFlagBits;

    /**
     *
     */
    module: VkShaderModule | null;

    /**
     *
     */
    pName: string | null;

    /**
     *
     */
    pSpecializationInfo: VkSpecializationInfo | null;

  }

  interface VkPipelineShaderStageCreateInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkPipelineShaderStageCreateFlagBits;

    /**
     *
     */
    stage?: VkShaderStageFlagBits;

    /**
     *
     */
    module?: VkShaderModule | null;

    /**
     *
     */
    pName?: string | null;

    /**
     *
     */
    pSpecializationInfo?: VkSpecializationInfo | null;
  }

  interface VkPipelineShaderStageCreateInfoConstructor {
    readonly prototype: VkPipelineShaderStageCreateInfo;
    new(param?: VkPipelineShaderStageCreateInfoInitializer | null): VkPipelineShaderStageCreateInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPipelineShaderStageCreateInfo: VkPipelineShaderStageCreateInfoConstructor;

  
  
  /**
   * 
   */
  interface VkSpecializationInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    mapEntryCount: number;

    /**
     *
     */
    pMapEntries: VkSpecializationMapEntry[] | null;

    /**
     *
     */
    dataSize: bigint | number;

    /**
     *
     */
    pData: ArrayBuffer | null;

  }

  interface VkSpecializationInfoInitializer {
    
    /**
     *
     */
    mapEntryCount?: number;

    /**
     *
     */
    pMapEntries?: VkSpecializationMapEntry[] | null;

    /**
     *
     */
    dataSize?: bigint | number;

    /**
     *
     */
    pData?: ArrayBuffer | null;
  }

  interface VkSpecializationInfoConstructor {
    readonly prototype: VkSpecializationInfo;
    new(param?: VkSpecializationInfoInitializer | null): VkSpecializationInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkSpecializationInfo: VkSpecializationInfoConstructor;

  
  
  /**
   * 
   */
  interface VkSpecializationMapEntry {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    constantID: number;

    /**
     *
     */
    offset: number;

    /**
     *
     */
    size: bigint | number;

  }

  interface VkSpecializationMapEntryInitializer {
    
    /**
     *
     */
    constantID?: number;

    /**
     *
     */
    offset?: number;

    /**
     *
     */
    size?: bigint | number;
  }

  interface VkSpecializationMapEntryConstructor {
    readonly prototype: VkSpecializationMapEntry;
    new(param?: VkSpecializationMapEntryInitializer | null): VkSpecializationMapEntry;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkSpecializationMapEntry: VkSpecializationMapEntryConstructor;

  
  
  /**
   * 
   */
  interface VkDescriptorSetAllocateInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    descriptorPool: VkDescriptorPool | null;

    /**
     *
     */
    descriptorSetCount: number;

    /**
     *
     */
    pSetLayouts: VkDescriptorSetLayout[] | null;

  }

  interface VkDescriptorSetAllocateInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    descriptorPool?: VkDescriptorPool | null;

    /**
     *
     */
    descriptorSetCount?: number;

    /**
     *
     */
    pSetLayouts?: VkDescriptorSetLayout[] | null;
  }

  interface VkDescriptorSetAllocateInfoConstructor {
    readonly prototype: VkDescriptorSetAllocateInfo;
    new(param?: VkDescriptorSetAllocateInfoInitializer | null): VkDescriptorSetAllocateInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDescriptorSetAllocateInfo: VkDescriptorSetAllocateInfoConstructor;

  
  
  /**
   * 
   */
  interface VkDescriptorPoolCreateInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkDescriptorPoolCreateFlagBits;

    /**
     *
     */
    maxSets: number;

    /**
     *
     */
    poolSizeCount: number;

    /**
     *
     */
    pPoolSizes: VkDescriptorPoolSize[] | null;

  }

  interface VkDescriptorPoolCreateInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkDescriptorPoolCreateFlagBits;

    /**
     *
     */
    maxSets?: number;

    /**
     *
     */
    poolSizeCount?: number;

    /**
     *
     */
    pPoolSizes?: VkDescriptorPoolSize[] | null;
  }

  interface VkDescriptorPoolCreateInfoConstructor {
    readonly prototype: VkDescriptorPoolCreateInfo;
    new(param?: VkDescriptorPoolCreateInfoInitializer | null): VkDescriptorPoolCreateInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDescriptorPoolCreateInfo: VkDescriptorPoolCreateInfoConstructor;

  
  
  /**
   * 
   */
  interface VkDescriptorPoolSize {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    type: VkDescriptorType;

    /**
     *
     */
    descriptorCount: number;

  }

  interface VkDescriptorPoolSizeInitializer {
    
    /**
     *
     */
    type?: VkDescriptorType;

    /**
     *
     */
    descriptorCount?: number;
  }

  interface VkDescriptorPoolSizeConstructor {
    readonly prototype: VkDescriptorPoolSize;
    new(param?: VkDescriptorPoolSizeInitializer | null): VkDescriptorPoolSize;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDescriptorPoolSize: VkDescriptorPoolSizeConstructor;

  
  
  /**
   * 
   */
  interface VkDescriptorSetLayoutCreateInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkDescriptorSetLayoutCreateFlagBits;

    /**
     *
     */
    bindingCount: number;

    /**
     *
     */
    pBindings: VkDescriptorSetLayoutBinding[] | null;

  }

  interface VkDescriptorSetLayoutCreateInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkDescriptorSetLayoutCreateFlagBits;

    /**
     *
     */
    bindingCount?: number;

    /**
     *
     */
    pBindings?: VkDescriptorSetLayoutBinding[] | null;
  }

  interface VkDescriptorSetLayoutCreateInfoConstructor {
    readonly prototype: VkDescriptorSetLayoutCreateInfo;
    new(param?: VkDescriptorSetLayoutCreateInfoInitializer | null): VkDescriptorSetLayoutCreateInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDescriptorSetLayoutCreateInfo: VkDescriptorSetLayoutCreateInfoConstructor;

  
  
  /**
   * 
   */
  interface VkDescriptorSetLayoutBinding {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    binding: number;

    /**
     *
     */
    descriptorType: VkDescriptorType;

    /**
     *
     */
    descriptorCount: number;

    /**
     *
     */
    stageFlags: VkShaderStageFlagBits;

    /**
     *
     */
    pImmutableSamplers: VkSampler[] | null;

  }

  interface VkDescriptorSetLayoutBindingInitializer {
    
    /**
     *
     */
    binding?: number;

    /**
     *
     */
    descriptorType?: VkDescriptorType;

    /**
     *
     */
    descriptorCount?: number;

    /**
     *
     */
    stageFlags?: VkShaderStageFlagBits;

    /**
     *
     */
    pImmutableSamplers?: VkSampler[] | null;
  }

  interface VkDescriptorSetLayoutBindingConstructor {
    readonly prototype: VkDescriptorSetLayoutBinding;
    new(param?: VkDescriptorSetLayoutBindingInitializer | null): VkDescriptorSetLayoutBinding;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDescriptorSetLayoutBinding: VkDescriptorSetLayoutBindingConstructor;

  
  
  /**
   * 
   */
  interface VkShaderModuleCreateInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkShaderModuleCreateFlagBits;

    /**
     *
     */
    codeSize: bigint | number;

    /**
     *
     */
    pCode: Uint8Array | null;

  }

  interface VkShaderModuleCreateInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkShaderModuleCreateFlagBits;

    /**
     *
     */
    codeSize?: bigint | number;

    /**
     *
     */
    pCode?: Uint8Array | null;
  }

  interface VkShaderModuleCreateInfoConstructor {
    readonly prototype: VkShaderModuleCreateInfo;
    new(param?: VkShaderModuleCreateInfoInitializer | null): VkShaderModuleCreateInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkShaderModuleCreateInfo: VkShaderModuleCreateInfoConstructor;

  
  
  /**
   * 
   */
  interface VkImageResolve {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    srcSubresource: VkImageSubresourceLayers | null;

    /**
     *
     */
    srcOffset: VkOffset3D | null;

    /**
     *
     */
    dstSubresource: VkImageSubresourceLayers | null;

    /**
     *
     */
    dstOffset: VkOffset3D | null;

    /**
     *
     */
    extent: VkExtent3D | null;

  }

  interface VkImageResolveInitializer {
    
    /**
     *
     */
    srcSubresource?: VkImageSubresourceLayers | null;

    /**
     *
     */
    srcOffset?: VkOffset3D | null;

    /**
     *
     */
    dstSubresource?: VkImageSubresourceLayers | null;

    /**
     *
     */
    dstOffset?: VkOffset3D | null;

    /**
     *
     */
    extent?: VkExtent3D | null;
  }

  interface VkImageResolveConstructor {
    readonly prototype: VkImageResolve;
    new(param?: VkImageResolveInitializer | null): VkImageResolve;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkImageResolve: VkImageResolveConstructor;

  
  
  /**
   * 
   */
  interface VkBufferImageCopy {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    bufferOffset: bigint | number;

    /**
     *
     */
    bufferRowLength: number;

    /**
     *
     */
    bufferImageHeight: number;

    /**
     *
     */
    imageSubresource: VkImageSubresourceLayers | null;

    /**
     *
     */
    imageOffset: VkOffset3D | null;

    /**
     *
     */
    imageExtent: VkExtent3D | null;

  }

  interface VkBufferImageCopyInitializer {
    
    /**
     *
     */
    bufferOffset?: bigint | number;

    /**
     *
     */
    bufferRowLength?: number;

    /**
     *
     */
    bufferImageHeight?: number;

    /**
     *
     */
    imageSubresource?: VkImageSubresourceLayers | null;

    /**
     *
     */
    imageOffset?: VkOffset3D | null;

    /**
     *
     */
    imageExtent?: VkExtent3D | null;
  }

  interface VkBufferImageCopyConstructor {
    readonly prototype: VkBufferImageCopy;
    new(param?: VkBufferImageCopyInitializer | null): VkBufferImageCopy;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkBufferImageCopy: VkBufferImageCopyConstructor;

  
  
  /**
   * 
   */
  interface VkImageBlit {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    srcSubresource: VkImageSubresourceLayers | null;

    /**
     *
     */
    srcOffsets: VkOffset3D[] | null;

    /**
     *
     */
    dstSubresource: VkImageSubresourceLayers | null;

    /**
     *
     */
    dstOffsets: VkOffset3D[] | null;

  }

  interface VkImageBlitInitializer {
    
    /**
     *
     */
    srcSubresource?: VkImageSubresourceLayers | null;

    /**
     *
     */
    srcOffsets?: VkOffset3D[] | null;

    /**
     *
     */
    dstSubresource?: VkImageSubresourceLayers | null;

    /**
     *
     */
    dstOffsets?: VkOffset3D[] | null;
  }

  interface VkImageBlitConstructor {
    readonly prototype: VkImageBlit;
    new(param?: VkImageBlitInitializer | null): VkImageBlit;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkImageBlit: VkImageBlitConstructor;

  
  
  /**
   * 
   */
  interface VkImageCopy {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    srcSubresource: VkImageSubresourceLayers | null;

    /**
     *
     */
    srcOffset: VkOffset3D | null;

    /**
     *
     */
    dstSubresource: VkImageSubresourceLayers | null;

    /**
     *
     */
    dstOffset: VkOffset3D | null;

    /**
     *
     */
    extent: VkExtent3D | null;

  }

  interface VkImageCopyInitializer {
    
    /**
     *
     */
    srcSubresource?: VkImageSubresourceLayers | null;

    /**
     *
     */
    srcOffset?: VkOffset3D | null;

    /**
     *
     */
    dstSubresource?: VkImageSubresourceLayers | null;

    /**
     *
     */
    dstOffset?: VkOffset3D | null;

    /**
     *
     */
    extent?: VkExtent3D | null;
  }

  interface VkImageCopyConstructor {
    readonly prototype: VkImageCopy;
    new(param?: VkImageCopyInitializer | null): VkImageCopy;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkImageCopy: VkImageCopyConstructor;

  
  
  /**
   * 
   */
  interface VkBindSparseInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    waitSemaphoreCount: number;

    /**
     *
     */
    pWaitSemaphores: VkSemaphore[] | null;

    /**
     *
     */
    bufferBindCount: number;

    /**
     *
     */
    pBufferBinds: VkSparseBufferMemoryBindInfo[] | null;

    /**
     *
     */
    imageOpaqueBindCount: number;

    /**
     *
     */
    pImageOpaqueBinds: VkSparseImageOpaqueMemoryBindInfo[] | null;

    /**
     *
     */
    imageBindCount: number;

    /**
     *
     */
    pImageBinds: VkSparseImageMemoryBindInfo[] | null;

    /**
     *
     */
    signalSemaphoreCount: number;

    /**
     *
     */
    pSignalSemaphores: VkSemaphore[] | null;

  }

  interface VkBindSparseInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    waitSemaphoreCount?: number;

    /**
     *
     */
    pWaitSemaphores?: VkSemaphore[] | null;

    /**
     *
     */
    bufferBindCount?: number;

    /**
     *
     */
    pBufferBinds?: VkSparseBufferMemoryBindInfo[] | null;

    /**
     *
     */
    imageOpaqueBindCount?: number;

    /**
     *
     */
    pImageOpaqueBinds?: VkSparseImageOpaqueMemoryBindInfo[] | null;

    /**
     *
     */
    imageBindCount?: number;

    /**
     *
     */
    pImageBinds?: VkSparseImageMemoryBindInfo[] | null;

    /**
     *
     */
    signalSemaphoreCount?: number;

    /**
     *
     */
    pSignalSemaphores?: VkSemaphore[] | null;
  }

  interface VkBindSparseInfoConstructor {
    readonly prototype: VkBindSparseInfo;
    new(param?: VkBindSparseInfoInitializer | null): VkBindSparseInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkBindSparseInfo: VkBindSparseInfoConstructor;

  
  
  /**
   * 
   */
  interface VkSparseImageMemoryBindInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    image: VkImage | null;

    /**
     *
     */
    bindCount: number;

    /**
     *
     */
    pBinds: VkSparseImageMemoryBind[] | null;

  }

  interface VkSparseImageMemoryBindInfoInitializer {
    
    /**
     *
     */
    image?: VkImage | null;

    /**
     *
     */
    bindCount?: number;

    /**
     *
     */
    pBinds?: VkSparseImageMemoryBind[] | null;
  }

  interface VkSparseImageMemoryBindInfoConstructor {
    readonly prototype: VkSparseImageMemoryBindInfo;
    new(param?: VkSparseImageMemoryBindInfoInitializer | null): VkSparseImageMemoryBindInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkSparseImageMemoryBindInfo: VkSparseImageMemoryBindInfoConstructor;

  
  
  /**
   * 
   */
  interface VkSparseImageOpaqueMemoryBindInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    image: VkImage | null;

    /**
     *
     */
    bindCount: number;

    /**
     *
     */
    pBinds: VkSparseMemoryBind[] | null;

  }

  interface VkSparseImageOpaqueMemoryBindInfoInitializer {
    
    /**
     *
     */
    image?: VkImage | null;

    /**
     *
     */
    bindCount?: number;

    /**
     *
     */
    pBinds?: VkSparseMemoryBind[] | null;
  }

  interface VkSparseImageOpaqueMemoryBindInfoConstructor {
    readonly prototype: VkSparseImageOpaqueMemoryBindInfo;
    new(param?: VkSparseImageOpaqueMemoryBindInfoInitializer | null): VkSparseImageOpaqueMemoryBindInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkSparseImageOpaqueMemoryBindInfo: VkSparseImageOpaqueMemoryBindInfoConstructor;

  
  
  /**
   * 
   */
  interface VkSparseBufferMemoryBindInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    buffer: VkBuffer | null;

    /**
     *
     */
    bindCount: number;

    /**
     *
     */
    pBinds: VkSparseMemoryBind[] | null;

  }

  interface VkSparseBufferMemoryBindInfoInitializer {
    
    /**
     *
     */
    buffer?: VkBuffer | null;

    /**
     *
     */
    bindCount?: number;

    /**
     *
     */
    pBinds?: VkSparseMemoryBind[] | null;
  }

  interface VkSparseBufferMemoryBindInfoConstructor {
    readonly prototype: VkSparseBufferMemoryBindInfo;
    new(param?: VkSparseBufferMemoryBindInfoInitializer | null): VkSparseBufferMemoryBindInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkSparseBufferMemoryBindInfo: VkSparseBufferMemoryBindInfoConstructor;

  
  
  /**
   * 
   */
  interface VkSparseImageMemoryBind {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    subresource: VkImageSubresource | null;

    /**
     *
     */
    offset: VkOffset3D | null;

    /**
     *
     */
    extent: VkExtent3D | null;

    /**
     *
     */
    memory: VkDeviceMemory | null;

    /**
     *
     */
    memoryOffset: bigint | number;

    /**
     *
     */
    flags: VkSparseMemoryBindFlagBits;

  }

  interface VkSparseImageMemoryBindInitializer {
    
    /**
     *
     */
    subresource?: VkImageSubresource | null;

    /**
     *
     */
    offset?: VkOffset3D | null;

    /**
     *
     */
    extent?: VkExtent3D | null;

    /**
     *
     */
    memory?: VkDeviceMemory | null;

    /**
     *
     */
    memoryOffset?: bigint | number;

    /**
     *
     */
    flags?: VkSparseMemoryBindFlagBits;
  }

  interface VkSparseImageMemoryBindConstructor {
    readonly prototype: VkSparseImageMemoryBind;
    new(param?: VkSparseImageMemoryBindInitializer | null): VkSparseImageMemoryBind;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkSparseImageMemoryBind: VkSparseImageMemoryBindConstructor;

  
  
  /**
   * 
   */
  interface VkSparseMemoryBind {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    resourceOffset: bigint | number;

    /**
     *
     */
    size: bigint | number;

    /**
     *
     */
    memory: VkDeviceMemory | null;

    /**
     *
     */
    memoryOffset: bigint | number;

    /**
     *
     */
    flags: VkSparseMemoryBindFlagBits;

  }

  interface VkSparseMemoryBindInitializer {
    
    /**
     *
     */
    resourceOffset?: bigint | number;

    /**
     *
     */
    size?: bigint | number;

    /**
     *
     */
    memory?: VkDeviceMemory | null;

    /**
     *
     */
    memoryOffset?: bigint | number;

    /**
     *
     */
    flags?: VkSparseMemoryBindFlagBits;
  }

  interface VkSparseMemoryBindConstructor {
    readonly prototype: VkSparseMemoryBind;
    new(param?: VkSparseMemoryBindInitializer | null): VkSparseMemoryBind;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkSparseMemoryBind: VkSparseMemoryBindConstructor;

  
  
  /**
   * 
   */
  interface VkBufferCopy {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    srcOffset: bigint | number;

    /**
     *
     */
    dstOffset: bigint | number;

    /**
     *
     */
    size: bigint | number;

  }

  interface VkBufferCopyInitializer {
    
    /**
     *
     */
    srcOffset?: bigint | number;

    /**
     *
     */
    dstOffset?: bigint | number;

    /**
     *
     */
    size?: bigint | number;
  }

  interface VkBufferCopyConstructor {
    readonly prototype: VkBufferCopy;
    new(param?: VkBufferCopyInitializer | null): VkBufferCopy;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkBufferCopy: VkBufferCopyConstructor;

  
  
  /**
   * 
   */
  interface VkImageViewCreateInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkImageViewCreateFlagBits;

    /**
     *
     */
    image: VkImage | null;

    /**
     *
     */
    viewType: VkImageViewType;

    /**
     *
     */
    format: VkFormat;

    /**
     *
     */
    components: VkComponentMapping | null;

    /**
     *
     */
    subresourceRange: VkImageSubresourceRange | null;

  }

  interface VkImageViewCreateInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkImageViewCreateFlagBits;

    /**
     *
     */
    image?: VkImage | null;

    /**
     *
     */
    viewType?: VkImageViewType;

    /**
     *
     */
    format?: VkFormat;

    /**
     *
     */
    components?: VkComponentMapping | null;

    /**
     *
     */
    subresourceRange?: VkImageSubresourceRange | null;
  }

  interface VkImageViewCreateInfoConstructor {
    readonly prototype: VkImageViewCreateInfo;
    new(param?: VkImageViewCreateInfoInitializer | null): VkImageViewCreateInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkImageViewCreateInfo: VkImageViewCreateInfoConstructor;

  
  
  /**
   * 
   */
  interface VkSubresourceLayout {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly offset: bigint | number;

    /**
     *
     */
    readonly size: bigint | number;

    /**
     *
     */
    readonly rowPitch: bigint | number;

    /**
     *
     */
    readonly arrayPitch: bigint | number;

    /**
     *
     */
    readonly depthPitch: bigint | number;

  }

  interface VkSubresourceLayoutInitializer {
    
    /**
     *
     */
    readonly offset?: bigint | number;

    /**
     *
     */
    readonly size?: bigint | number;

    /**
     *
     */
    readonly rowPitch?: bigint | number;

    /**
     *
     */
    readonly arrayPitch?: bigint | number;

    /**
     *
     */
    readonly depthPitch?: bigint | number;
  }

  interface VkSubresourceLayoutConstructor {
    readonly prototype: VkSubresourceLayout;
    new(param?: VkSubresourceLayoutInitializer | null): VkSubresourceLayout;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkSubresourceLayout: VkSubresourceLayoutConstructor;

  
  
  /**
   * 
   */
  interface VkImageCreateInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkImageCreateFlagBits;

    /**
     *
     */
    imageType: VkImageType;

    /**
     *
     */
    format: VkFormat;

    /**
     *
     */
    extent: VkExtent3D | null;

    /**
     *
     */
    mipLevels: number;

    /**
     *
     */
    arrayLayers: number;

    /**
     *
     */
    samples: VkSampleCountFlagBits;

    /**
     *
     */
    tiling: VkImageTiling;

    /**
     *
     */
    usage: VkImageUsageFlagBits;

    /**
     *
     */
    sharingMode: VkSharingMode;

    /**
     *
     */
    queueFamilyIndexCount: number;

    /**
     *
     */
    pQueueFamilyIndices: Uint32Array | null;

    /**
     *
     */
    initialLayout: VkImageLayout;

  }

  interface VkImageCreateInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkImageCreateFlagBits;

    /**
     *
     */
    imageType?: VkImageType;

    /**
     *
     */
    format?: VkFormat;

    /**
     *
     */
    extent?: VkExtent3D | null;

    /**
     *
     */
    mipLevels?: number;

    /**
     *
     */
    arrayLayers?: number;

    /**
     *
     */
    samples?: VkSampleCountFlagBits;

    /**
     *
     */
    tiling?: VkImageTiling;

    /**
     *
     */
    usage?: VkImageUsageFlagBits;

    /**
     *
     */
    sharingMode?: VkSharingMode;

    /**
     *
     */
    queueFamilyIndexCount?: number;

    /**
     *
     */
    pQueueFamilyIndices?: Uint32Array | null;

    /**
     *
     */
    initialLayout?: VkImageLayout;
  }

  interface VkImageCreateInfoConstructor {
    readonly prototype: VkImageCreateInfo;
    new(param?: VkImageCreateInfoInitializer | null): VkImageCreateInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkImageCreateInfo: VkImageCreateInfoConstructor;

  
  
  /**
   * 
   */
  interface VkImageMemoryBarrier {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    srcAccessMask: VkAccessFlagBits;

    /**
     *
     */
    dstAccessMask: VkAccessFlagBits;

    /**
     *
     */
    oldLayout: VkImageLayout;

    /**
     *
     */
    newLayout: VkImageLayout;

    /**
     *
     */
    srcQueueFamilyIndex: number;

    /**
     *
     */
    dstQueueFamilyIndex: number;

    /**
     *
     */
    image: VkImage | null;

    /**
     *
     */
    subresourceRange: VkImageSubresourceRange | null;

  }

  interface VkImageMemoryBarrierInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    srcAccessMask?: VkAccessFlagBits;

    /**
     *
     */
    dstAccessMask?: VkAccessFlagBits;

    /**
     *
     */
    oldLayout?: VkImageLayout;

    /**
     *
     */
    newLayout?: VkImageLayout;

    /**
     *
     */
    srcQueueFamilyIndex?: number;

    /**
     *
     */
    dstQueueFamilyIndex?: number;

    /**
     *
     */
    image?: VkImage | null;

    /**
     *
     */
    subresourceRange?: VkImageSubresourceRange | null;
  }

  interface VkImageMemoryBarrierConstructor {
    readonly prototype: VkImageMemoryBarrier;
    new(param?: VkImageMemoryBarrierInitializer | null): VkImageMemoryBarrier;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkImageMemoryBarrier: VkImageMemoryBarrierConstructor;

  
  
  /**
   * 
   */
  interface VkBufferMemoryBarrier {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    srcAccessMask: VkAccessFlagBits;

    /**
     *
     */
    dstAccessMask: VkAccessFlagBits;

    /**
     *
     */
    srcQueueFamilyIndex: number;

    /**
     *
     */
    dstQueueFamilyIndex: number;

    /**
     *
     */
    buffer: VkBuffer | null;

    /**
     *
     */
    offset: bigint | number;

    /**
     *
     */
    size: bigint | number;

  }

  interface VkBufferMemoryBarrierInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    srcAccessMask?: VkAccessFlagBits;

    /**
     *
     */
    dstAccessMask?: VkAccessFlagBits;

    /**
     *
     */
    srcQueueFamilyIndex?: number;

    /**
     *
     */
    dstQueueFamilyIndex?: number;

    /**
     *
     */
    buffer?: VkBuffer | null;

    /**
     *
     */
    offset?: bigint | number;

    /**
     *
     */
    size?: bigint | number;
  }

  interface VkBufferMemoryBarrierConstructor {
    readonly prototype: VkBufferMemoryBarrier;
    new(param?: VkBufferMemoryBarrierInitializer | null): VkBufferMemoryBarrier;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkBufferMemoryBarrier: VkBufferMemoryBarrierConstructor;

  
  
  /**
   * 
   */
  interface VkMemoryBarrier {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    srcAccessMask: VkAccessFlagBits;

    /**
     *
     */
    dstAccessMask: VkAccessFlagBits;

  }

  interface VkMemoryBarrierInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    srcAccessMask?: VkAccessFlagBits;

    /**
     *
     */
    dstAccessMask?: VkAccessFlagBits;
  }

  interface VkMemoryBarrierConstructor {
    readonly prototype: VkMemoryBarrier;
    new(param?: VkMemoryBarrierInitializer | null): VkMemoryBarrier;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkMemoryBarrier: VkMemoryBarrierConstructor;

  
  
  /**
   * 
   */
  interface VkImageSubresourceRange {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    aspectMask: VkImageAspectFlagBits;

    /**
     *
     */
    baseMipLevel: number;

    /**
     *
     */
    levelCount: number;

    /**
     *
     */
    baseArrayLayer: number;

    /**
     *
     */
    layerCount: number;

  }

  interface VkImageSubresourceRangeInitializer {
    
    /**
     *
     */
    aspectMask?: VkImageAspectFlagBits;

    /**
     *
     */
    baseMipLevel?: number;

    /**
     *
     */
    levelCount?: number;

    /**
     *
     */
    baseArrayLayer?: number;

    /**
     *
     */
    layerCount?: number;
  }

  interface VkImageSubresourceRangeConstructor {
    readonly prototype: VkImageSubresourceRange;
    new(param?: VkImageSubresourceRangeInitializer | null): VkImageSubresourceRange;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkImageSubresourceRange: VkImageSubresourceRangeConstructor;

  
  
  /**
   * 
   */
  interface VkImageSubresourceLayers {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    aspectMask: VkImageAspectFlagBits;

    /**
     *
     */
    mipLevel: number;

    /**
     *
     */
    baseArrayLayer: number;

    /**
     *
     */
    layerCount: number;

  }

  interface VkImageSubresourceLayersInitializer {
    
    /**
     *
     */
    aspectMask?: VkImageAspectFlagBits;

    /**
     *
     */
    mipLevel?: number;

    /**
     *
     */
    baseArrayLayer?: number;

    /**
     *
     */
    layerCount?: number;
  }

  interface VkImageSubresourceLayersConstructor {
    readonly prototype: VkImageSubresourceLayers;
    new(param?: VkImageSubresourceLayersInitializer | null): VkImageSubresourceLayers;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkImageSubresourceLayers: VkImageSubresourceLayersConstructor;

  
  
  /**
   * 
   */
  interface VkImageSubresource {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    aspectMask: VkImageAspectFlagBits;

    /**
     *
     */
    mipLevel: number;

    /**
     *
     */
    arrayLayer: number;

  }

  interface VkImageSubresourceInitializer {
    
    /**
     *
     */
    aspectMask?: VkImageAspectFlagBits;

    /**
     *
     */
    mipLevel?: number;

    /**
     *
     */
    arrayLayer?: number;
  }

  interface VkImageSubresourceConstructor {
    readonly prototype: VkImageSubresource;
    new(param?: VkImageSubresourceInitializer | null): VkImageSubresource;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkImageSubresource: VkImageSubresourceConstructor;

  
  
  /**
   * 
   */
  interface VkBufferViewCreateInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

    /**
     *
     */
    buffer: VkBuffer | null;

    /**
     *
     */
    format: VkFormat;

    /**
     *
     */
    offset: bigint | number;

    /**
     *
     */
    range: bigint | number;

  }

  interface VkBufferViewCreateInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;

    /**
     *
     */
    buffer?: VkBuffer | null;

    /**
     *
     */
    format?: VkFormat;

    /**
     *
     */
    offset?: bigint | number;

    /**
     *
     */
    range?: bigint | number;
  }

  interface VkBufferViewCreateInfoConstructor {
    readonly prototype: VkBufferViewCreateInfo;
    new(param?: VkBufferViewCreateInfoInitializer | null): VkBufferViewCreateInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkBufferViewCreateInfo: VkBufferViewCreateInfoConstructor;

  
  
  /**
   * 
   */
  interface VkBufferCreateInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkBufferCreateFlagBits;

    /**
     *
     */
    size: bigint | number;

    /**
     *
     */
    usage: VkBufferUsageFlagBits;

    /**
     *
     */
    sharingMode: VkSharingMode;

    /**
     *
     */
    queueFamilyIndexCount: number;

    /**
     *
     */
    pQueueFamilyIndices: Uint32Array | null;

  }

  interface VkBufferCreateInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkBufferCreateFlagBits;

    /**
     *
     */
    size?: bigint | number;

    /**
     *
     */
    usage?: VkBufferUsageFlagBits;

    /**
     *
     */
    sharingMode?: VkSharingMode;

    /**
     *
     */
    queueFamilyIndexCount?: number;

    /**
     *
     */
    pQueueFamilyIndices?: Uint32Array | null;
  }

  interface VkBufferCreateInfoConstructor {
    readonly prototype: VkBufferCreateInfo;
    new(param?: VkBufferCreateInfoInitializer | null): VkBufferCreateInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkBufferCreateInfo: VkBufferCreateInfoConstructor;

  
  
  /**
   * 
   */
  interface VkCopyDescriptorSet {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    srcSet: VkDescriptorSet | null;

    /**
     *
     */
    srcBinding: number;

    /**
     *
     */
    srcArrayElement: number;

    /**
     *
     */
    dstSet: VkDescriptorSet | null;

    /**
     *
     */
    dstBinding: number;

    /**
     *
     */
    dstArrayElement: number;

    /**
     *
     */
    descriptorCount: number;

  }

  interface VkCopyDescriptorSetInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    srcSet?: VkDescriptorSet | null;

    /**
     *
     */
    srcBinding?: number;

    /**
     *
     */
    srcArrayElement?: number;

    /**
     *
     */
    dstSet?: VkDescriptorSet | null;

    /**
     *
     */
    dstBinding?: number;

    /**
     *
     */
    dstArrayElement?: number;

    /**
     *
     */
    descriptorCount?: number;
  }

  interface VkCopyDescriptorSetConstructor {
    readonly prototype: VkCopyDescriptorSet;
    new(param?: VkCopyDescriptorSetInitializer | null): VkCopyDescriptorSet;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkCopyDescriptorSet: VkCopyDescriptorSetConstructor;

  
  
  /**
   * 
   */
  interface VkWriteDescriptorSet {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    dstSet: VkDescriptorSet | null;

    /**
     *
     */
    dstBinding: number;

    /**
     *
     */
    dstArrayElement: number;

    /**
     *
     */
    descriptorCount: number;

    /**
     *
     */
    descriptorType: VkDescriptorType;

    /**
     *
     */
    pImageInfo: VkDescriptorImageInfo[] | null;

    /**
     *
     */
    pBufferInfo: VkDescriptorBufferInfo[] | null;

    /**
     *
     */
    pTexelBufferView: VkBufferView[] | null;

  }

  interface VkWriteDescriptorSetInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    dstSet?: VkDescriptorSet | null;

    /**
     *
     */
    dstBinding?: number;

    /**
     *
     */
    dstArrayElement?: number;

    /**
     *
     */
    descriptorCount?: number;

    /**
     *
     */
    descriptorType?: VkDescriptorType;

    /**
     *
     */
    pImageInfo?: VkDescriptorImageInfo[] | null;

    /**
     *
     */
    pBufferInfo?: VkDescriptorBufferInfo[] | null;

    /**
     *
     */
    pTexelBufferView?: VkBufferView[] | null;
  }

  interface VkWriteDescriptorSetConstructor {
    readonly prototype: VkWriteDescriptorSet;
    new(param?: VkWriteDescriptorSetInitializer | null): VkWriteDescriptorSet;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkWriteDescriptorSet: VkWriteDescriptorSetConstructor;

  
  
  /**
   * 
   */
  interface VkDescriptorImageInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sampler: VkSampler | null;

    /**
     *
     */
    imageView: VkImageView | null;

    /**
     *
     */
    imageLayout: VkImageLayout;

  }

  interface VkDescriptorImageInfoInitializer {
    
    /**
     *
     */
    sampler?: VkSampler | null;

    /**
     *
     */
    imageView?: VkImageView | null;

    /**
     *
     */
    imageLayout?: VkImageLayout;
  }

  interface VkDescriptorImageInfoConstructor {
    readonly prototype: VkDescriptorImageInfo;
    new(param?: VkDescriptorImageInfoInitializer | null): VkDescriptorImageInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDescriptorImageInfo: VkDescriptorImageInfoConstructor;

  
  
  /**
   * 
   */
  interface VkDescriptorBufferInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    buffer: VkBuffer | null;

    /**
     *
     */
    offset: bigint | number;

    /**
     *
     */
    range: bigint | number;

  }

  interface VkDescriptorBufferInfoInitializer {
    
    /**
     *
     */
    buffer?: VkBuffer | null;

    /**
     *
     */
    offset?: bigint | number;

    /**
     *
     */
    range?: bigint | number;
  }

  interface VkDescriptorBufferInfoConstructor {
    readonly prototype: VkDescriptorBufferInfo;
    new(param?: VkDescriptorBufferInfoInitializer | null): VkDescriptorBufferInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDescriptorBufferInfo: VkDescriptorBufferInfoConstructor;

  
  
  /**
   * 
   */
  interface VkImageFormatProperties {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly maxExtent: VkExtent3D | null;

    /**
     *
     */
    readonly maxMipLevels: number;

    /**
     *
     */
    readonly maxArrayLayers: number;

    /**
     *
     */
    readonly sampleCounts: VkSampleCountFlagBits;

    /**
     *
     */
    readonly maxResourceSize: bigint | number;

  }

  interface VkImageFormatPropertiesInitializer {
    
    /**
     *
     */
    readonly maxExtent?: VkExtent3D | null;

    /**
     *
     */
    readonly maxMipLevels?: number;

    /**
     *
     */
    readonly maxArrayLayers?: number;

    /**
     *
     */
    readonly sampleCounts?: VkSampleCountFlagBits;

    /**
     *
     */
    readonly maxResourceSize?: bigint | number;
  }

  interface VkImageFormatPropertiesConstructor {
    readonly prototype: VkImageFormatProperties;
    new(param?: VkImageFormatPropertiesInitializer | null): VkImageFormatProperties;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkImageFormatProperties: VkImageFormatPropertiesConstructor;

  
  
  /**
   * 
   */
  interface VkFormatProperties {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly linearTilingFeatures: VkFormatFeatureFlagBits;

    /**
     *
     */
    readonly optimalTilingFeatures: VkFormatFeatureFlagBits;

    /**
     *
     */
    readonly bufferFeatures: VkFormatFeatureFlagBits;

  }

  interface VkFormatPropertiesInitializer {
    
    /**
     *
     */
    readonly linearTilingFeatures?: VkFormatFeatureFlagBits;

    /**
     *
     */
    readonly optimalTilingFeatures?: VkFormatFeatureFlagBits;

    /**
     *
     */
    readonly bufferFeatures?: VkFormatFeatureFlagBits;
  }

  interface VkFormatPropertiesConstructor {
    readonly prototype: VkFormatProperties;
    new(param?: VkFormatPropertiesInitializer | null): VkFormatProperties;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkFormatProperties: VkFormatPropertiesConstructor;

  
  
  /**
   * 
   */
  interface VkMappedMemoryRange {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    memory: VkDeviceMemory | null;

    /**
     *
     */
    offset: bigint | number;

    /**
     *
     */
    size: bigint | number;

  }

  interface VkMappedMemoryRangeInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    memory?: VkDeviceMemory | null;

    /**
     *
     */
    offset?: bigint | number;

    /**
     *
     */
    size?: bigint | number;
  }

  interface VkMappedMemoryRangeConstructor {
    readonly prototype: VkMappedMemoryRange;
    new(param?: VkMappedMemoryRangeInitializer | null): VkMappedMemoryRange;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkMappedMemoryRange: VkMappedMemoryRangeConstructor;

  
  
  /**
   * 
   */
  interface VkMemoryHeap {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly size: bigint | number;

    /**
     *
     */
    readonly flags: VkMemoryHeapFlagBits;

  }

  interface VkMemoryHeapInitializer {
    
    /**
     *
     */
    readonly size?: bigint | number;

    /**
     *
     */
    readonly flags?: VkMemoryHeapFlagBits;
  }

  interface VkMemoryHeapConstructor {
    readonly prototype: VkMemoryHeap;
    new(param?: VkMemoryHeapInitializer | null): VkMemoryHeap;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkMemoryHeap: VkMemoryHeapConstructor;

  
  
  /**
   * 
   */
  interface VkMemoryType {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly propertyFlags: VkMemoryPropertyFlagBits;

    /**
     *
     */
    readonly heapIndex: number;

  }

  interface VkMemoryTypeInitializer {
    
    /**
     *
     */
    readonly propertyFlags?: VkMemoryPropertyFlagBits;

    /**
     *
     */
    readonly heapIndex?: number;
  }

  interface VkMemoryTypeConstructor {
    readonly prototype: VkMemoryType;
    new(param?: VkMemoryTypeInitializer | null): VkMemoryType;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkMemoryType: VkMemoryTypeConstructor;

  
  
  /**
   * 
   */
  interface VkSparseImageMemoryRequirements {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly formatProperties: VkSparseImageFormatProperties | null;

    /**
     *
     */
    readonly imageMipTailFirstLod: number;

    /**
     *
     */
    readonly imageMipTailSize: bigint | number;

    /**
     *
     */
    readonly imageMipTailOffset: bigint | number;

    /**
     *
     */
    readonly imageMipTailStride: bigint | number;

  }

  interface VkSparseImageMemoryRequirementsInitializer {
    
    /**
     *
     */
    readonly formatProperties?: VkSparseImageFormatProperties | null;

    /**
     *
     */
    readonly imageMipTailFirstLod?: number;

    /**
     *
     */
    readonly imageMipTailSize?: bigint | number;

    /**
     *
     */
    readonly imageMipTailOffset?: bigint | number;

    /**
     *
     */
    readonly imageMipTailStride?: bigint | number;
  }

  interface VkSparseImageMemoryRequirementsConstructor {
    readonly prototype: VkSparseImageMemoryRequirements;
    new(param?: VkSparseImageMemoryRequirementsInitializer | null): VkSparseImageMemoryRequirements;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkSparseImageMemoryRequirements: VkSparseImageMemoryRequirementsConstructor;

  
  
  /**
   * 
   */
  interface VkSparseImageFormatProperties {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly aspectMask: VkImageAspectFlagBits;

    /**
     *
     */
    readonly imageGranularity: VkExtent3D | null;

    /**
     *
     */
    readonly flags: VkSparseImageFormatFlagBits;

  }

  interface VkSparseImageFormatPropertiesInitializer {
    
    /**
     *
     */
    readonly aspectMask?: VkImageAspectFlagBits;

    /**
     *
     */
    readonly imageGranularity?: VkExtent3D | null;

    /**
     *
     */
    readonly flags?: VkSparseImageFormatFlagBits;
  }

  interface VkSparseImageFormatPropertiesConstructor {
    readonly prototype: VkSparseImageFormatProperties;
    new(param?: VkSparseImageFormatPropertiesInitializer | null): VkSparseImageFormatProperties;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkSparseImageFormatProperties: VkSparseImageFormatPropertiesConstructor;

  
  
  /**
   * 
   */
  interface VkMemoryRequirements {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly size: bigint | number;

    /**
     *
     */
    readonly alignment: bigint | number;

    /**
     *
     */
    readonly memoryTypeBits: number;

  }

  interface VkMemoryRequirementsInitializer {
    
    /**
     *
     */
    readonly size?: bigint | number;

    /**
     *
     */
    readonly alignment?: bigint | number;

    /**
     *
     */
    readonly memoryTypeBits?: number;
  }

  interface VkMemoryRequirementsConstructor {
    readonly prototype: VkMemoryRequirements;
    new(param?: VkMemoryRequirementsInitializer | null): VkMemoryRequirements;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkMemoryRequirements: VkMemoryRequirementsConstructor;

  
  
  /**
   * 
   */
  interface VkMemoryAllocateInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    allocationSize: bigint | number;

    /**
     *
     */
    memoryTypeIndex: number;

  }

  interface VkMemoryAllocateInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    allocationSize?: bigint | number;

    /**
     *
     */
    memoryTypeIndex?: number;
  }

  interface VkMemoryAllocateInfoConstructor {
    readonly prototype: VkMemoryAllocateInfo;
    new(param?: VkMemoryAllocateInfoInitializer | null): VkMemoryAllocateInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkMemoryAllocateInfo: VkMemoryAllocateInfoConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceMemoryProperties {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly memoryTypeCount: number;

    /**
     *
     */
    readonly memoryTypes: VkMemoryType[] | null;

    /**
     *
     */
    readonly memoryHeapCount: number;

    /**
     *
     */
    readonly memoryHeaps: VkMemoryHeap[] | null;

  }

  interface VkPhysicalDeviceMemoryPropertiesInitializer {
    
    /**
     *
     */
    readonly memoryTypeCount?: number;

    /**
     *
     */
    readonly memoryTypes?: VkMemoryType[] | null;

    /**
     *
     */
    readonly memoryHeapCount?: number;

    /**
     *
     */
    readonly memoryHeaps?: VkMemoryHeap[] | null;
  }

  interface VkPhysicalDeviceMemoryPropertiesConstructor {
    readonly prototype: VkPhysicalDeviceMemoryProperties;
    new(param?: VkPhysicalDeviceMemoryPropertiesInitializer | null): VkPhysicalDeviceMemoryProperties;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceMemoryProperties: VkPhysicalDeviceMemoryPropertiesConstructor;

  
  
  /**
   * 
   */
  interface VkQueueFamilyProperties {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly queueFlags: VkQueueFlagBits;

    /**
     *
     */
    readonly queueCount: number;

    /**
     *
     */
    readonly timestampValidBits: number;

    /**
     *
     */
    readonly minImageTransferGranularity: VkExtent3D | null;

  }

  interface VkQueueFamilyPropertiesInitializer {
    
    /**
     *
     */
    readonly queueFlags?: VkQueueFlagBits;

    /**
     *
     */
    readonly queueCount?: number;

    /**
     *
     */
    readonly timestampValidBits?: number;

    /**
     *
     */
    readonly minImageTransferGranularity?: VkExtent3D | null;
  }

  interface VkQueueFamilyPropertiesConstructor {
    readonly prototype: VkQueueFamilyProperties;
    new(param?: VkQueueFamilyPropertiesInitializer | null): VkQueueFamilyProperties;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkQueueFamilyProperties: VkQueueFamilyPropertiesConstructor;

  
  
  /**
   * 
   */
  interface VkInstanceCreateInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

    /**
     *
     */
    pApplicationInfo: VkApplicationInfo | null;

    /**
     *
     */
    enabledLayerCount: number;

    /**
     *
     */
    ppEnabledLayerNames: string[] | null;

    /**
     *
     */
    enabledExtensionCount: number;

    /**
     *
     */
    ppEnabledExtensionNames: string[] | null;

  }

  interface VkInstanceCreateInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;

    /**
     *
     */
    pApplicationInfo?: VkApplicationInfo | null;

    /**
     *
     */
    enabledLayerCount?: number;

    /**
     *
     */
    ppEnabledLayerNames?: string[] | null;

    /**
     *
     */
    enabledExtensionCount?: number;

    /**
     *
     */
    ppEnabledExtensionNames?: string[] | null;
  }

  interface VkInstanceCreateInfoConstructor {
    readonly prototype: VkInstanceCreateInfo;
    new(param?: VkInstanceCreateInfoInitializer | null): VkInstanceCreateInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkInstanceCreateInfo: VkInstanceCreateInfoConstructor;

  
  
  /**
   * 
   */
  interface VkDeviceCreateInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: number;

    /**
     *
     */
    queueCreateInfoCount: number;

    /**
     *
     */
    pQueueCreateInfos: VkDeviceQueueCreateInfo[] | null;

    /**
     *
     */
    enabledLayerCount: number;

    /**
     *
     */
    ppEnabledLayerNames: string[] | null;

    /**
     *
     */
    enabledExtensionCount: number;

    /**
     *
     */
    ppEnabledExtensionNames: string[] | null;

    /**
     *
     */
    pEnabledFeatures: VkPhysicalDeviceFeatures | null;

  }

  interface VkDeviceCreateInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: number;

    /**
     *
     */
    queueCreateInfoCount?: number;

    /**
     *
     */
    pQueueCreateInfos?: VkDeviceQueueCreateInfo[] | null;

    /**
     *
     */
    enabledLayerCount?: number;

    /**
     *
     */
    ppEnabledLayerNames?: string[] | null;

    /**
     *
     */
    enabledExtensionCount?: number;

    /**
     *
     */
    ppEnabledExtensionNames?: string[] | null;

    /**
     *
     */
    pEnabledFeatures?: VkPhysicalDeviceFeatures | null;
  }

  interface VkDeviceCreateInfoConstructor {
    readonly prototype: VkDeviceCreateInfo;
    new(param?: VkDeviceCreateInfoInitializer | null): VkDeviceCreateInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDeviceCreateInfo: VkDeviceCreateInfoConstructor;

  
  
  /**
   * 
   */
  interface VkDeviceQueueCreateInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    flags: VkDeviceQueueCreateFlagBits;

    /**
     *
     */
    queueFamilyIndex: number;

    /**
     *
     */
    queueCount: number;

    /**
     *
     */
    pQueuePriorities: Float32Array | null;

  }

  interface VkDeviceQueueCreateInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    flags?: VkDeviceQueueCreateFlagBits;

    /**
     *
     */
    queueFamilyIndex?: number;

    /**
     *
     */
    queueCount?: number;

    /**
     *
     */
    pQueuePriorities?: Float32Array | null;
  }

  interface VkDeviceQueueCreateInfoConstructor {
    readonly prototype: VkDeviceQueueCreateInfo;
    new(param?: VkDeviceQueueCreateInfoInitializer | null): VkDeviceQueueCreateInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkDeviceQueueCreateInfo: VkDeviceQueueCreateInfoConstructor;

  
  
  /**
   * 
   */
  interface VkAllocationCallbacks {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    pUserData: ArrayBuffer | null;

    /**
     *
     */
    pfnAllocation: null;

    /**
     *
     */
    pfnReallocation: null;

    /**
     *
     */
    pfnFree: null;

    /**
     *
     */
    pfnInternalAllocation: null;

    /**
     *
     */
    pfnInternalFree: null;

  }

  interface VkAllocationCallbacksInitializer {
    
    /**
     *
     */
    pUserData?: ArrayBuffer | null;

    /**
     *
     */
    pfnAllocation?: null;

    /**
     *
     */
    pfnReallocation?: null;

    /**
     *
     */
    pfnFree?: null;

    /**
     *
     */
    pfnInternalAllocation?: null;

    /**
     *
     */
    pfnInternalFree?: null;
  }

  interface VkAllocationCallbacksConstructor {
    readonly prototype: VkAllocationCallbacks;
    new(param?: VkAllocationCallbacksInitializer | null): VkAllocationCallbacks;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkAllocationCallbacks: VkAllocationCallbacksConstructor;

  
  
  /**
   * 
   */
  interface VkApplicationInfo {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: null;

    /**
     *
     */
    pApplicationName: string | null;

    /**
     *
     */
    applicationVersion: number;

    /**
     *
     */
    pEngineName: string | null;

    /**
     *
     */
    engineVersion: number;

    /**
     *
     */
    apiVersion: number;

  }

  interface VkApplicationInfoInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: null;

    /**
     *
     */
    pApplicationName?: string | null;

    /**
     *
     */
    applicationVersion?: number;

    /**
     *
     */
    pEngineName?: string | null;

    /**
     *
     */
    engineVersion?: number;

    /**
     *
     */
    apiVersion?: number;
  }

  interface VkApplicationInfoConstructor {
    readonly prototype: VkApplicationInfo;
    new(param?: VkApplicationInfoInitializer | null): VkApplicationInfo;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkApplicationInfo: VkApplicationInfoConstructor;

  
  
  /**
   * 
   */
  interface VkLayerProperties {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly layerName: string | null;

    /**
     *
     */
    readonly specVersion: number;

    /**
     *
     */
    readonly implementationVersion: number;

    /**
     *
     */
    readonly description: string | null;

  }

  interface VkLayerPropertiesInitializer {
    
    /**
     *
     */
    readonly layerName?: string | null;

    /**
     *
     */
    readonly specVersion?: number;

    /**
     *
     */
    readonly implementationVersion?: number;

    /**
     *
     */
    readonly description?: string | null;
  }

  interface VkLayerPropertiesConstructor {
    readonly prototype: VkLayerProperties;
    new(param?: VkLayerPropertiesInitializer | null): VkLayerProperties;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkLayerProperties: VkLayerPropertiesConstructor;

  
  
  /**
   * 
   */
  interface VkExtensionProperties {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly extensionName: string | null;

    /**
     *
     */
    readonly specVersion: number;

  }

  interface VkExtensionPropertiesInitializer {
    
    /**
     *
     */
    readonly extensionName?: string | null;

    /**
     *
     */
    readonly specVersion?: number;
  }

  interface VkExtensionPropertiesConstructor {
    readonly prototype: VkExtensionProperties;
    new(param?: VkExtensionPropertiesInitializer | null): VkExtensionProperties;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkExtensionProperties: VkExtensionPropertiesConstructor;

  
  
  /**
   * 
   */
  interface VkPhysicalDeviceProperties {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    readonly apiVersion: number;

    /**
     *
     */
    readonly driverVersion: number;

    /**
     *
     */
    readonly vendorID: number;

    /**
     *
     */
    readonly deviceID: number;

    /**
     *
     */
    readonly deviceType: VkPhysicalDeviceType;

    /**
     *
     */
    readonly deviceName: string | null;

    /**
     *
     */
    readonly pipelineCacheUUID: number[] | null;

    /**
     *
     */
    readonly limits: VkPhysicalDeviceLimits | null;

    /**
     *
     */
    readonly sparseProperties: VkPhysicalDeviceSparseProperties | null;

  }

  interface VkPhysicalDevicePropertiesInitializer {
    
    /**
     *
     */
    readonly apiVersion?: number;

    /**
     *
     */
    readonly driverVersion?: number;

    /**
     *
     */
    readonly vendorID?: number;

    /**
     *
     */
    readonly deviceID?: number;

    /**
     *
     */
    readonly deviceType?: VkPhysicalDeviceType;

    /**
     *
     */
    readonly deviceName?: string | null;

    /**
     *
     */
    readonly pipelineCacheUUID?: number[] | null;

    /**
     *
     */
    readonly limits?: VkPhysicalDeviceLimits | null;

    /**
     *
     */
    readonly sparseProperties?: VkPhysicalDeviceSparseProperties | null;
  }

  interface VkPhysicalDevicePropertiesConstructor {
    readonly prototype: VkPhysicalDeviceProperties;
    new(param?: VkPhysicalDevicePropertiesInitializer | null): VkPhysicalDeviceProperties;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkPhysicalDeviceProperties: VkPhysicalDevicePropertiesConstructor;

  
  
  /**
   * 
   */
  interface VkComponentMapping {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    r: VkComponentSwizzle;

    /**
     *
     */
    g: VkComponentSwizzle;

    /**
     *
     */
    b: VkComponentSwizzle;

    /**
     *
     */
    a: VkComponentSwizzle;

  }

  interface VkComponentMappingInitializer {
    
    /**
     *
     */
    r?: VkComponentSwizzle;

    /**
     *
     */
    g?: VkComponentSwizzle;

    /**
     *
     */
    b?: VkComponentSwizzle;

    /**
     *
     */
    a?: VkComponentSwizzle;
  }

  interface VkComponentMappingConstructor {
    readonly prototype: VkComponentMapping;
    new(param?: VkComponentMappingInitializer | null): VkComponentMapping;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkComponentMapping: VkComponentMappingConstructor;

  
  
  /**
   * 
   */
  interface VkClearRect {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    rect: VkRect2D | null;

    /**
     *
     */
    baseArrayLayer: number;

    /**
     *
     */
    layerCount: number;

  }

  interface VkClearRectInitializer {
    
    /**
     *
     */
    rect?: VkRect2D | null;

    /**
     *
     */
    baseArrayLayer?: number;

    /**
     *
     */
    layerCount?: number;
  }

  interface VkClearRectConstructor {
    readonly prototype: VkClearRect;
    new(param?: VkClearRectInitializer | null): VkClearRect;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkClearRect: VkClearRectConstructor;

  
  
  /**
   * 
   */
  interface VkRect2D {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    offset: VkOffset2D | null;

    /**
     *
     */
    extent: VkExtent2D | null;

  }

  interface VkRect2DInitializer {
    
    /**
     *
     */
    offset?: VkOffset2D | null;

    /**
     *
     */
    extent?: VkExtent2D | null;
  }

  interface VkRect2DConstructor {
    readonly prototype: VkRect2D;
    new(param?: VkRect2DInitializer | null): VkRect2D;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkRect2D: VkRect2DConstructor;

  
  
  /**
   * 
   */
  interface VkViewport {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    x: number;

    /**
     *
     */
    y: number;

    /**
     *
     */
    width: number;

    /**
     *
     */
    height: number;

    /**
     *
     */
    minDepth: number;

    /**
     *
     */
    maxDepth: number;

  }

  interface VkViewportInitializer {
    
    /**
     *
     */
    x?: number;

    /**
     *
     */
    y?: number;

    /**
     *
     */
    width?: number;

    /**
     *
     */
    height?: number;

    /**
     *
     */
    minDepth?: number;

    /**
     *
     */
    maxDepth?: number;
  }

  interface VkViewportConstructor {
    readonly prototype: VkViewport;
    new(param?: VkViewportInitializer | null): VkViewport;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkViewport: VkViewportConstructor;

  
  
  /**
   * 
   */
  interface VkExtent3D {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    width: number;

    /**
     *
     */
    height: number;

    /**
     *
     */
    depth: number;

  }

  interface VkExtent3DInitializer {
    
    /**
     *
     */
    width?: number;

    /**
     *
     */
    height?: number;

    /**
     *
     */
    depth?: number;
  }

  interface VkExtent3DConstructor {
    readonly prototype: VkExtent3D;
    new(param?: VkExtent3DInitializer | null): VkExtent3D;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkExtent3D: VkExtent3DConstructor;

  
  
  /**
   * 
   */
  interface VkExtent2D {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    width: number;

    /**
     *
     */
    height: number;

  }

  interface VkExtent2DInitializer {
    
    /**
     *
     */
    width?: number;

    /**
     *
     */
    height?: number;
  }

  interface VkExtent2DConstructor {
    readonly prototype: VkExtent2D;
    new(param?: VkExtent2DInitializer | null): VkExtent2D;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkExtent2D: VkExtent2DConstructor;

  
  
  /**
   * 
   */
  interface VkOffset3D {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    x: number;

    /**
     *
     */
    y: number;

    /**
     *
     */
    z: number;

  }

  interface VkOffset3DInitializer {
    
    /**
     *
     */
    x?: number;

    /**
     *
     */
    y?: number;

    /**
     *
     */
    z?: number;
  }

  interface VkOffset3DConstructor {
    readonly prototype: VkOffset3D;
    new(param?: VkOffset3DInitializer | null): VkOffset3D;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkOffset3D: VkOffset3DConstructor;

  
  
  /**
   * 
   */
  interface VkOffset2D {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    x: number;

    /**
     *
     */
    y: number;

  }

  interface VkOffset2DInitializer {
    
    /**
     *
     */
    x?: number;

    /**
     *
     */
    y?: number;
  }

  interface VkOffset2DConstructor {
    readonly prototype: VkOffset2D;
    new(param?: VkOffset2DInitializer | null): VkOffset2D;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkOffset2D: VkOffset2DConstructor;

  
  
  /**
   * 
   */
  interface VkBaseInStructure {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: VkBaseInStructure | null;

  }

  interface VkBaseInStructureInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: VkBaseInStructure | null;
  }

  interface VkBaseInStructureConstructor {
    readonly prototype: VkBaseInStructure;
    new(param?: VkBaseInStructureInitializer | null): VkBaseInStructure;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkBaseInStructure: VkBaseInStructureConstructor;

  
  
  /**
   * 
   */
  interface VkBaseOutStructure {
    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

    /**
     * Memory representation of the original vulkan structure instance.
     */
    memoryBuffer: ArrayBuffer;
    
    /**
     *
     */
    sType: VkStructureType;

    /**
     *
     */
    pNext: VkBaseOutStructure | null;

  }

  interface VkBaseOutStructureInitializer {
    
    /**
     *
     */
    sType?: VkStructureType;

    /**
     *
     */
    pNext?: VkBaseOutStructure | null;
  }

  interface VkBaseOutStructureConstructor {
    readonly prototype: VkBaseOutStructure;
    new(param?: VkBaseOutStructureInitializer | null): VkBaseOutStructure;

    /**
     * Object describing the memory layout for this structure.
     */
    readonly memoryLayout: object;

  }

  var VkBaseOutStructure: VkBaseOutStructureConstructor;

  
  

  
  /**
   * 
   * @param pCreateInfo
   * @param pAllocator
   * @param pInstance
   */
  function vkCreateInstance(pCreateInfo: VkInstanceCreateInfo | null, pAllocator: null, pInstance: VkInstance | null): VkResult;
  
  /**
   * 
   * @param instance
   * @param pAllocator
   */
  function vkDestroyInstance(instance: VkInstance | null, pAllocator: null): void;
  
  /**
   * 
   * @param instance
   * @param pPhysicalDeviceCount
   * @param pPhysicalDevices
   */
  function vkEnumeratePhysicalDevices(instance: VkInstance | null, pPhysicalDeviceCount: VkInout | null, pPhysicalDevices: VkPhysicalDevice[] | null): VkResult;
  
  /**
   * 
   * @param device
   * @param pName
   */
  function vkGetDeviceProcAddr(device: VkDevice | null, pName: string | null): void;
  
  /**
   * 
   * @param instance
   * @param pName
   */
  function vkGetInstanceProcAddr(instance: VkInstance | null, pName: string | null): void;
  
  /**
   * 
   * @param physicalDevice
   * @param pProperties
   */
  function vkGetPhysicalDeviceProperties(physicalDevice: VkPhysicalDevice | null, pProperties: VkPhysicalDeviceProperties | null): void;
  
  /**
   * 
   * @param physicalDevice
   * @param pQueueFamilyPropertyCount
   * @param pQueueFamilyProperties
   */
  function vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice: VkPhysicalDevice | null, pQueueFamilyPropertyCount: VkInout | null, pQueueFamilyProperties: VkQueueFamilyProperties[] | null): void;
  
  /**
   * 
   * @param physicalDevice
   * @param pMemoryProperties
   */
  function vkGetPhysicalDeviceMemoryProperties(physicalDevice: VkPhysicalDevice | null, pMemoryProperties: VkPhysicalDeviceMemoryProperties | null): void;
  
  /**
   * 
   * @param physicalDevice
   * @param pFeatures
   */
  function vkGetPhysicalDeviceFeatures(physicalDevice: VkPhysicalDevice | null, pFeatures: VkPhysicalDeviceFeatures | null): void;
  
  /**
   * 
   * @param physicalDevice
   * @param format
   * @param pFormatProperties
   */
  function vkGetPhysicalDeviceFormatProperties(physicalDevice: VkPhysicalDevice | null, format: VkFormat, pFormatProperties: VkFormatProperties | null): void;
  
  /**
   * 
   * @param physicalDevice
   * @param format
   * @param type
   * @param tiling
   * @param usage
   * @param flags
   * @param pImageFormatProperties
   */
  function vkGetPhysicalDeviceImageFormatProperties(physicalDevice: VkPhysicalDevice | null, format: VkFormat, type: VkImageType, tiling: VkImageTiling, usage: VkImageUsageFlagBits, flags: VkImageCreateFlagBits, pImageFormatProperties: VkImageFormatProperties | null): VkResult;
  
  /**
   * 
   * @param physicalDevice
   * @param pCreateInfo
   * @param pAllocator
   * @param pDevice
   */
  function vkCreateDevice(physicalDevice: VkPhysicalDevice | null, pCreateInfo: VkDeviceCreateInfo | null, pAllocator: null, pDevice: VkDevice | null): VkResult;
  
  /**
   * 
   * @param device
   * @param pAllocator
   */
  function vkDestroyDevice(device: VkDevice | null, pAllocator: null): void;
  
  /**
   * 
   * @param pApiVersion
   */
  function vkEnumerateInstanceVersion(pApiVersion: VkInout | null): VkResult;
  
  /**
   * 
   * @param pPropertyCount
   * @param pProperties
   */
  function vkEnumerateInstanceLayerProperties(pPropertyCount: VkInout | null, pProperties: VkLayerProperties[] | null): VkResult;
  
  /**
   * 
   * @param pLayerName
   * @param pPropertyCount
   * @param pProperties
   */
  function vkEnumerateInstanceExtensionProperties(pLayerName: string | null, pPropertyCount: VkInout | null, pProperties: VkExtensionProperties[] | null): VkResult;
  
  /**
   * 
   * @param physicalDevice
   * @param pPropertyCount
   * @param pProperties
   */
  function vkEnumerateDeviceLayerProperties(physicalDevice: VkPhysicalDevice | null, pPropertyCount: VkInout | null, pProperties: VkLayerProperties[] | null): VkResult;
  
  /**
   * 
   * @param physicalDevice
   * @param pLayerName
   * @param pPropertyCount
   * @param pProperties
   */
  function vkEnumerateDeviceExtensionProperties(physicalDevice: VkPhysicalDevice | null, pLayerName: string | null, pPropertyCount: VkInout | null, pProperties: VkExtensionProperties[] | null): VkResult;
  
  /**
   * 
   * @param device
   * @param queueFamilyIndex
   * @param queueIndex
   * @param pQueue
   */
  function vkGetDeviceQueue(device: VkDevice | null, queueFamilyIndex: number, queueIndex: number, pQueue: VkQueue | null): void;
  
  /**
   * 
   * @param queue
   * @param submitCount
   * @param pSubmits
   * @param fence
   */
  function vkQueueSubmit(queue: VkQueue | null, submitCount: number, pSubmits: VkSubmitInfo[] | null, fence: VkFence | null): VkResult;
  
  /**
   * 
   * @param queue
   */
  function vkQueueWaitIdle(queue: VkQueue | null): VkResult;
  
  /**
   * 
   * @param device
   */
  function vkDeviceWaitIdle(device: VkDevice | null): VkResult;
  
  /**
   * 
   * @param device
   * @param pAllocateInfo
   * @param pAllocator
   * @param pMemory
   */
  function vkAllocateMemory(device: VkDevice | null, pAllocateInfo: VkMemoryAllocateInfo | null, pAllocator: null, pMemory: VkDeviceMemory | null): VkResult;
  
  /**
   * 
   * @param device
   * @param memory
   * @param pAllocator
   */
  function vkFreeMemory(device: VkDevice | null, memory: VkDeviceMemory | null, pAllocator: null): void;
  
  /**
   * 
   * @param device
   * @param memory
   * @param offset
   * @param size
   * @param flags
   * @param ppData
   */
  function vkMapMemory(device: VkDevice | null, memory: VkDeviceMemory | null, offset: bigint | number, size: bigint | number, flags: number, ppData: VkInoutAddress | null): VkResult;
  
  /**
   * 
   * @param device
   * @param memory
   */
  function vkUnmapMemory(device: VkDevice | null, memory: VkDeviceMemory | null): void;
  
  /**
   * 
   * @param device
   * @param memoryRangeCount
   * @param pMemoryRanges
   */
  function vkFlushMappedMemoryRanges(device: VkDevice | null, memoryRangeCount: number, pMemoryRanges: VkMappedMemoryRange[] | null): VkResult;
  
  /**
   * 
   * @param device
   * @param memoryRangeCount
   * @param pMemoryRanges
   */
  function vkInvalidateMappedMemoryRanges(device: VkDevice | null, memoryRangeCount: number, pMemoryRanges: VkMappedMemoryRange[] | null): VkResult;
  
  /**
   * 
   * @param device
   * @param memory
   * @param pCommittedMemoryInBytes
   */
  function vkGetDeviceMemoryCommitment(device: VkDevice | null, memory: VkDeviceMemory | null, pCommittedMemoryInBytes: VkInoutAddress | null): void;
  
  /**
   * 
   * @param device
   * @param buffer
   * @param pMemoryRequirements
   */
  function vkGetBufferMemoryRequirements(device: VkDevice | null, buffer: VkBuffer | null, pMemoryRequirements: VkMemoryRequirements | null): void;
  
  /**
   * 
   * @param device
   * @param buffer
   * @param memory
   * @param memoryOffset
   */
  function vkBindBufferMemory(device: VkDevice | null, buffer: VkBuffer | null, memory: VkDeviceMemory | null, memoryOffset: bigint | number): VkResult;
  
  /**
   * 
   * @param device
   * @param image
   * @param pMemoryRequirements
   */
  function vkGetImageMemoryRequirements(device: VkDevice | null, image: VkImage | null, pMemoryRequirements: VkMemoryRequirements | null): void;
  
  /**
   * 
   * @param device
   * @param image
   * @param memory
   * @param memoryOffset
   */
  function vkBindImageMemory(device: VkDevice | null, image: VkImage | null, memory: VkDeviceMemory | null, memoryOffset: bigint | number): VkResult;
  
  /**
   * 
   * @param device
   * @param image
   * @param pSparseMemoryRequirementCount
   * @param pSparseMemoryRequirements
   */
  function vkGetImageSparseMemoryRequirements(device: VkDevice | null, image: VkImage | null, pSparseMemoryRequirementCount: VkInout | null, pSparseMemoryRequirements: VkSparseImageMemoryRequirements[] | null): void;
  
  /**
   * 
   * @param physicalDevice
   * @param format
   * @param type
   * @param samples
   * @param usage
   * @param tiling
   * @param pPropertyCount
   * @param pProperties
   */
  function vkGetPhysicalDeviceSparseImageFormatProperties(physicalDevice: VkPhysicalDevice | null, format: VkFormat, type: VkImageType, samples: VkSampleCountFlagBits, usage: VkImageUsageFlagBits, tiling: VkImageTiling, pPropertyCount: VkInout | null, pProperties: VkSparseImageFormatProperties[] | null): void;
  
  /**
   * 
   * @param queue
   * @param bindInfoCount
   * @param pBindInfo
   * @param fence
   */
  function vkQueueBindSparse(queue: VkQueue | null, bindInfoCount: number, pBindInfo: VkBindSparseInfo[] | null, fence: VkFence | null): VkResult;
  
  /**
   * 
   * @param device
   * @param pCreateInfo
   * @param pAllocator
   * @param pFence
   */
  function vkCreateFence(device: VkDevice | null, pCreateInfo: VkFenceCreateInfo | null, pAllocator: null, pFence: VkFence | null): VkResult;
  
  /**
   * 
   * @param device
   * @param fence
   * @param pAllocator
   */
  function vkDestroyFence(device: VkDevice | null, fence: VkFence | null, pAllocator: null): void;
  
  /**
   * 
   * @param device
   * @param fenceCount
   * @param pFences
   */
  function vkResetFences(device: VkDevice | null, fenceCount: number, pFences: VkFence[] | null): VkResult;
  
  /**
   * 
   * @param device
   * @param fence
   */
  function vkGetFenceStatus(device: VkDevice | null, fence: VkFence | null): VkResult;
  
  /**
   * 
   * @param device
   * @param fenceCount
   * @param pFences
   * @param waitAll
   * @param timeout
   */
  function vkWaitForFences(device: VkDevice | null, fenceCount: number, pFences: VkFence[] | null, waitAll: boolean, timeout: bigint | number): VkResult;
  
  /**
   * 
   * @param device
   * @param pCreateInfo
   * @param pAllocator
   * @param pSemaphore
   */
  function vkCreateSemaphore(device: VkDevice | null, pCreateInfo: VkSemaphoreCreateInfo | null, pAllocator: null, pSemaphore: VkSemaphore | null): VkResult;
  
  /**
   * 
   * @param device
   * @param semaphore
   * @param pAllocator
   */
  function vkDestroySemaphore(device: VkDevice | null, semaphore: VkSemaphore | null, pAllocator: null): void;
  
  /**
   * 
   * @param device
   * @param pCreateInfo
   * @param pAllocator
   * @param pEvent
   */
  function vkCreateEvent(device: VkDevice | null, pCreateInfo: VkEventCreateInfo | null, pAllocator: null, pEvent: VkEvent | null): VkResult;
  
  /**
   * 
   * @param device
   * @param event
   * @param pAllocator
   */
  function vkDestroyEvent(device: VkDevice | null, event: VkEvent | null, pAllocator: null): void;
  
  /**
   * 
   * @param device
   * @param event
   */
  function vkGetEventStatus(device: VkDevice | null, event: VkEvent | null): VkResult;
  
  /**
   * 
   * @param device
   * @param event
   */
  function vkSetEvent(device: VkDevice | null, event: VkEvent | null): VkResult;
  
  /**
   * 
   * @param device
   * @param event
   */
  function vkResetEvent(device: VkDevice | null, event: VkEvent | null): VkResult;
  
  /**
   * 
   * @param device
   * @param pCreateInfo
   * @param pAllocator
   * @param pQueryPool
   */
  function vkCreateQueryPool(device: VkDevice | null, pCreateInfo: VkQueryPoolCreateInfo | null, pAllocator: null, pQueryPool: VkQueryPool | null): VkResult;
  
  /**
   * 
   * @param device
   * @param queryPool
   * @param pAllocator
   */
  function vkDestroyQueryPool(device: VkDevice | null, queryPool: VkQueryPool | null, pAllocator: null): void;
  
  /**
   * 
   * @param device
   * @param queryPool
   * @param firstQuery
   * @param queryCount
   * @param dataSize
   * @param pData
   * @param stride
   * @param flags
   */
  function vkGetQueryPoolResults(device: VkDevice | null, queryPool: VkQueryPool | null, firstQuery: number, queryCount: number, dataSize: bigint | number, pData: ArrayBuffer | null, stride: bigint | number, flags: VkQueryResultFlagBits): VkResult;
  
  /**
   * 
   * @param device
   * @param queryPool
   * @param firstQuery
   * @param queryCount
   */
  function vkResetQueryPoolEXT(device: VkDevice | null, queryPool: VkQueryPool | null, firstQuery: number, queryCount: number): void;
  
  /**
   * 
   * @param device
   * @param pCreateInfo
   * @param pAllocator
   * @param pBuffer
   */
  function vkCreateBuffer(device: VkDevice | null, pCreateInfo: VkBufferCreateInfo | null, pAllocator: null, pBuffer: VkBuffer | null): VkResult;
  
  /**
   * 
   * @param device
   * @param buffer
   * @param pAllocator
   */
  function vkDestroyBuffer(device: VkDevice | null, buffer: VkBuffer | null, pAllocator: null): void;
  
  /**
   * 
   * @param device
   * @param pCreateInfo
   * @param pAllocator
   * @param pView
   */
  function vkCreateBufferView(device: VkDevice | null, pCreateInfo: VkBufferViewCreateInfo | null, pAllocator: null, pView: VkBufferView | null): VkResult;
  
  /**
   * 
   * @param device
   * @param bufferView
   * @param pAllocator
   */
  function vkDestroyBufferView(device: VkDevice | null, bufferView: VkBufferView | null, pAllocator: null): void;
  
  /**
   * 
   * @param device
   * @param pCreateInfo
   * @param pAllocator
   * @param pImage
   */
  function vkCreateImage(device: VkDevice | null, pCreateInfo: VkImageCreateInfo | null, pAllocator: null, pImage: VkImage | null): VkResult;
  
  /**
   * 
   * @param device
   * @param image
   * @param pAllocator
   */
  function vkDestroyImage(device: VkDevice | null, image: VkImage | null, pAllocator: null): void;
  
  /**
   * 
   * @param device
   * @param image
   * @param pSubresource
   * @param pLayout
   */
  function vkGetImageSubresourceLayout(device: VkDevice | null, image: VkImage | null, pSubresource: VkImageSubresource | null, pLayout: VkSubresourceLayout | null): void;
  
  /**
   * 
   * @param device
   * @param pCreateInfo
   * @param pAllocator
   * @param pView
   */
  function vkCreateImageView(device: VkDevice | null, pCreateInfo: VkImageViewCreateInfo | null, pAllocator: null, pView: VkImageView | null): VkResult;
  
  /**
   * 
   * @param device
   * @param imageView
   * @param pAllocator
   */
  function vkDestroyImageView(device: VkDevice | null, imageView: VkImageView | null, pAllocator: null): void;
  
  /**
   * 
   * @param device
   * @param pCreateInfo
   * @param pAllocator
   * @param pShaderModule
   */
  function vkCreateShaderModule(device: VkDevice | null, pCreateInfo: VkShaderModuleCreateInfo | null, pAllocator: null, pShaderModule: VkShaderModule | null): VkResult;
  
  /**
   * 
   * @param device
   * @param shaderModule
   * @param pAllocator
   */
  function vkDestroyShaderModule(device: VkDevice | null, shaderModule: VkShaderModule | null, pAllocator: null): void;
  
  /**
   * 
   * @param device
   * @param pCreateInfo
   * @param pAllocator
   * @param pPipelineCache
   */
  function vkCreatePipelineCache(device: VkDevice | null, pCreateInfo: VkPipelineCacheCreateInfo | null, pAllocator: null, pPipelineCache: VkPipelineCache | null): VkResult;
  
  /**
   * 
   * @param device
   * @param pipelineCache
   * @param pAllocator
   */
  function vkDestroyPipelineCache(device: VkDevice | null, pipelineCache: VkPipelineCache | null, pAllocator: null): void;
  
  /**
   * 
   * @param device
   * @param pipelineCache
   * @param pDataSize
   * @param pData
   */
  function vkGetPipelineCacheData(device: VkDevice | null, pipelineCache: VkPipelineCache | null, pDataSize: VkInoutAddress | null, pData: ArrayBuffer | null): VkResult;
  
  /**
   * 
   * @param device
   * @param dstCache
   * @param srcCacheCount
   * @param pSrcCaches
   */
  function vkMergePipelineCaches(device: VkDevice | null, dstCache: VkPipelineCache | null, srcCacheCount: number, pSrcCaches: VkPipelineCache[] | null): VkResult;
  
  /**
   * 
   * @param device
   * @param pipelineCache
   * @param createInfoCount
   * @param pCreateInfos
   * @param pAllocator
   * @param pPipelines
   */
  function vkCreateGraphicsPipelines(device: VkDevice | null, pipelineCache: VkPipelineCache | null, createInfoCount: number, pCreateInfos: VkGraphicsPipelineCreateInfo[] | null, pAllocator: null, pPipelines: VkPipeline[] | null): VkResult;
  
  /**
   * 
   * @param device
   * @param pipelineCache
   * @param createInfoCount
   * @param pCreateInfos
   * @param pAllocator
   * @param pPipelines
   */
  function vkCreateComputePipelines(device: VkDevice | null, pipelineCache: VkPipelineCache | null, createInfoCount: number, pCreateInfos: VkComputePipelineCreateInfo[] | null, pAllocator: null, pPipelines: VkPipeline[] | null): VkResult;
  
  /**
   * 
   * @param device
   * @param pipeline
   * @param pAllocator
   */
  function vkDestroyPipeline(device: VkDevice | null, pipeline: VkPipeline | null, pAllocator: null): void;
  
  /**
   * 
   * @param device
   * @param pCreateInfo
   * @param pAllocator
   * @param pPipelineLayout
   */
  function vkCreatePipelineLayout(device: VkDevice | null, pCreateInfo: VkPipelineLayoutCreateInfo | null, pAllocator: null, pPipelineLayout: VkPipelineLayout | null): VkResult;
  
  /**
   * 
   * @param device
   * @param pipelineLayout
   * @param pAllocator
   */
  function vkDestroyPipelineLayout(device: VkDevice | null, pipelineLayout: VkPipelineLayout | null, pAllocator: null): void;
  
  /**
   * 
   * @param device
   * @param pCreateInfo
   * @param pAllocator
   * @param pSampler
   */
  function vkCreateSampler(device: VkDevice | null, pCreateInfo: VkSamplerCreateInfo | null, pAllocator: null, pSampler: VkSampler | null): VkResult;
  
  /**
   * 
   * @param device
   * @param sampler
   * @param pAllocator
   */
  function vkDestroySampler(device: VkDevice | null, sampler: VkSampler | null, pAllocator: null): void;
  
  /**
   * 
   * @param device
   * @param pCreateInfo
   * @param pAllocator
   * @param pSetLayout
   */
  function vkCreateDescriptorSetLayout(device: VkDevice | null, pCreateInfo: VkDescriptorSetLayoutCreateInfo | null, pAllocator: null, pSetLayout: VkDescriptorSetLayout | null): VkResult;
  
  /**
   * 
   * @param device
   * @param descriptorSetLayout
   * @param pAllocator
   */
  function vkDestroyDescriptorSetLayout(device: VkDevice | null, descriptorSetLayout: VkDescriptorSetLayout | null, pAllocator: null): void;
  
  /**
   * 
   * @param device
   * @param pCreateInfo
   * @param pAllocator
   * @param pDescriptorPool
   */
  function vkCreateDescriptorPool(device: VkDevice | null, pCreateInfo: VkDescriptorPoolCreateInfo | null, pAllocator: null, pDescriptorPool: VkDescriptorPool | null): VkResult;
  
  /**
   * 
   * @param device
   * @param descriptorPool
   * @param pAllocator
   */
  function vkDestroyDescriptorPool(device: VkDevice | null, descriptorPool: VkDescriptorPool | null, pAllocator: null): void;
  
  /**
   * 
   * @param device
   * @param descriptorPool
   * @param flags
   */
  function vkResetDescriptorPool(device: VkDevice | null, descriptorPool: VkDescriptorPool | null, flags: number): VkResult;
  
  /**
   * 
   * @param device
   * @param pAllocateInfo
   * @param pDescriptorSets
   */
  function vkAllocateDescriptorSets(device: VkDevice | null, pAllocateInfo: VkDescriptorSetAllocateInfo | null, pDescriptorSets: VkDescriptorSet[] | null): VkResult;
  
  /**
   * 
   * @param device
   * @param descriptorPool
   * @param descriptorSetCount
   * @param pDescriptorSets
   */
  function vkFreeDescriptorSets(device: VkDevice | null, descriptorPool: VkDescriptorPool | null, descriptorSetCount: number, pDescriptorSets: VkDescriptorSet[] | null): VkResult;
  
  /**
   * 
   * @param device
   * @param descriptorWriteCount
   * @param pDescriptorWrites
   * @param descriptorCopyCount
   * @param pDescriptorCopies
   */
  function vkUpdateDescriptorSets(device: VkDevice | null, descriptorWriteCount: number, pDescriptorWrites: VkWriteDescriptorSet[] | null, descriptorCopyCount: number, pDescriptorCopies: VkCopyDescriptorSet[] | null): void;
  
  /**
   * 
   * @param device
   * @param pCreateInfo
   * @param pAllocator
   * @param pFramebuffer
   */
  function vkCreateFramebuffer(device: VkDevice | null, pCreateInfo: VkFramebufferCreateInfo | null, pAllocator: null, pFramebuffer: VkFramebuffer | null): VkResult;
  
  /**
   * 
   * @param device
   * @param framebuffer
   * @param pAllocator
   */
  function vkDestroyFramebuffer(device: VkDevice | null, framebuffer: VkFramebuffer | null, pAllocator: null): void;
  
  /**
   * 
   * @param device
   * @param pCreateInfo
   * @param pAllocator
   * @param pRenderPass
   */
  function vkCreateRenderPass(device: VkDevice | null, pCreateInfo: VkRenderPassCreateInfo | null, pAllocator: null, pRenderPass: VkRenderPass | null): VkResult;
  
  /**
   * 
   * @param device
   * @param renderPass
   * @param pAllocator
   */
  function vkDestroyRenderPass(device: VkDevice | null, renderPass: VkRenderPass | null, pAllocator: null): void;
  
  /**
   * 
   * @param device
   * @param renderPass
   * @param pGranularity
   */
  function vkGetRenderAreaGranularity(device: VkDevice | null, renderPass: VkRenderPass | null, pGranularity: VkExtent2D | null): void;
  
  /**
   * 
   * @param device
   * @param pCreateInfo
   * @param pAllocator
   * @param pCommandPool
   */
  function vkCreateCommandPool(device: VkDevice | null, pCreateInfo: VkCommandPoolCreateInfo | null, pAllocator: null, pCommandPool: VkCommandPool | null): VkResult;
  
  /**
   * 
   * @param device
   * @param commandPool
   * @param pAllocator
   */
  function vkDestroyCommandPool(device: VkDevice | null, commandPool: VkCommandPool | null, pAllocator: null): void;
  
  /**
   * 
   * @param device
   * @param commandPool
   * @param flags
   */
  function vkResetCommandPool(device: VkDevice | null, commandPool: VkCommandPool | null, flags: VkCommandPoolResetFlagBits): VkResult;
  
  /**
   * 
   * @param device
   * @param pAllocateInfo
   * @param pCommandBuffers
   */
  function vkAllocateCommandBuffers(device: VkDevice | null, pAllocateInfo: VkCommandBufferAllocateInfo | null, pCommandBuffers: VkCommandBuffer[] | null): VkResult;
  
  /**
   * 
   * @param device
   * @param commandPool
   * @param commandBufferCount
   * @param pCommandBuffers
   */
  function vkFreeCommandBuffers(device: VkDevice | null, commandPool: VkCommandPool | null, commandBufferCount: number, pCommandBuffers: VkCommandBuffer[] | null): void;
  
  /**
   * 
   * @param commandBuffer
   * @param pBeginInfo
   */
  function vkBeginCommandBuffer(commandBuffer: VkCommandBuffer | null, pBeginInfo: VkCommandBufferBeginInfo | null): VkResult;
  
  /**
   * 
   * @param commandBuffer
   */
  function vkEndCommandBuffer(commandBuffer: VkCommandBuffer | null): VkResult;
  
  /**
   * 
   * @param commandBuffer
   * @param flags
   */
  function vkResetCommandBuffer(commandBuffer: VkCommandBuffer | null, flags: VkCommandBufferResetFlagBits): VkResult;
  
  /**
   * 
   * @param commandBuffer
   * @param pipelineBindPoint
   * @param pipeline
   */
  function vkCmdBindPipeline(commandBuffer: VkCommandBuffer | null, pipelineBindPoint: VkPipelineBindPoint, pipeline: VkPipeline | null): void;
  
  /**
   * 
   * @param commandBuffer
   * @param firstViewport
   * @param viewportCount
   * @param pViewports
   */
  function vkCmdSetViewport(commandBuffer: VkCommandBuffer | null, firstViewport: number, viewportCount: number, pViewports: VkViewport[] | null): void;
  
  /**
   * 
   * @param commandBuffer
   * @param firstScissor
   * @param scissorCount
   * @param pScissors
   */
  function vkCmdSetScissor(commandBuffer: VkCommandBuffer | null, firstScissor: number, scissorCount: number, pScissors: VkRect2D[] | null): void;
  
  /**
   * 
   * @param commandBuffer
   * @param lineWidth
   */
  function vkCmdSetLineWidth(commandBuffer: VkCommandBuffer | null, lineWidth: number): void;
  
  /**
   * 
   * @param commandBuffer
   * @param depthBiasConstantFactor
   * @param depthBiasClamp
   * @param depthBiasSlopeFactor
   */
  function vkCmdSetDepthBias(commandBuffer: VkCommandBuffer | null, depthBiasConstantFactor: number, depthBiasClamp: number, depthBiasSlopeFactor: number): void;
  
  /**
   * 
   * @param commandBuffer
   * @param blendConstants
   */
  function vkCmdSetBlendConstants(commandBuffer: VkCommandBuffer | null, blendConstants: number[] | null): void;
  
  /**
   * 
   * @param commandBuffer
   * @param minDepthBounds
   * @param maxDepthBounds
   */
  function vkCmdSetDepthBounds(commandBuffer: VkCommandBuffer | null, minDepthBounds: number, maxDepthBounds: number): void;
  
  /**
   * 
   * @param commandBuffer
   * @param faceMask
   * @param compareMask
   */
  function vkCmdSetStencilCompareMask(commandBuffer: VkCommandBuffer | null, faceMask: VkStencilFaceFlagBits, compareMask: number): void;
  
  /**
   * 
   * @param commandBuffer
   * @param faceMask
   * @param writeMask
   */
  function vkCmdSetStencilWriteMask(commandBuffer: VkCommandBuffer | null, faceMask: VkStencilFaceFlagBits, writeMask: number): void;
  
  /**
   * 
   * @param commandBuffer
   * @param faceMask
   * @param reference
   */
  function vkCmdSetStencilReference(commandBuffer: VkCommandBuffer | null, faceMask: VkStencilFaceFlagBits, reference: number): void;
  
  /**
   * 
   * @param commandBuffer
   * @param pipelineBindPoint
   * @param layout
   * @param firstSet
   * @param descriptorSetCount
   * @param pDescriptorSets
   * @param dynamicOffsetCount
   * @param pDynamicOffsets
   */
  function vkCmdBindDescriptorSets(commandBuffer: VkCommandBuffer | null, pipelineBindPoint: VkPipelineBindPoint, layout: VkPipelineLayout | null, firstSet: number, descriptorSetCount: number, pDescriptorSets: VkDescriptorSet[] | null, dynamicOffsetCount: number, pDynamicOffsets: Uint32Array | null): void;
  
  /**
   * 
   * @param commandBuffer
   * @param buffer
   * @param offset
   * @param indexType
   */
  function vkCmdBindIndexBuffer(commandBuffer: VkCommandBuffer | null, buffer: VkBuffer | null, offset: bigint | number, indexType: VkIndexType): void;
  
  /**
   * 
   * @param commandBuffer
   * @param firstBinding
   * @param bindingCount
   * @param pBuffers
   * @param pOffsets
   */
  function vkCmdBindVertexBuffers(commandBuffer: VkCommandBuffer | null, firstBinding: number, bindingCount: number, pBuffers: VkBuffer[] | null, pOffsets: BigUint64Array | null): void;
  
  /**
   * 
   * @param commandBuffer
   * @param vertexCount
   * @param instanceCount
   * @param firstVertex
   * @param firstInstance
   */
  function vkCmdDraw(commandBuffer: VkCommandBuffer | null, vertexCount: number, instanceCount: number, firstVertex: number, firstInstance: number): void;
  
  /**
   * 
   * @param commandBuffer
   * @param indexCount
   * @param instanceCount
   * @param firstIndex
   * @param vertexOffset
   * @param firstInstance
   */
  function vkCmdDrawIndexed(commandBuffer: VkCommandBuffer | null, indexCount: number, instanceCount: number, firstIndex: number, vertexOffset: number, firstInstance: number): void;
  
  /**
   * 
   * @param commandBuffer
   * @param buffer
   * @param offset
   * @param drawCount
   * @param stride
   */
  function vkCmdDrawIndirect(commandBuffer: VkCommandBuffer | null, buffer: VkBuffer | null, offset: bigint | number, drawCount: number, stride: number): void;
  
  /**
   * 
   * @param commandBuffer
   * @param buffer
   * @param offset
   * @param drawCount
   * @param stride
   */
  function vkCmdDrawIndexedIndirect(commandBuffer: VkCommandBuffer | null, buffer: VkBuffer | null, offset: bigint | number, drawCount: number, stride: number): void;
  
  /**
   * 
   * @param commandBuffer
   * @param groupCountX
   * @param groupCountY
   * @param groupCountZ
   */
  function vkCmdDispatch(commandBuffer: VkCommandBuffer | null, groupCountX: number, groupCountY: number, groupCountZ: number): void;
  
  /**
   * 
   * @param commandBuffer
   * @param buffer
   * @param offset
   */
  function vkCmdDispatchIndirect(commandBuffer: VkCommandBuffer | null, buffer: VkBuffer | null, offset: bigint | number): void;
  
  /**
   * 
   * @param commandBuffer
   * @param srcBuffer
   * @param dstBuffer
   * @param regionCount
   * @param pRegions
   */
  function vkCmdCopyBuffer(commandBuffer: VkCommandBuffer | null, srcBuffer: VkBuffer | null, dstBuffer: VkBuffer | null, regionCount: number, pRegions: VkBufferCopy[] | null): void;
  
  /**
   * 
   * @param commandBuffer
   * @param srcImage
   * @param srcImageLayout
   * @param dstImage
   * @param dstImageLayout
   * @param regionCount
   * @param pRegions
   */
  function vkCmdCopyImage(commandBuffer: VkCommandBuffer | null, srcImage: VkImage | null, srcImageLayout: VkImageLayout, dstImage: VkImage | null, dstImageLayout: VkImageLayout, regionCount: number, pRegions: VkImageCopy[] | null): void;
  
  /**
   * 
   * @param commandBuffer
   * @param srcImage
   * @param srcImageLayout
   * @param dstImage
   * @param dstImageLayout
   * @param regionCount
   * @param pRegions
   * @param filter
   */
  function vkCmdBlitImage(commandBuffer: VkCommandBuffer | null, srcImage: VkImage | null, srcImageLayout: VkImageLayout, dstImage: VkImage | null, dstImageLayout: VkImageLayout, regionCount: number, pRegions: VkImageBlit[] | null, filter: VkFilter): void;
  
  /**
   * 
   * @param commandBuffer
   * @param srcBuffer
   * @param dstImage
   * @param dstImageLayout
   * @param regionCount
   * @param pRegions
   */
  function vkCmdCopyBufferToImage(commandBuffer: VkCommandBuffer | null, srcBuffer: VkBuffer | null, dstImage: VkImage | null, dstImageLayout: VkImageLayout, regionCount: number, pRegions: VkBufferImageCopy[] | null): void;
  
  /**
   * 
   * @param commandBuffer
   * @param srcImage
   * @param srcImageLayout
   * @param dstBuffer
   * @param regionCount
   * @param pRegions
   */
  function vkCmdCopyImageToBuffer(commandBuffer: VkCommandBuffer | null, srcImage: VkImage | null, srcImageLayout: VkImageLayout, dstBuffer: VkBuffer | null, regionCount: number, pRegions: VkBufferImageCopy[] | null): void;
  
  /**
   * 
   * @param commandBuffer
   * @param dstBuffer
   * @param dstOffset
   * @param dataSize
   * @param pData
   */
  function vkCmdUpdateBuffer(commandBuffer: VkCommandBuffer | null, dstBuffer: VkBuffer | null, dstOffset: bigint | number, dataSize: bigint | number, pData: ArrayBuffer | null): void;
  
  /**
   * 
   * @param commandBuffer
   * @param dstBuffer
   * @param dstOffset
   * @param size
   * @param data
   */
  function vkCmdFillBuffer(commandBuffer: VkCommandBuffer | null, dstBuffer: VkBuffer | null, dstOffset: bigint | number, size: bigint | number, data: number): void;
  
  /**
   * 
   * @param commandBuffer
   * @param image
   * @param imageLayout
   * @param pColor
   * @param rangeCount
   * @param pRanges
   */
  function vkCmdClearColorImage(commandBuffer: VkCommandBuffer | null, image: VkImage | null, imageLayout: VkImageLayout, pColor: VkClearColorValue | null, rangeCount: number, pRanges: VkImageSubresourceRange[] | null): void;
  
  /**
   * 
   * @param commandBuffer
   * @param image
   * @param imageLayout
   * @param pDepthStencil
   * @param rangeCount
   * @param pRanges
   */
  function vkCmdClearDepthStencilImage(commandBuffer: VkCommandBuffer | null, image: VkImage | null, imageLayout: VkImageLayout, pDepthStencil: VkClearDepthStencilValue | null, rangeCount: number, pRanges: VkImageSubresourceRange[] | null): void;
  
  /**
   * 
   * @param commandBuffer
   * @param attachmentCount
   * @param pAttachments
   * @param rectCount
   * @param pRects
   */
  function vkCmdClearAttachments(commandBuffer: VkCommandBuffer | null, attachmentCount: number, pAttachments: VkClearAttachment[] | null, rectCount: number, pRects: VkClearRect[] | null): void;
  
  /**
   * 
   * @param commandBuffer
   * @param srcImage
   * @param srcImageLayout
   * @param dstImage
   * @param dstImageLayout
   * @param regionCount
   * @param pRegions
   */
  function vkCmdResolveImage(commandBuffer: VkCommandBuffer | null, srcImage: VkImage | null, srcImageLayout: VkImageLayout, dstImage: VkImage | null, dstImageLayout: VkImageLayout, regionCount: number, pRegions: VkImageResolve[] | null): void;
  
  /**
   * 
   * @param commandBuffer
   * @param event
   * @param stageMask
   */
  function vkCmdSetEvent(commandBuffer: VkCommandBuffer | null, event: VkEvent | null, stageMask: VkPipelineStageFlagBits): void;
  
  /**
   * 
   * @param commandBuffer
   * @param event
   * @param stageMask
   */
  function vkCmdResetEvent(commandBuffer: VkCommandBuffer | null, event: VkEvent | null, stageMask: VkPipelineStageFlagBits): void;
  
  /**
   * 
   * @param commandBuffer
   * @param eventCount
   * @param pEvents
   * @param srcStageMask
   * @param dstStageMask
   * @param memoryBarrierCount
   * @param pMemoryBarriers
   * @param bufferMemoryBarrierCount
   * @param pBufferMemoryBarriers
   * @param imageMemoryBarrierCount
   * @param pImageMemoryBarriers
   */
  function vkCmdWaitEvents(commandBuffer: VkCommandBuffer | null, eventCount: number, pEvents: VkEvent[] | null, srcStageMask: VkPipelineStageFlagBits, dstStageMask: VkPipelineStageFlagBits, memoryBarrierCount: number, pMemoryBarriers: VkMemoryBarrier[] | null, bufferMemoryBarrierCount: number, pBufferMemoryBarriers: VkBufferMemoryBarrier[] | null, imageMemoryBarrierCount: number, pImageMemoryBarriers: VkImageMemoryBarrier[] | null): void;
  
  /**
   * 
   * @param commandBuffer
   * @param srcStageMask
   * @param dstStageMask
   * @param dependencyFlags
   * @param memoryBarrierCount
   * @param pMemoryBarriers
   * @param bufferMemoryBarrierCount
   * @param pBufferMemoryBarriers
   * @param imageMemoryBarrierCount
   * @param pImageMemoryBarriers
   */
  function vkCmdPipelineBarrier(commandBuffer: VkCommandBuffer | null, srcStageMask: VkPipelineStageFlagBits, dstStageMask: VkPipelineStageFlagBits, dependencyFlags: VkDependencyFlagBits, memoryBarrierCount: number, pMemoryBarriers: VkMemoryBarrier[] | null, bufferMemoryBarrierCount: number, pBufferMemoryBarriers: VkBufferMemoryBarrier[] | null, imageMemoryBarrierCount: number, pImageMemoryBarriers: VkImageMemoryBarrier[] | null): void;
  
  /**
   * 
   * @param commandBuffer
   * @param queryPool
   * @param query
   * @param flags
   */
  function vkCmdBeginQuery(commandBuffer: VkCommandBuffer | null, queryPool: VkQueryPool | null, query: number, flags: VkQueryControlFlagBits): void;
  
  /**
   * 
   * @param commandBuffer
   * @param queryPool
   * @param query
   */
  function vkCmdEndQuery(commandBuffer: VkCommandBuffer | null, queryPool: VkQueryPool | null, query: number): void;
  
  /**
   * 
   * @param commandBuffer
   * @param pConditionalRenderingBegin
   */
  function vkCmdBeginConditionalRenderingEXT(commandBuffer: VkCommandBuffer | null, pConditionalRenderingBegin: VkConditionalRenderingBeginInfoEXT | null): void;
  
  /**
   * 
   * @param commandBuffer
   */
  function vkCmdEndConditionalRenderingEXT(commandBuffer: VkCommandBuffer | null): void;
  
  /**
   * 
   * @param commandBuffer
   * @param queryPool
   * @param firstQuery
   * @param queryCount
   */
  function vkCmdResetQueryPool(commandBuffer: VkCommandBuffer | null, queryPool: VkQueryPool | null, firstQuery: number, queryCount: number): void;
  
  /**
   * 
   * @param commandBuffer
   * @param pipelineStage
   * @param queryPool
   * @param query
   */
  function vkCmdWriteTimestamp(commandBuffer: VkCommandBuffer | null, pipelineStage: VkPipelineStageFlagBits, queryPool: VkQueryPool | null, query: number): void;
  
  /**
   * 
   * @param commandBuffer
   * @param queryPool
   * @param firstQuery
   * @param queryCount
   * @param dstBuffer
   * @param dstOffset
   * @param stride
   * @param flags
   */
  function vkCmdCopyQueryPoolResults(commandBuffer: VkCommandBuffer | null, queryPool: VkQueryPool | null, firstQuery: number, queryCount: number, dstBuffer: VkBuffer | null, dstOffset: bigint | number, stride: bigint | number, flags: VkQueryResultFlagBits): void;
  
  /**
   * 
   * @param commandBuffer
   * @param layout
   * @param stageFlags
   * @param offset
   * @param size
   * @param pValues
   */
  function vkCmdPushConstants(commandBuffer: VkCommandBuffer | null, layout: VkPipelineLayout | null, stageFlags: VkShaderStageFlagBits, offset: number, size: number, pValues: ArrayBuffer | null): void;
  
  /**
   * 
   * @param commandBuffer
   * @param pRenderPassBegin
   * @param contents
   */
  function vkCmdBeginRenderPass(commandBuffer: VkCommandBuffer | null, pRenderPassBegin: VkRenderPassBeginInfo | null, contents: VkSubpassContents): void;
  
  /**
   * 
   * @param commandBuffer
   * @param contents
   */
  function vkCmdNextSubpass(commandBuffer: VkCommandBuffer | null, contents: VkSubpassContents): void;
  
  /**
   * 
   * @param commandBuffer
   */
  function vkCmdEndRenderPass(commandBuffer: VkCommandBuffer | null): void;
  
  /**
   * 
   * @param commandBuffer
   * @param commandBufferCount
   * @param pCommandBuffers
   */
  function vkCmdExecuteCommands(commandBuffer: VkCommandBuffer | null, commandBufferCount: number, pCommandBuffers: VkCommandBuffer[] | null): void;
  
  /**
   * 
   * @param physicalDevice
   * @param pPropertyCount
   * @param pProperties
   */
  function vkGetPhysicalDeviceDisplayPropertiesKHR(physicalDevice: VkPhysicalDevice | null, pPropertyCount: VkInout | null, pProperties: VkDisplayPropertiesKHR[] | null): VkResult;
  
  /**
   * 
   * @param physicalDevice
   * @param pPropertyCount
   * @param pProperties
   */
  function vkGetPhysicalDeviceDisplayPlanePropertiesKHR(physicalDevice: VkPhysicalDevice | null, pPropertyCount: VkInout | null, pProperties: VkDisplayPlanePropertiesKHR[] | null): VkResult;
  
  /**
   * 
   * @param physicalDevice
   * @param planeIndex
   * @param pDisplayCount
   * @param pDisplays
   */
  function vkGetDisplayPlaneSupportedDisplaysKHR(physicalDevice: VkPhysicalDevice | null, planeIndex: number, pDisplayCount: VkInout | null, pDisplays: VkDisplayKHR[] | null): VkResult;
  
  /**
   * 
   * @param physicalDevice
   * @param display
   * @param pPropertyCount
   * @param pProperties
   */
  function vkGetDisplayModePropertiesKHR(physicalDevice: VkPhysicalDevice | null, display: VkDisplayKHR | null, pPropertyCount: VkInout | null, pProperties: VkDisplayModePropertiesKHR[] | null): VkResult;
  
  /**
   * 
   * @param physicalDevice
   * @param display
   * @param pCreateInfo
   * @param pAllocator
   * @param pMode
   */
  function vkCreateDisplayModeKHR(physicalDevice: VkPhysicalDevice | null, display: VkDisplayKHR | null, pCreateInfo: VkDisplayModeCreateInfoKHR | null, pAllocator: null, pMode: VkDisplayModeKHR | null): VkResult;
  
  /**
   * 
   * @param physicalDevice
   * @param mode
   * @param planeIndex
   * @param pCapabilities
   */
  function vkGetDisplayPlaneCapabilitiesKHR(physicalDevice: VkPhysicalDevice | null, mode: VkDisplayModeKHR | null, planeIndex: number, pCapabilities: VkDisplayPlaneCapabilitiesKHR | null): VkResult;
  
  /**
   * 
   * @param instance
   * @param pCreateInfo
   * @param pAllocator
   * @param pSurface
   */
  function vkCreateDisplayPlaneSurfaceKHR(instance: VkInstance | null, pCreateInfo: VkDisplaySurfaceCreateInfoKHR | null, pAllocator: null, pSurface: VkSurfaceKHR | null): VkResult;
  
  /**
   * 
   * @param device
   * @param swapchainCount
   * @param pCreateInfos
   * @param pAllocator
   * @param pSwapchains
   */
  function vkCreateSharedSwapchainsKHR(device: VkDevice | null, swapchainCount: number, pCreateInfos: VkSwapchainCreateInfoKHR[] | null, pAllocator: null, pSwapchains: VkSwapchainKHR[] | null): VkResult;
  
  /**
   * 
   * @param instance
   * @param surface
   * @param pAllocator
   */
  function vkDestroySurfaceKHR(instance: VkInstance | null, surface: VkSurfaceKHR | null, pAllocator: null): void;
  
  /**
   * 
   * @param physicalDevice
   * @param queueFamilyIndex
   * @param surface
   * @param pSupported
   */
  function vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice: VkPhysicalDevice | null, queueFamilyIndex: number, surface: VkSurfaceKHR | null, pSupported: VkInout | null): VkResult;
  
  /**
   * 
   * @param physicalDevice
   * @param surface
   * @param pSurfaceCapabilities
   */
  function vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice: VkPhysicalDevice | null, surface: VkSurfaceKHR | null, pSurfaceCapabilities: VkSurfaceCapabilitiesKHR | null): VkResult;
  
  /**
   * 
   * @param physicalDevice
   * @param surface
   * @param pSurfaceFormatCount
   * @param pSurfaceFormats
   */
  function vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice: VkPhysicalDevice | null, surface: VkSurfaceKHR | null, pSurfaceFormatCount: VkInout | null, pSurfaceFormats: VkSurfaceFormatKHR[] | null): VkResult;
  
  /**
   * 
   * @param physicalDevice
   * @param surface
   * @param pPresentModeCount
   * @param pPresentModes
   */
  function vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice: VkPhysicalDevice | null, surface: VkSurfaceKHR | null, pPresentModeCount: VkInout | null, pPresentModes: Int32Array | null): VkResult;
  
  /**
   * 
   * @param device
   * @param pCreateInfo
   * @param pAllocator
   * @param pSwapchain
   */
  function vkCreateSwapchainKHR(device: VkDevice | null, pCreateInfo: VkSwapchainCreateInfoKHR | null, pAllocator: null, pSwapchain: VkSwapchainKHR | null): VkResult;
  
  /**
   * 
   * @param device
   * @param swapchain
   * @param pAllocator
   */
  function vkDestroySwapchainKHR(device: VkDevice | null, swapchain: VkSwapchainKHR | null, pAllocator: null): void;
  
  /**
   * 
   * @param device
   * @param swapchain
   * @param pSwapchainImageCount
   * @param pSwapchainImages
   */
  function vkGetSwapchainImagesKHR(device: VkDevice | null, swapchain: VkSwapchainKHR | null, pSwapchainImageCount: VkInout | null, pSwapchainImages: VkImage[] | null): VkResult;
  
  /**
   * 
   * @param device
   * @param swapchain
   * @param timeout
   * @param semaphore
   * @param fence
   * @param pImageIndex
   */
  function vkAcquireNextImageKHR(device: VkDevice | null, swapchain: VkSwapchainKHR | null, timeout: bigint | number, semaphore: VkSemaphore | null, fence: VkFence | null, pImageIndex: VkInout | null): VkResult;
  
  /**
   * 
   * @param queue
   * @param pPresentInfo
   */
  function vkQueuePresentKHR(queue: VkQueue | null, pPresentInfo: VkPresentInfoKHR | null): VkResult;
  
  /**
   * 
   * @param instance
   * @param pCreateInfo
   * @param pAllocator
   * @param pSurface
   */
  function vkCreateWin32SurfaceKHR(instance: VkInstance | null, pCreateInfo: VkWin32SurfaceCreateInfoKHR | null, pAllocator: null, pSurface: VkSurfaceKHR | null): VkResult;
  
  /**
   * 
   * @param physicalDevice
   * @param queueFamilyIndex
   */
  function vkGetPhysicalDeviceWin32PresentationSupportKHR(physicalDevice: VkPhysicalDevice | null, queueFamilyIndex: number): number;
  
  /**
   * 
   * @param instance
   * @param pCreateInfo
   * @param pAllocator
   * @param pCallback
   */
  function vkCreateDebugReportCallbackEXT(instance: VkInstance | null, pCreateInfo: VkDebugReportCallbackCreateInfoEXT | null, pAllocator: null, pCallback: VkDebugReportCallbackEXT | null): VkResult;
  
  /**
   * 
   * @param instance
   * @param callback
   * @param pAllocator
   */
  function vkDestroyDebugReportCallbackEXT(instance: VkInstance | null, callback: VkDebugReportCallbackEXT | null, pAllocator: null): void;
  
  /**
   * 
   * @param instance
   * @param flags
   * @param objectType
   * @param object
   * @param location
   * @param messageCode
   * @param pLayerPrefix
   * @param pMessage
   */
  function vkDebugReportMessageEXT(instance: VkInstance | null, flags: VkDebugReportFlagBitsEXT, objectType: VkDebugReportObjectTypeEXT, object: bigint | number, location: bigint | number, messageCode: number, pLayerPrefix: string | null, pMessage: string | null): void;
  
  /**
   * 
   * @param device
   * @param pNameInfo
   */
  function vkDebugMarkerSetObjectNameEXT(device: VkDevice | null, pNameInfo: VkDebugMarkerObjectNameInfoEXT | null): VkResult;
  
  /**
   * 
   * @param device
   * @param pTagInfo
   */
  function vkDebugMarkerSetObjectTagEXT(device: VkDevice | null, pTagInfo: VkDebugMarkerObjectTagInfoEXT | null): VkResult;
  
  /**
   * 
   * @param commandBuffer
   * @param pMarkerInfo
   */
  function vkCmdDebugMarkerBeginEXT(commandBuffer: VkCommandBuffer | null, pMarkerInfo: VkDebugMarkerMarkerInfoEXT | null): void;
  
  /**
   * 
   * @param commandBuffer
   */
  function vkCmdDebugMarkerEndEXT(commandBuffer: VkCommandBuffer | null): void;
  
  /**
   * 
   * @param commandBuffer
   * @param pMarkerInfo
   */
  function vkCmdDebugMarkerInsertEXT(commandBuffer: VkCommandBuffer | null, pMarkerInfo: VkDebugMarkerMarkerInfoEXT | null): void;
  
  /**
   * 
   * @param physicalDevice
   * @param format
   * @param type
   * @param tiling
   * @param usage
   * @param flags
   * @param externalHandleType
   * @param pExternalImageFormatProperties
   */
  function vkGetPhysicalDeviceExternalImageFormatPropertiesNV(physicalDevice: VkPhysicalDevice | null, format: VkFormat, type: VkImageType, tiling: VkImageTiling, usage: VkImageUsageFlagBits, flags: VkImageCreateFlagBits, externalHandleType: VkExternalMemoryHandleTypeFlagBitsNV, pExternalImageFormatProperties: VkExternalImageFormatPropertiesNV | null): VkResult;
  
  /**
   * 
   * @param device
   * @param memory
   * @param handleType
   * @param pHandle
   */
  function vkGetMemoryWin32HandleNV(device: VkDevice | null, memory: VkDeviceMemory | null, handleType: VkExternalMemoryHandleTypeFlagBitsNV, pHandle: VkInoutAddress | null): VkResult;
  
  /**
   * 
   * @param commandBuffer
   * @param pProcessCommandsInfo
   */
  function vkCmdProcessCommandsNVX(commandBuffer: VkCommandBuffer | null, pProcessCommandsInfo: VkCmdProcessCommandsInfoNVX | null): void;
  
  /**
   * 
   * @param commandBuffer
   * @param pReserveSpaceInfo
   */
  function vkCmdReserveSpaceForCommandsNVX(commandBuffer: VkCommandBuffer | null, pReserveSpaceInfo: VkCmdReserveSpaceForCommandsInfoNVX | null): void;
  
  /**
   * 
   * @param device
   * @param pCreateInfo
   * @param pAllocator
   * @param pIndirectCommandsLayout
   */
  function vkCreateIndirectCommandsLayoutNVX(device: VkDevice | null, pCreateInfo: VkIndirectCommandsLayoutCreateInfoNVX | null, pAllocator: null, pIndirectCommandsLayout: VkIndirectCommandsLayoutNVX | null): VkResult;
  
  /**
   * 
   * @param device
   * @param indirectCommandsLayout
   * @param pAllocator
   */
  function vkDestroyIndirectCommandsLayoutNVX(device: VkDevice | null, indirectCommandsLayout: VkIndirectCommandsLayoutNVX | null, pAllocator: null): void;
  
  /**
   * 
   * @param device
   * @param pCreateInfo
   * @param pAllocator
   * @param pObjectTable
   */
  function vkCreateObjectTableNVX(device: VkDevice | null, pCreateInfo: VkObjectTableCreateInfoNVX | null, pAllocator: null, pObjectTable: VkObjectTableNVX | null): VkResult;
  
  /**
   * 
   * @param device
   * @param objectTable
   * @param pAllocator
   */
  function vkDestroyObjectTableNVX(device: VkDevice | null, objectTable: VkObjectTableNVX | null, pAllocator: null): void;
  
  /**
   * 
   * @param device
   * @param objectTable
   * @param objectCount
   * @param ppObjectTableEntries
   * @param pObjectIndices
   */
  function vkRegisterObjectsNVX(device: VkDevice | null, objectTable: VkObjectTableNVX | null, objectCount: number, ppObjectTableEntries: VkObjectTableEntryNVX[] | null, pObjectIndices: Uint32Array | null): VkResult;
  
  /**
   * 
   * @param device
   * @param objectTable
   * @param objectCount
   * @param pObjectEntryTypes
   * @param pObjectIndices
   */
  function vkUnregisterObjectsNVX(device: VkDevice | null, objectTable: VkObjectTableNVX | null, objectCount: number, pObjectEntryTypes: Int32Array | null, pObjectIndices: Uint32Array | null): VkResult;
  
  /**
   * 
   * @param physicalDevice
   * @param pFeatures
   * @param pLimits
   */
  function vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX(physicalDevice: VkPhysicalDevice | null, pFeatures: VkDeviceGeneratedCommandsFeaturesNVX | null, pLimits: VkDeviceGeneratedCommandsLimitsNVX | null): void;
  
  /**
   * 
   * @param physicalDevice
   * @param pFeatures
   */
  function vkGetPhysicalDeviceFeatures2(physicalDevice: VkPhysicalDevice | null, pFeatures: VkPhysicalDeviceFeatures2 | null): void;
  
  /**
   * 
   * @param physicalDevice
   * @param pProperties
   */
  function vkGetPhysicalDeviceProperties2(physicalDevice: VkPhysicalDevice | null, pProperties: VkPhysicalDeviceProperties2 | null): void;
  
  /**
   * 
   * @param physicalDevice
   * @param format
   * @param pFormatProperties
   */
  function vkGetPhysicalDeviceFormatProperties2(physicalDevice: VkPhysicalDevice | null, format: VkFormat, pFormatProperties: VkFormatProperties2 | null): void;
  
  /**
   * 
   * @param physicalDevice
   * @param pImageFormatInfo
   * @param pImageFormatProperties
   */
  function vkGetPhysicalDeviceImageFormatProperties2(physicalDevice: VkPhysicalDevice | null, pImageFormatInfo: VkPhysicalDeviceImageFormatInfo2 | null, pImageFormatProperties: VkImageFormatProperties2 | null): VkResult;
  
  /**
   * 
   * @param physicalDevice
   * @param pQueueFamilyPropertyCount
   * @param pQueueFamilyProperties
   */
  function vkGetPhysicalDeviceQueueFamilyProperties2(physicalDevice: VkPhysicalDevice | null, pQueueFamilyPropertyCount: VkInout | null, pQueueFamilyProperties: VkQueueFamilyProperties2[] | null): void;
  
  /**
   * 
   * @param physicalDevice
   * @param pMemoryProperties
   */
  function vkGetPhysicalDeviceMemoryProperties2(physicalDevice: VkPhysicalDevice | null, pMemoryProperties: VkPhysicalDeviceMemoryProperties2 | null): void;
  
  /**
   * 
   * @param physicalDevice
   * @param pFormatInfo
   * @param pPropertyCount
   * @param pProperties
   */
  function vkGetPhysicalDeviceSparseImageFormatProperties2(physicalDevice: VkPhysicalDevice | null, pFormatInfo: VkPhysicalDeviceSparseImageFormatInfo2 | null, pPropertyCount: VkInout | null, pProperties: VkSparseImageFormatProperties2[] | null): void;
  
  /**
   * 
   * @param commandBuffer
   * @param pipelineBindPoint
   * @param layout
   * @param set
   * @param descriptorWriteCount
   * @param pDescriptorWrites
   */
  function vkCmdPushDescriptorSetKHR(commandBuffer: VkCommandBuffer | null, pipelineBindPoint: VkPipelineBindPoint, layout: VkPipelineLayout | null, set: number, descriptorWriteCount: number, pDescriptorWrites: VkWriteDescriptorSet[] | null): void;
  
  /**
   * 
   * @param device
   * @param commandPool
   * @param flags
   */
  function vkTrimCommandPool(device: VkDevice | null, commandPool: VkCommandPool | null, flags: number): void;
  
  /**
   * 
   * @param physicalDevice
   * @param pExternalBufferInfo
   * @param pExternalBufferProperties
   */
  function vkGetPhysicalDeviceExternalBufferProperties(physicalDevice: VkPhysicalDevice | null, pExternalBufferInfo: VkPhysicalDeviceExternalBufferInfo | null, pExternalBufferProperties: VkExternalBufferProperties | null): void;
  
  /**
   * 
   * @param device
   * @param pGetWin32HandleInfo
   * @param pHandle
   */
  function vkGetMemoryWin32HandleKHR(device: VkDevice | null, pGetWin32HandleInfo: VkMemoryGetWin32HandleInfoKHR | null, pHandle: VkInoutAddress | null): VkResult;
  
  /**
   * 
   * @param device
   * @param handleType
   * @param handle
   * @param pMemoryWin32HandleProperties
   */
  function vkGetMemoryWin32HandlePropertiesKHR(device: VkDevice | null, handleType: VkExternalMemoryHandleTypeFlagBits, handle: bigint | number, pMemoryWin32HandleProperties: VkMemoryWin32HandlePropertiesKHR | null): VkResult;
  
  /**
   * 
   * @param device
   * @param pGetFdInfo
   * @param pFd
   */
  function vkGetMemoryFdKHR(device: VkDevice | null, pGetFdInfo: VkMemoryGetFdInfoKHR | null, pFd: VkInout | null): VkResult;
  
  /**
   * 
   * @param device
   * @param handleType
   * @param fd
   * @param pMemoryFdProperties
   */
  function vkGetMemoryFdPropertiesKHR(device: VkDevice | null, handleType: VkExternalMemoryHandleTypeFlagBits, fd: number, pMemoryFdProperties: VkMemoryFdPropertiesKHR | null): VkResult;
  
  /**
   * 
   * @param physicalDevice
   * @param pExternalSemaphoreInfo
   * @param pExternalSemaphoreProperties
   */
  function vkGetPhysicalDeviceExternalSemaphoreProperties(physicalDevice: VkPhysicalDevice | null, pExternalSemaphoreInfo: VkPhysicalDeviceExternalSemaphoreInfo | null, pExternalSemaphoreProperties: VkExternalSemaphoreProperties | null): void;
  
  /**
   * 
   * @param device
   * @param pGetWin32HandleInfo
   * @param pHandle
   */
  function vkGetSemaphoreWin32HandleKHR(device: VkDevice | null, pGetWin32HandleInfo: VkSemaphoreGetWin32HandleInfoKHR | null, pHandle: VkInoutAddress | null): VkResult;
  
  /**
   * 
   * @param device
   * @param pImportSemaphoreWin32HandleInfo
   */
  function vkImportSemaphoreWin32HandleKHR(device: VkDevice | null, pImportSemaphoreWin32HandleInfo: VkImportSemaphoreWin32HandleInfoKHR | null): VkResult;
  
  /**
   * 
   * @param device
   * @param pGetFdInfo
   * @param pFd
   */
  function vkGetSemaphoreFdKHR(device: VkDevice | null, pGetFdInfo: VkSemaphoreGetFdInfoKHR | null, pFd: VkInout | null): VkResult;
  
  /**
   * 
   * @param device
   * @param pImportSemaphoreFdInfo
   */
  function vkImportSemaphoreFdKHR(device: VkDevice | null, pImportSemaphoreFdInfo: VkImportSemaphoreFdInfoKHR | null): VkResult;
  
  /**
   * 
   * @param physicalDevice
   * @param pExternalFenceInfo
   * @param pExternalFenceProperties
   */
  function vkGetPhysicalDeviceExternalFenceProperties(physicalDevice: VkPhysicalDevice | null, pExternalFenceInfo: VkPhysicalDeviceExternalFenceInfo | null, pExternalFenceProperties: VkExternalFenceProperties | null): void;
  
  /**
   * 
   * @param device
   * @param pGetWin32HandleInfo
   * @param pHandle
   */
  function vkGetFenceWin32HandleKHR(device: VkDevice | null, pGetWin32HandleInfo: VkFenceGetWin32HandleInfoKHR | null, pHandle: VkInoutAddress | null): VkResult;
  
  /**
   * 
   * @param device
   * @param pImportFenceWin32HandleInfo
   */
  function vkImportFenceWin32HandleKHR(device: VkDevice | null, pImportFenceWin32HandleInfo: VkImportFenceWin32HandleInfoKHR | null): VkResult;
  
  /**
   * 
   * @param device
   * @param pGetFdInfo
   * @param pFd
   */
  function vkGetFenceFdKHR(device: VkDevice | null, pGetFdInfo: VkFenceGetFdInfoKHR | null, pFd: VkInout | null): VkResult;
  
  /**
   * 
   * @param device
   * @param pImportFenceFdInfo
   */
  function vkImportFenceFdKHR(device: VkDevice | null, pImportFenceFdInfo: VkImportFenceFdInfoKHR | null): VkResult;
  
  /**
   * 
   * @param physicalDevice
   * @param display
   */
  function vkReleaseDisplayEXT(physicalDevice: VkPhysicalDevice | null, display: VkDisplayKHR | null): VkResult;
  
  /**
   * 
   * @param device
   * @param display
   * @param pDisplayPowerInfo
   */
  function vkDisplayPowerControlEXT(device: VkDevice | null, display: VkDisplayKHR | null, pDisplayPowerInfo: VkDisplayPowerInfoEXT | null): VkResult;
  
  /**
   * 
   * @param device
   * @param pDeviceEventInfo
   * @param pAllocator
   * @param pFence
   */
  function vkRegisterDeviceEventEXT(device: VkDevice | null, pDeviceEventInfo: VkDeviceEventInfoEXT | null, pAllocator: null, pFence: VkFence | null): VkResult;
  
  /**
   * 
   * @param device
   * @param display
   * @param pDisplayEventInfo
   * @param pAllocator
   * @param pFence
   */
  function vkRegisterDisplayEventEXT(device: VkDevice | null, display: VkDisplayKHR | null, pDisplayEventInfo: VkDisplayEventInfoEXT | null, pAllocator: null, pFence: VkFence | null): VkResult;
  
  /**
   * 
   * @param device
   * @param swapchain
   * @param counter
   * @param pCounterValue
   */
  function vkGetSwapchainCounterEXT(device: VkDevice | null, swapchain: VkSwapchainKHR | null, counter: VkSurfaceCounterFlagBitsEXT, pCounterValue: VkInoutAddress | null): VkResult;
  
  /**
   * 
   * @param physicalDevice
   * @param surface
   * @param pSurfaceCapabilities
   */
  function vkGetPhysicalDeviceSurfaceCapabilities2EXT(physicalDevice: VkPhysicalDevice | null, surface: VkSurfaceKHR | null, pSurfaceCapabilities: VkSurfaceCapabilities2EXT | null): VkResult;
  
  /**
   * 
   * @param instance
   * @param pPhysicalDeviceGroupCount
   * @param pPhysicalDeviceGroupProperties
   */
  function vkEnumeratePhysicalDeviceGroups(instance: VkInstance | null, pPhysicalDeviceGroupCount: VkInout | null, pPhysicalDeviceGroupProperties: VkPhysicalDeviceGroupProperties[] | null): VkResult;
  
  /**
   * 
   * @param device
   * @param heapIndex
   * @param localDeviceIndex
   * @param remoteDeviceIndex
   * @param pPeerMemoryFeatures
   */
  function vkGetDeviceGroupPeerMemoryFeatures(device: VkDevice | null, heapIndex: number, localDeviceIndex: number, remoteDeviceIndex: number, pPeerMemoryFeatures: VkInout | null): void;
  
  /**
   * 
   * @param device
   * @param bindInfoCount
   * @param pBindInfos
   */
  function vkBindBufferMemory2(device: VkDevice | null, bindInfoCount: number, pBindInfos: VkBindBufferMemoryInfo[] | null): VkResult;
  
  /**
   * 
   * @param device
   * @param bindInfoCount
   * @param pBindInfos
   */
  function vkBindImageMemory2(device: VkDevice | null, bindInfoCount: number, pBindInfos: VkBindImageMemoryInfo[] | null): VkResult;
  
  /**
   * 
   * @param commandBuffer
   * @param deviceMask
   */
  function vkCmdSetDeviceMask(commandBuffer: VkCommandBuffer | null, deviceMask: number): void;
  
  /**
   * 
   * @param device
   * @param pDeviceGroupPresentCapabilities
   */
  function vkGetDeviceGroupPresentCapabilitiesKHR(device: VkDevice | null, pDeviceGroupPresentCapabilities: VkDeviceGroupPresentCapabilitiesKHR | null): VkResult;
  
  /**
   * 
   * @param device
   * @param surface
   * @param pModes
   */
  function vkGetDeviceGroupSurfacePresentModesKHR(device: VkDevice | null, surface: VkSurfaceKHR | null, pModes: VkInout | null): VkResult;
  
  /**
   * 
   * @param device
   * @param pAcquireInfo
   * @param pImageIndex
   */
  function vkAcquireNextImage2KHR(device: VkDevice | null, pAcquireInfo: VkAcquireNextImageInfoKHR | null, pImageIndex: VkInout | null): VkResult;
  
  /**
   * 
   * @param commandBuffer
   * @param baseGroupX
   * @param baseGroupY
   * @param baseGroupZ
   * @param groupCountX
   * @param groupCountY
   * @param groupCountZ
   */
  function vkCmdDispatchBase(commandBuffer: VkCommandBuffer | null, baseGroupX: number, baseGroupY: number, baseGroupZ: number, groupCountX: number, groupCountY: number, groupCountZ: number): void;
  
  /**
   * 
   * @param physicalDevice
   * @param surface
   * @param pRectCount
   * @param pRects
   */
  function vkGetPhysicalDevicePresentRectanglesKHR(physicalDevice: VkPhysicalDevice | null, surface: VkSurfaceKHR | null, pRectCount: VkInout | null, pRects: VkRect2D[] | null): VkResult;
  
  /**
   * 
   * @param device
   * @param pCreateInfo
   * @param pAllocator
   * @param pDescriptorUpdateTemplate
   */
  function vkCreateDescriptorUpdateTemplate(device: VkDevice | null, pCreateInfo: VkDescriptorUpdateTemplateCreateInfo | null, pAllocator: null, pDescriptorUpdateTemplate: VkDescriptorUpdateTemplate | null): VkResult;
  
  /**
   * 
   * @param device
   * @param descriptorUpdateTemplate
   * @param pAllocator
   */
  function vkDestroyDescriptorUpdateTemplate(device: VkDevice | null, descriptorUpdateTemplate: VkDescriptorUpdateTemplate | null, pAllocator: null): void;
  
  /**
   * 
   * @param device
   * @param descriptorSet
   * @param descriptorUpdateTemplate
   * @param pData
   */
  function vkUpdateDescriptorSetWithTemplate(device: VkDevice | null, descriptorSet: VkDescriptorSet | null, descriptorUpdateTemplate: VkDescriptorUpdateTemplate | null, pData: ArrayBuffer | null): void;
  
  /**
   * 
   * @param commandBuffer
   * @param descriptorUpdateTemplate
   * @param layout
   * @param set
   * @param pData
   */
  function vkCmdPushDescriptorSetWithTemplateKHR(commandBuffer: VkCommandBuffer | null, descriptorUpdateTemplate: VkDescriptorUpdateTemplate | null, layout: VkPipelineLayout | null, set: number, pData: ArrayBuffer | null): void;
  
  /**
   * 
   * @param device
   * @param swapchainCount
   * @param pSwapchains
   * @param pMetadata
   */
  function vkSetHdrMetadataEXT(device: VkDevice | null, swapchainCount: number, pSwapchains: VkSwapchainKHR[] | null, pMetadata: VkHdrMetadataEXT[] | null): void;
  
  /**
   * 
   * @param device
   * @param swapchain
   */
  function vkGetSwapchainStatusKHR(device: VkDevice | null, swapchain: VkSwapchainKHR | null): VkResult;
  
  /**
   * 
   * @param device
   * @param swapchain
   * @param pDisplayTimingProperties
   */
  function vkGetRefreshCycleDurationGOOGLE(device: VkDevice | null, swapchain: VkSwapchainKHR | null, pDisplayTimingProperties: VkRefreshCycleDurationGOOGLE | null): VkResult;
  
  /**
   * 
   * @param device
   * @param swapchain
   * @param pPresentationTimingCount
   * @param pPresentationTimings
   */
  function vkGetPastPresentationTimingGOOGLE(device: VkDevice | null, swapchain: VkSwapchainKHR | null, pPresentationTimingCount: VkInout | null, pPresentationTimings: VkPastPresentationTimingGOOGLE[] | null): VkResult;
  
  /**
   * 
   * @param commandBuffer
   * @param firstViewport
   * @param viewportCount
   * @param pViewportWScalings
   */
  function vkCmdSetViewportWScalingNV(commandBuffer: VkCommandBuffer | null, firstViewport: number, viewportCount: number, pViewportWScalings: VkViewportWScalingNV[] | null): void;
  
  /**
   * 
   * @param commandBuffer
   * @param firstDiscardRectangle
   * @param discardRectangleCount
   * @param pDiscardRectangles
   */
  function vkCmdSetDiscardRectangleEXT(commandBuffer: VkCommandBuffer | null, firstDiscardRectangle: number, discardRectangleCount: number, pDiscardRectangles: VkRect2D[] | null): void;
  
  /**
   * 
   * @param commandBuffer
   * @param pSampleLocationsInfo
   */
  function vkCmdSetSampleLocationsEXT(commandBuffer: VkCommandBuffer | null, pSampleLocationsInfo: VkSampleLocationsInfoEXT | null): void;
  
  /**
   * 
   * @param physicalDevice
   * @param samples
   * @param pMultisampleProperties
   */
  function vkGetPhysicalDeviceMultisamplePropertiesEXT(physicalDevice: VkPhysicalDevice | null, samples: VkSampleCountFlagBits, pMultisampleProperties: VkMultisamplePropertiesEXT | null): void;
  
  /**
   * 
   * @param physicalDevice
   * @param pSurfaceInfo
   * @param pSurfaceCapabilities
   */
  function vkGetPhysicalDeviceSurfaceCapabilities2KHR(physicalDevice: VkPhysicalDevice | null, pSurfaceInfo: VkPhysicalDeviceSurfaceInfo2KHR | null, pSurfaceCapabilities: VkSurfaceCapabilities2KHR | null): VkResult;
  
  /**
   * 
   * @param physicalDevice
   * @param pSurfaceInfo
   * @param pSurfaceFormatCount
   * @param pSurfaceFormats
   */
  function vkGetPhysicalDeviceSurfaceFormats2KHR(physicalDevice: VkPhysicalDevice | null, pSurfaceInfo: VkPhysicalDeviceSurfaceInfo2KHR | null, pSurfaceFormatCount: VkInout | null, pSurfaceFormats: VkSurfaceFormat2KHR[] | null): VkResult;
  
  /**
   * 
   * @param physicalDevice
   * @param pPropertyCount
   * @param pProperties
   */
  function vkGetPhysicalDeviceDisplayProperties2KHR(physicalDevice: VkPhysicalDevice | null, pPropertyCount: VkInout | null, pProperties: VkDisplayProperties2KHR[] | null): VkResult;
  
  /**
   * 
   * @param physicalDevice
   * @param pPropertyCount
   * @param pProperties
   */
  function vkGetPhysicalDeviceDisplayPlaneProperties2KHR(physicalDevice: VkPhysicalDevice | null, pPropertyCount: VkInout | null, pProperties: VkDisplayPlaneProperties2KHR[] | null): VkResult;
  
  /**
   * 
   * @param physicalDevice
   * @param display
   * @param pPropertyCount
   * @param pProperties
   */
  function vkGetDisplayModeProperties2KHR(physicalDevice: VkPhysicalDevice | null, display: VkDisplayKHR | null, pPropertyCount: VkInout | null, pProperties: VkDisplayModeProperties2KHR[] | null): VkResult;
  
  /**
   * 
   * @param physicalDevice
   * @param pDisplayPlaneInfo
   * @param pCapabilities
   */
  function vkGetDisplayPlaneCapabilities2KHR(physicalDevice: VkPhysicalDevice | null, pDisplayPlaneInfo: VkDisplayPlaneInfo2KHR | null, pCapabilities: VkDisplayPlaneCapabilities2KHR | null): VkResult;
  
  /**
   * 
   * @param device
   * @param pInfo
   * @param pMemoryRequirements
   */
  function vkGetBufferMemoryRequirements2(device: VkDevice | null, pInfo: VkBufferMemoryRequirementsInfo2 | null, pMemoryRequirements: VkMemoryRequirements2 | null): void;
  
  /**
   * 
   * @param device
   * @param pInfo
   * @param pMemoryRequirements
   */
  function vkGetImageMemoryRequirements2(device: VkDevice | null, pInfo: VkImageMemoryRequirementsInfo2 | null, pMemoryRequirements: VkMemoryRequirements2 | null): void;
  
  /**
   * 
   * @param device
   * @param pInfo
   * @param pSparseMemoryRequirementCount
   * @param pSparseMemoryRequirements
   */
  function vkGetImageSparseMemoryRequirements2(device: VkDevice | null, pInfo: VkImageSparseMemoryRequirementsInfo2 | null, pSparseMemoryRequirementCount: VkInout | null, pSparseMemoryRequirements: VkSparseImageMemoryRequirements2[] | null): void;
  
  /**
   * 
   * @param device
   * @param pCreateInfo
   * @param pAllocator
   * @param pYcbcrConversion
   */
  function vkCreateSamplerYcbcrConversion(device: VkDevice | null, pCreateInfo: VkSamplerYcbcrConversionCreateInfo | null, pAllocator: null, pYcbcrConversion: VkSamplerYcbcrConversion | null): VkResult;
  
  /**
   * 
   * @param device
   * @param ycbcrConversion
   * @param pAllocator
   */
  function vkDestroySamplerYcbcrConversion(device: VkDevice | null, ycbcrConversion: VkSamplerYcbcrConversion | null, pAllocator: null): void;
  
  /**
   * 
   * @param device
   * @param pQueueInfo
   * @param pQueue
   */
  function vkGetDeviceQueue2(device: VkDevice | null, pQueueInfo: VkDeviceQueueInfo2 | null, pQueue: VkQueue | null): void;
  
  /**
   * 
   * @param device
   * @param pCreateInfo
   * @param pAllocator
   * @param pValidationCache
   */
  function vkCreateValidationCacheEXT(device: VkDevice | null, pCreateInfo: VkValidationCacheCreateInfoEXT | null, pAllocator: null, pValidationCache: VkValidationCacheEXT | null): VkResult;
  
  /**
   * 
   * @param device
   * @param validationCache
   * @param pAllocator
   */
  function vkDestroyValidationCacheEXT(device: VkDevice | null, validationCache: VkValidationCacheEXT | null, pAllocator: null): void;
  
  /**
   * 
   * @param device
   * @param validationCache
   * @param pDataSize
   * @param pData
   */
  function vkGetValidationCacheDataEXT(device: VkDevice | null, validationCache: VkValidationCacheEXT | null, pDataSize: VkInoutAddress | null, pData: ArrayBuffer | null): VkResult;
  
  /**
   * 
   * @param device
   * @param dstCache
   * @param srcCacheCount
   * @param pSrcCaches
   */
  function vkMergeValidationCachesEXT(device: VkDevice | null, dstCache: VkValidationCacheEXT | null, srcCacheCount: number, pSrcCaches: VkValidationCacheEXT[] | null): VkResult;
  
  /**
   * 
   * @param device
   * @param pCreateInfo
   * @param pSupport
   */
  function vkGetDescriptorSetLayoutSupport(device: VkDevice | null, pCreateInfo: VkDescriptorSetLayoutCreateInfo | null, pSupport: VkDescriptorSetLayoutSupport | null): void;
  
  /**
   * 
   * @param device
   * @param pipeline
   * @param shaderStage
   * @param infoType
   * @param pInfoSize
   * @param pInfo
   */
  function vkGetShaderInfoAMD(device: VkDevice | null, pipeline: VkPipeline | null, shaderStage: VkShaderStageFlagBits, infoType: VkShaderInfoTypeAMD, pInfoSize: VkInoutAddress | null, pInfo: ArrayBuffer | null): VkResult;
  
  /**
   * 
   * @param device
   * @param swapChain
   * @param localDimmingEnable
   */
  function vkSetLocalDimmingAMD(device: VkDevice | null, swapChain: VkSwapchainKHR | null, localDimmingEnable: boolean): void;
  
  /**
   * 
   * @param physicalDevice
   * @param pTimeDomainCount
   * @param pTimeDomains
   */
  function vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(physicalDevice: VkPhysicalDevice | null, pTimeDomainCount: VkInout | null, pTimeDomains: Int32Array | null): VkResult;
  
  /**
   * 
   * @param device
   * @param timestampCount
   * @param pTimestampInfos
   * @param pTimestamps
   * @param pMaxDeviation
   */
  function vkGetCalibratedTimestampsEXT(device: VkDevice | null, timestampCount: number, pTimestampInfos: VkCalibratedTimestampInfoEXT[] | null, pTimestamps: BigUint64Array | null, pMaxDeviation: VkInoutAddress | null): VkResult;
  
  /**
   * 
   * @param device
   * @param pNameInfo
   */
  function vkSetDebugUtilsObjectNameEXT(device: VkDevice | null, pNameInfo: VkDebugUtilsObjectNameInfoEXT | null): VkResult;
  
  /**
   * 
   * @param device
   * @param pTagInfo
   */
  function vkSetDebugUtilsObjectTagEXT(device: VkDevice | null, pTagInfo: VkDebugUtilsObjectTagInfoEXT | null): VkResult;
  
  /**
   * 
   * @param queue
   * @param pLabelInfo
   */
  function vkQueueBeginDebugUtilsLabelEXT(queue: VkQueue | null, pLabelInfo: VkDebugUtilsLabelEXT | null): void;
  
  /**
   * 
   * @param queue
   */
  function vkQueueEndDebugUtilsLabelEXT(queue: VkQueue | null): void;
  
  /**
   * 
   * @param queue
   * @param pLabelInfo
   */
  function vkQueueInsertDebugUtilsLabelEXT(queue: VkQueue | null, pLabelInfo: VkDebugUtilsLabelEXT | null): void;
  
  /**
   * 
   * @param commandBuffer
   * @param pLabelInfo
   */
  function vkCmdBeginDebugUtilsLabelEXT(commandBuffer: VkCommandBuffer | null, pLabelInfo: VkDebugUtilsLabelEXT | null): void;
  
  /**
   * 
   * @param commandBuffer
   */
  function vkCmdEndDebugUtilsLabelEXT(commandBuffer: VkCommandBuffer | null): void;
  
  /**
   * 
   * @param commandBuffer
   * @param pLabelInfo
   */
  function vkCmdInsertDebugUtilsLabelEXT(commandBuffer: VkCommandBuffer | null, pLabelInfo: VkDebugUtilsLabelEXT | null): void;
  
  /**
   * 
   * @param instance
   * @param pCreateInfo
   * @param pAllocator
   * @param pMessenger
   */
  function vkCreateDebugUtilsMessengerEXT(instance: VkInstance | null, pCreateInfo: VkDebugUtilsMessengerCreateInfoEXT | null, pAllocator: null, pMessenger: VkDebugUtilsMessengerEXT | null): VkResult;
  
  /**
   * 
   * @param instance
   * @param messenger
   * @param pAllocator
   */
  function vkDestroyDebugUtilsMessengerEXT(instance: VkInstance | null, messenger: VkDebugUtilsMessengerEXT | null, pAllocator: null): void;
  
  /**
   * 
   * @param instance
   * @param messageSeverity
   * @param messageTypes
   * @param pCallbackData
   */
  function vkSubmitDebugUtilsMessageEXT(instance: VkInstance | null, messageSeverity: VkDebugUtilsMessageSeverityFlagBitsEXT, messageTypes: VkDebugUtilsMessageTypeFlagBitsEXT, pCallbackData: VkDebugUtilsMessengerCallbackDataEXT | null): void;
  
  /**
   * 
   * @param device
   * @param handleType
   * @param pHostPointer
   * @param pMemoryHostPointerProperties
   */
  function vkGetMemoryHostPointerPropertiesEXT(device: VkDevice | null, handleType: VkExternalMemoryHandleTypeFlagBits, pHostPointer: ArrayBuffer | null, pMemoryHostPointerProperties: VkMemoryHostPointerPropertiesEXT | null): VkResult;
  
  /**
   * 
   * @param commandBuffer
   * @param pipelineStage
   * @param dstBuffer
   * @param dstOffset
   * @param marker
   */
  function vkCmdWriteBufferMarkerAMD(commandBuffer: VkCommandBuffer | null, pipelineStage: VkPipelineStageFlagBits, dstBuffer: VkBuffer | null, dstOffset: bigint | number, marker: number): void;
  
  /**
   * 
   * @param device
   * @param pCreateInfo
   * @param pAllocator
   * @param pRenderPass
   */
  function vkCreateRenderPass2KHR(device: VkDevice | null, pCreateInfo: VkRenderPassCreateInfo2KHR | null, pAllocator: null, pRenderPass: VkRenderPass | null): VkResult;
  
  /**
   * 
   * @param commandBuffer
   * @param pRenderPassBegin
   * @param pSubpassBeginInfo
   */
  function vkCmdBeginRenderPass2KHR(commandBuffer: VkCommandBuffer | null, pRenderPassBegin: VkRenderPassBeginInfo | null, pSubpassBeginInfo: VkSubpassBeginInfoKHR | null): void;
  
  /**
   * 
   * @param commandBuffer
   * @param pSubpassBeginInfo
   * @param pSubpassEndInfo
   */
  function vkCmdNextSubpass2KHR(commandBuffer: VkCommandBuffer | null, pSubpassBeginInfo: VkSubpassBeginInfoKHR | null, pSubpassEndInfo: VkSubpassEndInfoKHR | null): void;
  
  /**
   * 
   * @param commandBuffer
   * @param pSubpassEndInfo
   */
  function vkCmdEndRenderPass2KHR(commandBuffer: VkCommandBuffer | null, pSubpassEndInfo: VkSubpassEndInfoKHR | null): void;
  
  /**
   * 
   * @param commandBuffer
   * @param buffer
   * @param offset
   * @param countBuffer
   * @param countBufferOffset
   * @param maxDrawCount
   * @param stride
   */
  function vkCmdDrawIndirectCountKHR(commandBuffer: VkCommandBuffer | null, buffer: VkBuffer | null, offset: bigint | number, countBuffer: VkBuffer | null, countBufferOffset: bigint | number, maxDrawCount: number, stride: number): void;
  
  /**
   * 
   * @param commandBuffer
   * @param buffer
   * @param offset
   * @param countBuffer
   * @param countBufferOffset
   * @param maxDrawCount
   * @param stride
   */
  function vkCmdDrawIndexedIndirectCountKHR(commandBuffer: VkCommandBuffer | null, buffer: VkBuffer | null, offset: bigint | number, countBuffer: VkBuffer | null, countBufferOffset: bigint | number, maxDrawCount: number, stride: number): void;
  
  /**
   * 
   * @param commandBuffer
   * @param pCheckpointMarker
   */
  function vkCmdSetCheckpointNV(commandBuffer: VkCommandBuffer | null, pCheckpointMarker: ArrayBuffer | null): void;
  
  /**
   * 
   * @param queue
   * @param pCheckpointDataCount
   * @param pCheckpointData
   */
  function vkGetQueueCheckpointDataNV(queue: VkQueue | null, pCheckpointDataCount: VkInout | null, pCheckpointData: VkCheckpointDataNV[] | null): void;
  
  /**
   * 
   * @param commandBuffer
   * @param firstBinding
   * @param bindingCount
   * @param pBuffers
   * @param pOffsets
   * @param pSizes
   */
  function vkCmdBindTransformFeedbackBuffersEXT(commandBuffer: VkCommandBuffer | null, firstBinding: number, bindingCount: number, pBuffers: VkBuffer[] | null, pOffsets: BigUint64Array | null, pSizes: BigUint64Array | null): void;
  
  /**
   * 
   * @param commandBuffer
   * @param firstCounterBuffer
   * @param counterBufferCount
   * @param pCounterBuffers
   * @param pCounterBufferOffsets
   */
  function vkCmdBeginTransformFeedbackEXT(commandBuffer: VkCommandBuffer | null, firstCounterBuffer: number, counterBufferCount: number, pCounterBuffers: VkBuffer[] | null, pCounterBufferOffsets: BigUint64Array | null): void;
  
  /**
   * 
   * @param commandBuffer
   * @param firstCounterBuffer
   * @param counterBufferCount
   * @param pCounterBuffers
   * @param pCounterBufferOffsets
   */
  function vkCmdEndTransformFeedbackEXT(commandBuffer: VkCommandBuffer | null, firstCounterBuffer: number, counterBufferCount: number, pCounterBuffers: VkBuffer[] | null, pCounterBufferOffsets: BigUint64Array | null): void;
  
  /**
   * 
   * @param commandBuffer
   * @param queryPool
   * @param query
   * @param flags
   * @param index
   */
  function vkCmdBeginQueryIndexedEXT(commandBuffer: VkCommandBuffer | null, queryPool: VkQueryPool | null, query: number, flags: VkQueryControlFlagBits, index: number): void;
  
  /**
   * 
   * @param commandBuffer
   * @param queryPool
   * @param query
   * @param index
   */
  function vkCmdEndQueryIndexedEXT(commandBuffer: VkCommandBuffer | null, queryPool: VkQueryPool | null, query: number, index: number): void;
  
  /**
   * 
   * @param commandBuffer
   * @param instanceCount
   * @param firstInstance
   * @param counterBuffer
   * @param counterBufferOffset
   * @param counterOffset
   * @param vertexStride
   */
  function vkCmdDrawIndirectByteCountEXT(commandBuffer: VkCommandBuffer | null, instanceCount: number, firstInstance: number, counterBuffer: VkBuffer | null, counterBufferOffset: bigint | number, counterOffset: number, vertexStride: number): void;
  
  /**
   * 
   * @param commandBuffer
   * @param firstExclusiveScissor
   * @param exclusiveScissorCount
   * @param pExclusiveScissors
   */
  function vkCmdSetExclusiveScissorNV(commandBuffer: VkCommandBuffer | null, firstExclusiveScissor: number, exclusiveScissorCount: number, pExclusiveScissors: VkRect2D[] | null): void;
  
  /**
   * 
   * @param commandBuffer
   * @param imageView
   * @param imageLayout
   */
  function vkCmdBindShadingRateImageNV(commandBuffer: VkCommandBuffer | null, imageView: VkImageView | null, imageLayout: VkImageLayout): void;
  
  /**
   * 
   * @param commandBuffer
   * @param firstViewport
   * @param viewportCount
   * @param pShadingRatePalettes
   */
  function vkCmdSetViewportShadingRatePaletteNV(commandBuffer: VkCommandBuffer | null, firstViewport: number, viewportCount: number, pShadingRatePalettes: VkShadingRatePaletteNV[] | null): void;
  
  /**
   * 
   * @param commandBuffer
   * @param sampleOrderType
   * @param customSampleOrderCount
   * @param pCustomSampleOrders
   */
  function vkCmdSetCoarseSampleOrderNV(commandBuffer: VkCommandBuffer | null, sampleOrderType: VkCoarseSampleOrderTypeNV, customSampleOrderCount: number, pCustomSampleOrders: VkCoarseSampleOrderCustomNV[] | null): void;
  
  /**
   * 
   * @param commandBuffer
   * @param taskCount
   * @param firstTask
   */
  function vkCmdDrawMeshTasksNV(commandBuffer: VkCommandBuffer | null, taskCount: number, firstTask: number): void;
  
  /**
   * 
   * @param commandBuffer
   * @param buffer
   * @param offset
   * @param drawCount
   * @param stride
   */
  function vkCmdDrawMeshTasksIndirectNV(commandBuffer: VkCommandBuffer | null, buffer: VkBuffer | null, offset: bigint | number, drawCount: number, stride: number): void;
  
  /**
   * 
   * @param commandBuffer
   * @param buffer
   * @param offset
   * @param countBuffer
   * @param countBufferOffset
   * @param maxDrawCount
   * @param stride
   */
  function vkCmdDrawMeshTasksIndirectCountNV(commandBuffer: VkCommandBuffer | null, buffer: VkBuffer | null, offset: bigint | number, countBuffer: VkBuffer | null, countBufferOffset: bigint | number, maxDrawCount: number, stride: number): void;
  
  /**
   * 
   * @param device
   * @param pipeline
   * @param shader
   */
  function vkCompileDeferredNV(device: VkDevice | null, pipeline: VkPipeline | null, shader: number): VkResult;
  
  /**
   * 
   * @param device
   * @param pCreateInfo
   * @param pAllocator
   * @param pAccelerationStructure
   */
  function vkCreateAccelerationStructureNV(device: VkDevice | null, pCreateInfo: VkAccelerationStructureCreateInfoNV | null, pAllocator: null, pAccelerationStructure: VkAccelerationStructureNV | null): VkResult;
  
  /**
   * 
   * @param device
   * @param accelerationStructure
   * @param pAllocator
   */
  function vkDestroyAccelerationStructureNV(device: VkDevice | null, accelerationStructure: VkAccelerationStructureNV | null, pAllocator: null): void;
  
  /**
   * 
   * @param device
   * @param pInfo
   * @param pMemoryRequirements
   */
  function vkGetAccelerationStructureMemoryRequirementsNV(device: VkDevice | null, pInfo: VkAccelerationStructureMemoryRequirementsInfoNV | null, pMemoryRequirements: VkMemoryRequirements2KHR | null): void;
  
  /**
   * 
   * @param device
   * @param bindInfoCount
   * @param pBindInfos
   */
  function vkBindAccelerationStructureMemoryNV(device: VkDevice | null, bindInfoCount: number, pBindInfos: VkBindAccelerationStructureMemoryInfoNV[] | null): VkResult;
  
  /**
   * 
   * @param commandBuffer
   * @param dst
   * @param src
   * @param mode
   */
  function vkCmdCopyAccelerationStructureNV(commandBuffer: VkCommandBuffer | null, dst: VkAccelerationStructureNV | null, src: VkAccelerationStructureNV | null, mode: VkCopyAccelerationStructureModeNV): void;
  
  /**
   * 
   * @param commandBuffer
   * @param accelerationStructureCount
   * @param pAccelerationStructures
   * @param queryType
   * @param queryPool
   * @param firstQuery
   */
  function vkCmdWriteAccelerationStructuresPropertiesNV(commandBuffer: VkCommandBuffer | null, accelerationStructureCount: number, pAccelerationStructures: VkAccelerationStructureNV[] | null, queryType: VkQueryType, queryPool: VkQueryPool | null, firstQuery: number): void;
  
  /**
   * 
   * @param commandBuffer
   * @param pInfo
   * @param instanceData
   * @param instanceOffset
   * @param update
   * @param dst
   * @param src
   * @param scratch
   * @param scratchOffset
   */
  function vkCmdBuildAccelerationStructureNV(commandBuffer: VkCommandBuffer | null, pInfo: VkAccelerationStructureInfoNV | null, instanceData: VkBuffer | null, instanceOffset: bigint | number, update: boolean, dst: VkAccelerationStructureNV | null, src: VkAccelerationStructureNV | null, scratch: VkBuffer | null, scratchOffset: bigint | number): void;
  
  /**
   * 
   * @param commandBuffer
   * @param raygenShaderBindingTableBuffer
   * @param raygenShaderBindingOffset
   * @param missShaderBindingTableBuffer
   * @param missShaderBindingOffset
   * @param missShaderBindingStride
   * @param hitShaderBindingTableBuffer
   * @param hitShaderBindingOffset
   * @param hitShaderBindingStride
   * @param callableShaderBindingTableBuffer
   * @param callableShaderBindingOffset
   * @param callableShaderBindingStride
   * @param width
   * @param height
   * @param depth
   */
  function vkCmdTraceRaysNV(commandBuffer: VkCommandBuffer | null, raygenShaderBindingTableBuffer: VkBuffer | null, raygenShaderBindingOffset: bigint | number, missShaderBindingTableBuffer: VkBuffer | null, missShaderBindingOffset: bigint | number, missShaderBindingStride: bigint | number, hitShaderBindingTableBuffer: VkBuffer | null, hitShaderBindingOffset: bigint | number, hitShaderBindingStride: bigint | number, callableShaderBindingTableBuffer: VkBuffer | null, callableShaderBindingOffset: bigint | number, callableShaderBindingStride: bigint | number, width: number, height: number, depth: number): void;
  
  /**
   * 
   * @param device
   * @param pipeline
   * @param firstGroup
   * @param groupCount
   * @param dataSize
   * @param pData
   */
  function vkGetRayTracingShaderGroupHandlesNV(device: VkDevice | null, pipeline: VkPipeline | null, firstGroup: number, groupCount: number, dataSize: bigint | number, pData: ArrayBuffer | null): VkResult;
  
  /**
   * 
   * @param device
   * @param accelerationStructure
   * @param dataSize
   * @param pData
   */
  function vkGetAccelerationStructureHandleNV(device: VkDevice | null, accelerationStructure: VkAccelerationStructureNV | null, dataSize: bigint | number, pData: ArrayBuffer | null): VkResult;
  
  /**
   * 
   * @param device
   * @param pipelineCache
   * @param createInfoCount
   * @param pCreateInfos
   * @param pAllocator
   * @param pPipelines
   */
  function vkCreateRayTracingPipelinesNV(device: VkDevice | null, pipelineCache: VkPipelineCache | null, createInfoCount: number, pCreateInfos: VkRayTracingPipelineCreateInfoNV[] | null, pAllocator: null, pPipelines: VkPipeline[] | null): VkResult;
  
  /**
   * 
   * @param device
   * @param image
   * @param pProperties
   */
  function vkGetImageDrmFormatModifierPropertiesEXT(device: VkDevice | null, image: VkImage | null, pProperties: VkImageDrmFormatModifierPropertiesEXT | null): VkResult;
  
  /**
   * 
   * @param device
   * @param pInfo
   */
  function vkGetBufferDeviceAddressEXT(device: VkDevice | null, pInfo: VkBufferDeviceAddressInfoEXT | null): bigint;
  
  /**
   * 
   * @param physicalDevice
   * @param pPropertyCount
   * @param pProperties
   */
  function vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(physicalDevice: VkPhysicalDevice | null, pPropertyCount: VkInout | null, pProperties: VkCooperativeMatrixPropertiesNV[] | null): VkResult;
  
  /**
   * 
   * @param device
   * @param pInfo
   */
  function vkGetImageViewHandleNVX(device: VkDevice | null, pInfo: VkImageViewHandleInfoNVX | null): number;
  
  /**
   * 
   * @param physicalDevice
   * @param pSurfaceInfo
   * @param pPresentModeCount
   * @param pPresentModes
   */
  function vkGetPhysicalDeviceSurfacePresentModes2EXT(physicalDevice: VkPhysicalDevice | null, pSurfaceInfo: VkPhysicalDeviceSurfaceInfo2KHR | null, pPresentModeCount: VkInout | null, pPresentModes: Int32Array | null): VkResult;
  
  /**
   * 
   * @param device
   * @param pSurfaceInfo
   * @param pModes
   */
  function vkGetDeviceGroupSurfacePresentModes2EXT(device: VkDevice | null, pSurfaceInfo: VkPhysicalDeviceSurfaceInfo2KHR | null, pModes: VkInout | null): VkResult;
  
  /**
   * 
   * @param device
   * @param swapchain
   */
  function vkAcquireFullScreenExclusiveModeEXT(device: VkDevice | null, swapchain: VkSwapchainKHR | null): VkResult;
  
  /**
   * 
   * @param device
   * @param swapchain
   */
  function vkReleaseFullScreenExclusiveModeEXT(device: VkDevice | null, swapchain: VkSwapchainKHR | null): VkResult;
  
  /**
   * 
   * @param instance
   * @param pCreateInfo
   * @param pAllocator
   * @param pSurface
   */
  function vkCreateHeadlessSurfaceEXT(instance: VkInstance | null, pCreateInfo: VkHeadlessSurfaceCreateInfoEXT | null, pAllocator: null, pSurface: VkSurfaceKHR | null): VkResult;
  
  /**
   * 
   * @param physicalDevice
   * @param pCombinationCount
   * @param pCombinations
   */
  function vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(physicalDevice: VkPhysicalDevice | null, pCombinationCount: VkInout | null, pCombinations: VkFramebufferMixedSamplesCombinationNV[] | null): VkResult;
  
  /**
   * 
   * @param device
   * @param pInitializeInfo
   */
  function vkInitializePerformanceApiINTEL(device: VkDevice | null, pInitializeInfo: VkInitializePerformanceApiInfoINTEL | null): VkResult;
  
  /**
   * 
   * @param device
   */
  function vkUninitializePerformanceApiINTEL(device: VkDevice | null): void;
  
  /**
   * 
   * @param commandBuffer
   * @param pMarkerInfo
   */
  function vkCmdSetPerformanceMarkerINTEL(commandBuffer: VkCommandBuffer | null, pMarkerInfo: VkPerformanceMarkerInfoINTEL | null): VkResult;
  
  /**
   * 
   * @param commandBuffer
   * @param pMarkerInfo
   */
  function vkCmdSetPerformanceStreamMarkerINTEL(commandBuffer: VkCommandBuffer | null, pMarkerInfo: VkPerformanceStreamMarkerInfoINTEL | null): VkResult;
  
  /**
   * 
   * @param commandBuffer
   * @param pOverrideInfo
   */
  function vkCmdSetPerformanceOverrideINTEL(commandBuffer: VkCommandBuffer | null, pOverrideInfo: VkPerformanceOverrideInfoINTEL | null): VkResult;
  
  /**
   * 
   * @param device
   * @param pAcquireInfo
   * @param pConfiguration
   */
  function vkAcquirePerformanceConfigurationINTEL(device: VkDevice | null, pAcquireInfo: VkPerformanceConfigurationAcquireInfoINTEL | null, pConfiguration: VkPerformanceConfigurationINTEL | null): VkResult;
  
  /**
   * 
   * @param device
   * @param configuration
   */
  function vkReleasePerformanceConfigurationINTEL(device: VkDevice | null, configuration: VkPerformanceConfigurationINTEL | null): VkResult;
  
  /**
   * 
   * @param queue
   * @param configuration
   */
  function vkQueueSetPerformanceConfigurationINTEL(queue: VkQueue | null, configuration: VkPerformanceConfigurationINTEL | null): VkResult;
  
  /**
   * 
   * @param device
   * @param parameter
   * @param pValue
   */
  function vkGetPerformanceParameterINTEL(device: VkDevice | null, parameter: VkPerformanceParameterTypeINTEL, pValue: VkPerformanceValueINTEL | null): VkResult;
  
  /**
   * 
   * @param device
   * @param pPipelineInfo
   * @param pExecutableCount
   * @param pProperties
   */
  function vkGetPipelineExecutablePropertiesKHR(device: VkDevice | null, pPipelineInfo: VkPipelineInfoKHR | null, pExecutableCount: VkInout | null, pProperties: VkPipelineExecutablePropertiesKHR[] | null): VkResult;
  
  /**
   * 
   * @param device
   * @param pExecutableInfo
   * @param pStatisticCount
   * @param pStatistics
   */
  function vkGetPipelineExecutableStatisticsKHR(device: VkDevice | null, pExecutableInfo: VkPipelineExecutableInfoKHR | null, pStatisticCount: VkInout | null, pStatistics: VkPipelineExecutableStatisticKHR[] | null): VkResult;
  
  /**
   * 
   * @param device
   * @param pExecutableInfo
   * @param pInternalRepresentationCount
   * @param pInternalRepresentations
   */
  function vkGetPipelineExecutableInternalRepresentationsKHR(device: VkDevice | null, pExecutableInfo: VkPipelineExecutableInfoKHR | null, pInternalRepresentationCount: VkInout | null, pInternalRepresentations: VkPipelineExecutableInternalRepresentationKHR[] | null): VkResult;
  
  /**
   * 
   * @param commandBuffer
   * @param lineStippleFactor
   * @param lineStipplePattern
   */
  function vkCmdSetLineStippleEXT(commandBuffer: VkCommandBuffer | null, lineStippleFactor: number, lineStipplePattern: number): void;
  

  function createV8ArrayBufferFromMemory(
    addr: bigint,
    size: number
  ): ArrayBuffer;

  function VK_MAKE_VERSION(
    major: number,
    minor: number,
    patch: number
  ): number;

  function VK_VERSION_MAJOR(
    major: number
  ): number;

  function VK_VERSION_MINOR(
    minor: number
  ): number;

  function VK_VERSION_PATCH(
    patch: number
  ): number;

  function vkUseDevice(
    pDevice: VkDevice
  ): void;

  function vkUseInstance(
    pInstance: VkInstance
  ): void;

  var VK_API_VERSION_1_0: number;

  interface ResizeEvent {
    width: number;
    height: number;
  }
  interface FocusEvent {
    focused: boolean;
  }
  interface CloseEvent {

  }
  interface KeydownEvent {
    keyCode: number;
  }
  interface KeyupEvent {
    keyCode: number;
  }
  interface MousemoveEvent {
    x: number;
    y: number;
    movementX: number;
    movementY: number;
  }
  interface MousewheelEvent {
    x: number;
    y: number;
    deltaX: number;
    deltaY: number;
  }
  interface MousedownEvent {
    x: number;
    y: number;
    button: number;
  }
  interface MouseupEvent {
    x: number;
    y: number;
    button: number;
  }
  interface DropEvent {
    paths: string[];
  }

  interface VulkanWindowInitializer {
    width?: number;
    height?: number;
    title?: string;
  }

  var VulkanWindow: {
    prototype: VulkanWindow;
    new(param?: VulkanWindowInitializer | null): VulkanWindow;
    width: number;
    height: number;
    frameBufferWidth: number;
    frameBufferHeight: number;
    title: string;
    pollEvents(): void;
    focus(): void;
    close(): void;
    shouldClose(): boolean;
    createSurface(instance: VkInstance | null, pAllocator: null, surface: VkSurfaceKHR | null): number;
    getRequiredInstanceExtensions(): string[];
    onresize: ((ev: ResizeEvent) => any) | null;
    onfocus: ((ev: FocusEvent) => any) | null;
    onclose: ((ev: CloseEvent) => any) | null;
    onkeydown: ((ev: KeydownEvent) => any) | null;
    onkeyup: ((ev: KeyupEvent) => any) | null;
    onmousemove: ((ev: MousemoveEvent) => any) | null;
    onmousewheel: ((ev: MousewheelEvent) => any) | null;
    onmousedown: ((ev: MousedownEvent) => any) | null;
    onmouseup: ((ev: MouseupEvent) => any) | null;
    ondrop: ((ev: DropEvent) => any) | null;
  }

  interface VulkanWindow {
    width: number;
    height: number;
    frameBufferWidth: number;
    frameBufferHeight: number;
    title: string;
    pollEvents(): void;
    focus(): void;
    close(): void;
    shouldClose(): boolean;
    createSurface(instance: VkInstance | null, pAllocator: null, surface: VkSurfaceKHR | null): number;
    getRequiredInstanceExtensions(): string[];
    onresize: ((ev: ResizeEvent) => any) | null;
    onfocus: ((ev: FocusEvent) => any) | null;
    onclose: ((ev: CloseEvent) => any) | null;
    onkeydown: ((ev: KeydownEvent) => any) | null;
    onkeyup: ((ev: KeyupEvent) => any) | null;
    onmousemove: ((ev: MousemoveEvent) => any) | null;
    onmousewheel: ((ev: MousewheelEvent) => any) | null;
    onmousedown: ((ev: MousedownEvent) => any) | null;
    onmouseup: ((ev: MouseupEvent) => any) | null;
    ondrop: ((ev: DropEvent) => any) | null;
  }

}
