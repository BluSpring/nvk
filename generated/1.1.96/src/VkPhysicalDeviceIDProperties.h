/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY node-vulkan v0.1.0
 */
#ifndef __VK_VKPHYSICALDEVICEIDPROPERTIES_H__
#define __VK_VKPHYSICALDEVICEIDPROPERTIES_H__

#include <nan.h>

#include <vulkan/vulkan_win32.h>
#define GLFW_INCLUDE_VULKAN
#include <GLFW/glfw3.h>

class _VkPhysicalDeviceIDProperties: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    // #accessors
    static NAN_GETTER(GetsType);
    std::vector<uint8_t>* vdeviceUUID;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> deviceUUID;
    static NAN_GETTER(GetdeviceUUID);
    std::vector<uint8_t>* vdriverUUID;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> driverUUID;
    static NAN_GETTER(GetdriverUUID);
    std::vector<uint8_t>* vdeviceLUID;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> deviceLUID;
    static NAN_GETTER(GetdeviceLUID);
    static NAN_GETTER(GetdeviceNodeMask);
    static NAN_GETTER(GetdeviceLUIDValid);

    // real instance
    VkPhysicalDeviceIDProperties instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceIDProperties();
    ~_VkPhysicalDeviceIDProperties();

};

#endif