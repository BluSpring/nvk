/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY nvk v0.1.2
 */
#include "utils.h"
#include "index.h"
#include "VkSubresourceLayout.h"

Nan::Persistent<v8::FunctionTemplate> _VkSubresourceLayout::constructor;

_VkSubresourceLayout::_VkSubresourceLayout() {
  
  
}

_VkSubresourceLayout::~_VkSubresourceLayout() {
  //printf("VkSubresourceLayout deconstructed!!\n");
  
  
  
  
  
  
}

void _VkSubresourceLayout::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkSubresourceLayout::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkSubresourceLayout").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("offset").ToLocalChecked(), Getoffset, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("size").ToLocalChecked(), Getsize, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("rowPitch").ToLocalChecked(), GetrowPitch, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("arrayPitch").ToLocalChecked(), GetarrayPitch, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("depthPitch").ToLocalChecked(), GetdepthPitch, nullptr, ctor);
  Nan::Set(target, Nan::New("VkSubresourceLayout").ToLocalChecked(), ctor->GetFunction());
}

bool _VkSubresourceLayout::flush() {
  _VkSubresourceLayout *self = this;
  
  return true;
}

NAN_METHOD(_VkSubresourceLayout::New) {
  if (info.IsConstructCall()) {
    _VkSubresourceLayout* self = new _VkSubresourceLayout();
    self->Wrap(info.Holder());
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkSubresourceLayout constructor cannot be invoked without 'new'");
  }
};

// offset
NAN_GETTER(_VkSubresourceLayout::Getoffset) {
  _VkSubresourceLayout *self = Nan::ObjectWrap::Unwrap<_VkSubresourceLayout>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.offset));
}// size
NAN_GETTER(_VkSubresourceLayout::Getsize) {
  _VkSubresourceLayout *self = Nan::ObjectWrap::Unwrap<_VkSubresourceLayout>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.size));
}// rowPitch
NAN_GETTER(_VkSubresourceLayout::GetrowPitch) {
  _VkSubresourceLayout *self = Nan::ObjectWrap::Unwrap<_VkSubresourceLayout>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.rowPitch));
}// arrayPitch
NAN_GETTER(_VkSubresourceLayout::GetarrayPitch) {
  _VkSubresourceLayout *self = Nan::ObjectWrap::Unwrap<_VkSubresourceLayout>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.arrayPitch));
}// depthPitch
NAN_GETTER(_VkSubresourceLayout::GetdepthPitch) {
  _VkSubresourceLayout *self = Nan::ObjectWrap::Unwrap<_VkSubresourceLayout>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.depthPitch));
}