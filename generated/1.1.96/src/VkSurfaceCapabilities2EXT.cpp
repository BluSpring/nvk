/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY nvk v0.1.2
 */
#include "utils.h"
#include "index.h"
#include "VkSurfaceCapabilities2EXT.h"

Nan::Persistent<v8::FunctionTemplate> _VkSurfaceCapabilities2EXT::constructor;

_VkSurfaceCapabilities2EXT::_VkSurfaceCapabilities2EXT() {
  instance.sType = VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT;
  
}

_VkSurfaceCapabilities2EXT::~_VkSurfaceCapabilities2EXT() {
  //printf("VkSurfaceCapabilities2EXT deconstructed!!\n");
  
  
  
  
  
  
  
  
  
  
  
  
  
}

void _VkSurfaceCapabilities2EXT::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkSurfaceCapabilities2EXT::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkSurfaceCapabilities2EXT").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("sType").ToLocalChecked(), GetsType, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("minImageCount").ToLocalChecked(), GetminImageCount, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxImageCount").ToLocalChecked(), GetmaxImageCount, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("currentExtent").ToLocalChecked(), GetcurrentExtent, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("minImageExtent").ToLocalChecked(), GetminImageExtent, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxImageExtent").ToLocalChecked(), GetmaxImageExtent, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxImageArrayLayers").ToLocalChecked(), GetmaxImageArrayLayers, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("supportedTransforms").ToLocalChecked(), GetsupportedTransforms, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("currentTransform").ToLocalChecked(), GetcurrentTransform, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("supportedCompositeAlpha").ToLocalChecked(), GetsupportedCompositeAlpha, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("supportedUsageFlags").ToLocalChecked(), GetsupportedUsageFlags, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("supportedSurfaceCounters").ToLocalChecked(), GetsupportedSurfaceCounters, nullptr, ctor);
  Nan::Set(target, Nan::New("VkSurfaceCapabilities2EXT").ToLocalChecked(), ctor->GetFunction());
}

bool _VkSurfaceCapabilities2EXT::flush() {
  _VkSurfaceCapabilities2EXT *self = this;
  if (!(self->currentExtent.IsEmpty())) {
    v8::Local<v8::Value> value = Nan::New(self->currentExtent);
    
  }if (!(self->minImageExtent.IsEmpty())) {
    v8::Local<v8::Value> value = Nan::New(self->minImageExtent);
    
  }if (!(self->maxImageExtent.IsEmpty())) {
    v8::Local<v8::Value> value = Nan::New(self->maxImageExtent);
    
  }
  return true;
}

NAN_METHOD(_VkSurfaceCapabilities2EXT::New) {
  if (info.IsConstructCall()) {
    _VkSurfaceCapabilities2EXT* self = new _VkSurfaceCapabilities2EXT();
    self->Wrap(info.Holder());
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkSurfaceCapabilities2EXT constructor cannot be invoked without 'new'");
  }
};

// sType
NAN_GETTER(_VkSurfaceCapabilities2EXT::GetsType) {
  _VkSurfaceCapabilities2EXT *self = Nan::ObjectWrap::Unwrap<_VkSurfaceCapabilities2EXT>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sType));
}// minImageCount
NAN_GETTER(_VkSurfaceCapabilities2EXT::GetminImageCount) {
  _VkSurfaceCapabilities2EXT *self = Nan::ObjectWrap::Unwrap<_VkSurfaceCapabilities2EXT>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.minImageCount));
}// maxImageCount
NAN_GETTER(_VkSurfaceCapabilities2EXT::GetmaxImageCount) {
  _VkSurfaceCapabilities2EXT *self = Nan::ObjectWrap::Unwrap<_VkSurfaceCapabilities2EXT>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxImageCount));
}// currentExtent
NAN_GETTER(_VkSurfaceCapabilities2EXT::GetcurrentExtent) {
  _VkSurfaceCapabilities2EXT *self = Nan::ObjectWrap::Unwrap<_VkSurfaceCapabilities2EXT>(info.This());
  if (self->currentExtent.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->currentExtent);
    info.GetReturnValue().Set(obj);
  }
}// minImageExtent
NAN_GETTER(_VkSurfaceCapabilities2EXT::GetminImageExtent) {
  _VkSurfaceCapabilities2EXT *self = Nan::ObjectWrap::Unwrap<_VkSurfaceCapabilities2EXT>(info.This());
  if (self->minImageExtent.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->minImageExtent);
    info.GetReturnValue().Set(obj);
  }
}// maxImageExtent
NAN_GETTER(_VkSurfaceCapabilities2EXT::GetmaxImageExtent) {
  _VkSurfaceCapabilities2EXT *self = Nan::ObjectWrap::Unwrap<_VkSurfaceCapabilities2EXT>(info.This());
  if (self->maxImageExtent.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->maxImageExtent);
    info.GetReturnValue().Set(obj);
  }
}// maxImageArrayLayers
NAN_GETTER(_VkSurfaceCapabilities2EXT::GetmaxImageArrayLayers) {
  _VkSurfaceCapabilities2EXT *self = Nan::ObjectWrap::Unwrap<_VkSurfaceCapabilities2EXT>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxImageArrayLayers));
}// supportedTransforms
NAN_GETTER(_VkSurfaceCapabilities2EXT::GetsupportedTransforms) {
  _VkSurfaceCapabilities2EXT *self = Nan::ObjectWrap::Unwrap<_VkSurfaceCapabilities2EXT>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.supportedTransforms));
}// currentTransform
NAN_GETTER(_VkSurfaceCapabilities2EXT::GetcurrentTransform) {
  _VkSurfaceCapabilities2EXT *self = Nan::ObjectWrap::Unwrap<_VkSurfaceCapabilities2EXT>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.currentTransform));
}// supportedCompositeAlpha
NAN_GETTER(_VkSurfaceCapabilities2EXT::GetsupportedCompositeAlpha) {
  _VkSurfaceCapabilities2EXT *self = Nan::ObjectWrap::Unwrap<_VkSurfaceCapabilities2EXT>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.supportedCompositeAlpha));
}// supportedUsageFlags
NAN_GETTER(_VkSurfaceCapabilities2EXT::GetsupportedUsageFlags) {
  _VkSurfaceCapabilities2EXT *self = Nan::ObjectWrap::Unwrap<_VkSurfaceCapabilities2EXT>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.supportedUsageFlags));
}// supportedSurfaceCounters
NAN_GETTER(_VkSurfaceCapabilities2EXT::GetsupportedSurfaceCounters) {
  _VkSurfaceCapabilities2EXT *self = Nan::ObjectWrap::Unwrap<_VkSurfaceCapabilities2EXT>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.supportedSurfaceCounters));
}