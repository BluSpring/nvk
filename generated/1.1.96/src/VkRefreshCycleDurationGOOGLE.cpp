/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY nvk v0.1.4
 */
#include "utils.h"
#include "index.h"
#include "VkRefreshCycleDurationGOOGLE.h"

Nan::Persistent<v8::FunctionTemplate> _VkRefreshCycleDurationGOOGLE::constructor;

_VkRefreshCycleDurationGOOGLE::_VkRefreshCycleDurationGOOGLE() {
  
  
}

_VkRefreshCycleDurationGOOGLE::~_VkRefreshCycleDurationGOOGLE() {
  //printf("VkRefreshCycleDurationGOOGLE deconstructed!!\n");
  
  
}

void _VkRefreshCycleDurationGOOGLE::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkRefreshCycleDurationGOOGLE::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkRefreshCycleDurationGOOGLE").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("refreshDuration").ToLocalChecked(), GetrefreshDuration, nullptr, ctor);
  Nan::Set(target, Nan::New("VkRefreshCycleDurationGOOGLE").ToLocalChecked(), ctor->GetFunction());
}

bool _VkRefreshCycleDurationGOOGLE::flush() {
  _VkRefreshCycleDurationGOOGLE *self = this;
  
  return true;
}

NAN_METHOD(_VkRefreshCycleDurationGOOGLE::New) {
  if (info.IsConstructCall()) {
    _VkRefreshCycleDurationGOOGLE* self = new _VkRefreshCycleDurationGOOGLE();
    self->Wrap(info.Holder());
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkRefreshCycleDurationGOOGLE constructor cannot be invoked without 'new'");
  }
};

// refreshDuration
NAN_GETTER(_VkRefreshCycleDurationGOOGLE::GetrefreshDuration) {
  _VkRefreshCycleDurationGOOGLE *self = Nan::ObjectWrap::Unwrap<_VkRefreshCycleDurationGOOGLE>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.refreshDuration));
}