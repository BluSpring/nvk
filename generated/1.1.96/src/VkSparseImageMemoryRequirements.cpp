/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY nvk v0.1.4
 */
#include "utils.h"
#include "index.h"
#include "VkSparseImageMemoryRequirements.h"

Nan::Persistent<v8::FunctionTemplate> _VkSparseImageMemoryRequirements::constructor;

_VkSparseImageMemoryRequirements::_VkSparseImageMemoryRequirements() {
  
  
}

_VkSparseImageMemoryRequirements::~_VkSparseImageMemoryRequirements() {
  //printf("VkSparseImageMemoryRequirements deconstructed!!\n");
  
  
  
  
  
  
}

void _VkSparseImageMemoryRequirements::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkSparseImageMemoryRequirements::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkSparseImageMemoryRequirements").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("formatProperties").ToLocalChecked(), GetformatProperties, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("imageMipTailFirstLod").ToLocalChecked(), GetimageMipTailFirstLod, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("imageMipTailSize").ToLocalChecked(), GetimageMipTailSize, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("imageMipTailOffset").ToLocalChecked(), GetimageMipTailOffset, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("imageMipTailStride").ToLocalChecked(), GetimageMipTailStride, nullptr, ctor);
  Nan::Set(target, Nan::New("VkSparseImageMemoryRequirements").ToLocalChecked(), ctor->GetFunction());
}

bool _VkSparseImageMemoryRequirements::flush() {
  _VkSparseImageMemoryRequirements *self = this;
  if (!(self->formatProperties.IsEmpty())) {
    v8::Local<v8::Value> value = Nan::New(self->formatProperties);
    
  }
  return true;
}

NAN_METHOD(_VkSparseImageMemoryRequirements::New) {
  if (info.IsConstructCall()) {
    _VkSparseImageMemoryRequirements* self = new _VkSparseImageMemoryRequirements();
    self->Wrap(info.Holder());
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkSparseImageMemoryRequirements constructor cannot be invoked without 'new'");
  }
};

// formatProperties
NAN_GETTER(_VkSparseImageMemoryRequirements::GetformatProperties) {
  _VkSparseImageMemoryRequirements *self = Nan::ObjectWrap::Unwrap<_VkSparseImageMemoryRequirements>(info.This());
  if (self->formatProperties.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->formatProperties);
    info.GetReturnValue().Set(obj);
  }
}// imageMipTailFirstLod
NAN_GETTER(_VkSparseImageMemoryRequirements::GetimageMipTailFirstLod) {
  _VkSparseImageMemoryRequirements *self = Nan::ObjectWrap::Unwrap<_VkSparseImageMemoryRequirements>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.imageMipTailFirstLod));
}// imageMipTailSize
NAN_GETTER(_VkSparseImageMemoryRequirements::GetimageMipTailSize) {
  _VkSparseImageMemoryRequirements *self = Nan::ObjectWrap::Unwrap<_VkSparseImageMemoryRequirements>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.imageMipTailSize));
}// imageMipTailOffset
NAN_GETTER(_VkSparseImageMemoryRequirements::GetimageMipTailOffset) {
  _VkSparseImageMemoryRequirements *self = Nan::ObjectWrap::Unwrap<_VkSparseImageMemoryRequirements>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.imageMipTailOffset));
}// imageMipTailStride
NAN_GETTER(_VkSparseImageMemoryRequirements::GetimageMipTailStride) {
  _VkSparseImageMemoryRequirements *self = Nan::ObjectWrap::Unwrap<_VkSparseImageMemoryRequirements>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.imageMipTailStride));
}