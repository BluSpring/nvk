/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY nvk v0.1.4
 */
#include "utils.h"
#include "index.h"
#include "VkSampleLocationsInfoEXT.h"

Nan::Persistent<v8::FunctionTemplate> _VkSampleLocationsInfoEXT::constructor;

_VkSampleLocationsInfoEXT::_VkSampleLocationsInfoEXT() {
  instance.sType = VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT;
  vpSampleLocations = new std::vector<VkSampleLocationEXT>;
  
}

_VkSampleLocationsInfoEXT::~_VkSampleLocationsInfoEXT() {
  //printf("VkSampleLocationsInfoEXT deconstructed!!\n");
  
  
  
  
  
  vpSampleLocations->clear();
  delete vpSampleLocations;
  
  pSampleLocations.Reset();
  
}

void _VkSampleLocationsInfoEXT::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkSampleLocationsInfoEXT::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkSampleLocationsInfoEXT").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("sType").ToLocalChecked(), GetsType, SetsType, ctor);
  SetPrototypeAccessor(proto, Nan::New("sampleLocationsPerPixel").ToLocalChecked(), GetsampleLocationsPerPixel, SetsampleLocationsPerPixel, ctor);
  SetPrototypeAccessor(proto, Nan::New("sampleLocationGridSize").ToLocalChecked(), GetsampleLocationGridSize, SetsampleLocationGridSize, ctor);
  SetPrototypeAccessor(proto, Nan::New("sampleLocationsCount").ToLocalChecked(), GetsampleLocationsCount, SetsampleLocationsCount, ctor);
  SetPrototypeAccessor(proto, Nan::New("pSampleLocations").ToLocalChecked(), GetpSampleLocations, SetpSampleLocations, ctor);
  Nan::Set(target, Nan::New("VkSampleLocationsInfoEXT").ToLocalChecked(), ctor->GetFunction());
}

bool _VkSampleLocationsInfoEXT::flush() {
  _VkSampleLocationsInfoEXT *self = this;
  if (!(self->sampleLocationGridSize.IsEmpty())) {
    v8::Local<v8::Value> value = Nan::New(self->sampleLocationGridSize);
    
    _VkExtent2D* result = Nan::ObjectWrap::Unwrap<_VkExtent2D>(Nan::To<v8::Object>(value).ToLocalChecked());
    if (!result->flush()) return false;
    self->instance.sampleLocationGridSize = result->instance;
  }if (!(self->pSampleLocations.IsEmpty())) {
    v8::Local<v8::Value> value = Nan::New(self->pSampleLocations);
    
    v8::Local<v8::Array> array = v8::Local<v8::Array>::Cast(value);
    // validate length
    if (array->Length() != self->instance.sampleLocationsCount) {
      Nan::ThrowRangeError("Invalid array length, expected array length of 'sampleLocationsCount' for 'VkSampleLocationsInfoEXT.pSampleLocations'");
      return false;
    }
    std::vector<VkSampleLocationEXT>* data = self->vpSampleLocations;
    data->clear();
    for (unsigned int ii = 0; ii < array->Length(); ++ii) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(Nan::Get(array, ii).ToLocalChecked()).ToLocalChecked();
      if (!(Nan::New(_VkSampleLocationEXT::constructor)->HasInstance(obj))) {
        
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkSampleLocationEXT]' for 'VkSampleLocationsInfoEXT.pSampleLocations' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
        return false;
      }
      _VkSampleLocationEXT* result = Nan::ObjectWrap::Unwrap<_VkSampleLocationEXT>(obj);
      if (!result->flush()) return false;
      data->push_back(result->instance);
    };
    self->instance.pSampleLocations = data->data();
  }
  return true;
}

NAN_METHOD(_VkSampleLocationsInfoEXT::New) {
  if (info.IsConstructCall()) {
    _VkSampleLocationsInfoEXT* self = new _VkSampleLocationsInfoEXT();
    self->Wrap(info.Holder());
    
    if (info[0]->IsObject()) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(info[0]).ToLocalChecked();
      v8::Local<v8::String> sAccess0 = Nan::New("sType").ToLocalChecked();
      v8::Local<v8::String> sAccess2 = Nan::New("sampleLocationsPerPixel").ToLocalChecked();
      v8::Local<v8::String> sAccess3 = Nan::New("sampleLocationGridSize").ToLocalChecked();
      v8::Local<v8::String> sAccess4 = Nan::New("sampleLocationsCount").ToLocalChecked();
      v8::Local<v8::String> sAccess5 = Nan::New("pSampleLocations").ToLocalChecked();
      if (obj->Has(sAccess0)) info.This()->Set(sAccess0, obj->Get(sAccess0));
      if (obj->Has(sAccess2)) info.This()->Set(sAccess2, obj->Get(sAccess2));
      if (obj->Has(sAccess3)) info.This()->Set(sAccess3, obj->Get(sAccess3));
      if (obj->Has(sAccess4)) info.This()->Set(sAccess4, obj->Get(sAccess4));
      if (obj->Has(sAccess5)) info.This()->Set(sAccess5, obj->Get(sAccess5));
      
    }
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkSampleLocationsInfoEXT constructor cannot be invoked without 'new'");
  }
};

// sType
NAN_GETTER(_VkSampleLocationsInfoEXT::GetsType) {
  _VkSampleLocationsInfoEXT *self = Nan::ObjectWrap::Unwrap<_VkSampleLocationsInfoEXT>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sType));
}NAN_SETTER(_VkSampleLocationsInfoEXT::SetsType) {
  _VkSampleLocationsInfoEXT *self = Nan::ObjectWrap::Unwrap<_VkSampleLocationsInfoEXT>(info.This());
  if (value->IsNumber()) {
    self->instance.sType = static_cast<VkStructureType>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkSampleLocationsInfoEXT.sType' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// sampleLocationsPerPixel
NAN_GETTER(_VkSampleLocationsInfoEXT::GetsampleLocationsPerPixel) {
  _VkSampleLocationsInfoEXT *self = Nan::ObjectWrap::Unwrap<_VkSampleLocationsInfoEXT>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sampleLocationsPerPixel));
}NAN_SETTER(_VkSampleLocationsInfoEXT::SetsampleLocationsPerPixel) {
  _VkSampleLocationsInfoEXT *self = Nan::ObjectWrap::Unwrap<_VkSampleLocationsInfoEXT>(info.This());
  if (value->IsNumber()) {
    self->instance.sampleLocationsPerPixel = static_cast<VkSampleCountFlagBits>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkSampleLocationsInfoEXT.sampleLocationsPerPixel' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// sampleLocationGridSize
NAN_GETTER(_VkSampleLocationsInfoEXT::GetsampleLocationGridSize) {
  _VkSampleLocationsInfoEXT *self = Nan::ObjectWrap::Unwrap<_VkSampleLocationsInfoEXT>(info.This());
  if (self->sampleLocationGridSize.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->sampleLocationGridSize);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkSampleLocationsInfoEXT::SetsampleLocationGridSize) {
  _VkSampleLocationsInfoEXT *self = Nan::ObjectWrap::Unwrap<_VkSampleLocationsInfoEXT>(info.This());
  // js
  if (!value->IsNull()) {
    v8::Local<v8::Object> obj = Nan::To<v8::Object>(value).ToLocalChecked();
    if (Nan::New(_VkExtent2D::constructor)->HasInstance(obj)) {
      self->sampleLocationGridSize.Reset<v8::Object>(value.As<v8::Object>());
      _VkExtent2D* inst = Nan::ObjectWrap::Unwrap<_VkExtent2D>(obj);
      inst->flush();
      self->instance.sampleLocationGridSize = inst->instance;
    } else {
      
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkExtent2D]' for 'VkSampleLocationsInfoEXT.sampleLocationGridSize' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
      return;
    }
  } else if (value->IsNull()) {
    self->sampleLocationGridSize.Reset();
    memset(&self->instance.sampleLocationGridSize, 0, sizeof(VkExtent2D));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkExtent2D]' for 'VkSampleLocationsInfoEXT.sampleLocationGridSize' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// sampleLocationsCount
NAN_GETTER(_VkSampleLocationsInfoEXT::GetsampleLocationsCount) {
  _VkSampleLocationsInfoEXT *self = Nan::ObjectWrap::Unwrap<_VkSampleLocationsInfoEXT>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sampleLocationsCount));
}NAN_SETTER(_VkSampleLocationsInfoEXT::SetsampleLocationsCount) {
  _VkSampleLocationsInfoEXT *self = Nan::ObjectWrap::Unwrap<_VkSampleLocationsInfoEXT>(info.This());
  if (value->IsNumber()) {
    self->instance.sampleLocationsCount = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkSampleLocationsInfoEXT.sampleLocationsCount' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// pSampleLocations
NAN_GETTER(_VkSampleLocationsInfoEXT::GetpSampleLocations) {
  _VkSampleLocationsInfoEXT *self = Nan::ObjectWrap::Unwrap<_VkSampleLocationsInfoEXT>(info.This());
  if (self->pSampleLocations.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->pSampleLocations);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkSampleLocationsInfoEXT::SetpSampleLocations) {
  _VkSampleLocationsInfoEXT *self = Nan::ObjectWrap::Unwrap<_VkSampleLocationsInfoEXT>(info.This());
  
    // js
    if (value->IsArray()) {
      self->pSampleLocations.Reset<v8::Array>(value.As<v8::Array>());
    } else if (value->IsNull()) {
      self->pSampleLocations.Reset();
      self->instance.pSampleLocations = nullptr;
    } else {
      
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkSampleLocationEXT]' for 'VkSampleLocationsInfoEXT.pSampleLocations' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
      return;
    }
  
  // vulkan
  if (value->IsArray()) {
    
  } else if (value->IsNull()) {
    self->instance.pSampleLocations = nullptr;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkSampleLocationEXT]' for 'VkSampleLocationsInfoEXT.pSampleLocations' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}