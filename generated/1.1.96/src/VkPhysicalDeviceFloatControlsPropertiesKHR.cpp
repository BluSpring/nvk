/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY node-vulkan v0.1.0
 */
#include "utils.h"
#include "index.h"
#include "VkPhysicalDeviceFloatControlsPropertiesKHR.h"

Nan::Persistent<v8::FunctionTemplate> _VkPhysicalDeviceFloatControlsPropertiesKHR::constructor;

_VkPhysicalDeviceFloatControlsPropertiesKHR::_VkPhysicalDeviceFloatControlsPropertiesKHR() {
  instance.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR;
  
}

_VkPhysicalDeviceFloatControlsPropertiesKHR::~_VkPhysicalDeviceFloatControlsPropertiesKHR() {
  //printf("VkPhysicalDeviceFloatControlsPropertiesKHR deconstructed!!\n");
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
}

void _VkPhysicalDeviceFloatControlsPropertiesKHR::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkPhysicalDeviceFloatControlsPropertiesKHR::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkPhysicalDeviceFloatControlsPropertiesKHR").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("sType").ToLocalChecked(), GetsType, SetsType, ctor);
  SetPrototypeAccessor(proto, Nan::New("separateDenormSettings").ToLocalChecked(), GetseparateDenormSettings, SetseparateDenormSettings, ctor);
  SetPrototypeAccessor(proto, Nan::New("separateRoundingModeSettings").ToLocalChecked(), GetseparateRoundingModeSettings, SetseparateRoundingModeSettings, ctor);
  SetPrototypeAccessor(proto, Nan::New("shaderSignedZeroInfNanPreserveFloat16").ToLocalChecked(), GetshaderSignedZeroInfNanPreserveFloat16, SetshaderSignedZeroInfNanPreserveFloat16, ctor);
  SetPrototypeAccessor(proto, Nan::New("shaderSignedZeroInfNanPreserveFloat32").ToLocalChecked(), GetshaderSignedZeroInfNanPreserveFloat32, SetshaderSignedZeroInfNanPreserveFloat32, ctor);
  SetPrototypeAccessor(proto, Nan::New("shaderSignedZeroInfNanPreserveFloat64").ToLocalChecked(), GetshaderSignedZeroInfNanPreserveFloat64, SetshaderSignedZeroInfNanPreserveFloat64, ctor);
  SetPrototypeAccessor(proto, Nan::New("shaderDenormPreserveFloat16").ToLocalChecked(), GetshaderDenormPreserveFloat16, SetshaderDenormPreserveFloat16, ctor);
  SetPrototypeAccessor(proto, Nan::New("shaderDenormPreserveFloat32").ToLocalChecked(), GetshaderDenormPreserveFloat32, SetshaderDenormPreserveFloat32, ctor);
  SetPrototypeAccessor(proto, Nan::New("shaderDenormPreserveFloat64").ToLocalChecked(), GetshaderDenormPreserveFloat64, SetshaderDenormPreserveFloat64, ctor);
  SetPrototypeAccessor(proto, Nan::New("shaderDenormFlushToZeroFloat16").ToLocalChecked(), GetshaderDenormFlushToZeroFloat16, SetshaderDenormFlushToZeroFloat16, ctor);
  SetPrototypeAccessor(proto, Nan::New("shaderDenormFlushToZeroFloat32").ToLocalChecked(), GetshaderDenormFlushToZeroFloat32, SetshaderDenormFlushToZeroFloat32, ctor);
  SetPrototypeAccessor(proto, Nan::New("shaderDenormFlushToZeroFloat64").ToLocalChecked(), GetshaderDenormFlushToZeroFloat64, SetshaderDenormFlushToZeroFloat64, ctor);
  SetPrototypeAccessor(proto, Nan::New("shaderRoundingModeRTEFloat16").ToLocalChecked(), GetshaderRoundingModeRTEFloat16, SetshaderRoundingModeRTEFloat16, ctor);
  SetPrototypeAccessor(proto, Nan::New("shaderRoundingModeRTEFloat32").ToLocalChecked(), GetshaderRoundingModeRTEFloat32, SetshaderRoundingModeRTEFloat32, ctor);
  SetPrototypeAccessor(proto, Nan::New("shaderRoundingModeRTEFloat64").ToLocalChecked(), GetshaderRoundingModeRTEFloat64, SetshaderRoundingModeRTEFloat64, ctor);
  SetPrototypeAccessor(proto, Nan::New("shaderRoundingModeRTZFloat16").ToLocalChecked(), GetshaderRoundingModeRTZFloat16, SetshaderRoundingModeRTZFloat16, ctor);
  SetPrototypeAccessor(proto, Nan::New("shaderRoundingModeRTZFloat32").ToLocalChecked(), GetshaderRoundingModeRTZFloat32, SetshaderRoundingModeRTZFloat32, ctor);
  SetPrototypeAccessor(proto, Nan::New("shaderRoundingModeRTZFloat64").ToLocalChecked(), GetshaderRoundingModeRTZFloat64, SetshaderRoundingModeRTZFloat64, ctor);
  Nan::Set(target, Nan::New("VkPhysicalDeviceFloatControlsPropertiesKHR").ToLocalChecked(), ctor->GetFunction());
}

bool _VkPhysicalDeviceFloatControlsPropertiesKHR::flush() {
  _VkPhysicalDeviceFloatControlsPropertiesKHR *self = this;
  
  return true;
}

NAN_METHOD(_VkPhysicalDeviceFloatControlsPropertiesKHR::New) {
  if (info.IsConstructCall()) {
    _VkPhysicalDeviceFloatControlsPropertiesKHR* self = new _VkPhysicalDeviceFloatControlsPropertiesKHR();
    self->Wrap(info.Holder());
    
    if (info[0]->IsObject()) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(info[0]).ToLocalChecked();
      v8::Local<v8::String> sAccess0 = Nan::New("sType").ToLocalChecked();
      v8::Local<v8::String> sAccess2 = Nan::New("separateDenormSettings").ToLocalChecked();
      v8::Local<v8::String> sAccess3 = Nan::New("separateRoundingModeSettings").ToLocalChecked();
      v8::Local<v8::String> sAccess4 = Nan::New("shaderSignedZeroInfNanPreserveFloat16").ToLocalChecked();
      v8::Local<v8::String> sAccess5 = Nan::New("shaderSignedZeroInfNanPreserveFloat32").ToLocalChecked();
      v8::Local<v8::String> sAccess6 = Nan::New("shaderSignedZeroInfNanPreserveFloat64").ToLocalChecked();
      v8::Local<v8::String> sAccess7 = Nan::New("shaderDenormPreserveFloat16").ToLocalChecked();
      v8::Local<v8::String> sAccess8 = Nan::New("shaderDenormPreserveFloat32").ToLocalChecked();
      v8::Local<v8::String> sAccess9 = Nan::New("shaderDenormPreserveFloat64").ToLocalChecked();
      v8::Local<v8::String> sAccess10 = Nan::New("shaderDenormFlushToZeroFloat16").ToLocalChecked();
      v8::Local<v8::String> sAccess11 = Nan::New("shaderDenormFlushToZeroFloat32").ToLocalChecked();
      v8::Local<v8::String> sAccess12 = Nan::New("shaderDenormFlushToZeroFloat64").ToLocalChecked();
      v8::Local<v8::String> sAccess13 = Nan::New("shaderRoundingModeRTEFloat16").ToLocalChecked();
      v8::Local<v8::String> sAccess14 = Nan::New("shaderRoundingModeRTEFloat32").ToLocalChecked();
      v8::Local<v8::String> sAccess15 = Nan::New("shaderRoundingModeRTEFloat64").ToLocalChecked();
      v8::Local<v8::String> sAccess16 = Nan::New("shaderRoundingModeRTZFloat16").ToLocalChecked();
      v8::Local<v8::String> sAccess17 = Nan::New("shaderRoundingModeRTZFloat32").ToLocalChecked();
      v8::Local<v8::String> sAccess18 = Nan::New("shaderRoundingModeRTZFloat64").ToLocalChecked();
      if (obj->Has(sAccess0)) info.This()->Set(sAccess0, obj->Get(sAccess0));
      if (obj->Has(sAccess2)) info.This()->Set(sAccess2, obj->Get(sAccess2));
      if (obj->Has(sAccess3)) info.This()->Set(sAccess3, obj->Get(sAccess3));
      if (obj->Has(sAccess4)) info.This()->Set(sAccess4, obj->Get(sAccess4));
      if (obj->Has(sAccess5)) info.This()->Set(sAccess5, obj->Get(sAccess5));
      if (obj->Has(sAccess6)) info.This()->Set(sAccess6, obj->Get(sAccess6));
      if (obj->Has(sAccess7)) info.This()->Set(sAccess7, obj->Get(sAccess7));
      if (obj->Has(sAccess8)) info.This()->Set(sAccess8, obj->Get(sAccess8));
      if (obj->Has(sAccess9)) info.This()->Set(sAccess9, obj->Get(sAccess9));
      if (obj->Has(sAccess10)) info.This()->Set(sAccess10, obj->Get(sAccess10));
      if (obj->Has(sAccess11)) info.This()->Set(sAccess11, obj->Get(sAccess11));
      if (obj->Has(sAccess12)) info.This()->Set(sAccess12, obj->Get(sAccess12));
      if (obj->Has(sAccess13)) info.This()->Set(sAccess13, obj->Get(sAccess13));
      if (obj->Has(sAccess14)) info.This()->Set(sAccess14, obj->Get(sAccess14));
      if (obj->Has(sAccess15)) info.This()->Set(sAccess15, obj->Get(sAccess15));
      if (obj->Has(sAccess16)) info.This()->Set(sAccess16, obj->Get(sAccess16));
      if (obj->Has(sAccess17)) info.This()->Set(sAccess17, obj->Get(sAccess17));
      if (obj->Has(sAccess18)) info.This()->Set(sAccess18, obj->Get(sAccess18));
      
    }
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkPhysicalDeviceFloatControlsPropertiesKHR constructor cannot be invoked without 'new'");
  }
};

// sType
NAN_GETTER(_VkPhysicalDeviceFloatControlsPropertiesKHR::GetsType) {
  _VkPhysicalDeviceFloatControlsPropertiesKHR *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFloatControlsPropertiesKHR>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sType));
}NAN_SETTER(_VkPhysicalDeviceFloatControlsPropertiesKHR::SetsType) {
  _VkPhysicalDeviceFloatControlsPropertiesKHR *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFloatControlsPropertiesKHR>(info.This());
  if (value->IsNumber()) {
    self->instance.sType = static_cast<VkStructureType>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFloatControlsPropertiesKHR.sType' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// separateDenormSettings
NAN_GETTER(_VkPhysicalDeviceFloatControlsPropertiesKHR::GetseparateDenormSettings) {
  _VkPhysicalDeviceFloatControlsPropertiesKHR *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFloatControlsPropertiesKHR>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.separateDenormSettings));
}NAN_SETTER(_VkPhysicalDeviceFloatControlsPropertiesKHR::SetseparateDenormSettings) {
  _VkPhysicalDeviceFloatControlsPropertiesKHR *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFloatControlsPropertiesKHR>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.separateDenormSettings = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFloatControlsPropertiesKHR.separateDenormSettings' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// separateRoundingModeSettings
NAN_GETTER(_VkPhysicalDeviceFloatControlsPropertiesKHR::GetseparateRoundingModeSettings) {
  _VkPhysicalDeviceFloatControlsPropertiesKHR *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFloatControlsPropertiesKHR>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.separateRoundingModeSettings));
}NAN_SETTER(_VkPhysicalDeviceFloatControlsPropertiesKHR::SetseparateRoundingModeSettings) {
  _VkPhysicalDeviceFloatControlsPropertiesKHR *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFloatControlsPropertiesKHR>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.separateRoundingModeSettings = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFloatControlsPropertiesKHR.separateRoundingModeSettings' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// shaderSignedZeroInfNanPreserveFloat16
NAN_GETTER(_VkPhysicalDeviceFloatControlsPropertiesKHR::GetshaderSignedZeroInfNanPreserveFloat16) {
  _VkPhysicalDeviceFloatControlsPropertiesKHR *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFloatControlsPropertiesKHR>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.shaderSignedZeroInfNanPreserveFloat16));
}NAN_SETTER(_VkPhysicalDeviceFloatControlsPropertiesKHR::SetshaderSignedZeroInfNanPreserveFloat16) {
  _VkPhysicalDeviceFloatControlsPropertiesKHR *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFloatControlsPropertiesKHR>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.shaderSignedZeroInfNanPreserveFloat16 = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFloatControlsPropertiesKHR.shaderSignedZeroInfNanPreserveFloat16' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// shaderSignedZeroInfNanPreserveFloat32
NAN_GETTER(_VkPhysicalDeviceFloatControlsPropertiesKHR::GetshaderSignedZeroInfNanPreserveFloat32) {
  _VkPhysicalDeviceFloatControlsPropertiesKHR *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFloatControlsPropertiesKHR>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.shaderSignedZeroInfNanPreserveFloat32));
}NAN_SETTER(_VkPhysicalDeviceFloatControlsPropertiesKHR::SetshaderSignedZeroInfNanPreserveFloat32) {
  _VkPhysicalDeviceFloatControlsPropertiesKHR *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFloatControlsPropertiesKHR>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.shaderSignedZeroInfNanPreserveFloat32 = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFloatControlsPropertiesKHR.shaderSignedZeroInfNanPreserveFloat32' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// shaderSignedZeroInfNanPreserveFloat64
NAN_GETTER(_VkPhysicalDeviceFloatControlsPropertiesKHR::GetshaderSignedZeroInfNanPreserveFloat64) {
  _VkPhysicalDeviceFloatControlsPropertiesKHR *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFloatControlsPropertiesKHR>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.shaderSignedZeroInfNanPreserveFloat64));
}NAN_SETTER(_VkPhysicalDeviceFloatControlsPropertiesKHR::SetshaderSignedZeroInfNanPreserveFloat64) {
  _VkPhysicalDeviceFloatControlsPropertiesKHR *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFloatControlsPropertiesKHR>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.shaderSignedZeroInfNanPreserveFloat64 = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFloatControlsPropertiesKHR.shaderSignedZeroInfNanPreserveFloat64' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// shaderDenormPreserveFloat16
NAN_GETTER(_VkPhysicalDeviceFloatControlsPropertiesKHR::GetshaderDenormPreserveFloat16) {
  _VkPhysicalDeviceFloatControlsPropertiesKHR *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFloatControlsPropertiesKHR>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.shaderDenormPreserveFloat16));
}NAN_SETTER(_VkPhysicalDeviceFloatControlsPropertiesKHR::SetshaderDenormPreserveFloat16) {
  _VkPhysicalDeviceFloatControlsPropertiesKHR *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFloatControlsPropertiesKHR>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.shaderDenormPreserveFloat16 = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFloatControlsPropertiesKHR.shaderDenormPreserveFloat16' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// shaderDenormPreserveFloat32
NAN_GETTER(_VkPhysicalDeviceFloatControlsPropertiesKHR::GetshaderDenormPreserveFloat32) {
  _VkPhysicalDeviceFloatControlsPropertiesKHR *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFloatControlsPropertiesKHR>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.shaderDenormPreserveFloat32));
}NAN_SETTER(_VkPhysicalDeviceFloatControlsPropertiesKHR::SetshaderDenormPreserveFloat32) {
  _VkPhysicalDeviceFloatControlsPropertiesKHR *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFloatControlsPropertiesKHR>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.shaderDenormPreserveFloat32 = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFloatControlsPropertiesKHR.shaderDenormPreserveFloat32' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// shaderDenormPreserveFloat64
NAN_GETTER(_VkPhysicalDeviceFloatControlsPropertiesKHR::GetshaderDenormPreserveFloat64) {
  _VkPhysicalDeviceFloatControlsPropertiesKHR *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFloatControlsPropertiesKHR>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.shaderDenormPreserveFloat64));
}NAN_SETTER(_VkPhysicalDeviceFloatControlsPropertiesKHR::SetshaderDenormPreserveFloat64) {
  _VkPhysicalDeviceFloatControlsPropertiesKHR *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFloatControlsPropertiesKHR>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.shaderDenormPreserveFloat64 = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFloatControlsPropertiesKHR.shaderDenormPreserveFloat64' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// shaderDenormFlushToZeroFloat16
NAN_GETTER(_VkPhysicalDeviceFloatControlsPropertiesKHR::GetshaderDenormFlushToZeroFloat16) {
  _VkPhysicalDeviceFloatControlsPropertiesKHR *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFloatControlsPropertiesKHR>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.shaderDenormFlushToZeroFloat16));
}NAN_SETTER(_VkPhysicalDeviceFloatControlsPropertiesKHR::SetshaderDenormFlushToZeroFloat16) {
  _VkPhysicalDeviceFloatControlsPropertiesKHR *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFloatControlsPropertiesKHR>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.shaderDenormFlushToZeroFloat16 = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFloatControlsPropertiesKHR.shaderDenormFlushToZeroFloat16' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// shaderDenormFlushToZeroFloat32
NAN_GETTER(_VkPhysicalDeviceFloatControlsPropertiesKHR::GetshaderDenormFlushToZeroFloat32) {
  _VkPhysicalDeviceFloatControlsPropertiesKHR *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFloatControlsPropertiesKHR>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.shaderDenormFlushToZeroFloat32));
}NAN_SETTER(_VkPhysicalDeviceFloatControlsPropertiesKHR::SetshaderDenormFlushToZeroFloat32) {
  _VkPhysicalDeviceFloatControlsPropertiesKHR *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFloatControlsPropertiesKHR>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.shaderDenormFlushToZeroFloat32 = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFloatControlsPropertiesKHR.shaderDenormFlushToZeroFloat32' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// shaderDenormFlushToZeroFloat64
NAN_GETTER(_VkPhysicalDeviceFloatControlsPropertiesKHR::GetshaderDenormFlushToZeroFloat64) {
  _VkPhysicalDeviceFloatControlsPropertiesKHR *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFloatControlsPropertiesKHR>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.shaderDenormFlushToZeroFloat64));
}NAN_SETTER(_VkPhysicalDeviceFloatControlsPropertiesKHR::SetshaderDenormFlushToZeroFloat64) {
  _VkPhysicalDeviceFloatControlsPropertiesKHR *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFloatControlsPropertiesKHR>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.shaderDenormFlushToZeroFloat64 = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFloatControlsPropertiesKHR.shaderDenormFlushToZeroFloat64' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// shaderRoundingModeRTEFloat16
NAN_GETTER(_VkPhysicalDeviceFloatControlsPropertiesKHR::GetshaderRoundingModeRTEFloat16) {
  _VkPhysicalDeviceFloatControlsPropertiesKHR *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFloatControlsPropertiesKHR>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.shaderRoundingModeRTEFloat16));
}NAN_SETTER(_VkPhysicalDeviceFloatControlsPropertiesKHR::SetshaderRoundingModeRTEFloat16) {
  _VkPhysicalDeviceFloatControlsPropertiesKHR *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFloatControlsPropertiesKHR>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.shaderRoundingModeRTEFloat16 = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFloatControlsPropertiesKHR.shaderRoundingModeRTEFloat16' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// shaderRoundingModeRTEFloat32
NAN_GETTER(_VkPhysicalDeviceFloatControlsPropertiesKHR::GetshaderRoundingModeRTEFloat32) {
  _VkPhysicalDeviceFloatControlsPropertiesKHR *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFloatControlsPropertiesKHR>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.shaderRoundingModeRTEFloat32));
}NAN_SETTER(_VkPhysicalDeviceFloatControlsPropertiesKHR::SetshaderRoundingModeRTEFloat32) {
  _VkPhysicalDeviceFloatControlsPropertiesKHR *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFloatControlsPropertiesKHR>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.shaderRoundingModeRTEFloat32 = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFloatControlsPropertiesKHR.shaderRoundingModeRTEFloat32' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// shaderRoundingModeRTEFloat64
NAN_GETTER(_VkPhysicalDeviceFloatControlsPropertiesKHR::GetshaderRoundingModeRTEFloat64) {
  _VkPhysicalDeviceFloatControlsPropertiesKHR *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFloatControlsPropertiesKHR>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.shaderRoundingModeRTEFloat64));
}NAN_SETTER(_VkPhysicalDeviceFloatControlsPropertiesKHR::SetshaderRoundingModeRTEFloat64) {
  _VkPhysicalDeviceFloatControlsPropertiesKHR *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFloatControlsPropertiesKHR>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.shaderRoundingModeRTEFloat64 = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFloatControlsPropertiesKHR.shaderRoundingModeRTEFloat64' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// shaderRoundingModeRTZFloat16
NAN_GETTER(_VkPhysicalDeviceFloatControlsPropertiesKHR::GetshaderRoundingModeRTZFloat16) {
  _VkPhysicalDeviceFloatControlsPropertiesKHR *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFloatControlsPropertiesKHR>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.shaderRoundingModeRTZFloat16));
}NAN_SETTER(_VkPhysicalDeviceFloatControlsPropertiesKHR::SetshaderRoundingModeRTZFloat16) {
  _VkPhysicalDeviceFloatControlsPropertiesKHR *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFloatControlsPropertiesKHR>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.shaderRoundingModeRTZFloat16 = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFloatControlsPropertiesKHR.shaderRoundingModeRTZFloat16' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// shaderRoundingModeRTZFloat32
NAN_GETTER(_VkPhysicalDeviceFloatControlsPropertiesKHR::GetshaderRoundingModeRTZFloat32) {
  _VkPhysicalDeviceFloatControlsPropertiesKHR *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFloatControlsPropertiesKHR>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.shaderRoundingModeRTZFloat32));
}NAN_SETTER(_VkPhysicalDeviceFloatControlsPropertiesKHR::SetshaderRoundingModeRTZFloat32) {
  _VkPhysicalDeviceFloatControlsPropertiesKHR *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFloatControlsPropertiesKHR>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.shaderRoundingModeRTZFloat32 = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFloatControlsPropertiesKHR.shaderRoundingModeRTZFloat32' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// shaderRoundingModeRTZFloat64
NAN_GETTER(_VkPhysicalDeviceFloatControlsPropertiesKHR::GetshaderRoundingModeRTZFloat64) {
  _VkPhysicalDeviceFloatControlsPropertiesKHR *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFloatControlsPropertiesKHR>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.shaderRoundingModeRTZFloat64));
}NAN_SETTER(_VkPhysicalDeviceFloatControlsPropertiesKHR::SetshaderRoundingModeRTZFloat64) {
  _VkPhysicalDeviceFloatControlsPropertiesKHR *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFloatControlsPropertiesKHR>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.shaderRoundingModeRTZFloat64 = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFloatControlsPropertiesKHR.shaderRoundingModeRTZFloat64' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}