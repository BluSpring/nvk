/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY nvk v0.1.4
 */
#include "utils.h"
#include "index.h"
#include "VkImageCopy.h"

Nan::Persistent<v8::FunctionTemplate> _VkImageCopy::constructor;

_VkImageCopy::_VkImageCopy() {
  
  
}

_VkImageCopy::~_VkImageCopy() {
  //printf("VkImageCopy deconstructed!!\n");
  
  
  
  
  
  
}

void _VkImageCopy::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkImageCopy::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkImageCopy").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("srcSubresource").ToLocalChecked(), GetsrcSubresource, SetsrcSubresource, ctor);
  SetPrototypeAccessor(proto, Nan::New("srcOffset").ToLocalChecked(), GetsrcOffset, SetsrcOffset, ctor);
  SetPrototypeAccessor(proto, Nan::New("dstSubresource").ToLocalChecked(), GetdstSubresource, SetdstSubresource, ctor);
  SetPrototypeAccessor(proto, Nan::New("dstOffset").ToLocalChecked(), GetdstOffset, SetdstOffset, ctor);
  SetPrototypeAccessor(proto, Nan::New("extent").ToLocalChecked(), Getextent, Setextent, ctor);
  Nan::Set(target, Nan::New("VkImageCopy").ToLocalChecked(), ctor->GetFunction());
}

bool _VkImageCopy::flush() {
  _VkImageCopy *self = this;
  if (!(self->srcSubresource.IsEmpty())) {
    v8::Local<v8::Value> value = Nan::New(self->srcSubresource);
    
    _VkImageSubresourceLayers* result = Nan::ObjectWrap::Unwrap<_VkImageSubresourceLayers>(Nan::To<v8::Object>(value).ToLocalChecked());
    if (!result->flush()) return false;
    self->instance.srcSubresource = result->instance;
  }if (!(self->srcOffset.IsEmpty())) {
    v8::Local<v8::Value> value = Nan::New(self->srcOffset);
    
    _VkOffset3D* result = Nan::ObjectWrap::Unwrap<_VkOffset3D>(Nan::To<v8::Object>(value).ToLocalChecked());
    if (!result->flush()) return false;
    self->instance.srcOffset = result->instance;
  }if (!(self->dstSubresource.IsEmpty())) {
    v8::Local<v8::Value> value = Nan::New(self->dstSubresource);
    
    _VkImageSubresourceLayers* result = Nan::ObjectWrap::Unwrap<_VkImageSubresourceLayers>(Nan::To<v8::Object>(value).ToLocalChecked());
    if (!result->flush()) return false;
    self->instance.dstSubresource = result->instance;
  }if (!(self->dstOffset.IsEmpty())) {
    v8::Local<v8::Value> value = Nan::New(self->dstOffset);
    
    _VkOffset3D* result = Nan::ObjectWrap::Unwrap<_VkOffset3D>(Nan::To<v8::Object>(value).ToLocalChecked());
    if (!result->flush()) return false;
    self->instance.dstOffset = result->instance;
  }if (!(self->extent.IsEmpty())) {
    v8::Local<v8::Value> value = Nan::New(self->extent);
    
    _VkExtent3D* result = Nan::ObjectWrap::Unwrap<_VkExtent3D>(Nan::To<v8::Object>(value).ToLocalChecked());
    if (!result->flush()) return false;
    self->instance.extent = result->instance;
  }
  return true;
}

NAN_METHOD(_VkImageCopy::New) {
  if (info.IsConstructCall()) {
    _VkImageCopy* self = new _VkImageCopy();
    self->Wrap(info.Holder());
    
    if (info[0]->IsObject()) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(info[0]).ToLocalChecked();
      v8::Local<v8::String> sAccess0 = Nan::New("srcSubresource").ToLocalChecked();
      v8::Local<v8::String> sAccess1 = Nan::New("srcOffset").ToLocalChecked();
      v8::Local<v8::String> sAccess2 = Nan::New("dstSubresource").ToLocalChecked();
      v8::Local<v8::String> sAccess3 = Nan::New("dstOffset").ToLocalChecked();
      v8::Local<v8::String> sAccess4 = Nan::New("extent").ToLocalChecked();
      if (obj->Has(sAccess0)) info.This()->Set(sAccess0, obj->Get(sAccess0));
      if (obj->Has(sAccess1)) info.This()->Set(sAccess1, obj->Get(sAccess1));
      if (obj->Has(sAccess2)) info.This()->Set(sAccess2, obj->Get(sAccess2));
      if (obj->Has(sAccess3)) info.This()->Set(sAccess3, obj->Get(sAccess3));
      if (obj->Has(sAccess4)) info.This()->Set(sAccess4, obj->Get(sAccess4));
      
    }
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkImageCopy constructor cannot be invoked without 'new'");
  }
};

// srcSubresource
NAN_GETTER(_VkImageCopy::GetsrcSubresource) {
  _VkImageCopy *self = Nan::ObjectWrap::Unwrap<_VkImageCopy>(info.This());
  if (self->srcSubresource.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->srcSubresource);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkImageCopy::SetsrcSubresource) {
  _VkImageCopy *self = Nan::ObjectWrap::Unwrap<_VkImageCopy>(info.This());
  // js
  if (!value->IsNull()) {
    v8::Local<v8::Object> obj = Nan::To<v8::Object>(value).ToLocalChecked();
    if (Nan::New(_VkImageSubresourceLayers::constructor)->HasInstance(obj)) {
      self->srcSubresource.Reset<v8::Object>(value.As<v8::Object>());
      _VkImageSubresourceLayers* inst = Nan::ObjectWrap::Unwrap<_VkImageSubresourceLayers>(obj);
      inst->flush();
      self->instance.srcSubresource = inst->instance;
    } else {
      
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkImageSubresourceLayers]' for 'VkImageCopy.srcSubresource' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
      return;
    }
  } else if (value->IsNull()) {
    self->srcSubresource.Reset();
    memset(&self->instance.srcSubresource, 0, sizeof(VkImageSubresourceLayers));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkImageSubresourceLayers]' for 'VkImageCopy.srcSubresource' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// srcOffset
NAN_GETTER(_VkImageCopy::GetsrcOffset) {
  _VkImageCopy *self = Nan::ObjectWrap::Unwrap<_VkImageCopy>(info.This());
  if (self->srcOffset.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->srcOffset);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkImageCopy::SetsrcOffset) {
  _VkImageCopy *self = Nan::ObjectWrap::Unwrap<_VkImageCopy>(info.This());
  // js
  if (!value->IsNull()) {
    v8::Local<v8::Object> obj = Nan::To<v8::Object>(value).ToLocalChecked();
    if (Nan::New(_VkOffset3D::constructor)->HasInstance(obj)) {
      self->srcOffset.Reset<v8::Object>(value.As<v8::Object>());
      _VkOffset3D* inst = Nan::ObjectWrap::Unwrap<_VkOffset3D>(obj);
      inst->flush();
      self->instance.srcOffset = inst->instance;
    } else {
      
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkOffset3D]' for 'VkImageCopy.srcOffset' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
      return;
    }
  } else if (value->IsNull()) {
    self->srcOffset.Reset();
    memset(&self->instance.srcOffset, 0, sizeof(VkOffset3D));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkOffset3D]' for 'VkImageCopy.srcOffset' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// dstSubresource
NAN_GETTER(_VkImageCopy::GetdstSubresource) {
  _VkImageCopy *self = Nan::ObjectWrap::Unwrap<_VkImageCopy>(info.This());
  if (self->dstSubresource.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->dstSubresource);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkImageCopy::SetdstSubresource) {
  _VkImageCopy *self = Nan::ObjectWrap::Unwrap<_VkImageCopy>(info.This());
  // js
  if (!value->IsNull()) {
    v8::Local<v8::Object> obj = Nan::To<v8::Object>(value).ToLocalChecked();
    if (Nan::New(_VkImageSubresourceLayers::constructor)->HasInstance(obj)) {
      self->dstSubresource.Reset<v8::Object>(value.As<v8::Object>());
      _VkImageSubresourceLayers* inst = Nan::ObjectWrap::Unwrap<_VkImageSubresourceLayers>(obj);
      inst->flush();
      self->instance.dstSubresource = inst->instance;
    } else {
      
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkImageSubresourceLayers]' for 'VkImageCopy.dstSubresource' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
      return;
    }
  } else if (value->IsNull()) {
    self->dstSubresource.Reset();
    memset(&self->instance.dstSubresource, 0, sizeof(VkImageSubresourceLayers));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkImageSubresourceLayers]' for 'VkImageCopy.dstSubresource' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// dstOffset
NAN_GETTER(_VkImageCopy::GetdstOffset) {
  _VkImageCopy *self = Nan::ObjectWrap::Unwrap<_VkImageCopy>(info.This());
  if (self->dstOffset.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->dstOffset);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkImageCopy::SetdstOffset) {
  _VkImageCopy *self = Nan::ObjectWrap::Unwrap<_VkImageCopy>(info.This());
  // js
  if (!value->IsNull()) {
    v8::Local<v8::Object> obj = Nan::To<v8::Object>(value).ToLocalChecked();
    if (Nan::New(_VkOffset3D::constructor)->HasInstance(obj)) {
      self->dstOffset.Reset<v8::Object>(value.As<v8::Object>());
      _VkOffset3D* inst = Nan::ObjectWrap::Unwrap<_VkOffset3D>(obj);
      inst->flush();
      self->instance.dstOffset = inst->instance;
    } else {
      
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkOffset3D]' for 'VkImageCopy.dstOffset' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
      return;
    }
  } else if (value->IsNull()) {
    self->dstOffset.Reset();
    memset(&self->instance.dstOffset, 0, sizeof(VkOffset3D));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkOffset3D]' for 'VkImageCopy.dstOffset' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// extent
NAN_GETTER(_VkImageCopy::Getextent) {
  _VkImageCopy *self = Nan::ObjectWrap::Unwrap<_VkImageCopy>(info.This());
  if (self->extent.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->extent);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkImageCopy::Setextent) {
  _VkImageCopy *self = Nan::ObjectWrap::Unwrap<_VkImageCopy>(info.This());
  // js
  if (!value->IsNull()) {
    v8::Local<v8::Object> obj = Nan::To<v8::Object>(value).ToLocalChecked();
    if (Nan::New(_VkExtent3D::constructor)->HasInstance(obj)) {
      self->extent.Reset<v8::Object>(value.As<v8::Object>());
      _VkExtent3D* inst = Nan::ObjectWrap::Unwrap<_VkExtent3D>(obj);
      inst->flush();
      self->instance.extent = inst->instance;
    } else {
      
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkExtent3D]' for 'VkImageCopy.extent' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
      return;
    }
  } else if (value->IsNull()) {
    self->extent.Reset();
    memset(&self->instance.extent, 0, sizeof(VkExtent3D));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkExtent3D]' for 'VkImageCopy.extent' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}