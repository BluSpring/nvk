/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY node-vulkan v0.1.0
 */
#include "utils.h"
#include "index.h"
#include "VkGeometryDataNV.h"

Nan::Persistent<v8::FunctionTemplate> _VkGeometryDataNV::constructor;

_VkGeometryDataNV::_VkGeometryDataNV() {
  
  
}

_VkGeometryDataNV::~_VkGeometryDataNV() {
  //printf("VkGeometryDataNV deconstructed!!\n");
  
  
  
}

void _VkGeometryDataNV::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkGeometryDataNV::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkGeometryDataNV").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("triangles").ToLocalChecked(), Gettriangles, Settriangles, ctor);
  SetPrototypeAccessor(proto, Nan::New("aabbs").ToLocalChecked(), Getaabbs, Setaabbs, ctor);
  Nan::Set(target, Nan::New("VkGeometryDataNV").ToLocalChecked(), ctor->GetFunction());
}

bool _VkGeometryDataNV::flush() {
  _VkGeometryDataNV *self = this;
  if (!(self->triangles.IsEmpty())) {
    v8::Local<v8::Value> value = Nan::New(self->triangles);
    
    _VkGeometryTrianglesNV* result = Nan::ObjectWrap::Unwrap<_VkGeometryTrianglesNV>(Nan::To<v8::Object>(value).ToLocalChecked());
    if (!result->flush()) return false;
    self->instance.triangles = result->instance;
  }if (!(self->aabbs.IsEmpty())) {
    v8::Local<v8::Value> value = Nan::New(self->aabbs);
    
    _VkGeometryAABBNV* result = Nan::ObjectWrap::Unwrap<_VkGeometryAABBNV>(Nan::To<v8::Object>(value).ToLocalChecked());
    if (!result->flush()) return false;
    self->instance.aabbs = result->instance;
  }
  return true;
}

NAN_METHOD(_VkGeometryDataNV::New) {
  if (info.IsConstructCall()) {
    _VkGeometryDataNV* self = new _VkGeometryDataNV();
    self->Wrap(info.Holder());
    
    if (info[0]->IsObject()) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(info[0]).ToLocalChecked();
      v8::Local<v8::String> sAccess0 = Nan::New("triangles").ToLocalChecked();
      v8::Local<v8::String> sAccess1 = Nan::New("aabbs").ToLocalChecked();
      if (obj->Has(sAccess0)) info.This()->Set(sAccess0, obj->Get(sAccess0));
      if (obj->Has(sAccess1)) info.This()->Set(sAccess1, obj->Get(sAccess1));
      
    }
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkGeometryDataNV constructor cannot be invoked without 'new'");
  }
};

// triangles
NAN_GETTER(_VkGeometryDataNV::Gettriangles) {
  _VkGeometryDataNV *self = Nan::ObjectWrap::Unwrap<_VkGeometryDataNV>(info.This());
  if (self->triangles.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->triangles);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkGeometryDataNV::Settriangles) {
  _VkGeometryDataNV *self = Nan::ObjectWrap::Unwrap<_VkGeometryDataNV>(info.This());
  // js
  if (!value->IsNull()) {
    v8::Local<v8::Object> obj = Nan::To<v8::Object>(value).ToLocalChecked();
    if (Nan::New(_VkGeometryTrianglesNV::constructor)->HasInstance(obj)) {
      self->triangles.Reset<v8::Object>(value.As<v8::Object>());
      _VkGeometryTrianglesNV* inst = Nan::ObjectWrap::Unwrap<_VkGeometryTrianglesNV>(obj);
      inst->flush();
      self->instance.triangles = inst->instance;
    } else {
      
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkGeometryTrianglesNV]' for 'VkGeometryDataNV.triangles' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
      return;
    }
  } else if (value->IsNull()) {
    self->triangles.Reset();
    memset(&self->instance.triangles, 0, sizeof(VkGeometryTrianglesNV));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkGeometryTrianglesNV]' for 'VkGeometryDataNV.triangles' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// aabbs
NAN_GETTER(_VkGeometryDataNV::Getaabbs) {
  _VkGeometryDataNV *self = Nan::ObjectWrap::Unwrap<_VkGeometryDataNV>(info.This());
  if (self->aabbs.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->aabbs);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkGeometryDataNV::Setaabbs) {
  _VkGeometryDataNV *self = Nan::ObjectWrap::Unwrap<_VkGeometryDataNV>(info.This());
  // js
  if (!value->IsNull()) {
    v8::Local<v8::Object> obj = Nan::To<v8::Object>(value).ToLocalChecked();
    if (Nan::New(_VkGeometryAABBNV::constructor)->HasInstance(obj)) {
      self->aabbs.Reset<v8::Object>(value.As<v8::Object>());
      _VkGeometryAABBNV* inst = Nan::ObjectWrap::Unwrap<_VkGeometryAABBNV>(obj);
      inst->flush();
      self->instance.aabbs = inst->instance;
    } else {
      
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkGeometryAABBNV]' for 'VkGeometryDataNV.aabbs' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
      return;
    }
  } else if (value->IsNull()) {
    self->aabbs.Reset();
    memset(&self->instance.aabbs, 0, sizeof(VkGeometryAABBNV));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkGeometryAABBNV]' for 'VkGeometryDataNV.aabbs' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}