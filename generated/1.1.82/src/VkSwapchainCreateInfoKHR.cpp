/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY node-vulkan v0.0.1
 */
#include "utils.h"
#include "index.h"
#include "VkSwapchainCreateInfoKHR.h"

Nan::Persistent<v8::FunctionTemplate> _VkSwapchainCreateInfoKHR::constructor;

_VkSwapchainCreateInfoKHR::_VkSwapchainCreateInfoKHR() {
  instance.sType = VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR;
}

_VkSwapchainCreateInfoKHR::~_VkSwapchainCreateInfoKHR() {
  //printf("VkSwapchainCreateInfoKHR deconstructed!!\n");
}

void _VkSwapchainCreateInfoKHR::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkSwapchainCreateInfoKHR::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkSwapchainCreateInfoKHR").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("sType").ToLocalChecked(), GetsType, SetsType, ctor);
  SetPrototypeAccessor(proto, Nan::New("flags").ToLocalChecked(), Getflags, Setflags, ctor);
  SetPrototypeAccessor(proto, Nan::New("surface").ToLocalChecked(), Getsurface, Setsurface, ctor);
  SetPrototypeAccessor(proto, Nan::New("minImageCount").ToLocalChecked(), GetminImageCount, SetminImageCount, ctor);
  SetPrototypeAccessor(proto, Nan::New("imageFormat").ToLocalChecked(), GetimageFormat, SetimageFormat, ctor);
  SetPrototypeAccessor(proto, Nan::New("imageColorSpace").ToLocalChecked(), GetimageColorSpace, SetimageColorSpace, ctor);
  SetPrototypeAccessor(proto, Nan::New("imageExtent").ToLocalChecked(), GetimageExtent, SetimageExtent, ctor);
  SetPrototypeAccessor(proto, Nan::New("imageArrayLayers").ToLocalChecked(), GetimageArrayLayers, SetimageArrayLayers, ctor);
  SetPrototypeAccessor(proto, Nan::New("imageUsage").ToLocalChecked(), GetimageUsage, SetimageUsage, ctor);
  SetPrototypeAccessor(proto, Nan::New("imageSharingMode").ToLocalChecked(), GetimageSharingMode, SetimageSharingMode, ctor);
  SetPrototypeAccessor(proto, Nan::New("queueFamilyIndexCount").ToLocalChecked(), GetqueueFamilyIndexCount, SetqueueFamilyIndexCount, ctor);
  SetPrototypeAccessor(proto, Nan::New("pQueueFamilyIndices").ToLocalChecked(), GetpQueueFamilyIndices, SetpQueueFamilyIndices, ctor);
  SetPrototypeAccessor(proto, Nan::New("preTransform").ToLocalChecked(), GetpreTransform, SetpreTransform, ctor);
  SetPrototypeAccessor(proto, Nan::New("compositeAlpha").ToLocalChecked(), GetcompositeAlpha, SetcompositeAlpha, ctor);
  SetPrototypeAccessor(proto, Nan::New("presentMode").ToLocalChecked(), GetpresentMode, SetpresentMode, ctor);
  SetPrototypeAccessor(proto, Nan::New("clipped").ToLocalChecked(), Getclipped, Setclipped, ctor);
  SetPrototypeAccessor(proto, Nan::New("oldSwapchain").ToLocalChecked(), GetoldSwapchain, SetoldSwapchain, ctor);
  Nan::Set(target, Nan::New("VkSwapchainCreateInfoKHR").ToLocalChecked(), ctor->GetFunction());
}

NAN_METHOD(_VkSwapchainCreateInfoKHR::New) {
  if (info.IsConstructCall()) {
    _VkSwapchainCreateInfoKHR* self = new _VkSwapchainCreateInfoKHR();
    self->Wrap(info.Holder());
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkSwapchainCreateInfoKHR constructor cannot be invoked without 'new'");
  }
};

// sType
NAN_GETTER(_VkSwapchainCreateInfoKHR::GetsType) {
  _VkSwapchainCreateInfoKHR *self = Nan::ObjectWrap::Unwrap<_VkSwapchainCreateInfoKHR>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sType));
}NAN_SETTER(_VkSwapchainCreateInfoKHR::SetsType) {
  _VkSwapchainCreateInfoKHR *self = Nan::ObjectWrap::Unwrap<_VkSwapchainCreateInfoKHR>(info.This());
  self->instance.sType = static_cast<VkStructureType>((int32_t)value->NumberValue());
}// flags
NAN_GETTER(_VkSwapchainCreateInfoKHR::Getflags) {
  _VkSwapchainCreateInfoKHR *self = Nan::ObjectWrap::Unwrap<_VkSwapchainCreateInfoKHR>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.flags));
}NAN_SETTER(_VkSwapchainCreateInfoKHR::Setflags) {
  _VkSwapchainCreateInfoKHR *self = Nan::ObjectWrap::Unwrap<_VkSwapchainCreateInfoKHR>(info.This());
  self->instance.flags = static_cast<VkSwapchainCreateFlagsKHR>((int32_t)value->NumberValue());
}// surface
NAN_GETTER(_VkSwapchainCreateInfoKHR::Getsurface) {
  _VkSwapchainCreateInfoKHR *self = Nan::ObjectWrap::Unwrap<_VkSwapchainCreateInfoKHR>(info.This());
  if (self->surface.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->surface);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkSwapchainCreateInfoKHR::Setsurface) {
  _VkSwapchainCreateInfoKHR *self = Nan::ObjectWrap::Unwrap<_VkSwapchainCreateInfoKHR>(info.This());
  // js
  if (!(value->IsNull())) {
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> obj(value->ToObject());
    self->surface = obj;
  } else {
    //self->surface = Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>>(Nan::Null());
  }
  // vulkan
  if (!(value->IsNull())) {
    _VkSurfaceKHR* obj = Nan::ObjectWrap::Unwrap<_VkSurfaceKHR>(value->ToObject());
    self->instance.surface = obj->instance;
  } else {
    self->instance.surface = VK_NULL_HANDLE;
  }
}// minImageCount
NAN_GETTER(_VkSwapchainCreateInfoKHR::GetminImageCount) {
  _VkSwapchainCreateInfoKHR *self = Nan::ObjectWrap::Unwrap<_VkSwapchainCreateInfoKHR>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.minImageCount));
}NAN_SETTER(_VkSwapchainCreateInfoKHR::SetminImageCount) {
  _VkSwapchainCreateInfoKHR *self = Nan::ObjectWrap::Unwrap<_VkSwapchainCreateInfoKHR>(info.This());
  self->instance.minImageCount = static_cast<uint32_t>(value->NumberValue());
}// imageFormat
NAN_GETTER(_VkSwapchainCreateInfoKHR::GetimageFormat) {
  _VkSwapchainCreateInfoKHR *self = Nan::ObjectWrap::Unwrap<_VkSwapchainCreateInfoKHR>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.imageFormat));
}NAN_SETTER(_VkSwapchainCreateInfoKHR::SetimageFormat) {
  _VkSwapchainCreateInfoKHR *self = Nan::ObjectWrap::Unwrap<_VkSwapchainCreateInfoKHR>(info.This());
  self->instance.imageFormat = static_cast<VkFormat>((int32_t)value->NumberValue());
}// imageColorSpace
NAN_GETTER(_VkSwapchainCreateInfoKHR::GetimageColorSpace) {
  _VkSwapchainCreateInfoKHR *self = Nan::ObjectWrap::Unwrap<_VkSwapchainCreateInfoKHR>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.imageColorSpace));
}NAN_SETTER(_VkSwapchainCreateInfoKHR::SetimageColorSpace) {
  _VkSwapchainCreateInfoKHR *self = Nan::ObjectWrap::Unwrap<_VkSwapchainCreateInfoKHR>(info.This());
  self->instance.imageColorSpace = static_cast<VkColorSpaceKHR>((int32_t)value->NumberValue());
}// imageExtent
NAN_GETTER(_VkSwapchainCreateInfoKHR::GetimageExtent) {
  _VkSwapchainCreateInfoKHR *self = Nan::ObjectWrap::Unwrap<_VkSwapchainCreateInfoKHR>(info.This());
  if (self->imageExtent.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->imageExtent);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkSwapchainCreateInfoKHR::SetimageExtent) {
  _VkSwapchainCreateInfoKHR *self = Nan::ObjectWrap::Unwrap<_VkSwapchainCreateInfoKHR>(info.This());
  // js
  if (!(value->IsNull())) {
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> obj(value->ToObject());
    self->imageExtent = obj;
  } else {
    //self->imageExtent = Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>>(Nan::Null());
  }
  // vulkan
  if (!(value->IsNull())) {
    _VkExtent2D* obj = Nan::ObjectWrap::Unwrap<_VkExtent2D>(value->ToObject());
    self->instance.imageExtent = obj->instance;
  } else {
    memset(&self->instance.imageExtent, 0, sizeof(VkExtent2D));
  }
}// imageArrayLayers
NAN_GETTER(_VkSwapchainCreateInfoKHR::GetimageArrayLayers) {
  _VkSwapchainCreateInfoKHR *self = Nan::ObjectWrap::Unwrap<_VkSwapchainCreateInfoKHR>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.imageArrayLayers));
}NAN_SETTER(_VkSwapchainCreateInfoKHR::SetimageArrayLayers) {
  _VkSwapchainCreateInfoKHR *self = Nan::ObjectWrap::Unwrap<_VkSwapchainCreateInfoKHR>(info.This());
  self->instance.imageArrayLayers = static_cast<uint32_t>(value->NumberValue());
}// imageUsage
NAN_GETTER(_VkSwapchainCreateInfoKHR::GetimageUsage) {
  _VkSwapchainCreateInfoKHR *self = Nan::ObjectWrap::Unwrap<_VkSwapchainCreateInfoKHR>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.imageUsage));
}NAN_SETTER(_VkSwapchainCreateInfoKHR::SetimageUsage) {
  _VkSwapchainCreateInfoKHR *self = Nan::ObjectWrap::Unwrap<_VkSwapchainCreateInfoKHR>(info.This());
  self->instance.imageUsage = static_cast<VkImageUsageFlags>((int32_t)value->NumberValue());
}// imageSharingMode
NAN_GETTER(_VkSwapchainCreateInfoKHR::GetimageSharingMode) {
  _VkSwapchainCreateInfoKHR *self = Nan::ObjectWrap::Unwrap<_VkSwapchainCreateInfoKHR>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.imageSharingMode));
}NAN_SETTER(_VkSwapchainCreateInfoKHR::SetimageSharingMode) {
  _VkSwapchainCreateInfoKHR *self = Nan::ObjectWrap::Unwrap<_VkSwapchainCreateInfoKHR>(info.This());
  self->instance.imageSharingMode = static_cast<VkSharingMode>((int32_t)value->NumberValue());
}// queueFamilyIndexCount
NAN_GETTER(_VkSwapchainCreateInfoKHR::GetqueueFamilyIndexCount) {
  _VkSwapchainCreateInfoKHR *self = Nan::ObjectWrap::Unwrap<_VkSwapchainCreateInfoKHR>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.queueFamilyIndexCount));
}NAN_SETTER(_VkSwapchainCreateInfoKHR::SetqueueFamilyIndexCount) {
  _VkSwapchainCreateInfoKHR *self = Nan::ObjectWrap::Unwrap<_VkSwapchainCreateInfoKHR>(info.This());
  self->instance.queueFamilyIndexCount = static_cast<uint32_t>(value->NumberValue());
}// pQueueFamilyIndices
NAN_GETTER(_VkSwapchainCreateInfoKHR::GetpQueueFamilyIndices) {
  _VkSwapchainCreateInfoKHR *self = Nan::ObjectWrap::Unwrap<_VkSwapchainCreateInfoKHR>(info.This());
  if (self->pQueueFamilyIndices.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->pQueueFamilyIndices);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkSwapchainCreateInfoKHR::SetpQueueFamilyIndices) {
  _VkSwapchainCreateInfoKHR *self = Nan::ObjectWrap::Unwrap<_VkSwapchainCreateInfoKHR>(info.This());
  
    // js
    if (value->IsArray() || value->IsArrayBufferView()) {
      v8::Handle<v8::Array> arr = v8::Handle<v8::Array>::Cast(value);
      Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> obj(arr);
      self->pQueueFamilyIndices = obj;
    } else {
      if (!self->pQueueFamilyIndices.IsEmpty()) self->pQueueFamilyIndices.Empty();
    }
  
  
  // vulkan
  if (value->IsArrayBufferView()) {
    self->instance.pQueueFamilyIndices = getTypedArrayData<uint32_t>(value->ToObject(), nullptr);
  } else {
    self->instance.pQueueFamilyIndices = nullptr;
  }
}// preTransform
NAN_GETTER(_VkSwapchainCreateInfoKHR::GetpreTransform) {
  _VkSwapchainCreateInfoKHR *self = Nan::ObjectWrap::Unwrap<_VkSwapchainCreateInfoKHR>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.preTransform));
}NAN_SETTER(_VkSwapchainCreateInfoKHR::SetpreTransform) {
  _VkSwapchainCreateInfoKHR *self = Nan::ObjectWrap::Unwrap<_VkSwapchainCreateInfoKHR>(info.This());
  self->instance.preTransform = static_cast<VkSurfaceTransformFlagBitsKHR>((int32_t)value->NumberValue());
}// compositeAlpha
NAN_GETTER(_VkSwapchainCreateInfoKHR::GetcompositeAlpha) {
  _VkSwapchainCreateInfoKHR *self = Nan::ObjectWrap::Unwrap<_VkSwapchainCreateInfoKHR>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.compositeAlpha));
}NAN_SETTER(_VkSwapchainCreateInfoKHR::SetcompositeAlpha) {
  _VkSwapchainCreateInfoKHR *self = Nan::ObjectWrap::Unwrap<_VkSwapchainCreateInfoKHR>(info.This());
  self->instance.compositeAlpha = static_cast<VkCompositeAlphaFlagBitsKHR>((int32_t)value->NumberValue());
}// presentMode
NAN_GETTER(_VkSwapchainCreateInfoKHR::GetpresentMode) {
  _VkSwapchainCreateInfoKHR *self = Nan::ObjectWrap::Unwrap<_VkSwapchainCreateInfoKHR>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.presentMode));
}NAN_SETTER(_VkSwapchainCreateInfoKHR::SetpresentMode) {
  _VkSwapchainCreateInfoKHR *self = Nan::ObjectWrap::Unwrap<_VkSwapchainCreateInfoKHR>(info.This());
  self->instance.presentMode = static_cast<VkPresentModeKHR>((int32_t)value->NumberValue());
}// clipped
NAN_GETTER(_VkSwapchainCreateInfoKHR::Getclipped) {
  _VkSwapchainCreateInfoKHR *self = Nan::ObjectWrap::Unwrap<_VkSwapchainCreateInfoKHR>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.clipped));
}NAN_SETTER(_VkSwapchainCreateInfoKHR::Setclipped) {
  _VkSwapchainCreateInfoKHR *self = Nan::ObjectWrap::Unwrap<_VkSwapchainCreateInfoKHR>(info.This());
  self->instance.clipped = static_cast<uint32_t>(value->NumberValue());
}// oldSwapchain
NAN_GETTER(_VkSwapchainCreateInfoKHR::GetoldSwapchain) {
  _VkSwapchainCreateInfoKHR *self = Nan::ObjectWrap::Unwrap<_VkSwapchainCreateInfoKHR>(info.This());
  if (self->oldSwapchain.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->oldSwapchain);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkSwapchainCreateInfoKHR::SetoldSwapchain) {
  _VkSwapchainCreateInfoKHR *self = Nan::ObjectWrap::Unwrap<_VkSwapchainCreateInfoKHR>(info.This());
  // js
  if (!(value->IsNull())) {
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> obj(value->ToObject());
    self->oldSwapchain = obj;
  } else {
    //self->oldSwapchain = Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>>(Nan::Null());
  }
  // vulkan
  if (!(value->IsNull())) {
    _VkSwapchainKHR* obj = Nan::ObjectWrap::Unwrap<_VkSwapchainKHR>(value->ToObject());
    self->instance.oldSwapchain = obj->instance;
  } else {
    self->instance.oldSwapchain = VK_NULL_HANDLE;
  }
}