/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY node-vulkan v0.0.1
 */
#include "utils.h"
#include <string.h>
#include "index.h"
#include "VkPhysicalDeviceLimits.h"

Nan::Persistent<v8::FunctionTemplate> _VkPhysicalDeviceLimits::constructor;

_VkPhysicalDeviceLimits::_VkPhysicalDeviceLimits() {
  
}

_VkPhysicalDeviceLimits::~_VkPhysicalDeviceLimits() {
  //printf("VkPhysicalDeviceLimits deconstructed!!\n");
}

void _VkPhysicalDeviceLimits::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkPhysicalDeviceLimits::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkPhysicalDeviceLimits").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("maxImageDimension1D").ToLocalChecked(), GetmaxImageDimension1D, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxImageDimension2D").ToLocalChecked(), GetmaxImageDimension2D, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxImageDimension3D").ToLocalChecked(), GetmaxImageDimension3D, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxImageDimensionCube").ToLocalChecked(), GetmaxImageDimensionCube, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxImageArrayLayers").ToLocalChecked(), GetmaxImageArrayLayers, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxTexelBufferElements").ToLocalChecked(), GetmaxTexelBufferElements, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxUniformBufferRange").ToLocalChecked(), GetmaxUniformBufferRange, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxStorageBufferRange").ToLocalChecked(), GetmaxStorageBufferRange, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxPushConstantsSize").ToLocalChecked(), GetmaxPushConstantsSize, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxMemoryAllocationCount").ToLocalChecked(), GetmaxMemoryAllocationCount, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxSamplerAllocationCount").ToLocalChecked(), GetmaxSamplerAllocationCount, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("bufferImageGranularity").ToLocalChecked(), GetbufferImageGranularity, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("sparseAddressSpaceSize").ToLocalChecked(), GetsparseAddressSpaceSize, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxBoundDescriptorSets").ToLocalChecked(), GetmaxBoundDescriptorSets, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxPerStageDescriptorSamplers").ToLocalChecked(), GetmaxPerStageDescriptorSamplers, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxPerStageDescriptorUniformBuffers").ToLocalChecked(), GetmaxPerStageDescriptorUniformBuffers, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxPerStageDescriptorStorageBuffers").ToLocalChecked(), GetmaxPerStageDescriptorStorageBuffers, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxPerStageDescriptorSampledImages").ToLocalChecked(), GetmaxPerStageDescriptorSampledImages, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxPerStageDescriptorStorageImages").ToLocalChecked(), GetmaxPerStageDescriptorStorageImages, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxPerStageDescriptorInputAttachments").ToLocalChecked(), GetmaxPerStageDescriptorInputAttachments, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxPerStageResources").ToLocalChecked(), GetmaxPerStageResources, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxDescriptorSetSamplers").ToLocalChecked(), GetmaxDescriptorSetSamplers, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxDescriptorSetUniformBuffers").ToLocalChecked(), GetmaxDescriptorSetUniformBuffers, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxDescriptorSetUniformBuffersDynamic").ToLocalChecked(), GetmaxDescriptorSetUniformBuffersDynamic, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxDescriptorSetStorageBuffers").ToLocalChecked(), GetmaxDescriptorSetStorageBuffers, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxDescriptorSetStorageBuffersDynamic").ToLocalChecked(), GetmaxDescriptorSetStorageBuffersDynamic, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxDescriptorSetSampledImages").ToLocalChecked(), GetmaxDescriptorSetSampledImages, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxDescriptorSetStorageImages").ToLocalChecked(), GetmaxDescriptorSetStorageImages, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxDescriptorSetInputAttachments").ToLocalChecked(), GetmaxDescriptorSetInputAttachments, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxVertexInputAttributes").ToLocalChecked(), GetmaxVertexInputAttributes, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxVertexInputBindings").ToLocalChecked(), GetmaxVertexInputBindings, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxVertexInputAttributeOffset").ToLocalChecked(), GetmaxVertexInputAttributeOffset, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxVertexInputBindingStride").ToLocalChecked(), GetmaxVertexInputBindingStride, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxVertexOutputComponents").ToLocalChecked(), GetmaxVertexOutputComponents, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxTessellationGenerationLevel").ToLocalChecked(), GetmaxTessellationGenerationLevel, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxTessellationPatchSize").ToLocalChecked(), GetmaxTessellationPatchSize, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxTessellationControlPerVertexInputComponents").ToLocalChecked(), GetmaxTessellationControlPerVertexInputComponents, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxTessellationControlPerVertexOutputComponents").ToLocalChecked(), GetmaxTessellationControlPerVertexOutputComponents, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxTessellationControlPerPatchOutputComponents").ToLocalChecked(), GetmaxTessellationControlPerPatchOutputComponents, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxTessellationControlTotalOutputComponents").ToLocalChecked(), GetmaxTessellationControlTotalOutputComponents, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxTessellationEvaluationInputComponents").ToLocalChecked(), GetmaxTessellationEvaluationInputComponents, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxTessellationEvaluationOutputComponents").ToLocalChecked(), GetmaxTessellationEvaluationOutputComponents, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxGeometryShaderInvocations").ToLocalChecked(), GetmaxGeometryShaderInvocations, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxGeometryInputComponents").ToLocalChecked(), GetmaxGeometryInputComponents, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxGeometryOutputComponents").ToLocalChecked(), GetmaxGeometryOutputComponents, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxGeometryOutputVertices").ToLocalChecked(), GetmaxGeometryOutputVertices, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxGeometryTotalOutputComponents").ToLocalChecked(), GetmaxGeometryTotalOutputComponents, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxFragmentInputComponents").ToLocalChecked(), GetmaxFragmentInputComponents, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxFragmentOutputAttachments").ToLocalChecked(), GetmaxFragmentOutputAttachments, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxFragmentDualSrcAttachments").ToLocalChecked(), GetmaxFragmentDualSrcAttachments, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxFragmentCombinedOutputResources").ToLocalChecked(), GetmaxFragmentCombinedOutputResources, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxComputeSharedMemorySize").ToLocalChecked(), GetmaxComputeSharedMemorySize, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxComputeWorkGroupCount").ToLocalChecked(), GetmaxComputeWorkGroupCount, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxComputeWorkGroupInvocations").ToLocalChecked(), GetmaxComputeWorkGroupInvocations, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxComputeWorkGroupSize").ToLocalChecked(), GetmaxComputeWorkGroupSize, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("subPixelPrecisionBits").ToLocalChecked(), GetsubPixelPrecisionBits, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("subTexelPrecisionBits").ToLocalChecked(), GetsubTexelPrecisionBits, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("mipmapPrecisionBits").ToLocalChecked(), GetmipmapPrecisionBits, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxDrawIndexedIndexValue").ToLocalChecked(), GetmaxDrawIndexedIndexValue, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxDrawIndirectCount").ToLocalChecked(), GetmaxDrawIndirectCount, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxSamplerLodBias").ToLocalChecked(), GetmaxSamplerLodBias, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxSamplerAnisotropy").ToLocalChecked(), GetmaxSamplerAnisotropy, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxViewports").ToLocalChecked(), GetmaxViewports, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxViewportDimensions").ToLocalChecked(), GetmaxViewportDimensions, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("viewportBoundsRange").ToLocalChecked(), GetviewportBoundsRange, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("viewportSubPixelBits").ToLocalChecked(), GetviewportSubPixelBits, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("minMemoryMapAlignment").ToLocalChecked(), GetminMemoryMapAlignment, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("minTexelBufferOffsetAlignment").ToLocalChecked(), GetminTexelBufferOffsetAlignment, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("minUniformBufferOffsetAlignment").ToLocalChecked(), GetminUniformBufferOffsetAlignment, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("minStorageBufferOffsetAlignment").ToLocalChecked(), GetminStorageBufferOffsetAlignment, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("minTexelOffset").ToLocalChecked(), GetminTexelOffset, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxTexelOffset").ToLocalChecked(), GetmaxTexelOffset, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("minTexelGatherOffset").ToLocalChecked(), GetminTexelGatherOffset, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxTexelGatherOffset").ToLocalChecked(), GetmaxTexelGatherOffset, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("minInterpolationOffset").ToLocalChecked(), GetminInterpolationOffset, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxInterpolationOffset").ToLocalChecked(), GetmaxInterpolationOffset, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("subPixelInterpolationOffsetBits").ToLocalChecked(), GetsubPixelInterpolationOffsetBits, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxFramebufferWidth").ToLocalChecked(), GetmaxFramebufferWidth, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxFramebufferHeight").ToLocalChecked(), GetmaxFramebufferHeight, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxFramebufferLayers").ToLocalChecked(), GetmaxFramebufferLayers, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("framebufferColorSampleCounts").ToLocalChecked(), GetframebufferColorSampleCounts, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("framebufferDepthSampleCounts").ToLocalChecked(), GetframebufferDepthSampleCounts, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("framebufferStencilSampleCounts").ToLocalChecked(), GetframebufferStencilSampleCounts, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("framebufferNoAttachmentsSampleCounts").ToLocalChecked(), GetframebufferNoAttachmentsSampleCounts, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxColorAttachments").ToLocalChecked(), GetmaxColorAttachments, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("sampledImageColorSampleCounts").ToLocalChecked(), GetsampledImageColorSampleCounts, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("sampledImageIntegerSampleCounts").ToLocalChecked(), GetsampledImageIntegerSampleCounts, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("sampledImageDepthSampleCounts").ToLocalChecked(), GetsampledImageDepthSampleCounts, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("sampledImageStencilSampleCounts").ToLocalChecked(), GetsampledImageStencilSampleCounts, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("storageImageSampleCounts").ToLocalChecked(), GetstorageImageSampleCounts, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxSampleMaskWords").ToLocalChecked(), GetmaxSampleMaskWords, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("timestampComputeAndGraphics").ToLocalChecked(), GettimestampComputeAndGraphics, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("timestampPeriod").ToLocalChecked(), GettimestampPeriod, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxClipDistances").ToLocalChecked(), GetmaxClipDistances, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxCullDistances").ToLocalChecked(), GetmaxCullDistances, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxCombinedClipAndCullDistances").ToLocalChecked(), GetmaxCombinedClipAndCullDistances, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("discreteQueuePriorities").ToLocalChecked(), GetdiscreteQueuePriorities, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("pointSizeRange").ToLocalChecked(), GetpointSizeRange, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("lineWidthRange").ToLocalChecked(), GetlineWidthRange, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("pointSizeGranularity").ToLocalChecked(), GetpointSizeGranularity, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("lineWidthGranularity").ToLocalChecked(), GetlineWidthGranularity, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("strictLines").ToLocalChecked(), GetstrictLines, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("standardSampleLocations").ToLocalChecked(), GetstandardSampleLocations, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("optimalBufferCopyOffsetAlignment").ToLocalChecked(), GetoptimalBufferCopyOffsetAlignment, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("optimalBufferCopyRowPitchAlignment").ToLocalChecked(), GetoptimalBufferCopyRowPitchAlignment, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("nonCoherentAtomSize").ToLocalChecked(), GetnonCoherentAtomSize, nullptr, ctor);
  Nan::Set(target, Nan::New("VkPhysicalDeviceLimits").ToLocalChecked(), ctor->GetFunction());
}

NAN_METHOD(_VkPhysicalDeviceLimits::New) {
  if (info.IsConstructCall()) {
    _VkPhysicalDeviceLimits* self = new _VkPhysicalDeviceLimits();
    self->Wrap(info.Holder());

    if (info[0]->IsObject()) {
      v8::Local<v8::Object> obj = info[0]->ToObject();
      v8::Local<v8::String> sAccess0 = Nan::New("maxImageDimension1D").ToLocalChecked();
      v8::Local<v8::String> sAccess1 = Nan::New("maxImageDimension2D").ToLocalChecked();
      v8::Local<v8::String> sAccess2 = Nan::New("maxImageDimension3D").ToLocalChecked();
      v8::Local<v8::String> sAccess3 = Nan::New("maxImageDimensionCube").ToLocalChecked();
      v8::Local<v8::String> sAccess4 = Nan::New("maxImageArrayLayers").ToLocalChecked();
      v8::Local<v8::String> sAccess5 = Nan::New("maxTexelBufferElements").ToLocalChecked();
      v8::Local<v8::String> sAccess6 = Nan::New("maxUniformBufferRange").ToLocalChecked();
      v8::Local<v8::String> sAccess7 = Nan::New("maxStorageBufferRange").ToLocalChecked();
      v8::Local<v8::String> sAccess8 = Nan::New("maxPushConstantsSize").ToLocalChecked();
      v8::Local<v8::String> sAccess9 = Nan::New("maxMemoryAllocationCount").ToLocalChecked();
      v8::Local<v8::String> sAccess10 = Nan::New("maxSamplerAllocationCount").ToLocalChecked();
      v8::Local<v8::String> sAccess11 = Nan::New("bufferImageGranularity").ToLocalChecked();
      v8::Local<v8::String> sAccess12 = Nan::New("sparseAddressSpaceSize").ToLocalChecked();
      v8::Local<v8::String> sAccess13 = Nan::New("maxBoundDescriptorSets").ToLocalChecked();
      v8::Local<v8::String> sAccess14 = Nan::New("maxPerStageDescriptorSamplers").ToLocalChecked();
      v8::Local<v8::String> sAccess15 = Nan::New("maxPerStageDescriptorUniformBuffers").ToLocalChecked();
      v8::Local<v8::String> sAccess16 = Nan::New("maxPerStageDescriptorStorageBuffers").ToLocalChecked();
      v8::Local<v8::String> sAccess17 = Nan::New("maxPerStageDescriptorSampledImages").ToLocalChecked();
      v8::Local<v8::String> sAccess18 = Nan::New("maxPerStageDescriptorStorageImages").ToLocalChecked();
      v8::Local<v8::String> sAccess19 = Nan::New("maxPerStageDescriptorInputAttachments").ToLocalChecked();
      v8::Local<v8::String> sAccess20 = Nan::New("maxPerStageResources").ToLocalChecked();
      v8::Local<v8::String> sAccess21 = Nan::New("maxDescriptorSetSamplers").ToLocalChecked();
      v8::Local<v8::String> sAccess22 = Nan::New("maxDescriptorSetUniformBuffers").ToLocalChecked();
      v8::Local<v8::String> sAccess23 = Nan::New("maxDescriptorSetUniformBuffersDynamic").ToLocalChecked();
      v8::Local<v8::String> sAccess24 = Nan::New("maxDescriptorSetStorageBuffers").ToLocalChecked();
      v8::Local<v8::String> sAccess25 = Nan::New("maxDescriptorSetStorageBuffersDynamic").ToLocalChecked();
      v8::Local<v8::String> sAccess26 = Nan::New("maxDescriptorSetSampledImages").ToLocalChecked();
      v8::Local<v8::String> sAccess27 = Nan::New("maxDescriptorSetStorageImages").ToLocalChecked();
      v8::Local<v8::String> sAccess28 = Nan::New("maxDescriptorSetInputAttachments").ToLocalChecked();
      v8::Local<v8::String> sAccess29 = Nan::New("maxVertexInputAttributes").ToLocalChecked();
      v8::Local<v8::String> sAccess30 = Nan::New("maxVertexInputBindings").ToLocalChecked();
      v8::Local<v8::String> sAccess31 = Nan::New("maxVertexInputAttributeOffset").ToLocalChecked();
      v8::Local<v8::String> sAccess32 = Nan::New("maxVertexInputBindingStride").ToLocalChecked();
      v8::Local<v8::String> sAccess33 = Nan::New("maxVertexOutputComponents").ToLocalChecked();
      v8::Local<v8::String> sAccess34 = Nan::New("maxTessellationGenerationLevel").ToLocalChecked();
      v8::Local<v8::String> sAccess35 = Nan::New("maxTessellationPatchSize").ToLocalChecked();
      v8::Local<v8::String> sAccess36 = Nan::New("maxTessellationControlPerVertexInputComponents").ToLocalChecked();
      v8::Local<v8::String> sAccess37 = Nan::New("maxTessellationControlPerVertexOutputComponents").ToLocalChecked();
      v8::Local<v8::String> sAccess38 = Nan::New("maxTessellationControlPerPatchOutputComponents").ToLocalChecked();
      v8::Local<v8::String> sAccess39 = Nan::New("maxTessellationControlTotalOutputComponents").ToLocalChecked();
      v8::Local<v8::String> sAccess40 = Nan::New("maxTessellationEvaluationInputComponents").ToLocalChecked();
      v8::Local<v8::String> sAccess41 = Nan::New("maxTessellationEvaluationOutputComponents").ToLocalChecked();
      v8::Local<v8::String> sAccess42 = Nan::New("maxGeometryShaderInvocations").ToLocalChecked();
      v8::Local<v8::String> sAccess43 = Nan::New("maxGeometryInputComponents").ToLocalChecked();
      v8::Local<v8::String> sAccess44 = Nan::New("maxGeometryOutputComponents").ToLocalChecked();
      v8::Local<v8::String> sAccess45 = Nan::New("maxGeometryOutputVertices").ToLocalChecked();
      v8::Local<v8::String> sAccess46 = Nan::New("maxGeometryTotalOutputComponents").ToLocalChecked();
      v8::Local<v8::String> sAccess47 = Nan::New("maxFragmentInputComponents").ToLocalChecked();
      v8::Local<v8::String> sAccess48 = Nan::New("maxFragmentOutputAttachments").ToLocalChecked();
      v8::Local<v8::String> sAccess49 = Nan::New("maxFragmentDualSrcAttachments").ToLocalChecked();
      v8::Local<v8::String> sAccess50 = Nan::New("maxFragmentCombinedOutputResources").ToLocalChecked();
      v8::Local<v8::String> sAccess51 = Nan::New("maxComputeSharedMemorySize").ToLocalChecked();
      v8::Local<v8::String> sAccess52 = Nan::New("maxComputeWorkGroupCount").ToLocalChecked();
      v8::Local<v8::String> sAccess53 = Nan::New("maxComputeWorkGroupInvocations").ToLocalChecked();
      v8::Local<v8::String> sAccess54 = Nan::New("maxComputeWorkGroupSize").ToLocalChecked();
      v8::Local<v8::String> sAccess55 = Nan::New("subPixelPrecisionBits").ToLocalChecked();
      v8::Local<v8::String> sAccess56 = Nan::New("subTexelPrecisionBits").ToLocalChecked();
      v8::Local<v8::String> sAccess57 = Nan::New("mipmapPrecisionBits").ToLocalChecked();
      v8::Local<v8::String> sAccess58 = Nan::New("maxDrawIndexedIndexValue").ToLocalChecked();
      v8::Local<v8::String> sAccess59 = Nan::New("maxDrawIndirectCount").ToLocalChecked();
      v8::Local<v8::String> sAccess60 = Nan::New("maxSamplerLodBias").ToLocalChecked();
      v8::Local<v8::String> sAccess61 = Nan::New("maxSamplerAnisotropy").ToLocalChecked();
      v8::Local<v8::String> sAccess62 = Nan::New("maxViewports").ToLocalChecked();
      v8::Local<v8::String> sAccess63 = Nan::New("maxViewportDimensions").ToLocalChecked();
      v8::Local<v8::String> sAccess64 = Nan::New("viewportBoundsRange").ToLocalChecked();
      v8::Local<v8::String> sAccess65 = Nan::New("viewportSubPixelBits").ToLocalChecked();
      v8::Local<v8::String> sAccess66 = Nan::New("minMemoryMapAlignment").ToLocalChecked();
      v8::Local<v8::String> sAccess67 = Nan::New("minTexelBufferOffsetAlignment").ToLocalChecked();
      v8::Local<v8::String> sAccess68 = Nan::New("minUniformBufferOffsetAlignment").ToLocalChecked();
      v8::Local<v8::String> sAccess69 = Nan::New("minStorageBufferOffsetAlignment").ToLocalChecked();
      v8::Local<v8::String> sAccess70 = Nan::New("minTexelOffset").ToLocalChecked();
      v8::Local<v8::String> sAccess71 = Nan::New("maxTexelOffset").ToLocalChecked();
      v8::Local<v8::String> sAccess72 = Nan::New("minTexelGatherOffset").ToLocalChecked();
      v8::Local<v8::String> sAccess73 = Nan::New("maxTexelGatherOffset").ToLocalChecked();
      v8::Local<v8::String> sAccess74 = Nan::New("minInterpolationOffset").ToLocalChecked();
      v8::Local<v8::String> sAccess75 = Nan::New("maxInterpolationOffset").ToLocalChecked();
      v8::Local<v8::String> sAccess76 = Nan::New("subPixelInterpolationOffsetBits").ToLocalChecked();
      v8::Local<v8::String> sAccess77 = Nan::New("maxFramebufferWidth").ToLocalChecked();
      v8::Local<v8::String> sAccess78 = Nan::New("maxFramebufferHeight").ToLocalChecked();
      v8::Local<v8::String> sAccess79 = Nan::New("maxFramebufferLayers").ToLocalChecked();
      v8::Local<v8::String> sAccess80 = Nan::New("framebufferColorSampleCounts").ToLocalChecked();
      v8::Local<v8::String> sAccess81 = Nan::New("framebufferDepthSampleCounts").ToLocalChecked();
      v8::Local<v8::String> sAccess82 = Nan::New("framebufferStencilSampleCounts").ToLocalChecked();
      v8::Local<v8::String> sAccess83 = Nan::New("framebufferNoAttachmentsSampleCounts").ToLocalChecked();
      v8::Local<v8::String> sAccess84 = Nan::New("maxColorAttachments").ToLocalChecked();
      v8::Local<v8::String> sAccess85 = Nan::New("sampledImageColorSampleCounts").ToLocalChecked();
      v8::Local<v8::String> sAccess86 = Nan::New("sampledImageIntegerSampleCounts").ToLocalChecked();
      v8::Local<v8::String> sAccess87 = Nan::New("sampledImageDepthSampleCounts").ToLocalChecked();
      v8::Local<v8::String> sAccess88 = Nan::New("sampledImageStencilSampleCounts").ToLocalChecked();
      v8::Local<v8::String> sAccess89 = Nan::New("storageImageSampleCounts").ToLocalChecked();
      v8::Local<v8::String> sAccess90 = Nan::New("maxSampleMaskWords").ToLocalChecked();
      v8::Local<v8::String> sAccess91 = Nan::New("timestampComputeAndGraphics").ToLocalChecked();
      v8::Local<v8::String> sAccess92 = Nan::New("timestampPeriod").ToLocalChecked();
      v8::Local<v8::String> sAccess93 = Nan::New("maxClipDistances").ToLocalChecked();
      v8::Local<v8::String> sAccess94 = Nan::New("maxCullDistances").ToLocalChecked();
      v8::Local<v8::String> sAccess95 = Nan::New("maxCombinedClipAndCullDistances").ToLocalChecked();
      v8::Local<v8::String> sAccess96 = Nan::New("discreteQueuePriorities").ToLocalChecked();
      v8::Local<v8::String> sAccess97 = Nan::New("pointSizeRange").ToLocalChecked();
      v8::Local<v8::String> sAccess98 = Nan::New("lineWidthRange").ToLocalChecked();
      v8::Local<v8::String> sAccess99 = Nan::New("pointSizeGranularity").ToLocalChecked();
      v8::Local<v8::String> sAccess100 = Nan::New("lineWidthGranularity").ToLocalChecked();
      v8::Local<v8::String> sAccess101 = Nan::New("strictLines").ToLocalChecked();
      v8::Local<v8::String> sAccess102 = Nan::New("standardSampleLocations").ToLocalChecked();
      v8::Local<v8::String> sAccess103 = Nan::New("optimalBufferCopyOffsetAlignment").ToLocalChecked();
      v8::Local<v8::String> sAccess104 = Nan::New("optimalBufferCopyRowPitchAlignment").ToLocalChecked();
      v8::Local<v8::String> sAccess105 = Nan::New("nonCoherentAtomSize").ToLocalChecked();
      if (obj->Has(sAccess0)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess0);
        info.This()->Set(sAccess0, arg);
      }
      if (obj->Has(sAccess1)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess1);
        info.This()->Set(sAccess1, arg);
      }
      if (obj->Has(sAccess2)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess2);
        info.This()->Set(sAccess2, arg);
      }
      if (obj->Has(sAccess3)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess3);
        info.This()->Set(sAccess3, arg);
      }
      if (obj->Has(sAccess4)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess4);
        info.This()->Set(sAccess4, arg);
      }
      if (obj->Has(sAccess5)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess5);
        info.This()->Set(sAccess5, arg);
      }
      if (obj->Has(sAccess6)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess6);
        info.This()->Set(sAccess6, arg);
      }
      if (obj->Has(sAccess7)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess7);
        info.This()->Set(sAccess7, arg);
      }
      if (obj->Has(sAccess8)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess8);
        info.This()->Set(sAccess8, arg);
      }
      if (obj->Has(sAccess9)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess9);
        info.This()->Set(sAccess9, arg);
      }
      if (obj->Has(sAccess10)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess10);
        info.This()->Set(sAccess10, arg);
      }
      if (obj->Has(sAccess11)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess11);
        info.This()->Set(sAccess11, arg);
      }
      if (obj->Has(sAccess12)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess12);
        info.This()->Set(sAccess12, arg);
      }
      if (obj->Has(sAccess13)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess13);
        info.This()->Set(sAccess13, arg);
      }
      if (obj->Has(sAccess14)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess14);
        info.This()->Set(sAccess14, arg);
      }
      if (obj->Has(sAccess15)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess15);
        info.This()->Set(sAccess15, arg);
      }
      if (obj->Has(sAccess16)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess16);
        info.This()->Set(sAccess16, arg);
      }
      if (obj->Has(sAccess17)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess17);
        info.This()->Set(sAccess17, arg);
      }
      if (obj->Has(sAccess18)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess18);
        info.This()->Set(sAccess18, arg);
      }
      if (obj->Has(sAccess19)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess19);
        info.This()->Set(sAccess19, arg);
      }
      if (obj->Has(sAccess20)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess20);
        info.This()->Set(sAccess20, arg);
      }
      if (obj->Has(sAccess21)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess21);
        info.This()->Set(sAccess21, arg);
      }
      if (obj->Has(sAccess22)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess22);
        info.This()->Set(sAccess22, arg);
      }
      if (obj->Has(sAccess23)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess23);
        info.This()->Set(sAccess23, arg);
      }
      if (obj->Has(sAccess24)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess24);
        info.This()->Set(sAccess24, arg);
      }
      if (obj->Has(sAccess25)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess25);
        info.This()->Set(sAccess25, arg);
      }
      if (obj->Has(sAccess26)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess26);
        info.This()->Set(sAccess26, arg);
      }
      if (obj->Has(sAccess27)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess27);
        info.This()->Set(sAccess27, arg);
      }
      if (obj->Has(sAccess28)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess28);
        info.This()->Set(sAccess28, arg);
      }
      if (obj->Has(sAccess29)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess29);
        info.This()->Set(sAccess29, arg);
      }
      if (obj->Has(sAccess30)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess30);
        info.This()->Set(sAccess30, arg);
      }
      if (obj->Has(sAccess31)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess31);
        info.This()->Set(sAccess31, arg);
      }
      if (obj->Has(sAccess32)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess32);
        info.This()->Set(sAccess32, arg);
      }
      if (obj->Has(sAccess33)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess33);
        info.This()->Set(sAccess33, arg);
      }
      if (obj->Has(sAccess34)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess34);
        info.This()->Set(sAccess34, arg);
      }
      if (obj->Has(sAccess35)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess35);
        info.This()->Set(sAccess35, arg);
      }
      if (obj->Has(sAccess36)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess36);
        info.This()->Set(sAccess36, arg);
      }
      if (obj->Has(sAccess37)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess37);
        info.This()->Set(sAccess37, arg);
      }
      if (obj->Has(sAccess38)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess38);
        info.This()->Set(sAccess38, arg);
      }
      if (obj->Has(sAccess39)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess39);
        info.This()->Set(sAccess39, arg);
      }
      if (obj->Has(sAccess40)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess40);
        info.This()->Set(sAccess40, arg);
      }
      if (obj->Has(sAccess41)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess41);
        info.This()->Set(sAccess41, arg);
      }
      if (obj->Has(sAccess42)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess42);
        info.This()->Set(sAccess42, arg);
      }
      if (obj->Has(sAccess43)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess43);
        info.This()->Set(sAccess43, arg);
      }
      if (obj->Has(sAccess44)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess44);
        info.This()->Set(sAccess44, arg);
      }
      if (obj->Has(sAccess45)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess45);
        info.This()->Set(sAccess45, arg);
      }
      if (obj->Has(sAccess46)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess46);
        info.This()->Set(sAccess46, arg);
      }
      if (obj->Has(sAccess47)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess47);
        info.This()->Set(sAccess47, arg);
      }
      if (obj->Has(sAccess48)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess48);
        info.This()->Set(sAccess48, arg);
      }
      if (obj->Has(sAccess49)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess49);
        info.This()->Set(sAccess49, arg);
      }
      if (obj->Has(sAccess50)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess50);
        info.This()->Set(sAccess50, arg);
      }
      if (obj->Has(sAccess51)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess51);
        info.This()->Set(sAccess51, arg);
      }
      if (obj->Has(sAccess52)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess52);
        info.This()->Set(sAccess52, arg);
      }
      if (obj->Has(sAccess53)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess53);
        info.This()->Set(sAccess53, arg);
      }
      if (obj->Has(sAccess54)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess54);
        info.This()->Set(sAccess54, arg);
      }
      if (obj->Has(sAccess55)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess55);
        info.This()->Set(sAccess55, arg);
      }
      if (obj->Has(sAccess56)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess56);
        info.This()->Set(sAccess56, arg);
      }
      if (obj->Has(sAccess57)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess57);
        info.This()->Set(sAccess57, arg);
      }
      if (obj->Has(sAccess58)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess58);
        info.This()->Set(sAccess58, arg);
      }
      if (obj->Has(sAccess59)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess59);
        info.This()->Set(sAccess59, arg);
      }
      if (obj->Has(sAccess60)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess60);
        info.This()->Set(sAccess60, arg);
      }
      if (obj->Has(sAccess61)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess61);
        info.This()->Set(sAccess61, arg);
      }
      if (obj->Has(sAccess62)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess62);
        info.This()->Set(sAccess62, arg);
      }
      if (obj->Has(sAccess63)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess63);
        info.This()->Set(sAccess63, arg);
      }
      if (obj->Has(sAccess64)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess64);
        info.This()->Set(sAccess64, arg);
      }
      if (obj->Has(sAccess65)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess65);
        info.This()->Set(sAccess65, arg);
      }
      if (obj->Has(sAccess66)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess66);
        info.This()->Set(sAccess66, arg);
      }
      if (obj->Has(sAccess67)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess67);
        info.This()->Set(sAccess67, arg);
      }
      if (obj->Has(sAccess68)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess68);
        info.This()->Set(sAccess68, arg);
      }
      if (obj->Has(sAccess69)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess69);
        info.This()->Set(sAccess69, arg);
      }
      if (obj->Has(sAccess70)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess70);
        info.This()->Set(sAccess70, arg);
      }
      if (obj->Has(sAccess71)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess71);
        info.This()->Set(sAccess71, arg);
      }
      if (obj->Has(sAccess72)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess72);
        info.This()->Set(sAccess72, arg);
      }
      if (obj->Has(sAccess73)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess73);
        info.This()->Set(sAccess73, arg);
      }
      if (obj->Has(sAccess74)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess74);
        info.This()->Set(sAccess74, arg);
      }
      if (obj->Has(sAccess75)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess75);
        info.This()->Set(sAccess75, arg);
      }
      if (obj->Has(sAccess76)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess76);
        info.This()->Set(sAccess76, arg);
      }
      if (obj->Has(sAccess77)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess77);
        info.This()->Set(sAccess77, arg);
      }
      if (obj->Has(sAccess78)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess78);
        info.This()->Set(sAccess78, arg);
      }
      if (obj->Has(sAccess79)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess79);
        info.This()->Set(sAccess79, arg);
      }
      if (obj->Has(sAccess80)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess80);
        info.This()->Set(sAccess80, arg);
      }
      if (obj->Has(sAccess81)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess81);
        info.This()->Set(sAccess81, arg);
      }
      if (obj->Has(sAccess82)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess82);
        info.This()->Set(sAccess82, arg);
      }
      if (obj->Has(sAccess83)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess83);
        info.This()->Set(sAccess83, arg);
      }
      if (obj->Has(sAccess84)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess84);
        info.This()->Set(sAccess84, arg);
      }
      if (obj->Has(sAccess85)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess85);
        info.This()->Set(sAccess85, arg);
      }
      if (obj->Has(sAccess86)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess86);
        info.This()->Set(sAccess86, arg);
      }
      if (obj->Has(sAccess87)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess87);
        info.This()->Set(sAccess87, arg);
      }
      if (obj->Has(sAccess88)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess88);
        info.This()->Set(sAccess88, arg);
      }
      if (obj->Has(sAccess89)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess89);
        info.This()->Set(sAccess89, arg);
      }
      if (obj->Has(sAccess90)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess90);
        info.This()->Set(sAccess90, arg);
      }
      if (obj->Has(sAccess91)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess91);
        info.This()->Set(sAccess91, arg);
      }
      if (obj->Has(sAccess92)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess92);
        info.This()->Set(sAccess92, arg);
      }
      if (obj->Has(sAccess93)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess93);
        info.This()->Set(sAccess93, arg);
      }
      if (obj->Has(sAccess94)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess94);
        info.This()->Set(sAccess94, arg);
      }
      if (obj->Has(sAccess95)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess95);
        info.This()->Set(sAccess95, arg);
      }
      if (obj->Has(sAccess96)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess96);
        info.This()->Set(sAccess96, arg);
      }
      if (obj->Has(sAccess97)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess97);
        info.This()->Set(sAccess97, arg);
      }
      if (obj->Has(sAccess98)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess98);
        info.This()->Set(sAccess98, arg);
      }
      if (obj->Has(sAccess99)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess99);
        info.This()->Set(sAccess99, arg);
      }
      if (obj->Has(sAccess100)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess100);
        info.This()->Set(sAccess100, arg);
      }
      if (obj->Has(sAccess101)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess101);
        info.This()->Set(sAccess101, arg);
      }
      if (obj->Has(sAccess102)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess102);
        info.This()->Set(sAccess102, arg);
      }
      if (obj->Has(sAccess103)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess103);
        info.This()->Set(sAccess103, arg);
      }
      if (obj->Has(sAccess104)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess104);
        info.This()->Set(sAccess104, arg);
      }
      if (obj->Has(sAccess105)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess105);
        info.This()->Set(sAccess105, arg);
      }
      }

    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkPhysicalDeviceLimits constructor cannot be invoked without 'new'");
  }
};

// maxImageDimension1D
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxImageDimension1D) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxImageDimension1D));
}// maxImageDimension2D
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxImageDimension2D) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxImageDimension2D));
}// maxImageDimension3D
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxImageDimension3D) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxImageDimension3D));
}// maxImageDimensionCube
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxImageDimensionCube) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxImageDimensionCube));
}// maxImageArrayLayers
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxImageArrayLayers) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxImageArrayLayers));
}// maxTexelBufferElements
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxTexelBufferElements) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxTexelBufferElements));
}// maxUniformBufferRange
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxUniformBufferRange) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxUniformBufferRange));
}// maxStorageBufferRange
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxStorageBufferRange) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxStorageBufferRange));
}// maxPushConstantsSize
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxPushConstantsSize) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxPushConstantsSize));
}// maxMemoryAllocationCount
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxMemoryAllocationCount) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxMemoryAllocationCount));
}// maxSamplerAllocationCount
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxSamplerAllocationCount) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxSamplerAllocationCount));
}// bufferImageGranularity
NAN_GETTER(_VkPhysicalDeviceLimits::GetbufferImageGranularity) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.bufferImageGranularity));
}// sparseAddressSpaceSize
NAN_GETTER(_VkPhysicalDeviceLimits::GetsparseAddressSpaceSize) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sparseAddressSpaceSize));
}// maxBoundDescriptorSets
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxBoundDescriptorSets) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxBoundDescriptorSets));
}// maxPerStageDescriptorSamplers
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxPerStageDescriptorSamplers) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxPerStageDescriptorSamplers));
}// maxPerStageDescriptorUniformBuffers
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxPerStageDescriptorUniformBuffers) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxPerStageDescriptorUniformBuffers));
}// maxPerStageDescriptorStorageBuffers
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxPerStageDescriptorStorageBuffers) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxPerStageDescriptorStorageBuffers));
}// maxPerStageDescriptorSampledImages
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxPerStageDescriptorSampledImages) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxPerStageDescriptorSampledImages));
}// maxPerStageDescriptorStorageImages
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxPerStageDescriptorStorageImages) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxPerStageDescriptorStorageImages));
}// maxPerStageDescriptorInputAttachments
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxPerStageDescriptorInputAttachments) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxPerStageDescriptorInputAttachments));
}// maxPerStageResources
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxPerStageResources) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxPerStageResources));
}// maxDescriptorSetSamplers
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxDescriptorSetSamplers) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxDescriptorSetSamplers));
}// maxDescriptorSetUniformBuffers
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxDescriptorSetUniformBuffers) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxDescriptorSetUniformBuffers));
}// maxDescriptorSetUniformBuffersDynamic
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxDescriptorSetUniformBuffersDynamic) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxDescriptorSetUniformBuffersDynamic));
}// maxDescriptorSetStorageBuffers
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxDescriptorSetStorageBuffers) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxDescriptorSetStorageBuffers));
}// maxDescriptorSetStorageBuffersDynamic
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxDescriptorSetStorageBuffersDynamic) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxDescriptorSetStorageBuffersDynamic));
}// maxDescriptorSetSampledImages
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxDescriptorSetSampledImages) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxDescriptorSetSampledImages));
}// maxDescriptorSetStorageImages
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxDescriptorSetStorageImages) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxDescriptorSetStorageImages));
}// maxDescriptorSetInputAttachments
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxDescriptorSetInputAttachments) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxDescriptorSetInputAttachments));
}// maxVertexInputAttributes
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxVertexInputAttributes) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxVertexInputAttributes));
}// maxVertexInputBindings
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxVertexInputBindings) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxVertexInputBindings));
}// maxVertexInputAttributeOffset
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxVertexInputAttributeOffset) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxVertexInputAttributeOffset));
}// maxVertexInputBindingStride
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxVertexInputBindingStride) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxVertexInputBindingStride));
}// maxVertexOutputComponents
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxVertexOutputComponents) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxVertexOutputComponents));
}// maxTessellationGenerationLevel
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxTessellationGenerationLevel) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxTessellationGenerationLevel));
}// maxTessellationPatchSize
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxTessellationPatchSize) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxTessellationPatchSize));
}// maxTessellationControlPerVertexInputComponents
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxTessellationControlPerVertexInputComponents) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxTessellationControlPerVertexInputComponents));
}// maxTessellationControlPerVertexOutputComponents
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxTessellationControlPerVertexOutputComponents) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxTessellationControlPerVertexOutputComponents));
}// maxTessellationControlPerPatchOutputComponents
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxTessellationControlPerPatchOutputComponents) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxTessellationControlPerPatchOutputComponents));
}// maxTessellationControlTotalOutputComponents
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxTessellationControlTotalOutputComponents) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxTessellationControlTotalOutputComponents));
}// maxTessellationEvaluationInputComponents
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxTessellationEvaluationInputComponents) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxTessellationEvaluationInputComponents));
}// maxTessellationEvaluationOutputComponents
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxTessellationEvaluationOutputComponents) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxTessellationEvaluationOutputComponents));
}// maxGeometryShaderInvocations
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxGeometryShaderInvocations) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxGeometryShaderInvocations));
}// maxGeometryInputComponents
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxGeometryInputComponents) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxGeometryInputComponents));
}// maxGeometryOutputComponents
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxGeometryOutputComponents) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxGeometryOutputComponents));
}// maxGeometryOutputVertices
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxGeometryOutputVertices) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxGeometryOutputVertices));
}// maxGeometryTotalOutputComponents
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxGeometryTotalOutputComponents) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxGeometryTotalOutputComponents));
}// maxFragmentInputComponents
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxFragmentInputComponents) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxFragmentInputComponents));
}// maxFragmentOutputAttachments
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxFragmentOutputAttachments) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxFragmentOutputAttachments));
}// maxFragmentDualSrcAttachments
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxFragmentDualSrcAttachments) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxFragmentDualSrcAttachments));
}// maxFragmentCombinedOutputResources
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxFragmentCombinedOutputResources) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxFragmentCombinedOutputResources));
}// maxComputeSharedMemorySize
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxComputeSharedMemorySize) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxComputeSharedMemorySize));
}// maxComputeWorkGroupCount
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxComputeWorkGroupCount) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  if (self->maxComputeWorkGroupCount.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    info.GetReturnValue().Set(Nan::New(self->maxComputeWorkGroupCount));
  }
}// maxComputeWorkGroupInvocations
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxComputeWorkGroupInvocations) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxComputeWorkGroupInvocations));
}// maxComputeWorkGroupSize
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxComputeWorkGroupSize) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  if (self->maxComputeWorkGroupSize.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    info.GetReturnValue().Set(Nan::New(self->maxComputeWorkGroupSize));
  }
}// subPixelPrecisionBits
NAN_GETTER(_VkPhysicalDeviceLimits::GetsubPixelPrecisionBits) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.subPixelPrecisionBits));
}// subTexelPrecisionBits
NAN_GETTER(_VkPhysicalDeviceLimits::GetsubTexelPrecisionBits) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.subTexelPrecisionBits));
}// mipmapPrecisionBits
NAN_GETTER(_VkPhysicalDeviceLimits::GetmipmapPrecisionBits) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.mipmapPrecisionBits));
}// maxDrawIndexedIndexValue
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxDrawIndexedIndexValue) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxDrawIndexedIndexValue));
}// maxDrawIndirectCount
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxDrawIndirectCount) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxDrawIndirectCount));
}// maxSamplerLodBias
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxSamplerLodBias) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxSamplerLodBias));
}// maxSamplerAnisotropy
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxSamplerAnisotropy) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxSamplerAnisotropy));
}// maxViewports
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxViewports) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxViewports));
}// maxViewportDimensions
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxViewportDimensions) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  if (self->maxViewportDimensions.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    info.GetReturnValue().Set(Nan::New(self->maxViewportDimensions));
  }
}// viewportBoundsRange
NAN_GETTER(_VkPhysicalDeviceLimits::GetviewportBoundsRange) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  if (self->viewportBoundsRange.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    info.GetReturnValue().Set(Nan::New(self->viewportBoundsRange));
  }
}// viewportSubPixelBits
NAN_GETTER(_VkPhysicalDeviceLimits::GetviewportSubPixelBits) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.viewportSubPixelBits));
}// minMemoryMapAlignment
NAN_GETTER(_VkPhysicalDeviceLimits::GetminMemoryMapAlignment) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.minMemoryMapAlignment));
}// minTexelBufferOffsetAlignment
NAN_GETTER(_VkPhysicalDeviceLimits::GetminTexelBufferOffsetAlignment) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.minTexelBufferOffsetAlignment));
}// minUniformBufferOffsetAlignment
NAN_GETTER(_VkPhysicalDeviceLimits::GetminUniformBufferOffsetAlignment) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.minUniformBufferOffsetAlignment));
}// minStorageBufferOffsetAlignment
NAN_GETTER(_VkPhysicalDeviceLimits::GetminStorageBufferOffsetAlignment) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.minStorageBufferOffsetAlignment));
}// minTexelOffset
NAN_GETTER(_VkPhysicalDeviceLimits::GetminTexelOffset) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.minTexelOffset));
}// maxTexelOffset
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxTexelOffset) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxTexelOffset));
}// minTexelGatherOffset
NAN_GETTER(_VkPhysicalDeviceLimits::GetminTexelGatherOffset) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.minTexelGatherOffset));
}// maxTexelGatherOffset
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxTexelGatherOffset) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxTexelGatherOffset));
}// minInterpolationOffset
NAN_GETTER(_VkPhysicalDeviceLimits::GetminInterpolationOffset) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.minInterpolationOffset));
}// maxInterpolationOffset
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxInterpolationOffset) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxInterpolationOffset));
}// subPixelInterpolationOffsetBits
NAN_GETTER(_VkPhysicalDeviceLimits::GetsubPixelInterpolationOffsetBits) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.subPixelInterpolationOffsetBits));
}// maxFramebufferWidth
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxFramebufferWidth) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxFramebufferWidth));
}// maxFramebufferHeight
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxFramebufferHeight) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxFramebufferHeight));
}// maxFramebufferLayers
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxFramebufferLayers) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxFramebufferLayers));
}// framebufferColorSampleCounts
NAN_GETTER(_VkPhysicalDeviceLimits::GetframebufferColorSampleCounts) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.framebufferColorSampleCounts));
}// framebufferDepthSampleCounts
NAN_GETTER(_VkPhysicalDeviceLimits::GetframebufferDepthSampleCounts) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.framebufferDepthSampleCounts));
}// framebufferStencilSampleCounts
NAN_GETTER(_VkPhysicalDeviceLimits::GetframebufferStencilSampleCounts) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.framebufferStencilSampleCounts));
}// framebufferNoAttachmentsSampleCounts
NAN_GETTER(_VkPhysicalDeviceLimits::GetframebufferNoAttachmentsSampleCounts) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.framebufferNoAttachmentsSampleCounts));
}// maxColorAttachments
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxColorAttachments) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxColorAttachments));
}// sampledImageColorSampleCounts
NAN_GETTER(_VkPhysicalDeviceLimits::GetsampledImageColorSampleCounts) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sampledImageColorSampleCounts));
}// sampledImageIntegerSampleCounts
NAN_GETTER(_VkPhysicalDeviceLimits::GetsampledImageIntegerSampleCounts) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sampledImageIntegerSampleCounts));
}// sampledImageDepthSampleCounts
NAN_GETTER(_VkPhysicalDeviceLimits::GetsampledImageDepthSampleCounts) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sampledImageDepthSampleCounts));
}// sampledImageStencilSampleCounts
NAN_GETTER(_VkPhysicalDeviceLimits::GetsampledImageStencilSampleCounts) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sampledImageStencilSampleCounts));
}// storageImageSampleCounts
NAN_GETTER(_VkPhysicalDeviceLimits::GetstorageImageSampleCounts) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.storageImageSampleCounts));
}// maxSampleMaskWords
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxSampleMaskWords) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxSampleMaskWords));
}// timestampComputeAndGraphics
NAN_GETTER(_VkPhysicalDeviceLimits::GettimestampComputeAndGraphics) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.timestampComputeAndGraphics));
}// timestampPeriod
NAN_GETTER(_VkPhysicalDeviceLimits::GettimestampPeriod) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.timestampPeriod));
}// maxClipDistances
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxClipDistances) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxClipDistances));
}// maxCullDistances
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxCullDistances) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxCullDistances));
}// maxCombinedClipAndCullDistances
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxCombinedClipAndCullDistances) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxCombinedClipAndCullDistances));
}// discreteQueuePriorities
NAN_GETTER(_VkPhysicalDeviceLimits::GetdiscreteQueuePriorities) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.discreteQueuePriorities));
}// pointSizeRange
NAN_GETTER(_VkPhysicalDeviceLimits::GetpointSizeRange) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  if (self->pointSizeRange.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    info.GetReturnValue().Set(Nan::New(self->pointSizeRange));
  }
}// lineWidthRange
NAN_GETTER(_VkPhysicalDeviceLimits::GetlineWidthRange) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  if (self->lineWidthRange.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    info.GetReturnValue().Set(Nan::New(self->lineWidthRange));
  }
}// pointSizeGranularity
NAN_GETTER(_VkPhysicalDeviceLimits::GetpointSizeGranularity) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.pointSizeGranularity));
}// lineWidthGranularity
NAN_GETTER(_VkPhysicalDeviceLimits::GetlineWidthGranularity) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.lineWidthGranularity));
}// strictLines
NAN_GETTER(_VkPhysicalDeviceLimits::GetstrictLines) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.strictLines));
}// standardSampleLocations
NAN_GETTER(_VkPhysicalDeviceLimits::GetstandardSampleLocations) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.standardSampleLocations));
}// optimalBufferCopyOffsetAlignment
NAN_GETTER(_VkPhysicalDeviceLimits::GetoptimalBufferCopyOffsetAlignment) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.optimalBufferCopyOffsetAlignment));
}// optimalBufferCopyRowPitchAlignment
NAN_GETTER(_VkPhysicalDeviceLimits::GetoptimalBufferCopyRowPitchAlignment) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.optimalBufferCopyRowPitchAlignment));
}// nonCoherentAtomSize
NAN_GETTER(_VkPhysicalDeviceLimits::GetnonCoherentAtomSize) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.nonCoherentAtomSize));
}