/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY node-vulkan v0.0.1
 */
#include "utils.h"
#include "index.h"
#include "VkImageCreateInfo.h"

Nan::Persistent<v8::FunctionTemplate> _VkImageCreateInfo::constructor;

_VkImageCreateInfo::_VkImageCreateInfo() {
  instance.sType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO;
}

_VkImageCreateInfo::~_VkImageCreateInfo() {
  //printf("VkImageCreateInfo deconstructed!!\n");
}

void _VkImageCreateInfo::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkImageCreateInfo::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkImageCreateInfo").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("sType").ToLocalChecked(), GetsType, SetsType, ctor);
  SetPrototypeAccessor(proto, Nan::New("flags").ToLocalChecked(), Getflags, Setflags, ctor);
  SetPrototypeAccessor(proto, Nan::New("imageType").ToLocalChecked(), GetimageType, SetimageType, ctor);
  SetPrototypeAccessor(proto, Nan::New("format").ToLocalChecked(), Getformat, Setformat, ctor);
  SetPrototypeAccessor(proto, Nan::New("extent").ToLocalChecked(), Getextent, Setextent, ctor);
  SetPrototypeAccessor(proto, Nan::New("mipLevels").ToLocalChecked(), GetmipLevels, SetmipLevels, ctor);
  SetPrototypeAccessor(proto, Nan::New("arrayLayers").ToLocalChecked(), GetarrayLayers, SetarrayLayers, ctor);
  SetPrototypeAccessor(proto, Nan::New("samples").ToLocalChecked(), Getsamples, Setsamples, ctor);
  SetPrototypeAccessor(proto, Nan::New("tiling").ToLocalChecked(), Gettiling, Settiling, ctor);
  SetPrototypeAccessor(proto, Nan::New("usage").ToLocalChecked(), Getusage, Setusage, ctor);
  SetPrototypeAccessor(proto, Nan::New("sharingMode").ToLocalChecked(), GetsharingMode, SetsharingMode, ctor);
  SetPrototypeAccessor(proto, Nan::New("queueFamilyIndexCount").ToLocalChecked(), GetqueueFamilyIndexCount, SetqueueFamilyIndexCount, ctor);
  SetPrototypeAccessor(proto, Nan::New("pQueueFamilyIndices").ToLocalChecked(), GetpQueueFamilyIndices, SetpQueueFamilyIndices, ctor);
  SetPrototypeAccessor(proto, Nan::New("initialLayout").ToLocalChecked(), GetinitialLayout, SetinitialLayout, ctor);
  Nan::Set(target, Nan::New("VkImageCreateInfo").ToLocalChecked(), ctor->GetFunction());
}

NAN_METHOD(_VkImageCreateInfo::New) {
  if (info.IsConstructCall()) {
    _VkImageCreateInfo* self = new _VkImageCreateInfo();
    self->Wrap(info.Holder());
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkImageCreateInfo constructor cannot be invoked without 'new'");
  }
};

// sType
NAN_GETTER(_VkImageCreateInfo::GetsType) {
  _VkImageCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkImageCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sType));
}NAN_SETTER(_VkImageCreateInfo::SetsType) {
  _VkImageCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkImageCreateInfo>(info.This());
  self->instance.sType = static_cast<VkStructureType>((int32_t)value->NumberValue());
}// flags
NAN_GETTER(_VkImageCreateInfo::Getflags) {
  _VkImageCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkImageCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.flags));
}NAN_SETTER(_VkImageCreateInfo::Setflags) {
  _VkImageCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkImageCreateInfo>(info.This());
  self->instance.flags = static_cast<VkImageCreateFlags>((int32_t)value->NumberValue());
}// imageType
NAN_GETTER(_VkImageCreateInfo::GetimageType) {
  _VkImageCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkImageCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.imageType));
}NAN_SETTER(_VkImageCreateInfo::SetimageType) {
  _VkImageCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkImageCreateInfo>(info.This());
  self->instance.imageType = static_cast<VkImageType>((int32_t)value->NumberValue());
}// format
NAN_GETTER(_VkImageCreateInfo::Getformat) {
  _VkImageCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkImageCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.format));
}NAN_SETTER(_VkImageCreateInfo::Setformat) {
  _VkImageCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkImageCreateInfo>(info.This());
  self->instance.format = static_cast<VkFormat>((int32_t)value->NumberValue());
}// extent
NAN_GETTER(_VkImageCreateInfo::Getextent) {
  _VkImageCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkImageCreateInfo>(info.This());
  if (self->extent.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->extent);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkImageCreateInfo::Setextent) {
  _VkImageCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkImageCreateInfo>(info.This());
  // js
  if (!(value->IsNull())) {
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> obj(value->ToObject());
    self->extent = obj;
  } else {
    //self->extent = Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>>(Nan::Null());
  }
  // vulkan
  if (!(value->IsNull())) {
    _VkExtent3D* obj = Nan::ObjectWrap::Unwrap<_VkExtent3D>(value->ToObject());
    self->instance.extent = obj->instance;
  } else {
    memset(&self->instance.extent, 0, sizeof(VkExtent3D));
  }
}// mipLevels
NAN_GETTER(_VkImageCreateInfo::GetmipLevels) {
  _VkImageCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkImageCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.mipLevels));
}NAN_SETTER(_VkImageCreateInfo::SetmipLevels) {
  _VkImageCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkImageCreateInfo>(info.This());
  self->instance.mipLevels = static_cast<uint32_t>(value->NumberValue());
}// arrayLayers
NAN_GETTER(_VkImageCreateInfo::GetarrayLayers) {
  _VkImageCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkImageCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.arrayLayers));
}NAN_SETTER(_VkImageCreateInfo::SetarrayLayers) {
  _VkImageCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkImageCreateInfo>(info.This());
  self->instance.arrayLayers = static_cast<uint32_t>(value->NumberValue());
}// samples
NAN_GETTER(_VkImageCreateInfo::Getsamples) {
  _VkImageCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkImageCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.samples));
}NAN_SETTER(_VkImageCreateInfo::Setsamples) {
  _VkImageCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkImageCreateInfo>(info.This());
  self->instance.samples = static_cast<VkSampleCountFlagBits>((int32_t)value->NumberValue());
}// tiling
NAN_GETTER(_VkImageCreateInfo::Gettiling) {
  _VkImageCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkImageCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.tiling));
}NAN_SETTER(_VkImageCreateInfo::Settiling) {
  _VkImageCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkImageCreateInfo>(info.This());
  self->instance.tiling = static_cast<VkImageTiling>((int32_t)value->NumberValue());
}// usage
NAN_GETTER(_VkImageCreateInfo::Getusage) {
  _VkImageCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkImageCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.usage));
}NAN_SETTER(_VkImageCreateInfo::Setusage) {
  _VkImageCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkImageCreateInfo>(info.This());
  self->instance.usage = static_cast<VkImageUsageFlags>((int32_t)value->NumberValue());
}// sharingMode
NAN_GETTER(_VkImageCreateInfo::GetsharingMode) {
  _VkImageCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkImageCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sharingMode));
}NAN_SETTER(_VkImageCreateInfo::SetsharingMode) {
  _VkImageCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkImageCreateInfo>(info.This());
  self->instance.sharingMode = static_cast<VkSharingMode>((int32_t)value->NumberValue());
}// queueFamilyIndexCount
NAN_GETTER(_VkImageCreateInfo::GetqueueFamilyIndexCount) {
  _VkImageCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkImageCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.queueFamilyIndexCount));
}NAN_SETTER(_VkImageCreateInfo::SetqueueFamilyIndexCount) {
  _VkImageCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkImageCreateInfo>(info.This());
  self->instance.queueFamilyIndexCount = static_cast<uint32_t>(value->NumberValue());
}// pQueueFamilyIndices
NAN_GETTER(_VkImageCreateInfo::GetpQueueFamilyIndices) {
  _VkImageCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkImageCreateInfo>(info.This());
  if (self->pQueueFamilyIndices.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->pQueueFamilyIndices);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkImageCreateInfo::SetpQueueFamilyIndices) {
  _VkImageCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkImageCreateInfo>(info.This());
  
    // js
    if (value->IsArray() || value->IsArrayBufferView()) {
      v8::Handle<v8::Array> arr = v8::Handle<v8::Array>::Cast(value);
      Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> obj(arr);
      self->pQueueFamilyIndices = obj;
    } else {
      if (!self->pQueueFamilyIndices.IsEmpty()) self->pQueueFamilyIndices.Empty();
    }
  
  
  // vulkan
  if (value->IsArrayBufferView()) {
    self->instance.pQueueFamilyIndices = getTypedArrayData<uint32_t>(value->ToObject(), nullptr);
  } else {
    self->instance.pQueueFamilyIndices = nullptr;
  }
}// initialLayout
NAN_GETTER(_VkImageCreateInfo::GetinitialLayout) {
  _VkImageCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkImageCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.initialLayout));
}NAN_SETTER(_VkImageCreateInfo::SetinitialLayout) {
  _VkImageCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkImageCreateInfo>(info.This());
  self->instance.initialLayout = static_cast<VkImageLayout>((int32_t)value->NumberValue());
}