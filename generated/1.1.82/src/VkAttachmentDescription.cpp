/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY node-vulkan v0.0.1
 */
#include "utils.h"
#include "index.h"
#include "VkAttachmentDescription.h"

Nan::Persistent<v8::FunctionTemplate> _VkAttachmentDescription::constructor;

_VkAttachmentDescription::_VkAttachmentDescription() {
  
}

_VkAttachmentDescription::~_VkAttachmentDescription() {
  //printf("VkAttachmentDescription deconstructed!!\n");
}

void _VkAttachmentDescription::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkAttachmentDescription::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkAttachmentDescription").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("flags").ToLocalChecked(), Getflags, Setflags, ctor);
  SetPrototypeAccessor(proto, Nan::New("format").ToLocalChecked(), Getformat, Setformat, ctor);
  SetPrototypeAccessor(proto, Nan::New("samples").ToLocalChecked(), Getsamples, Setsamples, ctor);
  SetPrototypeAccessor(proto, Nan::New("loadOp").ToLocalChecked(), GetloadOp, SetloadOp, ctor);
  SetPrototypeAccessor(proto, Nan::New("storeOp").ToLocalChecked(), GetstoreOp, SetstoreOp, ctor);
  SetPrototypeAccessor(proto, Nan::New("stencilLoadOp").ToLocalChecked(), GetstencilLoadOp, SetstencilLoadOp, ctor);
  SetPrototypeAccessor(proto, Nan::New("stencilStoreOp").ToLocalChecked(), GetstencilStoreOp, SetstencilStoreOp, ctor);
  SetPrototypeAccessor(proto, Nan::New("initialLayout").ToLocalChecked(), GetinitialLayout, SetinitialLayout, ctor);
  SetPrototypeAccessor(proto, Nan::New("finalLayout").ToLocalChecked(), GetfinalLayout, SetfinalLayout, ctor);
  Nan::Set(target, Nan::New("VkAttachmentDescription").ToLocalChecked(), ctor->GetFunction());
}

NAN_METHOD(_VkAttachmentDescription::New) {
  if (info.IsConstructCall()) {
    _VkAttachmentDescription* self = new _VkAttachmentDescription();
    self->Wrap(info.Holder());
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkAttachmentDescription constructor cannot be invoked without 'new'");
  }
};

// flags
NAN_GETTER(_VkAttachmentDescription::Getflags) {
  _VkAttachmentDescription *self = Nan::ObjectWrap::Unwrap<_VkAttachmentDescription>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.flags));
}NAN_SETTER(_VkAttachmentDescription::Setflags) {
  _VkAttachmentDescription *self = Nan::ObjectWrap::Unwrap<_VkAttachmentDescription>(info.This());
  self->instance.flags = static_cast<VkAttachmentDescriptionFlags>((int32_t)value->NumberValue());
}// format
NAN_GETTER(_VkAttachmentDescription::Getformat) {
  _VkAttachmentDescription *self = Nan::ObjectWrap::Unwrap<_VkAttachmentDescription>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.format));
}NAN_SETTER(_VkAttachmentDescription::Setformat) {
  _VkAttachmentDescription *self = Nan::ObjectWrap::Unwrap<_VkAttachmentDescription>(info.This());
  self->instance.format = static_cast<VkFormat>((int32_t)value->NumberValue());
}// samples
NAN_GETTER(_VkAttachmentDescription::Getsamples) {
  _VkAttachmentDescription *self = Nan::ObjectWrap::Unwrap<_VkAttachmentDescription>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.samples));
}NAN_SETTER(_VkAttachmentDescription::Setsamples) {
  _VkAttachmentDescription *self = Nan::ObjectWrap::Unwrap<_VkAttachmentDescription>(info.This());
  self->instance.samples = static_cast<VkSampleCountFlagBits>((int32_t)value->NumberValue());
}// loadOp
NAN_GETTER(_VkAttachmentDescription::GetloadOp) {
  _VkAttachmentDescription *self = Nan::ObjectWrap::Unwrap<_VkAttachmentDescription>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.loadOp));
}NAN_SETTER(_VkAttachmentDescription::SetloadOp) {
  _VkAttachmentDescription *self = Nan::ObjectWrap::Unwrap<_VkAttachmentDescription>(info.This());
  self->instance.loadOp = static_cast<VkAttachmentLoadOp>((int32_t)value->NumberValue());
}// storeOp
NAN_GETTER(_VkAttachmentDescription::GetstoreOp) {
  _VkAttachmentDescription *self = Nan::ObjectWrap::Unwrap<_VkAttachmentDescription>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.storeOp));
}NAN_SETTER(_VkAttachmentDescription::SetstoreOp) {
  _VkAttachmentDescription *self = Nan::ObjectWrap::Unwrap<_VkAttachmentDescription>(info.This());
  self->instance.storeOp = static_cast<VkAttachmentStoreOp>((int32_t)value->NumberValue());
}// stencilLoadOp
NAN_GETTER(_VkAttachmentDescription::GetstencilLoadOp) {
  _VkAttachmentDescription *self = Nan::ObjectWrap::Unwrap<_VkAttachmentDescription>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.stencilLoadOp));
}NAN_SETTER(_VkAttachmentDescription::SetstencilLoadOp) {
  _VkAttachmentDescription *self = Nan::ObjectWrap::Unwrap<_VkAttachmentDescription>(info.This());
  self->instance.stencilLoadOp = static_cast<VkAttachmentLoadOp>((int32_t)value->NumberValue());
}// stencilStoreOp
NAN_GETTER(_VkAttachmentDescription::GetstencilStoreOp) {
  _VkAttachmentDescription *self = Nan::ObjectWrap::Unwrap<_VkAttachmentDescription>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.stencilStoreOp));
}NAN_SETTER(_VkAttachmentDescription::SetstencilStoreOp) {
  _VkAttachmentDescription *self = Nan::ObjectWrap::Unwrap<_VkAttachmentDescription>(info.This());
  self->instance.stencilStoreOp = static_cast<VkAttachmentStoreOp>((int32_t)value->NumberValue());
}// initialLayout
NAN_GETTER(_VkAttachmentDescription::GetinitialLayout) {
  _VkAttachmentDescription *self = Nan::ObjectWrap::Unwrap<_VkAttachmentDescription>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.initialLayout));
}NAN_SETTER(_VkAttachmentDescription::SetinitialLayout) {
  _VkAttachmentDescription *self = Nan::ObjectWrap::Unwrap<_VkAttachmentDescription>(info.This());
  self->instance.initialLayout = static_cast<VkImageLayout>((int32_t)value->NumberValue());
}// finalLayout
NAN_GETTER(_VkAttachmentDescription::GetfinalLayout) {
  _VkAttachmentDescription *self = Nan::ObjectWrap::Unwrap<_VkAttachmentDescription>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.finalLayout));
}NAN_SETTER(_VkAttachmentDescription::SetfinalLayout) {
  _VkAttachmentDescription *self = Nan::ObjectWrap::Unwrap<_VkAttachmentDescription>(info.This());
  self->instance.finalLayout = static_cast<VkImageLayout>((int32_t)value->NumberValue());
}