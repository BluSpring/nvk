/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY node-vulkan v0.0.1
 */
#include "utils.h"
#include <string.h>
#include "index.h"
#include "VkPhysicalDeviceProperties.h"

Nan::Persistent<v8::FunctionTemplate> _VkPhysicalDeviceProperties::constructor;

_VkPhysicalDeviceProperties::_VkPhysicalDeviceProperties() {
  
}

_VkPhysicalDeviceProperties::~_VkPhysicalDeviceProperties() {
  //printf("VkPhysicalDeviceProperties deconstructed!!\n");
}

void _VkPhysicalDeviceProperties::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkPhysicalDeviceProperties::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkPhysicalDeviceProperties").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("apiVersion").ToLocalChecked(), GetapiVersion, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("driverVersion").ToLocalChecked(), GetdriverVersion, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("vendorID").ToLocalChecked(), GetvendorID, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("deviceID").ToLocalChecked(), GetdeviceID, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("deviceType").ToLocalChecked(), GetdeviceType, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("deviceName").ToLocalChecked(), GetdeviceName, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("pipelineCacheUUID").ToLocalChecked(), GetpipelineCacheUUID, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("limits").ToLocalChecked(), Getlimits, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("sparseProperties").ToLocalChecked(), GetsparseProperties, nullptr, ctor);
  Nan::Set(target, Nan::New("VkPhysicalDeviceProperties").ToLocalChecked(), ctor->GetFunction());
}

NAN_METHOD(_VkPhysicalDeviceProperties::New) {
  if (info.IsConstructCall()) {
    _VkPhysicalDeviceProperties* self = new _VkPhysicalDeviceProperties();
    self->Wrap(info.Holder());

    if (info[0]->IsObject()) {
      v8::Local<v8::Object> obj = info[0]->ToObject();
      v8::Local<v8::String> sAccess0 = Nan::New("apiVersion").ToLocalChecked();
      v8::Local<v8::String> sAccess1 = Nan::New("driverVersion").ToLocalChecked();
      v8::Local<v8::String> sAccess2 = Nan::New("vendorID").ToLocalChecked();
      v8::Local<v8::String> sAccess3 = Nan::New("deviceID").ToLocalChecked();
      v8::Local<v8::String> sAccess4 = Nan::New("deviceType").ToLocalChecked();
      v8::Local<v8::String> sAccess5 = Nan::New("deviceName").ToLocalChecked();
      v8::Local<v8::String> sAccess6 = Nan::New("pipelineCacheUUID").ToLocalChecked();
      v8::Local<v8::String> sAccess7 = Nan::New("limits").ToLocalChecked();
      v8::Local<v8::String> sAccess8 = Nan::New("sparseProperties").ToLocalChecked();
      if (obj->Has(sAccess0)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess0);
        info.This()->Set(sAccess0, arg);
      }
      if (obj->Has(sAccess1)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess1);
        info.This()->Set(sAccess1, arg);
      }
      if (obj->Has(sAccess2)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess2);
        info.This()->Set(sAccess2, arg);
      }
      if (obj->Has(sAccess3)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess3);
        info.This()->Set(sAccess3, arg);
      }
      if (obj->Has(sAccess4)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess4);
        info.This()->Set(sAccess4, arg);
      }
      if (obj->Has(sAccess5)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess5);
        info.This()->Set(sAccess5, arg);
      }
      if (obj->Has(sAccess6)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess6);
        info.This()->Set(sAccess6, arg);
      }
      if (obj->Has(sAccess7)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess7);
        info.This()->Set(sAccess7, arg);
      }
      if (obj->Has(sAccess8)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess8);
        info.This()->Set(sAccess8, arg);
      }
      }

    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkPhysicalDeviceProperties constructor cannot be invoked without 'new'");
  }
};

// apiVersion
NAN_GETTER(_VkPhysicalDeviceProperties::GetapiVersion) {
  _VkPhysicalDeviceProperties *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceProperties>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.apiVersion));
}// driverVersion
NAN_GETTER(_VkPhysicalDeviceProperties::GetdriverVersion) {
  _VkPhysicalDeviceProperties *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceProperties>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.driverVersion));
}// vendorID
NAN_GETTER(_VkPhysicalDeviceProperties::GetvendorID) {
  _VkPhysicalDeviceProperties *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceProperties>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.vendorID));
}// deviceID
NAN_GETTER(_VkPhysicalDeviceProperties::GetdeviceID) {
  _VkPhysicalDeviceProperties *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceProperties>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.deviceID));
}// deviceType
NAN_GETTER(_VkPhysicalDeviceProperties::GetdeviceType) {
  _VkPhysicalDeviceProperties *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceProperties>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.deviceType));
}// deviceName
NAN_GETTER(_VkPhysicalDeviceProperties::GetdeviceName) {
  _VkPhysicalDeviceProperties *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceProperties>(info.This());
  if (self->deviceName.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    info.GetReturnValue().Set(Nan::New(self->deviceName));
  }
}// pipelineCacheUUID
NAN_GETTER(_VkPhysicalDeviceProperties::GetpipelineCacheUUID) {
  _VkPhysicalDeviceProperties *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceProperties>(info.This());
  if (self->pipelineCacheUUID.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    info.GetReturnValue().Set(Nan::New(self->pipelineCacheUUID));
  }
}// limits
NAN_GETTER(_VkPhysicalDeviceProperties::Getlimits) {
  _VkPhysicalDeviceProperties *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceProperties>(info.This());
  if (self->limits.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->limits);
    info.GetReturnValue().Set(obj);
  }
}// sparseProperties
NAN_GETTER(_VkPhysicalDeviceProperties::GetsparseProperties) {
  _VkPhysicalDeviceProperties *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceProperties>(info.This());
  if (self->sparseProperties.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->sparseProperties);
    info.GetReturnValue().Set(obj);
  }
}