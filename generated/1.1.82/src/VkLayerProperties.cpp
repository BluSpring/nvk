/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY node-vulkan v0.0.1
 */
#include "utils.h"
#include <string.h>
#include "index.h"
#include "VkLayerProperties.h"

Nan::Persistent<v8::FunctionTemplate> _VkLayerProperties::constructor;

_VkLayerProperties::_VkLayerProperties() {
  
}

_VkLayerProperties::~_VkLayerProperties() {
  //printf("VkLayerProperties deconstructed!!\n");
}

void _VkLayerProperties::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkLayerProperties::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkLayerProperties").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("layerName").ToLocalChecked(), GetlayerName, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("specVersion").ToLocalChecked(), GetspecVersion, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("implementationVersion").ToLocalChecked(), GetimplementationVersion, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("description").ToLocalChecked(), Getdescription, nullptr, ctor);
  Nan::Set(target, Nan::New("VkLayerProperties").ToLocalChecked(), ctor->GetFunction());
}

NAN_METHOD(_VkLayerProperties::New) {
  if (info.IsConstructCall()) {
    _VkLayerProperties* self = new _VkLayerProperties();
    self->Wrap(info.Holder());

    if (info[0]->IsObject()) {
      v8::Local<v8::Object> obj = info[0]->ToObject();
      v8::Local<v8::String> sAccess0 = Nan::New("layerName").ToLocalChecked();
      v8::Local<v8::String> sAccess1 = Nan::New("specVersion").ToLocalChecked();
      v8::Local<v8::String> sAccess2 = Nan::New("implementationVersion").ToLocalChecked();
      v8::Local<v8::String> sAccess3 = Nan::New("description").ToLocalChecked();
      if (obj->Has(sAccess0)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess0);
        info.This()->Set(sAccess0, arg);
      }
      if (obj->Has(sAccess1)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess1);
        info.This()->Set(sAccess1, arg);
      }
      if (obj->Has(sAccess2)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess2);
        info.This()->Set(sAccess2, arg);
      }
      if (obj->Has(sAccess3)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess3);
        info.This()->Set(sAccess3, arg);
      }
      }

    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkLayerProperties constructor cannot be invoked without 'new'");
  }
};

// layerName
NAN_GETTER(_VkLayerProperties::GetlayerName) {
  _VkLayerProperties *self = Nan::ObjectWrap::Unwrap<_VkLayerProperties>(info.This());
  if (self->layerName.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    info.GetReturnValue().Set(Nan::New(self->layerName));
  }
}// specVersion
NAN_GETTER(_VkLayerProperties::GetspecVersion) {
  _VkLayerProperties *self = Nan::ObjectWrap::Unwrap<_VkLayerProperties>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.specVersion));
}// implementationVersion
NAN_GETTER(_VkLayerProperties::GetimplementationVersion) {
  _VkLayerProperties *self = Nan::ObjectWrap::Unwrap<_VkLayerProperties>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.implementationVersion));
}// description
NAN_GETTER(_VkLayerProperties::Getdescription) {
  _VkLayerProperties *self = Nan::ObjectWrap::Unwrap<_VkLayerProperties>(info.This());
  if (self->description.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    info.GetReturnValue().Set(Nan::New(self->description));
  }
}