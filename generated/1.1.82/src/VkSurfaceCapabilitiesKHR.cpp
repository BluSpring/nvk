/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY node-vulkan v0.0.1
 */
#include "utils.h"
#include "index.h"
#include "VkSurfaceCapabilitiesKHR.h"

Nan::Persistent<v8::FunctionTemplate> _VkSurfaceCapabilitiesKHR::constructor;

_VkSurfaceCapabilitiesKHR::_VkSurfaceCapabilitiesKHR() {
  
}

_VkSurfaceCapabilitiesKHR::~_VkSurfaceCapabilitiesKHR() {
  //printf("VkSurfaceCapabilitiesKHR deconstructed!!\n");
}

void _VkSurfaceCapabilitiesKHR::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkSurfaceCapabilitiesKHR::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkSurfaceCapabilitiesKHR").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("minImageCount").ToLocalChecked(), GetminImageCount, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxImageCount").ToLocalChecked(), GetmaxImageCount, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("currentExtent").ToLocalChecked(), GetcurrentExtent, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("minImageExtent").ToLocalChecked(), GetminImageExtent, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxImageExtent").ToLocalChecked(), GetmaxImageExtent, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxImageArrayLayers").ToLocalChecked(), GetmaxImageArrayLayers, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("supportedTransforms").ToLocalChecked(), GetsupportedTransforms, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("currentTransform").ToLocalChecked(), GetcurrentTransform, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("supportedCompositeAlpha").ToLocalChecked(), GetsupportedCompositeAlpha, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("supportedUsageFlags").ToLocalChecked(), GetsupportedUsageFlags, nullptr, ctor);
  Nan::Set(target, Nan::New("VkSurfaceCapabilitiesKHR").ToLocalChecked(), ctor->GetFunction());
}

NAN_METHOD(_VkSurfaceCapabilitiesKHR::New) {
  if (info.IsConstructCall()) {
    _VkSurfaceCapabilitiesKHR* self = new _VkSurfaceCapabilitiesKHR();
    self->Wrap(info.Holder());

    if (info[0]->IsObject()) {
      v8::Local<v8::Object> obj = info[0]->ToObject();
      v8::Local<v8::String> sAccess0 = Nan::New("minImageCount").ToLocalChecked();
      v8::Local<v8::String> sAccess1 = Nan::New("maxImageCount").ToLocalChecked();
      v8::Local<v8::String> sAccess2 = Nan::New("currentExtent").ToLocalChecked();
      v8::Local<v8::String> sAccess3 = Nan::New("minImageExtent").ToLocalChecked();
      v8::Local<v8::String> sAccess4 = Nan::New("maxImageExtent").ToLocalChecked();
      v8::Local<v8::String> sAccess5 = Nan::New("maxImageArrayLayers").ToLocalChecked();
      v8::Local<v8::String> sAccess6 = Nan::New("supportedTransforms").ToLocalChecked();
      v8::Local<v8::String> sAccess7 = Nan::New("currentTransform").ToLocalChecked();
      v8::Local<v8::String> sAccess8 = Nan::New("supportedCompositeAlpha").ToLocalChecked();
      v8::Local<v8::String> sAccess9 = Nan::New("supportedUsageFlags").ToLocalChecked();
      if (obj->Has(sAccess0)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess0);
        info.This()->Set(sAccess0, arg);
      }
      if (obj->Has(sAccess1)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess1);
        info.This()->Set(sAccess1, arg);
      }
      if (obj->Has(sAccess2)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess2);
        info.This()->Set(sAccess2, arg);
      }
      if (obj->Has(sAccess3)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess3);
        info.This()->Set(sAccess3, arg);
      }
      if (obj->Has(sAccess4)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess4);
        info.This()->Set(sAccess4, arg);
      }
      if (obj->Has(sAccess5)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess5);
        info.This()->Set(sAccess5, arg);
      }
      if (obj->Has(sAccess6)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess6);
        info.This()->Set(sAccess6, arg);
      }
      if (obj->Has(sAccess7)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess7);
        info.This()->Set(sAccess7, arg);
      }
      if (obj->Has(sAccess8)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess8);
        info.This()->Set(sAccess8, arg);
      }
      if (obj->Has(sAccess9)) {
       v8::Local<v8::Value> arg = obj->Get(sAccess9);
        info.This()->Set(sAccess9, arg);
      }
      }

    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkSurfaceCapabilitiesKHR constructor cannot be invoked without 'new'");
  }
};

// minImageCount
NAN_GETTER(_VkSurfaceCapabilitiesKHR::GetminImageCount) {
  _VkSurfaceCapabilitiesKHR *self = Nan::ObjectWrap::Unwrap<_VkSurfaceCapabilitiesKHR>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.minImageCount));
}// maxImageCount
NAN_GETTER(_VkSurfaceCapabilitiesKHR::GetmaxImageCount) {
  _VkSurfaceCapabilitiesKHR *self = Nan::ObjectWrap::Unwrap<_VkSurfaceCapabilitiesKHR>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxImageCount));
}// currentExtent
NAN_GETTER(_VkSurfaceCapabilitiesKHR::GetcurrentExtent) {
  _VkSurfaceCapabilitiesKHR *self = Nan::ObjectWrap::Unwrap<_VkSurfaceCapabilitiesKHR>(info.This());
  if (self->currentExtent.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->currentExtent);
    info.GetReturnValue().Set(obj);
  }
}// minImageExtent
NAN_GETTER(_VkSurfaceCapabilitiesKHR::GetminImageExtent) {
  _VkSurfaceCapabilitiesKHR *self = Nan::ObjectWrap::Unwrap<_VkSurfaceCapabilitiesKHR>(info.This());
  if (self->minImageExtent.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->minImageExtent);
    info.GetReturnValue().Set(obj);
  }
}// maxImageExtent
NAN_GETTER(_VkSurfaceCapabilitiesKHR::GetmaxImageExtent) {
  _VkSurfaceCapabilitiesKHR *self = Nan::ObjectWrap::Unwrap<_VkSurfaceCapabilitiesKHR>(info.This());
  if (self->maxImageExtent.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->maxImageExtent);
    info.GetReturnValue().Set(obj);
  }
}// maxImageArrayLayers
NAN_GETTER(_VkSurfaceCapabilitiesKHR::GetmaxImageArrayLayers) {
  _VkSurfaceCapabilitiesKHR *self = Nan::ObjectWrap::Unwrap<_VkSurfaceCapabilitiesKHR>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxImageArrayLayers));
}// supportedTransforms
NAN_GETTER(_VkSurfaceCapabilitiesKHR::GetsupportedTransforms) {
  _VkSurfaceCapabilitiesKHR *self = Nan::ObjectWrap::Unwrap<_VkSurfaceCapabilitiesKHR>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.supportedTransforms));
}// currentTransform
NAN_GETTER(_VkSurfaceCapabilitiesKHR::GetcurrentTransform) {
  _VkSurfaceCapabilitiesKHR *self = Nan::ObjectWrap::Unwrap<_VkSurfaceCapabilitiesKHR>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.currentTransform));
}// supportedCompositeAlpha
NAN_GETTER(_VkSurfaceCapabilitiesKHR::GetsupportedCompositeAlpha) {
  _VkSurfaceCapabilitiesKHR *self = Nan::ObjectWrap::Unwrap<_VkSurfaceCapabilitiesKHR>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.supportedCompositeAlpha));
}// supportedUsageFlags
NAN_GETTER(_VkSurfaceCapabilitiesKHR::GetsupportedUsageFlags) {
  _VkSurfaceCapabilitiesKHR *self = Nan::ObjectWrap::Unwrap<_VkSurfaceCapabilitiesKHR>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.supportedUsageFlags));
}