/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY node-vulkan v0.0.1
 */
#include "utils.h"
#include "index.h"
#include "VkSemaphoreCreateInfo.h"

Nan::Persistent<v8::FunctionTemplate> _VkSemaphoreCreateInfo::constructor;

_VkSemaphoreCreateInfo::_VkSemaphoreCreateInfo() {
  instance.sType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO;
}

_VkSemaphoreCreateInfo::~_VkSemaphoreCreateInfo() {
  //printf("VkSemaphoreCreateInfo deconstructed!!\n");
}

void _VkSemaphoreCreateInfo::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkSemaphoreCreateInfo::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkSemaphoreCreateInfo").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("sType").ToLocalChecked(), GetsType, SetsType, ctor);
  SetPrototypeAccessor(proto, Nan::New("flags").ToLocalChecked(), Getflags, Setflags, ctor);
  Nan::Set(target, Nan::New("VkSemaphoreCreateInfo").ToLocalChecked(), ctor->GetFunction());
}

NAN_METHOD(_VkSemaphoreCreateInfo::New) {
  if (info.IsConstructCall()) {
    _VkSemaphoreCreateInfo* self = new _VkSemaphoreCreateInfo();
    self->Wrap(info.Holder());
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkSemaphoreCreateInfo constructor cannot be invoked without 'new'");
  }
};

// sType
NAN_GETTER(_VkSemaphoreCreateInfo::GetsType) {
  _VkSemaphoreCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkSemaphoreCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sType));
}NAN_SETTER(_VkSemaphoreCreateInfo::SetsType) {
  _VkSemaphoreCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkSemaphoreCreateInfo>(info.This());
  self->instance.sType = static_cast<VkStructureType>((int32_t)value->NumberValue());
}// flags
NAN_GETTER(_VkSemaphoreCreateInfo::Getflags) {
  _VkSemaphoreCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkSemaphoreCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.flags));
}NAN_SETTER(_VkSemaphoreCreateInfo::Setflags) {
  _VkSemaphoreCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkSemaphoreCreateInfo>(info.This());
  self->instance.flags = static_cast<VkSemaphoreCreateFlags>((int32_t)value->NumberValue());
}