/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY nvk v0.1.5
 */
#include "utils.h"
#include "index.h"
#include "VkDescriptorImageInfo.h"

Nan::Persistent<v8::FunctionTemplate> _VkDescriptorImageInfo::constructor;

_VkDescriptorImageInfo::_VkDescriptorImageInfo() {
  
  
}

_VkDescriptorImageInfo::~_VkDescriptorImageInfo() {
  //printf("VkDescriptorImageInfo deconstructed!!\n");
  
  
  
  
}

void _VkDescriptorImageInfo::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkDescriptorImageInfo::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkDescriptorImageInfo").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("sampler").ToLocalChecked(), Getsampler, Setsampler, ctor);
  SetPrototypeAccessor(proto, Nan::New("imageView").ToLocalChecked(), GetimageView, SetimageView, ctor);
  SetPrototypeAccessor(proto, Nan::New("imageLayout").ToLocalChecked(), GetimageLayout, SetimageLayout, ctor);
  Nan::Set(target, Nan::New("VkDescriptorImageInfo").ToLocalChecked(), ctor->GetFunction());
}

bool _VkDescriptorImageInfo::flush() {
  _VkDescriptorImageInfo *self = this;
  
  return true;
}

NAN_METHOD(_VkDescriptorImageInfo::New) {
  if (info.IsConstructCall()) {
    _VkDescriptorImageInfo* self = new _VkDescriptorImageInfo();
    self->Wrap(info.Holder());
    
    if (info[0]->IsObject()) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(info[0]).ToLocalChecked();
      v8::Local<v8::String> sAccess0 = Nan::New("sampler").ToLocalChecked();
      v8::Local<v8::String> sAccess1 = Nan::New("imageView").ToLocalChecked();
      v8::Local<v8::String> sAccess2 = Nan::New("imageLayout").ToLocalChecked();
      if (obj->Has(sAccess0)) info.This()->Set(sAccess0, obj->Get(sAccess0));
      if (obj->Has(sAccess1)) info.This()->Set(sAccess1, obj->Get(sAccess1));
      if (obj->Has(sAccess2)) info.This()->Set(sAccess2, obj->Get(sAccess2));
      
    }
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkDescriptorImageInfo constructor cannot be invoked without 'new'");
  }
};

// sampler
NAN_GETTER(_VkDescriptorImageInfo::Getsampler) {
  _VkDescriptorImageInfo *self = Nan::ObjectWrap::Unwrap<_VkDescriptorImageInfo>(info.This());
  if (self->sampler.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->sampler);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkDescriptorImageInfo::Setsampler) {
  _VkDescriptorImageInfo *self = Nan::ObjectWrap::Unwrap<_VkDescriptorImageInfo>(info.This());
  // js
  if (!value->IsNull()) {
    v8::Local<v8::Object> obj = Nan::To<v8::Object>(value).ToLocalChecked();
    if (Nan::New(_VkSampler::constructor)->HasInstance(obj)) {
      self->sampler.Reset<v8::Object>(value.As<v8::Object>());
      _VkSampler* inst = Nan::ObjectWrap::Unwrap<_VkSampler>(obj);
      ;
      self->instance.sampler = inst->instance;
    } else {
      
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkSampler]' for 'VkDescriptorImageInfo.sampler' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
      return;
    }
  } else if (value->IsNull()) {
    self->sampler.Reset();
    self->instance.sampler = VK_NULL_HANDLE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkSampler]' for 'VkDescriptorImageInfo.sampler' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// imageView
NAN_GETTER(_VkDescriptorImageInfo::GetimageView) {
  _VkDescriptorImageInfo *self = Nan::ObjectWrap::Unwrap<_VkDescriptorImageInfo>(info.This());
  if (self->imageView.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->imageView);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkDescriptorImageInfo::SetimageView) {
  _VkDescriptorImageInfo *self = Nan::ObjectWrap::Unwrap<_VkDescriptorImageInfo>(info.This());
  // js
  if (!value->IsNull()) {
    v8::Local<v8::Object> obj = Nan::To<v8::Object>(value).ToLocalChecked();
    if (Nan::New(_VkImageView::constructor)->HasInstance(obj)) {
      self->imageView.Reset<v8::Object>(value.As<v8::Object>());
      _VkImageView* inst = Nan::ObjectWrap::Unwrap<_VkImageView>(obj);
      ;
      self->instance.imageView = inst->instance;
    } else {
      
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkImageView]' for 'VkDescriptorImageInfo.imageView' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
      return;
    }
  } else if (value->IsNull()) {
    self->imageView.Reset();
    self->instance.imageView = VK_NULL_HANDLE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkImageView]' for 'VkDescriptorImageInfo.imageView' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// imageLayout
NAN_GETTER(_VkDescriptorImageInfo::GetimageLayout) {
  _VkDescriptorImageInfo *self = Nan::ObjectWrap::Unwrap<_VkDescriptorImageInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.imageLayout));
}NAN_SETTER(_VkDescriptorImageInfo::SetimageLayout) {
  _VkDescriptorImageInfo *self = Nan::ObjectWrap::Unwrap<_VkDescriptorImageInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.imageLayout = static_cast<VkImageLayout>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkDescriptorImageInfo.imageLayout' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}