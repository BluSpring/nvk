/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY nvk v0.1.5
 */
#include "utils.h"
#include "index.h"
#include "VkSparseImageMemoryBind.h"

Nan::Persistent<v8::FunctionTemplate> _VkSparseImageMemoryBind::constructor;

_VkSparseImageMemoryBind::_VkSparseImageMemoryBind() {
  
  
}

_VkSparseImageMemoryBind::~_VkSparseImageMemoryBind() {
  //printf("VkSparseImageMemoryBind deconstructed!!\n");
  
  
  
  
  
  
  
}

void _VkSparseImageMemoryBind::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkSparseImageMemoryBind::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkSparseImageMemoryBind").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("subresource").ToLocalChecked(), Getsubresource, Setsubresource, ctor);
  SetPrototypeAccessor(proto, Nan::New("offset").ToLocalChecked(), Getoffset, Setoffset, ctor);
  SetPrototypeAccessor(proto, Nan::New("extent").ToLocalChecked(), Getextent, Setextent, ctor);
  SetPrototypeAccessor(proto, Nan::New("memory").ToLocalChecked(), Getmemory, Setmemory, ctor);
  SetPrototypeAccessor(proto, Nan::New("memoryOffset").ToLocalChecked(), GetmemoryOffset, SetmemoryOffset, ctor);
  SetPrototypeAccessor(proto, Nan::New("flags").ToLocalChecked(), Getflags, Setflags, ctor);
  Nan::Set(target, Nan::New("VkSparseImageMemoryBind").ToLocalChecked(), ctor->GetFunction());
}

bool _VkSparseImageMemoryBind::flush() {
  _VkSparseImageMemoryBind *self = this;
  if (!(self->subresource.IsEmpty())) {
    v8::Local<v8::Value> value = Nan::New(self->subresource);
    
    _VkImageSubresource* result = Nan::ObjectWrap::Unwrap<_VkImageSubresource>(Nan::To<v8::Object>(value).ToLocalChecked());
    if (!result->flush()) return false;
    self->instance.subresource = result->instance;
  }if (!(self->offset.IsEmpty())) {
    v8::Local<v8::Value> value = Nan::New(self->offset);
    
    _VkOffset3D* result = Nan::ObjectWrap::Unwrap<_VkOffset3D>(Nan::To<v8::Object>(value).ToLocalChecked());
    if (!result->flush()) return false;
    self->instance.offset = result->instance;
  }if (!(self->extent.IsEmpty())) {
    v8::Local<v8::Value> value = Nan::New(self->extent);
    
    _VkExtent3D* result = Nan::ObjectWrap::Unwrap<_VkExtent3D>(Nan::To<v8::Object>(value).ToLocalChecked());
    if (!result->flush()) return false;
    self->instance.extent = result->instance;
  }
  return true;
}

NAN_METHOD(_VkSparseImageMemoryBind::New) {
  if (info.IsConstructCall()) {
    _VkSparseImageMemoryBind* self = new _VkSparseImageMemoryBind();
    self->Wrap(info.Holder());
    
    if (info[0]->IsObject()) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(info[0]).ToLocalChecked();
      v8::Local<v8::String> sAccess0 = Nan::New("subresource").ToLocalChecked();
      v8::Local<v8::String> sAccess1 = Nan::New("offset").ToLocalChecked();
      v8::Local<v8::String> sAccess2 = Nan::New("extent").ToLocalChecked();
      v8::Local<v8::String> sAccess3 = Nan::New("memory").ToLocalChecked();
      v8::Local<v8::String> sAccess4 = Nan::New("memoryOffset").ToLocalChecked();
      v8::Local<v8::String> sAccess5 = Nan::New("flags").ToLocalChecked();
      if (obj->Has(sAccess0)) info.This()->Set(sAccess0, obj->Get(sAccess0));
      if (obj->Has(sAccess1)) info.This()->Set(sAccess1, obj->Get(sAccess1));
      if (obj->Has(sAccess2)) info.This()->Set(sAccess2, obj->Get(sAccess2));
      if (obj->Has(sAccess3)) info.This()->Set(sAccess3, obj->Get(sAccess3));
      if (obj->Has(sAccess4)) info.This()->Set(sAccess4, obj->Get(sAccess4));
      if (obj->Has(sAccess5)) info.This()->Set(sAccess5, obj->Get(sAccess5));
      
    }
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkSparseImageMemoryBind constructor cannot be invoked without 'new'");
  }
};

// subresource
NAN_GETTER(_VkSparseImageMemoryBind::Getsubresource) {
  _VkSparseImageMemoryBind *self = Nan::ObjectWrap::Unwrap<_VkSparseImageMemoryBind>(info.This());
  if (self->subresource.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->subresource);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkSparseImageMemoryBind::Setsubresource) {
  _VkSparseImageMemoryBind *self = Nan::ObjectWrap::Unwrap<_VkSparseImageMemoryBind>(info.This());
  // js
  if (!value->IsNull()) {
    v8::Local<v8::Object> obj = Nan::To<v8::Object>(value).ToLocalChecked();
    if (Nan::New(_VkImageSubresource::constructor)->HasInstance(obj)) {
      self->subresource.Reset<v8::Object>(value.As<v8::Object>());
      _VkImageSubresource* inst = Nan::ObjectWrap::Unwrap<_VkImageSubresource>(obj);
      inst->flush();
      self->instance.subresource = inst->instance;
    } else {
      
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkImageSubresource]' for 'VkSparseImageMemoryBind.subresource' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
      return;
    }
  } else if (value->IsNull()) {
    self->subresource.Reset();
    memset(&self->instance.subresource, 0, sizeof(VkImageSubresource));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkImageSubresource]' for 'VkSparseImageMemoryBind.subresource' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// offset
NAN_GETTER(_VkSparseImageMemoryBind::Getoffset) {
  _VkSparseImageMemoryBind *self = Nan::ObjectWrap::Unwrap<_VkSparseImageMemoryBind>(info.This());
  if (self->offset.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->offset);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkSparseImageMemoryBind::Setoffset) {
  _VkSparseImageMemoryBind *self = Nan::ObjectWrap::Unwrap<_VkSparseImageMemoryBind>(info.This());
  // js
  if (!value->IsNull()) {
    v8::Local<v8::Object> obj = Nan::To<v8::Object>(value).ToLocalChecked();
    if (Nan::New(_VkOffset3D::constructor)->HasInstance(obj)) {
      self->offset.Reset<v8::Object>(value.As<v8::Object>());
      _VkOffset3D* inst = Nan::ObjectWrap::Unwrap<_VkOffset3D>(obj);
      inst->flush();
      self->instance.offset = inst->instance;
    } else {
      
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkOffset3D]' for 'VkSparseImageMemoryBind.offset' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
      return;
    }
  } else if (value->IsNull()) {
    self->offset.Reset();
    memset(&self->instance.offset, 0, sizeof(VkOffset3D));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkOffset3D]' for 'VkSparseImageMemoryBind.offset' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// extent
NAN_GETTER(_VkSparseImageMemoryBind::Getextent) {
  _VkSparseImageMemoryBind *self = Nan::ObjectWrap::Unwrap<_VkSparseImageMemoryBind>(info.This());
  if (self->extent.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->extent);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkSparseImageMemoryBind::Setextent) {
  _VkSparseImageMemoryBind *self = Nan::ObjectWrap::Unwrap<_VkSparseImageMemoryBind>(info.This());
  // js
  if (!value->IsNull()) {
    v8::Local<v8::Object> obj = Nan::To<v8::Object>(value).ToLocalChecked();
    if (Nan::New(_VkExtent3D::constructor)->HasInstance(obj)) {
      self->extent.Reset<v8::Object>(value.As<v8::Object>());
      _VkExtent3D* inst = Nan::ObjectWrap::Unwrap<_VkExtent3D>(obj);
      inst->flush();
      self->instance.extent = inst->instance;
    } else {
      
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkExtent3D]' for 'VkSparseImageMemoryBind.extent' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
      return;
    }
  } else if (value->IsNull()) {
    self->extent.Reset();
    memset(&self->instance.extent, 0, sizeof(VkExtent3D));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkExtent3D]' for 'VkSparseImageMemoryBind.extent' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// memory
NAN_GETTER(_VkSparseImageMemoryBind::Getmemory) {
  _VkSparseImageMemoryBind *self = Nan::ObjectWrap::Unwrap<_VkSparseImageMemoryBind>(info.This());
  if (self->memory.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->memory);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkSparseImageMemoryBind::Setmemory) {
  _VkSparseImageMemoryBind *self = Nan::ObjectWrap::Unwrap<_VkSparseImageMemoryBind>(info.This());
  // js
  if (!value->IsNull()) {
    v8::Local<v8::Object> obj = Nan::To<v8::Object>(value).ToLocalChecked();
    if (Nan::New(_VkDeviceMemory::constructor)->HasInstance(obj)) {
      self->memory.Reset<v8::Object>(value.As<v8::Object>());
      _VkDeviceMemory* inst = Nan::ObjectWrap::Unwrap<_VkDeviceMemory>(obj);
      ;
      self->instance.memory = inst->instance;
    } else {
      
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkDeviceMemory]' for 'VkSparseImageMemoryBind.memory' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
      return;
    }
  } else if (value->IsNull()) {
    self->memory.Reset();
    self->instance.memory = VK_NULL_HANDLE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkDeviceMemory]' for 'VkSparseImageMemoryBind.memory' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// memoryOffset
NAN_GETTER(_VkSparseImageMemoryBind::GetmemoryOffset) {
  _VkSparseImageMemoryBind *self = Nan::ObjectWrap::Unwrap<_VkSparseImageMemoryBind>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.memoryOffset));
}NAN_SETTER(_VkSparseImageMemoryBind::SetmemoryOffset) {
  _VkSparseImageMemoryBind *self = Nan::ObjectWrap::Unwrap<_VkSparseImageMemoryBind>(info.This());
  if (value->IsNumber()) {
    self->instance.memoryOffset = static_cast<uint64_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkSparseImageMemoryBind.memoryOffset' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// flags
NAN_GETTER(_VkSparseImageMemoryBind::Getflags) {
  _VkSparseImageMemoryBind *self = Nan::ObjectWrap::Unwrap<_VkSparseImageMemoryBind>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.flags));
}NAN_SETTER(_VkSparseImageMemoryBind::Setflags) {
  _VkSparseImageMemoryBind *self = Nan::ObjectWrap::Unwrap<_VkSparseImageMemoryBind>(info.This());
  if (value->IsNumber()) {
    self->instance.flags = static_cast<VkSparseMemoryBindFlags>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkSparseImageMemoryBind.flags' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}