/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY nvk v0.1.4
 */
#include "utils.h"
#include "index.h"
#include "VkDrmFormatModifierPropertiesListEXT.h"

Nan::Persistent<v8::FunctionTemplate> _VkDrmFormatModifierPropertiesListEXT::constructor;

_VkDrmFormatModifierPropertiesListEXT::_VkDrmFormatModifierPropertiesListEXT() {
  instance.sType = VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT;
  vpDrmFormatModifierProperties = new std::vector<VkDrmFormatModifierPropertiesEXT>;
  
}

_VkDrmFormatModifierPropertiesListEXT::~_VkDrmFormatModifierPropertiesListEXT() {
  //printf("VkDrmFormatModifierPropertiesListEXT deconstructed!!\n");
  
  
  
  vpDrmFormatModifierProperties->clear();
  delete vpDrmFormatModifierProperties;
  
  pDrmFormatModifierProperties.Reset();
  
}

void _VkDrmFormatModifierPropertiesListEXT::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkDrmFormatModifierPropertiesListEXT::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkDrmFormatModifierPropertiesListEXT").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("sType").ToLocalChecked(), GetsType, SetsType, ctor);
  SetPrototypeAccessor(proto, Nan::New("drmFormatModifierCount").ToLocalChecked(), GetdrmFormatModifierCount, SetdrmFormatModifierCount, ctor);
  SetPrototypeAccessor(proto, Nan::New("pDrmFormatModifierProperties").ToLocalChecked(), GetpDrmFormatModifierProperties, SetpDrmFormatModifierProperties, ctor);
  Nan::Set(target, Nan::New("VkDrmFormatModifierPropertiesListEXT").ToLocalChecked(), ctor->GetFunction());
}

bool _VkDrmFormatModifierPropertiesListEXT::flush() {
  _VkDrmFormatModifierPropertiesListEXT *self = this;
  if (!(self->pDrmFormatModifierProperties.IsEmpty())) {
    v8::Local<v8::Value> value = Nan::New(self->pDrmFormatModifierProperties);
    
    v8::Local<v8::Array> array = v8::Local<v8::Array>::Cast(value);
    // validate length
    if (array->Length() != self->instance.drmFormatModifierCount) {
      Nan::ThrowRangeError("Invalid array length, expected array length of 'drmFormatModifierCount' for 'VkDrmFormatModifierPropertiesListEXT.pDrmFormatModifierProperties'");
      return false;
    }
    std::vector<VkDrmFormatModifierPropertiesEXT>* data = self->vpDrmFormatModifierProperties;
    data->clear();
    for (unsigned int ii = 0; ii < array->Length(); ++ii) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(Nan::Get(array, ii).ToLocalChecked()).ToLocalChecked();
      if (!(Nan::New(_VkDrmFormatModifierPropertiesEXT::constructor)->HasInstance(obj))) {
        
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkDrmFormatModifierPropertiesEXT]' for 'VkDrmFormatModifierPropertiesListEXT.pDrmFormatModifierProperties' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
        return false;
      }
      _VkDrmFormatModifierPropertiesEXT* result = Nan::ObjectWrap::Unwrap<_VkDrmFormatModifierPropertiesEXT>(obj);
      if (!result->flush()) return false;
      data->push_back(result->instance);
    };
    self->instance.pDrmFormatModifierProperties = data->data();
  }
  return true;
}

NAN_METHOD(_VkDrmFormatModifierPropertiesListEXT::New) {
  if (info.IsConstructCall()) {
    _VkDrmFormatModifierPropertiesListEXT* self = new _VkDrmFormatModifierPropertiesListEXT();
    self->Wrap(info.Holder());
    
    if (info[0]->IsObject()) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(info[0]).ToLocalChecked();
      v8::Local<v8::String> sAccess0 = Nan::New("sType").ToLocalChecked();
      v8::Local<v8::String> sAccess2 = Nan::New("drmFormatModifierCount").ToLocalChecked();
      v8::Local<v8::String> sAccess3 = Nan::New("pDrmFormatModifierProperties").ToLocalChecked();
      if (obj->Has(sAccess0)) info.This()->Set(sAccess0, obj->Get(sAccess0));
      if (obj->Has(sAccess2)) info.This()->Set(sAccess2, obj->Get(sAccess2));
      if (obj->Has(sAccess3)) info.This()->Set(sAccess3, obj->Get(sAccess3));
      
    }
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkDrmFormatModifierPropertiesListEXT constructor cannot be invoked without 'new'");
  }
};

// sType
NAN_GETTER(_VkDrmFormatModifierPropertiesListEXT::GetsType) {
  _VkDrmFormatModifierPropertiesListEXT *self = Nan::ObjectWrap::Unwrap<_VkDrmFormatModifierPropertiesListEXT>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sType));
}NAN_SETTER(_VkDrmFormatModifierPropertiesListEXT::SetsType) {
  _VkDrmFormatModifierPropertiesListEXT *self = Nan::ObjectWrap::Unwrap<_VkDrmFormatModifierPropertiesListEXT>(info.This());
  if (value->IsNumber()) {
    self->instance.sType = static_cast<VkStructureType>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkDrmFormatModifierPropertiesListEXT.sType' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// drmFormatModifierCount
NAN_GETTER(_VkDrmFormatModifierPropertiesListEXT::GetdrmFormatModifierCount) {
  _VkDrmFormatModifierPropertiesListEXT *self = Nan::ObjectWrap::Unwrap<_VkDrmFormatModifierPropertiesListEXT>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.drmFormatModifierCount));
}NAN_SETTER(_VkDrmFormatModifierPropertiesListEXT::SetdrmFormatModifierCount) {
  _VkDrmFormatModifierPropertiesListEXT *self = Nan::ObjectWrap::Unwrap<_VkDrmFormatModifierPropertiesListEXT>(info.This());
  if (value->IsNumber()) {
    self->instance.drmFormatModifierCount = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkDrmFormatModifierPropertiesListEXT.drmFormatModifierCount' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// pDrmFormatModifierProperties
NAN_GETTER(_VkDrmFormatModifierPropertiesListEXT::GetpDrmFormatModifierProperties) {
  _VkDrmFormatModifierPropertiesListEXT *self = Nan::ObjectWrap::Unwrap<_VkDrmFormatModifierPropertiesListEXT>(info.This());
  if (self->pDrmFormatModifierProperties.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->pDrmFormatModifierProperties);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkDrmFormatModifierPropertiesListEXT::SetpDrmFormatModifierProperties) {
  _VkDrmFormatModifierPropertiesListEXT *self = Nan::ObjectWrap::Unwrap<_VkDrmFormatModifierPropertiesListEXT>(info.This());
  
    // js
    if (value->IsArray()) {
      self->pDrmFormatModifierProperties.Reset<v8::Array>(value.As<v8::Array>());
    } else if (value->IsNull()) {
      self->pDrmFormatModifierProperties.Reset();
      self->instance.pDrmFormatModifierProperties = nullptr;
    } else {
      
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkDrmFormatModifierPropertiesEXT]' for 'VkDrmFormatModifierPropertiesListEXT.pDrmFormatModifierProperties' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
      return;
    }
  
  // vulkan
  if (value->IsArray()) {
    
  } else if (value->IsNull()) {
    self->instance.pDrmFormatModifierProperties = nullptr;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkDrmFormatModifierPropertiesEXT]' for 'VkDrmFormatModifierPropertiesListEXT.pDrmFormatModifierProperties' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}