/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY node-vulkan v0.1.0
 */
#include "utils.h"
#include "index.h"
#include "VkRayTracingPipelineCreateInfoNV.h"

Nan::Persistent<v8::FunctionTemplate> _VkRayTracingPipelineCreateInfoNV::constructor;

_VkRayTracingPipelineCreateInfoNV::_VkRayTracingPipelineCreateInfoNV() {
  instance.sType = VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV;
  vpStages = new std::vector<VkPipelineShaderStageCreateInfo>;
  vpGroups = new std::vector<VkRayTracingShaderGroupCreateInfoNV>;
  
}

_VkRayTracingPipelineCreateInfoNV::~_VkRayTracingPipelineCreateInfoNV() {
  //printf("VkRayTracingPipelineCreateInfoNV deconstructed!!\n");
  
  
  
  
  vpStages->clear();
  delete vpStages;
  
  pStages.Reset();
  
  
  vpGroups->clear();
  delete vpGroups;
  
  pGroups.Reset();
  
  
  
  
  
}

void _VkRayTracingPipelineCreateInfoNV::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkRayTracingPipelineCreateInfoNV::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkRayTracingPipelineCreateInfoNV").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("sType").ToLocalChecked(), GetsType, SetsType, ctor);
  SetPrototypeAccessor(proto, Nan::New("flags").ToLocalChecked(), Getflags, Setflags, ctor);
  SetPrototypeAccessor(proto, Nan::New("stageCount").ToLocalChecked(), GetstageCount, SetstageCount, ctor);
  SetPrototypeAccessor(proto, Nan::New("pStages").ToLocalChecked(), GetpStages, SetpStages, ctor);
  SetPrototypeAccessor(proto, Nan::New("groupCount").ToLocalChecked(), GetgroupCount, SetgroupCount, ctor);
  SetPrototypeAccessor(proto, Nan::New("pGroups").ToLocalChecked(), GetpGroups, SetpGroups, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxRecursionDepth").ToLocalChecked(), GetmaxRecursionDepth, SetmaxRecursionDepth, ctor);
  SetPrototypeAccessor(proto, Nan::New("layout").ToLocalChecked(), Getlayout, Setlayout, ctor);
  SetPrototypeAccessor(proto, Nan::New("basePipelineHandle").ToLocalChecked(), GetbasePipelineHandle, SetbasePipelineHandle, ctor);
  SetPrototypeAccessor(proto, Nan::New("basePipelineIndex").ToLocalChecked(), GetbasePipelineIndex, SetbasePipelineIndex, ctor);
  Nan::Set(target, Nan::New("VkRayTracingPipelineCreateInfoNV").ToLocalChecked(), ctor->GetFunction());
}

bool _VkRayTracingPipelineCreateInfoNV::flush() {
  _VkRayTracingPipelineCreateInfoNV *self = this;
  if (!(self->pStages.IsEmpty())) {
    v8::Local<v8::Value> value = Nan::New(self->pStages);
    
    v8::Local<v8::Array> array = v8::Local<v8::Array>::Cast(value);
    // validate length
    if (array->Length() != self->instance.stageCount) {
      Nan::ThrowRangeError("Invalid array length, expected array length of 'stageCount' for 'VkRayTracingPipelineCreateInfoNV.pStages'");
      return false;
    }
    std::vector<VkPipelineShaderStageCreateInfo>* data = self->vpStages;
    data->clear();
    for (unsigned int ii = 0; ii < array->Length(); ++ii) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(Nan::Get(array, ii).ToLocalChecked()).ToLocalChecked();
      if (!(Nan::New(_VkPipelineShaderStageCreateInfo::constructor)->HasInstance(obj))) {
        
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkPipelineShaderStageCreateInfo]' for 'VkRayTracingPipelineCreateInfoNV.pStages' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
        return false;
      }
      _VkPipelineShaderStageCreateInfo* result = Nan::ObjectWrap::Unwrap<_VkPipelineShaderStageCreateInfo>(obj);
      if (!result->flush()) return false;
      data->push_back(result->instance);
    };
    self->instance.pStages = data->data();
  }if (!(self->pGroups.IsEmpty())) {
    v8::Local<v8::Value> value = Nan::New(self->pGroups);
    
    v8::Local<v8::Array> array = v8::Local<v8::Array>::Cast(value);
    // validate length
    if (array->Length() != self->instance.groupCount) {
      Nan::ThrowRangeError("Invalid array length, expected array length of 'groupCount' for 'VkRayTracingPipelineCreateInfoNV.pGroups'");
      return false;
    }
    std::vector<VkRayTracingShaderGroupCreateInfoNV>* data = self->vpGroups;
    data->clear();
    for (unsigned int ii = 0; ii < array->Length(); ++ii) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(Nan::Get(array, ii).ToLocalChecked()).ToLocalChecked();
      if (!(Nan::New(_VkRayTracingShaderGroupCreateInfoNV::constructor)->HasInstance(obj))) {
        
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkRayTracingShaderGroupCreateInfoNV]' for 'VkRayTracingPipelineCreateInfoNV.pGroups' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
        return false;
      }
      _VkRayTracingShaderGroupCreateInfoNV* result = Nan::ObjectWrap::Unwrap<_VkRayTracingShaderGroupCreateInfoNV>(obj);
      if (!result->flush()) return false;
      data->push_back(result->instance);
    };
    self->instance.pGroups = data->data();
  }
  return true;
}

NAN_METHOD(_VkRayTracingPipelineCreateInfoNV::New) {
  if (info.IsConstructCall()) {
    _VkRayTracingPipelineCreateInfoNV* self = new _VkRayTracingPipelineCreateInfoNV();
    self->Wrap(info.Holder());
    
    if (info[0]->IsObject()) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(info[0]).ToLocalChecked();
      v8::Local<v8::String> sAccess0 = Nan::New("sType").ToLocalChecked();
      v8::Local<v8::String> sAccess2 = Nan::New("flags").ToLocalChecked();
      v8::Local<v8::String> sAccess3 = Nan::New("stageCount").ToLocalChecked();
      v8::Local<v8::String> sAccess4 = Nan::New("pStages").ToLocalChecked();
      v8::Local<v8::String> sAccess5 = Nan::New("groupCount").ToLocalChecked();
      v8::Local<v8::String> sAccess6 = Nan::New("pGroups").ToLocalChecked();
      v8::Local<v8::String> sAccess7 = Nan::New("maxRecursionDepth").ToLocalChecked();
      v8::Local<v8::String> sAccess8 = Nan::New("layout").ToLocalChecked();
      v8::Local<v8::String> sAccess9 = Nan::New("basePipelineHandle").ToLocalChecked();
      v8::Local<v8::String> sAccess10 = Nan::New("basePipelineIndex").ToLocalChecked();
      if (obj->Has(sAccess0)) info.This()->Set(sAccess0, obj->Get(sAccess0));
      if (obj->Has(sAccess2)) info.This()->Set(sAccess2, obj->Get(sAccess2));
      if (obj->Has(sAccess3)) info.This()->Set(sAccess3, obj->Get(sAccess3));
      if (obj->Has(sAccess4)) info.This()->Set(sAccess4, obj->Get(sAccess4));
      if (obj->Has(sAccess5)) info.This()->Set(sAccess5, obj->Get(sAccess5));
      if (obj->Has(sAccess6)) info.This()->Set(sAccess6, obj->Get(sAccess6));
      if (obj->Has(sAccess7)) info.This()->Set(sAccess7, obj->Get(sAccess7));
      if (obj->Has(sAccess8)) info.This()->Set(sAccess8, obj->Get(sAccess8));
      if (obj->Has(sAccess9)) info.This()->Set(sAccess9, obj->Get(sAccess9));
      if (obj->Has(sAccess10)) info.This()->Set(sAccess10, obj->Get(sAccess10));
      
    }
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkRayTracingPipelineCreateInfoNV constructor cannot be invoked without 'new'");
  }
};

// sType
NAN_GETTER(_VkRayTracingPipelineCreateInfoNV::GetsType) {
  _VkRayTracingPipelineCreateInfoNV *self = Nan::ObjectWrap::Unwrap<_VkRayTracingPipelineCreateInfoNV>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sType));
}NAN_SETTER(_VkRayTracingPipelineCreateInfoNV::SetsType) {
  _VkRayTracingPipelineCreateInfoNV *self = Nan::ObjectWrap::Unwrap<_VkRayTracingPipelineCreateInfoNV>(info.This());
  if (value->IsNumber()) {
    self->instance.sType = static_cast<VkStructureType>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkRayTracingPipelineCreateInfoNV.sType' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// flags
NAN_GETTER(_VkRayTracingPipelineCreateInfoNV::Getflags) {
  _VkRayTracingPipelineCreateInfoNV *self = Nan::ObjectWrap::Unwrap<_VkRayTracingPipelineCreateInfoNV>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.flags));
}NAN_SETTER(_VkRayTracingPipelineCreateInfoNV::Setflags) {
  _VkRayTracingPipelineCreateInfoNV *self = Nan::ObjectWrap::Unwrap<_VkRayTracingPipelineCreateInfoNV>(info.This());
  if (value->IsNumber()) {
    self->instance.flags = static_cast<VkPipelineCreateFlags>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkRayTracingPipelineCreateInfoNV.flags' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// stageCount
NAN_GETTER(_VkRayTracingPipelineCreateInfoNV::GetstageCount) {
  _VkRayTracingPipelineCreateInfoNV *self = Nan::ObjectWrap::Unwrap<_VkRayTracingPipelineCreateInfoNV>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.stageCount));
}NAN_SETTER(_VkRayTracingPipelineCreateInfoNV::SetstageCount) {
  _VkRayTracingPipelineCreateInfoNV *self = Nan::ObjectWrap::Unwrap<_VkRayTracingPipelineCreateInfoNV>(info.This());
  if (value->IsNumber()) {
    self->instance.stageCount = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkRayTracingPipelineCreateInfoNV.stageCount' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// pStages
NAN_GETTER(_VkRayTracingPipelineCreateInfoNV::GetpStages) {
  _VkRayTracingPipelineCreateInfoNV *self = Nan::ObjectWrap::Unwrap<_VkRayTracingPipelineCreateInfoNV>(info.This());
  if (self->pStages.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->pStages);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkRayTracingPipelineCreateInfoNV::SetpStages) {
  _VkRayTracingPipelineCreateInfoNV *self = Nan::ObjectWrap::Unwrap<_VkRayTracingPipelineCreateInfoNV>(info.This());
  
    // js
    if (value->IsArray()) {
      self->pStages.Reset<v8::Array>(value.As<v8::Array>());
    } else if (value->IsNull()) {
      self->pStages.Reset();
      self->instance.pStages = nullptr;
    } else {
      
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkPipelineShaderStageCreateInfo]' for 'VkRayTracingPipelineCreateInfoNV.pStages' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
      return;
    }
  
  // vulkan
  if (value->IsArray()) {
    
  } else if (value->IsNull()) {
    self->instance.pStages = nullptr;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkPipelineShaderStageCreateInfo]' for 'VkRayTracingPipelineCreateInfoNV.pStages' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// groupCount
NAN_GETTER(_VkRayTracingPipelineCreateInfoNV::GetgroupCount) {
  _VkRayTracingPipelineCreateInfoNV *self = Nan::ObjectWrap::Unwrap<_VkRayTracingPipelineCreateInfoNV>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.groupCount));
}NAN_SETTER(_VkRayTracingPipelineCreateInfoNV::SetgroupCount) {
  _VkRayTracingPipelineCreateInfoNV *self = Nan::ObjectWrap::Unwrap<_VkRayTracingPipelineCreateInfoNV>(info.This());
  if (value->IsNumber()) {
    self->instance.groupCount = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkRayTracingPipelineCreateInfoNV.groupCount' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// pGroups
NAN_GETTER(_VkRayTracingPipelineCreateInfoNV::GetpGroups) {
  _VkRayTracingPipelineCreateInfoNV *self = Nan::ObjectWrap::Unwrap<_VkRayTracingPipelineCreateInfoNV>(info.This());
  if (self->pGroups.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->pGroups);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkRayTracingPipelineCreateInfoNV::SetpGroups) {
  _VkRayTracingPipelineCreateInfoNV *self = Nan::ObjectWrap::Unwrap<_VkRayTracingPipelineCreateInfoNV>(info.This());
  
    // js
    if (value->IsArray()) {
      self->pGroups.Reset<v8::Array>(value.As<v8::Array>());
    } else if (value->IsNull()) {
      self->pGroups.Reset();
      self->instance.pGroups = nullptr;
    } else {
      
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkRayTracingShaderGroupCreateInfoNV]' for 'VkRayTracingPipelineCreateInfoNV.pGroups' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
      return;
    }
  
  // vulkan
  if (value->IsArray()) {
    
  } else if (value->IsNull()) {
    self->instance.pGroups = nullptr;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkRayTracingShaderGroupCreateInfoNV]' for 'VkRayTracingPipelineCreateInfoNV.pGroups' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// maxRecursionDepth
NAN_GETTER(_VkRayTracingPipelineCreateInfoNV::GetmaxRecursionDepth) {
  _VkRayTracingPipelineCreateInfoNV *self = Nan::ObjectWrap::Unwrap<_VkRayTracingPipelineCreateInfoNV>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxRecursionDepth));
}NAN_SETTER(_VkRayTracingPipelineCreateInfoNV::SetmaxRecursionDepth) {
  _VkRayTracingPipelineCreateInfoNV *self = Nan::ObjectWrap::Unwrap<_VkRayTracingPipelineCreateInfoNV>(info.This());
  if (value->IsNumber()) {
    self->instance.maxRecursionDepth = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkRayTracingPipelineCreateInfoNV.maxRecursionDepth' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// layout
NAN_GETTER(_VkRayTracingPipelineCreateInfoNV::Getlayout) {
  _VkRayTracingPipelineCreateInfoNV *self = Nan::ObjectWrap::Unwrap<_VkRayTracingPipelineCreateInfoNV>(info.This());
  if (self->layout.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->layout);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkRayTracingPipelineCreateInfoNV::Setlayout) {
  _VkRayTracingPipelineCreateInfoNV *self = Nan::ObjectWrap::Unwrap<_VkRayTracingPipelineCreateInfoNV>(info.This());
  // js
  if (!value->IsNull()) {
    v8::Local<v8::Object> obj = Nan::To<v8::Object>(value).ToLocalChecked();
    if (Nan::New(_VkPipelineLayout::constructor)->HasInstance(obj)) {
      self->layout.Reset<v8::Object>(value.As<v8::Object>());
      _VkPipelineLayout* inst = Nan::ObjectWrap::Unwrap<_VkPipelineLayout>(obj);
      ;
      self->instance.layout = inst->instance;
    } else {
      
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkPipelineLayout]' for 'VkRayTracingPipelineCreateInfoNV.layout' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
      return;
    }
  } else if (value->IsNull()) {
    self->layout.Reset();
    self->instance.layout = VK_NULL_HANDLE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkPipelineLayout]' for 'VkRayTracingPipelineCreateInfoNV.layout' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// basePipelineHandle
NAN_GETTER(_VkRayTracingPipelineCreateInfoNV::GetbasePipelineHandle) {
  _VkRayTracingPipelineCreateInfoNV *self = Nan::ObjectWrap::Unwrap<_VkRayTracingPipelineCreateInfoNV>(info.This());
  if (self->basePipelineHandle.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->basePipelineHandle);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkRayTracingPipelineCreateInfoNV::SetbasePipelineHandle) {
  _VkRayTracingPipelineCreateInfoNV *self = Nan::ObjectWrap::Unwrap<_VkRayTracingPipelineCreateInfoNV>(info.This());
  // js
  if (!value->IsNull()) {
    v8::Local<v8::Object> obj = Nan::To<v8::Object>(value).ToLocalChecked();
    if (Nan::New(_VkPipeline::constructor)->HasInstance(obj)) {
      self->basePipelineHandle.Reset<v8::Object>(value.As<v8::Object>());
      _VkPipeline* inst = Nan::ObjectWrap::Unwrap<_VkPipeline>(obj);
      ;
      self->instance.basePipelineHandle = inst->instance;
    } else {
      
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkPipeline]' for 'VkRayTracingPipelineCreateInfoNV.basePipelineHandle' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
      return;
    }
  } else if (value->IsNull()) {
    self->basePipelineHandle.Reset();
    self->instance.basePipelineHandle = VK_NULL_HANDLE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkPipeline]' for 'VkRayTracingPipelineCreateInfoNV.basePipelineHandle' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// basePipelineIndex
NAN_GETTER(_VkRayTracingPipelineCreateInfoNV::GetbasePipelineIndex) {
  _VkRayTracingPipelineCreateInfoNV *self = Nan::ObjectWrap::Unwrap<_VkRayTracingPipelineCreateInfoNV>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.basePipelineIndex));
}NAN_SETTER(_VkRayTracingPipelineCreateInfoNV::SetbasePipelineIndex) {
  _VkRayTracingPipelineCreateInfoNV *self = Nan::ObjectWrap::Unwrap<_VkRayTracingPipelineCreateInfoNV>(info.This());
  if (value->IsNumber()) {
    self->instance.basePipelineIndex = static_cast<int32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkRayTracingPipelineCreateInfoNV.basePipelineIndex' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}