/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY nvk v0.1.5
 */
#include "utils.h"
#include "index.h"
#include "VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.h"

Nan::Persistent<v8::FunctionTemplate> _VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT::constructor;

_VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT::_VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT() {
  instance.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT;
  
}

_VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT::~_VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT() {
  //printf("VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT deconstructed!!\n");
  
  
  
  
  
  
  
  
}

void _VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("sType").ToLocalChecked(), GetsType, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("advancedBlendMaxColorAttachments").ToLocalChecked(), GetadvancedBlendMaxColorAttachments, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("advancedBlendIndependentBlend").ToLocalChecked(), GetadvancedBlendIndependentBlend, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("advancedBlendNonPremultipliedSrcColor").ToLocalChecked(), GetadvancedBlendNonPremultipliedSrcColor, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("advancedBlendNonPremultipliedDstColor").ToLocalChecked(), GetadvancedBlendNonPremultipliedDstColor, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("advancedBlendCorrelatedOverlap").ToLocalChecked(), GetadvancedBlendCorrelatedOverlap, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("advancedBlendAllOperations").ToLocalChecked(), GetadvancedBlendAllOperations, nullptr, ctor);
  Nan::Set(target, Nan::New("VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT").ToLocalChecked(), ctor->GetFunction());
}

bool _VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT::flush() {
  _VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT *self = this;
  
  return true;
}

NAN_METHOD(_VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT::New) {
  if (info.IsConstructCall()) {
    _VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT* self = new _VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT();
    self->Wrap(info.Holder());
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT constructor cannot be invoked without 'new'");
  }
};

// sType
NAN_GETTER(_VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT::GetsType) {
  _VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sType));
}// advancedBlendMaxColorAttachments
NAN_GETTER(_VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT::GetadvancedBlendMaxColorAttachments) {
  _VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.advancedBlendMaxColorAttachments));
}// advancedBlendIndependentBlend
NAN_GETTER(_VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT::GetadvancedBlendIndependentBlend) {
  _VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.advancedBlendIndependentBlend));
}// advancedBlendNonPremultipliedSrcColor
NAN_GETTER(_VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT::GetadvancedBlendNonPremultipliedSrcColor) {
  _VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.advancedBlendNonPremultipliedSrcColor));
}// advancedBlendNonPremultipliedDstColor
NAN_GETTER(_VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT::GetadvancedBlendNonPremultipliedDstColor) {
  _VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.advancedBlendNonPremultipliedDstColor));
}// advancedBlendCorrelatedOverlap
NAN_GETTER(_VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT::GetadvancedBlendCorrelatedOverlap) {
  _VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.advancedBlendCorrelatedOverlap));
}// advancedBlendAllOperations
NAN_GETTER(_VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT::GetadvancedBlendAllOperations) {
  _VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.advancedBlendAllOperations));
}