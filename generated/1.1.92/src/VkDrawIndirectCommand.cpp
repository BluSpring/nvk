/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY nvk v0.1.4
 */
#include "utils.h"
#include "index.h"
#include "VkDrawIndirectCommand.h"

Nan::Persistent<v8::FunctionTemplate> _VkDrawIndirectCommand::constructor;

_VkDrawIndirectCommand::_VkDrawIndirectCommand() {
  
  
}

_VkDrawIndirectCommand::~_VkDrawIndirectCommand() {
  //printf("VkDrawIndirectCommand deconstructed!!\n");
  
  
  
  
  
}

void _VkDrawIndirectCommand::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkDrawIndirectCommand::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkDrawIndirectCommand").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("vertexCount").ToLocalChecked(), GetvertexCount, SetvertexCount, ctor);
  SetPrototypeAccessor(proto, Nan::New("instanceCount").ToLocalChecked(), GetinstanceCount, SetinstanceCount, ctor);
  SetPrototypeAccessor(proto, Nan::New("firstVertex").ToLocalChecked(), GetfirstVertex, SetfirstVertex, ctor);
  SetPrototypeAccessor(proto, Nan::New("firstInstance").ToLocalChecked(), GetfirstInstance, SetfirstInstance, ctor);
  Nan::Set(target, Nan::New("VkDrawIndirectCommand").ToLocalChecked(), ctor->GetFunction());
}

bool _VkDrawIndirectCommand::flush() {
  _VkDrawIndirectCommand *self = this;
  
  return true;
}

NAN_METHOD(_VkDrawIndirectCommand::New) {
  if (info.IsConstructCall()) {
    _VkDrawIndirectCommand* self = new _VkDrawIndirectCommand();
    self->Wrap(info.Holder());
    
    if (info[0]->IsObject()) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(info[0]).ToLocalChecked();
      v8::Local<v8::String> sAccess0 = Nan::New("vertexCount").ToLocalChecked();
      v8::Local<v8::String> sAccess1 = Nan::New("instanceCount").ToLocalChecked();
      v8::Local<v8::String> sAccess2 = Nan::New("firstVertex").ToLocalChecked();
      v8::Local<v8::String> sAccess3 = Nan::New("firstInstance").ToLocalChecked();
      if (obj->Has(sAccess0)) info.This()->Set(sAccess0, obj->Get(sAccess0));
      if (obj->Has(sAccess1)) info.This()->Set(sAccess1, obj->Get(sAccess1));
      if (obj->Has(sAccess2)) info.This()->Set(sAccess2, obj->Get(sAccess2));
      if (obj->Has(sAccess3)) info.This()->Set(sAccess3, obj->Get(sAccess3));
      
    }
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkDrawIndirectCommand constructor cannot be invoked without 'new'");
  }
};

// vertexCount
NAN_GETTER(_VkDrawIndirectCommand::GetvertexCount) {
  _VkDrawIndirectCommand *self = Nan::ObjectWrap::Unwrap<_VkDrawIndirectCommand>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.vertexCount));
}NAN_SETTER(_VkDrawIndirectCommand::SetvertexCount) {
  _VkDrawIndirectCommand *self = Nan::ObjectWrap::Unwrap<_VkDrawIndirectCommand>(info.This());
  if (value->IsNumber()) {
    self->instance.vertexCount = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkDrawIndirectCommand.vertexCount' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// instanceCount
NAN_GETTER(_VkDrawIndirectCommand::GetinstanceCount) {
  _VkDrawIndirectCommand *self = Nan::ObjectWrap::Unwrap<_VkDrawIndirectCommand>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.instanceCount));
}NAN_SETTER(_VkDrawIndirectCommand::SetinstanceCount) {
  _VkDrawIndirectCommand *self = Nan::ObjectWrap::Unwrap<_VkDrawIndirectCommand>(info.This());
  if (value->IsNumber()) {
    self->instance.instanceCount = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkDrawIndirectCommand.instanceCount' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// firstVertex
NAN_GETTER(_VkDrawIndirectCommand::GetfirstVertex) {
  _VkDrawIndirectCommand *self = Nan::ObjectWrap::Unwrap<_VkDrawIndirectCommand>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.firstVertex));
}NAN_SETTER(_VkDrawIndirectCommand::SetfirstVertex) {
  _VkDrawIndirectCommand *self = Nan::ObjectWrap::Unwrap<_VkDrawIndirectCommand>(info.This());
  if (value->IsNumber()) {
    self->instance.firstVertex = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkDrawIndirectCommand.firstVertex' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// firstInstance
NAN_GETTER(_VkDrawIndirectCommand::GetfirstInstance) {
  _VkDrawIndirectCommand *self = Nan::ObjectWrap::Unwrap<_VkDrawIndirectCommand>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.firstInstance));
}NAN_SETTER(_VkDrawIndirectCommand::SetfirstInstance) {
  _VkDrawIndirectCommand *self = Nan::ObjectWrap::Unwrap<_VkDrawIndirectCommand>(info.This());
  if (value->IsNumber()) {
    self->instance.firstInstance = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkDrawIndirectCommand.firstInstance' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}