/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY nvk v0.1.2
 */
#include "utils.h"
#include "index.h"
#include "VkViewportSwizzleNV.h"

Nan::Persistent<v8::FunctionTemplate> _VkViewportSwizzleNV::constructor;

_VkViewportSwizzleNV::_VkViewportSwizzleNV() {
  
  
}

_VkViewportSwizzleNV::~_VkViewportSwizzleNV() {
  //printf("VkViewportSwizzleNV deconstructed!!\n");
  
  
  
  
  
}

void _VkViewportSwizzleNV::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkViewportSwizzleNV::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkViewportSwizzleNV").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("x").ToLocalChecked(), Getx, Setx, ctor);
  SetPrototypeAccessor(proto, Nan::New("y").ToLocalChecked(), Gety, Sety, ctor);
  SetPrototypeAccessor(proto, Nan::New("z").ToLocalChecked(), Getz, Setz, ctor);
  SetPrototypeAccessor(proto, Nan::New("w").ToLocalChecked(), Getw, Setw, ctor);
  Nan::Set(target, Nan::New("VkViewportSwizzleNV").ToLocalChecked(), ctor->GetFunction());
}

bool _VkViewportSwizzleNV::flush() {
  _VkViewportSwizzleNV *self = this;
  
  return true;
}

NAN_METHOD(_VkViewportSwizzleNV::New) {
  if (info.IsConstructCall()) {
    _VkViewportSwizzleNV* self = new _VkViewportSwizzleNV();
    self->Wrap(info.Holder());
    
    if (info[0]->IsObject()) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(info[0]).ToLocalChecked();
      v8::Local<v8::String> sAccess0 = Nan::New("x").ToLocalChecked();
      v8::Local<v8::String> sAccess1 = Nan::New("y").ToLocalChecked();
      v8::Local<v8::String> sAccess2 = Nan::New("z").ToLocalChecked();
      v8::Local<v8::String> sAccess3 = Nan::New("w").ToLocalChecked();
      if (obj->Has(sAccess0)) info.This()->Set(sAccess0, obj->Get(sAccess0));
      if (obj->Has(sAccess1)) info.This()->Set(sAccess1, obj->Get(sAccess1));
      if (obj->Has(sAccess2)) info.This()->Set(sAccess2, obj->Get(sAccess2));
      if (obj->Has(sAccess3)) info.This()->Set(sAccess3, obj->Get(sAccess3));
      
    }
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkViewportSwizzleNV constructor cannot be invoked without 'new'");
  }
};

// x
NAN_GETTER(_VkViewportSwizzleNV::Getx) {
  _VkViewportSwizzleNV *self = Nan::ObjectWrap::Unwrap<_VkViewportSwizzleNV>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.x));
}NAN_SETTER(_VkViewportSwizzleNV::Setx) {
  _VkViewportSwizzleNV *self = Nan::ObjectWrap::Unwrap<_VkViewportSwizzleNV>(info.This());
  if (value->IsNumber()) {
    self->instance.x = static_cast<VkViewportCoordinateSwizzleNV>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkViewportSwizzleNV.x' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// y
NAN_GETTER(_VkViewportSwizzleNV::Gety) {
  _VkViewportSwizzleNV *self = Nan::ObjectWrap::Unwrap<_VkViewportSwizzleNV>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.y));
}NAN_SETTER(_VkViewportSwizzleNV::Sety) {
  _VkViewportSwizzleNV *self = Nan::ObjectWrap::Unwrap<_VkViewportSwizzleNV>(info.This());
  if (value->IsNumber()) {
    self->instance.y = static_cast<VkViewportCoordinateSwizzleNV>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkViewportSwizzleNV.y' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// z
NAN_GETTER(_VkViewportSwizzleNV::Getz) {
  _VkViewportSwizzleNV *self = Nan::ObjectWrap::Unwrap<_VkViewportSwizzleNV>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.z));
}NAN_SETTER(_VkViewportSwizzleNV::Setz) {
  _VkViewportSwizzleNV *self = Nan::ObjectWrap::Unwrap<_VkViewportSwizzleNV>(info.This());
  if (value->IsNumber()) {
    self->instance.z = static_cast<VkViewportCoordinateSwizzleNV>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkViewportSwizzleNV.z' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// w
NAN_GETTER(_VkViewportSwizzleNV::Getw) {
  _VkViewportSwizzleNV *self = Nan::ObjectWrap::Unwrap<_VkViewportSwizzleNV>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.w));
}NAN_SETTER(_VkViewportSwizzleNV::Setw) {
  _VkViewportSwizzleNV *self = Nan::ObjectWrap::Unwrap<_VkViewportSwizzleNV>(info.This());
  if (value->IsNumber()) {
    self->instance.w = static_cast<VkViewportCoordinateSwizzleNV>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkViewportSwizzleNV.w' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}