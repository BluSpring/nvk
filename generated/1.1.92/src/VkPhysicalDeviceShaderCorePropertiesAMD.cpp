/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY nvk v0.1.4
 */
#include "utils.h"
#include "index.h"
#include "VkPhysicalDeviceShaderCorePropertiesAMD.h"

Nan::Persistent<v8::FunctionTemplate> _VkPhysicalDeviceShaderCorePropertiesAMD::constructor;

_VkPhysicalDeviceShaderCorePropertiesAMD::_VkPhysicalDeviceShaderCorePropertiesAMD() {
  instance.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD;
  
}

_VkPhysicalDeviceShaderCorePropertiesAMD::~_VkPhysicalDeviceShaderCorePropertiesAMD() {
  //printf("VkPhysicalDeviceShaderCorePropertiesAMD deconstructed!!\n");
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
}

void _VkPhysicalDeviceShaderCorePropertiesAMD::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkPhysicalDeviceShaderCorePropertiesAMD::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkPhysicalDeviceShaderCorePropertiesAMD").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("sType").ToLocalChecked(), GetsType, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("shaderEngineCount").ToLocalChecked(), GetshaderEngineCount, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("shaderArraysPerEngineCount").ToLocalChecked(), GetshaderArraysPerEngineCount, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("computeUnitsPerShaderArray").ToLocalChecked(), GetcomputeUnitsPerShaderArray, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("simdPerComputeUnit").ToLocalChecked(), GetsimdPerComputeUnit, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("wavefrontsPerSimd").ToLocalChecked(), GetwavefrontsPerSimd, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("wavefrontSize").ToLocalChecked(), GetwavefrontSize, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("sgprsPerSimd").ToLocalChecked(), GetsgprsPerSimd, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("minSgprAllocation").ToLocalChecked(), GetminSgprAllocation, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxSgprAllocation").ToLocalChecked(), GetmaxSgprAllocation, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("sgprAllocationGranularity").ToLocalChecked(), GetsgprAllocationGranularity, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("vgprsPerSimd").ToLocalChecked(), GetvgprsPerSimd, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("minVgprAllocation").ToLocalChecked(), GetminVgprAllocation, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxVgprAllocation").ToLocalChecked(), GetmaxVgprAllocation, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("vgprAllocationGranularity").ToLocalChecked(), GetvgprAllocationGranularity, nullptr, ctor);
  Nan::Set(target, Nan::New("VkPhysicalDeviceShaderCorePropertiesAMD").ToLocalChecked(), ctor->GetFunction());
}

bool _VkPhysicalDeviceShaderCorePropertiesAMD::flush() {
  _VkPhysicalDeviceShaderCorePropertiesAMD *self = this;
  
  return true;
}

NAN_METHOD(_VkPhysicalDeviceShaderCorePropertiesAMD::New) {
  if (info.IsConstructCall()) {
    _VkPhysicalDeviceShaderCorePropertiesAMD* self = new _VkPhysicalDeviceShaderCorePropertiesAMD();
    self->Wrap(info.Holder());
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkPhysicalDeviceShaderCorePropertiesAMD constructor cannot be invoked without 'new'");
  }
};

// sType
NAN_GETTER(_VkPhysicalDeviceShaderCorePropertiesAMD::GetsType) {
  _VkPhysicalDeviceShaderCorePropertiesAMD *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceShaderCorePropertiesAMD>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sType));
}// shaderEngineCount
NAN_GETTER(_VkPhysicalDeviceShaderCorePropertiesAMD::GetshaderEngineCount) {
  _VkPhysicalDeviceShaderCorePropertiesAMD *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceShaderCorePropertiesAMD>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.shaderEngineCount));
}// shaderArraysPerEngineCount
NAN_GETTER(_VkPhysicalDeviceShaderCorePropertiesAMD::GetshaderArraysPerEngineCount) {
  _VkPhysicalDeviceShaderCorePropertiesAMD *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceShaderCorePropertiesAMD>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.shaderArraysPerEngineCount));
}// computeUnitsPerShaderArray
NAN_GETTER(_VkPhysicalDeviceShaderCorePropertiesAMD::GetcomputeUnitsPerShaderArray) {
  _VkPhysicalDeviceShaderCorePropertiesAMD *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceShaderCorePropertiesAMD>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.computeUnitsPerShaderArray));
}// simdPerComputeUnit
NAN_GETTER(_VkPhysicalDeviceShaderCorePropertiesAMD::GetsimdPerComputeUnit) {
  _VkPhysicalDeviceShaderCorePropertiesAMD *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceShaderCorePropertiesAMD>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.simdPerComputeUnit));
}// wavefrontsPerSimd
NAN_GETTER(_VkPhysicalDeviceShaderCorePropertiesAMD::GetwavefrontsPerSimd) {
  _VkPhysicalDeviceShaderCorePropertiesAMD *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceShaderCorePropertiesAMD>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.wavefrontsPerSimd));
}// wavefrontSize
NAN_GETTER(_VkPhysicalDeviceShaderCorePropertiesAMD::GetwavefrontSize) {
  _VkPhysicalDeviceShaderCorePropertiesAMD *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceShaderCorePropertiesAMD>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.wavefrontSize));
}// sgprsPerSimd
NAN_GETTER(_VkPhysicalDeviceShaderCorePropertiesAMD::GetsgprsPerSimd) {
  _VkPhysicalDeviceShaderCorePropertiesAMD *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceShaderCorePropertiesAMD>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sgprsPerSimd));
}// minSgprAllocation
NAN_GETTER(_VkPhysicalDeviceShaderCorePropertiesAMD::GetminSgprAllocation) {
  _VkPhysicalDeviceShaderCorePropertiesAMD *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceShaderCorePropertiesAMD>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.minSgprAllocation));
}// maxSgprAllocation
NAN_GETTER(_VkPhysicalDeviceShaderCorePropertiesAMD::GetmaxSgprAllocation) {
  _VkPhysicalDeviceShaderCorePropertiesAMD *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceShaderCorePropertiesAMD>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxSgprAllocation));
}// sgprAllocationGranularity
NAN_GETTER(_VkPhysicalDeviceShaderCorePropertiesAMD::GetsgprAllocationGranularity) {
  _VkPhysicalDeviceShaderCorePropertiesAMD *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceShaderCorePropertiesAMD>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sgprAllocationGranularity));
}// vgprsPerSimd
NAN_GETTER(_VkPhysicalDeviceShaderCorePropertiesAMD::GetvgprsPerSimd) {
  _VkPhysicalDeviceShaderCorePropertiesAMD *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceShaderCorePropertiesAMD>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.vgprsPerSimd));
}// minVgprAllocation
NAN_GETTER(_VkPhysicalDeviceShaderCorePropertiesAMD::GetminVgprAllocation) {
  _VkPhysicalDeviceShaderCorePropertiesAMD *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceShaderCorePropertiesAMD>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.minVgprAllocation));
}// maxVgprAllocation
NAN_GETTER(_VkPhysicalDeviceShaderCorePropertiesAMD::GetmaxVgprAllocation) {
  _VkPhysicalDeviceShaderCorePropertiesAMD *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceShaderCorePropertiesAMD>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxVgprAllocation));
}// vgprAllocationGranularity
NAN_GETTER(_VkPhysicalDeviceShaderCorePropertiesAMD::GetvgprAllocationGranularity) {
  _VkPhysicalDeviceShaderCorePropertiesAMD *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceShaderCorePropertiesAMD>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.vgprAllocationGranularity));
}