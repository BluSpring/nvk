/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY nvk v0.1.2
 */
#include "utils.h"
#include "index.h"
#include "VkCmdProcessCommandsInfoNVX.h"

Nan::Persistent<v8::FunctionTemplate> _VkCmdProcessCommandsInfoNVX::constructor;

_VkCmdProcessCommandsInfoNVX::_VkCmdProcessCommandsInfoNVX() {
  instance.sType = VK_STRUCTURE_TYPE_CMD_PROCESS_COMMANDS_INFO_NVX;
  vpIndirectCommandsTokens = new std::vector<VkIndirectCommandsTokenNVX>;
  
}

_VkCmdProcessCommandsInfoNVX::~_VkCmdProcessCommandsInfoNVX() {
  //printf("VkCmdProcessCommandsInfoNVX deconstructed!!\n");
  
  
  
  
  
  vpIndirectCommandsTokens->clear();
  delete vpIndirectCommandsTokens;
  
  pIndirectCommandsTokens.Reset();
  
  
  
  
  
  
  
}

void _VkCmdProcessCommandsInfoNVX::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkCmdProcessCommandsInfoNVX::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkCmdProcessCommandsInfoNVX").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("sType").ToLocalChecked(), GetsType, SetsType, ctor);
  SetPrototypeAccessor(proto, Nan::New("objectTable").ToLocalChecked(), GetobjectTable, SetobjectTable, ctor);
  SetPrototypeAccessor(proto, Nan::New("indirectCommandsLayout").ToLocalChecked(), GetindirectCommandsLayout, SetindirectCommandsLayout, ctor);
  SetPrototypeAccessor(proto, Nan::New("indirectCommandsTokenCount").ToLocalChecked(), GetindirectCommandsTokenCount, SetindirectCommandsTokenCount, ctor);
  SetPrototypeAccessor(proto, Nan::New("pIndirectCommandsTokens").ToLocalChecked(), GetpIndirectCommandsTokens, SetpIndirectCommandsTokens, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxSequencesCount").ToLocalChecked(), GetmaxSequencesCount, SetmaxSequencesCount, ctor);
  SetPrototypeAccessor(proto, Nan::New("targetCommandBuffer").ToLocalChecked(), GettargetCommandBuffer, SettargetCommandBuffer, ctor);
  SetPrototypeAccessor(proto, Nan::New("sequencesCountBuffer").ToLocalChecked(), GetsequencesCountBuffer, SetsequencesCountBuffer, ctor);
  SetPrototypeAccessor(proto, Nan::New("sequencesCountOffset").ToLocalChecked(), GetsequencesCountOffset, SetsequencesCountOffset, ctor);
  SetPrototypeAccessor(proto, Nan::New("sequencesIndexBuffer").ToLocalChecked(), GetsequencesIndexBuffer, SetsequencesIndexBuffer, ctor);
  SetPrototypeAccessor(proto, Nan::New("sequencesIndexOffset").ToLocalChecked(), GetsequencesIndexOffset, SetsequencesIndexOffset, ctor);
  Nan::Set(target, Nan::New("VkCmdProcessCommandsInfoNVX").ToLocalChecked(), ctor->GetFunction());
}

bool _VkCmdProcessCommandsInfoNVX::flush() {
  _VkCmdProcessCommandsInfoNVX *self = this;
  if (!(self->pIndirectCommandsTokens.IsEmpty())) {
    v8::Local<v8::Value> value = Nan::New(self->pIndirectCommandsTokens);
    
    v8::Local<v8::Array> array = v8::Local<v8::Array>::Cast(value);
    // validate length
    if (array->Length() != self->instance.indirectCommandsTokenCount) {
      Nan::ThrowRangeError("Invalid array length, expected array length of 'indirectCommandsTokenCount' for 'VkCmdProcessCommandsInfoNVX.pIndirectCommandsTokens'");
      return false;
    }
    std::vector<VkIndirectCommandsTokenNVX>* data = self->vpIndirectCommandsTokens;
    data->clear();
    for (unsigned int ii = 0; ii < array->Length(); ++ii) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(Nan::Get(array, ii).ToLocalChecked()).ToLocalChecked();
      if (!(Nan::New(_VkIndirectCommandsTokenNVX::constructor)->HasInstance(obj))) {
        
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkIndirectCommandsTokenNVX]' for 'VkCmdProcessCommandsInfoNVX.pIndirectCommandsTokens' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
        return false;
      }
      _VkIndirectCommandsTokenNVX* result = Nan::ObjectWrap::Unwrap<_VkIndirectCommandsTokenNVX>(obj);
      if (!result->flush()) return false;
      data->push_back(result->instance);
    };
    self->instance.pIndirectCommandsTokens = data->data();
  }
  return true;
}

NAN_METHOD(_VkCmdProcessCommandsInfoNVX::New) {
  if (info.IsConstructCall()) {
    _VkCmdProcessCommandsInfoNVX* self = new _VkCmdProcessCommandsInfoNVX();
    self->Wrap(info.Holder());
    
    if (info[0]->IsObject()) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(info[0]).ToLocalChecked();
      v8::Local<v8::String> sAccess0 = Nan::New("sType").ToLocalChecked();
      v8::Local<v8::String> sAccess2 = Nan::New("objectTable").ToLocalChecked();
      v8::Local<v8::String> sAccess3 = Nan::New("indirectCommandsLayout").ToLocalChecked();
      v8::Local<v8::String> sAccess4 = Nan::New("indirectCommandsTokenCount").ToLocalChecked();
      v8::Local<v8::String> sAccess5 = Nan::New("pIndirectCommandsTokens").ToLocalChecked();
      v8::Local<v8::String> sAccess6 = Nan::New("maxSequencesCount").ToLocalChecked();
      v8::Local<v8::String> sAccess7 = Nan::New("targetCommandBuffer").ToLocalChecked();
      v8::Local<v8::String> sAccess8 = Nan::New("sequencesCountBuffer").ToLocalChecked();
      v8::Local<v8::String> sAccess9 = Nan::New("sequencesCountOffset").ToLocalChecked();
      v8::Local<v8::String> sAccess10 = Nan::New("sequencesIndexBuffer").ToLocalChecked();
      v8::Local<v8::String> sAccess11 = Nan::New("sequencesIndexOffset").ToLocalChecked();
      if (obj->Has(sAccess0)) info.This()->Set(sAccess0, obj->Get(sAccess0));
      if (obj->Has(sAccess2)) info.This()->Set(sAccess2, obj->Get(sAccess2));
      if (obj->Has(sAccess3)) info.This()->Set(sAccess3, obj->Get(sAccess3));
      if (obj->Has(sAccess4)) info.This()->Set(sAccess4, obj->Get(sAccess4));
      if (obj->Has(sAccess5)) info.This()->Set(sAccess5, obj->Get(sAccess5));
      if (obj->Has(sAccess6)) info.This()->Set(sAccess6, obj->Get(sAccess6));
      if (obj->Has(sAccess7)) info.This()->Set(sAccess7, obj->Get(sAccess7));
      if (obj->Has(sAccess8)) info.This()->Set(sAccess8, obj->Get(sAccess8));
      if (obj->Has(sAccess9)) info.This()->Set(sAccess9, obj->Get(sAccess9));
      if (obj->Has(sAccess10)) info.This()->Set(sAccess10, obj->Get(sAccess10));
      if (obj->Has(sAccess11)) info.This()->Set(sAccess11, obj->Get(sAccess11));
      
    }
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkCmdProcessCommandsInfoNVX constructor cannot be invoked without 'new'");
  }
};

// sType
NAN_GETTER(_VkCmdProcessCommandsInfoNVX::GetsType) {
  _VkCmdProcessCommandsInfoNVX *self = Nan::ObjectWrap::Unwrap<_VkCmdProcessCommandsInfoNVX>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sType));
}NAN_SETTER(_VkCmdProcessCommandsInfoNVX::SetsType) {
  _VkCmdProcessCommandsInfoNVX *self = Nan::ObjectWrap::Unwrap<_VkCmdProcessCommandsInfoNVX>(info.This());
  if (value->IsNumber()) {
    self->instance.sType = static_cast<VkStructureType>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkCmdProcessCommandsInfoNVX.sType' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// objectTable
NAN_GETTER(_VkCmdProcessCommandsInfoNVX::GetobjectTable) {
  _VkCmdProcessCommandsInfoNVX *self = Nan::ObjectWrap::Unwrap<_VkCmdProcessCommandsInfoNVX>(info.This());
  if (self->objectTable.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->objectTable);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkCmdProcessCommandsInfoNVX::SetobjectTable) {
  _VkCmdProcessCommandsInfoNVX *self = Nan::ObjectWrap::Unwrap<_VkCmdProcessCommandsInfoNVX>(info.This());
  // js
  if (!value->IsNull()) {
    v8::Local<v8::Object> obj = Nan::To<v8::Object>(value).ToLocalChecked();
    if (Nan::New(_VkObjectTableNVX::constructor)->HasInstance(obj)) {
      self->objectTable.Reset<v8::Object>(value.As<v8::Object>());
      _VkObjectTableNVX* inst = Nan::ObjectWrap::Unwrap<_VkObjectTableNVX>(obj);
      ;
      self->instance.objectTable = inst->instance;
    } else {
      
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkObjectTableNVX]' for 'VkCmdProcessCommandsInfoNVX.objectTable' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
      return;
    }
  } else if (value->IsNull()) {
    self->objectTable.Reset();
    self->instance.objectTable = VK_NULL_HANDLE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkObjectTableNVX]' for 'VkCmdProcessCommandsInfoNVX.objectTable' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// indirectCommandsLayout
NAN_GETTER(_VkCmdProcessCommandsInfoNVX::GetindirectCommandsLayout) {
  _VkCmdProcessCommandsInfoNVX *self = Nan::ObjectWrap::Unwrap<_VkCmdProcessCommandsInfoNVX>(info.This());
  if (self->indirectCommandsLayout.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->indirectCommandsLayout);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkCmdProcessCommandsInfoNVX::SetindirectCommandsLayout) {
  _VkCmdProcessCommandsInfoNVX *self = Nan::ObjectWrap::Unwrap<_VkCmdProcessCommandsInfoNVX>(info.This());
  // js
  if (!value->IsNull()) {
    v8::Local<v8::Object> obj = Nan::To<v8::Object>(value).ToLocalChecked();
    if (Nan::New(_VkIndirectCommandsLayoutNVX::constructor)->HasInstance(obj)) {
      self->indirectCommandsLayout.Reset<v8::Object>(value.As<v8::Object>());
      _VkIndirectCommandsLayoutNVX* inst = Nan::ObjectWrap::Unwrap<_VkIndirectCommandsLayoutNVX>(obj);
      ;
      self->instance.indirectCommandsLayout = inst->instance;
    } else {
      
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkIndirectCommandsLayoutNVX]' for 'VkCmdProcessCommandsInfoNVX.indirectCommandsLayout' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
      return;
    }
  } else if (value->IsNull()) {
    self->indirectCommandsLayout.Reset();
    self->instance.indirectCommandsLayout = VK_NULL_HANDLE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkIndirectCommandsLayoutNVX]' for 'VkCmdProcessCommandsInfoNVX.indirectCommandsLayout' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// indirectCommandsTokenCount
NAN_GETTER(_VkCmdProcessCommandsInfoNVX::GetindirectCommandsTokenCount) {
  _VkCmdProcessCommandsInfoNVX *self = Nan::ObjectWrap::Unwrap<_VkCmdProcessCommandsInfoNVX>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.indirectCommandsTokenCount));
}NAN_SETTER(_VkCmdProcessCommandsInfoNVX::SetindirectCommandsTokenCount) {
  _VkCmdProcessCommandsInfoNVX *self = Nan::ObjectWrap::Unwrap<_VkCmdProcessCommandsInfoNVX>(info.This());
  if (value->IsNumber()) {
    self->instance.indirectCommandsTokenCount = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkCmdProcessCommandsInfoNVX.indirectCommandsTokenCount' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// pIndirectCommandsTokens
NAN_GETTER(_VkCmdProcessCommandsInfoNVX::GetpIndirectCommandsTokens) {
  _VkCmdProcessCommandsInfoNVX *self = Nan::ObjectWrap::Unwrap<_VkCmdProcessCommandsInfoNVX>(info.This());
  if (self->pIndirectCommandsTokens.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->pIndirectCommandsTokens);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkCmdProcessCommandsInfoNVX::SetpIndirectCommandsTokens) {
  _VkCmdProcessCommandsInfoNVX *self = Nan::ObjectWrap::Unwrap<_VkCmdProcessCommandsInfoNVX>(info.This());
  
    // js
    if (value->IsArray()) {
      self->pIndirectCommandsTokens.Reset<v8::Array>(value.As<v8::Array>());
    } else if (value->IsNull()) {
      self->pIndirectCommandsTokens.Reset();
      self->instance.pIndirectCommandsTokens = nullptr;
    } else {
      
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkIndirectCommandsTokenNVX]' for 'VkCmdProcessCommandsInfoNVX.pIndirectCommandsTokens' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
      return;
    }
  
  // vulkan
  if (value->IsArray()) {
    
  } else if (value->IsNull()) {
    self->instance.pIndirectCommandsTokens = nullptr;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkIndirectCommandsTokenNVX]' for 'VkCmdProcessCommandsInfoNVX.pIndirectCommandsTokens' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// maxSequencesCount
NAN_GETTER(_VkCmdProcessCommandsInfoNVX::GetmaxSequencesCount) {
  _VkCmdProcessCommandsInfoNVX *self = Nan::ObjectWrap::Unwrap<_VkCmdProcessCommandsInfoNVX>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxSequencesCount));
}NAN_SETTER(_VkCmdProcessCommandsInfoNVX::SetmaxSequencesCount) {
  _VkCmdProcessCommandsInfoNVX *self = Nan::ObjectWrap::Unwrap<_VkCmdProcessCommandsInfoNVX>(info.This());
  if (value->IsNumber()) {
    self->instance.maxSequencesCount = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkCmdProcessCommandsInfoNVX.maxSequencesCount' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// targetCommandBuffer
NAN_GETTER(_VkCmdProcessCommandsInfoNVX::GettargetCommandBuffer) {
  _VkCmdProcessCommandsInfoNVX *self = Nan::ObjectWrap::Unwrap<_VkCmdProcessCommandsInfoNVX>(info.This());
  if (self->targetCommandBuffer.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->targetCommandBuffer);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkCmdProcessCommandsInfoNVX::SettargetCommandBuffer) {
  _VkCmdProcessCommandsInfoNVX *self = Nan::ObjectWrap::Unwrap<_VkCmdProcessCommandsInfoNVX>(info.This());
  // js
  if (!value->IsNull()) {
    v8::Local<v8::Object> obj = Nan::To<v8::Object>(value).ToLocalChecked();
    if (Nan::New(_VkCommandBuffer::constructor)->HasInstance(obj)) {
      self->targetCommandBuffer.Reset<v8::Object>(value.As<v8::Object>());
      _VkCommandBuffer* inst = Nan::ObjectWrap::Unwrap<_VkCommandBuffer>(obj);
      ;
      self->instance.targetCommandBuffer = inst->instance;
    } else {
      
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkCommandBuffer]' for 'VkCmdProcessCommandsInfoNVX.targetCommandBuffer' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
      return;
    }
  } else if (value->IsNull()) {
    self->targetCommandBuffer.Reset();
    self->instance.targetCommandBuffer = VK_NULL_HANDLE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkCommandBuffer]' for 'VkCmdProcessCommandsInfoNVX.targetCommandBuffer' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// sequencesCountBuffer
NAN_GETTER(_VkCmdProcessCommandsInfoNVX::GetsequencesCountBuffer) {
  _VkCmdProcessCommandsInfoNVX *self = Nan::ObjectWrap::Unwrap<_VkCmdProcessCommandsInfoNVX>(info.This());
  if (self->sequencesCountBuffer.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->sequencesCountBuffer);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkCmdProcessCommandsInfoNVX::SetsequencesCountBuffer) {
  _VkCmdProcessCommandsInfoNVX *self = Nan::ObjectWrap::Unwrap<_VkCmdProcessCommandsInfoNVX>(info.This());
  // js
  if (!value->IsNull()) {
    v8::Local<v8::Object> obj = Nan::To<v8::Object>(value).ToLocalChecked();
    if (Nan::New(_VkBuffer::constructor)->HasInstance(obj)) {
      self->sequencesCountBuffer.Reset<v8::Object>(value.As<v8::Object>());
      _VkBuffer* inst = Nan::ObjectWrap::Unwrap<_VkBuffer>(obj);
      ;
      self->instance.sequencesCountBuffer = inst->instance;
    } else {
      
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkBuffer]' for 'VkCmdProcessCommandsInfoNVX.sequencesCountBuffer' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
      return;
    }
  } else if (value->IsNull()) {
    self->sequencesCountBuffer.Reset();
    self->instance.sequencesCountBuffer = VK_NULL_HANDLE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkBuffer]' for 'VkCmdProcessCommandsInfoNVX.sequencesCountBuffer' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// sequencesCountOffset
NAN_GETTER(_VkCmdProcessCommandsInfoNVX::GetsequencesCountOffset) {
  _VkCmdProcessCommandsInfoNVX *self = Nan::ObjectWrap::Unwrap<_VkCmdProcessCommandsInfoNVX>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sequencesCountOffset));
}NAN_SETTER(_VkCmdProcessCommandsInfoNVX::SetsequencesCountOffset) {
  _VkCmdProcessCommandsInfoNVX *self = Nan::ObjectWrap::Unwrap<_VkCmdProcessCommandsInfoNVX>(info.This());
  if (value->IsNumber()) {
    self->instance.sequencesCountOffset = static_cast<uint64_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkCmdProcessCommandsInfoNVX.sequencesCountOffset' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// sequencesIndexBuffer
NAN_GETTER(_VkCmdProcessCommandsInfoNVX::GetsequencesIndexBuffer) {
  _VkCmdProcessCommandsInfoNVX *self = Nan::ObjectWrap::Unwrap<_VkCmdProcessCommandsInfoNVX>(info.This());
  if (self->sequencesIndexBuffer.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->sequencesIndexBuffer);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkCmdProcessCommandsInfoNVX::SetsequencesIndexBuffer) {
  _VkCmdProcessCommandsInfoNVX *self = Nan::ObjectWrap::Unwrap<_VkCmdProcessCommandsInfoNVX>(info.This());
  // js
  if (!value->IsNull()) {
    v8::Local<v8::Object> obj = Nan::To<v8::Object>(value).ToLocalChecked();
    if (Nan::New(_VkBuffer::constructor)->HasInstance(obj)) {
      self->sequencesIndexBuffer.Reset<v8::Object>(value.As<v8::Object>());
      _VkBuffer* inst = Nan::ObjectWrap::Unwrap<_VkBuffer>(obj);
      ;
      self->instance.sequencesIndexBuffer = inst->instance;
    } else {
      
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkBuffer]' for 'VkCmdProcessCommandsInfoNVX.sequencesIndexBuffer' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
      return;
    }
  } else if (value->IsNull()) {
    self->sequencesIndexBuffer.Reset();
    self->instance.sequencesIndexBuffer = VK_NULL_HANDLE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkBuffer]' for 'VkCmdProcessCommandsInfoNVX.sequencesIndexBuffer' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// sequencesIndexOffset
NAN_GETTER(_VkCmdProcessCommandsInfoNVX::GetsequencesIndexOffset) {
  _VkCmdProcessCommandsInfoNVX *self = Nan::ObjectWrap::Unwrap<_VkCmdProcessCommandsInfoNVX>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sequencesIndexOffset));
}NAN_SETTER(_VkCmdProcessCommandsInfoNVX::SetsequencesIndexOffset) {
  _VkCmdProcessCommandsInfoNVX *self = Nan::ObjectWrap::Unwrap<_VkCmdProcessCommandsInfoNVX>(info.This());
  if (value->IsNumber()) {
    self->instance.sequencesIndexOffset = static_cast<uint64_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkCmdProcessCommandsInfoNVX.sequencesIndexOffset' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}