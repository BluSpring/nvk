/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY nvk v0.1.5
 */
#include "utils.h"
#include "index.h"
#include "VkSubpassDependency2KHR.h"

Nan::Persistent<v8::FunctionTemplate> _VkSubpassDependency2KHR::constructor;

_VkSubpassDependency2KHR::_VkSubpassDependency2KHR() {
  instance.sType = VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR;
  
}

_VkSubpassDependency2KHR::~_VkSubpassDependency2KHR() {
  //printf("VkSubpassDependency2KHR deconstructed!!\n");
  
  
  
  
  
  
  
  
  
  
}

void _VkSubpassDependency2KHR::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkSubpassDependency2KHR::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkSubpassDependency2KHR").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("sType").ToLocalChecked(), GetsType, SetsType, ctor);
  SetPrototypeAccessor(proto, Nan::New("srcSubpass").ToLocalChecked(), GetsrcSubpass, SetsrcSubpass, ctor);
  SetPrototypeAccessor(proto, Nan::New("dstSubpass").ToLocalChecked(), GetdstSubpass, SetdstSubpass, ctor);
  SetPrototypeAccessor(proto, Nan::New("srcStageMask").ToLocalChecked(), GetsrcStageMask, SetsrcStageMask, ctor);
  SetPrototypeAccessor(proto, Nan::New("dstStageMask").ToLocalChecked(), GetdstStageMask, SetdstStageMask, ctor);
  SetPrototypeAccessor(proto, Nan::New("srcAccessMask").ToLocalChecked(), GetsrcAccessMask, SetsrcAccessMask, ctor);
  SetPrototypeAccessor(proto, Nan::New("dstAccessMask").ToLocalChecked(), GetdstAccessMask, SetdstAccessMask, ctor);
  SetPrototypeAccessor(proto, Nan::New("dependencyFlags").ToLocalChecked(), GetdependencyFlags, SetdependencyFlags, ctor);
  SetPrototypeAccessor(proto, Nan::New("viewOffset").ToLocalChecked(), GetviewOffset, SetviewOffset, ctor);
  Nan::Set(target, Nan::New("VkSubpassDependency2KHR").ToLocalChecked(), ctor->GetFunction());
}

bool _VkSubpassDependency2KHR::flush() {
  _VkSubpassDependency2KHR *self = this;
  
  return true;
}

NAN_METHOD(_VkSubpassDependency2KHR::New) {
  if (info.IsConstructCall()) {
    _VkSubpassDependency2KHR* self = new _VkSubpassDependency2KHR();
    self->Wrap(info.Holder());
    
    if (info[0]->IsObject()) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(info[0]).ToLocalChecked();
      v8::Local<v8::String> sAccess0 = Nan::New("sType").ToLocalChecked();
      v8::Local<v8::String> sAccess2 = Nan::New("srcSubpass").ToLocalChecked();
      v8::Local<v8::String> sAccess3 = Nan::New("dstSubpass").ToLocalChecked();
      v8::Local<v8::String> sAccess4 = Nan::New("srcStageMask").ToLocalChecked();
      v8::Local<v8::String> sAccess5 = Nan::New("dstStageMask").ToLocalChecked();
      v8::Local<v8::String> sAccess6 = Nan::New("srcAccessMask").ToLocalChecked();
      v8::Local<v8::String> sAccess7 = Nan::New("dstAccessMask").ToLocalChecked();
      v8::Local<v8::String> sAccess8 = Nan::New("dependencyFlags").ToLocalChecked();
      v8::Local<v8::String> sAccess9 = Nan::New("viewOffset").ToLocalChecked();
      if (obj->Has(sAccess0)) info.This()->Set(sAccess0, obj->Get(sAccess0));
      if (obj->Has(sAccess2)) info.This()->Set(sAccess2, obj->Get(sAccess2));
      if (obj->Has(sAccess3)) info.This()->Set(sAccess3, obj->Get(sAccess3));
      if (obj->Has(sAccess4)) info.This()->Set(sAccess4, obj->Get(sAccess4));
      if (obj->Has(sAccess5)) info.This()->Set(sAccess5, obj->Get(sAccess5));
      if (obj->Has(sAccess6)) info.This()->Set(sAccess6, obj->Get(sAccess6));
      if (obj->Has(sAccess7)) info.This()->Set(sAccess7, obj->Get(sAccess7));
      if (obj->Has(sAccess8)) info.This()->Set(sAccess8, obj->Get(sAccess8));
      if (obj->Has(sAccess9)) info.This()->Set(sAccess9, obj->Get(sAccess9));
      
    }
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkSubpassDependency2KHR constructor cannot be invoked without 'new'");
  }
};

// sType
NAN_GETTER(_VkSubpassDependency2KHR::GetsType) {
  _VkSubpassDependency2KHR *self = Nan::ObjectWrap::Unwrap<_VkSubpassDependency2KHR>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sType));
}NAN_SETTER(_VkSubpassDependency2KHR::SetsType) {
  _VkSubpassDependency2KHR *self = Nan::ObjectWrap::Unwrap<_VkSubpassDependency2KHR>(info.This());
  if (value->IsNumber()) {
    self->instance.sType = static_cast<VkStructureType>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkSubpassDependency2KHR.sType' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// srcSubpass
NAN_GETTER(_VkSubpassDependency2KHR::GetsrcSubpass) {
  _VkSubpassDependency2KHR *self = Nan::ObjectWrap::Unwrap<_VkSubpassDependency2KHR>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.srcSubpass));
}NAN_SETTER(_VkSubpassDependency2KHR::SetsrcSubpass) {
  _VkSubpassDependency2KHR *self = Nan::ObjectWrap::Unwrap<_VkSubpassDependency2KHR>(info.This());
  if (value->IsNumber()) {
    self->instance.srcSubpass = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkSubpassDependency2KHR.srcSubpass' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// dstSubpass
NAN_GETTER(_VkSubpassDependency2KHR::GetdstSubpass) {
  _VkSubpassDependency2KHR *self = Nan::ObjectWrap::Unwrap<_VkSubpassDependency2KHR>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.dstSubpass));
}NAN_SETTER(_VkSubpassDependency2KHR::SetdstSubpass) {
  _VkSubpassDependency2KHR *self = Nan::ObjectWrap::Unwrap<_VkSubpassDependency2KHR>(info.This());
  if (value->IsNumber()) {
    self->instance.dstSubpass = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkSubpassDependency2KHR.dstSubpass' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// srcStageMask
NAN_GETTER(_VkSubpassDependency2KHR::GetsrcStageMask) {
  _VkSubpassDependency2KHR *self = Nan::ObjectWrap::Unwrap<_VkSubpassDependency2KHR>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.srcStageMask));
}NAN_SETTER(_VkSubpassDependency2KHR::SetsrcStageMask) {
  _VkSubpassDependency2KHR *self = Nan::ObjectWrap::Unwrap<_VkSubpassDependency2KHR>(info.This());
  if (value->IsNumber()) {
    self->instance.srcStageMask = static_cast<VkPipelineStageFlags>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkSubpassDependency2KHR.srcStageMask' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// dstStageMask
NAN_GETTER(_VkSubpassDependency2KHR::GetdstStageMask) {
  _VkSubpassDependency2KHR *self = Nan::ObjectWrap::Unwrap<_VkSubpassDependency2KHR>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.dstStageMask));
}NAN_SETTER(_VkSubpassDependency2KHR::SetdstStageMask) {
  _VkSubpassDependency2KHR *self = Nan::ObjectWrap::Unwrap<_VkSubpassDependency2KHR>(info.This());
  if (value->IsNumber()) {
    self->instance.dstStageMask = static_cast<VkPipelineStageFlags>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkSubpassDependency2KHR.dstStageMask' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// srcAccessMask
NAN_GETTER(_VkSubpassDependency2KHR::GetsrcAccessMask) {
  _VkSubpassDependency2KHR *self = Nan::ObjectWrap::Unwrap<_VkSubpassDependency2KHR>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.srcAccessMask));
}NAN_SETTER(_VkSubpassDependency2KHR::SetsrcAccessMask) {
  _VkSubpassDependency2KHR *self = Nan::ObjectWrap::Unwrap<_VkSubpassDependency2KHR>(info.This());
  if (value->IsNumber()) {
    self->instance.srcAccessMask = static_cast<VkAccessFlags>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkSubpassDependency2KHR.srcAccessMask' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// dstAccessMask
NAN_GETTER(_VkSubpassDependency2KHR::GetdstAccessMask) {
  _VkSubpassDependency2KHR *self = Nan::ObjectWrap::Unwrap<_VkSubpassDependency2KHR>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.dstAccessMask));
}NAN_SETTER(_VkSubpassDependency2KHR::SetdstAccessMask) {
  _VkSubpassDependency2KHR *self = Nan::ObjectWrap::Unwrap<_VkSubpassDependency2KHR>(info.This());
  if (value->IsNumber()) {
    self->instance.dstAccessMask = static_cast<VkAccessFlags>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkSubpassDependency2KHR.dstAccessMask' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// dependencyFlags
NAN_GETTER(_VkSubpassDependency2KHR::GetdependencyFlags) {
  _VkSubpassDependency2KHR *self = Nan::ObjectWrap::Unwrap<_VkSubpassDependency2KHR>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.dependencyFlags));
}NAN_SETTER(_VkSubpassDependency2KHR::SetdependencyFlags) {
  _VkSubpassDependency2KHR *self = Nan::ObjectWrap::Unwrap<_VkSubpassDependency2KHR>(info.This());
  if (value->IsNumber()) {
    self->instance.dependencyFlags = static_cast<VkDependencyFlags>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkSubpassDependency2KHR.dependencyFlags' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// viewOffset
NAN_GETTER(_VkSubpassDependency2KHR::GetviewOffset) {
  _VkSubpassDependency2KHR *self = Nan::ObjectWrap::Unwrap<_VkSubpassDependency2KHR>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.viewOffset));
}NAN_SETTER(_VkSubpassDependency2KHR::SetviewOffset) {
  _VkSubpassDependency2KHR *self = Nan::ObjectWrap::Unwrap<_VkSubpassDependency2KHR>(info.This());
  if (value->IsNumber()) {
    self->instance.viewOffset = static_cast<int32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkSubpassDependency2KHR.viewOffset' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}