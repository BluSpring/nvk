/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY nvk v0.1.5
 */
#include "utils.h"
#include "index.h"
#include "VkDisplayPropertiesKHR.h"

Nan::Persistent<v8::FunctionTemplate> _VkDisplayPropertiesKHR::constructor;

_VkDisplayPropertiesKHR::_VkDisplayPropertiesKHR() {
  
  
}

_VkDisplayPropertiesKHR::~_VkDisplayPropertiesKHR() {
  //printf("VkDisplayPropertiesKHR deconstructed!!\n");
  
  
  displayName.Reset();
  
  
  
  
  
  
}

void _VkDisplayPropertiesKHR::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkDisplayPropertiesKHR::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkDisplayPropertiesKHR").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("display").ToLocalChecked(), Getdisplay, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("displayName").ToLocalChecked(), GetdisplayName, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("physicalDimensions").ToLocalChecked(), GetphysicalDimensions, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("physicalResolution").ToLocalChecked(), GetphysicalResolution, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("supportedTransforms").ToLocalChecked(), GetsupportedTransforms, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("planeReorderPossible").ToLocalChecked(), GetplaneReorderPossible, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("persistentContent").ToLocalChecked(), GetpersistentContent, nullptr, ctor);
  Nan::Set(target, Nan::New("VkDisplayPropertiesKHR").ToLocalChecked(), ctor->GetFunction());
}

bool _VkDisplayPropertiesKHR::flush() {
  _VkDisplayPropertiesKHR *self = this;
  if (!(self->physicalDimensions.IsEmpty())) {
    v8::Local<v8::Value> value = Nan::New(self->physicalDimensions);
    
  }if (!(self->physicalResolution.IsEmpty())) {
    v8::Local<v8::Value> value = Nan::New(self->physicalResolution);
    
  }
  return true;
}

NAN_METHOD(_VkDisplayPropertiesKHR::New) {
  if (info.IsConstructCall()) {
    _VkDisplayPropertiesKHR* self = new _VkDisplayPropertiesKHR();
    self->Wrap(info.Holder());
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkDisplayPropertiesKHR constructor cannot be invoked without 'new'");
  }
};

// display
NAN_GETTER(_VkDisplayPropertiesKHR::Getdisplay) {
  _VkDisplayPropertiesKHR *self = Nan::ObjectWrap::Unwrap<_VkDisplayPropertiesKHR>(info.This());
  if (self->display.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->display);
    info.GetReturnValue().Set(obj);
  }
}// displayName
NAN_GETTER(_VkDisplayPropertiesKHR::GetdisplayName) {
  _VkDisplayPropertiesKHR *self = Nan::ObjectWrap::Unwrap<_VkDisplayPropertiesKHR>(info.This());
  if (self->displayName.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::String> str = Nan::New(self->displayName);
    info.GetReturnValue().Set(str);
  }
}// physicalDimensions
NAN_GETTER(_VkDisplayPropertiesKHR::GetphysicalDimensions) {
  _VkDisplayPropertiesKHR *self = Nan::ObjectWrap::Unwrap<_VkDisplayPropertiesKHR>(info.This());
  if (self->physicalDimensions.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->physicalDimensions);
    info.GetReturnValue().Set(obj);
  }
}// physicalResolution
NAN_GETTER(_VkDisplayPropertiesKHR::GetphysicalResolution) {
  _VkDisplayPropertiesKHR *self = Nan::ObjectWrap::Unwrap<_VkDisplayPropertiesKHR>(info.This());
  if (self->physicalResolution.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->physicalResolution);
    info.GetReturnValue().Set(obj);
  }
}// supportedTransforms
NAN_GETTER(_VkDisplayPropertiesKHR::GetsupportedTransforms) {
  _VkDisplayPropertiesKHR *self = Nan::ObjectWrap::Unwrap<_VkDisplayPropertiesKHR>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.supportedTransforms));
}// planeReorderPossible
NAN_GETTER(_VkDisplayPropertiesKHR::GetplaneReorderPossible) {
  _VkDisplayPropertiesKHR *self = Nan::ObjectWrap::Unwrap<_VkDisplayPropertiesKHR>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.planeReorderPossible));
}// persistentContent
NAN_GETTER(_VkDisplayPropertiesKHR::GetpersistentContent) {
  _VkDisplayPropertiesKHR *self = Nan::ObjectWrap::Unwrap<_VkDisplayPropertiesKHR>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.persistentContent));
}