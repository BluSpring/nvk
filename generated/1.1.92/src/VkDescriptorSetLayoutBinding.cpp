/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY nvk v0.1.5
 */
#include "utils.h"
#include "index.h"
#include "VkDescriptorSetLayoutBinding.h"

Nan::Persistent<v8::FunctionTemplate> _VkDescriptorSetLayoutBinding::constructor;

_VkDescriptorSetLayoutBinding::_VkDescriptorSetLayoutBinding() {
  
  vpImmutableSamplers = new std::vector<VkSampler>;
  
}

_VkDescriptorSetLayoutBinding::~_VkDescriptorSetLayoutBinding() {
  //printf("VkDescriptorSetLayoutBinding deconstructed!!\n");
  
  
  
  
  
  vpImmutableSamplers->clear();
  delete vpImmutableSamplers;
  
  pImmutableSamplers.Reset();
  
}

void _VkDescriptorSetLayoutBinding::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkDescriptorSetLayoutBinding::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkDescriptorSetLayoutBinding").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("binding").ToLocalChecked(), Getbinding, Setbinding, ctor);
  SetPrototypeAccessor(proto, Nan::New("descriptorType").ToLocalChecked(), GetdescriptorType, SetdescriptorType, ctor);
  SetPrototypeAccessor(proto, Nan::New("descriptorCount").ToLocalChecked(), GetdescriptorCount, SetdescriptorCount, ctor);
  SetPrototypeAccessor(proto, Nan::New("stageFlags").ToLocalChecked(), GetstageFlags, SetstageFlags, ctor);
  SetPrototypeAccessor(proto, Nan::New("pImmutableSamplers").ToLocalChecked(), GetpImmutableSamplers, SetpImmutableSamplers, ctor);
  Nan::Set(target, Nan::New("VkDescriptorSetLayoutBinding").ToLocalChecked(), ctor->GetFunction());
}

bool _VkDescriptorSetLayoutBinding::flush() {
  _VkDescriptorSetLayoutBinding *self = this;
  if (!(self->pImmutableSamplers.IsEmpty())) {
    v8::Local<v8::Value> value = Nan::New(self->pImmutableSamplers);
    
    v8::Local<v8::Array> array = v8::Local<v8::Array>::Cast(value);
    // validate length
    if (array->Length() != self->instance.descriptorCount) {
      Nan::ThrowRangeError("Invalid array length, expected array length of 'descriptorCount' for 'VkDescriptorSetLayoutBinding.pImmutableSamplers'");
      return false;
    }
    std::vector<VkSampler>* data = self->vpImmutableSamplers;
    data->clear();
    for (unsigned int ii = 0; ii < array->Length(); ++ii) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(Nan::Get(array, ii).ToLocalChecked()).ToLocalChecked();
      if (!(Nan::New(_VkSampler::constructor)->HasInstance(obj))) {
        
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkSampler]' for 'VkDescriptorSetLayoutBinding.pImmutableSamplers' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
        return false;
      }
      _VkSampler* result = Nan::ObjectWrap::Unwrap<_VkSampler>(obj);
      
      data->push_back(result->instance);
    };
    self->instance.pImmutableSamplers = data->data();
  }
  return true;
}

NAN_METHOD(_VkDescriptorSetLayoutBinding::New) {
  if (info.IsConstructCall()) {
    _VkDescriptorSetLayoutBinding* self = new _VkDescriptorSetLayoutBinding();
    self->Wrap(info.Holder());
    
    if (info[0]->IsObject()) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(info[0]).ToLocalChecked();
      v8::Local<v8::String> sAccess0 = Nan::New("binding").ToLocalChecked();
      v8::Local<v8::String> sAccess1 = Nan::New("descriptorType").ToLocalChecked();
      v8::Local<v8::String> sAccess2 = Nan::New("descriptorCount").ToLocalChecked();
      v8::Local<v8::String> sAccess3 = Nan::New("stageFlags").ToLocalChecked();
      v8::Local<v8::String> sAccess4 = Nan::New("pImmutableSamplers").ToLocalChecked();
      if (obj->Has(sAccess0)) info.This()->Set(sAccess0, obj->Get(sAccess0));
      if (obj->Has(sAccess1)) info.This()->Set(sAccess1, obj->Get(sAccess1));
      if (obj->Has(sAccess2)) info.This()->Set(sAccess2, obj->Get(sAccess2));
      if (obj->Has(sAccess3)) info.This()->Set(sAccess3, obj->Get(sAccess3));
      if (obj->Has(sAccess4)) info.This()->Set(sAccess4, obj->Get(sAccess4));
      
    }
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkDescriptorSetLayoutBinding constructor cannot be invoked without 'new'");
  }
};

// binding
NAN_GETTER(_VkDescriptorSetLayoutBinding::Getbinding) {
  _VkDescriptorSetLayoutBinding *self = Nan::ObjectWrap::Unwrap<_VkDescriptorSetLayoutBinding>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.binding));
}NAN_SETTER(_VkDescriptorSetLayoutBinding::Setbinding) {
  _VkDescriptorSetLayoutBinding *self = Nan::ObjectWrap::Unwrap<_VkDescriptorSetLayoutBinding>(info.This());
  if (value->IsNumber()) {
    self->instance.binding = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkDescriptorSetLayoutBinding.binding' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// descriptorType
NAN_GETTER(_VkDescriptorSetLayoutBinding::GetdescriptorType) {
  _VkDescriptorSetLayoutBinding *self = Nan::ObjectWrap::Unwrap<_VkDescriptorSetLayoutBinding>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.descriptorType));
}NAN_SETTER(_VkDescriptorSetLayoutBinding::SetdescriptorType) {
  _VkDescriptorSetLayoutBinding *self = Nan::ObjectWrap::Unwrap<_VkDescriptorSetLayoutBinding>(info.This());
  if (value->IsNumber()) {
    self->instance.descriptorType = static_cast<VkDescriptorType>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkDescriptorSetLayoutBinding.descriptorType' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// descriptorCount
NAN_GETTER(_VkDescriptorSetLayoutBinding::GetdescriptorCount) {
  _VkDescriptorSetLayoutBinding *self = Nan::ObjectWrap::Unwrap<_VkDescriptorSetLayoutBinding>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.descriptorCount));
}NAN_SETTER(_VkDescriptorSetLayoutBinding::SetdescriptorCount) {
  _VkDescriptorSetLayoutBinding *self = Nan::ObjectWrap::Unwrap<_VkDescriptorSetLayoutBinding>(info.This());
  if (value->IsNumber()) {
    self->instance.descriptorCount = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkDescriptorSetLayoutBinding.descriptorCount' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// stageFlags
NAN_GETTER(_VkDescriptorSetLayoutBinding::GetstageFlags) {
  _VkDescriptorSetLayoutBinding *self = Nan::ObjectWrap::Unwrap<_VkDescriptorSetLayoutBinding>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.stageFlags));
}NAN_SETTER(_VkDescriptorSetLayoutBinding::SetstageFlags) {
  _VkDescriptorSetLayoutBinding *self = Nan::ObjectWrap::Unwrap<_VkDescriptorSetLayoutBinding>(info.This());
  if (value->IsNumber()) {
    self->instance.stageFlags = static_cast<VkShaderStageFlags>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkDescriptorSetLayoutBinding.stageFlags' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// pImmutableSamplers
NAN_GETTER(_VkDescriptorSetLayoutBinding::GetpImmutableSamplers) {
  _VkDescriptorSetLayoutBinding *self = Nan::ObjectWrap::Unwrap<_VkDescriptorSetLayoutBinding>(info.This());
  if (self->pImmutableSamplers.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->pImmutableSamplers);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkDescriptorSetLayoutBinding::SetpImmutableSamplers) {
  _VkDescriptorSetLayoutBinding *self = Nan::ObjectWrap::Unwrap<_VkDescriptorSetLayoutBinding>(info.This());
  
    // js
    if (value->IsArray()) {
      self->pImmutableSamplers.Reset<v8::Array>(value.As<v8::Array>());
    } else if (value->IsNull()) {
      self->pImmutableSamplers.Reset();
      self->instance.pImmutableSamplers = nullptr;
    } else {
      
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkSampler]' for 'VkDescriptorSetLayoutBinding.pImmutableSamplers' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
      return;
    }
  
  // vulkan
  if (value->IsArray()) {
    
  } else if (value->IsNull()) {
    self->instance.pImmutableSamplers = VK_NULL_HANDLE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkSampler]' for 'VkDescriptorSetLayoutBinding.pImmutableSamplers' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}