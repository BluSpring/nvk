/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY node-vulkan v0.1.0
 */
#include "utils.h"
#include "index.h"
#include "VkDescriptorSetLayoutBindingFlagsCreateInfoEXT.h"

Nan::Persistent<v8::FunctionTemplate> _VkDescriptorSetLayoutBindingFlagsCreateInfoEXT::constructor;

_VkDescriptorSetLayoutBindingFlagsCreateInfoEXT::_VkDescriptorSetLayoutBindingFlagsCreateInfoEXT() {
  instance.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT;
  
}

_VkDescriptorSetLayoutBindingFlagsCreateInfoEXT::~_VkDescriptorSetLayoutBindingFlagsCreateInfoEXT() {
  //printf("VkDescriptorSetLayoutBindingFlagsCreateInfoEXT deconstructed!!\n");
  
  
  
  pBindingFlags.Reset();
  
}

void _VkDescriptorSetLayoutBindingFlagsCreateInfoEXT::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkDescriptorSetLayoutBindingFlagsCreateInfoEXT::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkDescriptorSetLayoutBindingFlagsCreateInfoEXT").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("sType").ToLocalChecked(), GetsType, SetsType, ctor);
  SetPrototypeAccessor(proto, Nan::New("bindingCount").ToLocalChecked(), GetbindingCount, SetbindingCount, ctor);
  SetPrototypeAccessor(proto, Nan::New("pBindingFlags").ToLocalChecked(), GetpBindingFlags, SetpBindingFlags, ctor);
  Nan::Set(target, Nan::New("VkDescriptorSetLayoutBindingFlagsCreateInfoEXT").ToLocalChecked(), ctor->GetFunction());
}

bool _VkDescriptorSetLayoutBindingFlagsCreateInfoEXT::flush() {
  _VkDescriptorSetLayoutBindingFlagsCreateInfoEXT *self = this;
  
  return true;
}

NAN_METHOD(_VkDescriptorSetLayoutBindingFlagsCreateInfoEXT::New) {
  if (info.IsConstructCall()) {
    _VkDescriptorSetLayoutBindingFlagsCreateInfoEXT* self = new _VkDescriptorSetLayoutBindingFlagsCreateInfoEXT();
    self->Wrap(info.Holder());
    
    if (info[0]->IsObject()) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(info[0]).ToLocalChecked();
      v8::Local<v8::String> sAccess0 = Nan::New("sType").ToLocalChecked();
      v8::Local<v8::String> sAccess2 = Nan::New("bindingCount").ToLocalChecked();
      v8::Local<v8::String> sAccess3 = Nan::New("pBindingFlags").ToLocalChecked();
      if (obj->Has(sAccess0)) info.This()->Set(sAccess0, obj->Get(sAccess0));
      if (obj->Has(sAccess2)) info.This()->Set(sAccess2, obj->Get(sAccess2));
      if (obj->Has(sAccess3)) info.This()->Set(sAccess3, obj->Get(sAccess3));
      
    }
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkDescriptorSetLayoutBindingFlagsCreateInfoEXT constructor cannot be invoked without 'new'");
  }
};

// sType
NAN_GETTER(_VkDescriptorSetLayoutBindingFlagsCreateInfoEXT::GetsType) {
  _VkDescriptorSetLayoutBindingFlagsCreateInfoEXT *self = Nan::ObjectWrap::Unwrap<_VkDescriptorSetLayoutBindingFlagsCreateInfoEXT>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sType));
}NAN_SETTER(_VkDescriptorSetLayoutBindingFlagsCreateInfoEXT::SetsType) {
  _VkDescriptorSetLayoutBindingFlagsCreateInfoEXT *self = Nan::ObjectWrap::Unwrap<_VkDescriptorSetLayoutBindingFlagsCreateInfoEXT>(info.This());
  if (value->IsNumber()) {
    self->instance.sType = static_cast<VkStructureType>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkDescriptorSetLayoutBindingFlagsCreateInfoEXT.sType' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// bindingCount
NAN_GETTER(_VkDescriptorSetLayoutBindingFlagsCreateInfoEXT::GetbindingCount) {
  _VkDescriptorSetLayoutBindingFlagsCreateInfoEXT *self = Nan::ObjectWrap::Unwrap<_VkDescriptorSetLayoutBindingFlagsCreateInfoEXT>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.bindingCount));
}NAN_SETTER(_VkDescriptorSetLayoutBindingFlagsCreateInfoEXT::SetbindingCount) {
  _VkDescriptorSetLayoutBindingFlagsCreateInfoEXT *self = Nan::ObjectWrap::Unwrap<_VkDescriptorSetLayoutBindingFlagsCreateInfoEXT>(info.This());
  if (value->IsNumber()) {
    self->instance.bindingCount = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkDescriptorSetLayoutBindingFlagsCreateInfoEXT.bindingCount' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// pBindingFlags
NAN_GETTER(_VkDescriptorSetLayoutBindingFlagsCreateInfoEXT::GetpBindingFlags) {
  _VkDescriptorSetLayoutBindingFlagsCreateInfoEXT *self = Nan::ObjectWrap::Unwrap<_VkDescriptorSetLayoutBindingFlagsCreateInfoEXT>(info.This());
  if (self->pBindingFlags.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->pBindingFlags);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkDescriptorSetLayoutBindingFlagsCreateInfoEXT::SetpBindingFlags) {
  _VkDescriptorSetLayoutBindingFlagsCreateInfoEXT *self = Nan::ObjectWrap::Unwrap<_VkDescriptorSetLayoutBindingFlagsCreateInfoEXT>(info.This());
  
    // js
    if (value->IsArrayBufferView()) {
      if (value->IsInt32Array()) {
        self->pBindingFlags.Reset<v8::Array>(value.As<v8::Array>());
      } else {
        
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Int32Array' for 'VkDescriptorSetLayoutBindingFlagsCreateInfoEXT.pBindingFlags' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
        return;
      }
    } else if (value->IsNull()) {
      self->pBindingFlags.Reset();
    } else {
      
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Int32Array' for 'VkDescriptorSetLayoutBindingFlagsCreateInfoEXT.pBindingFlags' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
      return;
    }
  
  
  // vulkan
  if (value->IsArrayBufferView()) {
    self->instance.pBindingFlags = reinterpret_cast<const VkDescriptorBindingFlagsEXT *>(getTypedArrayData<int32_t>(Nan::To<v8::Object>(value).ToLocalChecked(), nullptr));
  } else {
    self->instance.pBindingFlags = nullptr;
  }
}