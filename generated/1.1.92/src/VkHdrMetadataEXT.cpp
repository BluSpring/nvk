/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY nvk v0.1.5
 */
#include "utils.h"
#include "index.h"
#include "VkHdrMetadataEXT.h"

Nan::Persistent<v8::FunctionTemplate> _VkHdrMetadataEXT::constructor;

_VkHdrMetadataEXT::_VkHdrMetadataEXT() {
  instance.sType = VK_STRUCTURE_TYPE_HDR_METADATA_EXT;
  
}

_VkHdrMetadataEXT::~_VkHdrMetadataEXT() {
  //printf("VkHdrMetadataEXT deconstructed!!\n");
  
  
  
  
  
  
  
  
  
  
}

void _VkHdrMetadataEXT::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkHdrMetadataEXT::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkHdrMetadataEXT").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("sType").ToLocalChecked(), GetsType, SetsType, ctor);
  SetPrototypeAccessor(proto, Nan::New("displayPrimaryRed").ToLocalChecked(), GetdisplayPrimaryRed, SetdisplayPrimaryRed, ctor);
  SetPrototypeAccessor(proto, Nan::New("displayPrimaryGreen").ToLocalChecked(), GetdisplayPrimaryGreen, SetdisplayPrimaryGreen, ctor);
  SetPrototypeAccessor(proto, Nan::New("displayPrimaryBlue").ToLocalChecked(), GetdisplayPrimaryBlue, SetdisplayPrimaryBlue, ctor);
  SetPrototypeAccessor(proto, Nan::New("whitePoint").ToLocalChecked(), GetwhitePoint, SetwhitePoint, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxLuminance").ToLocalChecked(), GetmaxLuminance, SetmaxLuminance, ctor);
  SetPrototypeAccessor(proto, Nan::New("minLuminance").ToLocalChecked(), GetminLuminance, SetminLuminance, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxContentLightLevel").ToLocalChecked(), GetmaxContentLightLevel, SetmaxContentLightLevel, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxFrameAverageLightLevel").ToLocalChecked(), GetmaxFrameAverageLightLevel, SetmaxFrameAverageLightLevel, ctor);
  Nan::Set(target, Nan::New("VkHdrMetadataEXT").ToLocalChecked(), ctor->GetFunction());
}

bool _VkHdrMetadataEXT::flush() {
  _VkHdrMetadataEXT *self = this;
  if (!(self->displayPrimaryRed.IsEmpty())) {
    v8::Local<v8::Value> value = Nan::New(self->displayPrimaryRed);
    
    _VkXYColorEXT* result = Nan::ObjectWrap::Unwrap<_VkXYColorEXT>(Nan::To<v8::Object>(value).ToLocalChecked());
    if (!result->flush()) return false;
    self->instance.displayPrimaryRed = result->instance;
  }if (!(self->displayPrimaryGreen.IsEmpty())) {
    v8::Local<v8::Value> value = Nan::New(self->displayPrimaryGreen);
    
    _VkXYColorEXT* result = Nan::ObjectWrap::Unwrap<_VkXYColorEXT>(Nan::To<v8::Object>(value).ToLocalChecked());
    if (!result->flush()) return false;
    self->instance.displayPrimaryGreen = result->instance;
  }if (!(self->displayPrimaryBlue.IsEmpty())) {
    v8::Local<v8::Value> value = Nan::New(self->displayPrimaryBlue);
    
    _VkXYColorEXT* result = Nan::ObjectWrap::Unwrap<_VkXYColorEXT>(Nan::To<v8::Object>(value).ToLocalChecked());
    if (!result->flush()) return false;
    self->instance.displayPrimaryBlue = result->instance;
  }if (!(self->whitePoint.IsEmpty())) {
    v8::Local<v8::Value> value = Nan::New(self->whitePoint);
    
    _VkXYColorEXT* result = Nan::ObjectWrap::Unwrap<_VkXYColorEXT>(Nan::To<v8::Object>(value).ToLocalChecked());
    if (!result->flush()) return false;
    self->instance.whitePoint = result->instance;
  }
  return true;
}

NAN_METHOD(_VkHdrMetadataEXT::New) {
  if (info.IsConstructCall()) {
    _VkHdrMetadataEXT* self = new _VkHdrMetadataEXT();
    self->Wrap(info.Holder());
    
    if (info[0]->IsObject()) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(info[0]).ToLocalChecked();
      v8::Local<v8::String> sAccess0 = Nan::New("sType").ToLocalChecked();
      v8::Local<v8::String> sAccess2 = Nan::New("displayPrimaryRed").ToLocalChecked();
      v8::Local<v8::String> sAccess3 = Nan::New("displayPrimaryGreen").ToLocalChecked();
      v8::Local<v8::String> sAccess4 = Nan::New("displayPrimaryBlue").ToLocalChecked();
      v8::Local<v8::String> sAccess5 = Nan::New("whitePoint").ToLocalChecked();
      v8::Local<v8::String> sAccess6 = Nan::New("maxLuminance").ToLocalChecked();
      v8::Local<v8::String> sAccess7 = Nan::New("minLuminance").ToLocalChecked();
      v8::Local<v8::String> sAccess8 = Nan::New("maxContentLightLevel").ToLocalChecked();
      v8::Local<v8::String> sAccess9 = Nan::New("maxFrameAverageLightLevel").ToLocalChecked();
      if (obj->Has(sAccess0)) info.This()->Set(sAccess0, obj->Get(sAccess0));
      if (obj->Has(sAccess2)) info.This()->Set(sAccess2, obj->Get(sAccess2));
      if (obj->Has(sAccess3)) info.This()->Set(sAccess3, obj->Get(sAccess3));
      if (obj->Has(sAccess4)) info.This()->Set(sAccess4, obj->Get(sAccess4));
      if (obj->Has(sAccess5)) info.This()->Set(sAccess5, obj->Get(sAccess5));
      if (obj->Has(sAccess6)) info.This()->Set(sAccess6, obj->Get(sAccess6));
      if (obj->Has(sAccess7)) info.This()->Set(sAccess7, obj->Get(sAccess7));
      if (obj->Has(sAccess8)) info.This()->Set(sAccess8, obj->Get(sAccess8));
      if (obj->Has(sAccess9)) info.This()->Set(sAccess9, obj->Get(sAccess9));
      
    }
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkHdrMetadataEXT constructor cannot be invoked without 'new'");
  }
};

// sType
NAN_GETTER(_VkHdrMetadataEXT::GetsType) {
  _VkHdrMetadataEXT *self = Nan::ObjectWrap::Unwrap<_VkHdrMetadataEXT>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sType));
}NAN_SETTER(_VkHdrMetadataEXT::SetsType) {
  _VkHdrMetadataEXT *self = Nan::ObjectWrap::Unwrap<_VkHdrMetadataEXT>(info.This());
  if (value->IsNumber()) {
    self->instance.sType = static_cast<VkStructureType>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkHdrMetadataEXT.sType' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// displayPrimaryRed
NAN_GETTER(_VkHdrMetadataEXT::GetdisplayPrimaryRed) {
  _VkHdrMetadataEXT *self = Nan::ObjectWrap::Unwrap<_VkHdrMetadataEXT>(info.This());
  if (self->displayPrimaryRed.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->displayPrimaryRed);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkHdrMetadataEXT::SetdisplayPrimaryRed) {
  _VkHdrMetadataEXT *self = Nan::ObjectWrap::Unwrap<_VkHdrMetadataEXT>(info.This());
  // js
  if (!value->IsNull()) {
    v8::Local<v8::Object> obj = Nan::To<v8::Object>(value).ToLocalChecked();
    if (Nan::New(_VkXYColorEXT::constructor)->HasInstance(obj)) {
      self->displayPrimaryRed.Reset<v8::Object>(value.As<v8::Object>());
      _VkXYColorEXT* inst = Nan::ObjectWrap::Unwrap<_VkXYColorEXT>(obj);
      inst->flush();
      self->instance.displayPrimaryRed = inst->instance;
    } else {
      
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkXYColorEXT]' for 'VkHdrMetadataEXT.displayPrimaryRed' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
      return;
    }
  } else if (value->IsNull()) {
    self->displayPrimaryRed.Reset();
    memset(&self->instance.displayPrimaryRed, 0, sizeof(VkXYColorEXT));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkXYColorEXT]' for 'VkHdrMetadataEXT.displayPrimaryRed' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// displayPrimaryGreen
NAN_GETTER(_VkHdrMetadataEXT::GetdisplayPrimaryGreen) {
  _VkHdrMetadataEXT *self = Nan::ObjectWrap::Unwrap<_VkHdrMetadataEXT>(info.This());
  if (self->displayPrimaryGreen.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->displayPrimaryGreen);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkHdrMetadataEXT::SetdisplayPrimaryGreen) {
  _VkHdrMetadataEXT *self = Nan::ObjectWrap::Unwrap<_VkHdrMetadataEXT>(info.This());
  // js
  if (!value->IsNull()) {
    v8::Local<v8::Object> obj = Nan::To<v8::Object>(value).ToLocalChecked();
    if (Nan::New(_VkXYColorEXT::constructor)->HasInstance(obj)) {
      self->displayPrimaryGreen.Reset<v8::Object>(value.As<v8::Object>());
      _VkXYColorEXT* inst = Nan::ObjectWrap::Unwrap<_VkXYColorEXT>(obj);
      inst->flush();
      self->instance.displayPrimaryGreen = inst->instance;
    } else {
      
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkXYColorEXT]' for 'VkHdrMetadataEXT.displayPrimaryGreen' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
      return;
    }
  } else if (value->IsNull()) {
    self->displayPrimaryGreen.Reset();
    memset(&self->instance.displayPrimaryGreen, 0, sizeof(VkXYColorEXT));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkXYColorEXT]' for 'VkHdrMetadataEXT.displayPrimaryGreen' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// displayPrimaryBlue
NAN_GETTER(_VkHdrMetadataEXT::GetdisplayPrimaryBlue) {
  _VkHdrMetadataEXT *self = Nan::ObjectWrap::Unwrap<_VkHdrMetadataEXT>(info.This());
  if (self->displayPrimaryBlue.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->displayPrimaryBlue);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkHdrMetadataEXT::SetdisplayPrimaryBlue) {
  _VkHdrMetadataEXT *self = Nan::ObjectWrap::Unwrap<_VkHdrMetadataEXT>(info.This());
  // js
  if (!value->IsNull()) {
    v8::Local<v8::Object> obj = Nan::To<v8::Object>(value).ToLocalChecked();
    if (Nan::New(_VkXYColorEXT::constructor)->HasInstance(obj)) {
      self->displayPrimaryBlue.Reset<v8::Object>(value.As<v8::Object>());
      _VkXYColorEXT* inst = Nan::ObjectWrap::Unwrap<_VkXYColorEXT>(obj);
      inst->flush();
      self->instance.displayPrimaryBlue = inst->instance;
    } else {
      
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkXYColorEXT]' for 'VkHdrMetadataEXT.displayPrimaryBlue' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
      return;
    }
  } else if (value->IsNull()) {
    self->displayPrimaryBlue.Reset();
    memset(&self->instance.displayPrimaryBlue, 0, sizeof(VkXYColorEXT));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkXYColorEXT]' for 'VkHdrMetadataEXT.displayPrimaryBlue' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// whitePoint
NAN_GETTER(_VkHdrMetadataEXT::GetwhitePoint) {
  _VkHdrMetadataEXT *self = Nan::ObjectWrap::Unwrap<_VkHdrMetadataEXT>(info.This());
  if (self->whitePoint.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->whitePoint);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkHdrMetadataEXT::SetwhitePoint) {
  _VkHdrMetadataEXT *self = Nan::ObjectWrap::Unwrap<_VkHdrMetadataEXT>(info.This());
  // js
  if (!value->IsNull()) {
    v8::Local<v8::Object> obj = Nan::To<v8::Object>(value).ToLocalChecked();
    if (Nan::New(_VkXYColorEXT::constructor)->HasInstance(obj)) {
      self->whitePoint.Reset<v8::Object>(value.As<v8::Object>());
      _VkXYColorEXT* inst = Nan::ObjectWrap::Unwrap<_VkXYColorEXT>(obj);
      inst->flush();
      self->instance.whitePoint = inst->instance;
    } else {
      
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkXYColorEXT]' for 'VkHdrMetadataEXT.whitePoint' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
      return;
    }
  } else if (value->IsNull()) {
    self->whitePoint.Reset();
    memset(&self->instance.whitePoint, 0, sizeof(VkXYColorEXT));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkXYColorEXT]' for 'VkHdrMetadataEXT.whitePoint' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// maxLuminance
NAN_GETTER(_VkHdrMetadataEXT::GetmaxLuminance) {
  _VkHdrMetadataEXT *self = Nan::ObjectWrap::Unwrap<_VkHdrMetadataEXT>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxLuminance));
}NAN_SETTER(_VkHdrMetadataEXT::SetmaxLuminance) {
  _VkHdrMetadataEXT *self = Nan::ObjectWrap::Unwrap<_VkHdrMetadataEXT>(info.This());
  if (value->IsNumber()) {
    self->instance.maxLuminance = static_cast<float>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkHdrMetadataEXT.maxLuminance' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// minLuminance
NAN_GETTER(_VkHdrMetadataEXT::GetminLuminance) {
  _VkHdrMetadataEXT *self = Nan::ObjectWrap::Unwrap<_VkHdrMetadataEXT>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.minLuminance));
}NAN_SETTER(_VkHdrMetadataEXT::SetminLuminance) {
  _VkHdrMetadataEXT *self = Nan::ObjectWrap::Unwrap<_VkHdrMetadataEXT>(info.This());
  if (value->IsNumber()) {
    self->instance.minLuminance = static_cast<float>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkHdrMetadataEXT.minLuminance' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// maxContentLightLevel
NAN_GETTER(_VkHdrMetadataEXT::GetmaxContentLightLevel) {
  _VkHdrMetadataEXT *self = Nan::ObjectWrap::Unwrap<_VkHdrMetadataEXT>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxContentLightLevel));
}NAN_SETTER(_VkHdrMetadataEXT::SetmaxContentLightLevel) {
  _VkHdrMetadataEXT *self = Nan::ObjectWrap::Unwrap<_VkHdrMetadataEXT>(info.This());
  if (value->IsNumber()) {
    self->instance.maxContentLightLevel = static_cast<float>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkHdrMetadataEXT.maxContentLightLevel' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// maxFrameAverageLightLevel
NAN_GETTER(_VkHdrMetadataEXT::GetmaxFrameAverageLightLevel) {
  _VkHdrMetadataEXT *self = Nan::ObjectWrap::Unwrap<_VkHdrMetadataEXT>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxFrameAverageLightLevel));
}NAN_SETTER(_VkHdrMetadataEXT::SetmaxFrameAverageLightLevel) {
  _VkHdrMetadataEXT *self = Nan::ObjectWrap::Unwrap<_VkHdrMetadataEXT>(info.This());
  if (value->IsNumber()) {
    self->instance.maxFrameAverageLightLevel = static_cast<float>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkHdrMetadataEXT.maxFrameAverageLightLevel' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}