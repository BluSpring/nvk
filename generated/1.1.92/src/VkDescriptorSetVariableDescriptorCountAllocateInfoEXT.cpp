/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY nvk v0.1.5
 */
#include "utils.h"
#include "index.h"
#include "VkDescriptorSetVariableDescriptorCountAllocateInfoEXT.h"

Nan::Persistent<v8::FunctionTemplate> _VkDescriptorSetVariableDescriptorCountAllocateInfoEXT::constructor;

_VkDescriptorSetVariableDescriptorCountAllocateInfoEXT::_VkDescriptorSetVariableDescriptorCountAllocateInfoEXT() {
  instance.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT;
  
}

_VkDescriptorSetVariableDescriptorCountAllocateInfoEXT::~_VkDescriptorSetVariableDescriptorCountAllocateInfoEXT() {
  //printf("VkDescriptorSetVariableDescriptorCountAllocateInfoEXT deconstructed!!\n");
  
  
  
  pDescriptorCounts.Reset();
  
}

void _VkDescriptorSetVariableDescriptorCountAllocateInfoEXT::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkDescriptorSetVariableDescriptorCountAllocateInfoEXT::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkDescriptorSetVariableDescriptorCountAllocateInfoEXT").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("sType").ToLocalChecked(), GetsType, SetsType, ctor);
  SetPrototypeAccessor(proto, Nan::New("descriptorSetCount").ToLocalChecked(), GetdescriptorSetCount, SetdescriptorSetCount, ctor);
  SetPrototypeAccessor(proto, Nan::New("pDescriptorCounts").ToLocalChecked(), GetpDescriptorCounts, SetpDescriptorCounts, ctor);
  Nan::Set(target, Nan::New("VkDescriptorSetVariableDescriptorCountAllocateInfoEXT").ToLocalChecked(), ctor->GetFunction());
}

bool _VkDescriptorSetVariableDescriptorCountAllocateInfoEXT::flush() {
  _VkDescriptorSetVariableDescriptorCountAllocateInfoEXT *self = this;
  
  return true;
}

NAN_METHOD(_VkDescriptorSetVariableDescriptorCountAllocateInfoEXT::New) {
  if (info.IsConstructCall()) {
    _VkDescriptorSetVariableDescriptorCountAllocateInfoEXT* self = new _VkDescriptorSetVariableDescriptorCountAllocateInfoEXT();
    self->Wrap(info.Holder());
    
    if (info[0]->IsObject()) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(info[0]).ToLocalChecked();
      v8::Local<v8::String> sAccess0 = Nan::New("sType").ToLocalChecked();
      v8::Local<v8::String> sAccess2 = Nan::New("descriptorSetCount").ToLocalChecked();
      v8::Local<v8::String> sAccess3 = Nan::New("pDescriptorCounts").ToLocalChecked();
      if (obj->Has(sAccess0)) info.This()->Set(sAccess0, obj->Get(sAccess0));
      if (obj->Has(sAccess2)) info.This()->Set(sAccess2, obj->Get(sAccess2));
      if (obj->Has(sAccess3)) info.This()->Set(sAccess3, obj->Get(sAccess3));
      
    }
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkDescriptorSetVariableDescriptorCountAllocateInfoEXT constructor cannot be invoked without 'new'");
  }
};

// sType
NAN_GETTER(_VkDescriptorSetVariableDescriptorCountAllocateInfoEXT::GetsType) {
  _VkDescriptorSetVariableDescriptorCountAllocateInfoEXT *self = Nan::ObjectWrap::Unwrap<_VkDescriptorSetVariableDescriptorCountAllocateInfoEXT>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sType));
}NAN_SETTER(_VkDescriptorSetVariableDescriptorCountAllocateInfoEXT::SetsType) {
  _VkDescriptorSetVariableDescriptorCountAllocateInfoEXT *self = Nan::ObjectWrap::Unwrap<_VkDescriptorSetVariableDescriptorCountAllocateInfoEXT>(info.This());
  if (value->IsNumber()) {
    self->instance.sType = static_cast<VkStructureType>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkDescriptorSetVariableDescriptorCountAllocateInfoEXT.sType' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// descriptorSetCount
NAN_GETTER(_VkDescriptorSetVariableDescriptorCountAllocateInfoEXT::GetdescriptorSetCount) {
  _VkDescriptorSetVariableDescriptorCountAllocateInfoEXT *self = Nan::ObjectWrap::Unwrap<_VkDescriptorSetVariableDescriptorCountAllocateInfoEXT>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.descriptorSetCount));
}NAN_SETTER(_VkDescriptorSetVariableDescriptorCountAllocateInfoEXT::SetdescriptorSetCount) {
  _VkDescriptorSetVariableDescriptorCountAllocateInfoEXT *self = Nan::ObjectWrap::Unwrap<_VkDescriptorSetVariableDescriptorCountAllocateInfoEXT>(info.This());
  if (value->IsNumber()) {
    self->instance.descriptorSetCount = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkDescriptorSetVariableDescriptorCountAllocateInfoEXT.descriptorSetCount' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// pDescriptorCounts
NAN_GETTER(_VkDescriptorSetVariableDescriptorCountAllocateInfoEXT::GetpDescriptorCounts) {
  _VkDescriptorSetVariableDescriptorCountAllocateInfoEXT *self = Nan::ObjectWrap::Unwrap<_VkDescriptorSetVariableDescriptorCountAllocateInfoEXT>(info.This());
  if (self->pDescriptorCounts.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->pDescriptorCounts);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkDescriptorSetVariableDescriptorCountAllocateInfoEXT::SetpDescriptorCounts) {
  _VkDescriptorSetVariableDescriptorCountAllocateInfoEXT *self = Nan::ObjectWrap::Unwrap<_VkDescriptorSetVariableDescriptorCountAllocateInfoEXT>(info.This());
  
    // js
    if (value->IsArrayBufferView()) {
      if (value->IsUint32Array()) {
        self->pDescriptorCounts.Reset<v8::Array>(value.As<v8::Array>());
      } else {
        
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Uint32Array' for 'VkDescriptorSetVariableDescriptorCountAllocateInfoEXT.pDescriptorCounts' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
        return;
      }
    } else if (value->IsNull()) {
      self->pDescriptorCounts.Reset();
    } else {
      
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Uint32Array' for 'VkDescriptorSetVariableDescriptorCountAllocateInfoEXT.pDescriptorCounts' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
      return;
    }
  
  
  // vulkan
  if (value->IsArrayBufferView()) {
    self->instance.pDescriptorCounts = getTypedArrayData<uint32_t>(Nan::To<v8::Object>(value).ToLocalChecked(), nullptr);
  } else {
    self->instance.pDescriptorCounts = nullptr;
  }
}