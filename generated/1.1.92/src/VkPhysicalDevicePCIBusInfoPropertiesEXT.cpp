/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY node-vulkan v0.1.0
 */
#include "utils.h"
#include "index.h"
#include "VkPhysicalDevicePCIBusInfoPropertiesEXT.h"

Nan::Persistent<v8::FunctionTemplate> _VkPhysicalDevicePCIBusInfoPropertiesEXT::constructor;

_VkPhysicalDevicePCIBusInfoPropertiesEXT::_VkPhysicalDevicePCIBusInfoPropertiesEXT() {
  instance.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT;
  
}

_VkPhysicalDevicePCIBusInfoPropertiesEXT::~_VkPhysicalDevicePCIBusInfoPropertiesEXT() {
  //printf("VkPhysicalDevicePCIBusInfoPropertiesEXT deconstructed!!\n");
  
  
  
  
  
  
}

void _VkPhysicalDevicePCIBusInfoPropertiesEXT::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkPhysicalDevicePCIBusInfoPropertiesEXT::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkPhysicalDevicePCIBusInfoPropertiesEXT").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("sType").ToLocalChecked(), GetsType, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("pciDomain").ToLocalChecked(), GetpciDomain, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("pciBus").ToLocalChecked(), GetpciBus, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("pciDevice").ToLocalChecked(), GetpciDevice, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("pciFunction").ToLocalChecked(), GetpciFunction, nullptr, ctor);
  Nan::Set(target, Nan::New("VkPhysicalDevicePCIBusInfoPropertiesEXT").ToLocalChecked(), ctor->GetFunction());
}

bool _VkPhysicalDevicePCIBusInfoPropertiesEXT::flush() {
  _VkPhysicalDevicePCIBusInfoPropertiesEXT *self = this;
  
  return true;
}

NAN_METHOD(_VkPhysicalDevicePCIBusInfoPropertiesEXT::New) {
  if (info.IsConstructCall()) {
    _VkPhysicalDevicePCIBusInfoPropertiesEXT* self = new _VkPhysicalDevicePCIBusInfoPropertiesEXT();
    self->Wrap(info.Holder());
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkPhysicalDevicePCIBusInfoPropertiesEXT constructor cannot be invoked without 'new'");
  }
};

// sType
NAN_GETTER(_VkPhysicalDevicePCIBusInfoPropertiesEXT::GetsType) {
  _VkPhysicalDevicePCIBusInfoPropertiesEXT *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDevicePCIBusInfoPropertiesEXT>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sType));
}// pciDomain
NAN_GETTER(_VkPhysicalDevicePCIBusInfoPropertiesEXT::GetpciDomain) {
  _VkPhysicalDevicePCIBusInfoPropertiesEXT *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDevicePCIBusInfoPropertiesEXT>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.pciDomain));
}// pciBus
NAN_GETTER(_VkPhysicalDevicePCIBusInfoPropertiesEXT::GetpciBus) {
  _VkPhysicalDevicePCIBusInfoPropertiesEXT *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDevicePCIBusInfoPropertiesEXT>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.pciBus));
}// pciDevice
NAN_GETTER(_VkPhysicalDevicePCIBusInfoPropertiesEXT::GetpciDevice) {
  _VkPhysicalDevicePCIBusInfoPropertiesEXT *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDevicePCIBusInfoPropertiesEXT>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.pciDevice));
}// pciFunction
NAN_GETTER(_VkPhysicalDevicePCIBusInfoPropertiesEXT::GetpciFunction) {
  _VkPhysicalDevicePCIBusInfoPropertiesEXT *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDevicePCIBusInfoPropertiesEXT>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.pciFunction));
}