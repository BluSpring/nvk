/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY nvk v0.1.5
 */
#include "utils.h"
#include "index.h"
#include "VkDebugUtilsObjectNameInfoEXT.h"

Nan::Persistent<v8::FunctionTemplate> _VkDebugUtilsObjectNameInfoEXT::constructor;

_VkDebugUtilsObjectNameInfoEXT::_VkDebugUtilsObjectNameInfoEXT() {
  instance.sType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT;
  
}

_VkDebugUtilsObjectNameInfoEXT::~_VkDebugUtilsObjectNameInfoEXT() {
  //printf("VkDebugUtilsObjectNameInfoEXT deconstructed!!\n");
  
  
  
  
  pObjectName.Reset();
  
}

void _VkDebugUtilsObjectNameInfoEXT::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkDebugUtilsObjectNameInfoEXT::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkDebugUtilsObjectNameInfoEXT").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("sType").ToLocalChecked(), GetsType, SetsType, ctor);
  SetPrototypeAccessor(proto, Nan::New("objectType").ToLocalChecked(), GetobjectType, SetobjectType, ctor);
  SetPrototypeAccessor(proto, Nan::New("objectHandle").ToLocalChecked(), GetobjectHandle, SetobjectHandle, ctor);
  SetPrototypeAccessor(proto, Nan::New("pObjectName").ToLocalChecked(), GetpObjectName, SetpObjectName, ctor);
  Nan::Set(target, Nan::New("VkDebugUtilsObjectNameInfoEXT").ToLocalChecked(), ctor->GetFunction());
}

bool _VkDebugUtilsObjectNameInfoEXT::flush() {
  _VkDebugUtilsObjectNameInfoEXT *self = this;
  
  return true;
}

NAN_METHOD(_VkDebugUtilsObjectNameInfoEXT::New) {
  if (info.IsConstructCall()) {
    _VkDebugUtilsObjectNameInfoEXT* self = new _VkDebugUtilsObjectNameInfoEXT();
    self->Wrap(info.Holder());
    
    if (info[0]->IsObject()) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(info[0]).ToLocalChecked();
      v8::Local<v8::String> sAccess0 = Nan::New("sType").ToLocalChecked();
      v8::Local<v8::String> sAccess2 = Nan::New("objectType").ToLocalChecked();
      v8::Local<v8::String> sAccess3 = Nan::New("objectHandle").ToLocalChecked();
      v8::Local<v8::String> sAccess4 = Nan::New("pObjectName").ToLocalChecked();
      if (obj->Has(sAccess0)) info.This()->Set(sAccess0, obj->Get(sAccess0));
      if (obj->Has(sAccess2)) info.This()->Set(sAccess2, obj->Get(sAccess2));
      if (obj->Has(sAccess3)) info.This()->Set(sAccess3, obj->Get(sAccess3));
      if (obj->Has(sAccess4)) info.This()->Set(sAccess4, obj->Get(sAccess4));
      
    }
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkDebugUtilsObjectNameInfoEXT constructor cannot be invoked without 'new'");
  }
};

// sType
NAN_GETTER(_VkDebugUtilsObjectNameInfoEXT::GetsType) {
  _VkDebugUtilsObjectNameInfoEXT *self = Nan::ObjectWrap::Unwrap<_VkDebugUtilsObjectNameInfoEXT>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sType));
}NAN_SETTER(_VkDebugUtilsObjectNameInfoEXT::SetsType) {
  _VkDebugUtilsObjectNameInfoEXT *self = Nan::ObjectWrap::Unwrap<_VkDebugUtilsObjectNameInfoEXT>(info.This());
  if (value->IsNumber()) {
    self->instance.sType = static_cast<VkStructureType>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkDebugUtilsObjectNameInfoEXT.sType' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// objectType
NAN_GETTER(_VkDebugUtilsObjectNameInfoEXT::GetobjectType) {
  _VkDebugUtilsObjectNameInfoEXT *self = Nan::ObjectWrap::Unwrap<_VkDebugUtilsObjectNameInfoEXT>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.objectType));
}NAN_SETTER(_VkDebugUtilsObjectNameInfoEXT::SetobjectType) {
  _VkDebugUtilsObjectNameInfoEXT *self = Nan::ObjectWrap::Unwrap<_VkDebugUtilsObjectNameInfoEXT>(info.This());
  if (value->IsNumber()) {
    self->instance.objectType = static_cast<VkObjectType>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkDebugUtilsObjectNameInfoEXT.objectType' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// objectHandle
NAN_GETTER(_VkDebugUtilsObjectNameInfoEXT::GetobjectHandle) {
  _VkDebugUtilsObjectNameInfoEXT *self = Nan::ObjectWrap::Unwrap<_VkDebugUtilsObjectNameInfoEXT>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.objectHandle));
}NAN_SETTER(_VkDebugUtilsObjectNameInfoEXT::SetobjectHandle) {
  _VkDebugUtilsObjectNameInfoEXT *self = Nan::ObjectWrap::Unwrap<_VkDebugUtilsObjectNameInfoEXT>(info.This());
  if (value->IsNumber()) {
    self->instance.objectHandle = static_cast<uint64_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkDebugUtilsObjectNameInfoEXT.objectHandle' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// pObjectName
NAN_GETTER(_VkDebugUtilsObjectNameInfoEXT::GetpObjectName) {
  _VkDebugUtilsObjectNameInfoEXT *self = Nan::ObjectWrap::Unwrap<_VkDebugUtilsObjectNameInfoEXT>(info.This());
  if (self->pObjectName.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::String> str = Nan::New(self->pObjectName);
    info.GetReturnValue().Set(str);
  }
}NAN_SETTER(_VkDebugUtilsObjectNameInfoEXT::SetpObjectName) {
  _VkDebugUtilsObjectNameInfoEXT *self = Nan::ObjectWrap::Unwrap<_VkDebugUtilsObjectNameInfoEXT>(info.This());
  if (value->IsString()) {
    Nan::Persistent<v8::String, v8::CopyablePersistentTraits<v8::String>> str(Nan::To<v8::String>(value).ToLocalChecked());
    self->pObjectName = str;
    // free previous
    if (self->instance.pObjectName) {
      delete[] self->instance.pObjectName;
    }
    self->instance.pObjectName = copyV8String(value);
  } else if (value->IsNull()) {
    self->instance.pObjectName = nullptr;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'String' for 'VkDebugUtilsObjectNameInfoEXT.pObjectName' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}