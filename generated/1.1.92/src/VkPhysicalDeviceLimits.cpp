/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY nvk v0.1.5
 */
#include "utils.h"
#include <string.h>
#include "index.h"
#include "VkPhysicalDeviceLimits.h"

Nan::Persistent<v8::FunctionTemplate> _VkPhysicalDeviceLimits::constructor;

_VkPhysicalDeviceLimits::_VkPhysicalDeviceLimits() {
  
  vmaxComputeWorkGroupCount = new std::vector<uint32_t>;
  vmaxComputeWorkGroupSize = new std::vector<uint32_t>;
  vmaxViewportDimensions = new std::vector<uint32_t>;
  vviewportBoundsRange = new std::vector<float>;
  vpointSizeRange = new std::vector<float>;
  vlineWidthRange = new std::vector<float>;
  
}

_VkPhysicalDeviceLimits::~_VkPhysicalDeviceLimits() {
  //printf("VkPhysicalDeviceLimits deconstructed!!\n");
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  vmaxComputeWorkGroupCount->clear();
  delete vmaxComputeWorkGroupCount;
  
  
  
  vmaxComputeWorkGroupSize->clear();
  delete vmaxComputeWorkGroupSize;
  
  
  
  
  
  
  
  
  
  
  vmaxViewportDimensions->clear();
  delete vmaxViewportDimensions;
  
  
  vviewportBoundsRange->clear();
  delete vviewportBoundsRange;
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  vpointSizeRange->clear();
  delete vpointSizeRange;
  
  
  vlineWidthRange->clear();
  delete vlineWidthRange;
  
  
  
  
  
  
  
  
  
}

void _VkPhysicalDeviceLimits::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkPhysicalDeviceLimits::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkPhysicalDeviceLimits").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("maxImageDimension1D").ToLocalChecked(), GetmaxImageDimension1D, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxImageDimension2D").ToLocalChecked(), GetmaxImageDimension2D, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxImageDimension3D").ToLocalChecked(), GetmaxImageDimension3D, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxImageDimensionCube").ToLocalChecked(), GetmaxImageDimensionCube, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxImageArrayLayers").ToLocalChecked(), GetmaxImageArrayLayers, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxTexelBufferElements").ToLocalChecked(), GetmaxTexelBufferElements, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxUniformBufferRange").ToLocalChecked(), GetmaxUniformBufferRange, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxStorageBufferRange").ToLocalChecked(), GetmaxStorageBufferRange, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxPushConstantsSize").ToLocalChecked(), GetmaxPushConstantsSize, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxMemoryAllocationCount").ToLocalChecked(), GetmaxMemoryAllocationCount, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxSamplerAllocationCount").ToLocalChecked(), GetmaxSamplerAllocationCount, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("bufferImageGranularity").ToLocalChecked(), GetbufferImageGranularity, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("sparseAddressSpaceSize").ToLocalChecked(), GetsparseAddressSpaceSize, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxBoundDescriptorSets").ToLocalChecked(), GetmaxBoundDescriptorSets, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxPerStageDescriptorSamplers").ToLocalChecked(), GetmaxPerStageDescriptorSamplers, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxPerStageDescriptorUniformBuffers").ToLocalChecked(), GetmaxPerStageDescriptorUniformBuffers, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxPerStageDescriptorStorageBuffers").ToLocalChecked(), GetmaxPerStageDescriptorStorageBuffers, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxPerStageDescriptorSampledImages").ToLocalChecked(), GetmaxPerStageDescriptorSampledImages, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxPerStageDescriptorStorageImages").ToLocalChecked(), GetmaxPerStageDescriptorStorageImages, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxPerStageDescriptorInputAttachments").ToLocalChecked(), GetmaxPerStageDescriptorInputAttachments, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxPerStageResources").ToLocalChecked(), GetmaxPerStageResources, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxDescriptorSetSamplers").ToLocalChecked(), GetmaxDescriptorSetSamplers, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxDescriptorSetUniformBuffers").ToLocalChecked(), GetmaxDescriptorSetUniformBuffers, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxDescriptorSetUniformBuffersDynamic").ToLocalChecked(), GetmaxDescriptorSetUniformBuffersDynamic, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxDescriptorSetStorageBuffers").ToLocalChecked(), GetmaxDescriptorSetStorageBuffers, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxDescriptorSetStorageBuffersDynamic").ToLocalChecked(), GetmaxDescriptorSetStorageBuffersDynamic, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxDescriptorSetSampledImages").ToLocalChecked(), GetmaxDescriptorSetSampledImages, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxDescriptorSetStorageImages").ToLocalChecked(), GetmaxDescriptorSetStorageImages, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxDescriptorSetInputAttachments").ToLocalChecked(), GetmaxDescriptorSetInputAttachments, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxVertexInputAttributes").ToLocalChecked(), GetmaxVertexInputAttributes, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxVertexInputBindings").ToLocalChecked(), GetmaxVertexInputBindings, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxVertexInputAttributeOffset").ToLocalChecked(), GetmaxVertexInputAttributeOffset, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxVertexInputBindingStride").ToLocalChecked(), GetmaxVertexInputBindingStride, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxVertexOutputComponents").ToLocalChecked(), GetmaxVertexOutputComponents, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxTessellationGenerationLevel").ToLocalChecked(), GetmaxTessellationGenerationLevel, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxTessellationPatchSize").ToLocalChecked(), GetmaxTessellationPatchSize, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxTessellationControlPerVertexInputComponents").ToLocalChecked(), GetmaxTessellationControlPerVertexInputComponents, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxTessellationControlPerVertexOutputComponents").ToLocalChecked(), GetmaxTessellationControlPerVertexOutputComponents, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxTessellationControlPerPatchOutputComponents").ToLocalChecked(), GetmaxTessellationControlPerPatchOutputComponents, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxTessellationControlTotalOutputComponents").ToLocalChecked(), GetmaxTessellationControlTotalOutputComponents, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxTessellationEvaluationInputComponents").ToLocalChecked(), GetmaxTessellationEvaluationInputComponents, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxTessellationEvaluationOutputComponents").ToLocalChecked(), GetmaxTessellationEvaluationOutputComponents, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxGeometryShaderInvocations").ToLocalChecked(), GetmaxGeometryShaderInvocations, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxGeometryInputComponents").ToLocalChecked(), GetmaxGeometryInputComponents, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxGeometryOutputComponents").ToLocalChecked(), GetmaxGeometryOutputComponents, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxGeometryOutputVertices").ToLocalChecked(), GetmaxGeometryOutputVertices, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxGeometryTotalOutputComponents").ToLocalChecked(), GetmaxGeometryTotalOutputComponents, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxFragmentInputComponents").ToLocalChecked(), GetmaxFragmentInputComponents, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxFragmentOutputAttachments").ToLocalChecked(), GetmaxFragmentOutputAttachments, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxFragmentDualSrcAttachments").ToLocalChecked(), GetmaxFragmentDualSrcAttachments, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxFragmentCombinedOutputResources").ToLocalChecked(), GetmaxFragmentCombinedOutputResources, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxComputeSharedMemorySize").ToLocalChecked(), GetmaxComputeSharedMemorySize, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxComputeWorkGroupCount").ToLocalChecked(), GetmaxComputeWorkGroupCount, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxComputeWorkGroupInvocations").ToLocalChecked(), GetmaxComputeWorkGroupInvocations, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxComputeWorkGroupSize").ToLocalChecked(), GetmaxComputeWorkGroupSize, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("subPixelPrecisionBits").ToLocalChecked(), GetsubPixelPrecisionBits, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("subTexelPrecisionBits").ToLocalChecked(), GetsubTexelPrecisionBits, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("mipmapPrecisionBits").ToLocalChecked(), GetmipmapPrecisionBits, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxDrawIndexedIndexValue").ToLocalChecked(), GetmaxDrawIndexedIndexValue, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxDrawIndirectCount").ToLocalChecked(), GetmaxDrawIndirectCount, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxSamplerLodBias").ToLocalChecked(), GetmaxSamplerLodBias, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxSamplerAnisotropy").ToLocalChecked(), GetmaxSamplerAnisotropy, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxViewports").ToLocalChecked(), GetmaxViewports, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxViewportDimensions").ToLocalChecked(), GetmaxViewportDimensions, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("viewportBoundsRange").ToLocalChecked(), GetviewportBoundsRange, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("viewportSubPixelBits").ToLocalChecked(), GetviewportSubPixelBits, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("minMemoryMapAlignment").ToLocalChecked(), GetminMemoryMapAlignment, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("minTexelBufferOffsetAlignment").ToLocalChecked(), GetminTexelBufferOffsetAlignment, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("minUniformBufferOffsetAlignment").ToLocalChecked(), GetminUniformBufferOffsetAlignment, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("minStorageBufferOffsetAlignment").ToLocalChecked(), GetminStorageBufferOffsetAlignment, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("minTexelOffset").ToLocalChecked(), GetminTexelOffset, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxTexelOffset").ToLocalChecked(), GetmaxTexelOffset, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("minTexelGatherOffset").ToLocalChecked(), GetminTexelGatherOffset, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxTexelGatherOffset").ToLocalChecked(), GetmaxTexelGatherOffset, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("minInterpolationOffset").ToLocalChecked(), GetminInterpolationOffset, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxInterpolationOffset").ToLocalChecked(), GetmaxInterpolationOffset, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("subPixelInterpolationOffsetBits").ToLocalChecked(), GetsubPixelInterpolationOffsetBits, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxFramebufferWidth").ToLocalChecked(), GetmaxFramebufferWidth, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxFramebufferHeight").ToLocalChecked(), GetmaxFramebufferHeight, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxFramebufferLayers").ToLocalChecked(), GetmaxFramebufferLayers, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("framebufferColorSampleCounts").ToLocalChecked(), GetframebufferColorSampleCounts, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("framebufferDepthSampleCounts").ToLocalChecked(), GetframebufferDepthSampleCounts, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("framebufferStencilSampleCounts").ToLocalChecked(), GetframebufferStencilSampleCounts, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("framebufferNoAttachmentsSampleCounts").ToLocalChecked(), GetframebufferNoAttachmentsSampleCounts, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxColorAttachments").ToLocalChecked(), GetmaxColorAttachments, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("sampledImageColorSampleCounts").ToLocalChecked(), GetsampledImageColorSampleCounts, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("sampledImageIntegerSampleCounts").ToLocalChecked(), GetsampledImageIntegerSampleCounts, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("sampledImageDepthSampleCounts").ToLocalChecked(), GetsampledImageDepthSampleCounts, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("sampledImageStencilSampleCounts").ToLocalChecked(), GetsampledImageStencilSampleCounts, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("storageImageSampleCounts").ToLocalChecked(), GetstorageImageSampleCounts, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxSampleMaskWords").ToLocalChecked(), GetmaxSampleMaskWords, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("timestampComputeAndGraphics").ToLocalChecked(), GettimestampComputeAndGraphics, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("timestampPeriod").ToLocalChecked(), GettimestampPeriod, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxClipDistances").ToLocalChecked(), GetmaxClipDistances, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxCullDistances").ToLocalChecked(), GetmaxCullDistances, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxCombinedClipAndCullDistances").ToLocalChecked(), GetmaxCombinedClipAndCullDistances, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("discreteQueuePriorities").ToLocalChecked(), GetdiscreteQueuePriorities, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("pointSizeRange").ToLocalChecked(), GetpointSizeRange, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("lineWidthRange").ToLocalChecked(), GetlineWidthRange, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("pointSizeGranularity").ToLocalChecked(), GetpointSizeGranularity, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("lineWidthGranularity").ToLocalChecked(), GetlineWidthGranularity, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("strictLines").ToLocalChecked(), GetstrictLines, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("standardSampleLocations").ToLocalChecked(), GetstandardSampleLocations, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("optimalBufferCopyOffsetAlignment").ToLocalChecked(), GetoptimalBufferCopyOffsetAlignment, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("optimalBufferCopyRowPitchAlignment").ToLocalChecked(), GetoptimalBufferCopyRowPitchAlignment, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("nonCoherentAtomSize").ToLocalChecked(), GetnonCoherentAtomSize, nullptr, ctor);
  Nan::Set(target, Nan::New("VkPhysicalDeviceLimits").ToLocalChecked(), ctor->GetFunction());
}

bool _VkPhysicalDeviceLimits::flush() {
  _VkPhysicalDeviceLimits *self = this;
  if (!(self->maxComputeWorkGroupCount.IsEmpty())) {
    v8::Local<v8::Value> value = Nan::New(self->maxComputeWorkGroupCount);
    
  }if (!(self->maxComputeWorkGroupSize.IsEmpty())) {
    v8::Local<v8::Value> value = Nan::New(self->maxComputeWorkGroupSize);
    
  }if (!(self->maxViewportDimensions.IsEmpty())) {
    v8::Local<v8::Value> value = Nan::New(self->maxViewportDimensions);
    
  }if (!(self->viewportBoundsRange.IsEmpty())) {
    v8::Local<v8::Value> value = Nan::New(self->viewportBoundsRange);
    
  }if (!(self->pointSizeRange.IsEmpty())) {
    v8::Local<v8::Value> value = Nan::New(self->pointSizeRange);
    
  }if (!(self->lineWidthRange.IsEmpty())) {
    v8::Local<v8::Value> value = Nan::New(self->lineWidthRange);
    
  }
  return true;
}

NAN_METHOD(_VkPhysicalDeviceLimits::New) {
  if (info.IsConstructCall()) {
    _VkPhysicalDeviceLimits* self = new _VkPhysicalDeviceLimits();
    self->Wrap(info.Holder());
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkPhysicalDeviceLimits constructor cannot be invoked without 'new'");
  }
};

// maxImageDimension1D
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxImageDimension1D) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxImageDimension1D));
}// maxImageDimension2D
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxImageDimension2D) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxImageDimension2D));
}// maxImageDimension3D
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxImageDimension3D) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxImageDimension3D));
}// maxImageDimensionCube
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxImageDimensionCube) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxImageDimensionCube));
}// maxImageArrayLayers
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxImageArrayLayers) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxImageArrayLayers));
}// maxTexelBufferElements
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxTexelBufferElements) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxTexelBufferElements));
}// maxUniformBufferRange
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxUniformBufferRange) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxUniformBufferRange));
}// maxStorageBufferRange
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxStorageBufferRange) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxStorageBufferRange));
}// maxPushConstantsSize
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxPushConstantsSize) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxPushConstantsSize));
}// maxMemoryAllocationCount
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxMemoryAllocationCount) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxMemoryAllocationCount));
}// maxSamplerAllocationCount
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxSamplerAllocationCount) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxSamplerAllocationCount));
}// bufferImageGranularity
NAN_GETTER(_VkPhysicalDeviceLimits::GetbufferImageGranularity) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.bufferImageGranularity));
}// sparseAddressSpaceSize
NAN_GETTER(_VkPhysicalDeviceLimits::GetsparseAddressSpaceSize) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sparseAddressSpaceSize));
}// maxBoundDescriptorSets
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxBoundDescriptorSets) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxBoundDescriptorSets));
}// maxPerStageDescriptorSamplers
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxPerStageDescriptorSamplers) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxPerStageDescriptorSamplers));
}// maxPerStageDescriptorUniformBuffers
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxPerStageDescriptorUniformBuffers) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxPerStageDescriptorUniformBuffers));
}// maxPerStageDescriptorStorageBuffers
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxPerStageDescriptorStorageBuffers) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxPerStageDescriptorStorageBuffers));
}// maxPerStageDescriptorSampledImages
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxPerStageDescriptorSampledImages) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxPerStageDescriptorSampledImages));
}// maxPerStageDescriptorStorageImages
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxPerStageDescriptorStorageImages) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxPerStageDescriptorStorageImages));
}// maxPerStageDescriptorInputAttachments
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxPerStageDescriptorInputAttachments) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxPerStageDescriptorInputAttachments));
}// maxPerStageResources
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxPerStageResources) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxPerStageResources));
}// maxDescriptorSetSamplers
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxDescriptorSetSamplers) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxDescriptorSetSamplers));
}// maxDescriptorSetUniformBuffers
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxDescriptorSetUniformBuffers) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxDescriptorSetUniformBuffers));
}// maxDescriptorSetUniformBuffersDynamic
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxDescriptorSetUniformBuffersDynamic) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxDescriptorSetUniformBuffersDynamic));
}// maxDescriptorSetStorageBuffers
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxDescriptorSetStorageBuffers) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxDescriptorSetStorageBuffers));
}// maxDescriptorSetStorageBuffersDynamic
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxDescriptorSetStorageBuffersDynamic) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxDescriptorSetStorageBuffersDynamic));
}// maxDescriptorSetSampledImages
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxDescriptorSetSampledImages) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxDescriptorSetSampledImages));
}// maxDescriptorSetStorageImages
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxDescriptorSetStorageImages) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxDescriptorSetStorageImages));
}// maxDescriptorSetInputAttachments
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxDescriptorSetInputAttachments) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxDescriptorSetInputAttachments));
}// maxVertexInputAttributes
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxVertexInputAttributes) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxVertexInputAttributes));
}// maxVertexInputBindings
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxVertexInputBindings) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxVertexInputBindings));
}// maxVertexInputAttributeOffset
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxVertexInputAttributeOffset) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxVertexInputAttributeOffset));
}// maxVertexInputBindingStride
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxVertexInputBindingStride) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxVertexInputBindingStride));
}// maxVertexOutputComponents
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxVertexOutputComponents) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxVertexOutputComponents));
}// maxTessellationGenerationLevel
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxTessellationGenerationLevel) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxTessellationGenerationLevel));
}// maxTessellationPatchSize
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxTessellationPatchSize) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxTessellationPatchSize));
}// maxTessellationControlPerVertexInputComponents
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxTessellationControlPerVertexInputComponents) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxTessellationControlPerVertexInputComponents));
}// maxTessellationControlPerVertexOutputComponents
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxTessellationControlPerVertexOutputComponents) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxTessellationControlPerVertexOutputComponents));
}// maxTessellationControlPerPatchOutputComponents
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxTessellationControlPerPatchOutputComponents) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxTessellationControlPerPatchOutputComponents));
}// maxTessellationControlTotalOutputComponents
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxTessellationControlTotalOutputComponents) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxTessellationControlTotalOutputComponents));
}// maxTessellationEvaluationInputComponents
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxTessellationEvaluationInputComponents) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxTessellationEvaluationInputComponents));
}// maxTessellationEvaluationOutputComponents
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxTessellationEvaluationOutputComponents) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxTessellationEvaluationOutputComponents));
}// maxGeometryShaderInvocations
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxGeometryShaderInvocations) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxGeometryShaderInvocations));
}// maxGeometryInputComponents
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxGeometryInputComponents) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxGeometryInputComponents));
}// maxGeometryOutputComponents
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxGeometryOutputComponents) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxGeometryOutputComponents));
}// maxGeometryOutputVertices
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxGeometryOutputVertices) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxGeometryOutputVertices));
}// maxGeometryTotalOutputComponents
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxGeometryTotalOutputComponents) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxGeometryTotalOutputComponents));
}// maxFragmentInputComponents
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxFragmentInputComponents) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxFragmentInputComponents));
}// maxFragmentOutputAttachments
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxFragmentOutputAttachments) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxFragmentOutputAttachments));
}// maxFragmentDualSrcAttachments
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxFragmentDualSrcAttachments) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxFragmentDualSrcAttachments));
}// maxFragmentCombinedOutputResources
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxFragmentCombinedOutputResources) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxFragmentCombinedOutputResources));
}// maxComputeSharedMemorySize
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxComputeSharedMemorySize) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxComputeSharedMemorySize));
}// maxComputeWorkGroupCount
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxComputeWorkGroupCount) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  if (self->maxComputeWorkGroupCount.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    info.GetReturnValue().Set(Nan::New(self->maxComputeWorkGroupCount));
  }
}// maxComputeWorkGroupInvocations
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxComputeWorkGroupInvocations) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxComputeWorkGroupInvocations));
}// maxComputeWorkGroupSize
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxComputeWorkGroupSize) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  if (self->maxComputeWorkGroupSize.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    info.GetReturnValue().Set(Nan::New(self->maxComputeWorkGroupSize));
  }
}// subPixelPrecisionBits
NAN_GETTER(_VkPhysicalDeviceLimits::GetsubPixelPrecisionBits) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.subPixelPrecisionBits));
}// subTexelPrecisionBits
NAN_GETTER(_VkPhysicalDeviceLimits::GetsubTexelPrecisionBits) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.subTexelPrecisionBits));
}// mipmapPrecisionBits
NAN_GETTER(_VkPhysicalDeviceLimits::GetmipmapPrecisionBits) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.mipmapPrecisionBits));
}// maxDrawIndexedIndexValue
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxDrawIndexedIndexValue) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxDrawIndexedIndexValue));
}// maxDrawIndirectCount
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxDrawIndirectCount) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxDrawIndirectCount));
}// maxSamplerLodBias
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxSamplerLodBias) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxSamplerLodBias));
}// maxSamplerAnisotropy
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxSamplerAnisotropy) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxSamplerAnisotropy));
}// maxViewports
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxViewports) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxViewports));
}// maxViewportDimensions
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxViewportDimensions) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  if (self->maxViewportDimensions.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    info.GetReturnValue().Set(Nan::New(self->maxViewportDimensions));
  }
}// viewportBoundsRange
NAN_GETTER(_VkPhysicalDeviceLimits::GetviewportBoundsRange) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  if (self->viewportBoundsRange.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    info.GetReturnValue().Set(Nan::New(self->viewportBoundsRange));
  }
}// viewportSubPixelBits
NAN_GETTER(_VkPhysicalDeviceLimits::GetviewportSubPixelBits) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.viewportSubPixelBits));
}// minMemoryMapAlignment
NAN_GETTER(_VkPhysicalDeviceLimits::GetminMemoryMapAlignment) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.minMemoryMapAlignment));
}// minTexelBufferOffsetAlignment
NAN_GETTER(_VkPhysicalDeviceLimits::GetminTexelBufferOffsetAlignment) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.minTexelBufferOffsetAlignment));
}// minUniformBufferOffsetAlignment
NAN_GETTER(_VkPhysicalDeviceLimits::GetminUniformBufferOffsetAlignment) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.minUniformBufferOffsetAlignment));
}// minStorageBufferOffsetAlignment
NAN_GETTER(_VkPhysicalDeviceLimits::GetminStorageBufferOffsetAlignment) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.minStorageBufferOffsetAlignment));
}// minTexelOffset
NAN_GETTER(_VkPhysicalDeviceLimits::GetminTexelOffset) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.minTexelOffset));
}// maxTexelOffset
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxTexelOffset) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxTexelOffset));
}// minTexelGatherOffset
NAN_GETTER(_VkPhysicalDeviceLimits::GetminTexelGatherOffset) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.minTexelGatherOffset));
}// maxTexelGatherOffset
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxTexelGatherOffset) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxTexelGatherOffset));
}// minInterpolationOffset
NAN_GETTER(_VkPhysicalDeviceLimits::GetminInterpolationOffset) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.minInterpolationOffset));
}// maxInterpolationOffset
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxInterpolationOffset) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxInterpolationOffset));
}// subPixelInterpolationOffsetBits
NAN_GETTER(_VkPhysicalDeviceLimits::GetsubPixelInterpolationOffsetBits) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.subPixelInterpolationOffsetBits));
}// maxFramebufferWidth
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxFramebufferWidth) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxFramebufferWidth));
}// maxFramebufferHeight
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxFramebufferHeight) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxFramebufferHeight));
}// maxFramebufferLayers
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxFramebufferLayers) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxFramebufferLayers));
}// framebufferColorSampleCounts
NAN_GETTER(_VkPhysicalDeviceLimits::GetframebufferColorSampleCounts) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.framebufferColorSampleCounts));
}// framebufferDepthSampleCounts
NAN_GETTER(_VkPhysicalDeviceLimits::GetframebufferDepthSampleCounts) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.framebufferDepthSampleCounts));
}// framebufferStencilSampleCounts
NAN_GETTER(_VkPhysicalDeviceLimits::GetframebufferStencilSampleCounts) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.framebufferStencilSampleCounts));
}// framebufferNoAttachmentsSampleCounts
NAN_GETTER(_VkPhysicalDeviceLimits::GetframebufferNoAttachmentsSampleCounts) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.framebufferNoAttachmentsSampleCounts));
}// maxColorAttachments
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxColorAttachments) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxColorAttachments));
}// sampledImageColorSampleCounts
NAN_GETTER(_VkPhysicalDeviceLimits::GetsampledImageColorSampleCounts) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sampledImageColorSampleCounts));
}// sampledImageIntegerSampleCounts
NAN_GETTER(_VkPhysicalDeviceLimits::GetsampledImageIntegerSampleCounts) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sampledImageIntegerSampleCounts));
}// sampledImageDepthSampleCounts
NAN_GETTER(_VkPhysicalDeviceLimits::GetsampledImageDepthSampleCounts) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sampledImageDepthSampleCounts));
}// sampledImageStencilSampleCounts
NAN_GETTER(_VkPhysicalDeviceLimits::GetsampledImageStencilSampleCounts) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sampledImageStencilSampleCounts));
}// storageImageSampleCounts
NAN_GETTER(_VkPhysicalDeviceLimits::GetstorageImageSampleCounts) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.storageImageSampleCounts));
}// maxSampleMaskWords
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxSampleMaskWords) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxSampleMaskWords));
}// timestampComputeAndGraphics
NAN_GETTER(_VkPhysicalDeviceLimits::GettimestampComputeAndGraphics) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.timestampComputeAndGraphics));
}// timestampPeriod
NAN_GETTER(_VkPhysicalDeviceLimits::GettimestampPeriod) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.timestampPeriod));
}// maxClipDistances
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxClipDistances) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxClipDistances));
}// maxCullDistances
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxCullDistances) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxCullDistances));
}// maxCombinedClipAndCullDistances
NAN_GETTER(_VkPhysicalDeviceLimits::GetmaxCombinedClipAndCullDistances) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxCombinedClipAndCullDistances));
}// discreteQueuePriorities
NAN_GETTER(_VkPhysicalDeviceLimits::GetdiscreteQueuePriorities) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.discreteQueuePriorities));
}// pointSizeRange
NAN_GETTER(_VkPhysicalDeviceLimits::GetpointSizeRange) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  if (self->pointSizeRange.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    info.GetReturnValue().Set(Nan::New(self->pointSizeRange));
  }
}// lineWidthRange
NAN_GETTER(_VkPhysicalDeviceLimits::GetlineWidthRange) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  if (self->lineWidthRange.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    info.GetReturnValue().Set(Nan::New(self->lineWidthRange));
  }
}// pointSizeGranularity
NAN_GETTER(_VkPhysicalDeviceLimits::GetpointSizeGranularity) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.pointSizeGranularity));
}// lineWidthGranularity
NAN_GETTER(_VkPhysicalDeviceLimits::GetlineWidthGranularity) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.lineWidthGranularity));
}// strictLines
NAN_GETTER(_VkPhysicalDeviceLimits::GetstrictLines) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.strictLines));
}// standardSampleLocations
NAN_GETTER(_VkPhysicalDeviceLimits::GetstandardSampleLocations) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.standardSampleLocations));
}// optimalBufferCopyOffsetAlignment
NAN_GETTER(_VkPhysicalDeviceLimits::GetoptimalBufferCopyOffsetAlignment) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.optimalBufferCopyOffsetAlignment));
}// optimalBufferCopyRowPitchAlignment
NAN_GETTER(_VkPhysicalDeviceLimits::GetoptimalBufferCopyRowPitchAlignment) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.optimalBufferCopyRowPitchAlignment));
}// nonCoherentAtomSize
NAN_GETTER(_VkPhysicalDeviceLimits::GetnonCoherentAtomSize) {
  _VkPhysicalDeviceLimits *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceLimits>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.nonCoherentAtomSize));
}