/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY node-vulkan v0.1.0
 */
#include "utils.h"
#include "index.h"
#include "VkDebugMarkerObjectTagInfoEXT.h"

Nan::Persistent<v8::FunctionTemplate> _VkDebugMarkerObjectTagInfoEXT::constructor;

_VkDebugMarkerObjectTagInfoEXT::_VkDebugMarkerObjectTagInfoEXT() {
  instance.sType = VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT;
  
}

_VkDebugMarkerObjectTagInfoEXT::~_VkDebugMarkerObjectTagInfoEXT() {
  //printf("VkDebugMarkerObjectTagInfoEXT deconstructed!!\n");
  
  
  
  
  
  
  pTag.Reset();
  
}

void _VkDebugMarkerObjectTagInfoEXT::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkDebugMarkerObjectTagInfoEXT::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkDebugMarkerObjectTagInfoEXT").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("sType").ToLocalChecked(), GetsType, SetsType, ctor);
  SetPrototypeAccessor(proto, Nan::New("objectType").ToLocalChecked(), GetobjectType, SetobjectType, ctor);
  SetPrototypeAccessor(proto, Nan::New("object").ToLocalChecked(), Getobject, Setobject, ctor);
  SetPrototypeAccessor(proto, Nan::New("tagName").ToLocalChecked(), GettagName, SettagName, ctor);
  SetPrototypeAccessor(proto, Nan::New("tagSize").ToLocalChecked(), GettagSize, SettagSize, ctor);
  SetPrototypeAccessor(proto, Nan::New("pTag").ToLocalChecked(), GetpTag, SetpTag, ctor);
  Nan::Set(target, Nan::New("VkDebugMarkerObjectTagInfoEXT").ToLocalChecked(), ctor->GetFunction());
}

bool _VkDebugMarkerObjectTagInfoEXT::flush() {
  _VkDebugMarkerObjectTagInfoEXT *self = this;
  
  return true;
}

NAN_METHOD(_VkDebugMarkerObjectTagInfoEXT::New) {
  if (info.IsConstructCall()) {
    _VkDebugMarkerObjectTagInfoEXT* self = new _VkDebugMarkerObjectTagInfoEXT();
    self->Wrap(info.Holder());
    
    if (info[0]->IsObject()) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(info[0]).ToLocalChecked();
      v8::Local<v8::String> sAccess0 = Nan::New("sType").ToLocalChecked();
      v8::Local<v8::String> sAccess2 = Nan::New("objectType").ToLocalChecked();
      v8::Local<v8::String> sAccess3 = Nan::New("object").ToLocalChecked();
      v8::Local<v8::String> sAccess4 = Nan::New("tagName").ToLocalChecked();
      v8::Local<v8::String> sAccess5 = Nan::New("tagSize").ToLocalChecked();
      v8::Local<v8::String> sAccess6 = Nan::New("pTag").ToLocalChecked();
      if (obj->Has(sAccess0)) info.This()->Set(sAccess0, obj->Get(sAccess0));
      if (obj->Has(sAccess2)) info.This()->Set(sAccess2, obj->Get(sAccess2));
      if (obj->Has(sAccess3)) info.This()->Set(sAccess3, obj->Get(sAccess3));
      if (obj->Has(sAccess4)) info.This()->Set(sAccess4, obj->Get(sAccess4));
      if (obj->Has(sAccess5)) info.This()->Set(sAccess5, obj->Get(sAccess5));
      if (obj->Has(sAccess6)) info.This()->Set(sAccess6, obj->Get(sAccess6));
      
    }
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkDebugMarkerObjectTagInfoEXT constructor cannot be invoked without 'new'");
  }
};

// sType
NAN_GETTER(_VkDebugMarkerObjectTagInfoEXT::GetsType) {
  _VkDebugMarkerObjectTagInfoEXT *self = Nan::ObjectWrap::Unwrap<_VkDebugMarkerObjectTagInfoEXT>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sType));
}NAN_SETTER(_VkDebugMarkerObjectTagInfoEXT::SetsType) {
  _VkDebugMarkerObjectTagInfoEXT *self = Nan::ObjectWrap::Unwrap<_VkDebugMarkerObjectTagInfoEXT>(info.This());
  if (value->IsNumber()) {
    self->instance.sType = static_cast<VkStructureType>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkDebugMarkerObjectTagInfoEXT.sType' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// objectType
NAN_GETTER(_VkDebugMarkerObjectTagInfoEXT::GetobjectType) {
  _VkDebugMarkerObjectTagInfoEXT *self = Nan::ObjectWrap::Unwrap<_VkDebugMarkerObjectTagInfoEXT>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.objectType));
}NAN_SETTER(_VkDebugMarkerObjectTagInfoEXT::SetobjectType) {
  _VkDebugMarkerObjectTagInfoEXT *self = Nan::ObjectWrap::Unwrap<_VkDebugMarkerObjectTagInfoEXT>(info.This());
  if (value->IsNumber()) {
    self->instance.objectType = static_cast<VkDebugReportObjectTypeEXT>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkDebugMarkerObjectTagInfoEXT.objectType' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// object
NAN_GETTER(_VkDebugMarkerObjectTagInfoEXT::Getobject) {
  _VkDebugMarkerObjectTagInfoEXT *self = Nan::ObjectWrap::Unwrap<_VkDebugMarkerObjectTagInfoEXT>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.object));
}NAN_SETTER(_VkDebugMarkerObjectTagInfoEXT::Setobject) {
  _VkDebugMarkerObjectTagInfoEXT *self = Nan::ObjectWrap::Unwrap<_VkDebugMarkerObjectTagInfoEXT>(info.This());
  if (value->IsNumber()) {
    self->instance.object = static_cast<uint64_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkDebugMarkerObjectTagInfoEXT.object' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// tagName
NAN_GETTER(_VkDebugMarkerObjectTagInfoEXT::GettagName) {
  _VkDebugMarkerObjectTagInfoEXT *self = Nan::ObjectWrap::Unwrap<_VkDebugMarkerObjectTagInfoEXT>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.tagName));
}NAN_SETTER(_VkDebugMarkerObjectTagInfoEXT::SettagName) {
  _VkDebugMarkerObjectTagInfoEXT *self = Nan::ObjectWrap::Unwrap<_VkDebugMarkerObjectTagInfoEXT>(info.This());
  if (value->IsNumber()) {
    self->instance.tagName = static_cast<uint64_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkDebugMarkerObjectTagInfoEXT.tagName' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// tagSize
NAN_GETTER(_VkDebugMarkerObjectTagInfoEXT::GettagSize) {
  _VkDebugMarkerObjectTagInfoEXT *self = Nan::ObjectWrap::Unwrap<_VkDebugMarkerObjectTagInfoEXT>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.tagSize));
}NAN_SETTER(_VkDebugMarkerObjectTagInfoEXT::SettagSize) {
  _VkDebugMarkerObjectTagInfoEXT *self = Nan::ObjectWrap::Unwrap<_VkDebugMarkerObjectTagInfoEXT>(info.This());
  if (value->IsNumber()) {
    self->instance.tagSize = static_cast<size_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkDebugMarkerObjectTagInfoEXT.tagSize' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// pTag
NAN_GETTER(_VkDebugMarkerObjectTagInfoEXT::GetpTag) {
  _VkDebugMarkerObjectTagInfoEXT *self = Nan::ObjectWrap::Unwrap<_VkDebugMarkerObjectTagInfoEXT>(info.This());
}NAN_SETTER(_VkDebugMarkerObjectTagInfoEXT::SetpTag) {
  _VkDebugMarkerObjectTagInfoEXT *self = Nan::ObjectWrap::Unwrap<_VkDebugMarkerObjectTagInfoEXT>(info.This());
}