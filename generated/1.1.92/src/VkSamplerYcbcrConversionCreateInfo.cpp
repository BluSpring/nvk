/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY nvk v0.1.2
 */
#include "utils.h"
#include "index.h"
#include "VkSamplerYcbcrConversionCreateInfo.h"

Nan::Persistent<v8::FunctionTemplate> _VkSamplerYcbcrConversionCreateInfo::constructor;

_VkSamplerYcbcrConversionCreateInfo::_VkSamplerYcbcrConversionCreateInfo() {
  instance.sType = VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO;
  
}

_VkSamplerYcbcrConversionCreateInfo::~_VkSamplerYcbcrConversionCreateInfo() {
  //printf("VkSamplerYcbcrConversionCreateInfo deconstructed!!\n");
  
  
  
  
  
  
  
  
  
  
}

void _VkSamplerYcbcrConversionCreateInfo::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkSamplerYcbcrConversionCreateInfo::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkSamplerYcbcrConversionCreateInfo").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("sType").ToLocalChecked(), GetsType, SetsType, ctor);
  SetPrototypeAccessor(proto, Nan::New("format").ToLocalChecked(), Getformat, Setformat, ctor);
  SetPrototypeAccessor(proto, Nan::New("ycbcrModel").ToLocalChecked(), GetycbcrModel, SetycbcrModel, ctor);
  SetPrototypeAccessor(proto, Nan::New("ycbcrRange").ToLocalChecked(), GetycbcrRange, SetycbcrRange, ctor);
  SetPrototypeAccessor(proto, Nan::New("components").ToLocalChecked(), Getcomponents, Setcomponents, ctor);
  SetPrototypeAccessor(proto, Nan::New("xChromaOffset").ToLocalChecked(), GetxChromaOffset, SetxChromaOffset, ctor);
  SetPrototypeAccessor(proto, Nan::New("yChromaOffset").ToLocalChecked(), GetyChromaOffset, SetyChromaOffset, ctor);
  SetPrototypeAccessor(proto, Nan::New("chromaFilter").ToLocalChecked(), GetchromaFilter, SetchromaFilter, ctor);
  SetPrototypeAccessor(proto, Nan::New("forceExplicitReconstruction").ToLocalChecked(), GetforceExplicitReconstruction, SetforceExplicitReconstruction, ctor);
  Nan::Set(target, Nan::New("VkSamplerYcbcrConversionCreateInfo").ToLocalChecked(), ctor->GetFunction());
}

bool _VkSamplerYcbcrConversionCreateInfo::flush() {
  _VkSamplerYcbcrConversionCreateInfo *self = this;
  if (!(self->components.IsEmpty())) {
    v8::Local<v8::Value> value = Nan::New(self->components);
    
    _VkComponentMapping* result = Nan::ObjectWrap::Unwrap<_VkComponentMapping>(Nan::To<v8::Object>(value).ToLocalChecked());
    if (!result->flush()) return false;
    self->instance.components = result->instance;
  }
  return true;
}

NAN_METHOD(_VkSamplerYcbcrConversionCreateInfo::New) {
  if (info.IsConstructCall()) {
    _VkSamplerYcbcrConversionCreateInfo* self = new _VkSamplerYcbcrConversionCreateInfo();
    self->Wrap(info.Holder());
    
    if (info[0]->IsObject()) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(info[0]).ToLocalChecked();
      v8::Local<v8::String> sAccess0 = Nan::New("sType").ToLocalChecked();
      v8::Local<v8::String> sAccess2 = Nan::New("format").ToLocalChecked();
      v8::Local<v8::String> sAccess3 = Nan::New("ycbcrModel").ToLocalChecked();
      v8::Local<v8::String> sAccess4 = Nan::New("ycbcrRange").ToLocalChecked();
      v8::Local<v8::String> sAccess5 = Nan::New("components").ToLocalChecked();
      v8::Local<v8::String> sAccess6 = Nan::New("xChromaOffset").ToLocalChecked();
      v8::Local<v8::String> sAccess7 = Nan::New("yChromaOffset").ToLocalChecked();
      v8::Local<v8::String> sAccess8 = Nan::New("chromaFilter").ToLocalChecked();
      v8::Local<v8::String> sAccess9 = Nan::New("forceExplicitReconstruction").ToLocalChecked();
      if (obj->Has(sAccess0)) info.This()->Set(sAccess0, obj->Get(sAccess0));
      if (obj->Has(sAccess2)) info.This()->Set(sAccess2, obj->Get(sAccess2));
      if (obj->Has(sAccess3)) info.This()->Set(sAccess3, obj->Get(sAccess3));
      if (obj->Has(sAccess4)) info.This()->Set(sAccess4, obj->Get(sAccess4));
      if (obj->Has(sAccess5)) info.This()->Set(sAccess5, obj->Get(sAccess5));
      if (obj->Has(sAccess6)) info.This()->Set(sAccess6, obj->Get(sAccess6));
      if (obj->Has(sAccess7)) info.This()->Set(sAccess7, obj->Get(sAccess7));
      if (obj->Has(sAccess8)) info.This()->Set(sAccess8, obj->Get(sAccess8));
      if (obj->Has(sAccess9)) info.This()->Set(sAccess9, obj->Get(sAccess9));
      
    }
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkSamplerYcbcrConversionCreateInfo constructor cannot be invoked without 'new'");
  }
};

// sType
NAN_GETTER(_VkSamplerYcbcrConversionCreateInfo::GetsType) {
  _VkSamplerYcbcrConversionCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkSamplerYcbcrConversionCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sType));
}NAN_SETTER(_VkSamplerYcbcrConversionCreateInfo::SetsType) {
  _VkSamplerYcbcrConversionCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkSamplerYcbcrConversionCreateInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.sType = static_cast<VkStructureType>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkSamplerYcbcrConversionCreateInfo.sType' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// format
NAN_GETTER(_VkSamplerYcbcrConversionCreateInfo::Getformat) {
  _VkSamplerYcbcrConversionCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkSamplerYcbcrConversionCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.format));
}NAN_SETTER(_VkSamplerYcbcrConversionCreateInfo::Setformat) {
  _VkSamplerYcbcrConversionCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkSamplerYcbcrConversionCreateInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.format = static_cast<VkFormat>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkSamplerYcbcrConversionCreateInfo.format' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// ycbcrModel
NAN_GETTER(_VkSamplerYcbcrConversionCreateInfo::GetycbcrModel) {
  _VkSamplerYcbcrConversionCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkSamplerYcbcrConversionCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.ycbcrModel));
}NAN_SETTER(_VkSamplerYcbcrConversionCreateInfo::SetycbcrModel) {
  _VkSamplerYcbcrConversionCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkSamplerYcbcrConversionCreateInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.ycbcrModel = static_cast<VkSamplerYcbcrModelConversion>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkSamplerYcbcrConversionCreateInfo.ycbcrModel' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// ycbcrRange
NAN_GETTER(_VkSamplerYcbcrConversionCreateInfo::GetycbcrRange) {
  _VkSamplerYcbcrConversionCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkSamplerYcbcrConversionCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.ycbcrRange));
}NAN_SETTER(_VkSamplerYcbcrConversionCreateInfo::SetycbcrRange) {
  _VkSamplerYcbcrConversionCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkSamplerYcbcrConversionCreateInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.ycbcrRange = static_cast<VkSamplerYcbcrRange>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkSamplerYcbcrConversionCreateInfo.ycbcrRange' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// components
NAN_GETTER(_VkSamplerYcbcrConversionCreateInfo::Getcomponents) {
  _VkSamplerYcbcrConversionCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkSamplerYcbcrConversionCreateInfo>(info.This());
  if (self->components.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->components);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkSamplerYcbcrConversionCreateInfo::Setcomponents) {
  _VkSamplerYcbcrConversionCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkSamplerYcbcrConversionCreateInfo>(info.This());
  // js
  if (!value->IsNull()) {
    v8::Local<v8::Object> obj = Nan::To<v8::Object>(value).ToLocalChecked();
    if (Nan::New(_VkComponentMapping::constructor)->HasInstance(obj)) {
      self->components.Reset<v8::Object>(value.As<v8::Object>());
      _VkComponentMapping* inst = Nan::ObjectWrap::Unwrap<_VkComponentMapping>(obj);
      inst->flush();
      self->instance.components = inst->instance;
    } else {
      
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkComponentMapping]' for 'VkSamplerYcbcrConversionCreateInfo.components' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
      return;
    }
  } else if (value->IsNull()) {
    self->components.Reset();
    memset(&self->instance.components, 0, sizeof(VkComponentMapping));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkComponentMapping]' for 'VkSamplerYcbcrConversionCreateInfo.components' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// xChromaOffset
NAN_GETTER(_VkSamplerYcbcrConversionCreateInfo::GetxChromaOffset) {
  _VkSamplerYcbcrConversionCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkSamplerYcbcrConversionCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.xChromaOffset));
}NAN_SETTER(_VkSamplerYcbcrConversionCreateInfo::SetxChromaOffset) {
  _VkSamplerYcbcrConversionCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkSamplerYcbcrConversionCreateInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.xChromaOffset = static_cast<VkChromaLocation>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkSamplerYcbcrConversionCreateInfo.xChromaOffset' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// yChromaOffset
NAN_GETTER(_VkSamplerYcbcrConversionCreateInfo::GetyChromaOffset) {
  _VkSamplerYcbcrConversionCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkSamplerYcbcrConversionCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.yChromaOffset));
}NAN_SETTER(_VkSamplerYcbcrConversionCreateInfo::SetyChromaOffset) {
  _VkSamplerYcbcrConversionCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkSamplerYcbcrConversionCreateInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.yChromaOffset = static_cast<VkChromaLocation>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkSamplerYcbcrConversionCreateInfo.yChromaOffset' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// chromaFilter
NAN_GETTER(_VkSamplerYcbcrConversionCreateInfo::GetchromaFilter) {
  _VkSamplerYcbcrConversionCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkSamplerYcbcrConversionCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.chromaFilter));
}NAN_SETTER(_VkSamplerYcbcrConversionCreateInfo::SetchromaFilter) {
  _VkSamplerYcbcrConversionCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkSamplerYcbcrConversionCreateInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.chromaFilter = static_cast<VkFilter>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkSamplerYcbcrConversionCreateInfo.chromaFilter' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// forceExplicitReconstruction
NAN_GETTER(_VkSamplerYcbcrConversionCreateInfo::GetforceExplicitReconstruction) {
  _VkSamplerYcbcrConversionCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkSamplerYcbcrConversionCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.forceExplicitReconstruction));
}NAN_SETTER(_VkSamplerYcbcrConversionCreateInfo::SetforceExplicitReconstruction) {
  _VkSamplerYcbcrConversionCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkSamplerYcbcrConversionCreateInfo>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.forceExplicitReconstruction = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkSamplerYcbcrConversionCreateInfo.forceExplicitReconstruction' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}