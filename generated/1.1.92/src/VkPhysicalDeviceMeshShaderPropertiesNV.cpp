/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY nvk v0.1.5
 */
#include "utils.h"
#include <string.h>
#include "index.h"
#include "VkPhysicalDeviceMeshShaderPropertiesNV.h"

Nan::Persistent<v8::FunctionTemplate> _VkPhysicalDeviceMeshShaderPropertiesNV::constructor;

_VkPhysicalDeviceMeshShaderPropertiesNV::_VkPhysicalDeviceMeshShaderPropertiesNV() {
  instance.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV;
  vmaxTaskWorkGroupSize = new std::vector<uint32_t>;
  vmaxMeshWorkGroupSize = new std::vector<uint32_t>;
  
}

_VkPhysicalDeviceMeshShaderPropertiesNV::~_VkPhysicalDeviceMeshShaderPropertiesNV() {
  //printf("VkPhysicalDeviceMeshShaderPropertiesNV deconstructed!!\n");
  
  
  
  
  vmaxTaskWorkGroupSize->clear();
  delete vmaxTaskWorkGroupSize;
  
  
  
  
  
  vmaxMeshWorkGroupSize->clear();
  delete vmaxMeshWorkGroupSize;
  
  
  
  
  
  
  
  
}

void _VkPhysicalDeviceMeshShaderPropertiesNV::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkPhysicalDeviceMeshShaderPropertiesNV::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkPhysicalDeviceMeshShaderPropertiesNV").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("sType").ToLocalChecked(), GetsType, SetsType, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxDrawMeshTasksCount").ToLocalChecked(), GetmaxDrawMeshTasksCount, SetmaxDrawMeshTasksCount, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxTaskWorkGroupInvocations").ToLocalChecked(), GetmaxTaskWorkGroupInvocations, SetmaxTaskWorkGroupInvocations, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxTaskWorkGroupSize").ToLocalChecked(), GetmaxTaskWorkGroupSize, SetmaxTaskWorkGroupSize, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxTaskTotalMemorySize").ToLocalChecked(), GetmaxTaskTotalMemorySize, SetmaxTaskTotalMemorySize, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxTaskOutputCount").ToLocalChecked(), GetmaxTaskOutputCount, SetmaxTaskOutputCount, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxMeshWorkGroupInvocations").ToLocalChecked(), GetmaxMeshWorkGroupInvocations, SetmaxMeshWorkGroupInvocations, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxMeshWorkGroupSize").ToLocalChecked(), GetmaxMeshWorkGroupSize, SetmaxMeshWorkGroupSize, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxMeshTotalMemorySize").ToLocalChecked(), GetmaxMeshTotalMemorySize, SetmaxMeshTotalMemorySize, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxMeshOutputVertices").ToLocalChecked(), GetmaxMeshOutputVertices, SetmaxMeshOutputVertices, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxMeshOutputPrimitives").ToLocalChecked(), GetmaxMeshOutputPrimitives, SetmaxMeshOutputPrimitives, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxMeshMultiviewViewCount").ToLocalChecked(), GetmaxMeshMultiviewViewCount, SetmaxMeshMultiviewViewCount, ctor);
  SetPrototypeAccessor(proto, Nan::New("meshOutputPerVertexGranularity").ToLocalChecked(), GetmeshOutputPerVertexGranularity, SetmeshOutputPerVertexGranularity, ctor);
  SetPrototypeAccessor(proto, Nan::New("meshOutputPerPrimitiveGranularity").ToLocalChecked(), GetmeshOutputPerPrimitiveGranularity, SetmeshOutputPerPrimitiveGranularity, ctor);
  Nan::Set(target, Nan::New("VkPhysicalDeviceMeshShaderPropertiesNV").ToLocalChecked(), ctor->GetFunction());
}

bool _VkPhysicalDeviceMeshShaderPropertiesNV::flush() {
  _VkPhysicalDeviceMeshShaderPropertiesNV *self = this;
  if (!(self->maxTaskWorkGroupSize.IsEmpty())) {
    v8::Local<v8::Value> value = Nan::New(self->maxTaskWorkGroupSize);
    
    if (value->IsArray()) {
      // validate length
      if (v8::Local<v8::Array>::Cast(value)->Length() != 3) {
        Nan::ThrowRangeError("Invalid array length, expected array length of '3' for 'VkPhysicalDeviceMeshShaderPropertiesNV.maxTaskWorkGroupSize'");
        return false;
      }
      std::vector<uint32_t> array = createArrayOfV8Numbers<uint32_t>(value);
      memcpy(self->instance.maxTaskWorkGroupSize, array.data(), sizeof(uint32_t) * 3);
    } else if (value->IsNull()) {
      memset(&self->instance.maxTaskWorkGroupSize, 0, sizeof(uint32_t));
    } else {
      
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Array' for 'VkPhysicalDeviceMeshShaderPropertiesNV.maxTaskWorkGroupSize' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
      return false;
    }
  }if (!(self->maxMeshWorkGroupSize.IsEmpty())) {
    v8::Local<v8::Value> value = Nan::New(self->maxMeshWorkGroupSize);
    
    if (value->IsArray()) {
      // validate length
      if (v8::Local<v8::Array>::Cast(value)->Length() != 3) {
        Nan::ThrowRangeError("Invalid array length, expected array length of '3' for 'VkPhysicalDeviceMeshShaderPropertiesNV.maxMeshWorkGroupSize'");
        return false;
      }
      std::vector<uint32_t> array = createArrayOfV8Numbers<uint32_t>(value);
      memcpy(self->instance.maxMeshWorkGroupSize, array.data(), sizeof(uint32_t) * 3);
    } else if (value->IsNull()) {
      memset(&self->instance.maxMeshWorkGroupSize, 0, sizeof(uint32_t));
    } else {
      
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Array' for 'VkPhysicalDeviceMeshShaderPropertiesNV.maxMeshWorkGroupSize' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
      return false;
    }
  }
  return true;
}

NAN_METHOD(_VkPhysicalDeviceMeshShaderPropertiesNV::New) {
  if (info.IsConstructCall()) {
    _VkPhysicalDeviceMeshShaderPropertiesNV* self = new _VkPhysicalDeviceMeshShaderPropertiesNV();
    self->Wrap(info.Holder());
    
    if (info[0]->IsObject()) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(info[0]).ToLocalChecked();
      v8::Local<v8::String> sAccess0 = Nan::New("sType").ToLocalChecked();
      v8::Local<v8::String> sAccess2 = Nan::New("maxDrawMeshTasksCount").ToLocalChecked();
      v8::Local<v8::String> sAccess3 = Nan::New("maxTaskWorkGroupInvocations").ToLocalChecked();
      v8::Local<v8::String> sAccess4 = Nan::New("maxTaskWorkGroupSize").ToLocalChecked();
      v8::Local<v8::String> sAccess5 = Nan::New("maxTaskTotalMemorySize").ToLocalChecked();
      v8::Local<v8::String> sAccess6 = Nan::New("maxTaskOutputCount").ToLocalChecked();
      v8::Local<v8::String> sAccess7 = Nan::New("maxMeshWorkGroupInvocations").ToLocalChecked();
      v8::Local<v8::String> sAccess8 = Nan::New("maxMeshWorkGroupSize").ToLocalChecked();
      v8::Local<v8::String> sAccess9 = Nan::New("maxMeshTotalMemorySize").ToLocalChecked();
      v8::Local<v8::String> sAccess10 = Nan::New("maxMeshOutputVertices").ToLocalChecked();
      v8::Local<v8::String> sAccess11 = Nan::New("maxMeshOutputPrimitives").ToLocalChecked();
      v8::Local<v8::String> sAccess12 = Nan::New("maxMeshMultiviewViewCount").ToLocalChecked();
      v8::Local<v8::String> sAccess13 = Nan::New("meshOutputPerVertexGranularity").ToLocalChecked();
      v8::Local<v8::String> sAccess14 = Nan::New("meshOutputPerPrimitiveGranularity").ToLocalChecked();
      if (obj->Has(sAccess0)) info.This()->Set(sAccess0, obj->Get(sAccess0));
      if (obj->Has(sAccess2)) info.This()->Set(sAccess2, obj->Get(sAccess2));
      if (obj->Has(sAccess3)) info.This()->Set(sAccess3, obj->Get(sAccess3));
      if (obj->Has(sAccess4)) info.This()->Set(sAccess4, obj->Get(sAccess4));
      if (obj->Has(sAccess5)) info.This()->Set(sAccess5, obj->Get(sAccess5));
      if (obj->Has(sAccess6)) info.This()->Set(sAccess6, obj->Get(sAccess6));
      if (obj->Has(sAccess7)) info.This()->Set(sAccess7, obj->Get(sAccess7));
      if (obj->Has(sAccess8)) info.This()->Set(sAccess8, obj->Get(sAccess8));
      if (obj->Has(sAccess9)) info.This()->Set(sAccess9, obj->Get(sAccess9));
      if (obj->Has(sAccess10)) info.This()->Set(sAccess10, obj->Get(sAccess10));
      if (obj->Has(sAccess11)) info.This()->Set(sAccess11, obj->Get(sAccess11));
      if (obj->Has(sAccess12)) info.This()->Set(sAccess12, obj->Get(sAccess12));
      if (obj->Has(sAccess13)) info.This()->Set(sAccess13, obj->Get(sAccess13));
      if (obj->Has(sAccess14)) info.This()->Set(sAccess14, obj->Get(sAccess14));
      
    }
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkPhysicalDeviceMeshShaderPropertiesNV constructor cannot be invoked without 'new'");
  }
};

// sType
NAN_GETTER(_VkPhysicalDeviceMeshShaderPropertiesNV::GetsType) {
  _VkPhysicalDeviceMeshShaderPropertiesNV *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceMeshShaderPropertiesNV>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sType));
}NAN_SETTER(_VkPhysicalDeviceMeshShaderPropertiesNV::SetsType) {
  _VkPhysicalDeviceMeshShaderPropertiesNV *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceMeshShaderPropertiesNV>(info.This());
  if (value->IsNumber()) {
    self->instance.sType = static_cast<VkStructureType>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceMeshShaderPropertiesNV.sType' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// maxDrawMeshTasksCount
NAN_GETTER(_VkPhysicalDeviceMeshShaderPropertiesNV::GetmaxDrawMeshTasksCount) {
  _VkPhysicalDeviceMeshShaderPropertiesNV *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceMeshShaderPropertiesNV>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxDrawMeshTasksCount));
}NAN_SETTER(_VkPhysicalDeviceMeshShaderPropertiesNV::SetmaxDrawMeshTasksCount) {
  _VkPhysicalDeviceMeshShaderPropertiesNV *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceMeshShaderPropertiesNV>(info.This());
  if (value->IsNumber()) {
    self->instance.maxDrawMeshTasksCount = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceMeshShaderPropertiesNV.maxDrawMeshTasksCount' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// maxTaskWorkGroupInvocations
NAN_GETTER(_VkPhysicalDeviceMeshShaderPropertiesNV::GetmaxTaskWorkGroupInvocations) {
  _VkPhysicalDeviceMeshShaderPropertiesNV *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceMeshShaderPropertiesNV>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxTaskWorkGroupInvocations));
}NAN_SETTER(_VkPhysicalDeviceMeshShaderPropertiesNV::SetmaxTaskWorkGroupInvocations) {
  _VkPhysicalDeviceMeshShaderPropertiesNV *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceMeshShaderPropertiesNV>(info.This());
  if (value->IsNumber()) {
    self->instance.maxTaskWorkGroupInvocations = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceMeshShaderPropertiesNV.maxTaskWorkGroupInvocations' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// maxTaskWorkGroupSize
NAN_GETTER(_VkPhysicalDeviceMeshShaderPropertiesNV::GetmaxTaskWorkGroupSize) {
  _VkPhysicalDeviceMeshShaderPropertiesNV *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceMeshShaderPropertiesNV>(info.This());
  if (self->maxTaskWorkGroupSize.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    info.GetReturnValue().Set(Nan::New(self->maxTaskWorkGroupSize));
  }
}NAN_SETTER(_VkPhysicalDeviceMeshShaderPropertiesNV::SetmaxTaskWorkGroupSize) {
  _VkPhysicalDeviceMeshShaderPropertiesNV *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceMeshShaderPropertiesNV>(info.This());
  // js
  if (value->IsArray()) {
    self->maxTaskWorkGroupSize.Reset<v8::Array>(value.As<v8::Array>());
  } else if (value->IsNull()) {
    self->maxTaskWorkGroupSize.Reset();
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Array' for 'VkPhysicalDeviceMeshShaderPropertiesNV.maxTaskWorkGroupSize' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// maxTaskTotalMemorySize
NAN_GETTER(_VkPhysicalDeviceMeshShaderPropertiesNV::GetmaxTaskTotalMemorySize) {
  _VkPhysicalDeviceMeshShaderPropertiesNV *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceMeshShaderPropertiesNV>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxTaskTotalMemorySize));
}NAN_SETTER(_VkPhysicalDeviceMeshShaderPropertiesNV::SetmaxTaskTotalMemorySize) {
  _VkPhysicalDeviceMeshShaderPropertiesNV *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceMeshShaderPropertiesNV>(info.This());
  if (value->IsNumber()) {
    self->instance.maxTaskTotalMemorySize = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceMeshShaderPropertiesNV.maxTaskTotalMemorySize' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// maxTaskOutputCount
NAN_GETTER(_VkPhysicalDeviceMeshShaderPropertiesNV::GetmaxTaskOutputCount) {
  _VkPhysicalDeviceMeshShaderPropertiesNV *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceMeshShaderPropertiesNV>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxTaskOutputCount));
}NAN_SETTER(_VkPhysicalDeviceMeshShaderPropertiesNV::SetmaxTaskOutputCount) {
  _VkPhysicalDeviceMeshShaderPropertiesNV *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceMeshShaderPropertiesNV>(info.This());
  if (value->IsNumber()) {
    self->instance.maxTaskOutputCount = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceMeshShaderPropertiesNV.maxTaskOutputCount' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// maxMeshWorkGroupInvocations
NAN_GETTER(_VkPhysicalDeviceMeshShaderPropertiesNV::GetmaxMeshWorkGroupInvocations) {
  _VkPhysicalDeviceMeshShaderPropertiesNV *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceMeshShaderPropertiesNV>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxMeshWorkGroupInvocations));
}NAN_SETTER(_VkPhysicalDeviceMeshShaderPropertiesNV::SetmaxMeshWorkGroupInvocations) {
  _VkPhysicalDeviceMeshShaderPropertiesNV *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceMeshShaderPropertiesNV>(info.This());
  if (value->IsNumber()) {
    self->instance.maxMeshWorkGroupInvocations = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceMeshShaderPropertiesNV.maxMeshWorkGroupInvocations' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// maxMeshWorkGroupSize
NAN_GETTER(_VkPhysicalDeviceMeshShaderPropertiesNV::GetmaxMeshWorkGroupSize) {
  _VkPhysicalDeviceMeshShaderPropertiesNV *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceMeshShaderPropertiesNV>(info.This());
  if (self->maxMeshWorkGroupSize.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    info.GetReturnValue().Set(Nan::New(self->maxMeshWorkGroupSize));
  }
}NAN_SETTER(_VkPhysicalDeviceMeshShaderPropertiesNV::SetmaxMeshWorkGroupSize) {
  _VkPhysicalDeviceMeshShaderPropertiesNV *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceMeshShaderPropertiesNV>(info.This());
  // js
  if (value->IsArray()) {
    self->maxMeshWorkGroupSize.Reset<v8::Array>(value.As<v8::Array>());
  } else if (value->IsNull()) {
    self->maxMeshWorkGroupSize.Reset();
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Array' for 'VkPhysicalDeviceMeshShaderPropertiesNV.maxMeshWorkGroupSize' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// maxMeshTotalMemorySize
NAN_GETTER(_VkPhysicalDeviceMeshShaderPropertiesNV::GetmaxMeshTotalMemorySize) {
  _VkPhysicalDeviceMeshShaderPropertiesNV *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceMeshShaderPropertiesNV>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxMeshTotalMemorySize));
}NAN_SETTER(_VkPhysicalDeviceMeshShaderPropertiesNV::SetmaxMeshTotalMemorySize) {
  _VkPhysicalDeviceMeshShaderPropertiesNV *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceMeshShaderPropertiesNV>(info.This());
  if (value->IsNumber()) {
    self->instance.maxMeshTotalMemorySize = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceMeshShaderPropertiesNV.maxMeshTotalMemorySize' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// maxMeshOutputVertices
NAN_GETTER(_VkPhysicalDeviceMeshShaderPropertiesNV::GetmaxMeshOutputVertices) {
  _VkPhysicalDeviceMeshShaderPropertiesNV *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceMeshShaderPropertiesNV>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxMeshOutputVertices));
}NAN_SETTER(_VkPhysicalDeviceMeshShaderPropertiesNV::SetmaxMeshOutputVertices) {
  _VkPhysicalDeviceMeshShaderPropertiesNV *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceMeshShaderPropertiesNV>(info.This());
  if (value->IsNumber()) {
    self->instance.maxMeshOutputVertices = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceMeshShaderPropertiesNV.maxMeshOutputVertices' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// maxMeshOutputPrimitives
NAN_GETTER(_VkPhysicalDeviceMeshShaderPropertiesNV::GetmaxMeshOutputPrimitives) {
  _VkPhysicalDeviceMeshShaderPropertiesNV *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceMeshShaderPropertiesNV>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxMeshOutputPrimitives));
}NAN_SETTER(_VkPhysicalDeviceMeshShaderPropertiesNV::SetmaxMeshOutputPrimitives) {
  _VkPhysicalDeviceMeshShaderPropertiesNV *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceMeshShaderPropertiesNV>(info.This());
  if (value->IsNumber()) {
    self->instance.maxMeshOutputPrimitives = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceMeshShaderPropertiesNV.maxMeshOutputPrimitives' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// maxMeshMultiviewViewCount
NAN_GETTER(_VkPhysicalDeviceMeshShaderPropertiesNV::GetmaxMeshMultiviewViewCount) {
  _VkPhysicalDeviceMeshShaderPropertiesNV *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceMeshShaderPropertiesNV>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxMeshMultiviewViewCount));
}NAN_SETTER(_VkPhysicalDeviceMeshShaderPropertiesNV::SetmaxMeshMultiviewViewCount) {
  _VkPhysicalDeviceMeshShaderPropertiesNV *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceMeshShaderPropertiesNV>(info.This());
  if (value->IsNumber()) {
    self->instance.maxMeshMultiviewViewCount = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceMeshShaderPropertiesNV.maxMeshMultiviewViewCount' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// meshOutputPerVertexGranularity
NAN_GETTER(_VkPhysicalDeviceMeshShaderPropertiesNV::GetmeshOutputPerVertexGranularity) {
  _VkPhysicalDeviceMeshShaderPropertiesNV *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceMeshShaderPropertiesNV>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.meshOutputPerVertexGranularity));
}NAN_SETTER(_VkPhysicalDeviceMeshShaderPropertiesNV::SetmeshOutputPerVertexGranularity) {
  _VkPhysicalDeviceMeshShaderPropertiesNV *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceMeshShaderPropertiesNV>(info.This());
  if (value->IsNumber()) {
    self->instance.meshOutputPerVertexGranularity = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceMeshShaderPropertiesNV.meshOutputPerVertexGranularity' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// meshOutputPerPrimitiveGranularity
NAN_GETTER(_VkPhysicalDeviceMeshShaderPropertiesNV::GetmeshOutputPerPrimitiveGranularity) {
  _VkPhysicalDeviceMeshShaderPropertiesNV *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceMeshShaderPropertiesNV>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.meshOutputPerPrimitiveGranularity));
}NAN_SETTER(_VkPhysicalDeviceMeshShaderPropertiesNV::SetmeshOutputPerPrimitiveGranularity) {
  _VkPhysicalDeviceMeshShaderPropertiesNV *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceMeshShaderPropertiesNV>(info.This());
  if (value->IsNumber()) {
    self->instance.meshOutputPerPrimitiveGranularity = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceMeshShaderPropertiesNV.meshOutputPerPrimitiveGranularity' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}