/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY nvk v0.5.4
 */
"use strict";

const {platform} = process;
const nvk = require("./build/Release/addon-" + platform + ".node");

let ENABLE_SHARED_MEMORY_HINTS = !!process.env.npm_config_enable_shared_memory_hints;
if (!ENABLE_SHARED_MEMORY_HINTS) {
  process.argv.map(arg => {
    if (arg.match("enable-shared-memory-hints")) ENABLE_SHARED_MEMORY_HINTS = true;
  });
}

const getAddressFromArrayBuffer = nvk.getAddressFromArrayBuffer;
const getArrayBufferFromAddress = nvk.getArrayBufferFromAddress;

global.ArrayBuffer.prototype.getAddress = function() {
  return getAddressFromArrayBuffer(this);
};

global.ArrayBuffer.fromAddress = function(address, byteLength) {
  return getArrayBufferFromAddress(address, BigInt(byteLength));
};

const BI0 = BigInt(0);
const NULLT = String.fromCharCode(0x0);

const textEncoder = new (typeof TextEncoder === "undefined" ? require("util").TextEncoder : TextEncoder);
const textDecoder = new (typeof TextDecoder === "undefined" ? require("util").TextDecoder : TextDecoder);

function decodeNullTerminatedUTF8String(view) {
  let terminator = view.indexOf(0x0);
  let subview = view.subarray(0, terminator > -1 ? terminator : view.length);
  return textDecoder.decode(subview);
};

class NativeStringArray {
  constructor(array) {
    this.array = array;
    this.address = BI0;
    let stringBuffers = [];
    let addressView = new BigInt64Array(array.length);
    let addressBuffer = addressView.buffer;
    let addressBufferAddress = getAddressFromArrayBuffer(addressBuffer);
    for (let ii = 0; ii < array.length; ++ii) {
      let strBuffer = textEncoder.encode(array[ii] + NULLT).buffer;
      addressView[ii] = getAddressFromArrayBuffer(strBuffer);
      stringBuffers.push(strBuffer);
    };
    this.address = addressBufferAddress;
    // keep references to prevent deallocation
    this.addressBuffer = addressBuffer;
    this.stringBuffers = stringBuffers;
  }
};

class NativeObjectArray {
  constructor(array) {
    this.array = array;
    this.address = BI0;
    let byteStride = array[0].memoryBuffer.byteLength;
    let objectBuffer = new ArrayBuffer(array.length * byteStride);
    let objectBufferView = new Uint8Array(objectBuffer);
    let objectBufferAddress = getAddressFromArrayBuffer(objectBuffer);
    for (let ii = 0; ii < array.length; ++ii) {
      let byteOffset = ii * byteStride;
      let srcView = new Uint8Array(array[ii].memoryBuffer);
      let dstView = objectBufferView.subarray(byteOffset, byteOffset + byteStride);
      dstView.set(srcView, 0x0);
    };
    this.address = objectBufferAddress;
    // keep reference to prevent deallocation
    this.objectBuffer = objectBuffer;
  }
};

class NativeObjectReferenceArray {
  constructor(array) {
    this.array = array;
    this.address = BI0;
    let addressView = new BigInt64Array(array.length);
    let addressBuffer = addressView.buffer;
    let addressBufferAddress = getAddressFromArrayBuffer(addressBuffer);
    for (let ii = 0; ii < array.length; ++ii) {
      let object = array[ii];
      let objectAddress = object.address;
      addressView[ii] = objectAddress;
    };
    this.address = addressBufferAddress;
    // keep reference to prevent deallocation
    this.addressBuffer = addressBuffer;
  }
};
/** VkInstance **/
class VkInstance {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkInstance' doesn't take any arguments");
    }
  }
};

VkInstance.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x8));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkInstance"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkInstance.byteLength = 0x8;
/** VkPhysicalDevice **/
class VkPhysicalDevice {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkPhysicalDevice' doesn't take any arguments");
    }
  }
};

VkPhysicalDevice.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x8));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDevice"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkPhysicalDevice.byteLength = 0x8;
/** VkDevice **/
class VkDevice {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkDevice' doesn't take any arguments");
    }
  }
};

VkDevice.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x8));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDevice"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkDevice.byteLength = 0x8;
/** VkQueue **/
class VkQueue {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkQueue' doesn't take any arguments");
    }
  }
};

VkQueue.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x8));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkQueue"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkQueue.byteLength = 0x8;
/** VkCommandBuffer **/
class VkCommandBuffer {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkCommandBuffer' doesn't take any arguments");
    }
  }
};

VkCommandBuffer.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x8));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkCommandBuffer"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkCommandBuffer.byteLength = 0x8;
/** VkDeviceMemory **/
class VkDeviceMemory {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkDeviceMemory' doesn't take any arguments");
    }
  }
};

VkDeviceMemory.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x8));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDeviceMemory"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkDeviceMemory.byteLength = 0x8;
/** VkCommandPool **/
class VkCommandPool {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkCommandPool' doesn't take any arguments");
    }
  }
};

VkCommandPool.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x8));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkCommandPool"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkCommandPool.byteLength = 0x8;
/** VkBuffer **/
class VkBuffer {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkBuffer' doesn't take any arguments");
    }
  }
};

VkBuffer.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x8));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkBuffer"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkBuffer.byteLength = 0x8;
/** VkBufferView **/
class VkBufferView {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkBufferView' doesn't take any arguments");
    }
  }
};

VkBufferView.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x8));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkBufferView"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkBufferView.byteLength = 0x8;
/** VkImage **/
class VkImage {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkImage' doesn't take any arguments");
    }
  }
};

VkImage.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x8));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkImage"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkImage.byteLength = 0x8;
/** VkImageView **/
class VkImageView {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkImageView' doesn't take any arguments");
    }
  }
};

VkImageView.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x8));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkImageView"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkImageView.byteLength = 0x8;
/** VkShaderModule **/
class VkShaderModule {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkShaderModule' doesn't take any arguments");
    }
  }
};

VkShaderModule.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x8));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkShaderModule"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkShaderModule.byteLength = 0x8;
/** VkPipeline **/
class VkPipeline {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkPipeline' doesn't take any arguments");
    }
  }
};

VkPipeline.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x8));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPipeline"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkPipeline.byteLength = 0x8;
/** VkPipelineLayout **/
class VkPipelineLayout {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkPipelineLayout' doesn't take any arguments");
    }
  }
};

VkPipelineLayout.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x8));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPipelineLayout"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkPipelineLayout.byteLength = 0x8;
/** VkSampler **/
class VkSampler {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkSampler' doesn't take any arguments");
    }
  }
};

VkSampler.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x8));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkSampler"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkSampler.byteLength = 0x8;
/** VkDescriptorSet **/
class VkDescriptorSet {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkDescriptorSet' doesn't take any arguments");
    }
  }
};

VkDescriptorSet.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x8));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDescriptorSet"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkDescriptorSet.byteLength = 0x8;
/** VkDescriptorSetLayout **/
class VkDescriptorSetLayout {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkDescriptorSetLayout' doesn't take any arguments");
    }
  }
};

VkDescriptorSetLayout.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x8));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDescriptorSetLayout"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkDescriptorSetLayout.byteLength = 0x8;
/** VkDescriptorPool **/
class VkDescriptorPool {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkDescriptorPool' doesn't take any arguments");
    }
  }
};

VkDescriptorPool.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x8));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDescriptorPool"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkDescriptorPool.byteLength = 0x8;
/** VkFence **/
class VkFence {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkFence' doesn't take any arguments");
    }
  }
};

VkFence.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x8));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkFence"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkFence.byteLength = 0x8;
/** VkSemaphore **/
class VkSemaphore {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkSemaphore' doesn't take any arguments");
    }
  }
};

VkSemaphore.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x8));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkSemaphore"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkSemaphore.byteLength = 0x8;
/** VkEvent **/
class VkEvent {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkEvent' doesn't take any arguments");
    }
  }
};

VkEvent.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x8));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkEvent"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkEvent.byteLength = 0x8;
/** VkQueryPool **/
class VkQueryPool {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkQueryPool' doesn't take any arguments");
    }
  }
};

VkQueryPool.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x8));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkQueryPool"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkQueryPool.byteLength = 0x8;
/** VkFramebuffer **/
class VkFramebuffer {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkFramebuffer' doesn't take any arguments");
    }
  }
};

VkFramebuffer.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x8));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkFramebuffer"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkFramebuffer.byteLength = 0x8;
/** VkRenderPass **/
class VkRenderPass {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkRenderPass' doesn't take any arguments");
    }
  }
};

VkRenderPass.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x8));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkRenderPass"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkRenderPass.byteLength = 0x8;
/** VkPipelineCache **/
class VkPipelineCache {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkPipelineCache' doesn't take any arguments");
    }
  }
};

VkPipelineCache.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x8));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPipelineCache"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkPipelineCache.byteLength = 0x8;
/** VkObjectTableNVX **/
class VkObjectTableNVX {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkObjectTableNVX' doesn't take any arguments");
    }
  }
};

VkObjectTableNVX.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x8));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkObjectTableNVX"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkObjectTableNVX.byteLength = 0x8;
/** VkIndirectCommandsLayoutNVX **/
class VkIndirectCommandsLayoutNVX {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkIndirectCommandsLayoutNVX' doesn't take any arguments");
    }
  }
};

VkIndirectCommandsLayoutNVX.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x8));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkIndirectCommandsLayoutNVX"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkIndirectCommandsLayoutNVX.byteLength = 0x8;
/** VkDescriptorUpdateTemplate **/
class VkDescriptorUpdateTemplate {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkDescriptorUpdateTemplate' doesn't take any arguments");
    }
  }
};

VkDescriptorUpdateTemplate.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x8));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDescriptorUpdateTemplate"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkDescriptorUpdateTemplate.byteLength = 0x8;
/** VkSamplerYcbcrConversion **/
class VkSamplerYcbcrConversion {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkSamplerYcbcrConversion' doesn't take any arguments");
    }
  }
};

VkSamplerYcbcrConversion.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x8));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkSamplerYcbcrConversion"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkSamplerYcbcrConversion.byteLength = 0x8;
/** VkValidationCacheEXT **/
class VkValidationCacheEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkValidationCacheEXT' doesn't take any arguments");
    }
  }
};

VkValidationCacheEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x8));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkValidationCacheEXT"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkValidationCacheEXT.byteLength = 0x8;
/** VkAccelerationStructureNV **/
class VkAccelerationStructureNV {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkAccelerationStructureNV' doesn't take any arguments");
    }
  }
};

VkAccelerationStructureNV.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x8));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkAccelerationStructureNV"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkAccelerationStructureNV.byteLength = 0x8;
/** VkDisplayKHR **/
class VkDisplayKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkDisplayKHR' doesn't take any arguments");
    }
  }
};

VkDisplayKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x8));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDisplayKHR"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkDisplayKHR.byteLength = 0x8;
/** VkDisplayModeKHR **/
class VkDisplayModeKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkDisplayModeKHR' doesn't take any arguments");
    }
  }
};

VkDisplayModeKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x8));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDisplayModeKHR"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkDisplayModeKHR.byteLength = 0x8;
/** VkSurfaceKHR **/
class VkSurfaceKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkSurfaceKHR' doesn't take any arguments");
    }
  }
};

VkSurfaceKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x8));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkSurfaceKHR"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkSurfaceKHR.byteLength = 0x8;
/** VkSwapchainKHR **/
class VkSwapchainKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkSwapchainKHR' doesn't take any arguments");
    }
  }
};

VkSwapchainKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x8));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkSwapchainKHR"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkSwapchainKHR.byteLength = 0x8;
/** VkDebugReportCallbackEXT **/
class VkDebugReportCallbackEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkDebugReportCallbackEXT' doesn't take any arguments");
    }
  }
};

VkDebugReportCallbackEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x8));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDebugReportCallbackEXT"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkDebugReportCallbackEXT.byteLength = 0x8;
/** VkDebugUtilsMessengerEXT **/
class VkDebugUtilsMessengerEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkDebugUtilsMessengerEXT' doesn't take any arguments");
    }
  }
};

VkDebugUtilsMessengerEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x8));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDebugUtilsMessengerEXT"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkDebugUtilsMessengerEXT.byteLength = 0x8;
/** VkBaseOutStructure **/
class VkBaseOutStructure {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x10) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x10) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x10);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null ) {
      value.flush();
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
      
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  
};

VkBaseOutStructure.prototype.flush = function flush() {
  
  return true;
};

VkBaseOutStructure.prototype.reflect = function reflect(memoryAddress) {
  
};

VkBaseOutStructure.byteLength = 0x10;

VkBaseOutStructure.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
};
/** VkBaseInStructure **/
class VkBaseInStructure {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x10) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x10) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x10);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null ) {
      value.flush();
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
      
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  
};

VkBaseInStructure.prototype.flush = function flush() {
  
  return true;
};

VkBaseInStructure.prototype.reflect = function reflect(memoryAddress) {
  
};

VkBaseInStructure.byteLength = 0x10;

VkBaseInStructure.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
};
/** VkOffset2D **/
class VkOffset2D {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x8) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x8);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);

    }
    
    
    
    if (typeof opts === "object") {
      if (opts.x !== void 0) this.x = opts.x;
      if (opts.y !== void 0) this.y = opts.y;
      
    }
  }
  get x() {
    return this.memoryViewInt32[0x0];
  }
  set x(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get y() {
    return this.memoryViewInt32[0x1];
  }
  set y(value) {
    
    this.memoryViewInt32[0x1] = value;
  }
  
};

VkOffset2D.prototype.flush = function flush() {
  
  return true;
};

VkOffset2D.prototype.reflect = function reflect(memoryAddress) {
  
};

VkOffset2D.byteLength = 0x8;

VkOffset2D.memoryLayout = {
  x: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  y: {
    byteOffset: 0x4,
    byteLength: 0x4
  },
};
/** VkOffset3D **/
class VkOffset3D {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0xC) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0xC);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);

    }
    
    
    
    
    if (typeof opts === "object") {
      if (opts.x !== void 0) this.x = opts.x;
      if (opts.y !== void 0) this.y = opts.y;
      if (opts.z !== void 0) this.z = opts.z;
      
    }
  }
  get x() {
    return this.memoryViewInt32[0x0];
  }
  set x(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get y() {
    return this.memoryViewInt32[0x1];
  }
  set y(value) {
    
    this.memoryViewInt32[0x1] = value;
  }
  get z() {
    return this.memoryViewInt32[0x2];
  }
  set z(value) {
    
    this.memoryViewInt32[0x2] = value;
  }
  
};

VkOffset3D.prototype.flush = function flush() {
  
  return true;
};

VkOffset3D.prototype.reflect = function reflect(memoryAddress) {
  
};

VkOffset3D.byteLength = 0xC;

VkOffset3D.memoryLayout = {
  x: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  y: {
    byteOffset: 0x4,
    byteLength: 0x4
  },
  z: {
    byteOffset: 0x8,
    byteLength: 0x4
  },
};
/** VkExtent2D **/
class VkExtent2D {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x8) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x8);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    
    
    if (typeof opts === "object") {
      if (opts.width !== void 0) this.width = opts.width;
      if (opts.height !== void 0) this.height = opts.height;
      
    }
  }
  get width() {
    return this.memoryViewUint32[0x0];
  }
  set width(value) {
    
    this.memoryViewUint32[0x0] = value;
  }
  get height() {
    return this.memoryViewUint32[0x1];
  }
  set height(value) {
    
    this.memoryViewUint32[0x1] = value;
  }
  
};

VkExtent2D.prototype.flush = function flush() {
  
  return true;
};

VkExtent2D.prototype.reflect = function reflect(memoryAddress) {
  
};

VkExtent2D.byteLength = 0x8;

VkExtent2D.memoryLayout = {
  width: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  height: {
    byteOffset: 0x4,
    byteLength: 0x4
  },
};
/** VkExtent3D **/
class VkExtent3D {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0xC) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0xC);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    
    
    
    if (typeof opts === "object") {
      if (opts.width !== void 0) this.width = opts.width;
      if (opts.height !== void 0) this.height = opts.height;
      if (opts.depth !== void 0) this.depth = opts.depth;
      
    }
  }
  get width() {
    return this.memoryViewUint32[0x0];
  }
  set width(value) {
    
    this.memoryViewUint32[0x0] = value;
  }
  get height() {
    return this.memoryViewUint32[0x1];
  }
  set height(value) {
    
    this.memoryViewUint32[0x1] = value;
  }
  get depth() {
    return this.memoryViewUint32[0x2];
  }
  set depth(value) {
    
    this.memoryViewUint32[0x2] = value;
  }
  
};

VkExtent3D.prototype.flush = function flush() {
  
  return true;
};

VkExtent3D.prototype.reflect = function reflect(memoryAddress) {
  
};

VkExtent3D.byteLength = 0xC;

VkExtent3D.memoryLayout = {
  width: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  height: {
    byteOffset: 0x4,
    byteLength: 0x4
  },
  depth: {
    byteOffset: 0x8,
    byteLength: 0x4
  },
};
/** VkViewport **/
class VkViewport {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewFloat32 = new Float32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewFloat32 = new Float32Array(this.memoryBuffer);

    }
    
    
    
    
    
    
    
    if (typeof opts === "object") {
      if (opts.x !== void 0) this.x = opts.x;
      if (opts.y !== void 0) this.y = opts.y;
      if (opts.width !== void 0) this.width = opts.width;
      if (opts.height !== void 0) this.height = opts.height;
      if (opts.minDepth !== void 0) this.minDepth = opts.minDepth;
      if (opts.maxDepth !== void 0) this.maxDepth = opts.maxDepth;
      
    }
  }
  get x() {
    return this.memoryViewFloat32[0x0];
  }
  set x(value) {
    
    this.memoryViewFloat32[0x0] = value;
  }
  get y() {
    return this.memoryViewFloat32[0x1];
  }
  set y(value) {
    
    this.memoryViewFloat32[0x1] = value;
  }
  get width() {
    return this.memoryViewFloat32[0x2];
  }
  set width(value) {
    
    this.memoryViewFloat32[0x2] = value;
  }
  get height() {
    return this.memoryViewFloat32[0x3];
  }
  set height(value) {
    
    this.memoryViewFloat32[0x3] = value;
  }
  get minDepth() {
    return this.memoryViewFloat32[0x4];
  }
  set minDepth(value) {
    
    this.memoryViewFloat32[0x4] = value;
  }
  get maxDepth() {
    return this.memoryViewFloat32[0x5];
  }
  set maxDepth(value) {
    
    this.memoryViewFloat32[0x5] = value;
  }
  
};

VkViewport.prototype.flush = function flush() {
  
  return true;
};

VkViewport.prototype.reflect = function reflect(memoryAddress) {
  
};

VkViewport.byteLength = 0x18;

VkViewport.memoryLayout = {
  x: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  y: {
    byteOffset: 0x4,
    byteLength: 0x4
  },
  width: {
    byteOffset: 0x8,
    byteLength: 0x4
  },
  height: {
    byteOffset: 0xC,
    byteLength: 0x4
  },
  minDepth: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  maxDepth: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
};
/** VkRect2D **/
class VkRect2D {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;

    } else {
      this.memoryBuffer = new ArrayBuffer(0x10);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);

    }
    this._offset = new VkOffset2D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x0 });
    this._extent = new VkExtent2D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x8 });
    
    if (typeof opts === "object") {
      if (opts.offset !== void 0) this.offset = opts.offset;
      if (opts.extent !== void 0) this.extent = opts.extent;
      
    }
  }
  get offset() {
    return this._offset;
  }
  set offset(value) {
    if (value !== null ) {
      value.flush();
      this._offset = value;
      
      
    } else if (value === null) {
      this._offset = null;
      
    } 
    
  }
  get extent() {
    return this._extent;
  }
  set extent(value) {
    if (value !== null ) {
      value.flush();
      this._extent = value;
      
      
    } else if (value === null) {
      this._extent = null;
      
    } 
    
  }
  
};

VkRect2D.prototype.flush = function flush() {
  
  
  if (this._offset !== null) {
    this._offset.flush();
    if (this.memoryBuffer !== this._offset.memoryBuffer) {
      let srcView = new Uint8Array(this._offset.memoryBuffer);
      let dstView = new Uint8Array(this.memoryBuffer);
      dstView.set(srcView, 0x0);
      
    }
  }
  
  
  if (this._extent !== null) {
    this._extent.flush();
    if (this.memoryBuffer !== this._extent.memoryBuffer) {
      let srcView = new Uint8Array(this._extent.memoryBuffer);
      let dstView = new Uint8Array(this.memoryBuffer);
      dstView.set(srcView, 0x8);
      
    }
  }
  
  return true;
};

VkRect2D.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
};

VkRect2D.byteLength = 0x10;

VkRect2D.memoryLayout = {
  offset: {
    byteOffset: 0x0,
    byteLength: 0x8
  },
  extent: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
};
/** VkClearRect **/
class VkClearRect {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    this._rect = new VkRect2D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x0 });
    
    
    
    if (typeof opts === "object") {
      if (opts.rect !== void 0) this.rect = opts.rect;
      if (opts.baseArrayLayer !== void 0) this.baseArrayLayer = opts.baseArrayLayer;
      if (opts.layerCount !== void 0) this.layerCount = opts.layerCount;
      
    }
  }
  get rect() {
    return this._rect;
  }
  set rect(value) {
    if (value !== null ) {
      value.flush();
      this._rect = value;
      
      
    } else if (value === null) {
      this._rect = null;
      
    } 
    
  }
  get baseArrayLayer() {
    return this.memoryViewUint32[0x4];
  }
  set baseArrayLayer(value) {
    
    this.memoryViewUint32[0x4] = value;
  }
  get layerCount() {
    return this.memoryViewUint32[0x5];
  }
  set layerCount(value) {
    
    this.memoryViewUint32[0x5] = value;
  }
  
};

VkClearRect.prototype.flush = function flush() {
  
  
  if (this._rect !== null) {
    this._rect.flush();
    if (this.memoryBuffer !== this._rect.memoryBuffer) {
      let srcView = new Uint8Array(this._rect.memoryBuffer);
      let dstView = new Uint8Array(this.memoryBuffer);
      dstView.set(srcView, 0x0);
      
    }
  }
  
  return true;
};

VkClearRect.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkClearRect.byteLength = 0x18;

VkClearRect.memoryLayout = {
  rect: {
    byteOffset: 0x0,
    byteLength: 0x10
  },
  baseArrayLayer: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  layerCount: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
};
/** VkComponentMapping **/
class VkComponentMapping {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x10) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x10);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);

    }
    
    
    
    
    
    if (typeof opts === "object") {
      if (opts.r !== void 0) this.r = opts.r;
      if (opts.g !== void 0) this.g = opts.g;
      if (opts.b !== void 0) this.b = opts.b;
      if (opts.a !== void 0) this.a = opts.a;
      
    }
  }
  get r() {
    return this.memoryViewInt32[0x0];
  }
  set r(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get g() {
    return this.memoryViewInt32[0x1];
  }
  set g(value) {
    
    this.memoryViewInt32[0x1] = value;
  }
  get b() {
    return this.memoryViewInt32[0x2];
  }
  set b(value) {
    
    this.memoryViewInt32[0x2] = value;
  }
  get a() {
    return this.memoryViewInt32[0x3];
  }
  set a(value) {
    
    this.memoryViewInt32[0x3] = value;
  }
  
};

VkComponentMapping.prototype.flush = function flush() {
  
  return true;
};

VkComponentMapping.prototype.reflect = function reflect(memoryAddress) {
  
};

VkComponentMapping.byteLength = 0x10;

VkComponentMapping.memoryLayout = {
  r: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  g: {
    byteOffset: 0x4,
    byteLength: 0x4
  },
  b: {
    byteOffset: 0x8,
    byteLength: 0x4
  },
  a: {
    byteOffset: 0xC,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceProperties **/
class VkPhysicalDeviceProperties {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x338) / 0x4);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x338) / 0x4);
      this.memoryViewUint8 = new Uint8Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x1, (opts.$memoryOffset + 0x338) / 0x1);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x338);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewUint8 = new Uint8Array(this.memoryBuffer);

    }
    
    
    
    
    
    
    this._pipelineCacheUUID = [...Array(16)].fill(0x0);
    this._limits = new VkPhysicalDeviceLimits({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x128 });
    this._sparseProperties = new VkPhysicalDeviceSparseProperties({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x320 });
    
    if (typeof opts === "object") {
      
    }
  }
  get apiVersion() {
    return this.memoryViewUint32[0x0];
  }
  get driverVersion() {
    return this.memoryViewUint32[0x1];
  }
  get vendorID() {
    return this.memoryViewUint32[0x2];
  }
  get deviceID() {
    return this.memoryViewUint32[0x3];
  }
  get deviceType() {
    return this.memoryViewInt32[0x4];
  }
  get deviceName() {
    return decodeNullTerminatedUTF8String(
      new Uint8Array(this.memoryBuffer).subarray(this.$memoryOffset + 0x14, 0x128)
    ) || null;
  }
  get pipelineCacheUUID() {
    return [
      this.memoryViewUint8[0x114],
      this.memoryViewUint8[0x115],
      this.memoryViewUint8[0x116],
      this.memoryViewUint8[0x117],
      this.memoryViewUint8[0x118],
      this.memoryViewUint8[0x119],
      this.memoryViewUint8[0x11A],
      this.memoryViewUint8[0x11B],
      this.memoryViewUint8[0x11C],
      this.memoryViewUint8[0x11D],
      this.memoryViewUint8[0x11E],
      this.memoryViewUint8[0x11F],
      this.memoryViewUint8[0x120],
      this.memoryViewUint8[0x121],
      this.memoryViewUint8[0x122],
      this.memoryViewUint8[0x123]
    ];
  }
  get limits() {
    return this._limits;
  }
  get sparseProperties() {
    return this._sparseProperties;
  }
  
};

VkPhysicalDeviceProperties.prototype.flush = function flush() {
  
  return true;
};

VkPhysicalDeviceProperties.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x338));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x338), 0x0);
  
  
  
  
  
  
};

VkPhysicalDeviceProperties.byteLength = 0x338;

VkPhysicalDeviceProperties.memoryLayout = {
  apiVersion: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  driverVersion: {
    byteOffset: 0x4,
    byteLength: 0x4
  },
  vendorID: {
    byteOffset: 0x8,
    byteLength: 0x4
  },
  deviceID: {
    byteOffset: 0xC,
    byteLength: 0x4
  },
  deviceType: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  deviceName: {
    byteOffset: 0x14,
    byteLength: 0x100
  },
  pipelineCacheUUID: {
    byteOffset: 0x114,
    byteLength: 0x10
  },
  limits: {
    byteOffset: 0x128,
    byteLength: 0x1F8
  },
  sparseProperties: {
    byteOffset: 0x320,
    byteLength: 0x14
  },
};
/** VkExtensionProperties **/
class VkExtensionProperties {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x104) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x104);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    
    
    if (typeof opts === "object") {
      
    }
  }
  get extensionName() {
    return decodeNullTerminatedUTF8String(
      new Uint8Array(this.memoryBuffer).subarray(this.$memoryOffset + 0x0, 0x100)
    ) || null;
  }
  get specVersion() {
    return this.memoryViewUint32[0x40];
  }
  
};

VkExtensionProperties.prototype.flush = function flush() {
  
  return true;
};

VkExtensionProperties.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x104));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x104), 0x0);
};

VkExtensionProperties.byteLength = 0x104;

VkExtensionProperties.memoryLayout = {
  extensionName: {
    byteOffset: 0x0,
    byteLength: 0x100
  },
  specVersion: {
    byteOffset: 0x100,
    byteLength: 0x4
  },
};
/** VkLayerProperties **/
class VkLayerProperties {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x208) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x208);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    
    
    
    
    if (typeof opts === "object") {
      
    }
  }
  get layerName() {
    return decodeNullTerminatedUTF8String(
      new Uint8Array(this.memoryBuffer).subarray(this.$memoryOffset + 0x0, 0x100)
    ) || null;
  }
  get specVersion() {
    return this.memoryViewUint32[0x40];
  }
  get implementationVersion() {
    return this.memoryViewUint32[0x41];
  }
  get description() {
    return decodeNullTerminatedUTF8String(
      new Uint8Array(this.memoryBuffer).subarray(this.$memoryOffset + 0x108, 0x310)
    ) || null;
  }
  
};

VkLayerProperties.prototype.flush = function flush() {
  
  return true;
};

VkLayerProperties.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x208));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x208), 0x0);
};

VkLayerProperties.byteLength = 0x208;

VkLayerProperties.memoryLayout = {
  layerName: {
    byteOffset: 0x0,
    byteLength: 0x100
  },
  specVersion: {
    byteOffset: 0x100,
    byteLength: 0x4
  },
  implementationVersion: {
    byteOffset: 0x104,
    byteLength: 0x4
  },
  description: {
    byteOffset: 0x108,
    byteLength: 0x100
  },
};
/** VkApplicationInfo **/
class VkApplicationInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x30) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x30) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x30) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x30);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._pApplicationName = null;
    
    this._pEngineName = null;
    
    
    this.sType = 0x0;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.pApplicationName !== void 0) this.pApplicationName = opts.pApplicationName;
      if (opts.applicationVersion !== void 0) this.applicationVersion = opts.applicationVersion;
      if (opts.pEngineName !== void 0) this.pEngineName = opts.pEngineName;
      if (opts.engineVersion !== void 0) this.engineVersion = opts.engineVersion;
      if (opts.apiVersion !== void 0) this.apiVersion = opts.apiVersion;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkApplicationInfo.pNext' isn't allowed to be filled");
  }
  get pApplicationName() {
    if (this._pApplicationName !== null) {
      let str = textDecoder.decode(this._pApplicationName);
      return str.substr(0, str.length - 1);
    } else {
      return null;
    }
  }
  set pApplicationName(value) {
    if (value !== null ) {
      this._pApplicationName = textEncoder.encode(value + NULLT).buffer;
      this.memoryViewBigInt64[0x2] = getAddressFromArrayBuffer(this._pApplicationName);
    } else if (value === null) {
      this._pApplicationName = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } 
    
  }
  get applicationVersion() {
    return this.memoryViewUint32[0x6];
  }
  set applicationVersion(value) {
    
    this.memoryViewUint32[0x6] = value;
  }
  get pEngineName() {
    if (this._pEngineName !== null) {
      let str = textDecoder.decode(this._pEngineName);
      return str.substr(0, str.length - 1);
    } else {
      return null;
    }
  }
  set pEngineName(value) {
    if (value !== null ) {
      this._pEngineName = textEncoder.encode(value + NULLT).buffer;
      this.memoryViewBigInt64[0x4] = getAddressFromArrayBuffer(this._pEngineName);
    } else if (value === null) {
      this._pEngineName = null;
      this.memoryViewBigInt64[0x4] = BI0;
    } 
    
  }
  get engineVersion() {
    return this.memoryViewUint32[0xA];
  }
  set engineVersion(value) {
    
    this.memoryViewUint32[0xA] = value;
  }
  get apiVersion() {
    return this.memoryViewUint32[0xB];
  }
  set apiVersion(value) {
    
    this.memoryViewUint32[0xB] = value;
  }
  
};

VkApplicationInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkApplicationInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkApplicationInfo.byteLength = 0x30;

VkApplicationInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  pApplicationName: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
  applicationVersion: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
  pEngineName: {
    byteOffset: 0x20,
    byteLength: 0x8
  },
  engineVersion: {
    byteOffset: 0x28,
    byteLength: 0x4
  },
  apiVersion: {
    byteOffset: 0x2C,
    byteLength: 0x4
  },
};
/** VkAllocationCallbacks **/
class VkAllocationCallbacks {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x30) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x30);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    this._pUserData = null;
    
    if (typeof opts === "object") {
      if (opts.pUserData !== void 0) this.pUserData = opts.pUserData;
      
    }
  }
  get pUserData() {
    return this._pUserData;
  }
  set pUserData(value) {
    if (value !== null ) {
      this._pUserData = value;
      this.memoryViewBigInt64[0x0] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pUserData = null;
      this.memoryViewBigInt64[0x0] = BI0;
    } 
    
  }
  
};

VkAllocationCallbacks.prototype.flush = function flush() {
  
  return true;
};

VkAllocationCallbacks.prototype.reflect = function reflect(memoryAddress) {
  
};

VkAllocationCallbacks.byteLength = 0x30;

VkAllocationCallbacks.memoryLayout = {
  pUserData: {
    byteOffset: 0x0,
    byteLength: 0x8
  },
};
/** VkDeviceQueueCreateInfo **/
class VkDeviceQueueCreateInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x28);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    
    this._pQueuePriorities = null;
    this.sType = 0x2;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.queueFamilyIndex !== void 0) this.queueFamilyIndex = opts.queueFamilyIndex;
      if (opts.queueCount !== void 0) this.queueCount = opts.queueCount;
      if (opts.pQueuePriorities !== void 0) this.pQueuePriorities = opts.pQueuePriorities;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null ) {
      let {sType} = value;
      
      switch (sType) {
          
        case 0x3B9D71B0:
          break;
        default:
          throw new TypeError("Invalid type for 'VkDeviceQueueCreateInfo.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get queueFamilyIndex() {
    return this.memoryViewUint32[0x5];
  }
  set queueFamilyIndex(value) {
    
    this.memoryViewUint32[0x5] = value;
  }
  get queueCount() {
    return this.memoryViewUint32[0x6];
  }
  set queueCount(value) {
    
    this.memoryViewUint32[0x6] = value;
  }
  get pQueuePriorities() {
    return this._pQueuePriorities;
  }
  set pQueuePriorities(value) {
    if (value !== null ) {
      this._pQueuePriorities = value;
      this.memoryViewBigInt64[0x4] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pQueuePriorities = null;
      this.memoryViewBigInt64[0x4] = BI0;
    } 
    
  }
  
};

VkDeviceQueueCreateInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDeviceQueueCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkDeviceQueueCreateInfo.byteLength = 0x28;

VkDeviceQueueCreateInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  flags: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  queueFamilyIndex: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  queueCount: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
  pQueuePriorities: {
    byteOffset: 0x20,
    byteLength: 0x8
  },
};
/** VkDeviceCreateInfo **/
class VkDeviceCreateInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x48) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x48) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x48) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x48);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    this._pQueueCreateInfos = null;
    this._pQueueCreateInfosNative = null;
    
    this._ppEnabledLayerNames = null;
    this._ppEnabledLayerNamesNative = null;
    
    this._ppEnabledExtensionNames = null;
    this._ppEnabledExtensionNamesNative = null;
    this._pEnabledFeatures = null;
    this.sType = 0x3;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.queueCreateInfoCount !== void 0) this.queueCreateInfoCount = opts.queueCreateInfoCount;
      if (opts.pQueueCreateInfos !== void 0) this.pQueueCreateInfos = opts.pQueueCreateInfos;
      if (opts.enabledLayerCount !== void 0) this.enabledLayerCount = opts.enabledLayerCount;
      if (opts.ppEnabledLayerNames !== void 0) this.ppEnabledLayerNames = opts.ppEnabledLayerNames;
      if (opts.enabledExtensionCount !== void 0) this.enabledExtensionCount = opts.enabledExtensionCount;
      if (opts.ppEnabledExtensionNames !== void 0) this.ppEnabledExtensionNames = opts.ppEnabledExtensionNames;
      if (opts.pEnabledFeatures !== void 0) this.pEnabledFeatures = opts.pEnabledFeatures;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null ) {
      let {sType} = value;
      
      switch (sType) {
          
        case 0x3B9BB078:
        case 0x3B9C9EC0:
        case 0x3B9B9909:
        case 0x3B9BDB71:
        case 0x3B9C0E38:
        case 0x3B9D2B64:
        case VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES:
        case 0x3B9D0C20:
        case 0x3B9CE510:
        case VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES:
        case 0x3B9C0A50:
        case 0x3B9EC588:
        case 0x3B9D3EE9:
        case 0x3B9D7D68:
        case 0x3B9C0669:
        case 0x3B9E0238:
        case 0x3B9D8920:
        case 0x3B9DB032:
        case 0x3B9BCFB9:
        case 0x3B9B3760:
        case 0x3B9D5270:
        case 0x3B9DEACA:
        case 0x3B9B8D50:
        case 0x3B9DDB28:
        case 0x3B9DE2F8:
        case 0x3B9DE6E0:
        case 0x3B9E7380:
        case 0x3B9D4AA1:
        case 0x3B9DDF10:
        case 0x3B9DAC48:
        case 0x3B9E1D90:
        case 0x3B9E2948:
        case 0x3B9C5870:
        case 0x3B9E6BB0:
        case 0x3B9E8320:
        case 0x3B9E96A8:
        case 0x3B9EA260:
          break;
        default:
          throw new TypeError("Invalid type for 'VkDeviceCreateInfo.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get queueCreateInfoCount() {
    return this.memoryViewUint32[0x5];
  }
  set queueCreateInfoCount(value) {
    
    this.memoryViewUint32[0x5] = value;
  }
  get pQueueCreateInfos() {
    return this._pQueueCreateInfos;
  }
  set pQueueCreateInfos(value) {
    if (value !== null ) {
      this._pQueueCreateInfos = value;
    } else if (value === null) {
      this._pQueueCreateInfos = null;
    } 
    
  }
  get enabledLayerCount() {
    return this.memoryViewUint32[0x8];
  }
  set enabledLayerCount(value) {
    
    this.memoryViewUint32[0x8] = value;
  }
  get ppEnabledLayerNames() {
    return this._ppEnabledLayerNames;
  }
  set ppEnabledLayerNames(value) {
    if (value !== null ) {
      this._ppEnabledLayerNames = value;
    } else if (value === null) {
      this._ppEnabledLayerNames = null;
    } 
    
  }
  get enabledExtensionCount() {
    return this.memoryViewUint32[0xC];
  }
  set enabledExtensionCount(value) {
    
    this.memoryViewUint32[0xC] = value;
  }
  get ppEnabledExtensionNames() {
    return this._ppEnabledExtensionNames;
  }
  set ppEnabledExtensionNames(value) {
    if (value !== null ) {
      this._ppEnabledExtensionNames = value;
    } else if (value === null) {
      this._ppEnabledExtensionNames = null;
    } 
    
  }
  get pEnabledFeatures() {
    return this._pEnabledFeatures;
  }
  set pEnabledFeatures(value) {
    if (value !== null ) {
      value.flush();
      this._pEnabledFeatures = value;
      this.memoryViewBigInt64[0x8] = value.memoryAddress;
      
    } else if (value === null) {
      this._pEnabledFeatures = null;
      this.memoryViewBigInt64[0x8] = BI0;
    } 
    
  }
  
};

VkDeviceCreateInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pQueueCreateInfos !== null) {
    let array = this._pQueueCreateInfos;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pQueueCreateInfosNative = nativeArray;
    this.memoryViewBigInt64[0x3] = nativeArray.address;
  }
  
  
  if (this._ppEnabledLayerNames !== null) {
    let array = this._ppEnabledLayerNames;
    
    let nativeArray = new NativeStringArray(this._ppEnabledLayerNames);
    this._ppEnabledLayerNamesNative = nativeArray;
    this.memoryViewBigInt64[0x5] = nativeArray.address;
  } else {
    this.memoryViewBigInt64[0x5] = BI0;
  }
  
  
  if (this._ppEnabledExtensionNames !== null) {
    let array = this._ppEnabledExtensionNames;
    
    let nativeArray = new NativeStringArray(this._ppEnabledExtensionNames);
    this._ppEnabledExtensionNamesNative = nativeArray;
    this.memoryViewBigInt64[0x7] = nativeArray.address;
  } else {
    this.memoryViewBigInt64[0x7] = BI0;
  }
  
  return true;
};

VkDeviceCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
  
  
  
  
};

VkDeviceCreateInfo.byteLength = 0x48;

VkDeviceCreateInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  flags: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  queueCreateInfoCount: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  pQueueCreateInfos: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
  enabledLayerCount: {
    byteOffset: 0x20,
    byteLength: 0x4
  },
  ppEnabledLayerNames: {
    byteOffset: 0x28,
    byteLength: 0x8
  },
  enabledExtensionCount: {
    byteOffset: 0x30,
    byteLength: 0x4
  },
  ppEnabledExtensionNames: {
    byteOffset: 0x38,
    byteLength: 0x8
  },
  pEnabledFeatures: {
    byteOffset: 0x40,
    byteLength: 0x8
  },
};
/** VkInstanceCreateInfo **/
class VkInstanceCreateInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x40) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x40) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x40) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x40);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this._pApplicationInfo = null;
    
    this._ppEnabledLayerNames = null;
    this._ppEnabledLayerNamesNative = null;
    
    this._ppEnabledExtensionNames = null;
    this._ppEnabledExtensionNamesNative = null;
    this.sType = 0x1;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.pApplicationInfo !== void 0) this.pApplicationInfo = opts.pApplicationInfo;
      if (opts.enabledLayerCount !== void 0) this.enabledLayerCount = opts.enabledLayerCount;
      if (opts.ppEnabledLayerNames !== void 0) this.ppEnabledLayerNames = opts.ppEnabledLayerNames;
      if (opts.enabledExtensionCount !== void 0) this.enabledExtensionCount = opts.enabledExtensionCount;
      if (opts.ppEnabledExtensionNames !== void 0) this.ppEnabledExtensionNames = opts.ppEnabledExtensionNames;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null ) {
      let {sType} = value;
      
      switch (sType) {
          
        case 0x3B9AF4F8:
        case 0x3B9BB848:
        case 0x3B9E8ED8:
        case 0x3B9CBE04:
          break;
        default:
          throw new TypeError("Invalid type for 'VkInstanceCreateInfo.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get pApplicationInfo() {
    return this._pApplicationInfo;
  }
  set pApplicationInfo(value) {
    if (value !== null ) {
      value.flush();
      this._pApplicationInfo = value;
      this.memoryViewBigInt64[0x3] = value.memoryAddress;
      
    } else if (value === null) {
      this._pApplicationInfo = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } 
    
  }
  get enabledLayerCount() {
    return this.memoryViewUint32[0x8];
  }
  set enabledLayerCount(value) {
    
    this.memoryViewUint32[0x8] = value;
  }
  get ppEnabledLayerNames() {
    return this._ppEnabledLayerNames;
  }
  set ppEnabledLayerNames(value) {
    if (value !== null ) {
      this._ppEnabledLayerNames = value;
    } else if (value === null) {
      this._ppEnabledLayerNames = null;
    } 
    
  }
  get enabledExtensionCount() {
    return this.memoryViewUint32[0xC];
  }
  set enabledExtensionCount(value) {
    
    this.memoryViewUint32[0xC] = value;
  }
  get ppEnabledExtensionNames() {
    return this._ppEnabledExtensionNames;
  }
  set ppEnabledExtensionNames(value) {
    if (value !== null ) {
      this._ppEnabledExtensionNames = value;
    } else if (value === null) {
      this._ppEnabledExtensionNames = null;
    } 
    
  }
  
};

VkInstanceCreateInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._ppEnabledLayerNames !== null) {
    let array = this._ppEnabledLayerNames;
    
    let nativeArray = new NativeStringArray(this._ppEnabledLayerNames);
    this._ppEnabledLayerNamesNative = nativeArray;
    this.memoryViewBigInt64[0x5] = nativeArray.address;
  } else {
    this.memoryViewBigInt64[0x5] = BI0;
  }
  
  
  if (this._ppEnabledExtensionNames !== null) {
    let array = this._ppEnabledExtensionNames;
    
    let nativeArray = new NativeStringArray(this._ppEnabledExtensionNames);
    this._ppEnabledExtensionNamesNative = nativeArray;
    this.memoryViewBigInt64[0x7] = nativeArray.address;
  } else {
    this.memoryViewBigInt64[0x7] = BI0;
  }
  
  return true;
};

VkInstanceCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
  
  
};

VkInstanceCreateInfo.byteLength = 0x40;

VkInstanceCreateInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  flags: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  pApplicationInfo: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
  enabledLayerCount: {
    byteOffset: 0x20,
    byteLength: 0x4
  },
  ppEnabledLayerNames: {
    byteOffset: 0x28,
    byteLength: 0x8
  },
  enabledExtensionCount: {
    byteOffset: 0x30,
    byteLength: 0x4
  },
  ppEnabledExtensionNames: {
    byteOffset: 0x38,
    byteLength: 0x8
  },
};
/** VkQueueFamilyProperties **/
class VkQueueFamilyProperties {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    
    
    this._minImageTransferGranularity = new VkExtent3D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0xC });
    
    if (typeof opts === "object") {
      
    }
  }
  get queueFlags() {
    return this.memoryViewInt32[0x0];
  }
  get queueCount() {
    return this.memoryViewUint32[0x1];
  }
  get timestampValidBits() {
    return this.memoryViewUint32[0x2];
  }
  get minImageTransferGranularity() {
    return this._minImageTransferGranularity;
  }
  
};

VkQueueFamilyProperties.prototype.flush = function flush() {
  
  return true;
};

VkQueueFamilyProperties.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x18));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x18), 0x0);
  
  
};

VkQueueFamilyProperties.byteLength = 0x18;

VkQueueFamilyProperties.memoryLayout = {
  queueFlags: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  queueCount: {
    byteOffset: 0x4,
    byteLength: 0x4
  },
  timestampValidBits: {
    byteOffset: 0x8,
    byteLength: 0x4
  },
  minImageTransferGranularity: {
    byteOffset: 0xC,
    byteLength: 0xC
  },
};
/** VkPhysicalDeviceMemoryProperties **/
class VkPhysicalDeviceMemoryProperties {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x208) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x208);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._memoryTypes = [...Array(32)].map((v, i) => new VkMemoryType({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x4 + (i * 0x8) }));
    
    this._memoryHeaps = [...Array(16)].map((v, i) => new VkMemoryHeap({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x108 + (i * 0x10) }));
    
    if (typeof opts === "object") {
      
    }
  }
  get memoryTypeCount() {
    return this.memoryViewUint32[0x0];
  }
  get memoryTypes() {
    return this._memoryTypes;
  }
  get memoryHeapCount() {
    return this.memoryViewUint32[0x41];
  }
  get memoryHeaps() {
    return this._memoryHeaps;
  }
  
};

VkPhysicalDeviceMemoryProperties.prototype.flush = function flush() {
  
  return true;
};

VkPhysicalDeviceMemoryProperties.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x208));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x208), 0x0);
  
  
  
  
};

VkPhysicalDeviceMemoryProperties.byteLength = 0x208;

VkPhysicalDeviceMemoryProperties.memoryLayout = {
  memoryTypeCount: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  memoryTypes: {
    byteOffset: 0x4,
    byteLength: 0x100
  },
  memoryHeapCount: {
    byteOffset: 0x104,
    byteLength: 0x4
  },
  memoryHeaps: {
    byteOffset: 0x108,
    byteLength: 0x100
  },
};
/** VkMemoryAllocateInfo **/
class VkMemoryAllocateInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    this.sType = 0x5;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.allocationSize !== void 0) this.allocationSize = opts.allocationSize;
      if (opts.memoryTypeIndex !== void 0) this.memoryTypeIndex = opts.memoryTypeIndex;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null ) {
      let {sType} = value;
      
      switch (sType) {
          
        case 0x3B9B2F92:
        case 0x3B9BA4C1:
        case 0x3B9BA8A8:
        case 0x3B9BA8A9:
        case 0x3B9BE342:
        case 0x3B9BE728:
        case 0x3B9BE729:
        case 0x3B9BEB10:
        case 0x3B9BB460:
        case 0x3B9CBA19:
        case 0x3B9D8150:
        case 0x3B9CC1EB:
        case 0x3B9E6BB1:
          break;
        default:
          throw new TypeError("Invalid type for 'VkMemoryAllocateInfo.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  get allocationSize() {
    return this.memoryViewBigUint64[0x2];
  }
  set allocationSize(value) {
    
    this.memoryViewBigUint64[0x2] = BigInt(value);
  }
  get memoryTypeIndex() {
    return this.memoryViewUint32[0x6];
  }
  set memoryTypeIndex(value) {
    
    this.memoryViewUint32[0x6] = value;
  }
  
};

VkMemoryAllocateInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkMemoryAllocateInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkMemoryAllocateInfo.byteLength = 0x20;

VkMemoryAllocateInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  allocationSize: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
  memoryTypeIndex: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
};
/** VkMemoryRequirements **/
class VkMemoryRequirements {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    
    
    
    if (typeof opts === "object") {
      
    }
  }
  get size() {
    return this.memoryViewBigUint64[0x0];
  }
  get alignment() {
    return this.memoryViewBigUint64[0x1];
  }
  get memoryTypeBits() {
    return this.memoryViewUint32[0x4];
  }
  
};

VkMemoryRequirements.prototype.flush = function flush() {
  
  return true;
};

VkMemoryRequirements.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x18));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x18), 0x0);
};

VkMemoryRequirements.byteLength = 0x18;

VkMemoryRequirements.memoryLayout = {
  size: {
    byteOffset: 0x0,
    byteLength: 0x8
  },
  alignment: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  memoryTypeBits: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkSparseImageFormatProperties **/
class VkSparseImageFormatProperties {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x14) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x14);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);

    }
    
    this._imageGranularity = new VkExtent3D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x4 });
    
    
    if (typeof opts === "object") {
      
    }
  }
  get aspectMask() {
    return this.memoryViewInt32[0x0];
  }
  get imageGranularity() {
    return this._imageGranularity;
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  
};

VkSparseImageFormatProperties.prototype.flush = function flush() {
  
  return true;
};

VkSparseImageFormatProperties.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x14));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x14), 0x0);
  
  
};

VkSparseImageFormatProperties.byteLength = 0x14;

VkSparseImageFormatProperties.memoryLayout = {
  aspectMask: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  imageGranularity: {
    byteOffset: 0x4,
    byteLength: 0xC
  },
  flags: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkSparseImageMemoryRequirements **/
class VkSparseImageMemoryRequirements {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x30) / 0x4);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x30) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x30);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);

    }
    this._formatProperties = new VkSparseImageFormatProperties({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x0 });
    
    
    
    
    
    if (typeof opts === "object") {
      
    }
  }
  get formatProperties() {
    return this._formatProperties;
  }
  get imageMipTailFirstLod() {
    return this.memoryViewUint32[0x5];
  }
  get imageMipTailSize() {
    return this.memoryViewBigUint64[0x3];
  }
  get imageMipTailOffset() {
    return this.memoryViewBigUint64[0x4];
  }
  get imageMipTailStride() {
    return this.memoryViewBigUint64[0x5];
  }
  
};

VkSparseImageMemoryRequirements.prototype.flush = function flush() {
  
  return true;
};

VkSparseImageMemoryRequirements.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x30));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x30), 0x0);
  
  
};

VkSparseImageMemoryRequirements.byteLength = 0x30;

VkSparseImageMemoryRequirements.memoryLayout = {
  formatProperties: {
    byteOffset: 0x0,
    byteLength: 0x14
  },
  imageMipTailFirstLod: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  imageMipTailSize: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
  imageMipTailOffset: {
    byteOffset: 0x20,
    byteLength: 0x8
  },
  imageMipTailStride: {
    byteOffset: 0x28,
    byteLength: 0x8
  },
};
/** VkMemoryType **/
class VkMemoryType {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x8) / 0x4);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x8) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x8);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    
    
    if (typeof opts === "object") {
      
    }
  }
  get propertyFlags() {
    return this.memoryViewInt32[0x0];
  }
  get heapIndex() {
    return this.memoryViewUint32[0x1];
  }
  
};

VkMemoryType.prototype.flush = function flush() {
  
  return true;
};

VkMemoryType.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x8));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x8), 0x0);
};

VkMemoryType.byteLength = 0x8;

VkMemoryType.memoryLayout = {
  propertyFlags: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  heapIndex: {
    byteOffset: 0x4,
    byteLength: 0x4
  },
};
/** VkMemoryHeap **/
class VkMemoryHeap {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x10) / 0x8);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x10) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x10);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);

    }
    
    
    
    if (typeof opts === "object") {
      
    }
  }
  get size() {
    return this.memoryViewBigUint64[0x0];
  }
  get flags() {
    return this.memoryViewInt32[0x2];
  }
  
};

VkMemoryHeap.prototype.flush = function flush() {
  
  return true;
};

VkMemoryHeap.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x10));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x10), 0x0);
};

VkMemoryHeap.byteLength = 0x10;

VkMemoryHeap.memoryLayout = {
  size: {
    byteOffset: 0x0,
    byteLength: 0x8
  },
  flags: {
    byteOffset: 0x8,
    byteLength: 0x4
  },
};
/** VkMappedMemoryRange **/
class VkMappedMemoryRange {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x28);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._memory = null;
    
    
    this.sType = 0x6;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.memory !== void 0) this.memory = opts.memory;
      if (opts.offset !== void 0) this.offset = opts.offset;
      if (opts.size !== void 0) this.size = opts.size;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkMappedMemoryRange.pNext' isn't allowed to be filled");
  }
  get memory() {
    return this._memory;
  }
  set memory(value) {
    if (value !== null ) {
      
      this._memory = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._memory = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } 
    
  }
  get offset() {
    return this.memoryViewBigUint64[0x3];
  }
  set offset(value) {
    
    this.memoryViewBigUint64[0x3] = BigInt(value);
  }
  get size() {
    return this.memoryViewBigUint64[0x4];
  }
  set size(value) {
    
    this.memoryViewBigUint64[0x4] = BigInt(value);
  }
  
};

VkMappedMemoryRange.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkMappedMemoryRange.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkMappedMemoryRange.byteLength = 0x28;

VkMappedMemoryRange.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  memory: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
  offset: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
  size: {
    byteOffset: 0x20,
    byteLength: 0x8
  },
};
/** VkFormatProperties **/
class VkFormatProperties {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0xC) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0xC);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);

    }
    
    
    
    
    if (typeof opts === "object") {
      
    }
  }
  get linearTilingFeatures() {
    return this.memoryViewInt32[0x0];
  }
  get optimalTilingFeatures() {
    return this.memoryViewInt32[0x1];
  }
  get bufferFeatures() {
    return this.memoryViewInt32[0x2];
  }
  
};

VkFormatProperties.prototype.flush = function flush() {
  
  return true;
};

VkFormatProperties.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0xC));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0xC), 0x0);
};

VkFormatProperties.byteLength = 0xC;

VkFormatProperties.memoryLayout = {
  linearTilingFeatures: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  optimalTilingFeatures: {
    byteOffset: 0x4,
    byteLength: 0x4
  },
  bufferFeatures: {
    byteOffset: 0x8,
    byteLength: 0x4
  },
};
/** VkImageFormatProperties **/
class VkImageFormatProperties {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);

    }
    this._maxExtent = new VkExtent3D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x0 });
    
    
    
    
    
    if (typeof opts === "object") {
      
    }
  }
  get maxExtent() {
    return this._maxExtent;
  }
  get maxMipLevels() {
    return this.memoryViewUint32[0x3];
  }
  get maxArrayLayers() {
    return this.memoryViewUint32[0x4];
  }
  get sampleCounts() {
    return this.memoryViewInt32[0x5];
  }
  get maxResourceSize() {
    return this.memoryViewBigUint64[0x3];
  }
  
};

VkImageFormatProperties.prototype.flush = function flush() {
  
  return true;
};

VkImageFormatProperties.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x20));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x20), 0x0);
  
  
};

VkImageFormatProperties.byteLength = 0x20;

VkImageFormatProperties.memoryLayout = {
  maxExtent: {
    byteOffset: 0x0,
    byteLength: 0xC
  },
  maxMipLevels: {
    byteOffset: 0xC,
    byteLength: 0x4
  },
  maxArrayLayers: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  sampleCounts: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  maxResourceSize: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
};
/** VkDescriptorBufferInfo **/
class VkDescriptorBufferInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);

    }
    this._buffer = null;
    
    
    
    if (typeof opts === "object") {
      if (opts.buffer !== void 0) this.buffer = opts.buffer;
      if (opts.offset !== void 0) this.offset = opts.offset;
      if (opts.range !== void 0) this.range = opts.range;
      
    }
  }
  get buffer() {
    return this._buffer;
  }
  set buffer(value) {
    if (value !== null ) {
      
      this._buffer = value;
      
      this.memoryViewBigInt64[0x0] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._buffer = null;
      this.memoryViewBigInt64[0x0] = BI0;
    } 
    
  }
  get offset() {
    return this.memoryViewBigUint64[0x1];
  }
  set offset(value) {
    
    this.memoryViewBigUint64[0x1] = BigInt(value);
  }
  get range() {
    return this.memoryViewBigUint64[0x2];
  }
  set range(value) {
    
    this.memoryViewBigUint64[0x2] = BigInt(value);
  }
  
};

VkDescriptorBufferInfo.prototype.flush = function flush() {
  
  return true;
};

VkDescriptorBufferInfo.prototype.reflect = function reflect(memoryAddress) {
  
};

VkDescriptorBufferInfo.byteLength = 0x18;

VkDescriptorBufferInfo.memoryLayout = {
  buffer: {
    byteOffset: 0x0,
    byteLength: 0x8
  },
  offset: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  range: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
};
/** VkDescriptorImageInfo **/
class VkDescriptorImageInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);

    }
    this._sampler = null;
    this._imageView = null;
    
    
    if (typeof opts === "object") {
      if (opts.sampler !== void 0) this.sampler = opts.sampler;
      if (opts.imageView !== void 0) this.imageView = opts.imageView;
      if (opts.imageLayout !== void 0) this.imageLayout = opts.imageLayout;
      
    }
  }
  get sampler() {
    return this._sampler;
  }
  set sampler(value) {
    if (value !== null ) {
      
      this._sampler = value;
      
      this.memoryViewBigInt64[0x0] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._sampler = null;
      this.memoryViewBigInt64[0x0] = BI0;
    } 
    
  }
  get imageView() {
    return this._imageView;
  }
  set imageView(value) {
    if (value !== null ) {
      
      this._imageView = value;
      
      this.memoryViewBigInt64[0x1] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._imageView = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  get imageLayout() {
    return this.memoryViewInt32[0x4];
  }
  set imageLayout(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkDescriptorImageInfo.prototype.flush = function flush() {
  
  return true;
};

VkDescriptorImageInfo.prototype.reflect = function reflect(memoryAddress) {
  
};

VkDescriptorImageInfo.byteLength = 0x18;

VkDescriptorImageInfo.memoryLayout = {
  sampler: {
    byteOffset: 0x0,
    byteLength: 0x8
  },
  imageView: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  imageLayout: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkWriteDescriptorSet **/
class VkWriteDescriptorSet {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x40) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x40) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x40) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x40);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._dstSet = null;
    
    
    
    
    this._pImageInfo = null;
    this._pImageInfoNative = null;
    this._pBufferInfo = null;
    this._pBufferInfoNative = null;
    this._pTexelBufferView = null;
    this._pTexelBufferViewNative = null;
    this.sType = 0x23;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.dstSet !== void 0) this.dstSet = opts.dstSet;
      if (opts.dstBinding !== void 0) this.dstBinding = opts.dstBinding;
      if (opts.dstArrayElement !== void 0) this.dstArrayElement = opts.dstArrayElement;
      if (opts.descriptorCount !== void 0) this.descriptorCount = opts.descriptorCount;
      if (opts.descriptorType !== void 0) this.descriptorType = opts.descriptorType;
      if (opts.pImageInfo !== void 0) this.pImageInfo = opts.pImageInfo;
      if (opts.pBufferInfo !== void 0) this.pBufferInfo = opts.pBufferInfo;
      if (opts.pTexelBufferView !== void 0) this.pTexelBufferView = opts.pTexelBufferView;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null ) {
      let {sType} = value;
      
      switch (sType) {
          
        case 0x3B9CE512:
        case 0x3B9D4E8F:
          break;
        default:
          throw new TypeError("Invalid type for 'VkWriteDescriptorSet.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  get dstSet() {
    return this._dstSet;
  }
  set dstSet(value) {
    if (value !== null ) {
      
      this._dstSet = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._dstSet = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } 
    
  }
  get dstBinding() {
    return this.memoryViewUint32[0x6];
  }
  set dstBinding(value) {
    
    this.memoryViewUint32[0x6] = value;
  }
  get dstArrayElement() {
    return this.memoryViewUint32[0x7];
  }
  set dstArrayElement(value) {
    
    this.memoryViewUint32[0x7] = value;
  }
  get descriptorCount() {
    return this.memoryViewUint32[0x8];
  }
  set descriptorCount(value) {
    
    this.memoryViewUint32[0x8] = value;
  }
  get descriptorType() {
    return this.memoryViewInt32[0x9];
  }
  set descriptorType(value) {
    
    this.memoryViewInt32[0x9] = value;
  }
  get pImageInfo() {
    return this._pImageInfo;
  }
  set pImageInfo(value) {
    if (value !== null ) {
      this._pImageInfo = value;
    } else if (value === null) {
      this._pImageInfo = null;
    } 
    
  }
  get pBufferInfo() {
    return this._pBufferInfo;
  }
  set pBufferInfo(value) {
    if (value !== null ) {
      this._pBufferInfo = value;
    } else if (value === null) {
      this._pBufferInfo = null;
    } 
    
  }
  get pTexelBufferView() {
    return this._pTexelBufferView;
  }
  set pTexelBufferView(value) {
    if (value !== null ) {
      this._pTexelBufferView = value;
    } else if (value === null) {
      this._pTexelBufferView = null;
    } 
    
  }
  
};

VkWriteDescriptorSet.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pImageInfo !== null) {
    let array = this._pImageInfo;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pImageInfoNative = nativeArray;
    this.memoryViewBigInt64[0x5] = nativeArray.address;
  }
  
  
  if (this._pBufferInfo !== null) {
    let array = this._pBufferInfo;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pBufferInfoNative = nativeArray;
    this.memoryViewBigInt64[0x6] = nativeArray.address;
  }
  
  
  if (this._pTexelBufferView !== null) {
    let array = this._pTexelBufferView;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pTexelBufferViewNative = nativeArray;
    this.memoryViewBigInt64[0x7] = nativeArray.address;
  }
  
  return true;
};

VkWriteDescriptorSet.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
  
  
  
  
};

VkWriteDescriptorSet.byteLength = 0x40;

VkWriteDescriptorSet.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  dstSet: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
  dstBinding: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
  dstArrayElement: {
    byteOffset: 0x1C,
    byteLength: 0x4
  },
  descriptorCount: {
    byteOffset: 0x20,
    byteLength: 0x4
  },
  descriptorType: {
    byteOffset: 0x24,
    byteLength: 0x4
  },
  pImageInfo: {
    byteOffset: 0x28,
    byteLength: 0x8
  },
  pBufferInfo: {
    byteOffset: 0x30,
    byteLength: 0x8
  },
  pTexelBufferView: {
    byteOffset: 0x38,
    byteLength: 0x8
  },
};
/** VkCopyDescriptorSet **/
class VkCopyDescriptorSet {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x38) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x38) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x38) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x38);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._srcSet = null;
    
    
    this._dstSet = null;
    
    
    
    this.sType = 0x24;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.srcSet !== void 0) this.srcSet = opts.srcSet;
      if (opts.srcBinding !== void 0) this.srcBinding = opts.srcBinding;
      if (opts.srcArrayElement !== void 0) this.srcArrayElement = opts.srcArrayElement;
      if (opts.dstSet !== void 0) this.dstSet = opts.dstSet;
      if (opts.dstBinding !== void 0) this.dstBinding = opts.dstBinding;
      if (opts.dstArrayElement !== void 0) this.dstArrayElement = opts.dstArrayElement;
      if (opts.descriptorCount !== void 0) this.descriptorCount = opts.descriptorCount;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkCopyDescriptorSet.pNext' isn't allowed to be filled");
  }
  get srcSet() {
    return this._srcSet;
  }
  set srcSet(value) {
    if (value !== null ) {
      
      this._srcSet = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._srcSet = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } 
    
  }
  get srcBinding() {
    return this.memoryViewUint32[0x6];
  }
  set srcBinding(value) {
    
    this.memoryViewUint32[0x6] = value;
  }
  get srcArrayElement() {
    return this.memoryViewUint32[0x7];
  }
  set srcArrayElement(value) {
    
    this.memoryViewUint32[0x7] = value;
  }
  get dstSet() {
    return this._dstSet;
  }
  set dstSet(value) {
    if (value !== null ) {
      
      this._dstSet = value;
      
      this.memoryViewBigInt64[0x4] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._dstSet = null;
      this.memoryViewBigInt64[0x4] = BI0;
    } 
    
  }
  get dstBinding() {
    return this.memoryViewUint32[0xA];
  }
  set dstBinding(value) {
    
    this.memoryViewUint32[0xA] = value;
  }
  get dstArrayElement() {
    return this.memoryViewUint32[0xB];
  }
  set dstArrayElement(value) {
    
    this.memoryViewUint32[0xB] = value;
  }
  get descriptorCount() {
    return this.memoryViewUint32[0xC];
  }
  set descriptorCount(value) {
    
    this.memoryViewUint32[0xC] = value;
  }
  
};

VkCopyDescriptorSet.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkCopyDescriptorSet.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkCopyDescriptorSet.byteLength = 0x38;

VkCopyDescriptorSet.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  srcSet: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
  srcBinding: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
  srcArrayElement: {
    byteOffset: 0x1C,
    byteLength: 0x4
  },
  dstSet: {
    byteOffset: 0x20,
    byteLength: 0x8
  },
  dstBinding: {
    byteOffset: 0x28,
    byteLength: 0x4
  },
  dstArrayElement: {
    byteOffset: 0x2C,
    byteLength: 0x4
  },
  descriptorCount: {
    byteOffset: 0x30,
    byteLength: 0x4
  },
};
/** VkBufferCreateInfo **/
class VkBufferCreateInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x38) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x38) / 0x8);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x38) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x38) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x38);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    
    
    
    this._pQueueFamilyIndices = null;
    this.sType = 0xC;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.size !== void 0) this.size = opts.size;
      if (opts.usage !== void 0) this.usage = opts.usage;
      if (opts.sharingMode !== void 0) this.sharingMode = opts.sharingMode;
      if (opts.queueFamilyIndexCount !== void 0) this.queueFamilyIndexCount = opts.queueFamilyIndexCount;
      if (opts.pQueueFamilyIndices !== void 0) this.pQueueFamilyIndices = opts.pQueueFamilyIndices;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null ) {
      let {sType} = value;
      
      switch (sType) {
          
        case 0x3B9B2F91:
        case 0x3B9BE340:
        case 0x3B9E8322:
          break;
        default:
          throw new TypeError("Invalid type for 'VkBufferCreateInfo.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get size() {
    return this.memoryViewBigUint64[0x3];
  }
  set size(value) {
    
    this.memoryViewBigUint64[0x3] = BigInt(value);
  }
  get usage() {
    return this.memoryViewInt32[0x8];
  }
  set usage(value) {
    
    this.memoryViewInt32[0x8] = value;
  }
  get sharingMode() {
    return this.memoryViewInt32[0x9];
  }
  set sharingMode(value) {
    
    this.memoryViewInt32[0x9] = value;
  }
  get queueFamilyIndexCount() {
    return this.memoryViewUint32[0xA];
  }
  set queueFamilyIndexCount(value) {
    
    this.memoryViewUint32[0xA] = value;
  }
  get pQueueFamilyIndices() {
    return this._pQueueFamilyIndices;
  }
  set pQueueFamilyIndices(value) {
    if (value !== null ) {
      this._pQueueFamilyIndices = value;
      this.memoryViewBigInt64[0x6] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pQueueFamilyIndices = null;
      this.memoryViewBigInt64[0x6] = BI0;
    } 
    
  }
  
};

VkBufferCreateInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkBufferCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkBufferCreateInfo.byteLength = 0x38;

VkBufferCreateInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  flags: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  size: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
  usage: {
    byteOffset: 0x20,
    byteLength: 0x4
  },
  sharingMode: {
    byteOffset: 0x24,
    byteLength: 0x4
  },
  queueFamilyIndexCount: {
    byteOffset: 0x28,
    byteLength: 0x4
  },
  pQueueFamilyIndices: {
    byteOffset: 0x30,
    byteLength: 0x8
  },
};
/** VkBufferViewCreateInfo **/
class VkBufferViewCreateInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x38) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x38) / 0x8);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x38) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x38);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this._buffer = null;
    
    
    
    this.sType = 0xD;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.buffer !== void 0) this.buffer = opts.buffer;
      if (opts.format !== void 0) this.format = opts.format;
      if (opts.offset !== void 0) this.offset = opts.offset;
      if (opts.range !== void 0) this.range = opts.range;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkBufferViewCreateInfo.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get buffer() {
    return this._buffer;
  }
  set buffer(value) {
    if (value !== null ) {
      
      this._buffer = value;
      
      this.memoryViewBigInt64[0x3] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._buffer = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } 
    
  }
  get format() {
    return this.memoryViewInt32[0x8];
  }
  set format(value) {
    
    this.memoryViewInt32[0x8] = value;
  }
  get offset() {
    return this.memoryViewBigUint64[0x5];
  }
  set offset(value) {
    
    this.memoryViewBigUint64[0x5] = BigInt(value);
  }
  get range() {
    return this.memoryViewBigUint64[0x6];
  }
  set range(value) {
    
    this.memoryViewBigUint64[0x6] = BigInt(value);
  }
  
};

VkBufferViewCreateInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkBufferViewCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkBufferViewCreateInfo.byteLength = 0x38;

VkBufferViewCreateInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  flags: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  buffer: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
  format: {
    byteOffset: 0x20,
    byteLength: 0x4
  },
  offset: {
    byteOffset: 0x28,
    byteLength: 0x8
  },
  range: {
    byteOffset: 0x30,
    byteLength: 0x8
  },
};
/** VkImageSubresource **/
class VkImageSubresource {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0xC) / 0x4);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0xC) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0xC);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    
    
    
    if (typeof opts === "object") {
      if (opts.aspectMask !== void 0) this.aspectMask = opts.aspectMask;
      if (opts.mipLevel !== void 0) this.mipLevel = opts.mipLevel;
      if (opts.arrayLayer !== void 0) this.arrayLayer = opts.arrayLayer;
      
    }
  }
  get aspectMask() {
    return this.memoryViewInt32[0x0];
  }
  set aspectMask(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get mipLevel() {
    return this.memoryViewUint32[0x1];
  }
  set mipLevel(value) {
    
    this.memoryViewUint32[0x1] = value;
  }
  get arrayLayer() {
    return this.memoryViewUint32[0x2];
  }
  set arrayLayer(value) {
    
    this.memoryViewUint32[0x2] = value;
  }
  
};

VkImageSubresource.prototype.flush = function flush() {
  
  return true;
};

VkImageSubresource.prototype.reflect = function reflect(memoryAddress) {
  
};

VkImageSubresource.byteLength = 0xC;

VkImageSubresource.memoryLayout = {
  aspectMask: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  mipLevel: {
    byteOffset: 0x4,
    byteLength: 0x4
  },
  arrayLayer: {
    byteOffset: 0x8,
    byteLength: 0x4
  },
};
/** VkImageSubresourceLayers **/
class VkImageSubresourceLayers {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x10) / 0x4);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x10) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x10);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    
    
    
    
    if (typeof opts === "object") {
      if (opts.aspectMask !== void 0) this.aspectMask = opts.aspectMask;
      if (opts.mipLevel !== void 0) this.mipLevel = opts.mipLevel;
      if (opts.baseArrayLayer !== void 0) this.baseArrayLayer = opts.baseArrayLayer;
      if (opts.layerCount !== void 0) this.layerCount = opts.layerCount;
      
    }
  }
  get aspectMask() {
    return this.memoryViewInt32[0x0];
  }
  set aspectMask(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get mipLevel() {
    return this.memoryViewUint32[0x1];
  }
  set mipLevel(value) {
    
    this.memoryViewUint32[0x1] = value;
  }
  get baseArrayLayer() {
    return this.memoryViewUint32[0x2];
  }
  set baseArrayLayer(value) {
    
    this.memoryViewUint32[0x2] = value;
  }
  get layerCount() {
    return this.memoryViewUint32[0x3];
  }
  set layerCount(value) {
    
    this.memoryViewUint32[0x3] = value;
  }
  
};

VkImageSubresourceLayers.prototype.flush = function flush() {
  
  return true;
};

VkImageSubresourceLayers.prototype.reflect = function reflect(memoryAddress) {
  
};

VkImageSubresourceLayers.byteLength = 0x10;

VkImageSubresourceLayers.memoryLayout = {
  aspectMask: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  mipLevel: {
    byteOffset: 0x4,
    byteLength: 0x4
  },
  baseArrayLayer: {
    byteOffset: 0x8,
    byteLength: 0x4
  },
  layerCount: {
    byteOffset: 0xC,
    byteLength: 0x4
  },
};
/** VkImageSubresourceRange **/
class VkImageSubresourceRange {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x14) / 0x4);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x14) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x14);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    
    
    
    
    
    if (typeof opts === "object") {
      if (opts.aspectMask !== void 0) this.aspectMask = opts.aspectMask;
      if (opts.baseMipLevel !== void 0) this.baseMipLevel = opts.baseMipLevel;
      if (opts.levelCount !== void 0) this.levelCount = opts.levelCount;
      if (opts.baseArrayLayer !== void 0) this.baseArrayLayer = opts.baseArrayLayer;
      if (opts.layerCount !== void 0) this.layerCount = opts.layerCount;
      
    }
  }
  get aspectMask() {
    return this.memoryViewInt32[0x0];
  }
  set aspectMask(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get baseMipLevel() {
    return this.memoryViewUint32[0x1];
  }
  set baseMipLevel(value) {
    
    this.memoryViewUint32[0x1] = value;
  }
  get levelCount() {
    return this.memoryViewUint32[0x2];
  }
  set levelCount(value) {
    
    this.memoryViewUint32[0x2] = value;
  }
  get baseArrayLayer() {
    return this.memoryViewUint32[0x3];
  }
  set baseArrayLayer(value) {
    
    this.memoryViewUint32[0x3] = value;
  }
  get layerCount() {
    return this.memoryViewUint32[0x4];
  }
  set layerCount(value) {
    
    this.memoryViewUint32[0x4] = value;
  }
  
};

VkImageSubresourceRange.prototype.flush = function flush() {
  
  return true;
};

VkImageSubresourceRange.prototype.reflect = function reflect(memoryAddress) {
  
};

VkImageSubresourceRange.byteLength = 0x14;

VkImageSubresourceRange.memoryLayout = {
  aspectMask: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  baseMipLevel: {
    byteOffset: 0x4,
    byteLength: 0x4
  },
  levelCount: {
    byteOffset: 0x8,
    byteLength: 0x4
  },
  baseArrayLayer: {
    byteOffset: 0xC,
    byteLength: 0x4
  },
  layerCount: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkMemoryBarrier **/
class VkMemoryBarrier {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    this.sType = 0x2E;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.srcAccessMask !== void 0) this.srcAccessMask = opts.srcAccessMask;
      if (opts.dstAccessMask !== void 0) this.dstAccessMask = opts.dstAccessMask;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkMemoryBarrier.pNext' isn't allowed to be filled");
  }
  get srcAccessMask() {
    return this.memoryViewInt32[0x4];
  }
  set srcAccessMask(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get dstAccessMask() {
    return this.memoryViewInt32[0x5];
  }
  set dstAccessMask(value) {
    
    this.memoryViewInt32[0x5] = value;
  }
  
};

VkMemoryBarrier.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkMemoryBarrier.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkMemoryBarrier.byteLength = 0x18;

VkMemoryBarrier.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  srcAccessMask: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  dstAccessMask: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
};
/** VkBufferMemoryBarrier **/
class VkBufferMemoryBarrier {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x38) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x38) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x38) / 0x4);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x38) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x38);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    
    
    this._buffer = null;
    
    
    this.sType = 0x2C;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.srcAccessMask !== void 0) this.srcAccessMask = opts.srcAccessMask;
      if (opts.dstAccessMask !== void 0) this.dstAccessMask = opts.dstAccessMask;
      if (opts.srcQueueFamilyIndex !== void 0) this.srcQueueFamilyIndex = opts.srcQueueFamilyIndex;
      if (opts.dstQueueFamilyIndex !== void 0) this.dstQueueFamilyIndex = opts.dstQueueFamilyIndex;
      if (opts.buffer !== void 0) this.buffer = opts.buffer;
      if (opts.offset !== void 0) this.offset = opts.offset;
      if (opts.size !== void 0) this.size = opts.size;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkBufferMemoryBarrier.pNext' isn't allowed to be filled");
  }
  get srcAccessMask() {
    return this.memoryViewInt32[0x4];
  }
  set srcAccessMask(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get dstAccessMask() {
    return this.memoryViewInt32[0x5];
  }
  set dstAccessMask(value) {
    
    this.memoryViewInt32[0x5] = value;
  }
  get srcQueueFamilyIndex() {
    return this.memoryViewUint32[0x6];
  }
  set srcQueueFamilyIndex(value) {
    
    this.memoryViewUint32[0x6] = value;
  }
  get dstQueueFamilyIndex() {
    return this.memoryViewUint32[0x7];
  }
  set dstQueueFamilyIndex(value) {
    
    this.memoryViewUint32[0x7] = value;
  }
  get buffer() {
    return this._buffer;
  }
  set buffer(value) {
    if (value !== null ) {
      
      this._buffer = value;
      
      this.memoryViewBigInt64[0x4] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._buffer = null;
      this.memoryViewBigInt64[0x4] = BI0;
    } 
    
  }
  get offset() {
    return this.memoryViewBigUint64[0x5];
  }
  set offset(value) {
    
    this.memoryViewBigUint64[0x5] = BigInt(value);
  }
  get size() {
    return this.memoryViewBigUint64[0x6];
  }
  set size(value) {
    
    this.memoryViewBigUint64[0x6] = BigInt(value);
  }
  
};

VkBufferMemoryBarrier.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkBufferMemoryBarrier.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkBufferMemoryBarrier.byteLength = 0x38;

VkBufferMemoryBarrier.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  srcAccessMask: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  dstAccessMask: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  srcQueueFamilyIndex: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
  dstQueueFamilyIndex: {
    byteOffset: 0x1C,
    byteLength: 0x4
  },
  buffer: {
    byteOffset: 0x20,
    byteLength: 0x8
  },
  offset: {
    byteOffset: 0x28,
    byteLength: 0x8
  },
  size: {
    byteOffset: 0x30,
    byteLength: 0x8
  },
};
/** VkImageMemoryBarrier **/
class VkImageMemoryBarrier {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x48) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x48) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x48) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x48);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    
    
    
    
    this._image = null;
    this._subresourceRange = new VkImageSubresourceRange({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x30 });
    this.sType = 0x2D;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.srcAccessMask !== void 0) this.srcAccessMask = opts.srcAccessMask;
      if (opts.dstAccessMask !== void 0) this.dstAccessMask = opts.dstAccessMask;
      if (opts.oldLayout !== void 0) this.oldLayout = opts.oldLayout;
      if (opts.newLayout !== void 0) this.newLayout = opts.newLayout;
      if (opts.srcQueueFamilyIndex !== void 0) this.srcQueueFamilyIndex = opts.srcQueueFamilyIndex;
      if (opts.dstQueueFamilyIndex !== void 0) this.dstQueueFamilyIndex = opts.dstQueueFamilyIndex;
      if (opts.image !== void 0) this.image = opts.image;
      if (opts.subresourceRange !== void 0) this.subresourceRange = opts.subresourceRange;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null ) {
      let {sType} = value;
      
      switch (sType) {
          
        case 0x3B9CF898:
          break;
        default:
          throw new TypeError("Invalid type for 'VkImageMemoryBarrier.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  get srcAccessMask() {
    return this.memoryViewInt32[0x4];
  }
  set srcAccessMask(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get dstAccessMask() {
    return this.memoryViewInt32[0x5];
  }
  set dstAccessMask(value) {
    
    this.memoryViewInt32[0x5] = value;
  }
  get oldLayout() {
    return this.memoryViewInt32[0x6];
  }
  set oldLayout(value) {
    
    this.memoryViewInt32[0x6] = value;
  }
  get newLayout() {
    return this.memoryViewInt32[0x7];
  }
  set newLayout(value) {
    
    this.memoryViewInt32[0x7] = value;
  }
  get srcQueueFamilyIndex() {
    return this.memoryViewUint32[0x8];
  }
  set srcQueueFamilyIndex(value) {
    
    this.memoryViewUint32[0x8] = value;
  }
  get dstQueueFamilyIndex() {
    return this.memoryViewUint32[0x9];
  }
  set dstQueueFamilyIndex(value) {
    
    this.memoryViewUint32[0x9] = value;
  }
  get image() {
    return this._image;
  }
  set image(value) {
    if (value !== null ) {
      
      this._image = value;
      
      this.memoryViewBigInt64[0x5] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._image = null;
      this.memoryViewBigInt64[0x5] = BI0;
    } 
    
  }
  get subresourceRange() {
    return this._subresourceRange;
  }
  set subresourceRange(value) {
    if (value !== null ) {
      value.flush();
      this._subresourceRange = value;
      
      
    } else if (value === null) {
      this._subresourceRange = null;
      
    } 
    
  }
  
};

VkImageMemoryBarrier.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._subresourceRange !== null) {
    this._subresourceRange.flush();
    if (this.memoryBuffer !== this._subresourceRange.memoryBuffer) {
      let srcView = new Uint8Array(this._subresourceRange.memoryBuffer);
      let dstView = new Uint8Array(this.memoryBuffer);
      dstView.set(srcView, 0x30);
      
    }
  }
  
  return true;
};

VkImageMemoryBarrier.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
};

VkImageMemoryBarrier.byteLength = 0x48;

VkImageMemoryBarrier.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  srcAccessMask: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  dstAccessMask: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  oldLayout: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
  newLayout: {
    byteOffset: 0x1C,
    byteLength: 0x4
  },
  srcQueueFamilyIndex: {
    byteOffset: 0x20,
    byteLength: 0x4
  },
  dstQueueFamilyIndex: {
    byteOffset: 0x24,
    byteLength: 0x4
  },
  image: {
    byteOffset: 0x28,
    byteLength: 0x8
  },
  subresourceRange: {
    byteOffset: 0x30,
    byteLength: 0x14
  },
};
/** VkImageCreateInfo **/
class VkImageCreateInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x58) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x58) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x58) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x58);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    
    this._extent = new VkExtent3D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x1C });
    
    
    
    
    
    
    
    this._pQueueFamilyIndices = null;
    
    this.sType = 0xE;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.imageType !== void 0) this.imageType = opts.imageType;
      if (opts.format !== void 0) this.format = opts.format;
      if (opts.extent !== void 0) this.extent = opts.extent;
      if (opts.mipLevels !== void 0) this.mipLevels = opts.mipLevels;
      if (opts.arrayLayers !== void 0) this.arrayLayers = opts.arrayLayers;
      if (opts.samples !== void 0) this.samples = opts.samples;
      if (opts.tiling !== void 0) this.tiling = opts.tiling;
      if (opts.usage !== void 0) this.usage = opts.usage;
      if (opts.sharingMode !== void 0) this.sharingMode = opts.sharingMode;
      if (opts.queueFamilyIndexCount !== void 0) this.queueFamilyIndexCount = opts.queueFamilyIndexCount;
      if (opts.pQueueFamilyIndices !== void 0) this.pQueueFamilyIndices = opts.pQueueFamilyIndices;
      if (opts.initialLayout !== void 0) this.initialLayout = opts.initialLayout;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null ) {
      let {sType} = value;
      
      switch (sType) {
          
        case 0x3B9B2F90:
        case 0x3B9BA4C0:
        case 0x3B9BE341:
        case 0x3B9BB468:
        case 0x3B9D0838:
        case 0x3B9CC1ED:
        case 0x3B9D3333:
        case 0x3B9D3334:
        case 0x3B9E8AF0:
          break;
        default:
          throw new TypeError("Invalid type for 'VkImageCreateInfo.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get imageType() {
    return this.memoryViewInt32[0x5];
  }
  set imageType(value) {
    
    this.memoryViewInt32[0x5] = value;
  }
  get format() {
    return this.memoryViewInt32[0x6];
  }
  set format(value) {
    
    this.memoryViewInt32[0x6] = value;
  }
  get extent() {
    return this._extent;
  }
  set extent(value) {
    if (value !== null ) {
      value.flush();
      this._extent = value;
      
      
    } else if (value === null) {
      this._extent = null;
      
    } 
    
  }
  get mipLevels() {
    return this.memoryViewUint32[0xA];
  }
  set mipLevels(value) {
    
    this.memoryViewUint32[0xA] = value;
  }
  get arrayLayers() {
    return this.memoryViewUint32[0xB];
  }
  set arrayLayers(value) {
    
    this.memoryViewUint32[0xB] = value;
  }
  get samples() {
    return this.memoryViewInt32[0xC];
  }
  set samples(value) {
    
    this.memoryViewInt32[0xC] = value;
  }
  get tiling() {
    return this.memoryViewInt32[0xD];
  }
  set tiling(value) {
    
    this.memoryViewInt32[0xD] = value;
  }
  get usage() {
    return this.memoryViewInt32[0xE];
  }
  set usage(value) {
    
    this.memoryViewInt32[0xE] = value;
  }
  get sharingMode() {
    return this.memoryViewInt32[0xF];
  }
  set sharingMode(value) {
    
    this.memoryViewInt32[0xF] = value;
  }
  get queueFamilyIndexCount() {
    return this.memoryViewUint32[0x10];
  }
  set queueFamilyIndexCount(value) {
    
    this.memoryViewUint32[0x10] = value;
  }
  get pQueueFamilyIndices() {
    return this._pQueueFamilyIndices;
  }
  set pQueueFamilyIndices(value) {
    if (value !== null ) {
      this._pQueueFamilyIndices = value;
      this.memoryViewBigInt64[0x9] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pQueueFamilyIndices = null;
      this.memoryViewBigInt64[0x9] = BI0;
    } 
    
  }
  get initialLayout() {
    return this.memoryViewInt32[0x14];
  }
  set initialLayout(value) {
    
    this.memoryViewInt32[0x14] = value;
  }
  
};

VkImageCreateInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._extent !== null) {
    this._extent.flush();
    if (this.memoryBuffer !== this._extent.memoryBuffer) {
      let srcView = new Uint8Array(this._extent.memoryBuffer);
      let dstView = new Uint8Array(this.memoryBuffer);
      dstView.set(srcView, 0x1C);
      
    }
  }
  
  return true;
};

VkImageCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
};

VkImageCreateInfo.byteLength = 0x58;

VkImageCreateInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  flags: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  imageType: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  format: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
  extent: {
    byteOffset: 0x1C,
    byteLength: 0xC
  },
  mipLevels: {
    byteOffset: 0x28,
    byteLength: 0x4
  },
  arrayLayers: {
    byteOffset: 0x2C,
    byteLength: 0x4
  },
  samples: {
    byteOffset: 0x30,
    byteLength: 0x4
  },
  tiling: {
    byteOffset: 0x34,
    byteLength: 0x4
  },
  usage: {
    byteOffset: 0x38,
    byteLength: 0x4
  },
  sharingMode: {
    byteOffset: 0x3C,
    byteLength: 0x4
  },
  queueFamilyIndexCount: {
    byteOffset: 0x40,
    byteLength: 0x4
  },
  pQueueFamilyIndices: {
    byteOffset: 0x48,
    byteLength: 0x8
  },
  initialLayout: {
    byteOffset: 0x50,
    byteLength: 0x4
  },
};
/** VkSubresourceLayout **/
class VkSubresourceLayout {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x28);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);

    }
    
    
    
    
    
    
    if (typeof opts === "object") {
      
    }
  }
  get offset() {
    return this.memoryViewBigUint64[0x0];
  }
  get size() {
    return this.memoryViewBigUint64[0x1];
  }
  get rowPitch() {
    return this.memoryViewBigUint64[0x2];
  }
  get arrayPitch() {
    return this.memoryViewBigUint64[0x3];
  }
  get depthPitch() {
    return this.memoryViewBigUint64[0x4];
  }
  
};

VkSubresourceLayout.prototype.flush = function flush() {
  
  return true;
};

VkSubresourceLayout.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x28));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x28), 0x0);
};

VkSubresourceLayout.byteLength = 0x28;

VkSubresourceLayout.memoryLayout = {
  offset: {
    byteOffset: 0x0,
    byteLength: 0x8
  },
  size: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  rowPitch: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
  arrayPitch: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
  depthPitch: {
    byteOffset: 0x20,
    byteLength: 0x8
  },
};
/** VkImageViewCreateInfo **/
class VkImageViewCreateInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x50) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x50) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x50);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this._image = null;
    
    
    this._components = new VkComponentMapping({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x28 });
    this._subresourceRange = new VkImageSubresourceRange({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x38 });
    this.sType = 0xF;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.image !== void 0) this.image = opts.image;
      if (opts.viewType !== void 0) this.viewType = opts.viewType;
      if (opts.format !== void 0) this.format = opts.format;
      if (opts.components !== void 0) this.components = opts.components;
      if (opts.subresourceRange !== void 0) this.subresourceRange = opts.subresourceRange;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null ) {
      let {sType} = value;
      
      switch (sType) {
          
        case 0x3B9C930A:
        case 0x3B9D2B61:
        case 0x3B9BCFB8:
          break;
        default:
          throw new TypeError("Invalid type for 'VkImageViewCreateInfo.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get image() {
    return this._image;
  }
  set image(value) {
    if (value !== null ) {
      
      this._image = value;
      
      this.memoryViewBigInt64[0x3] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._image = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } 
    
  }
  get viewType() {
    return this.memoryViewInt32[0x8];
  }
  set viewType(value) {
    
    this.memoryViewInt32[0x8] = value;
  }
  get format() {
    return this.memoryViewInt32[0x9];
  }
  set format(value) {
    
    this.memoryViewInt32[0x9] = value;
  }
  get components() {
    return this._components;
  }
  set components(value) {
    if (value !== null ) {
      value.flush();
      this._components = value;
      
      
    } else if (value === null) {
      this._components = null;
      
    } 
    
  }
  get subresourceRange() {
    return this._subresourceRange;
  }
  set subresourceRange(value) {
    if (value !== null ) {
      value.flush();
      this._subresourceRange = value;
      
      
    } else if (value === null) {
      this._subresourceRange = null;
      
    } 
    
  }
  
};

VkImageViewCreateInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._components !== null) {
    this._components.flush();
    if (this.memoryBuffer !== this._components.memoryBuffer) {
      let srcView = new Uint8Array(this._components.memoryBuffer);
      let dstView = new Uint8Array(this.memoryBuffer);
      dstView.set(srcView, 0x28);
      
    }
  }
  
  
  if (this._subresourceRange !== null) {
    this._subresourceRange.flush();
    if (this.memoryBuffer !== this._subresourceRange.memoryBuffer) {
      let srcView = new Uint8Array(this._subresourceRange.memoryBuffer);
      let dstView = new Uint8Array(this.memoryBuffer);
      dstView.set(srcView, 0x38);
      
    }
  }
  
  return true;
};

VkImageViewCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
  
  
};

VkImageViewCreateInfo.byteLength = 0x50;

VkImageViewCreateInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  flags: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  image: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
  viewType: {
    byteOffset: 0x20,
    byteLength: 0x4
  },
  format: {
    byteOffset: 0x24,
    byteLength: 0x4
  },
  components: {
    byteOffset: 0x28,
    byteLength: 0x10
  },
  subresourceRange: {
    byteOffset: 0x38,
    byteLength: 0x14
  },
};
/** VkBufferCopy **/
class VkBufferCopy {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);

    }
    
    
    
    
    if (typeof opts === "object") {
      if (opts.srcOffset !== void 0) this.srcOffset = opts.srcOffset;
      if (opts.dstOffset !== void 0) this.dstOffset = opts.dstOffset;
      if (opts.size !== void 0) this.size = opts.size;
      
    }
  }
  get srcOffset() {
    return this.memoryViewBigUint64[0x0];
  }
  set srcOffset(value) {
    
    this.memoryViewBigUint64[0x0] = BigInt(value);
  }
  get dstOffset() {
    return this.memoryViewBigUint64[0x1];
  }
  set dstOffset(value) {
    
    this.memoryViewBigUint64[0x1] = BigInt(value);
  }
  get size() {
    return this.memoryViewBigUint64[0x2];
  }
  set size(value) {
    
    this.memoryViewBigUint64[0x2] = BigInt(value);
  }
  
};

VkBufferCopy.prototype.flush = function flush() {
  
  return true;
};

VkBufferCopy.prototype.reflect = function reflect(memoryAddress) {
  
};

VkBufferCopy.byteLength = 0x18;

VkBufferCopy.memoryLayout = {
  srcOffset: {
    byteOffset: 0x0,
    byteLength: 0x8
  },
  dstOffset: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  size: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
};
/** VkSparseMemoryBind **/
class VkSparseMemoryBind {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x28);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);

    }
    
    
    this._memory = null;
    
    
    
    if (typeof opts === "object") {
      if (opts.resourceOffset !== void 0) this.resourceOffset = opts.resourceOffset;
      if (opts.size !== void 0) this.size = opts.size;
      if (opts.memory !== void 0) this.memory = opts.memory;
      if (opts.memoryOffset !== void 0) this.memoryOffset = opts.memoryOffset;
      if (opts.flags !== void 0) this.flags = opts.flags;
      
    }
  }
  get resourceOffset() {
    return this.memoryViewBigUint64[0x0];
  }
  set resourceOffset(value) {
    
    this.memoryViewBigUint64[0x0] = BigInt(value);
  }
  get size() {
    return this.memoryViewBigUint64[0x1];
  }
  set size(value) {
    
    this.memoryViewBigUint64[0x1] = BigInt(value);
  }
  get memory() {
    return this._memory;
  }
  set memory(value) {
    if (value !== null ) {
      
      this._memory = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._memory = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } 
    
  }
  get memoryOffset() {
    return this.memoryViewBigUint64[0x3];
  }
  set memoryOffset(value) {
    
    this.memoryViewBigUint64[0x3] = BigInt(value);
  }
  get flags() {
    return this.memoryViewInt32[0x8];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x8] = value;
  }
  
};

VkSparseMemoryBind.prototype.flush = function flush() {
  
  return true;
};

VkSparseMemoryBind.prototype.reflect = function reflect(memoryAddress) {
  
};

VkSparseMemoryBind.byteLength = 0x28;

VkSparseMemoryBind.memoryLayout = {
  resourceOffset: {
    byteOffset: 0x0,
    byteLength: 0x8
  },
  size: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  memory: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
  memoryOffset: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
  flags: {
    byteOffset: 0x20,
    byteLength: 0x4
  },
};
/** VkSparseImageMemoryBind **/
class VkSparseImageMemoryBind {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x40) / 0x8);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x40) / 0x8);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x40) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x40);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);

    }
    this._subresource = new VkImageSubresource({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x0 });
    this._offset = new VkOffset3D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0xC });
    this._extent = new VkExtent3D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x18 });
    this._memory = null;
    
    
    
    if (typeof opts === "object") {
      if (opts.subresource !== void 0) this.subresource = opts.subresource;
      if (opts.offset !== void 0) this.offset = opts.offset;
      if (opts.extent !== void 0) this.extent = opts.extent;
      if (opts.memory !== void 0) this.memory = opts.memory;
      if (opts.memoryOffset !== void 0) this.memoryOffset = opts.memoryOffset;
      if (opts.flags !== void 0) this.flags = opts.flags;
      
    }
  }
  get subresource() {
    return this._subresource;
  }
  set subresource(value) {
    if (value !== null ) {
      value.flush();
      this._subresource = value;
      
      
    } else if (value === null) {
      this._subresource = null;
      
    } 
    
  }
  get offset() {
    return this._offset;
  }
  set offset(value) {
    if (value !== null ) {
      value.flush();
      this._offset = value;
      
      
    } else if (value === null) {
      this._offset = null;
      
    } 
    
  }
  get extent() {
    return this._extent;
  }
  set extent(value) {
    if (value !== null ) {
      value.flush();
      this._extent = value;
      
      
    } else if (value === null) {
      this._extent = null;
      
    } 
    
  }
  get memory() {
    return this._memory;
  }
  set memory(value) {
    if (value !== null ) {
      
      this._memory = value;
      
      this.memoryViewBigInt64[0x5] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._memory = null;
      this.memoryViewBigInt64[0x5] = BI0;
    } 
    
  }
  get memoryOffset() {
    return this.memoryViewBigUint64[0x6];
  }
  set memoryOffset(value) {
    
    this.memoryViewBigUint64[0x6] = BigInt(value);
  }
  get flags() {
    return this.memoryViewInt32[0xE];
  }
  set flags(value) {
    
    this.memoryViewInt32[0xE] = value;
  }
  
};

VkSparseImageMemoryBind.prototype.flush = function flush() {
  
  
  if (this._subresource !== null) {
    this._subresource.flush();
    if (this.memoryBuffer !== this._subresource.memoryBuffer) {
      let srcView = new Uint8Array(this._subresource.memoryBuffer);
      let dstView = new Uint8Array(this.memoryBuffer);
      dstView.set(srcView, 0x0);
      
    }
  }
  
  
  if (this._offset !== null) {
    this._offset.flush();
    if (this.memoryBuffer !== this._offset.memoryBuffer) {
      let srcView = new Uint8Array(this._offset.memoryBuffer);
      let dstView = new Uint8Array(this.memoryBuffer);
      dstView.set(srcView, 0xC);
      
    }
  }
  
  
  if (this._extent !== null) {
    this._extent.flush();
    if (this.memoryBuffer !== this._extent.memoryBuffer) {
      let srcView = new Uint8Array(this._extent.memoryBuffer);
      let dstView = new Uint8Array(this.memoryBuffer);
      dstView.set(srcView, 0x18);
      
    }
  }
  
  return true;
};

VkSparseImageMemoryBind.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
  
  
};

VkSparseImageMemoryBind.byteLength = 0x40;

VkSparseImageMemoryBind.memoryLayout = {
  subresource: {
    byteOffset: 0x0,
    byteLength: 0xC
  },
  offset: {
    byteOffset: 0xC,
    byteLength: 0xC
  },
  extent: {
    byteOffset: 0x18,
    byteLength: 0xC
  },
  memory: {
    byteOffset: 0x28,
    byteLength: 0x8
  },
  memoryOffset: {
    byteOffset: 0x30,
    byteLength: 0x8
  },
  flags: {
    byteOffset: 0x38,
    byteLength: 0x4
  },
};
/** VkSparseBufferMemoryBindInfo **/
class VkSparseBufferMemoryBindInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    this._buffer = null;
    
    this._pBinds = null;
    this._pBindsNative = null;
    
    if (typeof opts === "object") {
      if (opts.buffer !== void 0) this.buffer = opts.buffer;
      if (opts.bindCount !== void 0) this.bindCount = opts.bindCount;
      if (opts.pBinds !== void 0) this.pBinds = opts.pBinds;
      
    }
  }
  get buffer() {
    return this._buffer;
  }
  set buffer(value) {
    if (value !== null ) {
      
      this._buffer = value;
      
      this.memoryViewBigInt64[0x0] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._buffer = null;
      this.memoryViewBigInt64[0x0] = BI0;
    } 
    
  }
  get bindCount() {
    return this.memoryViewUint32[0x2];
  }
  set bindCount(value) {
    
    this.memoryViewUint32[0x2] = value;
  }
  get pBinds() {
    return this._pBinds;
  }
  set pBinds(value) {
    if (value !== null ) {
      this._pBinds = value;
    } else if (value === null) {
      this._pBinds = null;
    } 
    
  }
  
};

VkSparseBufferMemoryBindInfo.prototype.flush = function flush() {
  
  
  if (this._pBinds !== null) {
    let array = this._pBinds;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pBindsNative = nativeArray;
    this.memoryViewBigInt64[0x2] = nativeArray.address;
  }
  
  return true;
};

VkSparseBufferMemoryBindInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkSparseBufferMemoryBindInfo.byteLength = 0x18;

VkSparseBufferMemoryBindInfo.memoryLayout = {
  buffer: {
    byteOffset: 0x0,
    byteLength: 0x8
  },
  bindCount: {
    byteOffset: 0x8,
    byteLength: 0x4
  },
  pBinds: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
};
/** VkSparseImageOpaqueMemoryBindInfo **/
class VkSparseImageOpaqueMemoryBindInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    this._image = null;
    
    this._pBinds = null;
    this._pBindsNative = null;
    
    if (typeof opts === "object") {
      if (opts.image !== void 0) this.image = opts.image;
      if (opts.bindCount !== void 0) this.bindCount = opts.bindCount;
      if (opts.pBinds !== void 0) this.pBinds = opts.pBinds;
      
    }
  }
  get image() {
    return this._image;
  }
  set image(value) {
    if (value !== null ) {
      
      this._image = value;
      
      this.memoryViewBigInt64[0x0] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._image = null;
      this.memoryViewBigInt64[0x0] = BI0;
    } 
    
  }
  get bindCount() {
    return this.memoryViewUint32[0x2];
  }
  set bindCount(value) {
    
    this.memoryViewUint32[0x2] = value;
  }
  get pBinds() {
    return this._pBinds;
  }
  set pBinds(value) {
    if (value !== null ) {
      this._pBinds = value;
    } else if (value === null) {
      this._pBinds = null;
    } 
    
  }
  
};

VkSparseImageOpaqueMemoryBindInfo.prototype.flush = function flush() {
  
  
  if (this._pBinds !== null) {
    let array = this._pBinds;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pBindsNative = nativeArray;
    this.memoryViewBigInt64[0x2] = nativeArray.address;
  }
  
  return true;
};

VkSparseImageOpaqueMemoryBindInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkSparseImageOpaqueMemoryBindInfo.byteLength = 0x18;

VkSparseImageOpaqueMemoryBindInfo.memoryLayout = {
  image: {
    byteOffset: 0x0,
    byteLength: 0x8
  },
  bindCount: {
    byteOffset: 0x8,
    byteLength: 0x4
  },
  pBinds: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
};
/** VkSparseImageMemoryBindInfo **/
class VkSparseImageMemoryBindInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    this._image = null;
    
    this._pBinds = null;
    this._pBindsNative = null;
    
    if (typeof opts === "object") {
      if (opts.image !== void 0) this.image = opts.image;
      if (opts.bindCount !== void 0) this.bindCount = opts.bindCount;
      if (opts.pBinds !== void 0) this.pBinds = opts.pBinds;
      
    }
  }
  get image() {
    return this._image;
  }
  set image(value) {
    if (value !== null ) {
      
      this._image = value;
      
      this.memoryViewBigInt64[0x0] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._image = null;
      this.memoryViewBigInt64[0x0] = BI0;
    } 
    
  }
  get bindCount() {
    return this.memoryViewUint32[0x2];
  }
  set bindCount(value) {
    
    this.memoryViewUint32[0x2] = value;
  }
  get pBinds() {
    return this._pBinds;
  }
  set pBinds(value) {
    if (value !== null ) {
      this._pBinds = value;
    } else if (value === null) {
      this._pBinds = null;
    } 
    
  }
  
};

VkSparseImageMemoryBindInfo.prototype.flush = function flush() {
  
  
  if (this._pBinds !== null) {
    let array = this._pBinds;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pBindsNative = nativeArray;
    this.memoryViewBigInt64[0x2] = nativeArray.address;
  }
  
  return true;
};

VkSparseImageMemoryBindInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkSparseImageMemoryBindInfo.byteLength = 0x18;

VkSparseImageMemoryBindInfo.memoryLayout = {
  image: {
    byteOffset: 0x0,
    byteLength: 0x8
  },
  bindCount: {
    byteOffset: 0x8,
    byteLength: 0x4
  },
  pBinds: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
};
/** VkBindSparseInfo **/
class VkBindSparseInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x60) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x60) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x60) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x60);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this._pWaitSemaphores = null;
    this._pWaitSemaphoresNative = null;
    
    this._pBufferBinds = null;
    this._pBufferBindsNative = null;
    
    this._pImageOpaqueBinds = null;
    this._pImageOpaqueBindsNative = null;
    
    this._pImageBinds = null;
    this._pImageBindsNative = null;
    
    this._pSignalSemaphores = null;
    this._pSignalSemaphoresNative = null;
    this.sType = 0x7;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.waitSemaphoreCount !== void 0) this.waitSemaphoreCount = opts.waitSemaphoreCount;
      if (opts.pWaitSemaphores !== void 0) this.pWaitSemaphores = opts.pWaitSemaphores;
      if (opts.bufferBindCount !== void 0) this.bufferBindCount = opts.bufferBindCount;
      if (opts.pBufferBinds !== void 0) this.pBufferBinds = opts.pBufferBinds;
      if (opts.imageOpaqueBindCount !== void 0) this.imageOpaqueBindCount = opts.imageOpaqueBindCount;
      if (opts.pImageOpaqueBinds !== void 0) this.pImageOpaqueBinds = opts.pImageOpaqueBinds;
      if (opts.imageBindCount !== void 0) this.imageBindCount = opts.imageBindCount;
      if (opts.pImageBinds !== void 0) this.pImageBinds = opts.pImageBinds;
      if (opts.signalSemaphoreCount !== void 0) this.signalSemaphoreCount = opts.signalSemaphoreCount;
      if (opts.pSignalSemaphores !== void 0) this.pSignalSemaphores = opts.pSignalSemaphores;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null ) {
      let {sType} = value;
      
      switch (sType) {
          
        case 0x3B9BB466:
          break;
        default:
          throw new TypeError("Invalid type for 'VkBindSparseInfo.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  get waitSemaphoreCount() {
    return this.memoryViewUint32[0x4];
  }
  set waitSemaphoreCount(value) {
    
    this.memoryViewUint32[0x4] = value;
  }
  get pWaitSemaphores() {
    return this._pWaitSemaphores;
  }
  set pWaitSemaphores(value) {
    if (value !== null ) {
      this._pWaitSemaphores = value;
    } else if (value === null) {
      this._pWaitSemaphores = null;
    } 
    
  }
  get bufferBindCount() {
    return this.memoryViewUint32[0x8];
  }
  set bufferBindCount(value) {
    
    this.memoryViewUint32[0x8] = value;
  }
  get pBufferBinds() {
    return this._pBufferBinds;
  }
  set pBufferBinds(value) {
    if (value !== null ) {
      this._pBufferBinds = value;
    } else if (value === null) {
      this._pBufferBinds = null;
    } 
    
  }
  get imageOpaqueBindCount() {
    return this.memoryViewUint32[0xC];
  }
  set imageOpaqueBindCount(value) {
    
    this.memoryViewUint32[0xC] = value;
  }
  get pImageOpaqueBinds() {
    return this._pImageOpaqueBinds;
  }
  set pImageOpaqueBinds(value) {
    if (value !== null ) {
      this._pImageOpaqueBinds = value;
    } else if (value === null) {
      this._pImageOpaqueBinds = null;
    } 
    
  }
  get imageBindCount() {
    return this.memoryViewUint32[0x10];
  }
  set imageBindCount(value) {
    
    this.memoryViewUint32[0x10] = value;
  }
  get pImageBinds() {
    return this._pImageBinds;
  }
  set pImageBinds(value) {
    if (value !== null ) {
      this._pImageBinds = value;
    } else if (value === null) {
      this._pImageBinds = null;
    } 
    
  }
  get signalSemaphoreCount() {
    return this.memoryViewUint32[0x14];
  }
  set signalSemaphoreCount(value) {
    
    this.memoryViewUint32[0x14] = value;
  }
  get pSignalSemaphores() {
    return this._pSignalSemaphores;
  }
  set pSignalSemaphores(value) {
    if (value !== null ) {
      this._pSignalSemaphores = value;
    } else if (value === null) {
      this._pSignalSemaphores = null;
    } 
    
  }
  
};

VkBindSparseInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pWaitSemaphores !== null) {
    let array = this._pWaitSemaphores;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pWaitSemaphoresNative = nativeArray;
    this.memoryViewBigInt64[0x3] = nativeArray.address;
  }
  
  
  if (this._pBufferBinds !== null) {
    let array = this._pBufferBinds;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pBufferBindsNative = nativeArray;
    this.memoryViewBigInt64[0x5] = nativeArray.address;
  }
  
  
  if (this._pImageOpaqueBinds !== null) {
    let array = this._pImageOpaqueBinds;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pImageOpaqueBindsNative = nativeArray;
    this.memoryViewBigInt64[0x7] = nativeArray.address;
  }
  
  
  if (this._pImageBinds !== null) {
    let array = this._pImageBinds;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pImageBindsNative = nativeArray;
    this.memoryViewBigInt64[0x9] = nativeArray.address;
  }
  
  
  if (this._pSignalSemaphores !== null) {
    let array = this._pSignalSemaphores;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pSignalSemaphoresNative = nativeArray;
    this.memoryViewBigInt64[0xB] = nativeArray.address;
  }
  
  return true;
};

VkBindSparseInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
  
  
  
  
  
  
  
  
};

VkBindSparseInfo.byteLength = 0x60;

VkBindSparseInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  waitSemaphoreCount: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  pWaitSemaphores: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
  bufferBindCount: {
    byteOffset: 0x20,
    byteLength: 0x4
  },
  pBufferBinds: {
    byteOffset: 0x28,
    byteLength: 0x8
  },
  imageOpaqueBindCount: {
    byteOffset: 0x30,
    byteLength: 0x4
  },
  pImageOpaqueBinds: {
    byteOffset: 0x38,
    byteLength: 0x8
  },
  imageBindCount: {
    byteOffset: 0x40,
    byteLength: 0x4
  },
  pImageBinds: {
    byteOffset: 0x48,
    byteLength: 0x8
  },
  signalSemaphoreCount: {
    byteOffset: 0x50,
    byteLength: 0x4
  },
  pSignalSemaphores: {
    byteOffset: 0x58,
    byteLength: 0x8
  },
};
/** VkImageCopy **/
class VkImageCopy {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;

    } else {
      this.memoryBuffer = new ArrayBuffer(0x44);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);

    }
    this._srcSubresource = new VkImageSubresourceLayers({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x0 });
    this._srcOffset = new VkOffset3D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x10 });
    this._dstSubresource = new VkImageSubresourceLayers({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x1C });
    this._dstOffset = new VkOffset3D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x2C });
    this._extent = new VkExtent3D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x38 });
    
    if (typeof opts === "object") {
      if (opts.srcSubresource !== void 0) this.srcSubresource = opts.srcSubresource;
      if (opts.srcOffset !== void 0) this.srcOffset = opts.srcOffset;
      if (opts.dstSubresource !== void 0) this.dstSubresource = opts.dstSubresource;
      if (opts.dstOffset !== void 0) this.dstOffset = opts.dstOffset;
      if (opts.extent !== void 0) this.extent = opts.extent;
      
    }
  }
  get srcSubresource() {
    return this._srcSubresource;
  }
  set srcSubresource(value) {
    if (value !== null ) {
      value.flush();
      this._srcSubresource = value;
      
      
    } else if (value === null) {
      this._srcSubresource = null;
      
    } 
    
  }
  get srcOffset() {
    return this._srcOffset;
  }
  set srcOffset(value) {
    if (value !== null ) {
      value.flush();
      this._srcOffset = value;
      
      
    } else if (value === null) {
      this._srcOffset = null;
      
    } 
    
  }
  get dstSubresource() {
    return this._dstSubresource;
  }
  set dstSubresource(value) {
    if (value !== null ) {
      value.flush();
      this._dstSubresource = value;
      
      
    } else if (value === null) {
      this._dstSubresource = null;
      
    } 
    
  }
  get dstOffset() {
    return this._dstOffset;
  }
  set dstOffset(value) {
    if (value !== null ) {
      value.flush();
      this._dstOffset = value;
      
      
    } else if (value === null) {
      this._dstOffset = null;
      
    } 
    
  }
  get extent() {
    return this._extent;
  }
  set extent(value) {
    if (value !== null ) {
      value.flush();
      this._extent = value;
      
      
    } else if (value === null) {
      this._extent = null;
      
    } 
    
  }
  
};

VkImageCopy.prototype.flush = function flush() {
  
  
  if (this._srcSubresource !== null) {
    this._srcSubresource.flush();
    if (this.memoryBuffer !== this._srcSubresource.memoryBuffer) {
      let srcView = new Uint8Array(this._srcSubresource.memoryBuffer);
      let dstView = new Uint8Array(this.memoryBuffer);
      dstView.set(srcView, 0x0);
      
    }
  }
  
  
  if (this._srcOffset !== null) {
    this._srcOffset.flush();
    if (this.memoryBuffer !== this._srcOffset.memoryBuffer) {
      let srcView = new Uint8Array(this._srcOffset.memoryBuffer);
      let dstView = new Uint8Array(this.memoryBuffer);
      dstView.set(srcView, 0x10);
      
    }
  }
  
  
  if (this._dstSubresource !== null) {
    this._dstSubresource.flush();
    if (this.memoryBuffer !== this._dstSubresource.memoryBuffer) {
      let srcView = new Uint8Array(this._dstSubresource.memoryBuffer);
      let dstView = new Uint8Array(this.memoryBuffer);
      dstView.set(srcView, 0x1C);
      
    }
  }
  
  
  if (this._dstOffset !== null) {
    this._dstOffset.flush();
    if (this.memoryBuffer !== this._dstOffset.memoryBuffer) {
      let srcView = new Uint8Array(this._dstOffset.memoryBuffer);
      let dstView = new Uint8Array(this.memoryBuffer);
      dstView.set(srcView, 0x2C);
      
    }
  }
  
  
  if (this._extent !== null) {
    this._extent.flush();
    if (this.memoryBuffer !== this._extent.memoryBuffer) {
      let srcView = new Uint8Array(this._extent.memoryBuffer);
      let dstView = new Uint8Array(this.memoryBuffer);
      dstView.set(srcView, 0x38);
      
    }
  }
  
  return true;
};

VkImageCopy.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
  
  
  
  
  
  
};

VkImageCopy.byteLength = 0x44;

VkImageCopy.memoryLayout = {
  srcSubresource: {
    byteOffset: 0x0,
    byteLength: 0x10
  },
  srcOffset: {
    byteOffset: 0x10,
    byteLength: 0xC
  },
  dstSubresource: {
    byteOffset: 0x1C,
    byteLength: 0x10
  },
  dstOffset: {
    byteOffset: 0x2C,
    byteLength: 0xC
  },
  extent: {
    byteOffset: 0x38,
    byteLength: 0xC
  },
};
/** VkImageBlit **/
class VkImageBlit {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;

    } else {
      this.memoryBuffer = new ArrayBuffer(0x50);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);

    }
    this._srcSubresource = new VkImageSubresourceLayers({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x0 });
    this._srcOffsets = [...Array(2)].map((v, i) => new VkOffset3D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x10 + (i * 0xC) }));
    this._dstSubresource = new VkImageSubresourceLayers({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x28 });
    this._dstOffsets = [...Array(2)].map((v, i) => new VkOffset3D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x38 + (i * 0xC) }));
    
    if (typeof opts === "object") {
      if (opts.srcSubresource !== void 0) this.srcSubresource = opts.srcSubresource;
      if (opts.srcOffsets !== void 0) this.srcOffsets = opts.srcOffsets;
      if (opts.dstSubresource !== void 0) this.dstSubresource = opts.dstSubresource;
      if (opts.dstOffsets !== void 0) this.dstOffsets = opts.dstOffsets;
      
    }
  }
  get srcSubresource() {
    return this._srcSubresource;
  }
  set srcSubresource(value) {
    if (value !== null ) {
      value.flush();
      this._srcSubresource = value;
      
      
    } else if (value === null) {
      this._srcSubresource = null;
      
    } 
    
  }
  get srcOffsets() {
    return this._srcOffsets;
  }
  set srcOffsets(value) {
    if (value !== null ) {
      this._srcOffsets = value;
    } else if (value === null) {
      this._srcOffsets = null;
    } 
    
  }
  get dstSubresource() {
    return this._dstSubresource;
  }
  set dstSubresource(value) {
    if (value !== null ) {
      value.flush();
      this._dstSubresource = value;
      
      
    } else if (value === null) {
      this._dstSubresource = null;
      
    } 
    
  }
  get dstOffsets() {
    return this._dstOffsets;
  }
  set dstOffsets(value) {
    if (value !== null ) {
      this._dstOffsets = value;
    } else if (value === null) {
      this._dstOffsets = null;
    } 
    
  }
  
};

VkImageBlit.prototype.flush = function flush() {
  
  
  if (this._srcSubresource !== null) {
    this._srcSubresource.flush();
    if (this.memoryBuffer !== this._srcSubresource.memoryBuffer) {
      let srcView = new Uint8Array(this._srcSubresource.memoryBuffer);
      let dstView = new Uint8Array(this.memoryBuffer);
      dstView.set(srcView, 0x0);
      
    }
  }
  
  
  if (this._srcOffsets !== null) {
    let array = this._srcOffsets;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      if (!array[ii].flush()) return false;
    };
    
    let dstView = new Uint8Array(this.memoryBuffer);
    let byteOffset = 0x10;
    for (let ii = 0; ii < array.length; ++ii) {
      let srcView = new Uint8Array(array[ii].memoryBuffer);
      dstView.set(srcView, byteOffset);
      byteOffset += VkOffset3D.byteLength;
    };
  }
  
  
  if (this._dstSubresource !== null) {
    this._dstSubresource.flush();
    if (this.memoryBuffer !== this._dstSubresource.memoryBuffer) {
      let srcView = new Uint8Array(this._dstSubresource.memoryBuffer);
      let dstView = new Uint8Array(this.memoryBuffer);
      dstView.set(srcView, 0x28);
      
    }
  }
  
  
  if (this._dstOffsets !== null) {
    let array = this._dstOffsets;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      if (!array[ii].flush()) return false;
    };
    
    let dstView = new Uint8Array(this.memoryBuffer);
    let byteOffset = 0x38;
    for (let ii = 0; ii < array.length; ++ii) {
      let srcView = new Uint8Array(array[ii].memoryBuffer);
      dstView.set(srcView, byteOffset);
      byteOffset += VkOffset3D.byteLength;
    };
  }
  
  return true;
};

VkImageBlit.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
  
  
  
  
};

VkImageBlit.byteLength = 0x50;

VkImageBlit.memoryLayout = {
  srcSubresource: {
    byteOffset: 0x0,
    byteLength: 0x10
  },
  srcOffsets: {
    byteOffset: 0x10,
    byteLength: 0x18
  },
  dstSubresource: {
    byteOffset: 0x28,
    byteLength: 0x10
  },
  dstOffsets: {
    byteOffset: 0x38,
    byteLength: 0x18
  },
};
/** VkBufferImageCopy **/
class VkBufferImageCopy {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x38) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x38) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x38);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    
    
    this._imageSubresource = new VkImageSubresourceLayers({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x10 });
    this._imageOffset = new VkOffset3D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x20 });
    this._imageExtent = new VkExtent3D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x2C });
    
    if (typeof opts === "object") {
      if (opts.bufferOffset !== void 0) this.bufferOffset = opts.bufferOffset;
      if (opts.bufferRowLength !== void 0) this.bufferRowLength = opts.bufferRowLength;
      if (opts.bufferImageHeight !== void 0) this.bufferImageHeight = opts.bufferImageHeight;
      if (opts.imageSubresource !== void 0) this.imageSubresource = opts.imageSubresource;
      if (opts.imageOffset !== void 0) this.imageOffset = opts.imageOffset;
      if (opts.imageExtent !== void 0) this.imageExtent = opts.imageExtent;
      
    }
  }
  get bufferOffset() {
    return this.memoryViewBigUint64[0x0];
  }
  set bufferOffset(value) {
    
    this.memoryViewBigUint64[0x0] = BigInt(value);
  }
  get bufferRowLength() {
    return this.memoryViewUint32[0x2];
  }
  set bufferRowLength(value) {
    
    this.memoryViewUint32[0x2] = value;
  }
  get bufferImageHeight() {
    return this.memoryViewUint32[0x3];
  }
  set bufferImageHeight(value) {
    
    this.memoryViewUint32[0x3] = value;
  }
  get imageSubresource() {
    return this._imageSubresource;
  }
  set imageSubresource(value) {
    if (value !== null ) {
      value.flush();
      this._imageSubresource = value;
      
      
    } else if (value === null) {
      this._imageSubresource = null;
      
    } 
    
  }
  get imageOffset() {
    return this._imageOffset;
  }
  set imageOffset(value) {
    if (value !== null ) {
      value.flush();
      this._imageOffset = value;
      
      
    } else if (value === null) {
      this._imageOffset = null;
      
    } 
    
  }
  get imageExtent() {
    return this._imageExtent;
  }
  set imageExtent(value) {
    if (value !== null ) {
      value.flush();
      this._imageExtent = value;
      
      
    } else if (value === null) {
      this._imageExtent = null;
      
    } 
    
  }
  
};

VkBufferImageCopy.prototype.flush = function flush() {
  
  
  if (this._imageSubresource !== null) {
    this._imageSubresource.flush();
    if (this.memoryBuffer !== this._imageSubresource.memoryBuffer) {
      let srcView = new Uint8Array(this._imageSubresource.memoryBuffer);
      let dstView = new Uint8Array(this.memoryBuffer);
      dstView.set(srcView, 0x10);
      
    }
  }
  
  
  if (this._imageOffset !== null) {
    this._imageOffset.flush();
    if (this.memoryBuffer !== this._imageOffset.memoryBuffer) {
      let srcView = new Uint8Array(this._imageOffset.memoryBuffer);
      let dstView = new Uint8Array(this.memoryBuffer);
      dstView.set(srcView, 0x20);
      
    }
  }
  
  
  if (this._imageExtent !== null) {
    this._imageExtent.flush();
    if (this.memoryBuffer !== this._imageExtent.memoryBuffer) {
      let srcView = new Uint8Array(this._imageExtent.memoryBuffer);
      let dstView = new Uint8Array(this.memoryBuffer);
      dstView.set(srcView, 0x2C);
      
    }
  }
  
  return true;
};

VkBufferImageCopy.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
  
  
};

VkBufferImageCopy.byteLength = 0x38;

VkBufferImageCopy.memoryLayout = {
  bufferOffset: {
    byteOffset: 0x0,
    byteLength: 0x8
  },
  bufferRowLength: {
    byteOffset: 0x8,
    byteLength: 0x4
  },
  bufferImageHeight: {
    byteOffset: 0xC,
    byteLength: 0x4
  },
  imageSubresource: {
    byteOffset: 0x10,
    byteLength: 0x10
  },
  imageOffset: {
    byteOffset: 0x20,
    byteLength: 0xC
  },
  imageExtent: {
    byteOffset: 0x2C,
    byteLength: 0xC
  },
};
/** VkImageResolve **/
class VkImageResolve {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;

    } else {
      this.memoryBuffer = new ArrayBuffer(0x44);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);

    }
    this._srcSubresource = new VkImageSubresourceLayers({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x0 });
    this._srcOffset = new VkOffset3D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x10 });
    this._dstSubresource = new VkImageSubresourceLayers({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x1C });
    this._dstOffset = new VkOffset3D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x2C });
    this._extent = new VkExtent3D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x38 });
    
    if (typeof opts === "object") {
      if (opts.srcSubresource !== void 0) this.srcSubresource = opts.srcSubresource;
      if (opts.srcOffset !== void 0) this.srcOffset = opts.srcOffset;
      if (opts.dstSubresource !== void 0) this.dstSubresource = opts.dstSubresource;
      if (opts.dstOffset !== void 0) this.dstOffset = opts.dstOffset;
      if (opts.extent !== void 0) this.extent = opts.extent;
      
    }
  }
  get srcSubresource() {
    return this._srcSubresource;
  }
  set srcSubresource(value) {
    if (value !== null ) {
      value.flush();
      this._srcSubresource = value;
      
      
    } else if (value === null) {
      this._srcSubresource = null;
      
    } 
    
  }
  get srcOffset() {
    return this._srcOffset;
  }
  set srcOffset(value) {
    if (value !== null ) {
      value.flush();
      this._srcOffset = value;
      
      
    } else if (value === null) {
      this._srcOffset = null;
      
    } 
    
  }
  get dstSubresource() {
    return this._dstSubresource;
  }
  set dstSubresource(value) {
    if (value !== null ) {
      value.flush();
      this._dstSubresource = value;
      
      
    } else if (value === null) {
      this._dstSubresource = null;
      
    } 
    
  }
  get dstOffset() {
    return this._dstOffset;
  }
  set dstOffset(value) {
    if (value !== null ) {
      value.flush();
      this._dstOffset = value;
      
      
    } else if (value === null) {
      this._dstOffset = null;
      
    } 
    
  }
  get extent() {
    return this._extent;
  }
  set extent(value) {
    if (value !== null ) {
      value.flush();
      this._extent = value;
      
      
    } else if (value === null) {
      this._extent = null;
      
    } 
    
  }
  
};

VkImageResolve.prototype.flush = function flush() {
  
  
  if (this._srcSubresource !== null) {
    this._srcSubresource.flush();
    if (this.memoryBuffer !== this._srcSubresource.memoryBuffer) {
      let srcView = new Uint8Array(this._srcSubresource.memoryBuffer);
      let dstView = new Uint8Array(this.memoryBuffer);
      dstView.set(srcView, 0x0);
      
    }
  }
  
  
  if (this._srcOffset !== null) {
    this._srcOffset.flush();
    if (this.memoryBuffer !== this._srcOffset.memoryBuffer) {
      let srcView = new Uint8Array(this._srcOffset.memoryBuffer);
      let dstView = new Uint8Array(this.memoryBuffer);
      dstView.set(srcView, 0x10);
      
    }
  }
  
  
  if (this._dstSubresource !== null) {
    this._dstSubresource.flush();
    if (this.memoryBuffer !== this._dstSubresource.memoryBuffer) {
      let srcView = new Uint8Array(this._dstSubresource.memoryBuffer);
      let dstView = new Uint8Array(this.memoryBuffer);
      dstView.set(srcView, 0x1C);
      
    }
  }
  
  
  if (this._dstOffset !== null) {
    this._dstOffset.flush();
    if (this.memoryBuffer !== this._dstOffset.memoryBuffer) {
      let srcView = new Uint8Array(this._dstOffset.memoryBuffer);
      let dstView = new Uint8Array(this.memoryBuffer);
      dstView.set(srcView, 0x2C);
      
    }
  }
  
  
  if (this._extent !== null) {
    this._extent.flush();
    if (this.memoryBuffer !== this._extent.memoryBuffer) {
      let srcView = new Uint8Array(this._extent.memoryBuffer);
      let dstView = new Uint8Array(this.memoryBuffer);
      dstView.set(srcView, 0x38);
      
    }
  }
  
  return true;
};

VkImageResolve.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
  
  
  
  
  
  
};

VkImageResolve.byteLength = 0x44;

VkImageResolve.memoryLayout = {
  srcSubresource: {
    byteOffset: 0x0,
    byteLength: 0x10
  },
  srcOffset: {
    byteOffset: 0x10,
    byteLength: 0xC
  },
  dstSubresource: {
    byteOffset: 0x1C,
    byteLength: 0x10
  },
  dstOffset: {
    byteOffset: 0x2C,
    byteLength: 0xC
  },
  extent: {
    byteOffset: 0x38,
    byteLength: 0xC
  },
};
/** VkShaderModuleCreateInfo **/
class VkShaderModuleCreateInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x28);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    this._pCode = null;
    this.sType = 0x10;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.codeSize !== void 0) this.codeSize = opts.codeSize;
      if (opts.pCode !== void 0) this.pCode = opts.pCode;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null ) {
      let {sType} = value;
      
      switch (sType) {
          
        case 0x3B9D3B01:
          break;
        default:
          throw new TypeError("Invalid type for 'VkShaderModuleCreateInfo.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get codeSize() {
    return this.memoryViewBigInt64[0x3];
  }
  set codeSize(value) {
    
    this.memoryViewBigInt64[0x3] = BigInt(value);
  }
  get pCode() {
    return this._pCode;
  }
  set pCode(value) {
    if (value !== null ) {
      this._pCode = value;
      this.memoryViewBigInt64[0x4] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pCode = null;
      this.memoryViewBigInt64[0x4] = BI0;
    } 
    
  }
  
};

VkShaderModuleCreateInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkShaderModuleCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkShaderModuleCreateInfo.byteLength = 0x28;

VkShaderModuleCreateInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  flags: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  codeSize: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
  pCode: {
    byteOffset: 0x20,
    byteLength: 0x8
  },
};
/** VkDescriptorSetLayoutBinding **/
class VkDescriptorSetLayoutBinding {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);

    }
    
    
    
    
    this._pImmutableSamplers = null;
    this._pImmutableSamplersNative = null;
    
    if (typeof opts === "object") {
      if (opts.binding !== void 0) this.binding = opts.binding;
      if (opts.descriptorType !== void 0) this.descriptorType = opts.descriptorType;
      if (opts.descriptorCount !== void 0) this.descriptorCount = opts.descriptorCount;
      if (opts.stageFlags !== void 0) this.stageFlags = opts.stageFlags;
      if (opts.pImmutableSamplers !== void 0) this.pImmutableSamplers = opts.pImmutableSamplers;
      
    }
  }
  get binding() {
    return this.memoryViewUint32[0x0];
  }
  set binding(value) {
    
    this.memoryViewUint32[0x0] = value;
  }
  get descriptorType() {
    return this.memoryViewInt32[0x1];
  }
  set descriptorType(value) {
    
    this.memoryViewInt32[0x1] = value;
  }
  get descriptorCount() {
    return this.memoryViewUint32[0x2];
  }
  set descriptorCount(value) {
    
    this.memoryViewUint32[0x2] = value;
  }
  get stageFlags() {
    return this.memoryViewInt32[0x3];
  }
  set stageFlags(value) {
    
    this.memoryViewInt32[0x3] = value;
  }
  get pImmutableSamplers() {
    return this._pImmutableSamplers;
  }
  set pImmutableSamplers(value) {
    if (value !== null ) {
      this._pImmutableSamplers = value;
    } else if (value === null) {
      this._pImmutableSamplers = null;
    } 
    
  }
  
};

VkDescriptorSetLayoutBinding.prototype.flush = function flush() {
  
  
  if (this._pImmutableSamplers !== null) {
    let array = this._pImmutableSamplers;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pImmutableSamplersNative = nativeArray;
    this.memoryViewBigInt64[0x2] = nativeArray.address;
  }
  
  return true;
};

VkDescriptorSetLayoutBinding.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkDescriptorSetLayoutBinding.byteLength = 0x18;

VkDescriptorSetLayoutBinding.memoryLayout = {
  binding: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  descriptorType: {
    byteOffset: 0x4,
    byteLength: 0x4
  },
  descriptorCount: {
    byteOffset: 0x8,
    byteLength: 0x4
  },
  stageFlags: {
    byteOffset: 0xC,
    byteLength: 0x4
  },
  pImmutableSamplers: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
};
/** VkDescriptorSetLayoutCreateInfo **/
class VkDescriptorSetLayoutCreateInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    this._pBindings = null;
    this._pBindingsNative = null;
    this.sType = 0x20;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.bindingCount !== void 0) this.bindingCount = opts.bindingCount;
      if (opts.pBindings !== void 0) this.pBindings = opts.pBindings;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null ) {
      let {sType} = value;
      
      switch (sType) {
          
        case 0x3B9D3EE8:
          break;
        default:
          throw new TypeError("Invalid type for 'VkDescriptorSetLayoutCreateInfo.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get bindingCount() {
    return this.memoryViewUint32[0x5];
  }
  set bindingCount(value) {
    
    this.memoryViewUint32[0x5] = value;
  }
  get pBindings() {
    return this._pBindings;
  }
  set pBindings(value) {
    if (value !== null ) {
      this._pBindings = value;
    } else if (value === null) {
      this._pBindings = null;
    } 
    
  }
  
};

VkDescriptorSetLayoutCreateInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pBindings !== null) {
    let array = this._pBindings;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pBindingsNative = nativeArray;
    this.memoryViewBigInt64[0x3] = nativeArray.address;
  }
  
  return true;
};

VkDescriptorSetLayoutCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
};

VkDescriptorSetLayoutCreateInfo.byteLength = 0x20;

VkDescriptorSetLayoutCreateInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  flags: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  bindingCount: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  pBindings: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
};
/** VkDescriptorPoolSize **/
class VkDescriptorPoolSize {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x8) / 0x4);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x8) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x8);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    
    
    if (typeof opts === "object") {
      if (opts.type !== void 0) this.type = opts.type;
      if (opts.descriptorCount !== void 0) this.descriptorCount = opts.descriptorCount;
      
    }
  }
  get type() {
    return this.memoryViewInt32[0x0];
  }
  set type(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get descriptorCount() {
    return this.memoryViewUint32[0x1];
  }
  set descriptorCount(value) {
    
    this.memoryViewUint32[0x1] = value;
  }
  
};

VkDescriptorPoolSize.prototype.flush = function flush() {
  
  return true;
};

VkDescriptorPoolSize.prototype.reflect = function reflect(memoryAddress) {
  
};

VkDescriptorPoolSize.byteLength = 0x8;

VkDescriptorPoolSize.memoryLayout = {
  type: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  descriptorCount: {
    byteOffset: 0x4,
    byteLength: 0x4
  },
};
/** VkDescriptorPoolCreateInfo **/
class VkDescriptorPoolCreateInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x28);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    
    this._pPoolSizes = null;
    this._pPoolSizesNative = null;
    this.sType = 0x21;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.maxSets !== void 0) this.maxSets = opts.maxSets;
      if (opts.poolSizeCount !== void 0) this.poolSizeCount = opts.poolSizeCount;
      if (opts.pPoolSizes !== void 0) this.pPoolSizes = opts.pPoolSizes;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null ) {
      let {sType} = value;
      
      switch (sType) {
          
        case 0x3B9CE513:
          break;
        default:
          throw new TypeError("Invalid type for 'VkDescriptorPoolCreateInfo.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get maxSets() {
    return this.memoryViewUint32[0x5];
  }
  set maxSets(value) {
    
    this.memoryViewUint32[0x5] = value;
  }
  get poolSizeCount() {
    return this.memoryViewUint32[0x6];
  }
  set poolSizeCount(value) {
    
    this.memoryViewUint32[0x6] = value;
  }
  get pPoolSizes() {
    return this._pPoolSizes;
  }
  set pPoolSizes(value) {
    if (value !== null ) {
      this._pPoolSizes = value;
    } else if (value === null) {
      this._pPoolSizes = null;
    } 
    
  }
  
};

VkDescriptorPoolCreateInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pPoolSizes !== null) {
    let array = this._pPoolSizes;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pPoolSizesNative = nativeArray;
    this.memoryViewBigInt64[0x4] = nativeArray.address;
  }
  
  return true;
};

VkDescriptorPoolCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
};

VkDescriptorPoolCreateInfo.byteLength = 0x28;

VkDescriptorPoolCreateInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  flags: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  maxSets: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  poolSizeCount: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
  pPoolSizes: {
    byteOffset: 0x20,
    byteLength: 0x8
  },
};
/** VkDescriptorSetAllocateInfo **/
class VkDescriptorSetAllocateInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x28);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._descriptorPool = null;
    
    this._pSetLayouts = null;
    this._pSetLayoutsNative = null;
    this.sType = 0x22;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.descriptorPool !== void 0) this.descriptorPool = opts.descriptorPool;
      if (opts.descriptorSetCount !== void 0) this.descriptorSetCount = opts.descriptorSetCount;
      if (opts.pSetLayouts !== void 0) this.pSetLayouts = opts.pSetLayouts;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null ) {
      let {sType} = value;
      
      switch (sType) {
          
        case 0x3B9D3EEB:
          break;
        default:
          throw new TypeError("Invalid type for 'VkDescriptorSetAllocateInfo.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  get descriptorPool() {
    return this._descriptorPool;
  }
  set descriptorPool(value) {
    if (value !== null ) {
      
      this._descriptorPool = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._descriptorPool = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } 
    
  }
  get descriptorSetCount() {
    return this.memoryViewUint32[0x6];
  }
  set descriptorSetCount(value) {
    
    this.memoryViewUint32[0x6] = value;
  }
  get pSetLayouts() {
    return this._pSetLayouts;
  }
  set pSetLayouts(value) {
    if (value !== null ) {
      this._pSetLayouts = value;
    } else if (value === null) {
      this._pSetLayouts = null;
    } 
    
  }
  
};

VkDescriptorSetAllocateInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pSetLayouts !== null) {
    let array = this._pSetLayouts;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pSetLayoutsNative = nativeArray;
    this.memoryViewBigInt64[0x4] = nativeArray.address;
  }
  
  return true;
};

VkDescriptorSetAllocateInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
};

VkDescriptorSetAllocateInfo.byteLength = 0x28;

VkDescriptorSetAllocateInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  descriptorPool: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
  descriptorSetCount: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
  pSetLayouts: {
    byteOffset: 0x20,
    byteLength: 0x8
  },
};
/** VkSpecializationMapEntry **/
class VkSpecializationMapEntry {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x10) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x10) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x10);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    
    
    
    if (typeof opts === "object") {
      if (opts.constantID !== void 0) this.constantID = opts.constantID;
      if (opts.offset !== void 0) this.offset = opts.offset;
      if (opts.size !== void 0) this.size = opts.size;
      
    }
  }
  get constantID() {
    return this.memoryViewUint32[0x0];
  }
  set constantID(value) {
    
    this.memoryViewUint32[0x0] = value;
  }
  get offset() {
    return this.memoryViewUint32[0x1];
  }
  set offset(value) {
    
    this.memoryViewUint32[0x1] = value;
  }
  get size() {
    return this.memoryViewBigInt64[0x1];
  }
  set size(value) {
    
    this.memoryViewBigInt64[0x1] = BigInt(value);
  }
  
};

VkSpecializationMapEntry.prototype.flush = function flush() {
  
  return true;
};

VkSpecializationMapEntry.prototype.reflect = function reflect(memoryAddress) {
  
};

VkSpecializationMapEntry.byteLength = 0x10;

VkSpecializationMapEntry.memoryLayout = {
  constantID: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  offset: {
    byteOffset: 0x4,
    byteLength: 0x4
  },
  size: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
};
/** VkSpecializationInfo **/
class VkSpecializationInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pMapEntries = null;
    this._pMapEntriesNative = null;
    
    this._pData = null;
    
    if (typeof opts === "object") {
      if (opts.mapEntryCount !== void 0) this.mapEntryCount = opts.mapEntryCount;
      if (opts.pMapEntries !== void 0) this.pMapEntries = opts.pMapEntries;
      if (opts.dataSize !== void 0) this.dataSize = opts.dataSize;
      if (opts.pData !== void 0) this.pData = opts.pData;
      
    }
  }
  get mapEntryCount() {
    return this.memoryViewUint32[0x0];
  }
  set mapEntryCount(value) {
    
    this.memoryViewUint32[0x0] = value;
  }
  get pMapEntries() {
    return this._pMapEntries;
  }
  set pMapEntries(value) {
    if (value !== null ) {
      this._pMapEntries = value;
    } else if (value === null) {
      this._pMapEntries = null;
    } 
    
  }
  get dataSize() {
    return this.memoryViewBigInt64[0x2];
  }
  set dataSize(value) {
    
    this.memoryViewBigInt64[0x2] = BigInt(value);
  }
  get pData() {
    return this._pData;
  }
  set pData(value) {
    if (value !== null ) {
      this._pData = value;
      this.memoryViewBigInt64[0x3] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pData = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } 
    
  }
  
};

VkSpecializationInfo.prototype.flush = function flush() {
  
  
  if (this._pMapEntries !== null) {
    let array = this._pMapEntries;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pMapEntriesNative = nativeArray;
    this.memoryViewBigInt64[0x1] = nativeArray.address;
  }
  
  return true;
};

VkSpecializationInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkSpecializationInfo.byteLength = 0x20;

VkSpecializationInfo.memoryLayout = {
  mapEntryCount: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pMapEntries: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  dataSize: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
  pData: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
};
/** VkPipelineShaderStageCreateInfo **/
class VkPipelineShaderStageCreateInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x30) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x30) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x30);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    this._module = null;
    this._pName = null;
    this._pSpecializationInfo = null;
    this.sType = 0x12;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.stage !== void 0) this.stage = opts.stage;
      if (opts.module !== void 0) this.module = opts.module;
      if (opts.pName !== void 0) this.pName = opts.pName;
      if (opts.pSpecializationInfo !== void 0) this.pSpecializationInfo = opts.pSpecializationInfo;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPipelineShaderStageCreateInfo.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get stage() {
    return this.memoryViewInt32[0x5];
  }
  set stage(value) {
    
    this.memoryViewInt32[0x5] = value;
  }
  get module() {
    return this._module;
  }
  set module(value) {
    if (value !== null ) {
      
      this._module = value;
      
      this.memoryViewBigInt64[0x3] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._module = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } 
    
  }
  get pName() {
    if (this._pName !== null) {
      let str = textDecoder.decode(this._pName);
      return str.substr(0, str.length - 1);
    } else {
      return null;
    }
  }
  set pName(value) {
    if (value !== null ) {
      this._pName = textEncoder.encode(value + NULLT).buffer;
      this.memoryViewBigInt64[0x4] = getAddressFromArrayBuffer(this._pName);
    } else if (value === null) {
      this._pName = null;
      this.memoryViewBigInt64[0x4] = BI0;
    } 
    
  }
  get pSpecializationInfo() {
    return this._pSpecializationInfo;
  }
  set pSpecializationInfo(value) {
    if (value !== null ) {
      value.flush();
      this._pSpecializationInfo = value;
      this.memoryViewBigInt64[0x5] = value.memoryAddress;
      
    } else if (value === null) {
      this._pSpecializationInfo = null;
      this.memoryViewBigInt64[0x5] = BI0;
    } 
    
  }
  
};

VkPipelineShaderStageCreateInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPipelineShaderStageCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPipelineShaderStageCreateInfo.byteLength = 0x30;

VkPipelineShaderStageCreateInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  flags: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  stage: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  module: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
  pName: {
    byteOffset: 0x20,
    byteLength: 0x8
  },
  pSpecializationInfo: {
    byteOffset: 0x28,
    byteLength: 0x8
  },
};
/** VkComputePipelineCreateInfo **/
class VkComputePipelineCreateInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x60) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x60) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x60);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this._stage = new VkPipelineShaderStageCreateInfo({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x18 });
    this._layout = null;
    this._basePipelineHandle = null;
    
    this.sType = 0x1D;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.stage !== void 0) this.stage = opts.stage;
      if (opts.layout !== void 0) this.layout = opts.layout;
      if (opts.basePipelineHandle !== void 0) this.basePipelineHandle = opts.basePipelineHandle;
      if (opts.basePipelineIndex !== void 0) this.basePipelineIndex = opts.basePipelineIndex;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null ) {
      let {sType} = value;
      
      switch (sType) {
          
        case 0x3B9DB800:
          break;
        default:
          throw new TypeError("Invalid type for 'VkComputePipelineCreateInfo.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get stage() {
    return this._stage;
  }
  set stage(value) {
    if (value !== null ) {
      value.flush();
      this._stage = value;
      
      
    } else if (value === null) {
      this._stage = null;
      
    } 
    
  }
  get layout() {
    return this._layout;
  }
  set layout(value) {
    if (value !== null ) {
      
      this._layout = value;
      
      this.memoryViewBigInt64[0x9] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._layout = null;
      this.memoryViewBigInt64[0x9] = BI0;
    } 
    
  }
  get basePipelineHandle() {
    return this._basePipelineHandle;
  }
  set basePipelineHandle(value) {
    if (value !== null ) {
      
      this._basePipelineHandle = value;
      
      this.memoryViewBigInt64[0xA] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._basePipelineHandle = null;
      this.memoryViewBigInt64[0xA] = BI0;
    } 
    
  }
  get basePipelineIndex() {
    return this.memoryViewInt32[0x16];
  }
  set basePipelineIndex(value) {
    
    this.memoryViewInt32[0x16] = value;
  }
  
};

VkComputePipelineCreateInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._stage !== null) {
    this._stage.flush();
    if (this.memoryBuffer !== this._stage.memoryBuffer) {
      let srcView = new Uint8Array(this._stage.memoryBuffer);
      let dstView = new Uint8Array(this.memoryBuffer);
      dstView.set(srcView, 0x18);
      
    }
  }
  
  return true;
};

VkComputePipelineCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
};

VkComputePipelineCreateInfo.byteLength = 0x60;

VkComputePipelineCreateInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  flags: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  stage: {
    byteOffset: 0x18,
    byteLength: 0x30
  },
  layout: {
    byteOffset: 0x48,
    byteLength: 0x8
  },
  basePipelineHandle: {
    byteOffset: 0x50,
    byteLength: 0x8
  },
  basePipelineIndex: {
    byteOffset: 0x58,
    byteLength: 0x4
  },
};
/** VkVertexInputBindingDescription **/
class VkVertexInputBindingDescription {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0xC) / 0x4);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0xC) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0xC);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);

    }
    
    
    
    
    if (typeof opts === "object") {
      if (opts.binding !== void 0) this.binding = opts.binding;
      if (opts.stride !== void 0) this.stride = opts.stride;
      if (opts.inputRate !== void 0) this.inputRate = opts.inputRate;
      
    }
  }
  get binding() {
    return this.memoryViewUint32[0x0];
  }
  set binding(value) {
    
    this.memoryViewUint32[0x0] = value;
  }
  get stride() {
    return this.memoryViewUint32[0x1];
  }
  set stride(value) {
    
    this.memoryViewUint32[0x1] = value;
  }
  get inputRate() {
    return this.memoryViewInt32[0x2];
  }
  set inputRate(value) {
    
    this.memoryViewInt32[0x2] = value;
  }
  
};

VkVertexInputBindingDescription.prototype.flush = function flush() {
  
  return true;
};

VkVertexInputBindingDescription.prototype.reflect = function reflect(memoryAddress) {
  
};

VkVertexInputBindingDescription.byteLength = 0xC;

VkVertexInputBindingDescription.memoryLayout = {
  binding: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  stride: {
    byteOffset: 0x4,
    byteLength: 0x4
  },
  inputRate: {
    byteOffset: 0x8,
    byteLength: 0x4
  },
};
/** VkVertexInputAttributeDescription **/
class VkVertexInputAttributeDescription {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x10) / 0x4);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x10) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x10);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);

    }
    
    
    
    
    
    if (typeof opts === "object") {
      if (opts.location !== void 0) this.location = opts.location;
      if (opts.binding !== void 0) this.binding = opts.binding;
      if (opts.format !== void 0) this.format = opts.format;
      if (opts.offset !== void 0) this.offset = opts.offset;
      
    }
  }
  get location() {
    return this.memoryViewUint32[0x0];
  }
  set location(value) {
    
    this.memoryViewUint32[0x0] = value;
  }
  get binding() {
    return this.memoryViewUint32[0x1];
  }
  set binding(value) {
    
    this.memoryViewUint32[0x1] = value;
  }
  get format() {
    return this.memoryViewInt32[0x2];
  }
  set format(value) {
    
    this.memoryViewInt32[0x2] = value;
  }
  get offset() {
    return this.memoryViewUint32[0x3];
  }
  set offset(value) {
    
    this.memoryViewUint32[0x3] = value;
  }
  
};

VkVertexInputAttributeDescription.prototype.flush = function flush() {
  
  return true;
};

VkVertexInputAttributeDescription.prototype.reflect = function reflect(memoryAddress) {
  
};

VkVertexInputAttributeDescription.byteLength = 0x10;

VkVertexInputAttributeDescription.memoryLayout = {
  location: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  binding: {
    byteOffset: 0x4,
    byteLength: 0x4
  },
  format: {
    byteOffset: 0x8,
    byteLength: 0x4
  },
  offset: {
    byteOffset: 0xC,
    byteLength: 0x4
  },
};
/** VkPipelineVertexInputStateCreateInfo **/
class VkPipelineVertexInputStateCreateInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x30) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x30) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x30) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x30);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    this._pVertexBindingDescriptions = null;
    this._pVertexBindingDescriptionsNative = null;
    
    this._pVertexAttributeDescriptions = null;
    this._pVertexAttributeDescriptionsNative = null;
    this.sType = 0x13;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.vertexBindingDescriptionCount !== void 0) this.vertexBindingDescriptionCount = opts.vertexBindingDescriptionCount;
      if (opts.pVertexBindingDescriptions !== void 0) this.pVertexBindingDescriptions = opts.pVertexBindingDescriptions;
      if (opts.vertexAttributeDescriptionCount !== void 0) this.vertexAttributeDescriptionCount = opts.vertexAttributeDescriptionCount;
      if (opts.pVertexAttributeDescriptions !== void 0) this.pVertexAttributeDescriptions = opts.pVertexAttributeDescriptions;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null ) {
      let {sType} = value;
      
      switch (sType) {
          
        case 0x3B9DB031:
          break;
        default:
          throw new TypeError("Invalid type for 'VkPipelineVertexInputStateCreateInfo.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get vertexBindingDescriptionCount() {
    return this.memoryViewUint32[0x5];
  }
  set vertexBindingDescriptionCount(value) {
    
    this.memoryViewUint32[0x5] = value;
  }
  get pVertexBindingDescriptions() {
    return this._pVertexBindingDescriptions;
  }
  set pVertexBindingDescriptions(value) {
    if (value !== null ) {
      this._pVertexBindingDescriptions = value;
    } else if (value === null) {
      this._pVertexBindingDescriptions = null;
    } 
    
  }
  get vertexAttributeDescriptionCount() {
    return this.memoryViewUint32[0x8];
  }
  set vertexAttributeDescriptionCount(value) {
    
    this.memoryViewUint32[0x8] = value;
  }
  get pVertexAttributeDescriptions() {
    return this._pVertexAttributeDescriptions;
  }
  set pVertexAttributeDescriptions(value) {
    if (value !== null ) {
      this._pVertexAttributeDescriptions = value;
    } else if (value === null) {
      this._pVertexAttributeDescriptions = null;
    } 
    
  }
  
};

VkPipelineVertexInputStateCreateInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pVertexBindingDescriptions !== null) {
    let array = this._pVertexBindingDescriptions;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pVertexBindingDescriptionsNative = nativeArray;
    this.memoryViewBigInt64[0x3] = nativeArray.address;
  }
  
  
  if (this._pVertexAttributeDescriptions !== null) {
    let array = this._pVertexAttributeDescriptions;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pVertexAttributeDescriptionsNative = nativeArray;
    this.memoryViewBigInt64[0x5] = nativeArray.address;
  }
  
  return true;
};

VkPipelineVertexInputStateCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
  
  
};

VkPipelineVertexInputStateCreateInfo.byteLength = 0x30;

VkPipelineVertexInputStateCreateInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  flags: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  vertexBindingDescriptionCount: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  pVertexBindingDescriptions: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
  vertexAttributeDescriptionCount: {
    byteOffset: 0x20,
    byteLength: 0x4
  },
  pVertexAttributeDescriptions: {
    byteOffset: 0x28,
    byteLength: 0x8
  },
};
/** VkPipelineInputAssemblyStateCreateInfo **/
class VkPipelineInputAssemblyStateCreateInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    
    this.sType = 0x14;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.topology !== void 0) this.topology = opts.topology;
      if (opts.primitiveRestartEnable !== void 0) this.primitiveRestartEnable = opts.primitiveRestartEnable;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPipelineInputAssemblyStateCreateInfo.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get topology() {
    return this.memoryViewInt32[0x5];
  }
  set topology(value) {
    
    this.memoryViewInt32[0x5] = value;
  }
  get primitiveRestartEnable() {
    return this.memoryViewUint32[0x6] !== 0;
  }
  set primitiveRestartEnable(value) {
    this.memoryViewUint32[0x6] = value | 0;
  }
  
};

VkPipelineInputAssemblyStateCreateInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPipelineInputAssemblyStateCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPipelineInputAssemblyStateCreateInfo.byteLength = 0x20;

VkPipelineInputAssemblyStateCreateInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  flags: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  topology: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  primitiveRestartEnable: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
};
/** VkPipelineTessellationStateCreateInfo **/
class VkPipelineTessellationStateCreateInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    this.sType = 0x15;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.patchControlPoints !== void 0) this.patchControlPoints = opts.patchControlPoints;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null ) {
      let {sType} = value;
      
      switch (sType) {
          
        case 0x3B9C930B:
          break;
        default:
          throw new TypeError("Invalid type for 'VkPipelineTessellationStateCreateInfo.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get patchControlPoints() {
    return this.memoryViewUint32[0x5];
  }
  set patchControlPoints(value) {
    
    this.memoryViewUint32[0x5] = value;
  }
  
};

VkPipelineTessellationStateCreateInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPipelineTessellationStateCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPipelineTessellationStateCreateInfo.byteLength = 0x18;

VkPipelineTessellationStateCreateInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  flags: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  patchControlPoints: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
};
/** VkPipelineViewportStateCreateInfo **/
class VkPipelineViewportStateCreateInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x30) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x30) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x30) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x30);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    this._pViewports = null;
    this._pViewportsNative = null;
    
    this._pScissors = null;
    this._pScissorsNative = null;
    this.sType = 0x16;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.viewportCount !== void 0) this.viewportCount = opts.viewportCount;
      if (opts.pViewports !== void 0) this.pViewports = opts.pViewports;
      if (opts.scissorCount !== void 0) this.scissorCount = opts.scissorCount;
      if (opts.pScissors !== void 0) this.pScissors = opts.pScissors;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null ) {
      let {sType} = value;
      
      switch (sType) {
          
        case 0x3B9C1DD8:
        case 0x3B9C48D0:
        case 0x3B9DEAC8:
        case 0x3B9D4AA0:
        case 0x3B9D4AA5:
          break;
        default:
          throw new TypeError("Invalid type for 'VkPipelineViewportStateCreateInfo.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get viewportCount() {
    return this.memoryViewUint32[0x5];
  }
  set viewportCount(value) {
    
    this.memoryViewUint32[0x5] = value;
  }
  get pViewports() {
    return this._pViewports;
  }
  set pViewports(value) {
    if (value !== null ) {
      this._pViewports = value;
    } else if (value === null) {
      this._pViewports = null;
    } 
    
  }
  get scissorCount() {
    return this.memoryViewUint32[0x8];
  }
  set scissorCount(value) {
    
    this.memoryViewUint32[0x8] = value;
  }
  get pScissors() {
    return this._pScissors;
  }
  set pScissors(value) {
    if (value !== null ) {
      this._pScissors = value;
    } else if (value === null) {
      this._pScissors = null;
    } 
    
  }
  
};

VkPipelineViewportStateCreateInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pViewports !== null) {
    let array = this._pViewports;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pViewportsNative = nativeArray;
    this.memoryViewBigInt64[0x3] = nativeArray.address;
  }
  
  
  if (this._pScissors !== null) {
    let array = this._pScissors;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pScissorsNative = nativeArray;
    this.memoryViewBigInt64[0x5] = nativeArray.address;
  }
  
  return true;
};

VkPipelineViewportStateCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
  
  
};

VkPipelineViewportStateCreateInfo.byteLength = 0x30;

VkPipelineViewportStateCreateInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  flags: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  viewportCount: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  pViewports: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
  scissorCount: {
    byteOffset: 0x20,
    byteLength: 0x4
  },
  pScissors: {
    byteOffset: 0x28,
    byteLength: 0x8
  },
};
/** VkPipelineRasterizationStateCreateInfo **/
class VkPipelineRasterizationStateCreateInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x40) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x40) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x40) / 0x4);
      this.memoryViewFloat32 = new Float32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x40) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x40);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
      this.memoryViewFloat32 = new Float32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    
    
    
    
    
    
    
    
    
    this.sType = 0x17;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.depthClampEnable !== void 0) this.depthClampEnable = opts.depthClampEnable;
      if (opts.rasterizerDiscardEnable !== void 0) this.rasterizerDiscardEnable = opts.rasterizerDiscardEnable;
      if (opts.polygonMode !== void 0) this.polygonMode = opts.polygonMode;
      if (opts.cullMode !== void 0) this.cullMode = opts.cullMode;
      if (opts.frontFace !== void 0) this.frontFace = opts.frontFace;
      if (opts.depthBiasEnable !== void 0) this.depthBiasEnable = opts.depthBiasEnable;
      if (opts.depthBiasConstantFactor !== void 0) this.depthBiasConstantFactor = opts.depthBiasConstantFactor;
      if (opts.depthBiasClamp !== void 0) this.depthBiasClamp = opts.depthBiasClamp;
      if (opts.depthBiasSlopeFactor !== void 0) this.depthBiasSlopeFactor = opts.depthBiasSlopeFactor;
      if (opts.lineWidth !== void 0) this.lineWidth = opts.lineWidth;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null ) {
      let {sType} = value;
      
      switch (sType) {
          
        case 0x3B9B1050:
        case 0x3B9C5489:
        case 0x3B9B3762:
        case 0x3B9C5871:
          break;
        default:
          throw new TypeError("Invalid type for 'VkPipelineRasterizationStateCreateInfo.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get depthClampEnable() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  set depthClampEnable(value) {
    this.memoryViewUint32[0x5] = value | 0;
  }
  get rasterizerDiscardEnable() {
    return this.memoryViewUint32[0x6] !== 0;
  }
  set rasterizerDiscardEnable(value) {
    this.memoryViewUint32[0x6] = value | 0;
  }
  get polygonMode() {
    return this.memoryViewInt32[0x7];
  }
  set polygonMode(value) {
    
    this.memoryViewInt32[0x7] = value;
  }
  get cullMode() {
    return this.memoryViewInt32[0x8];
  }
  set cullMode(value) {
    
    this.memoryViewInt32[0x8] = value;
  }
  get frontFace() {
    return this.memoryViewInt32[0x9];
  }
  set frontFace(value) {
    
    this.memoryViewInt32[0x9] = value;
  }
  get depthBiasEnable() {
    return this.memoryViewUint32[0xA] !== 0;
  }
  set depthBiasEnable(value) {
    this.memoryViewUint32[0xA] = value | 0;
  }
  get depthBiasConstantFactor() {
    return this.memoryViewFloat32[0xB];
  }
  set depthBiasConstantFactor(value) {
    
    this.memoryViewFloat32[0xB] = value;
  }
  get depthBiasClamp() {
    return this.memoryViewFloat32[0xC];
  }
  set depthBiasClamp(value) {
    
    this.memoryViewFloat32[0xC] = value;
  }
  get depthBiasSlopeFactor() {
    return this.memoryViewFloat32[0xD];
  }
  set depthBiasSlopeFactor(value) {
    
    this.memoryViewFloat32[0xD] = value;
  }
  get lineWidth() {
    return this.memoryViewFloat32[0xE];
  }
  set lineWidth(value) {
    
    this.memoryViewFloat32[0xE] = value;
  }
  
};

VkPipelineRasterizationStateCreateInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPipelineRasterizationStateCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPipelineRasterizationStateCreateInfo.byteLength = 0x40;

VkPipelineRasterizationStateCreateInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  flags: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  depthClampEnable: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  rasterizerDiscardEnable: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
  polygonMode: {
    byteOffset: 0x1C,
    byteLength: 0x4
  },
  cullMode: {
    byteOffset: 0x20,
    byteLength: 0x4
  },
  frontFace: {
    byteOffset: 0x24,
    byteLength: 0x4
  },
  depthBiasEnable: {
    byteOffset: 0x28,
    byteLength: 0x4
  },
  depthBiasConstantFactor: {
    byteOffset: 0x2C,
    byteLength: 0x4
  },
  depthBiasClamp: {
    byteOffset: 0x30,
    byteLength: 0x4
  },
  depthBiasSlopeFactor: {
    byteOffset: 0x34,
    byteLength: 0x4
  },
  lineWidth: {
    byteOffset: 0x38,
    byteLength: 0x4
  },
};
/** VkPipelineMultisampleStateCreateInfo **/
class VkPipelineMultisampleStateCreateInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x30) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x30) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x30) / 0x4);
      this.memoryViewFloat32 = new Float32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x30) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x30);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
      this.memoryViewFloat32 = new Float32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    
    
    this._pSampleMask = null;
    
    
    this.sType = 0x18;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.rasterizationSamples !== void 0) this.rasterizationSamples = opts.rasterizationSamples;
      if (opts.sampleShadingEnable !== void 0) this.sampleShadingEnable = opts.sampleShadingEnable;
      if (opts.minSampleShading !== void 0) this.minSampleShading = opts.minSampleShading;
      if (opts.pSampleMask !== void 0) this.pSampleMask = opts.pSampleMask;
      if (opts.alphaToCoverageEnable !== void 0) this.alphaToCoverageEnable = opts.alphaToCoverageEnable;
      if (opts.alphaToOneEnable !== void 0) this.alphaToOneEnable = opts.alphaToOneEnable;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null ) {
      let {sType} = value;
      
      switch (sType) {
          
        case 0x3B9D1008:
        case 0x3B9CF89A:
        case 0x3B9D1BC0:
          break;
        default:
          throw new TypeError("Invalid type for 'VkPipelineMultisampleStateCreateInfo.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get rasterizationSamples() {
    return this.memoryViewInt32[0x5];
  }
  set rasterizationSamples(value) {
    
    this.memoryViewInt32[0x5] = value;
  }
  get sampleShadingEnable() {
    return this.memoryViewUint32[0x6] !== 0;
  }
  set sampleShadingEnable(value) {
    this.memoryViewUint32[0x6] = value | 0;
  }
  get minSampleShading() {
    return this.memoryViewFloat32[0x7];
  }
  set minSampleShading(value) {
    
    this.memoryViewFloat32[0x7] = value;
  }
  get pSampleMask() {
    return this._pSampleMask;
  }
  set pSampleMask(value) {
    if (value !== null ) {
      this._pSampleMask = value;
      this.memoryViewBigInt64[0x4] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pSampleMask = null;
      this.memoryViewBigInt64[0x4] = BI0;
    } 
    
  }
  get alphaToCoverageEnable() {
    return this.memoryViewUint32[0xA] !== 0;
  }
  set alphaToCoverageEnable(value) {
    this.memoryViewUint32[0xA] = value | 0;
  }
  get alphaToOneEnable() {
    return this.memoryViewUint32[0xB] !== 0;
  }
  set alphaToOneEnable(value) {
    this.memoryViewUint32[0xB] = value | 0;
  }
  
};

VkPipelineMultisampleStateCreateInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPipelineMultisampleStateCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPipelineMultisampleStateCreateInfo.byteLength = 0x30;

VkPipelineMultisampleStateCreateInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  flags: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  rasterizationSamples: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  sampleShadingEnable: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
  minSampleShading: {
    byteOffset: 0x1C,
    byteLength: 0x4
  },
  pSampleMask: {
    byteOffset: 0x20,
    byteLength: 0x8
  },
  alphaToCoverageEnable: {
    byteOffset: 0x28,
    byteLength: 0x4
  },
  alphaToOneEnable: {
    byteOffset: 0x2C,
    byteLength: 0x4
  },
};
/** VkPipelineColorBlendAttachmentState **/
class VkPipelineColorBlendAttachmentState {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);

    }
    
    
    
    
    
    
    
    
    
    if (typeof opts === "object") {
      if (opts.blendEnable !== void 0) this.blendEnable = opts.blendEnable;
      if (opts.srcColorBlendFactor !== void 0) this.srcColorBlendFactor = opts.srcColorBlendFactor;
      if (opts.dstColorBlendFactor !== void 0) this.dstColorBlendFactor = opts.dstColorBlendFactor;
      if (opts.colorBlendOp !== void 0) this.colorBlendOp = opts.colorBlendOp;
      if (opts.srcAlphaBlendFactor !== void 0) this.srcAlphaBlendFactor = opts.srcAlphaBlendFactor;
      if (opts.dstAlphaBlendFactor !== void 0) this.dstAlphaBlendFactor = opts.dstAlphaBlendFactor;
      if (opts.alphaBlendOp !== void 0) this.alphaBlendOp = opts.alphaBlendOp;
      if (opts.colorWriteMask !== void 0) this.colorWriteMask = opts.colorWriteMask;
      
    }
  }
  get blendEnable() {
    return this.memoryViewUint32[0x0] !== 0;
  }
  set blendEnable(value) {
    this.memoryViewUint32[0x0] = value | 0;
  }
  get srcColorBlendFactor() {
    return this.memoryViewInt32[0x1];
  }
  set srcColorBlendFactor(value) {
    
    this.memoryViewInt32[0x1] = value;
  }
  get dstColorBlendFactor() {
    return this.memoryViewInt32[0x2];
  }
  set dstColorBlendFactor(value) {
    
    this.memoryViewInt32[0x2] = value;
  }
  get colorBlendOp() {
    return this.memoryViewInt32[0x3];
  }
  set colorBlendOp(value) {
    
    this.memoryViewInt32[0x3] = value;
  }
  get srcAlphaBlendFactor() {
    return this.memoryViewInt32[0x4];
  }
  set srcAlphaBlendFactor(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get dstAlphaBlendFactor() {
    return this.memoryViewInt32[0x5];
  }
  set dstAlphaBlendFactor(value) {
    
    this.memoryViewInt32[0x5] = value;
  }
  get alphaBlendOp() {
    return this.memoryViewInt32[0x6];
  }
  set alphaBlendOp(value) {
    
    this.memoryViewInt32[0x6] = value;
  }
  get colorWriteMask() {
    return this.memoryViewInt32[0x7];
  }
  set colorWriteMask(value) {
    
    this.memoryViewInt32[0x7] = value;
  }
  
};

VkPipelineColorBlendAttachmentState.prototype.flush = function flush() {
  
  return true;
};

VkPipelineColorBlendAttachmentState.prototype.reflect = function reflect(memoryAddress) {
  
};

VkPipelineColorBlendAttachmentState.byteLength = 0x20;

VkPipelineColorBlendAttachmentState.memoryLayout = {
  blendEnable: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  srcColorBlendFactor: {
    byteOffset: 0x4,
    byteLength: 0x4
  },
  dstColorBlendFactor: {
    byteOffset: 0x8,
    byteLength: 0x4
  },
  colorBlendOp: {
    byteOffset: 0xC,
    byteLength: 0x4
  },
  srcAlphaBlendFactor: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  dstAlphaBlendFactor: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  alphaBlendOp: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
  colorWriteMask: {
    byteOffset: 0x1C,
    byteLength: 0x4
  },
};
/** VkPipelineColorBlendStateCreateInfo **/
class VkPipelineColorBlendStateCreateInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x38) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x38) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x38) / 0x4);
      this.memoryViewFloat32 = new Float32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x38) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x38);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
      this.memoryViewFloat32 = new Float32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    
    
    this._pAttachments = null;
    this._pAttachmentsNative = null;
    this._blendConstants = [...Array(4)].fill(0x0);
    this.sType = 0x1A;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.logicOpEnable !== void 0) this.logicOpEnable = opts.logicOpEnable;
      if (opts.logicOp !== void 0) this.logicOp = opts.logicOp;
      if (opts.attachmentCount !== void 0) this.attachmentCount = opts.attachmentCount;
      if (opts.pAttachments !== void 0) this.pAttachments = opts.pAttachments;
      if (opts.blendConstants !== void 0) this.blendConstants = opts.blendConstants;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null ) {
      let {sType} = value;
      
      switch (sType) {
          
        case 0x3B9D0C22:
          break;
        default:
          throw new TypeError("Invalid type for 'VkPipelineColorBlendStateCreateInfo.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get logicOpEnable() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  set logicOpEnable(value) {
    this.memoryViewUint32[0x5] = value | 0;
  }
  get logicOp() {
    return this.memoryViewInt32[0x6];
  }
  set logicOp(value) {
    
    this.memoryViewInt32[0x6] = value;
  }
  get attachmentCount() {
    return this.memoryViewUint32[0x7];
  }
  set attachmentCount(value) {
    
    this.memoryViewUint32[0x7] = value;
  }
  get pAttachments() {
    return this._pAttachments;
  }
  set pAttachments(value) {
    if (value !== null ) {
      this._pAttachments = value;
    } else if (value === null) {
      this._pAttachments = null;
    } 
    
  }
  get blendConstants() {
    return this._blendConstants;
  }
  set blendConstants(value) {
    if (value !== null ) {
      this._blendConstants = value;
    } else if (value === null) {
      this._blendConstants = null;
    } 
    
  }
  
};

VkPipelineColorBlendStateCreateInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pAttachments !== null) {
    let array = this._pAttachments;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pAttachmentsNative = nativeArray;
    this.memoryViewBigInt64[0x4] = nativeArray.address;
  }
  
  
  if (this._blendConstants !== null) {
    let array = this._blendConstants;
    
    for (let ii = 0; ii < array.length; ++ii) {
      this.memoryViewFloat32[0xA + ii] = array[ii];
    };
  } else {
    this.memoryViewFloat32[0xA] = 0x0;
  }
  
  return true;
};

VkPipelineColorBlendStateCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
  
  
};

VkPipelineColorBlendStateCreateInfo.byteLength = 0x38;

VkPipelineColorBlendStateCreateInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  flags: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  logicOpEnable: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  logicOp: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
  attachmentCount: {
    byteOffset: 0x1C,
    byteLength: 0x4
  },
  pAttachments: {
    byteOffset: 0x20,
    byteLength: 0x8
  },
  blendConstants: {
    byteOffset: 0x28,
    byteLength: 0x10
  },
};
/** VkPipelineDynamicStateCreateInfo **/
class VkPipelineDynamicStateCreateInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    this._pDynamicStates = null;
    this.sType = 0x1B;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.dynamicStateCount !== void 0) this.dynamicStateCount = opts.dynamicStateCount;
      if (opts.pDynamicStates !== void 0) this.pDynamicStates = opts.pDynamicStates;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPipelineDynamicStateCreateInfo.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get dynamicStateCount() {
    return this.memoryViewUint32[0x5];
  }
  set dynamicStateCount(value) {
    
    this.memoryViewUint32[0x5] = value;
  }
  get pDynamicStates() {
    return this._pDynamicStates;
  }
  set pDynamicStates(value) {
    if (value !== null ) {
      this._pDynamicStates = value;
      this.memoryViewBigInt64[0x3] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pDynamicStates = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } 
    
  }
  
};

VkPipelineDynamicStateCreateInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPipelineDynamicStateCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPipelineDynamicStateCreateInfo.byteLength = 0x20;

VkPipelineDynamicStateCreateInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  flags: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  dynamicStateCount: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  pDynamicStates: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
};
/** VkStencilOpState **/
class VkStencilOpState {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x1C) / 0x4);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x1C) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x1C);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    
    
    
    
    
    
    
    if (typeof opts === "object") {
      if (opts.failOp !== void 0) this.failOp = opts.failOp;
      if (opts.passOp !== void 0) this.passOp = opts.passOp;
      if (opts.depthFailOp !== void 0) this.depthFailOp = opts.depthFailOp;
      if (opts.compareOp !== void 0) this.compareOp = opts.compareOp;
      if (opts.compareMask !== void 0) this.compareMask = opts.compareMask;
      if (opts.writeMask !== void 0) this.writeMask = opts.writeMask;
      if (opts.reference !== void 0) this.reference = opts.reference;
      
    }
  }
  get failOp() {
    return this.memoryViewInt32[0x0];
  }
  set failOp(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get passOp() {
    return this.memoryViewInt32[0x1];
  }
  set passOp(value) {
    
    this.memoryViewInt32[0x1] = value;
  }
  get depthFailOp() {
    return this.memoryViewInt32[0x2];
  }
  set depthFailOp(value) {
    
    this.memoryViewInt32[0x2] = value;
  }
  get compareOp() {
    return this.memoryViewInt32[0x3];
  }
  set compareOp(value) {
    
    this.memoryViewInt32[0x3] = value;
  }
  get compareMask() {
    return this.memoryViewUint32[0x4];
  }
  set compareMask(value) {
    
    this.memoryViewUint32[0x4] = value;
  }
  get writeMask() {
    return this.memoryViewUint32[0x5];
  }
  set writeMask(value) {
    
    this.memoryViewUint32[0x5] = value;
  }
  get reference() {
    return this.memoryViewUint32[0x6];
  }
  set reference(value) {
    
    this.memoryViewUint32[0x6] = value;
  }
  
};

VkStencilOpState.prototype.flush = function flush() {
  
  return true;
};

VkStencilOpState.prototype.reflect = function reflect(memoryAddress) {
  
};

VkStencilOpState.byteLength = 0x1C;

VkStencilOpState.memoryLayout = {
  failOp: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  passOp: {
    byteOffset: 0x4,
    byteLength: 0x4
  },
  depthFailOp: {
    byteOffset: 0x8,
    byteLength: 0x4
  },
  compareOp: {
    byteOffset: 0xC,
    byteLength: 0x4
  },
  compareMask: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  writeMask: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  reference: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
};
/** VkPipelineDepthStencilStateCreateInfo **/
class VkPipelineDepthStencilStateCreateInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x68) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x68) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x68) / 0x4);
      this.memoryViewFloat32 = new Float32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x68) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x68);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
      this.memoryViewFloat32 = new Float32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    
    
    
    
    this._front = new VkStencilOpState({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x28 });
    this._back = new VkStencilOpState({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x44 });
    
    
    this.sType = 0x19;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.depthTestEnable !== void 0) this.depthTestEnable = opts.depthTestEnable;
      if (opts.depthWriteEnable !== void 0) this.depthWriteEnable = opts.depthWriteEnable;
      if (opts.depthCompareOp !== void 0) this.depthCompareOp = opts.depthCompareOp;
      if (opts.depthBoundsTestEnable !== void 0) this.depthBoundsTestEnable = opts.depthBoundsTestEnable;
      if (opts.stencilTestEnable !== void 0) this.stencilTestEnable = opts.stencilTestEnable;
      if (opts.front !== void 0) this.front = opts.front;
      if (opts.back !== void 0) this.back = opts.back;
      if (opts.minDepthBounds !== void 0) this.minDepthBounds = opts.minDepthBounds;
      if (opts.maxDepthBounds !== void 0) this.maxDepthBounds = opts.maxDepthBounds;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPipelineDepthStencilStateCreateInfo.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get depthTestEnable() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  set depthTestEnable(value) {
    this.memoryViewUint32[0x5] = value | 0;
  }
  get depthWriteEnable() {
    return this.memoryViewUint32[0x6] !== 0;
  }
  set depthWriteEnable(value) {
    this.memoryViewUint32[0x6] = value | 0;
  }
  get depthCompareOp() {
    return this.memoryViewInt32[0x7];
  }
  set depthCompareOp(value) {
    
    this.memoryViewInt32[0x7] = value;
  }
  get depthBoundsTestEnable() {
    return this.memoryViewUint32[0x8] !== 0;
  }
  set depthBoundsTestEnable(value) {
    this.memoryViewUint32[0x8] = value | 0;
  }
  get stencilTestEnable() {
    return this.memoryViewUint32[0x9] !== 0;
  }
  set stencilTestEnable(value) {
    this.memoryViewUint32[0x9] = value | 0;
  }
  get front() {
    return this._front;
  }
  set front(value) {
    if (value !== null ) {
      value.flush();
      this._front = value;
      
      
    } else if (value === null) {
      this._front = null;
      
    } 
    
  }
  get back() {
    return this._back;
  }
  set back(value) {
    if (value !== null ) {
      value.flush();
      this._back = value;
      
      
    } else if (value === null) {
      this._back = null;
      
    } 
    
  }
  get minDepthBounds() {
    return this.memoryViewFloat32[0x18];
  }
  set minDepthBounds(value) {
    
    this.memoryViewFloat32[0x18] = value;
  }
  get maxDepthBounds() {
    return this.memoryViewFloat32[0x19];
  }
  set maxDepthBounds(value) {
    
    this.memoryViewFloat32[0x19] = value;
  }
  
};

VkPipelineDepthStencilStateCreateInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._front !== null) {
    this._front.flush();
    if (this.memoryBuffer !== this._front.memoryBuffer) {
      let srcView = new Uint8Array(this._front.memoryBuffer);
      let dstView = new Uint8Array(this.memoryBuffer);
      dstView.set(srcView, 0x28);
      
    }
  }
  
  
  if (this._back !== null) {
    this._back.flush();
    if (this.memoryBuffer !== this._back.memoryBuffer) {
      let srcView = new Uint8Array(this._back.memoryBuffer);
      let dstView = new Uint8Array(this.memoryBuffer);
      dstView.set(srcView, 0x44);
      
    }
  }
  
  return true;
};

VkPipelineDepthStencilStateCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
  
  
};

VkPipelineDepthStencilStateCreateInfo.byteLength = 0x68;

VkPipelineDepthStencilStateCreateInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  flags: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  depthTestEnable: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  depthWriteEnable: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
  depthCompareOp: {
    byteOffset: 0x1C,
    byteLength: 0x4
  },
  depthBoundsTestEnable: {
    byteOffset: 0x20,
    byteLength: 0x4
  },
  stencilTestEnable: {
    byteOffset: 0x24,
    byteLength: 0x4
  },
  front: {
    byteOffset: 0x28,
    byteLength: 0x1C
  },
  back: {
    byteOffset: 0x44,
    byteLength: 0x1C
  },
  minDepthBounds: {
    byteOffset: 0x60,
    byteLength: 0x4
  },
  maxDepthBounds: {
    byteOffset: 0x64,
    byteLength: 0x4
  },
};
/** VkGraphicsPipelineCreateInfo **/
class VkGraphicsPipelineCreateInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x90) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x90) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x90) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x90);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    this._pStages = null;
    this._pStagesNative = null;
    this._pVertexInputState = null;
    this._pInputAssemblyState = null;
    this._pTessellationState = null;
    this._pViewportState = null;
    this._pRasterizationState = null;
    this._pMultisampleState = null;
    this._pDepthStencilState = null;
    this._pColorBlendState = null;
    this._pDynamicState = null;
    this._layout = null;
    this._renderPass = null;
    
    this._basePipelineHandle = null;
    
    this.sType = 0x1C;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.stageCount !== void 0) this.stageCount = opts.stageCount;
      if (opts.pStages !== void 0) this.pStages = opts.pStages;
      if (opts.pVertexInputState !== void 0) this.pVertexInputState = opts.pVertexInputState;
      if (opts.pInputAssemblyState !== void 0) this.pInputAssemblyState = opts.pInputAssemblyState;
      if (opts.pTessellationState !== void 0) this.pTessellationState = opts.pTessellationState;
      if (opts.pViewportState !== void 0) this.pViewportState = opts.pViewportState;
      if (opts.pRasterizationState !== void 0) this.pRasterizationState = opts.pRasterizationState;
      if (opts.pMultisampleState !== void 0) this.pMultisampleState = opts.pMultisampleState;
      if (opts.pDepthStencilState !== void 0) this.pDepthStencilState = opts.pDepthStencilState;
      if (opts.pColorBlendState !== void 0) this.pColorBlendState = opts.pColorBlendState;
      if (opts.pDynamicState !== void 0) this.pDynamicState = opts.pDynamicState;
      if (opts.layout !== void 0) this.layout = opts.layout;
      if (opts.renderPass !== void 0) this.renderPass = opts.renderPass;
      if (opts.subpass !== void 0) this.subpass = opts.subpass;
      if (opts.basePipelineHandle !== void 0) this.basePipelineHandle = opts.basePipelineHandle;
      if (opts.basePipelineIndex !== void 0) this.basePipelineIndex = opts.basePipelineIndex;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null ) {
      let {sType} = value;
      
      switch (sType) {
          
        case 0x3B9C4CB9:
        case 0x3B9D5271:
        case 0x3B9DB800:
          break;
        default:
          throw new TypeError("Invalid type for 'VkGraphicsPipelineCreateInfo.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get stageCount() {
    return this.memoryViewUint32[0x5];
  }
  set stageCount(value) {
    
    this.memoryViewUint32[0x5] = value;
  }
  get pStages() {
    return this._pStages;
  }
  set pStages(value) {
    if (value !== null ) {
      this._pStages = value;
    } else if (value === null) {
      this._pStages = null;
    } 
    
  }
  get pVertexInputState() {
    return this._pVertexInputState;
  }
  set pVertexInputState(value) {
    if (value !== null ) {
      value.flush();
      this._pVertexInputState = value;
      this.memoryViewBigInt64[0x4] = value.memoryAddress;
      
    } else if (value === null) {
      this._pVertexInputState = null;
      this.memoryViewBigInt64[0x4] = BI0;
    } 
    
  }
  get pInputAssemblyState() {
    return this._pInputAssemblyState;
  }
  set pInputAssemblyState(value) {
    if (value !== null ) {
      value.flush();
      this._pInputAssemblyState = value;
      this.memoryViewBigInt64[0x5] = value.memoryAddress;
      
    } else if (value === null) {
      this._pInputAssemblyState = null;
      this.memoryViewBigInt64[0x5] = BI0;
    } 
    
  }
  get pTessellationState() {
    return this._pTessellationState;
  }
  set pTessellationState(value) {
    if (value !== null ) {
      value.flush();
      this._pTessellationState = value;
      this.memoryViewBigInt64[0x6] = value.memoryAddress;
      
    } else if (value === null) {
      this._pTessellationState = null;
      this.memoryViewBigInt64[0x6] = BI0;
    } 
    
  }
  get pViewportState() {
    return this._pViewportState;
  }
  set pViewportState(value) {
    if (value !== null ) {
      value.flush();
      this._pViewportState = value;
      this.memoryViewBigInt64[0x7] = value.memoryAddress;
      
    } else if (value === null) {
      this._pViewportState = null;
      this.memoryViewBigInt64[0x7] = BI0;
    } 
    
  }
  get pRasterizationState() {
    return this._pRasterizationState;
  }
  set pRasterizationState(value) {
    if (value !== null ) {
      value.flush();
      this._pRasterizationState = value;
      this.memoryViewBigInt64[0x8] = value.memoryAddress;
      
    } else if (value === null) {
      this._pRasterizationState = null;
      this.memoryViewBigInt64[0x8] = BI0;
    } 
    
  }
  get pMultisampleState() {
    return this._pMultisampleState;
  }
  set pMultisampleState(value) {
    if (value !== null ) {
      value.flush();
      this._pMultisampleState = value;
      this.memoryViewBigInt64[0x9] = value.memoryAddress;
      
    } else if (value === null) {
      this._pMultisampleState = null;
      this.memoryViewBigInt64[0x9] = BI0;
    } 
    
  }
  get pDepthStencilState() {
    return this._pDepthStencilState;
  }
  set pDepthStencilState(value) {
    if (value !== null ) {
      value.flush();
      this._pDepthStencilState = value;
      this.memoryViewBigInt64[0xA] = value.memoryAddress;
      
    } else if (value === null) {
      this._pDepthStencilState = null;
      this.memoryViewBigInt64[0xA] = BI0;
    } 
    
  }
  get pColorBlendState() {
    return this._pColorBlendState;
  }
  set pColorBlendState(value) {
    if (value !== null ) {
      value.flush();
      this._pColorBlendState = value;
      this.memoryViewBigInt64[0xB] = value.memoryAddress;
      
    } else if (value === null) {
      this._pColorBlendState = null;
      this.memoryViewBigInt64[0xB] = BI0;
    } 
    
  }
  get pDynamicState() {
    return this._pDynamicState;
  }
  set pDynamicState(value) {
    if (value !== null ) {
      value.flush();
      this._pDynamicState = value;
      this.memoryViewBigInt64[0xC] = value.memoryAddress;
      
    } else if (value === null) {
      this._pDynamicState = null;
      this.memoryViewBigInt64[0xC] = BI0;
    } 
    
  }
  get layout() {
    return this._layout;
  }
  set layout(value) {
    if (value !== null ) {
      
      this._layout = value;
      
      this.memoryViewBigInt64[0xD] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._layout = null;
      this.memoryViewBigInt64[0xD] = BI0;
    } 
    
  }
  get renderPass() {
    return this._renderPass;
  }
  set renderPass(value) {
    if (value !== null ) {
      
      this._renderPass = value;
      
      this.memoryViewBigInt64[0xE] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._renderPass = null;
      this.memoryViewBigInt64[0xE] = BI0;
    } 
    
  }
  get subpass() {
    return this.memoryViewUint32[0x1E];
  }
  set subpass(value) {
    
    this.memoryViewUint32[0x1E] = value;
  }
  get basePipelineHandle() {
    return this._basePipelineHandle;
  }
  set basePipelineHandle(value) {
    if (value !== null ) {
      
      this._basePipelineHandle = value;
      
      this.memoryViewBigInt64[0x10] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._basePipelineHandle = null;
      this.memoryViewBigInt64[0x10] = BI0;
    } 
    
  }
  get basePipelineIndex() {
    return this.memoryViewInt32[0x22];
  }
  set basePipelineIndex(value) {
    
    this.memoryViewInt32[0x22] = value;
  }
  
};

VkGraphicsPipelineCreateInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pStages !== null) {
    let array = this._pStages;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pStagesNative = nativeArray;
    this.memoryViewBigInt64[0x3] = nativeArray.address;
  }
  
  return true;
};

VkGraphicsPipelineCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
};

VkGraphicsPipelineCreateInfo.byteLength = 0x90;

VkGraphicsPipelineCreateInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  flags: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  stageCount: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  pStages: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
  pVertexInputState: {
    byteOffset: 0x20,
    byteLength: 0x8
  },
  pInputAssemblyState: {
    byteOffset: 0x28,
    byteLength: 0x8
  },
  pTessellationState: {
    byteOffset: 0x30,
    byteLength: 0x8
  },
  pViewportState: {
    byteOffset: 0x38,
    byteLength: 0x8
  },
  pRasterizationState: {
    byteOffset: 0x40,
    byteLength: 0x8
  },
  pMultisampleState: {
    byteOffset: 0x48,
    byteLength: 0x8
  },
  pDepthStencilState: {
    byteOffset: 0x50,
    byteLength: 0x8
  },
  pColorBlendState: {
    byteOffset: 0x58,
    byteLength: 0x8
  },
  pDynamicState: {
    byteOffset: 0x60,
    byteLength: 0x8
  },
  layout: {
    byteOffset: 0x68,
    byteLength: 0x8
  },
  renderPass: {
    byteOffset: 0x70,
    byteLength: 0x8
  },
  subpass: {
    byteOffset: 0x78,
    byteLength: 0x4
  },
  basePipelineHandle: {
    byteOffset: 0x80,
    byteLength: 0x8
  },
  basePipelineIndex: {
    byteOffset: 0x88,
    byteLength: 0x4
  },
};
/** VkPipelineCacheCreateInfo **/
class VkPipelineCacheCreateInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x28);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    this._pInitialData = null;
    this.sType = 0x11;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.initialDataSize !== void 0) this.initialDataSize = opts.initialDataSize;
      if (opts.pInitialData !== void 0) this.pInitialData = opts.pInitialData;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPipelineCacheCreateInfo.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get initialDataSize() {
    return this.memoryViewBigInt64[0x3];
  }
  set initialDataSize(value) {
    
    this.memoryViewBigInt64[0x3] = BigInt(value);
  }
  get pInitialData() {
    return this._pInitialData;
  }
  set pInitialData(value) {
    if (value !== null ) {
      this._pInitialData = value;
      this.memoryViewBigInt64[0x4] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pInitialData = null;
      this.memoryViewBigInt64[0x4] = BI0;
    } 
    
  }
  
};

VkPipelineCacheCreateInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPipelineCacheCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPipelineCacheCreateInfo.byteLength = 0x28;

VkPipelineCacheCreateInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  flags: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  initialDataSize: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
  pInitialData: {
    byteOffset: 0x20,
    byteLength: 0x8
  },
};
/** VkPushConstantRange **/
class VkPushConstantRange {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0xC) / 0x4);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0xC) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0xC);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    
    
    
    if (typeof opts === "object") {
      if (opts.stageFlags !== void 0) this.stageFlags = opts.stageFlags;
      if (opts.offset !== void 0) this.offset = opts.offset;
      if (opts.size !== void 0) this.size = opts.size;
      
    }
  }
  get stageFlags() {
    return this.memoryViewInt32[0x0];
  }
  set stageFlags(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get offset() {
    return this.memoryViewUint32[0x1];
  }
  set offset(value) {
    
    this.memoryViewUint32[0x1] = value;
  }
  get size() {
    return this.memoryViewUint32[0x2];
  }
  set size(value) {
    
    this.memoryViewUint32[0x2] = value;
  }
  
};

VkPushConstantRange.prototype.flush = function flush() {
  
  return true;
};

VkPushConstantRange.prototype.reflect = function reflect(memoryAddress) {
  
};

VkPushConstantRange.byteLength = 0xC;

VkPushConstantRange.memoryLayout = {
  stageFlags: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  offset: {
    byteOffset: 0x4,
    byteLength: 0x4
  },
  size: {
    byteOffset: 0x8,
    byteLength: 0x4
  },
};
/** VkPipelineLayoutCreateInfo **/
class VkPipelineLayoutCreateInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x30) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x30) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x30) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x30);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    this._pSetLayouts = null;
    this._pSetLayoutsNative = null;
    
    this._pPushConstantRanges = null;
    this._pPushConstantRangesNative = null;
    this.sType = 0x1E;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.setLayoutCount !== void 0) this.setLayoutCount = opts.setLayoutCount;
      if (opts.pSetLayouts !== void 0) this.pSetLayouts = opts.pSetLayouts;
      if (opts.pushConstantRangeCount !== void 0) this.pushConstantRangeCount = opts.pushConstantRangeCount;
      if (opts.pPushConstantRanges !== void 0) this.pPushConstantRanges = opts.pPushConstantRanges;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPipelineLayoutCreateInfo.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get setLayoutCount() {
    return this.memoryViewUint32[0x5];
  }
  set setLayoutCount(value) {
    
    this.memoryViewUint32[0x5] = value;
  }
  get pSetLayouts() {
    return this._pSetLayouts;
  }
  set pSetLayouts(value) {
    if (value !== null ) {
      this._pSetLayouts = value;
    } else if (value === null) {
      this._pSetLayouts = null;
    } 
    
  }
  get pushConstantRangeCount() {
    return this.memoryViewUint32[0x8];
  }
  set pushConstantRangeCount(value) {
    
    this.memoryViewUint32[0x8] = value;
  }
  get pPushConstantRanges() {
    return this._pPushConstantRanges;
  }
  set pPushConstantRanges(value) {
    if (value !== null ) {
      this._pPushConstantRanges = value;
    } else if (value === null) {
      this._pPushConstantRanges = null;
    } 
    
  }
  
};

VkPipelineLayoutCreateInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pSetLayouts !== null) {
    let array = this._pSetLayouts;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pSetLayoutsNative = nativeArray;
    this.memoryViewBigInt64[0x3] = nativeArray.address;
  }
  
  
  if (this._pPushConstantRanges !== null) {
    let array = this._pPushConstantRanges;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pPushConstantRangesNative = nativeArray;
    this.memoryViewBigInt64[0x5] = nativeArray.address;
  }
  
  return true;
};

VkPipelineLayoutCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
  
  
};

VkPipelineLayoutCreateInfo.byteLength = 0x30;

VkPipelineLayoutCreateInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  flags: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  setLayoutCount: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  pSetLayouts: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
  pushConstantRangeCount: {
    byteOffset: 0x20,
    byteLength: 0x4
  },
  pPushConstantRanges: {
    byteOffset: 0x28,
    byteLength: 0x8
  },
};
/** VkSamplerCreateInfo **/
class VkSamplerCreateInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x50) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x50) / 0x8);
      this.memoryViewFloat32 = new Float32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x50) / 0x4);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x50) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x50);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewFloat32 = new Float32Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    this.sType = 0x1F;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.magFilter !== void 0) this.magFilter = opts.magFilter;
      if (opts.minFilter !== void 0) this.minFilter = opts.minFilter;
      if (opts.mipmapMode !== void 0) this.mipmapMode = opts.mipmapMode;
      if (opts.addressModeU !== void 0) this.addressModeU = opts.addressModeU;
      if (opts.addressModeV !== void 0) this.addressModeV = opts.addressModeV;
      if (opts.addressModeW !== void 0) this.addressModeW = opts.addressModeW;
      if (opts.mipLodBias !== void 0) this.mipLodBias = opts.mipLodBias;
      if (opts.anisotropyEnable !== void 0) this.anisotropyEnable = opts.anisotropyEnable;
      if (opts.maxAnisotropy !== void 0) this.maxAnisotropy = opts.maxAnisotropy;
      if (opts.compareEnable !== void 0) this.compareEnable = opts.compareEnable;
      if (opts.compareOp !== void 0) this.compareOp = opts.compareOp;
      if (opts.minLod !== void 0) this.minLod = opts.minLod;
      if (opts.maxLod !== void 0) this.maxLod = opts.maxLod;
      if (opts.borderColor !== void 0) this.borderColor = opts.borderColor;
      if (opts.unnormalizedCoordinates !== void 0) this.unnormalizedCoordinates = opts.unnormalizedCoordinates;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null ) {
      let {sType} = value;
      
      switch (sType) {
          
        case 0x3B9D2B61:
        case 0x3B9CC5D1:
          break;
        default:
          throw new TypeError("Invalid type for 'VkSamplerCreateInfo.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get magFilter() {
    return this.memoryViewInt32[0x5];
  }
  set magFilter(value) {
    
    this.memoryViewInt32[0x5] = value;
  }
  get minFilter() {
    return this.memoryViewInt32[0x6];
  }
  set minFilter(value) {
    
    this.memoryViewInt32[0x6] = value;
  }
  get mipmapMode() {
    return this.memoryViewInt32[0x7];
  }
  set mipmapMode(value) {
    
    this.memoryViewInt32[0x7] = value;
  }
  get addressModeU() {
    return this.memoryViewInt32[0x8];
  }
  set addressModeU(value) {
    
    this.memoryViewInt32[0x8] = value;
  }
  get addressModeV() {
    return this.memoryViewInt32[0x9];
  }
  set addressModeV(value) {
    
    this.memoryViewInt32[0x9] = value;
  }
  get addressModeW() {
    return this.memoryViewInt32[0xA];
  }
  set addressModeW(value) {
    
    this.memoryViewInt32[0xA] = value;
  }
  get mipLodBias() {
    return this.memoryViewFloat32[0xB];
  }
  set mipLodBias(value) {
    
    this.memoryViewFloat32[0xB] = value;
  }
  get anisotropyEnable() {
    return this.memoryViewUint32[0xC] !== 0;
  }
  set anisotropyEnable(value) {
    this.memoryViewUint32[0xC] = value | 0;
  }
  get maxAnisotropy() {
    return this.memoryViewFloat32[0xD];
  }
  set maxAnisotropy(value) {
    
    this.memoryViewFloat32[0xD] = value;
  }
  get compareEnable() {
    return this.memoryViewUint32[0xE] !== 0;
  }
  set compareEnable(value) {
    this.memoryViewUint32[0xE] = value | 0;
  }
  get compareOp() {
    return this.memoryViewInt32[0xF];
  }
  set compareOp(value) {
    
    this.memoryViewInt32[0xF] = value;
  }
  get minLod() {
    return this.memoryViewFloat32[0x10];
  }
  set minLod(value) {
    
    this.memoryViewFloat32[0x10] = value;
  }
  get maxLod() {
    return this.memoryViewFloat32[0x11];
  }
  set maxLod(value) {
    
    this.memoryViewFloat32[0x11] = value;
  }
  get borderColor() {
    return this.memoryViewInt32[0x12];
  }
  set borderColor(value) {
    
    this.memoryViewInt32[0x12] = value;
  }
  get unnormalizedCoordinates() {
    return this.memoryViewUint32[0x13] !== 0;
  }
  set unnormalizedCoordinates(value) {
    this.memoryViewUint32[0x13] = value | 0;
  }
  
};

VkSamplerCreateInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkSamplerCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkSamplerCreateInfo.byteLength = 0x50;

VkSamplerCreateInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  flags: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  magFilter: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  minFilter: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
  mipmapMode: {
    byteOffset: 0x1C,
    byteLength: 0x4
  },
  addressModeU: {
    byteOffset: 0x20,
    byteLength: 0x4
  },
  addressModeV: {
    byteOffset: 0x24,
    byteLength: 0x4
  },
  addressModeW: {
    byteOffset: 0x28,
    byteLength: 0x4
  },
  mipLodBias: {
    byteOffset: 0x2C,
    byteLength: 0x4
  },
  anisotropyEnable: {
    byteOffset: 0x30,
    byteLength: 0x4
  },
  maxAnisotropy: {
    byteOffset: 0x34,
    byteLength: 0x4
  },
  compareEnable: {
    byteOffset: 0x38,
    byteLength: 0x4
  },
  compareOp: {
    byteOffset: 0x3C,
    byteLength: 0x4
  },
  minLod: {
    byteOffset: 0x40,
    byteLength: 0x4
  },
  maxLod: {
    byteOffset: 0x44,
    byteLength: 0x4
  },
  borderColor: {
    byteOffset: 0x48,
    byteLength: 0x4
  },
  unnormalizedCoordinates: {
    byteOffset: 0x4C,
    byteLength: 0x4
  },
};
/** VkCommandPoolCreateInfo **/
class VkCommandPoolCreateInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    this.sType = 0x27;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.queueFamilyIndex !== void 0) this.queueFamilyIndex = opts.queueFamilyIndex;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkCommandPoolCreateInfo.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get queueFamilyIndex() {
    return this.memoryViewUint32[0x5];
  }
  set queueFamilyIndex(value) {
    
    this.memoryViewUint32[0x5] = value;
  }
  
};

VkCommandPoolCreateInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkCommandPoolCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkCommandPoolCreateInfo.byteLength = 0x18;

VkCommandPoolCreateInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  flags: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  queueFamilyIndex: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
};
/** VkCommandBufferAllocateInfo **/
class VkCommandBufferAllocateInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._commandPool = null;
    
    
    this.sType = 0x28;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.commandPool !== void 0) this.commandPool = opts.commandPool;
      if (opts.level !== void 0) this.level = opts.level;
      if (opts.commandBufferCount !== void 0) this.commandBufferCount = opts.commandBufferCount;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkCommandBufferAllocateInfo.pNext' isn't allowed to be filled");
  }
  get commandPool() {
    return this._commandPool;
  }
  set commandPool(value) {
    if (value !== null ) {
      
      this._commandPool = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._commandPool = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } 
    
  }
  get level() {
    return this.memoryViewInt32[0x6];
  }
  set level(value) {
    
    this.memoryViewInt32[0x6] = value;
  }
  get commandBufferCount() {
    return this.memoryViewUint32[0x7];
  }
  set commandBufferCount(value) {
    
    this.memoryViewUint32[0x7] = value;
  }
  
};

VkCommandBufferAllocateInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkCommandBufferAllocateInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkCommandBufferAllocateInfo.byteLength = 0x20;

VkCommandBufferAllocateInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  commandPool: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
  level: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
  commandBufferCount: {
    byteOffset: 0x1C,
    byteLength: 0x4
  },
};
/** VkCommandBufferInheritanceInfo **/
class VkCommandBufferInheritanceInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x38) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x38) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x38) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x38);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._renderPass = null;
    
    this._framebuffer = null;
    
    
    
    this.sType = 0x29;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.renderPass !== void 0) this.renderPass = opts.renderPass;
      if (opts.subpass !== void 0) this.subpass = opts.subpass;
      if (opts.framebuffer !== void 0) this.framebuffer = opts.framebuffer;
      if (opts.occlusionQueryEnable !== void 0) this.occlusionQueryEnable = opts.occlusionQueryEnable;
      if (opts.queryFlags !== void 0) this.queryFlags = opts.queryFlags;
      if (opts.pipelineStatistics !== void 0) this.pipelineStatistics = opts.pipelineStatistics;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null ) {
      let {sType} = value;
      
      switch (sType) {
          
        case 0x3B9C0668:
          break;
        default:
          throw new TypeError("Invalid type for 'VkCommandBufferInheritanceInfo.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  get renderPass() {
    return this._renderPass;
  }
  set renderPass(value) {
    if (value !== null ) {
      
      this._renderPass = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._renderPass = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } 
    
  }
  get subpass() {
    return this.memoryViewUint32[0x6];
  }
  set subpass(value) {
    
    this.memoryViewUint32[0x6] = value;
  }
  get framebuffer() {
    return this._framebuffer;
  }
  set framebuffer(value) {
    if (value !== null ) {
      
      this._framebuffer = value;
      
      this.memoryViewBigInt64[0x4] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._framebuffer = null;
      this.memoryViewBigInt64[0x4] = BI0;
    } 
    
  }
  get occlusionQueryEnable() {
    return this.memoryViewUint32[0xA] !== 0;
  }
  set occlusionQueryEnable(value) {
    this.memoryViewUint32[0xA] = value | 0;
  }
  get queryFlags() {
    return this.memoryViewInt32[0xB];
  }
  set queryFlags(value) {
    
    this.memoryViewInt32[0xB] = value;
  }
  get pipelineStatistics() {
    return this.memoryViewInt32[0xC];
  }
  set pipelineStatistics(value) {
    
    this.memoryViewInt32[0xC] = value;
  }
  
};

VkCommandBufferInheritanceInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkCommandBufferInheritanceInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkCommandBufferInheritanceInfo.byteLength = 0x38;

VkCommandBufferInheritanceInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  renderPass: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
  subpass: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
  framebuffer: {
    byteOffset: 0x20,
    byteLength: 0x8
  },
  occlusionQueryEnable: {
    byteOffset: 0x28,
    byteLength: 0x4
  },
  queryFlags: {
    byteOffset: 0x2C,
    byteLength: 0x4
  },
  pipelineStatistics: {
    byteOffset: 0x30,
    byteLength: 0x4
  },
};
/** VkCommandBufferBeginInfo **/
class VkCommandBufferBeginInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this._pInheritanceInfo = null;
    this.sType = 0x2A;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.pInheritanceInfo !== void 0) this.pInheritanceInfo = opts.pInheritanceInfo;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null ) {
      let {sType} = value;
      
      switch (sType) {
          
        case 0x3B9BB464:
          break;
        default:
          throw new TypeError("Invalid type for 'VkCommandBufferBeginInfo.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get pInheritanceInfo() {
    return this._pInheritanceInfo;
  }
  set pInheritanceInfo(value) {
    if (value !== null ) {
      value.flush();
      this._pInheritanceInfo = value;
      this.memoryViewBigInt64[0x3] = value.memoryAddress;
      
    } else if (value === null) {
      this._pInheritanceInfo = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } 
    
  }
  
};

VkCommandBufferBeginInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkCommandBufferBeginInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkCommandBufferBeginInfo.byteLength = 0x20;

VkCommandBufferBeginInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  flags: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  pInheritanceInfo: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
};
/** VkRenderPassBeginInfo **/
class VkRenderPassBeginInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x40) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x40) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x40) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x40);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._renderPass = null;
    this._framebuffer = null;
    this._renderArea = new VkRect2D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x20 });
    
    this._pClearValues = null;
    this._pClearValuesNative = null;
    this.sType = 0x2B;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.renderPass !== void 0) this.renderPass = opts.renderPass;
      if (opts.framebuffer !== void 0) this.framebuffer = opts.framebuffer;
      if (opts.renderArea !== void 0) this.renderArea = opts.renderArea;
      if (opts.clearValueCount !== void 0) this.clearValueCount = opts.clearValueCount;
      if (opts.pClearValues !== void 0) this.pClearValues = opts.pClearValues;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null ) {
      let {sType} = value;
      
      switch (sType) {
          
        case 0x3B9BB463:
        case 0x3B9CF899:
          break;
        default:
          throw new TypeError("Invalid type for 'VkRenderPassBeginInfo.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  get renderPass() {
    return this._renderPass;
  }
  set renderPass(value) {
    if (value !== null ) {
      
      this._renderPass = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._renderPass = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } 
    
  }
  get framebuffer() {
    return this._framebuffer;
  }
  set framebuffer(value) {
    if (value !== null ) {
      
      this._framebuffer = value;
      
      this.memoryViewBigInt64[0x3] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._framebuffer = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } 
    
  }
  get renderArea() {
    return this._renderArea;
  }
  set renderArea(value) {
    if (value !== null ) {
      value.flush();
      this._renderArea = value;
      
      
    } else if (value === null) {
      this._renderArea = null;
      
    } 
    
  }
  get clearValueCount() {
    return this.memoryViewUint32[0xC];
  }
  set clearValueCount(value) {
    
    this.memoryViewUint32[0xC] = value;
  }
  get pClearValues() {
    return this._pClearValues;
  }
  set pClearValues(value) {
    if (value !== null ) {
      this._pClearValues = value;
    } else if (value === null) {
      this._pClearValues = null;
    } 
    
  }
  
};

VkRenderPassBeginInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._renderArea !== null) {
    this._renderArea.flush();
    if (this.memoryBuffer !== this._renderArea.memoryBuffer) {
      let srcView = new Uint8Array(this._renderArea.memoryBuffer);
      let dstView = new Uint8Array(this.memoryBuffer);
      dstView.set(srcView, 0x20);
      
    }
  }
  
  
  if (this._pClearValues !== null) {
    let array = this._pClearValues;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pClearValuesNative = nativeArray;
    this.memoryViewBigInt64[0x7] = nativeArray.address;
  }
  
  return true;
};

VkRenderPassBeginInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
  
  
};

VkRenderPassBeginInfo.byteLength = 0x40;

VkRenderPassBeginInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  renderPass: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
  framebuffer: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
  renderArea: {
    byteOffset: 0x20,
    byteLength: 0x10
  },
  clearValueCount: {
    byteOffset: 0x30,
    byteLength: 0x4
  },
  pClearValues: {
    byteOffset: 0x38,
    byteLength: 0x8
  },
};
/** VkClearDepthStencilValue **/
class VkClearDepthStencilValue {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewFloat32 = new Float32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x8) / 0x4);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x8) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x8);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewFloat32 = new Float32Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    
    
    if (typeof opts === "object") {
      if (opts.depth !== void 0) this.depth = opts.depth;
      if (opts.stencil !== void 0) this.stencil = opts.stencil;
      
    }
  }
  get depth() {
    return this.memoryViewFloat32[0x0];
  }
  set depth(value) {
    
    this.memoryViewFloat32[0x0] = value;
  }
  get stencil() {
    return this.memoryViewUint32[0x1];
  }
  set stencil(value) {
    
    this.memoryViewUint32[0x1] = value;
  }
  
};

VkClearDepthStencilValue.prototype.flush = function flush() {
  
  return true;
};

VkClearDepthStencilValue.prototype.reflect = function reflect(memoryAddress) {
  
};

VkClearDepthStencilValue.byteLength = 0x8;

VkClearDepthStencilValue.memoryLayout = {
  depth: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  stencil: {
    byteOffset: 0x4,
    byteLength: 0x4
  },
};
/** VkClearAttachment **/
class VkClearAttachment {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    
    this._clearValue = new VkClearValue({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x8 });
    
    if (typeof opts === "object") {
      if (opts.aspectMask !== void 0) this.aspectMask = opts.aspectMask;
      if (opts.colorAttachment !== void 0) this.colorAttachment = opts.colorAttachment;
      if (opts.clearValue !== void 0) this.clearValue = opts.clearValue;
      
    }
  }
  get aspectMask() {
    return this.memoryViewInt32[0x0];
  }
  set aspectMask(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get colorAttachment() {
    return this.memoryViewUint32[0x1];
  }
  set colorAttachment(value) {
    
    this.memoryViewUint32[0x1] = value;
  }
  get clearValue() {
    return this._clearValue;
  }
  set clearValue(value) {
    if (value !== null ) {
      value.flush();
      this._clearValue = value;
      
      
    } else if (value === null) {
      this._clearValue = null;
      
    } 
    
  }
  
};

VkClearAttachment.prototype.flush = function flush() {
  
  
  if (this._clearValue !== null) {
    this._clearValue.flush();
    if (this.memoryBuffer !== this._clearValue.memoryBuffer) {
      let srcView = new Uint8Array(this._clearValue.memoryBuffer);
      let dstView = new Uint8Array(this.memoryBuffer);
      dstView.set(srcView, 0x8);
      
    }
  }
  
  return true;
};

VkClearAttachment.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkClearAttachment.byteLength = 0x18;

VkClearAttachment.memoryLayout = {
  aspectMask: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  colorAttachment: {
    byteOffset: 0x4,
    byteLength: 0x4
  },
  clearValue: {
    byteOffset: 0x8,
    byteLength: 0x10
  },
};
/** VkAttachmentDescription **/
class VkAttachmentDescription {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x24) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x24);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);

    }
    
    
    
    
    
    
    
    
    
    
    if (typeof opts === "object") {
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.format !== void 0) this.format = opts.format;
      if (opts.samples !== void 0) this.samples = opts.samples;
      if (opts.loadOp !== void 0) this.loadOp = opts.loadOp;
      if (opts.storeOp !== void 0) this.storeOp = opts.storeOp;
      if (opts.stencilLoadOp !== void 0) this.stencilLoadOp = opts.stencilLoadOp;
      if (opts.stencilStoreOp !== void 0) this.stencilStoreOp = opts.stencilStoreOp;
      if (opts.initialLayout !== void 0) this.initialLayout = opts.initialLayout;
      if (opts.finalLayout !== void 0) this.finalLayout = opts.finalLayout;
      
    }
  }
  get flags() {
    return this.memoryViewInt32[0x0];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get format() {
    return this.memoryViewInt32[0x1];
  }
  set format(value) {
    
    this.memoryViewInt32[0x1] = value;
  }
  get samples() {
    return this.memoryViewInt32[0x2];
  }
  set samples(value) {
    
    this.memoryViewInt32[0x2] = value;
  }
  get loadOp() {
    return this.memoryViewInt32[0x3];
  }
  set loadOp(value) {
    
    this.memoryViewInt32[0x3] = value;
  }
  get storeOp() {
    return this.memoryViewInt32[0x4];
  }
  set storeOp(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get stencilLoadOp() {
    return this.memoryViewInt32[0x5];
  }
  set stencilLoadOp(value) {
    
    this.memoryViewInt32[0x5] = value;
  }
  get stencilStoreOp() {
    return this.memoryViewInt32[0x6];
  }
  set stencilStoreOp(value) {
    
    this.memoryViewInt32[0x6] = value;
  }
  get initialLayout() {
    return this.memoryViewInt32[0x7];
  }
  set initialLayout(value) {
    
    this.memoryViewInt32[0x7] = value;
  }
  get finalLayout() {
    return this.memoryViewInt32[0x8];
  }
  set finalLayout(value) {
    
    this.memoryViewInt32[0x8] = value;
  }
  
};

VkAttachmentDescription.prototype.flush = function flush() {
  
  return true;
};

VkAttachmentDescription.prototype.reflect = function reflect(memoryAddress) {
  
};

VkAttachmentDescription.byteLength = 0x24;

VkAttachmentDescription.memoryLayout = {
  flags: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  format: {
    byteOffset: 0x4,
    byteLength: 0x4
  },
  samples: {
    byteOffset: 0x8,
    byteLength: 0x4
  },
  loadOp: {
    byteOffset: 0xC,
    byteLength: 0x4
  },
  storeOp: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  stencilLoadOp: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  stencilStoreOp: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
  initialLayout: {
    byteOffset: 0x1C,
    byteLength: 0x4
  },
  finalLayout: {
    byteOffset: 0x20,
    byteLength: 0x4
  },
};
/** VkAttachmentReference **/
class VkAttachmentReference {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x8) / 0x4);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x8) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x8);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);

    }
    
    
    
    if (typeof opts === "object") {
      if (opts.attachment !== void 0) this.attachment = opts.attachment;
      if (opts.layout !== void 0) this.layout = opts.layout;
      
    }
  }
  get attachment() {
    return this.memoryViewUint32[0x0];
  }
  set attachment(value) {
    
    this.memoryViewUint32[0x0] = value;
  }
  get layout() {
    return this.memoryViewInt32[0x1];
  }
  set layout(value) {
    
    this.memoryViewInt32[0x1] = value;
  }
  
};

VkAttachmentReference.prototype.flush = function flush() {
  
  return true;
};

VkAttachmentReference.prototype.reflect = function reflect(memoryAddress) {
  
};

VkAttachmentReference.byteLength = 0x8;

VkAttachmentReference.memoryLayout = {
  attachment: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  layout: {
    byteOffset: 0x4,
    byteLength: 0x4
  },
};
/** VkSubpassDescription **/
class VkSubpassDescription {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x48) / 0x4);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x48) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x48) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x48);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    
    
    this._pInputAttachments = null;
    this._pInputAttachmentsNative = null;
    
    this._pColorAttachments = null;
    this._pColorAttachmentsNative = null;
    this._pResolveAttachments = null;
    this._pResolveAttachmentsNative = null;
    this._pDepthStencilAttachment = null;
    
    this._pPreserveAttachments = null;
    
    if (typeof opts === "object") {
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.pipelineBindPoint !== void 0) this.pipelineBindPoint = opts.pipelineBindPoint;
      if (opts.inputAttachmentCount !== void 0) this.inputAttachmentCount = opts.inputAttachmentCount;
      if (opts.pInputAttachments !== void 0) this.pInputAttachments = opts.pInputAttachments;
      if (opts.colorAttachmentCount !== void 0) this.colorAttachmentCount = opts.colorAttachmentCount;
      if (opts.pColorAttachments !== void 0) this.pColorAttachments = opts.pColorAttachments;
      if (opts.pResolveAttachments !== void 0) this.pResolveAttachments = opts.pResolveAttachments;
      if (opts.pDepthStencilAttachment !== void 0) this.pDepthStencilAttachment = opts.pDepthStencilAttachment;
      if (opts.preserveAttachmentCount !== void 0) this.preserveAttachmentCount = opts.preserveAttachmentCount;
      if (opts.pPreserveAttachments !== void 0) this.pPreserveAttachments = opts.pPreserveAttachments;
      
    }
  }
  get flags() {
    return this.memoryViewInt32[0x0];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pipelineBindPoint() {
    return this.memoryViewInt32[0x1];
  }
  set pipelineBindPoint(value) {
    
    this.memoryViewInt32[0x1] = value;
  }
  get inputAttachmentCount() {
    return this.memoryViewUint32[0x2];
  }
  set inputAttachmentCount(value) {
    
    this.memoryViewUint32[0x2] = value;
  }
  get pInputAttachments() {
    return this._pInputAttachments;
  }
  set pInputAttachments(value) {
    if (value !== null ) {
      this._pInputAttachments = value;
    } else if (value === null) {
      this._pInputAttachments = null;
    } 
    
  }
  get colorAttachmentCount() {
    return this.memoryViewUint32[0x6];
  }
  set colorAttachmentCount(value) {
    
    this.memoryViewUint32[0x6] = value;
  }
  get pColorAttachments() {
    return this._pColorAttachments;
  }
  set pColorAttachments(value) {
    if (value !== null ) {
      this._pColorAttachments = value;
    } else if (value === null) {
      this._pColorAttachments = null;
    } 
    
  }
  get pResolveAttachments() {
    return this._pResolveAttachments;
  }
  set pResolveAttachments(value) {
    if (value !== null ) {
      this._pResolveAttachments = value;
    } else if (value === null) {
      this._pResolveAttachments = null;
    } 
    
  }
  get pDepthStencilAttachment() {
    return this._pDepthStencilAttachment;
  }
  set pDepthStencilAttachment(value) {
    if (value !== null ) {
      value.flush();
      this._pDepthStencilAttachment = value;
      this.memoryViewBigInt64[0x6] = value.memoryAddress;
      
    } else if (value === null) {
      this._pDepthStencilAttachment = null;
      this.memoryViewBigInt64[0x6] = BI0;
    } 
    
  }
  get preserveAttachmentCount() {
    return this.memoryViewUint32[0xE];
  }
  set preserveAttachmentCount(value) {
    
    this.memoryViewUint32[0xE] = value;
  }
  get pPreserveAttachments() {
    return this._pPreserveAttachments;
  }
  set pPreserveAttachments(value) {
    if (value !== null ) {
      this._pPreserveAttachments = value;
      this.memoryViewBigInt64[0x8] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pPreserveAttachments = null;
      this.memoryViewBigInt64[0x8] = BI0;
    } 
    
  }
  
};

VkSubpassDescription.prototype.flush = function flush() {
  
  
  if (this._pInputAttachments !== null) {
    let array = this._pInputAttachments;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pInputAttachmentsNative = nativeArray;
    this.memoryViewBigInt64[0x2] = nativeArray.address;
  }
  
  
  if (this._pColorAttachments !== null) {
    let array = this._pColorAttachments;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pColorAttachmentsNative = nativeArray;
    this.memoryViewBigInt64[0x4] = nativeArray.address;
  }
  
  
  if (this._pResolveAttachments !== null) {
    let array = this._pResolveAttachments;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pResolveAttachmentsNative = nativeArray;
    this.memoryViewBigInt64[0x5] = nativeArray.address;
  }
  
  return true;
};

VkSubpassDescription.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
  
  
};

VkSubpassDescription.byteLength = 0x48;

VkSubpassDescription.memoryLayout = {
  flags: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pipelineBindPoint: {
    byteOffset: 0x4,
    byteLength: 0x4
  },
  inputAttachmentCount: {
    byteOffset: 0x8,
    byteLength: 0x4
  },
  pInputAttachments: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
  colorAttachmentCount: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
  pColorAttachments: {
    byteOffset: 0x20,
    byteLength: 0x8
  },
  pResolveAttachments: {
    byteOffset: 0x28,
    byteLength: 0x8
  },
  pDepthStencilAttachment: {
    byteOffset: 0x30,
    byteLength: 0x8
  },
  preserveAttachmentCount: {
    byteOffset: 0x38,
    byteLength: 0x4
  },
  pPreserveAttachments: {
    byteOffset: 0x40,
    byteLength: 0x8
  },
};
/** VkSubpassDependency **/
class VkSubpassDependency {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x1C) / 0x4);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x1C) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x1C);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);

    }
    
    
    
    
    
    
    
    
    if (typeof opts === "object") {
      if (opts.srcSubpass !== void 0) this.srcSubpass = opts.srcSubpass;
      if (opts.dstSubpass !== void 0) this.dstSubpass = opts.dstSubpass;
      if (opts.srcStageMask !== void 0) this.srcStageMask = opts.srcStageMask;
      if (opts.dstStageMask !== void 0) this.dstStageMask = opts.dstStageMask;
      if (opts.srcAccessMask !== void 0) this.srcAccessMask = opts.srcAccessMask;
      if (opts.dstAccessMask !== void 0) this.dstAccessMask = opts.dstAccessMask;
      if (opts.dependencyFlags !== void 0) this.dependencyFlags = opts.dependencyFlags;
      
    }
  }
  get srcSubpass() {
    return this.memoryViewUint32[0x0];
  }
  set srcSubpass(value) {
    
    this.memoryViewUint32[0x0] = value;
  }
  get dstSubpass() {
    return this.memoryViewUint32[0x1];
  }
  set dstSubpass(value) {
    
    this.memoryViewUint32[0x1] = value;
  }
  get srcStageMask() {
    return this.memoryViewInt32[0x2];
  }
  set srcStageMask(value) {
    
    this.memoryViewInt32[0x2] = value;
  }
  get dstStageMask() {
    return this.memoryViewInt32[0x3];
  }
  set dstStageMask(value) {
    
    this.memoryViewInt32[0x3] = value;
  }
  get srcAccessMask() {
    return this.memoryViewInt32[0x4];
  }
  set srcAccessMask(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get dstAccessMask() {
    return this.memoryViewInt32[0x5];
  }
  set dstAccessMask(value) {
    
    this.memoryViewInt32[0x5] = value;
  }
  get dependencyFlags() {
    return this.memoryViewInt32[0x6];
  }
  set dependencyFlags(value) {
    
    this.memoryViewInt32[0x6] = value;
  }
  
};

VkSubpassDependency.prototype.flush = function flush() {
  
  return true;
};

VkSubpassDependency.prototype.reflect = function reflect(memoryAddress) {
  
};

VkSubpassDependency.byteLength = 0x1C;

VkSubpassDependency.memoryLayout = {
  srcSubpass: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  dstSubpass: {
    byteOffset: 0x4,
    byteLength: 0x4
  },
  srcStageMask: {
    byteOffset: 0x8,
    byteLength: 0x4
  },
  dstStageMask: {
    byteOffset: 0xC,
    byteLength: 0x4
  },
  srcAccessMask: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  dstAccessMask: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  dependencyFlags: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
};
/** VkRenderPassCreateInfo **/
class VkRenderPassCreateInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x40) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x40) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x40) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x40);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    this._pAttachments = null;
    this._pAttachmentsNative = null;
    
    this._pSubpasses = null;
    this._pSubpassesNative = null;
    
    this._pDependencies = null;
    this._pDependenciesNative = null;
    this.sType = 0x26;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.attachmentCount !== void 0) this.attachmentCount = opts.attachmentCount;
      if (opts.pAttachments !== void 0) this.pAttachments = opts.pAttachments;
      if (opts.subpassCount !== void 0) this.subpassCount = opts.subpassCount;
      if (opts.pSubpasses !== void 0) this.pSubpasses = opts.pSubpasses;
      if (opts.dependencyCount !== void 0) this.dependencyCount = opts.dependencyCount;
      if (opts.pDependencies !== void 0) this.pDependencies = opts.pDependencies;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null ) {
      let {sType} = value;
      
      switch (sType) {
          
        case 0x3B9B9908:
        case 0x3B9C9309:
        case 0x3B9E1D92:
          break;
        default:
          throw new TypeError("Invalid type for 'VkRenderPassCreateInfo.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get attachmentCount() {
    return this.memoryViewUint32[0x5];
  }
  set attachmentCount(value) {
    
    this.memoryViewUint32[0x5] = value;
  }
  get pAttachments() {
    return this._pAttachments;
  }
  set pAttachments(value) {
    if (value !== null ) {
      this._pAttachments = value;
    } else if (value === null) {
      this._pAttachments = null;
    } 
    
  }
  get subpassCount() {
    return this.memoryViewUint32[0x8];
  }
  set subpassCount(value) {
    
    this.memoryViewUint32[0x8] = value;
  }
  get pSubpasses() {
    return this._pSubpasses;
  }
  set pSubpasses(value) {
    if (value !== null ) {
      this._pSubpasses = value;
    } else if (value === null) {
      this._pSubpasses = null;
    } 
    
  }
  get dependencyCount() {
    return this.memoryViewUint32[0xC];
  }
  set dependencyCount(value) {
    
    this.memoryViewUint32[0xC] = value;
  }
  get pDependencies() {
    return this._pDependencies;
  }
  set pDependencies(value) {
    if (value !== null ) {
      this._pDependencies = value;
    } else if (value === null) {
      this._pDependencies = null;
    } 
    
  }
  
};

VkRenderPassCreateInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pAttachments !== null) {
    let array = this._pAttachments;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pAttachmentsNative = nativeArray;
    this.memoryViewBigInt64[0x3] = nativeArray.address;
  }
  
  
  if (this._pSubpasses !== null) {
    let array = this._pSubpasses;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pSubpassesNative = nativeArray;
    this.memoryViewBigInt64[0x5] = nativeArray.address;
  }
  
  
  if (this._pDependencies !== null) {
    let array = this._pDependencies;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pDependenciesNative = nativeArray;
    this.memoryViewBigInt64[0x7] = nativeArray.address;
  }
  
  return true;
};

VkRenderPassCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
  
  
  
  
};

VkRenderPassCreateInfo.byteLength = 0x40;

VkRenderPassCreateInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  flags: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  attachmentCount: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  pAttachments: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
  subpassCount: {
    byteOffset: 0x20,
    byteLength: 0x4
  },
  pSubpasses: {
    byteOffset: 0x28,
    byteLength: 0x8
  },
  dependencyCount: {
    byteOffset: 0x30,
    byteLength: 0x4
  },
  pDependencies: {
    byteOffset: 0x38,
    byteLength: 0x8
  },
};
/** VkEventCreateInfo **/
class VkEventCreateInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0xA;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkEventCreateInfo.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkEventCreateInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkEventCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkEventCreateInfo.byteLength = 0x18;

VkEventCreateInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  flags: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkFenceCreateInfo **/
class VkFenceCreateInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x8;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null ) {
      let {sType} = value;
      
      switch (sType) {
          
        case 0x3B9C8368:
        case 0x3B9C8751:
          break;
        default:
          throw new TypeError("Invalid type for 'VkFenceCreateInfo.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkFenceCreateInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkFenceCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkFenceCreateInfo.byteLength = 0x18;

VkFenceCreateInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  flags: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceFeatures **/
class VkPhysicalDeviceFeatures {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0xDC) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0xDC);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    if (typeof opts === "object") {
      if (opts.robustBufferAccess !== void 0) this.robustBufferAccess = opts.robustBufferAccess;
      if (opts.fullDrawIndexUint32 !== void 0) this.fullDrawIndexUint32 = opts.fullDrawIndexUint32;
      if (opts.imageCubeArray !== void 0) this.imageCubeArray = opts.imageCubeArray;
      if (opts.independentBlend !== void 0) this.independentBlend = opts.independentBlend;
      if (opts.geometryShader !== void 0) this.geometryShader = opts.geometryShader;
      if (opts.tessellationShader !== void 0) this.tessellationShader = opts.tessellationShader;
      if (opts.sampleRateShading !== void 0) this.sampleRateShading = opts.sampleRateShading;
      if (opts.dualSrcBlend !== void 0) this.dualSrcBlend = opts.dualSrcBlend;
      if (opts.logicOp !== void 0) this.logicOp = opts.logicOp;
      if (opts.multiDrawIndirect !== void 0) this.multiDrawIndirect = opts.multiDrawIndirect;
      if (opts.drawIndirectFirstInstance !== void 0) this.drawIndirectFirstInstance = opts.drawIndirectFirstInstance;
      if (opts.depthClamp !== void 0) this.depthClamp = opts.depthClamp;
      if (opts.depthBiasClamp !== void 0) this.depthBiasClamp = opts.depthBiasClamp;
      if (opts.fillModeNonSolid !== void 0) this.fillModeNonSolid = opts.fillModeNonSolid;
      if (opts.depthBounds !== void 0) this.depthBounds = opts.depthBounds;
      if (opts.wideLines !== void 0) this.wideLines = opts.wideLines;
      if (opts.largePoints !== void 0) this.largePoints = opts.largePoints;
      if (opts.alphaToOne !== void 0) this.alphaToOne = opts.alphaToOne;
      if (opts.multiViewport !== void 0) this.multiViewport = opts.multiViewport;
      if (opts.samplerAnisotropy !== void 0) this.samplerAnisotropy = opts.samplerAnisotropy;
      if (opts.textureCompressionETC2 !== void 0) this.textureCompressionETC2 = opts.textureCompressionETC2;
      if (opts.textureCompressionASTC_LDR !== void 0) this.textureCompressionASTC_LDR = opts.textureCompressionASTC_LDR;
      if (opts.textureCompressionBC !== void 0) this.textureCompressionBC = opts.textureCompressionBC;
      if (opts.occlusionQueryPrecise !== void 0) this.occlusionQueryPrecise = opts.occlusionQueryPrecise;
      if (opts.pipelineStatisticsQuery !== void 0) this.pipelineStatisticsQuery = opts.pipelineStatisticsQuery;
      if (opts.vertexPipelineStoresAndAtomics !== void 0) this.vertexPipelineStoresAndAtomics = opts.vertexPipelineStoresAndAtomics;
      if (opts.fragmentStoresAndAtomics !== void 0) this.fragmentStoresAndAtomics = opts.fragmentStoresAndAtomics;
      if (opts.shaderTessellationAndGeometryPointSize !== void 0) this.shaderTessellationAndGeometryPointSize = opts.shaderTessellationAndGeometryPointSize;
      if (opts.shaderImageGatherExtended !== void 0) this.shaderImageGatherExtended = opts.shaderImageGatherExtended;
      if (opts.shaderStorageImageExtendedFormats !== void 0) this.shaderStorageImageExtendedFormats = opts.shaderStorageImageExtendedFormats;
      if (opts.shaderStorageImageMultisample !== void 0) this.shaderStorageImageMultisample = opts.shaderStorageImageMultisample;
      if (opts.shaderStorageImageReadWithoutFormat !== void 0) this.shaderStorageImageReadWithoutFormat = opts.shaderStorageImageReadWithoutFormat;
      if (opts.shaderStorageImageWriteWithoutFormat !== void 0) this.shaderStorageImageWriteWithoutFormat = opts.shaderStorageImageWriteWithoutFormat;
      if (opts.shaderUniformBufferArrayDynamicIndexing !== void 0) this.shaderUniformBufferArrayDynamicIndexing = opts.shaderUniformBufferArrayDynamicIndexing;
      if (opts.shaderSampledImageArrayDynamicIndexing !== void 0) this.shaderSampledImageArrayDynamicIndexing = opts.shaderSampledImageArrayDynamicIndexing;
      if (opts.shaderStorageBufferArrayDynamicIndexing !== void 0) this.shaderStorageBufferArrayDynamicIndexing = opts.shaderStorageBufferArrayDynamicIndexing;
      if (opts.shaderStorageImageArrayDynamicIndexing !== void 0) this.shaderStorageImageArrayDynamicIndexing = opts.shaderStorageImageArrayDynamicIndexing;
      if (opts.shaderClipDistance !== void 0) this.shaderClipDistance = opts.shaderClipDistance;
      if (opts.shaderCullDistance !== void 0) this.shaderCullDistance = opts.shaderCullDistance;
      if (opts.shaderFloat64 !== void 0) this.shaderFloat64 = opts.shaderFloat64;
      if (opts.shaderInt64 !== void 0) this.shaderInt64 = opts.shaderInt64;
      if (opts.shaderInt16 !== void 0) this.shaderInt16 = opts.shaderInt16;
      if (opts.shaderResourceResidency !== void 0) this.shaderResourceResidency = opts.shaderResourceResidency;
      if (opts.shaderResourceMinLod !== void 0) this.shaderResourceMinLod = opts.shaderResourceMinLod;
      if (opts.sparseBinding !== void 0) this.sparseBinding = opts.sparseBinding;
      if (opts.sparseResidencyBuffer !== void 0) this.sparseResidencyBuffer = opts.sparseResidencyBuffer;
      if (opts.sparseResidencyImage2D !== void 0) this.sparseResidencyImage2D = opts.sparseResidencyImage2D;
      if (opts.sparseResidencyImage3D !== void 0) this.sparseResidencyImage3D = opts.sparseResidencyImage3D;
      if (opts.sparseResidency2Samples !== void 0) this.sparseResidency2Samples = opts.sparseResidency2Samples;
      if (opts.sparseResidency4Samples !== void 0) this.sparseResidency4Samples = opts.sparseResidency4Samples;
      if (opts.sparseResidency8Samples !== void 0) this.sparseResidency8Samples = opts.sparseResidency8Samples;
      if (opts.sparseResidency16Samples !== void 0) this.sparseResidency16Samples = opts.sparseResidency16Samples;
      if (opts.sparseResidencyAliased !== void 0) this.sparseResidencyAliased = opts.sparseResidencyAliased;
      if (opts.variableMultisampleRate !== void 0) this.variableMultisampleRate = opts.variableMultisampleRate;
      if (opts.inheritedQueries !== void 0) this.inheritedQueries = opts.inheritedQueries;
      
    }
  }
  get robustBufferAccess() {
    return this.memoryViewUint32[0x0] !== 0;
  }
  set robustBufferAccess(value) {
    this.memoryViewUint32[0x0] = value | 0;
  }
  get fullDrawIndexUint32() {
    return this.memoryViewUint32[0x1] !== 0;
  }
  set fullDrawIndexUint32(value) {
    this.memoryViewUint32[0x1] = value | 0;
  }
  get imageCubeArray() {
    return this.memoryViewUint32[0x2] !== 0;
  }
  set imageCubeArray(value) {
    this.memoryViewUint32[0x2] = value | 0;
  }
  get independentBlend() {
    return this.memoryViewUint32[0x3] !== 0;
  }
  set independentBlend(value) {
    this.memoryViewUint32[0x3] = value | 0;
  }
  get geometryShader() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set geometryShader(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  get tessellationShader() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  set tessellationShader(value) {
    this.memoryViewUint32[0x5] = value | 0;
  }
  get sampleRateShading() {
    return this.memoryViewUint32[0x6] !== 0;
  }
  set sampleRateShading(value) {
    this.memoryViewUint32[0x6] = value | 0;
  }
  get dualSrcBlend() {
    return this.memoryViewUint32[0x7] !== 0;
  }
  set dualSrcBlend(value) {
    this.memoryViewUint32[0x7] = value | 0;
  }
  get logicOp() {
    return this.memoryViewUint32[0x8] !== 0;
  }
  set logicOp(value) {
    this.memoryViewUint32[0x8] = value | 0;
  }
  get multiDrawIndirect() {
    return this.memoryViewUint32[0x9] !== 0;
  }
  set multiDrawIndirect(value) {
    this.memoryViewUint32[0x9] = value | 0;
  }
  get drawIndirectFirstInstance() {
    return this.memoryViewUint32[0xA] !== 0;
  }
  set drawIndirectFirstInstance(value) {
    this.memoryViewUint32[0xA] = value | 0;
  }
  get depthClamp() {
    return this.memoryViewUint32[0xB] !== 0;
  }
  set depthClamp(value) {
    this.memoryViewUint32[0xB] = value | 0;
  }
  get depthBiasClamp() {
    return this.memoryViewUint32[0xC] !== 0;
  }
  set depthBiasClamp(value) {
    this.memoryViewUint32[0xC] = value | 0;
  }
  get fillModeNonSolid() {
    return this.memoryViewUint32[0xD] !== 0;
  }
  set fillModeNonSolid(value) {
    this.memoryViewUint32[0xD] = value | 0;
  }
  get depthBounds() {
    return this.memoryViewUint32[0xE] !== 0;
  }
  set depthBounds(value) {
    this.memoryViewUint32[0xE] = value | 0;
  }
  get wideLines() {
    return this.memoryViewUint32[0xF] !== 0;
  }
  set wideLines(value) {
    this.memoryViewUint32[0xF] = value | 0;
  }
  get largePoints() {
    return this.memoryViewUint32[0x10] !== 0;
  }
  set largePoints(value) {
    this.memoryViewUint32[0x10] = value | 0;
  }
  get alphaToOne() {
    return this.memoryViewUint32[0x11] !== 0;
  }
  set alphaToOne(value) {
    this.memoryViewUint32[0x11] = value | 0;
  }
  get multiViewport() {
    return this.memoryViewUint32[0x12] !== 0;
  }
  set multiViewport(value) {
    this.memoryViewUint32[0x12] = value | 0;
  }
  get samplerAnisotropy() {
    return this.memoryViewUint32[0x13] !== 0;
  }
  set samplerAnisotropy(value) {
    this.memoryViewUint32[0x13] = value | 0;
  }
  get textureCompressionETC2() {
    return this.memoryViewUint32[0x14] !== 0;
  }
  set textureCompressionETC2(value) {
    this.memoryViewUint32[0x14] = value | 0;
  }
  get textureCompressionASTC_LDR() {
    return this.memoryViewUint32[0x15] !== 0;
  }
  set textureCompressionASTC_LDR(value) {
    this.memoryViewUint32[0x15] = value | 0;
  }
  get textureCompressionBC() {
    return this.memoryViewUint32[0x16] !== 0;
  }
  set textureCompressionBC(value) {
    this.memoryViewUint32[0x16] = value | 0;
  }
  get occlusionQueryPrecise() {
    return this.memoryViewUint32[0x17] !== 0;
  }
  set occlusionQueryPrecise(value) {
    this.memoryViewUint32[0x17] = value | 0;
  }
  get pipelineStatisticsQuery() {
    return this.memoryViewUint32[0x18] !== 0;
  }
  set pipelineStatisticsQuery(value) {
    this.memoryViewUint32[0x18] = value | 0;
  }
  get vertexPipelineStoresAndAtomics() {
    return this.memoryViewUint32[0x19] !== 0;
  }
  set vertexPipelineStoresAndAtomics(value) {
    this.memoryViewUint32[0x19] = value | 0;
  }
  get fragmentStoresAndAtomics() {
    return this.memoryViewUint32[0x1A] !== 0;
  }
  set fragmentStoresAndAtomics(value) {
    this.memoryViewUint32[0x1A] = value | 0;
  }
  get shaderTessellationAndGeometryPointSize() {
    return this.memoryViewUint32[0x1B] !== 0;
  }
  set shaderTessellationAndGeometryPointSize(value) {
    this.memoryViewUint32[0x1B] = value | 0;
  }
  get shaderImageGatherExtended() {
    return this.memoryViewUint32[0x1C] !== 0;
  }
  set shaderImageGatherExtended(value) {
    this.memoryViewUint32[0x1C] = value | 0;
  }
  get shaderStorageImageExtendedFormats() {
    return this.memoryViewUint32[0x1D] !== 0;
  }
  set shaderStorageImageExtendedFormats(value) {
    this.memoryViewUint32[0x1D] = value | 0;
  }
  get shaderStorageImageMultisample() {
    return this.memoryViewUint32[0x1E] !== 0;
  }
  set shaderStorageImageMultisample(value) {
    this.memoryViewUint32[0x1E] = value | 0;
  }
  get shaderStorageImageReadWithoutFormat() {
    return this.memoryViewUint32[0x1F] !== 0;
  }
  set shaderStorageImageReadWithoutFormat(value) {
    this.memoryViewUint32[0x1F] = value | 0;
  }
  get shaderStorageImageWriteWithoutFormat() {
    return this.memoryViewUint32[0x20] !== 0;
  }
  set shaderStorageImageWriteWithoutFormat(value) {
    this.memoryViewUint32[0x20] = value | 0;
  }
  get shaderUniformBufferArrayDynamicIndexing() {
    return this.memoryViewUint32[0x21] !== 0;
  }
  set shaderUniformBufferArrayDynamicIndexing(value) {
    this.memoryViewUint32[0x21] = value | 0;
  }
  get shaderSampledImageArrayDynamicIndexing() {
    return this.memoryViewUint32[0x22] !== 0;
  }
  set shaderSampledImageArrayDynamicIndexing(value) {
    this.memoryViewUint32[0x22] = value | 0;
  }
  get shaderStorageBufferArrayDynamicIndexing() {
    return this.memoryViewUint32[0x23] !== 0;
  }
  set shaderStorageBufferArrayDynamicIndexing(value) {
    this.memoryViewUint32[0x23] = value | 0;
  }
  get shaderStorageImageArrayDynamicIndexing() {
    return this.memoryViewUint32[0x24] !== 0;
  }
  set shaderStorageImageArrayDynamicIndexing(value) {
    this.memoryViewUint32[0x24] = value | 0;
  }
  get shaderClipDistance() {
    return this.memoryViewUint32[0x25] !== 0;
  }
  set shaderClipDistance(value) {
    this.memoryViewUint32[0x25] = value | 0;
  }
  get shaderCullDistance() {
    return this.memoryViewUint32[0x26] !== 0;
  }
  set shaderCullDistance(value) {
    this.memoryViewUint32[0x26] = value | 0;
  }
  get shaderFloat64() {
    return this.memoryViewUint32[0x27] !== 0;
  }
  set shaderFloat64(value) {
    this.memoryViewUint32[0x27] = value | 0;
  }
  get shaderInt64() {
    return this.memoryViewUint32[0x28] !== 0;
  }
  set shaderInt64(value) {
    this.memoryViewUint32[0x28] = value | 0;
  }
  get shaderInt16() {
    return this.memoryViewUint32[0x29] !== 0;
  }
  set shaderInt16(value) {
    this.memoryViewUint32[0x29] = value | 0;
  }
  get shaderResourceResidency() {
    return this.memoryViewUint32[0x2A] !== 0;
  }
  set shaderResourceResidency(value) {
    this.memoryViewUint32[0x2A] = value | 0;
  }
  get shaderResourceMinLod() {
    return this.memoryViewUint32[0x2B] !== 0;
  }
  set shaderResourceMinLod(value) {
    this.memoryViewUint32[0x2B] = value | 0;
  }
  get sparseBinding() {
    return this.memoryViewUint32[0x2C] !== 0;
  }
  set sparseBinding(value) {
    this.memoryViewUint32[0x2C] = value | 0;
  }
  get sparseResidencyBuffer() {
    return this.memoryViewUint32[0x2D] !== 0;
  }
  set sparseResidencyBuffer(value) {
    this.memoryViewUint32[0x2D] = value | 0;
  }
  get sparseResidencyImage2D() {
    return this.memoryViewUint32[0x2E] !== 0;
  }
  set sparseResidencyImage2D(value) {
    this.memoryViewUint32[0x2E] = value | 0;
  }
  get sparseResidencyImage3D() {
    return this.memoryViewUint32[0x2F] !== 0;
  }
  set sparseResidencyImage3D(value) {
    this.memoryViewUint32[0x2F] = value | 0;
  }
  get sparseResidency2Samples() {
    return this.memoryViewUint32[0x30] !== 0;
  }
  set sparseResidency2Samples(value) {
    this.memoryViewUint32[0x30] = value | 0;
  }
  get sparseResidency4Samples() {
    return this.memoryViewUint32[0x31] !== 0;
  }
  set sparseResidency4Samples(value) {
    this.memoryViewUint32[0x31] = value | 0;
  }
  get sparseResidency8Samples() {
    return this.memoryViewUint32[0x32] !== 0;
  }
  set sparseResidency8Samples(value) {
    this.memoryViewUint32[0x32] = value | 0;
  }
  get sparseResidency16Samples() {
    return this.memoryViewUint32[0x33] !== 0;
  }
  set sparseResidency16Samples(value) {
    this.memoryViewUint32[0x33] = value | 0;
  }
  get sparseResidencyAliased() {
    return this.memoryViewUint32[0x34] !== 0;
  }
  set sparseResidencyAliased(value) {
    this.memoryViewUint32[0x34] = value | 0;
  }
  get variableMultisampleRate() {
    return this.memoryViewUint32[0x35] !== 0;
  }
  set variableMultisampleRate(value) {
    this.memoryViewUint32[0x35] = value | 0;
  }
  get inheritedQueries() {
    return this.memoryViewUint32[0x36] !== 0;
  }
  set inheritedQueries(value) {
    this.memoryViewUint32[0x36] = value | 0;
  }
  
};

VkPhysicalDeviceFeatures.prototype.flush = function flush() {
  
  return true;
};

VkPhysicalDeviceFeatures.prototype.reflect = function reflect(memoryAddress) {
  
};

VkPhysicalDeviceFeatures.byteLength = 0xDC;

VkPhysicalDeviceFeatures.memoryLayout = {
  robustBufferAccess: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  fullDrawIndexUint32: {
    byteOffset: 0x4,
    byteLength: 0x4
  },
  imageCubeArray: {
    byteOffset: 0x8,
    byteLength: 0x4
  },
  independentBlend: {
    byteOffset: 0xC,
    byteLength: 0x4
  },
  geometryShader: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  tessellationShader: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  sampleRateShading: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
  dualSrcBlend: {
    byteOffset: 0x1C,
    byteLength: 0x4
  },
  logicOp: {
    byteOffset: 0x20,
    byteLength: 0x4
  },
  multiDrawIndirect: {
    byteOffset: 0x24,
    byteLength: 0x4
  },
  drawIndirectFirstInstance: {
    byteOffset: 0x28,
    byteLength: 0x4
  },
  depthClamp: {
    byteOffset: 0x2C,
    byteLength: 0x4
  },
  depthBiasClamp: {
    byteOffset: 0x30,
    byteLength: 0x4
  },
  fillModeNonSolid: {
    byteOffset: 0x34,
    byteLength: 0x4
  },
  depthBounds: {
    byteOffset: 0x38,
    byteLength: 0x4
  },
  wideLines: {
    byteOffset: 0x3C,
    byteLength: 0x4
  },
  largePoints: {
    byteOffset: 0x40,
    byteLength: 0x4
  },
  alphaToOne: {
    byteOffset: 0x44,
    byteLength: 0x4
  },
  multiViewport: {
    byteOffset: 0x48,
    byteLength: 0x4
  },
  samplerAnisotropy: {
    byteOffset: 0x4C,
    byteLength: 0x4
  },
  textureCompressionETC2: {
    byteOffset: 0x50,
    byteLength: 0x4
  },
  textureCompressionASTC_LDR: {
    byteOffset: 0x54,
    byteLength: 0x4
  },
  textureCompressionBC: {
    byteOffset: 0x58,
    byteLength: 0x4
  },
  occlusionQueryPrecise: {
    byteOffset: 0x5C,
    byteLength: 0x4
  },
  pipelineStatisticsQuery: {
    byteOffset: 0x60,
    byteLength: 0x4
  },
  vertexPipelineStoresAndAtomics: {
    byteOffset: 0x64,
    byteLength: 0x4
  },
  fragmentStoresAndAtomics: {
    byteOffset: 0x68,
    byteLength: 0x4
  },
  shaderTessellationAndGeometryPointSize: {
    byteOffset: 0x6C,
    byteLength: 0x4
  },
  shaderImageGatherExtended: {
    byteOffset: 0x70,
    byteLength: 0x4
  },
  shaderStorageImageExtendedFormats: {
    byteOffset: 0x74,
    byteLength: 0x4
  },
  shaderStorageImageMultisample: {
    byteOffset: 0x78,
    byteLength: 0x4
  },
  shaderStorageImageReadWithoutFormat: {
    byteOffset: 0x7C,
    byteLength: 0x4
  },
  shaderStorageImageWriteWithoutFormat: {
    byteOffset: 0x80,
    byteLength: 0x4
  },
  shaderUniformBufferArrayDynamicIndexing: {
    byteOffset: 0x84,
    byteLength: 0x4
  },
  shaderSampledImageArrayDynamicIndexing: {
    byteOffset: 0x88,
    byteLength: 0x4
  },
  shaderStorageBufferArrayDynamicIndexing: {
    byteOffset: 0x8C,
    byteLength: 0x4
  },
  shaderStorageImageArrayDynamicIndexing: {
    byteOffset: 0x90,
    byteLength: 0x4
  },
  shaderClipDistance: {
    byteOffset: 0x94,
    byteLength: 0x4
  },
  shaderCullDistance: {
    byteOffset: 0x98,
    byteLength: 0x4
  },
  shaderFloat64: {
    byteOffset: 0x9C,
    byteLength: 0x4
  },
  shaderInt64: {
    byteOffset: 0xA0,
    byteLength: 0x4
  },
  shaderInt16: {
    byteOffset: 0xA4,
    byteLength: 0x4
  },
  shaderResourceResidency: {
    byteOffset: 0xA8,
    byteLength: 0x4
  },
  shaderResourceMinLod: {
    byteOffset: 0xAC,
    byteLength: 0x4
  },
  sparseBinding: {
    byteOffset: 0xB0,
    byteLength: 0x4
  },
  sparseResidencyBuffer: {
    byteOffset: 0xB4,
    byteLength: 0x4
  },
  sparseResidencyImage2D: {
    byteOffset: 0xB8,
    byteLength: 0x4
  },
  sparseResidencyImage3D: {
    byteOffset: 0xBC,
    byteLength: 0x4
  },
  sparseResidency2Samples: {
    byteOffset: 0xC0,
    byteLength: 0x4
  },
  sparseResidency4Samples: {
    byteOffset: 0xC4,
    byteLength: 0x4
  },
  sparseResidency8Samples: {
    byteOffset: 0xC8,
    byteLength: 0x4
  },
  sparseResidency16Samples: {
    byteOffset: 0xCC,
    byteLength: 0x4
  },
  sparseResidencyAliased: {
    byteOffset: 0xD0,
    byteLength: 0x4
  },
  variableMultisampleRate: {
    byteOffset: 0xD4,
    byteLength: 0x4
  },
  inheritedQueries: {
    byteOffset: 0xD8,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceSparseProperties **/
class VkPhysicalDeviceSparseProperties {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x14) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x14);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    
    
    
    
    
    if (typeof opts === "object") {
      
    }
  }
  get residencyStandard2DBlockShape() {
    return this.memoryViewUint32[0x0] !== 0;
  }
  get residencyStandard2DMultisampleBlockShape() {
    return this.memoryViewUint32[0x1] !== 0;
  }
  get residencyStandard3DBlockShape() {
    return this.memoryViewUint32[0x2] !== 0;
  }
  get residencyAlignedMipSize() {
    return this.memoryViewUint32[0x3] !== 0;
  }
  get residencyNonResidentStrict() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  
};

VkPhysicalDeviceSparseProperties.prototype.flush = function flush() {
  
  return true;
};

VkPhysicalDeviceSparseProperties.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x14));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x14), 0x0);
};

VkPhysicalDeviceSparseProperties.byteLength = 0x14;

VkPhysicalDeviceSparseProperties.memoryLayout = {
  residencyStandard2DBlockShape: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  residencyStandard2DMultisampleBlockShape: {
    byteOffset: 0x4,
    byteLength: 0x4
  },
  residencyStandard3DBlockShape: {
    byteOffset: 0x8,
    byteLength: 0x4
  },
  residencyAlignedMipSize: {
    byteOffset: 0xC,
    byteLength: 0x4
  },
  residencyNonResidentStrict: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceLimits **/
class VkPhysicalDeviceLimits {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x1F8) / 0x4);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x1F8) / 0x8);
      this.memoryViewFloat32 = new Float32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x1F8) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x1F8) / 0x8);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x1F8) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x1F8);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);
      this.memoryViewFloat32 = new Float32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);

    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    this._maxComputeWorkGroupCount = [...Array(3)].fill(0x0);
    
    this._maxComputeWorkGroupSize = [...Array(3)].fill(0x0);
    
    
    
    
    
    
    
    
    this._maxViewportDimensions = [...Array(2)].fill(0x0);
    this._viewportBoundsRange = [...Array(2)].fill(0x0);
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    this._pointSizeRange = [...Array(2)].fill(0x0);
    this._lineWidthRange = [...Array(2)].fill(0x0);
    
    
    
    
    
    
    
    
    if (typeof opts === "object") {
      
    }
  }
  get maxImageDimension1D() {
    return this.memoryViewUint32[0x0];
  }
  get maxImageDimension2D() {
    return this.memoryViewUint32[0x1];
  }
  get maxImageDimension3D() {
    return this.memoryViewUint32[0x2];
  }
  get maxImageDimensionCube() {
    return this.memoryViewUint32[0x3];
  }
  get maxImageArrayLayers() {
    return this.memoryViewUint32[0x4];
  }
  get maxTexelBufferElements() {
    return this.memoryViewUint32[0x5];
  }
  get maxUniformBufferRange() {
    return this.memoryViewUint32[0x6];
  }
  get maxStorageBufferRange() {
    return this.memoryViewUint32[0x7];
  }
  get maxPushConstantsSize() {
    return this.memoryViewUint32[0x8];
  }
  get maxMemoryAllocationCount() {
    return this.memoryViewUint32[0x9];
  }
  get maxSamplerAllocationCount() {
    return this.memoryViewUint32[0xA];
  }
  get bufferImageGranularity() {
    return this.memoryViewBigUint64[0x6];
  }
  get sparseAddressSpaceSize() {
    return this.memoryViewBigUint64[0x7];
  }
  get maxBoundDescriptorSets() {
    return this.memoryViewUint32[0x10];
  }
  get maxPerStageDescriptorSamplers() {
    return this.memoryViewUint32[0x11];
  }
  get maxPerStageDescriptorUniformBuffers() {
    return this.memoryViewUint32[0x12];
  }
  get maxPerStageDescriptorStorageBuffers() {
    return this.memoryViewUint32[0x13];
  }
  get maxPerStageDescriptorSampledImages() {
    return this.memoryViewUint32[0x14];
  }
  get maxPerStageDescriptorStorageImages() {
    return this.memoryViewUint32[0x15];
  }
  get maxPerStageDescriptorInputAttachments() {
    return this.memoryViewUint32[0x16];
  }
  get maxPerStageResources() {
    return this.memoryViewUint32[0x17];
  }
  get maxDescriptorSetSamplers() {
    return this.memoryViewUint32[0x18];
  }
  get maxDescriptorSetUniformBuffers() {
    return this.memoryViewUint32[0x19];
  }
  get maxDescriptorSetUniformBuffersDynamic() {
    return this.memoryViewUint32[0x1A];
  }
  get maxDescriptorSetStorageBuffers() {
    return this.memoryViewUint32[0x1B];
  }
  get maxDescriptorSetStorageBuffersDynamic() {
    return this.memoryViewUint32[0x1C];
  }
  get maxDescriptorSetSampledImages() {
    return this.memoryViewUint32[0x1D];
  }
  get maxDescriptorSetStorageImages() {
    return this.memoryViewUint32[0x1E];
  }
  get maxDescriptorSetInputAttachments() {
    return this.memoryViewUint32[0x1F];
  }
  get maxVertexInputAttributes() {
    return this.memoryViewUint32[0x20];
  }
  get maxVertexInputBindings() {
    return this.memoryViewUint32[0x21];
  }
  get maxVertexInputAttributeOffset() {
    return this.memoryViewUint32[0x22];
  }
  get maxVertexInputBindingStride() {
    return this.memoryViewUint32[0x23];
  }
  get maxVertexOutputComponents() {
    return this.memoryViewUint32[0x24];
  }
  get maxTessellationGenerationLevel() {
    return this.memoryViewUint32[0x25];
  }
  get maxTessellationPatchSize() {
    return this.memoryViewUint32[0x26];
  }
  get maxTessellationControlPerVertexInputComponents() {
    return this.memoryViewUint32[0x27];
  }
  get maxTessellationControlPerVertexOutputComponents() {
    return this.memoryViewUint32[0x28];
  }
  get maxTessellationControlPerPatchOutputComponents() {
    return this.memoryViewUint32[0x29];
  }
  get maxTessellationControlTotalOutputComponents() {
    return this.memoryViewUint32[0x2A];
  }
  get maxTessellationEvaluationInputComponents() {
    return this.memoryViewUint32[0x2B];
  }
  get maxTessellationEvaluationOutputComponents() {
    return this.memoryViewUint32[0x2C];
  }
  get maxGeometryShaderInvocations() {
    return this.memoryViewUint32[0x2D];
  }
  get maxGeometryInputComponents() {
    return this.memoryViewUint32[0x2E];
  }
  get maxGeometryOutputComponents() {
    return this.memoryViewUint32[0x2F];
  }
  get maxGeometryOutputVertices() {
    return this.memoryViewUint32[0x30];
  }
  get maxGeometryTotalOutputComponents() {
    return this.memoryViewUint32[0x31];
  }
  get maxFragmentInputComponents() {
    return this.memoryViewUint32[0x32];
  }
  get maxFragmentOutputAttachments() {
    return this.memoryViewUint32[0x33];
  }
  get maxFragmentDualSrcAttachments() {
    return this.memoryViewUint32[0x34];
  }
  get maxFragmentCombinedOutputResources() {
    return this.memoryViewUint32[0x35];
  }
  get maxComputeSharedMemorySize() {
    return this.memoryViewUint32[0x36];
  }
  get maxComputeWorkGroupCount() {
    return [
      this.memoryViewUint32[0x37],
      this.memoryViewUint32[0x38],
      this.memoryViewUint32[0x39]
    ];
  }
  get maxComputeWorkGroupInvocations() {
    return this.memoryViewUint32[0x3A];
  }
  get maxComputeWorkGroupSize() {
    return [
      this.memoryViewUint32[0x3B],
      this.memoryViewUint32[0x3C],
      this.memoryViewUint32[0x3D]
    ];
  }
  get subPixelPrecisionBits() {
    return this.memoryViewUint32[0x3E];
  }
  get subTexelPrecisionBits() {
    return this.memoryViewUint32[0x3F];
  }
  get mipmapPrecisionBits() {
    return this.memoryViewUint32[0x40];
  }
  get maxDrawIndexedIndexValue() {
    return this.memoryViewUint32[0x41];
  }
  get maxDrawIndirectCount() {
    return this.memoryViewUint32[0x42];
  }
  get maxSamplerLodBias() {
    return this.memoryViewFloat32[0x43];
  }
  get maxSamplerAnisotropy() {
    return this.memoryViewFloat32[0x44];
  }
  get maxViewports() {
    return this.memoryViewUint32[0x45];
  }
  get maxViewportDimensions() {
    return [
      this.memoryViewUint32[0x46],
      this.memoryViewUint32[0x47]
    ];
  }
  get viewportBoundsRange() {
    return [
      this.memoryViewFloat32[0x48],
      this.memoryViewFloat32[0x49]
    ];
  }
  get viewportSubPixelBits() {
    return this.memoryViewUint32[0x4A];
  }
  get minMemoryMapAlignment() {
    return this.memoryViewBigInt64[0x26];
  }
  get minTexelBufferOffsetAlignment() {
    return this.memoryViewBigUint64[0x27];
  }
  get minUniformBufferOffsetAlignment() {
    return this.memoryViewBigUint64[0x28];
  }
  get minStorageBufferOffsetAlignment() {
    return this.memoryViewBigUint64[0x29];
  }
  get minTexelOffset() {
    return this.memoryViewInt32[0x54];
  }
  get maxTexelOffset() {
    return this.memoryViewUint32[0x55];
  }
  get minTexelGatherOffset() {
    return this.memoryViewInt32[0x56];
  }
  get maxTexelGatherOffset() {
    return this.memoryViewUint32[0x57];
  }
  get minInterpolationOffset() {
    return this.memoryViewFloat32[0x58];
  }
  get maxInterpolationOffset() {
    return this.memoryViewFloat32[0x59];
  }
  get subPixelInterpolationOffsetBits() {
    return this.memoryViewUint32[0x5A];
  }
  get maxFramebufferWidth() {
    return this.memoryViewUint32[0x5B];
  }
  get maxFramebufferHeight() {
    return this.memoryViewUint32[0x5C];
  }
  get maxFramebufferLayers() {
    return this.memoryViewUint32[0x5D];
  }
  get framebufferColorSampleCounts() {
    return this.memoryViewInt32[0x5E];
  }
  get framebufferDepthSampleCounts() {
    return this.memoryViewInt32[0x5F];
  }
  get framebufferStencilSampleCounts() {
    return this.memoryViewInt32[0x60];
  }
  get framebufferNoAttachmentsSampleCounts() {
    return this.memoryViewInt32[0x61];
  }
  get maxColorAttachments() {
    return this.memoryViewUint32[0x62];
  }
  get sampledImageColorSampleCounts() {
    return this.memoryViewInt32[0x63];
  }
  get sampledImageIntegerSampleCounts() {
    return this.memoryViewInt32[0x64];
  }
  get sampledImageDepthSampleCounts() {
    return this.memoryViewInt32[0x65];
  }
  get sampledImageStencilSampleCounts() {
    return this.memoryViewInt32[0x66];
  }
  get storageImageSampleCounts() {
    return this.memoryViewInt32[0x67];
  }
  get maxSampleMaskWords() {
    return this.memoryViewUint32[0x68];
  }
  get timestampComputeAndGraphics() {
    return this.memoryViewUint32[0x69] !== 0;
  }
  get timestampPeriod() {
    return this.memoryViewFloat32[0x6A];
  }
  get maxClipDistances() {
    return this.memoryViewUint32[0x6B];
  }
  get maxCullDistances() {
    return this.memoryViewUint32[0x6C];
  }
  get maxCombinedClipAndCullDistances() {
    return this.memoryViewUint32[0x6D];
  }
  get discreteQueuePriorities() {
    return this.memoryViewUint32[0x6E];
  }
  get pointSizeRange() {
    return [
      this.memoryViewFloat32[0x6F],
      this.memoryViewFloat32[0x70]
    ];
  }
  get lineWidthRange() {
    return [
      this.memoryViewFloat32[0x71],
      this.memoryViewFloat32[0x72]
    ];
  }
  get pointSizeGranularity() {
    return this.memoryViewFloat32[0x73];
  }
  get lineWidthGranularity() {
    return this.memoryViewFloat32[0x74];
  }
  get strictLines() {
    return this.memoryViewUint32[0x75] !== 0;
  }
  get standardSampleLocations() {
    return this.memoryViewUint32[0x76] !== 0;
  }
  get optimalBufferCopyOffsetAlignment() {
    return this.memoryViewBigUint64[0x3C];
  }
  get optimalBufferCopyRowPitchAlignment() {
    return this.memoryViewBigUint64[0x3D];
  }
  get nonCoherentAtomSize() {
    return this.memoryViewBigUint64[0x3E];
  }
  
};

VkPhysicalDeviceLimits.prototype.flush = function flush() {
  
  return true;
};

VkPhysicalDeviceLimits.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x1F8));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x1F8), 0x0);
  
  
  
  
  
  
  
  
  
  
  
  
};

VkPhysicalDeviceLimits.byteLength = 0x1F8;

VkPhysicalDeviceLimits.memoryLayout = {
  maxImageDimension1D: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  maxImageDimension2D: {
    byteOffset: 0x4,
    byteLength: 0x4
  },
  maxImageDimension3D: {
    byteOffset: 0x8,
    byteLength: 0x4
  },
  maxImageDimensionCube: {
    byteOffset: 0xC,
    byteLength: 0x4
  },
  maxImageArrayLayers: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  maxTexelBufferElements: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  maxUniformBufferRange: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
  maxStorageBufferRange: {
    byteOffset: 0x1C,
    byteLength: 0x4
  },
  maxPushConstantsSize: {
    byteOffset: 0x20,
    byteLength: 0x4
  },
  maxMemoryAllocationCount: {
    byteOffset: 0x24,
    byteLength: 0x4
  },
  maxSamplerAllocationCount: {
    byteOffset: 0x28,
    byteLength: 0x4
  },
  bufferImageGranularity: {
    byteOffset: 0x30,
    byteLength: 0x8
  },
  sparseAddressSpaceSize: {
    byteOffset: 0x38,
    byteLength: 0x8
  },
  maxBoundDescriptorSets: {
    byteOffset: 0x40,
    byteLength: 0x4
  },
  maxPerStageDescriptorSamplers: {
    byteOffset: 0x44,
    byteLength: 0x4
  },
  maxPerStageDescriptorUniformBuffers: {
    byteOffset: 0x48,
    byteLength: 0x4
  },
  maxPerStageDescriptorStorageBuffers: {
    byteOffset: 0x4C,
    byteLength: 0x4
  },
  maxPerStageDescriptorSampledImages: {
    byteOffset: 0x50,
    byteLength: 0x4
  },
  maxPerStageDescriptorStorageImages: {
    byteOffset: 0x54,
    byteLength: 0x4
  },
  maxPerStageDescriptorInputAttachments: {
    byteOffset: 0x58,
    byteLength: 0x4
  },
  maxPerStageResources: {
    byteOffset: 0x5C,
    byteLength: 0x4
  },
  maxDescriptorSetSamplers: {
    byteOffset: 0x60,
    byteLength: 0x4
  },
  maxDescriptorSetUniformBuffers: {
    byteOffset: 0x64,
    byteLength: 0x4
  },
  maxDescriptorSetUniformBuffersDynamic: {
    byteOffset: 0x68,
    byteLength: 0x4
  },
  maxDescriptorSetStorageBuffers: {
    byteOffset: 0x6C,
    byteLength: 0x4
  },
  maxDescriptorSetStorageBuffersDynamic: {
    byteOffset: 0x70,
    byteLength: 0x4
  },
  maxDescriptorSetSampledImages: {
    byteOffset: 0x74,
    byteLength: 0x4
  },
  maxDescriptorSetStorageImages: {
    byteOffset: 0x78,
    byteLength: 0x4
  },
  maxDescriptorSetInputAttachments: {
    byteOffset: 0x7C,
    byteLength: 0x4
  },
  maxVertexInputAttributes: {
    byteOffset: 0x80,
    byteLength: 0x4
  },
  maxVertexInputBindings: {
    byteOffset: 0x84,
    byteLength: 0x4
  },
  maxVertexInputAttributeOffset: {
    byteOffset: 0x88,
    byteLength: 0x4
  },
  maxVertexInputBindingStride: {
    byteOffset: 0x8C,
    byteLength: 0x4
  },
  maxVertexOutputComponents: {
    byteOffset: 0x90,
    byteLength: 0x4
  },
  maxTessellationGenerationLevel: {
    byteOffset: 0x94,
    byteLength: 0x4
  },
  maxTessellationPatchSize: {
    byteOffset: 0x98,
    byteLength: 0x4
  },
  maxTessellationControlPerVertexInputComponents: {
    byteOffset: 0x9C,
    byteLength: 0x4
  },
  maxTessellationControlPerVertexOutputComponents: {
    byteOffset: 0xA0,
    byteLength: 0x4
  },
  maxTessellationControlPerPatchOutputComponents: {
    byteOffset: 0xA4,
    byteLength: 0x4
  },
  maxTessellationControlTotalOutputComponents: {
    byteOffset: 0xA8,
    byteLength: 0x4
  },
  maxTessellationEvaluationInputComponents: {
    byteOffset: 0xAC,
    byteLength: 0x4
  },
  maxTessellationEvaluationOutputComponents: {
    byteOffset: 0xB0,
    byteLength: 0x4
  },
  maxGeometryShaderInvocations: {
    byteOffset: 0xB4,
    byteLength: 0x4
  },
  maxGeometryInputComponents: {
    byteOffset: 0xB8,
    byteLength: 0x4
  },
  maxGeometryOutputComponents: {
    byteOffset: 0xBC,
    byteLength: 0x4
  },
  maxGeometryOutputVertices: {
    byteOffset: 0xC0,
    byteLength: 0x4
  },
  maxGeometryTotalOutputComponents: {
    byteOffset: 0xC4,
    byteLength: 0x4
  },
  maxFragmentInputComponents: {
    byteOffset: 0xC8,
    byteLength: 0x4
  },
  maxFragmentOutputAttachments: {
    byteOffset: 0xCC,
    byteLength: 0x4
  },
  maxFragmentDualSrcAttachments: {
    byteOffset: 0xD0,
    byteLength: 0x4
  },
  maxFragmentCombinedOutputResources: {
    byteOffset: 0xD4,
    byteLength: 0x4
  },
  maxComputeSharedMemorySize: {
    byteOffset: 0xD8,
    byteLength: 0x4
  },
  maxComputeWorkGroupCount: {
    byteOffset: 0xDC,
    byteLength: 0xC
  },
  maxComputeWorkGroupInvocations: {
    byteOffset: 0xE8,
    byteLength: 0x4
  },
  maxComputeWorkGroupSize: {
    byteOffset: 0xEC,
    byteLength: 0xC
  },
  subPixelPrecisionBits: {
    byteOffset: 0xF8,
    byteLength: 0x4
  },
  subTexelPrecisionBits: {
    byteOffset: 0xFC,
    byteLength: 0x4
  },
  mipmapPrecisionBits: {
    byteOffset: 0x100,
    byteLength: 0x4
  },
  maxDrawIndexedIndexValue: {
    byteOffset: 0x104,
    byteLength: 0x4
  },
  maxDrawIndirectCount: {
    byteOffset: 0x108,
    byteLength: 0x4
  },
  maxSamplerLodBias: {
    byteOffset: 0x10C,
    byteLength: 0x4
  },
  maxSamplerAnisotropy: {
    byteOffset: 0x110,
    byteLength: 0x4
  },
  maxViewports: {
    byteOffset: 0x114,
    byteLength: 0x4
  },
  maxViewportDimensions: {
    byteOffset: 0x118,
    byteLength: 0x8
  },
  viewportBoundsRange: {
    byteOffset: 0x120,
    byteLength: 0x8
  },
  viewportSubPixelBits: {
    byteOffset: 0x128,
    byteLength: 0x4
  },
  minMemoryMapAlignment: {
    byteOffset: 0x130,
    byteLength: 0x8
  },
  minTexelBufferOffsetAlignment: {
    byteOffset: 0x138,
    byteLength: 0x8
  },
  minUniformBufferOffsetAlignment: {
    byteOffset: 0x140,
    byteLength: 0x8
  },
  minStorageBufferOffsetAlignment: {
    byteOffset: 0x148,
    byteLength: 0x8
  },
  minTexelOffset: {
    byteOffset: 0x150,
    byteLength: 0x4
  },
  maxTexelOffset: {
    byteOffset: 0x154,
    byteLength: 0x4
  },
  minTexelGatherOffset: {
    byteOffset: 0x158,
    byteLength: 0x4
  },
  maxTexelGatherOffset: {
    byteOffset: 0x15C,
    byteLength: 0x4
  },
  minInterpolationOffset: {
    byteOffset: 0x160,
    byteLength: 0x4
  },
  maxInterpolationOffset: {
    byteOffset: 0x164,
    byteLength: 0x4
  },
  subPixelInterpolationOffsetBits: {
    byteOffset: 0x168,
    byteLength: 0x4
  },
  maxFramebufferWidth: {
    byteOffset: 0x16C,
    byteLength: 0x4
  },
  maxFramebufferHeight: {
    byteOffset: 0x170,
    byteLength: 0x4
  },
  maxFramebufferLayers: {
    byteOffset: 0x174,
    byteLength: 0x4
  },
  framebufferColorSampleCounts: {
    byteOffset: 0x178,
    byteLength: 0x4
  },
  framebufferDepthSampleCounts: {
    byteOffset: 0x17C,
    byteLength: 0x4
  },
  framebufferStencilSampleCounts: {
    byteOffset: 0x180,
    byteLength: 0x4
  },
  framebufferNoAttachmentsSampleCounts: {
    byteOffset: 0x184,
    byteLength: 0x4
  },
  maxColorAttachments: {
    byteOffset: 0x188,
    byteLength: 0x4
  },
  sampledImageColorSampleCounts: {
    byteOffset: 0x18C,
    byteLength: 0x4
  },
  sampledImageIntegerSampleCounts: {
    byteOffset: 0x190,
    byteLength: 0x4
  },
  sampledImageDepthSampleCounts: {
    byteOffset: 0x194,
    byteLength: 0x4
  },
  sampledImageStencilSampleCounts: {
    byteOffset: 0x198,
    byteLength: 0x4
  },
  storageImageSampleCounts: {
    byteOffset: 0x19C,
    byteLength: 0x4
  },
  maxSampleMaskWords: {
    byteOffset: 0x1A0,
    byteLength: 0x4
  },
  timestampComputeAndGraphics: {
    byteOffset: 0x1A4,
    byteLength: 0x4
  },
  timestampPeriod: {
    byteOffset: 0x1A8,
    byteLength: 0x4
  },
  maxClipDistances: {
    byteOffset: 0x1AC,
    byteLength: 0x4
  },
  maxCullDistances: {
    byteOffset: 0x1B0,
    byteLength: 0x4
  },
  maxCombinedClipAndCullDistances: {
    byteOffset: 0x1B4,
    byteLength: 0x4
  },
  discreteQueuePriorities: {
    byteOffset: 0x1B8,
    byteLength: 0x4
  },
  pointSizeRange: {
    byteOffset: 0x1BC,
    byteLength: 0x8
  },
  lineWidthRange: {
    byteOffset: 0x1C4,
    byteLength: 0x8
  },
  pointSizeGranularity: {
    byteOffset: 0x1CC,
    byteLength: 0x4
  },
  lineWidthGranularity: {
    byteOffset: 0x1D0,
    byteLength: 0x4
  },
  strictLines: {
    byteOffset: 0x1D4,
    byteLength: 0x4
  },
  standardSampleLocations: {
    byteOffset: 0x1D8,
    byteLength: 0x4
  },
  optimalBufferCopyOffsetAlignment: {
    byteOffset: 0x1E0,
    byteLength: 0x8
  },
  optimalBufferCopyRowPitchAlignment: {
    byteOffset: 0x1E8,
    byteLength: 0x8
  },
  nonCoherentAtomSize: {
    byteOffset: 0x1F0,
    byteLength: 0x8
  },
};
/** VkSemaphoreCreateInfo **/
class VkSemaphoreCreateInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x9;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null ) {
      let {sType} = value;
      
      switch (sType) {
          
        case 0x3B9BF6C8:
        case 0x3B9BFAB1:
          break;
        default:
          throw new TypeError("Invalid type for 'VkSemaphoreCreateInfo.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkSemaphoreCreateInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkSemaphoreCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkSemaphoreCreateInfo.byteLength = 0x18;

VkSemaphoreCreateInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  flags: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkQueryPoolCreateInfo **/
class VkQueryPoolCreateInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    
    
    this.sType = 0xB;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.queryType !== void 0) this.queryType = opts.queryType;
      if (opts.queryCount !== void 0) this.queryCount = opts.queryCount;
      if (opts.pipelineStatistics !== void 0) this.pipelineStatistics = opts.pipelineStatistics;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkQueryPoolCreateInfo.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get queryType() {
    return this.memoryViewInt32[0x5];
  }
  set queryType(value) {
    
    this.memoryViewInt32[0x5] = value;
  }
  get queryCount() {
    return this.memoryViewUint32[0x6];
  }
  set queryCount(value) {
    
    this.memoryViewUint32[0x6] = value;
  }
  get pipelineStatistics() {
    return this.memoryViewInt32[0x7];
  }
  set pipelineStatistics(value) {
    
    this.memoryViewInt32[0x7] = value;
  }
  
};

VkQueryPoolCreateInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkQueryPoolCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkQueryPoolCreateInfo.byteLength = 0x20;

VkQueryPoolCreateInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  flags: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  queryType: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  queryCount: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
  pipelineStatistics: {
    byteOffset: 0x1C,
    byteLength: 0x4
  },
};
/** VkFramebufferCreateInfo **/
class VkFramebufferCreateInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x40) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x40) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x40) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x40);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this._renderPass = null;
    
    this._pAttachments = null;
    this._pAttachmentsNative = null;
    
    
    
    this.sType = 0x25;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.renderPass !== void 0) this.renderPass = opts.renderPass;
      if (opts.attachmentCount !== void 0) this.attachmentCount = opts.attachmentCount;
      if (opts.pAttachments !== void 0) this.pAttachments = opts.pAttachments;
      if (opts.width !== void 0) this.width = opts.width;
      if (opts.height !== void 0) this.height = opts.height;
      if (opts.layers !== void 0) this.layers = opts.layers;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkFramebufferCreateInfo.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get renderPass() {
    return this._renderPass;
  }
  set renderPass(value) {
    if (value !== null ) {
      
      this._renderPass = value;
      
      this.memoryViewBigInt64[0x3] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._renderPass = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } 
    
  }
  get attachmentCount() {
    return this.memoryViewUint32[0x8];
  }
  set attachmentCount(value) {
    
    this.memoryViewUint32[0x8] = value;
  }
  get pAttachments() {
    return this._pAttachments;
  }
  set pAttachments(value) {
    if (value !== null ) {
      this._pAttachments = value;
    } else if (value === null) {
      this._pAttachments = null;
    } 
    
  }
  get width() {
    return this.memoryViewUint32[0xC];
  }
  set width(value) {
    
    this.memoryViewUint32[0xC] = value;
  }
  get height() {
    return this.memoryViewUint32[0xD];
  }
  set height(value) {
    
    this.memoryViewUint32[0xD] = value;
  }
  get layers() {
    return this.memoryViewUint32[0xE];
  }
  set layers(value) {
    
    this.memoryViewUint32[0xE] = value;
  }
  
};

VkFramebufferCreateInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pAttachments !== null) {
    let array = this._pAttachments;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pAttachmentsNative = nativeArray;
    this.memoryViewBigInt64[0x5] = nativeArray.address;
  }
  
  return true;
};

VkFramebufferCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
};

VkFramebufferCreateInfo.byteLength = 0x40;

VkFramebufferCreateInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  flags: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  renderPass: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
  attachmentCount: {
    byteOffset: 0x20,
    byteLength: 0x4
  },
  pAttachments: {
    byteOffset: 0x28,
    byteLength: 0x8
  },
  width: {
    byteOffset: 0x30,
    byteLength: 0x4
  },
  height: {
    byteOffset: 0x34,
    byteLength: 0x4
  },
  layers: {
    byteOffset: 0x38,
    byteLength: 0x4
  },
};
/** VkDrawIndirectCommand **/
class VkDrawIndirectCommand {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x10) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x10);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    
    
    
    
    if (typeof opts === "object") {
      if (opts.vertexCount !== void 0) this.vertexCount = opts.vertexCount;
      if (opts.instanceCount !== void 0) this.instanceCount = opts.instanceCount;
      if (opts.firstVertex !== void 0) this.firstVertex = opts.firstVertex;
      if (opts.firstInstance !== void 0) this.firstInstance = opts.firstInstance;
      
    }
  }
  get vertexCount() {
    return this.memoryViewUint32[0x0];
  }
  set vertexCount(value) {
    
    this.memoryViewUint32[0x0] = value;
  }
  get instanceCount() {
    return this.memoryViewUint32[0x1];
  }
  set instanceCount(value) {
    
    this.memoryViewUint32[0x1] = value;
  }
  get firstVertex() {
    return this.memoryViewUint32[0x2];
  }
  set firstVertex(value) {
    
    this.memoryViewUint32[0x2] = value;
  }
  get firstInstance() {
    return this.memoryViewUint32[0x3];
  }
  set firstInstance(value) {
    
    this.memoryViewUint32[0x3] = value;
  }
  
};

VkDrawIndirectCommand.prototype.flush = function flush() {
  
  return true;
};

VkDrawIndirectCommand.prototype.reflect = function reflect(memoryAddress) {
  
};

VkDrawIndirectCommand.byteLength = 0x10;

VkDrawIndirectCommand.memoryLayout = {
  vertexCount: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  instanceCount: {
    byteOffset: 0x4,
    byteLength: 0x4
  },
  firstVertex: {
    byteOffset: 0x8,
    byteLength: 0x4
  },
  firstInstance: {
    byteOffset: 0xC,
    byteLength: 0x4
  },
};
/** VkDrawIndexedIndirectCommand **/
class VkDrawIndexedIndirectCommand {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x14) / 0x4);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x14) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x14);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);

    }
    
    
    
    
    
    
    if (typeof opts === "object") {
      if (opts.indexCount !== void 0) this.indexCount = opts.indexCount;
      if (opts.instanceCount !== void 0) this.instanceCount = opts.instanceCount;
      if (opts.firstIndex !== void 0) this.firstIndex = opts.firstIndex;
      if (opts.vertexOffset !== void 0) this.vertexOffset = opts.vertexOffset;
      if (opts.firstInstance !== void 0) this.firstInstance = opts.firstInstance;
      
    }
  }
  get indexCount() {
    return this.memoryViewUint32[0x0];
  }
  set indexCount(value) {
    
    this.memoryViewUint32[0x0] = value;
  }
  get instanceCount() {
    return this.memoryViewUint32[0x1];
  }
  set instanceCount(value) {
    
    this.memoryViewUint32[0x1] = value;
  }
  get firstIndex() {
    return this.memoryViewUint32[0x2];
  }
  set firstIndex(value) {
    
    this.memoryViewUint32[0x2] = value;
  }
  get vertexOffset() {
    return this.memoryViewInt32[0x3];
  }
  set vertexOffset(value) {
    
    this.memoryViewInt32[0x3] = value;
  }
  get firstInstance() {
    return this.memoryViewUint32[0x4];
  }
  set firstInstance(value) {
    
    this.memoryViewUint32[0x4] = value;
  }
  
};

VkDrawIndexedIndirectCommand.prototype.flush = function flush() {
  
  return true;
};

VkDrawIndexedIndirectCommand.prototype.reflect = function reflect(memoryAddress) {
  
};

VkDrawIndexedIndirectCommand.byteLength = 0x14;

VkDrawIndexedIndirectCommand.memoryLayout = {
  indexCount: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  instanceCount: {
    byteOffset: 0x4,
    byteLength: 0x4
  },
  firstIndex: {
    byteOffset: 0x8,
    byteLength: 0x4
  },
  vertexOffset: {
    byteOffset: 0xC,
    byteLength: 0x4
  },
  firstInstance: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkDispatchIndirectCommand **/
class VkDispatchIndirectCommand {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0xC) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0xC);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    
    
    
    if (typeof opts === "object") {
      if (opts.x !== void 0) this.x = opts.x;
      if (opts.y !== void 0) this.y = opts.y;
      if (opts.z !== void 0) this.z = opts.z;
      
    }
  }
  get x() {
    return this.memoryViewUint32[0x0];
  }
  set x(value) {
    
    this.memoryViewUint32[0x0] = value;
  }
  get y() {
    return this.memoryViewUint32[0x1];
  }
  set y(value) {
    
    this.memoryViewUint32[0x1] = value;
  }
  get z() {
    return this.memoryViewUint32[0x2];
  }
  set z(value) {
    
    this.memoryViewUint32[0x2] = value;
  }
  
};

VkDispatchIndirectCommand.prototype.flush = function flush() {
  
  return true;
};

VkDispatchIndirectCommand.prototype.reflect = function reflect(memoryAddress) {
  
};

VkDispatchIndirectCommand.byteLength = 0xC;

VkDispatchIndirectCommand.memoryLayout = {
  x: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  y: {
    byteOffset: 0x4,
    byteLength: 0x4
  },
  z: {
    byteOffset: 0x8,
    byteLength: 0x4
  },
};
/** VkSubmitInfo **/
class VkSubmitInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x48) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x48) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x48) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x48);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this._pWaitSemaphores = null;
    this._pWaitSemaphoresNative = null;
    this._pWaitDstStageMask = null;
    
    this._pCommandBuffers = null;
    this._pCommandBuffersNative = null;
    
    this._pSignalSemaphores = null;
    this._pSignalSemaphoresNative = null;
    this.sType = 0x4;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.waitSemaphoreCount !== void 0) this.waitSemaphoreCount = opts.waitSemaphoreCount;
      if (opts.pWaitSemaphores !== void 0) this.pWaitSemaphores = opts.pWaitSemaphores;
      if (opts.pWaitDstStageMask !== void 0) this.pWaitDstStageMask = opts.pWaitDstStageMask;
      if (opts.commandBufferCount !== void 0) this.commandBufferCount = opts.commandBufferCount;
      if (opts.pCommandBuffers !== void 0) this.pCommandBuffers = opts.pCommandBuffers;
      if (opts.signalSemaphoreCount !== void 0) this.signalSemaphoreCount = opts.signalSemaphoreCount;
      if (opts.pSignalSemaphores !== void 0) this.pSignalSemaphores = opts.pSignalSemaphores;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null ) {
      let {sType} = value;
      
      switch (sType) {
          
        case 0x3B9BAC90:
        case 0x3B9BEEF8:
        case 0x3B9BFAB2:
        case 0x3B9BB465:
        case VkStructureType.VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO:
          break;
        default:
          throw new TypeError("Invalid type for 'VkSubmitInfo.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  get waitSemaphoreCount() {
    return this.memoryViewUint32[0x4];
  }
  set waitSemaphoreCount(value) {
    
    this.memoryViewUint32[0x4] = value;
  }
  get pWaitSemaphores() {
    return this._pWaitSemaphores;
  }
  set pWaitSemaphores(value) {
    if (value !== null ) {
      this._pWaitSemaphores = value;
    } else if (value === null) {
      this._pWaitSemaphores = null;
    } 
    
  }
  get pWaitDstStageMask() {
    return this._pWaitDstStageMask;
  }
  set pWaitDstStageMask(value) {
    if (value !== null ) {
      this._pWaitDstStageMask = value;
      this.memoryViewBigInt64[0x4] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pWaitDstStageMask = null;
      this.memoryViewBigInt64[0x4] = BI0;
    } 
    
  }
  get commandBufferCount() {
    return this.memoryViewUint32[0xA];
  }
  set commandBufferCount(value) {
    
    this.memoryViewUint32[0xA] = value;
  }
  get pCommandBuffers() {
    return this._pCommandBuffers;
  }
  set pCommandBuffers(value) {
    if (value !== null ) {
      this._pCommandBuffers = value;
    } else if (value === null) {
      this._pCommandBuffers = null;
    } 
    
  }
  get signalSemaphoreCount() {
    return this.memoryViewUint32[0xE];
  }
  set signalSemaphoreCount(value) {
    
    this.memoryViewUint32[0xE] = value;
  }
  get pSignalSemaphores() {
    return this._pSignalSemaphores;
  }
  set pSignalSemaphores(value) {
    if (value !== null ) {
      this._pSignalSemaphores = value;
    } else if (value === null) {
      this._pSignalSemaphores = null;
    } 
    
  }
  
};

VkSubmitInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pWaitSemaphores !== null) {
    let array = this._pWaitSemaphores;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pWaitSemaphoresNative = nativeArray;
    this.memoryViewBigInt64[0x3] = nativeArray.address;
  }
  
  
  if (this._pCommandBuffers !== null) {
    let array = this._pCommandBuffers;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pCommandBuffersNative = nativeArray;
    this.memoryViewBigInt64[0x6] = nativeArray.address;
  }
  
  
  if (this._pSignalSemaphores !== null) {
    let array = this._pSignalSemaphores;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pSignalSemaphoresNative = nativeArray;
    this.memoryViewBigInt64[0x8] = nativeArray.address;
  }
  
  return true;
};

VkSubmitInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
  
  
  
  
};

VkSubmitInfo.byteLength = 0x48;

VkSubmitInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  waitSemaphoreCount: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  pWaitSemaphores: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
  pWaitDstStageMask: {
    byteOffset: 0x20,
    byteLength: 0x8
  },
  commandBufferCount: {
    byteOffset: 0x28,
    byteLength: 0x4
  },
  pCommandBuffers: {
    byteOffset: 0x30,
    byteLength: 0x8
  },
  signalSemaphoreCount: {
    byteOffset: 0x38,
    byteLength: 0x4
  },
  pSignalSemaphores: {
    byteOffset: 0x40,
    byteLength: 0x8
  },
};
/** VkDisplayPropertiesKHR **/
class VkDisplayPropertiesKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x30) / 0x4);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x30) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x30);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    this._display = null;
    this._displayName = null;
    this._physicalDimensions = new VkExtent2D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x10 });
    this._physicalResolution = new VkExtent2D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x18 });
    
    
    
    
    if (typeof opts === "object") {
      
    }
  }
  get display() {
    return this._display;
  }
  get displayName() {
    if (this._displayName !== null) {
      let str = textDecoder.decode(this._displayName);
      return str.substr(0, str.length - 1);
    } else {
      return null;
    }
  }
  get physicalDimensions() {
    return this._physicalDimensions;
  }
  get physicalResolution() {
    return this._physicalResolution;
  }
  get supportedTransforms() {
    return this.memoryViewInt32[0x8];
  }
  get planeReorderPossible() {
    return this.memoryViewUint32[0x9] !== 0;
  }
  get persistentContent() {
    return this.memoryViewUint32[0xA] !== 0;
  }
  
};

VkDisplayPropertiesKHR.prototype.flush = function flush() {
  
  return true;
};

VkDisplayPropertiesKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x30));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x30), 0x0);
  
  
  
  
};

VkDisplayPropertiesKHR.byteLength = 0x30;

VkDisplayPropertiesKHR.memoryLayout = {
  display: {
    byteOffset: 0x0,
    byteLength: 0x8
  },
  displayName: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  physicalDimensions: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
  physicalResolution: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
  supportedTransforms: {
    byteOffset: 0x20,
    byteLength: 0x4
  },
  planeReorderPossible: {
    byteOffset: 0x24,
    byteLength: 0x4
  },
  persistentContent: {
    byteOffset: 0x28,
    byteLength: 0x4
  },
};
/** VkDisplayPlanePropertiesKHR **/
class VkDisplayPlanePropertiesKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x10) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x10);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    this._currentDisplay = null;
    
    
    if (typeof opts === "object") {
      
    }
  }
  get currentDisplay() {
    return this._currentDisplay;
  }
  get currentStackIndex() {
    return this.memoryViewUint32[0x2];
  }
  
};

VkDisplayPlanePropertiesKHR.prototype.flush = function flush() {
  
  return true;
};

VkDisplayPlanePropertiesKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x10));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x10), 0x0);
};

VkDisplayPlanePropertiesKHR.byteLength = 0x10;

VkDisplayPlanePropertiesKHR.memoryLayout = {
  currentDisplay: {
    byteOffset: 0x0,
    byteLength: 0x8
  },
  currentStackIndex: {
    byteOffset: 0x8,
    byteLength: 0x4
  },
};
/** VkDisplayModeParametersKHR **/
class VkDisplayModeParametersKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0xC) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0xC);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    this._visibleRegion = new VkExtent2D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x0 });
    
    
    if (typeof opts === "object") {
      if (opts.visibleRegion !== void 0) this.visibleRegion = opts.visibleRegion;
      if (opts.refreshRate !== void 0) this.refreshRate = opts.refreshRate;
      
    }
  }
  get visibleRegion() {
    return this._visibleRegion;
  }
  set visibleRegion(value) {
    if (value !== null ) {
      value.flush();
      this._visibleRegion = value;
      
      
    } else if (value === null) {
      this._visibleRegion = null;
      
    } 
    
  }
  get refreshRate() {
    return this.memoryViewUint32[0x2];
  }
  set refreshRate(value) {
    
    this.memoryViewUint32[0x2] = value;
  }
  
};

VkDisplayModeParametersKHR.prototype.flush = function flush() {
  
  
  if (this._visibleRegion !== null) {
    this._visibleRegion.flush();
    if (this.memoryBuffer !== this._visibleRegion.memoryBuffer) {
      let srcView = new Uint8Array(this._visibleRegion.memoryBuffer);
      let dstView = new Uint8Array(this.memoryBuffer);
      dstView.set(srcView, 0x0);
      
    }
  }
  
  return true;
};

VkDisplayModeParametersKHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkDisplayModeParametersKHR.byteLength = 0xC;

VkDisplayModeParametersKHR.memoryLayout = {
  visibleRegion: {
    byteOffset: 0x0,
    byteLength: 0x8
  },
  refreshRate: {
    byteOffset: 0x8,
    byteLength: 0x4
  },
};
/** VkDisplayModePropertiesKHR **/
class VkDisplayModePropertiesKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);

    }
    this._displayMode = null;
    this._parameters = new VkDisplayModeParametersKHR({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x8 });
    
    if (typeof opts === "object") {
      
    }
  }
  get displayMode() {
    return this._displayMode;
  }
  get parameters() {
    return this._parameters;
  }
  
};

VkDisplayModePropertiesKHR.prototype.flush = function flush() {
  
  return true;
};

VkDisplayModePropertiesKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x18));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x18), 0x0);
  
  
};

VkDisplayModePropertiesKHR.byteLength = 0x18;

VkDisplayModePropertiesKHR.memoryLayout = {
  displayMode: {
    byteOffset: 0x0,
    byteLength: 0x8
  },
  parameters: {
    byteOffset: 0x8,
    byteLength: 0xC
  },
};
/** VkDisplayModeCreateInfoKHR **/
class VkDisplayModeCreateInfoKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this._parameters = new VkDisplayModeParametersKHR({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x14 });
    this.sType = 0x3B9AD1D0;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.parameters !== void 0) this.parameters = opts.parameters;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDisplayModeCreateInfoKHR.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get parameters() {
    return this._parameters;
  }
  set parameters(value) {
    if (value !== null ) {
      value.flush();
      this._parameters = value;
      
      
    } else if (value === null) {
      this._parameters = null;
      
    } 
    
  }
  
};

VkDisplayModeCreateInfoKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._parameters !== null) {
    this._parameters.flush();
    if (this.memoryBuffer !== this._parameters.memoryBuffer) {
      let srcView = new Uint8Array(this._parameters.memoryBuffer);
      let dstView = new Uint8Array(this.memoryBuffer);
      dstView.set(srcView, 0x14);
      
    }
  }
  
  return true;
};

VkDisplayModeCreateInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
};

VkDisplayModeCreateInfoKHR.byteLength = 0x20;

VkDisplayModeCreateInfoKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  flags: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  parameters: {
    byteOffset: 0x14,
    byteLength: 0xC
  },
};
/** VkDisplayPlaneCapabilitiesKHR **/
class VkDisplayPlaneCapabilitiesKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x44) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x44);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);

    }
    
    this._minSrcPosition = new VkOffset2D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x4 });
    this._maxSrcPosition = new VkOffset2D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0xC });
    this._minSrcExtent = new VkExtent2D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x14 });
    this._maxSrcExtent = new VkExtent2D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x1C });
    this._minDstPosition = new VkOffset2D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x24 });
    this._maxDstPosition = new VkOffset2D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x2C });
    this._minDstExtent = new VkExtent2D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x34 });
    this._maxDstExtent = new VkExtent2D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x3C });
    
    if (typeof opts === "object") {
      
    }
  }
  get supportedAlpha() {
    return this.memoryViewInt32[0x0];
  }
  get minSrcPosition() {
    return this._minSrcPosition;
  }
  get maxSrcPosition() {
    return this._maxSrcPosition;
  }
  get minSrcExtent() {
    return this._minSrcExtent;
  }
  get maxSrcExtent() {
    return this._maxSrcExtent;
  }
  get minDstPosition() {
    return this._minDstPosition;
  }
  get maxDstPosition() {
    return this._maxDstPosition;
  }
  get minDstExtent() {
    return this._minDstExtent;
  }
  get maxDstExtent() {
    return this._maxDstExtent;
  }
  
};

VkDisplayPlaneCapabilitiesKHR.prototype.flush = function flush() {
  
  return true;
};

VkDisplayPlaneCapabilitiesKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x44));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x44), 0x0);
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
};

VkDisplayPlaneCapabilitiesKHR.byteLength = 0x44;

VkDisplayPlaneCapabilitiesKHR.memoryLayout = {
  supportedAlpha: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  minSrcPosition: {
    byteOffset: 0x4,
    byteLength: 0x8
  },
  maxSrcPosition: {
    byteOffset: 0xC,
    byteLength: 0x8
  },
  minSrcExtent: {
    byteOffset: 0x14,
    byteLength: 0x8
  },
  maxSrcExtent: {
    byteOffset: 0x1C,
    byteLength: 0x8
  },
  minDstPosition: {
    byteOffset: 0x24,
    byteLength: 0x8
  },
  maxDstPosition: {
    byteOffset: 0x2C,
    byteLength: 0x8
  },
  minDstExtent: {
    byteOffset: 0x34,
    byteLength: 0x8
  },
  maxDstExtent: {
    byteOffset: 0x3C,
    byteLength: 0x8
  },
};
/** VkDisplaySurfaceCreateInfoKHR **/
class VkDisplaySurfaceCreateInfoKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x40) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x40) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x40) / 0x4);
      this.memoryViewFloat32 = new Float32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x40) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x40);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
      this.memoryViewFloat32 = new Float32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this._displayMode = null;
    
    
    
    
    
    this._imageExtent = new VkExtent2D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x34 });
    this.sType = 0x3B9AD1D1;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.displayMode !== void 0) this.displayMode = opts.displayMode;
      if (opts.planeIndex !== void 0) this.planeIndex = opts.planeIndex;
      if (opts.planeStackIndex !== void 0) this.planeStackIndex = opts.planeStackIndex;
      if (opts.transform !== void 0) this.transform = opts.transform;
      if (opts.globalAlpha !== void 0) this.globalAlpha = opts.globalAlpha;
      if (opts.alphaMode !== void 0) this.alphaMode = opts.alphaMode;
      if (opts.imageExtent !== void 0) this.imageExtent = opts.imageExtent;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDisplaySurfaceCreateInfoKHR.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get displayMode() {
    return this._displayMode;
  }
  set displayMode(value) {
    if (value !== null ) {
      
      this._displayMode = value;
      
      this.memoryViewBigInt64[0x3] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._displayMode = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } 
    
  }
  get planeIndex() {
    return this.memoryViewUint32[0x8];
  }
  set planeIndex(value) {
    
    this.memoryViewUint32[0x8] = value;
  }
  get planeStackIndex() {
    return this.memoryViewUint32[0x9];
  }
  set planeStackIndex(value) {
    
    this.memoryViewUint32[0x9] = value;
  }
  get transform() {
    return this.memoryViewInt32[0xA];
  }
  set transform(value) {
    
    this.memoryViewInt32[0xA] = value;
  }
  get globalAlpha() {
    return this.memoryViewFloat32[0xB];
  }
  set globalAlpha(value) {
    
    this.memoryViewFloat32[0xB] = value;
  }
  get alphaMode() {
    return this.memoryViewInt32[0xC];
  }
  set alphaMode(value) {
    
    this.memoryViewInt32[0xC] = value;
  }
  get imageExtent() {
    return this._imageExtent;
  }
  set imageExtent(value) {
    if (value !== null ) {
      value.flush();
      this._imageExtent = value;
      
      
    } else if (value === null) {
      this._imageExtent = null;
      
    } 
    
  }
  
};

VkDisplaySurfaceCreateInfoKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._imageExtent !== null) {
    this._imageExtent.flush();
    if (this.memoryBuffer !== this._imageExtent.memoryBuffer) {
      let srcView = new Uint8Array(this._imageExtent.memoryBuffer);
      let dstView = new Uint8Array(this.memoryBuffer);
      dstView.set(srcView, 0x34);
      
    }
  }
  
  return true;
};

VkDisplaySurfaceCreateInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
};

VkDisplaySurfaceCreateInfoKHR.byteLength = 0x40;

VkDisplaySurfaceCreateInfoKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  flags: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  displayMode: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
  planeIndex: {
    byteOffset: 0x20,
    byteLength: 0x4
  },
  planeStackIndex: {
    byteOffset: 0x24,
    byteLength: 0x4
  },
  transform: {
    byteOffset: 0x28,
    byteLength: 0x4
  },
  globalAlpha: {
    byteOffset: 0x2C,
    byteLength: 0x4
  },
  alphaMode: {
    byteOffset: 0x30,
    byteLength: 0x4
  },
  imageExtent: {
    byteOffset: 0x34,
    byteLength: 0x8
  },
};
/** VkDisplayPresentInfoKHR **/
class VkDisplayPresentInfoKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x38) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x38) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x38) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x38);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._srcRect = new VkRect2D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x10 });
    this._dstRect = new VkRect2D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x20 });
    
    this.sType = 0x3B9AD5B8;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.srcRect !== void 0) this.srcRect = opts.srcRect;
      if (opts.dstRect !== void 0) this.dstRect = opts.dstRect;
      if (opts.persistent !== void 0) this.persistent = opts.persistent;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDisplayPresentInfoKHR.pNext' isn't allowed to be filled");
  }
  get srcRect() {
    return this._srcRect;
  }
  set srcRect(value) {
    if (value !== null ) {
      value.flush();
      this._srcRect = value;
      
      
    } else if (value === null) {
      this._srcRect = null;
      
    } 
    
  }
  get dstRect() {
    return this._dstRect;
  }
  set dstRect(value) {
    if (value !== null ) {
      value.flush();
      this._dstRect = value;
      
      
    } else if (value === null) {
      this._dstRect = null;
      
    } 
    
  }
  get persistent() {
    return this.memoryViewUint32[0xC] !== 0;
  }
  set persistent(value) {
    this.memoryViewUint32[0xC] = value | 0;
  }
  
};

VkDisplayPresentInfoKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._srcRect !== null) {
    this._srcRect.flush();
    if (this.memoryBuffer !== this._srcRect.memoryBuffer) {
      let srcView = new Uint8Array(this._srcRect.memoryBuffer);
      let dstView = new Uint8Array(this.memoryBuffer);
      dstView.set(srcView, 0x10);
      
    }
  }
  
  
  if (this._dstRect !== null) {
    this._dstRect.flush();
    if (this.memoryBuffer !== this._dstRect.memoryBuffer) {
      let srcView = new Uint8Array(this._dstRect.memoryBuffer);
      let dstView = new Uint8Array(this.memoryBuffer);
      dstView.set(srcView, 0x20);
      
    }
  }
  
  return true;
};

VkDisplayPresentInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
  
  
};

VkDisplayPresentInfoKHR.byteLength = 0x38;

VkDisplayPresentInfoKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  srcRect: {
    byteOffset: 0x10,
    byteLength: 0x10
  },
  dstRect: {
    byteOffset: 0x20,
    byteLength: 0x10
  },
  persistent: {
    byteOffset: 0x30,
    byteLength: 0x4
  },
};
/** VkSurfaceCapabilitiesKHR **/
class VkSurfaceCapabilitiesKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x34) / 0x4);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x34) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x34);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);

    }
    
    
    this._currentExtent = new VkExtent2D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x8 });
    this._minImageExtent = new VkExtent2D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x10 });
    this._maxImageExtent = new VkExtent2D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x18 });
    
    
    
    
    
    
    if (typeof opts === "object") {
      
    }
  }
  get minImageCount() {
    return this.memoryViewUint32[0x0];
  }
  get maxImageCount() {
    return this.memoryViewUint32[0x1];
  }
  get currentExtent() {
    return this._currentExtent;
  }
  get minImageExtent() {
    return this._minImageExtent;
  }
  get maxImageExtent() {
    return this._maxImageExtent;
  }
  get maxImageArrayLayers() {
    return this.memoryViewUint32[0x8];
  }
  get supportedTransforms() {
    return this.memoryViewInt32[0x9];
  }
  get currentTransform() {
    return this.memoryViewInt32[0xA];
  }
  get supportedCompositeAlpha() {
    return this.memoryViewInt32[0xB];
  }
  get supportedUsageFlags() {
    return this.memoryViewInt32[0xC];
  }
  
};

VkSurfaceCapabilitiesKHR.prototype.flush = function flush() {
  
  return true;
};

VkSurfaceCapabilitiesKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x34));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x34), 0x0);
  
  
  
  
  
  
};

VkSurfaceCapabilitiesKHR.byteLength = 0x34;

VkSurfaceCapabilitiesKHR.memoryLayout = {
  minImageCount: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  maxImageCount: {
    byteOffset: 0x4,
    byteLength: 0x4
  },
  currentExtent: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  minImageExtent: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
  maxImageExtent: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
  maxImageArrayLayers: {
    byteOffset: 0x20,
    byteLength: 0x4
  },
  supportedTransforms: {
    byteOffset: 0x24,
    byteLength: 0x4
  },
  currentTransform: {
    byteOffset: 0x28,
    byteLength: 0x4
  },
  supportedCompositeAlpha: {
    byteOffset: 0x2C,
    byteLength: 0x4
  },
  supportedUsageFlags: {
    byteOffset: 0x30,
    byteLength: 0x4
  },
};
/** VkSurfaceFormatKHR **/
class VkSurfaceFormatKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x8) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x8);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);

    }
    
    
    
    if (typeof opts === "object") {
      
    }
  }
  get format() {
    return this.memoryViewInt32[0x0];
  }
  get colorSpace() {
    return this.memoryViewInt32[0x1];
  }
  
};

VkSurfaceFormatKHR.prototype.flush = function flush() {
  
  return true;
};

VkSurfaceFormatKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x8));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x8), 0x0);
};

VkSurfaceFormatKHR.byteLength = 0x8;

VkSurfaceFormatKHR.memoryLayout = {
  format: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  colorSpace: {
    byteOffset: 0x4,
    byteLength: 0x4
  },
};
/** VkSwapchainCreateInfoKHR **/
class VkSwapchainCreateInfoKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x68) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x68) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x68) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x68);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this._surface = null;
    
    
    
    this._imageExtent = new VkExtent2D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x2C });
    
    
    
    
    this._pQueueFamilyIndices = null;
    
    
    
    
    this._oldSwapchain = null;
    this.sType = 0x3B9ACDE8;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.surface !== void 0) this.surface = opts.surface;
      if (opts.minImageCount !== void 0) this.minImageCount = opts.minImageCount;
      if (opts.imageFormat !== void 0) this.imageFormat = opts.imageFormat;
      if (opts.imageColorSpace !== void 0) this.imageColorSpace = opts.imageColorSpace;
      if (opts.imageExtent !== void 0) this.imageExtent = opts.imageExtent;
      if (opts.imageArrayLayers !== void 0) this.imageArrayLayers = opts.imageArrayLayers;
      if (opts.imageUsage !== void 0) this.imageUsage = opts.imageUsage;
      if (opts.imageSharingMode !== void 0) this.imageSharingMode = opts.imageSharingMode;
      if (opts.queueFamilyIndexCount !== void 0) this.queueFamilyIndexCount = opts.queueFamilyIndexCount;
      if (opts.pQueueFamilyIndices !== void 0) this.pQueueFamilyIndices = opts.pQueueFamilyIndices;
      if (opts.preTransform !== void 0) this.preTransform = opts.preTransform;
      if (opts.compositeAlpha !== void 0) this.compositeAlpha = opts.compositeAlpha;
      if (opts.presentMode !== void 0) this.presentMode = opts.presentMode;
      if (opts.clipped !== void 0) this.clipped = opts.clipped;
      if (opts.oldSwapchain !== void 0) this.oldSwapchain = opts.oldSwapchain;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null ) {
      let {sType} = value;
      
      switch (sType) {
          
        case 0x3B9C2D7B:
        case 0x3B9BB46C:
        case 0x3B9E0A09:
        case 0x3B9D0838:
        case 0x3B9EAE18:
        case 0x3B9EAE19:
          break;
        default:
          throw new TypeError("Invalid type for 'VkSwapchainCreateInfoKHR.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get surface() {
    return this._surface;
  }
  set surface(value) {
    if (value !== null ) {
      
      this._surface = value;
      
      this.memoryViewBigInt64[0x3] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._surface = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } 
    
  }
  get minImageCount() {
    return this.memoryViewUint32[0x8];
  }
  set minImageCount(value) {
    
    this.memoryViewUint32[0x8] = value;
  }
  get imageFormat() {
    return this.memoryViewInt32[0x9];
  }
  set imageFormat(value) {
    
    this.memoryViewInt32[0x9] = value;
  }
  get imageColorSpace() {
    return this.memoryViewInt32[0xA];
  }
  set imageColorSpace(value) {
    
    this.memoryViewInt32[0xA] = value;
  }
  get imageExtent() {
    return this._imageExtent;
  }
  set imageExtent(value) {
    if (value !== null ) {
      value.flush();
      this._imageExtent = value;
      
      
    } else if (value === null) {
      this._imageExtent = null;
      
    } 
    
  }
  get imageArrayLayers() {
    return this.memoryViewUint32[0xD];
  }
  set imageArrayLayers(value) {
    
    this.memoryViewUint32[0xD] = value;
  }
  get imageUsage() {
    return this.memoryViewInt32[0xE];
  }
  set imageUsage(value) {
    
    this.memoryViewInt32[0xE] = value;
  }
  get imageSharingMode() {
    return this.memoryViewInt32[0xF];
  }
  set imageSharingMode(value) {
    
    this.memoryViewInt32[0xF] = value;
  }
  get queueFamilyIndexCount() {
    return this.memoryViewUint32[0x10];
  }
  set queueFamilyIndexCount(value) {
    
    this.memoryViewUint32[0x10] = value;
  }
  get pQueueFamilyIndices() {
    return this._pQueueFamilyIndices;
  }
  set pQueueFamilyIndices(value) {
    if (value !== null ) {
      this._pQueueFamilyIndices = value;
      this.memoryViewBigInt64[0x9] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pQueueFamilyIndices = null;
      this.memoryViewBigInt64[0x9] = BI0;
    } 
    
  }
  get preTransform() {
    return this.memoryViewInt32[0x14];
  }
  set preTransform(value) {
    
    this.memoryViewInt32[0x14] = value;
  }
  get compositeAlpha() {
    return this.memoryViewInt32[0x15];
  }
  set compositeAlpha(value) {
    
    this.memoryViewInt32[0x15] = value;
  }
  get presentMode() {
    return this.memoryViewInt32[0x16];
  }
  set presentMode(value) {
    
    this.memoryViewInt32[0x16] = value;
  }
  get clipped() {
    return this.memoryViewUint32[0x17] !== 0;
  }
  set clipped(value) {
    this.memoryViewUint32[0x17] = value | 0;
  }
  get oldSwapchain() {
    return this._oldSwapchain;
  }
  set oldSwapchain(value) {
    if (value !== null ) {
      
      this._oldSwapchain = value;
      
      this.memoryViewBigInt64[0xC] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._oldSwapchain = null;
      this.memoryViewBigInt64[0xC] = BI0;
    } 
    
  }
  
};

VkSwapchainCreateInfoKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._imageExtent !== null) {
    this._imageExtent.flush();
    if (this.memoryBuffer !== this._imageExtent.memoryBuffer) {
      let srcView = new Uint8Array(this._imageExtent.memoryBuffer);
      let dstView = new Uint8Array(this.memoryBuffer);
      dstView.set(srcView, 0x2C);
      
    }
  }
  
  return true;
};

VkSwapchainCreateInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
};

VkSwapchainCreateInfoKHR.byteLength = 0x68;

VkSwapchainCreateInfoKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  flags: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  surface: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
  minImageCount: {
    byteOffset: 0x20,
    byteLength: 0x4
  },
  imageFormat: {
    byteOffset: 0x24,
    byteLength: 0x4
  },
  imageColorSpace: {
    byteOffset: 0x28,
    byteLength: 0x4
  },
  imageExtent: {
    byteOffset: 0x2C,
    byteLength: 0x8
  },
  imageArrayLayers: {
    byteOffset: 0x34,
    byteLength: 0x4
  },
  imageUsage: {
    byteOffset: 0x38,
    byteLength: 0x4
  },
  imageSharingMode: {
    byteOffset: 0x3C,
    byteLength: 0x4
  },
  queueFamilyIndexCount: {
    byteOffset: 0x40,
    byteLength: 0x4
  },
  pQueueFamilyIndices: {
    byteOffset: 0x48,
    byteLength: 0x8
  },
  preTransform: {
    byteOffset: 0x50,
    byteLength: 0x4
  },
  compositeAlpha: {
    byteOffset: 0x54,
    byteLength: 0x4
  },
  presentMode: {
    byteOffset: 0x58,
    byteLength: 0x4
  },
  clipped: {
    byteOffset: 0x5C,
    byteLength: 0x4
  },
  oldSwapchain: {
    byteOffset: 0x60,
    byteLength: 0x8
  },
};
/** VkPresentInfoKHR **/
class VkPresentInfoKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x40) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x40) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x40) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x40);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this._pWaitSemaphores = null;
    this._pWaitSemaphoresNative = null;
    
    this._pSwapchains = null;
    this._pSwapchainsNative = null;
    this._pImageIndices = null;
    this._pResults = null;
    this.sType = 0x3B9ACDE9;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.waitSemaphoreCount !== void 0) this.waitSemaphoreCount = opts.waitSemaphoreCount;
      if (opts.pWaitSemaphores !== void 0) this.pWaitSemaphores = opts.pWaitSemaphores;
      if (opts.swapchainCount !== void 0) this.swapchainCount = opts.swapchainCount;
      if (opts.pSwapchains !== void 0) this.pSwapchains = opts.pSwapchains;
      if (opts.pImageIndices !== void 0) this.pImageIndices = opts.pImageIndices;
      if (opts.pResults !== void 0) this.pResults = opts.pResults;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null ) {
      let {sType} = value;
      
      switch (sType) {
          
        case 0x3B9AD5B8:
        case 0x3B9C1220:
        case 0x3B9BB46B:
        case 0x3B9C3160:
        case 0x3B9DB418:
          break;
        default:
          throw new TypeError("Invalid type for 'VkPresentInfoKHR.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  get waitSemaphoreCount() {
    return this.memoryViewUint32[0x4];
  }
  set waitSemaphoreCount(value) {
    
    this.memoryViewUint32[0x4] = value;
  }
  get pWaitSemaphores() {
    return this._pWaitSemaphores;
  }
  set pWaitSemaphores(value) {
    if (value !== null ) {
      this._pWaitSemaphores = value;
    } else if (value === null) {
      this._pWaitSemaphores = null;
    } 
    
  }
  get swapchainCount() {
    return this.memoryViewUint32[0x8];
  }
  set swapchainCount(value) {
    
    this.memoryViewUint32[0x8] = value;
  }
  get pSwapchains() {
    return this._pSwapchains;
  }
  set pSwapchains(value) {
    if (value !== null ) {
      this._pSwapchains = value;
    } else if (value === null) {
      this._pSwapchains = null;
    } 
    
  }
  get pImageIndices() {
    return this._pImageIndices;
  }
  set pImageIndices(value) {
    if (value !== null ) {
      this._pImageIndices = value;
      this.memoryViewBigInt64[0x6] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pImageIndices = null;
      this.memoryViewBigInt64[0x6] = BI0;
    } 
    
  }
  get pResults() {
    return this._pResults;
  }
  set pResults(value) {
    if (value !== null ) {
      this._pResults = value;
      this.memoryViewBigInt64[0x7] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pResults = null;
      this.memoryViewBigInt64[0x7] = BI0;
    } 
    
  }
  
};

VkPresentInfoKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pWaitSemaphores !== null) {
    let array = this._pWaitSemaphores;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pWaitSemaphoresNative = nativeArray;
    this.memoryViewBigInt64[0x3] = nativeArray.address;
  }
  
  
  if (this._pSwapchains !== null) {
    let array = this._pSwapchains;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pSwapchainsNative = nativeArray;
    this.memoryViewBigInt64[0x5] = nativeArray.address;
  }
  
  return true;
};

VkPresentInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
  
  
};

VkPresentInfoKHR.byteLength = 0x40;

VkPresentInfoKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  waitSemaphoreCount: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  pWaitSemaphores: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
  swapchainCount: {
    byteOffset: 0x20,
    byteLength: 0x4
  },
  pSwapchains: {
    byteOffset: 0x28,
    byteLength: 0x8
  },
  pImageIndices: {
    byteOffset: 0x30,
    byteLength: 0x8
  },
  pResults: {
    byteOffset: 0x38,
    byteLength: 0x8
  },
};
/** VkDebugReportCallbackCreateInfoEXT **/
class VkDebugReportCallbackCreateInfoEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x28);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this._pUserData = null;
    this.sType = 0x3B9AF4F8;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.pUserData !== void 0) this.pUserData = opts.pUserData;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDebugReportCallbackCreateInfoEXT.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get pUserData() {
    return this._pUserData;
  }
  set pUserData(value) {
    if (value !== null ) {
      this._pUserData = value;
      this.memoryViewBigInt64[0x4] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pUserData = null;
      this.memoryViewBigInt64[0x4] = BI0;
    } 
    
  }
  
};

VkDebugReportCallbackCreateInfoEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDebugReportCallbackCreateInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkDebugReportCallbackCreateInfoEXT.byteLength = 0x28;

VkDebugReportCallbackCreateInfoEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  flags: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  pUserData: {
    byteOffset: 0x20,
    byteLength: 0x8
  },
};
/** VkValidationFlagsEXT **/
class VkValidationFlagsEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this._pDisabledValidationChecks = null;
    this.sType = 0x3B9BB848;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.disabledValidationCheckCount !== void 0) this.disabledValidationCheckCount = opts.disabledValidationCheckCount;
      if (opts.pDisabledValidationChecks !== void 0) this.pDisabledValidationChecks = opts.pDisabledValidationChecks;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkValidationFlagsEXT.pNext' isn't allowed to be filled");
  }
  get disabledValidationCheckCount() {
    return this.memoryViewUint32[0x4];
  }
  set disabledValidationCheckCount(value) {
    
    this.memoryViewUint32[0x4] = value;
  }
  get pDisabledValidationChecks() {
    return this._pDisabledValidationChecks;
  }
  set pDisabledValidationChecks(value) {
    if (value !== null ) {
      this._pDisabledValidationChecks = value;
      this.memoryViewBigInt64[0x3] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pDisabledValidationChecks = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } 
    
  }
  
};

VkValidationFlagsEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkValidationFlagsEXT.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkValidationFlagsEXT.byteLength = 0x20;

VkValidationFlagsEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  disabledValidationCheckCount: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  pDisabledValidationChecks: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
};
/** VkValidationFeaturesEXT **/
class VkValidationFeaturesEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x30) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x30) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x30) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x30);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this._pEnabledValidationFeatures = null;
    
    this._pDisabledValidationFeatures = null;
    this.sType = 0x3B9E8ED8;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.enabledValidationFeatureCount !== void 0) this.enabledValidationFeatureCount = opts.enabledValidationFeatureCount;
      if (opts.pEnabledValidationFeatures !== void 0) this.pEnabledValidationFeatures = opts.pEnabledValidationFeatures;
      if (opts.disabledValidationFeatureCount !== void 0) this.disabledValidationFeatureCount = opts.disabledValidationFeatureCount;
      if (opts.pDisabledValidationFeatures !== void 0) this.pDisabledValidationFeatures = opts.pDisabledValidationFeatures;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkValidationFeaturesEXT.pNext' isn't allowed to be filled");
  }
  get enabledValidationFeatureCount() {
    return this.memoryViewUint32[0x4];
  }
  set enabledValidationFeatureCount(value) {
    
    this.memoryViewUint32[0x4] = value;
  }
  get pEnabledValidationFeatures() {
    return this._pEnabledValidationFeatures;
  }
  set pEnabledValidationFeatures(value) {
    if (value !== null ) {
      this._pEnabledValidationFeatures = value;
      this.memoryViewBigInt64[0x3] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pEnabledValidationFeatures = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } 
    
  }
  get disabledValidationFeatureCount() {
    return this.memoryViewUint32[0x8];
  }
  set disabledValidationFeatureCount(value) {
    
    this.memoryViewUint32[0x8] = value;
  }
  get pDisabledValidationFeatures() {
    return this._pDisabledValidationFeatures;
  }
  set pDisabledValidationFeatures(value) {
    if (value !== null ) {
      this._pDisabledValidationFeatures = value;
      this.memoryViewBigInt64[0x5] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pDisabledValidationFeatures = null;
      this.memoryViewBigInt64[0x5] = BI0;
    } 
    
  }
  
};

VkValidationFeaturesEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkValidationFeaturesEXT.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkValidationFeaturesEXT.byteLength = 0x30;

VkValidationFeaturesEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  enabledValidationFeatureCount: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  pEnabledValidationFeatures: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
  disabledValidationFeatureCount: {
    byteOffset: 0x20,
    byteLength: 0x4
  },
  pDisabledValidationFeatures: {
    byteOffset: 0x28,
    byteLength: 0x8
  },
};
/** VkPipelineRasterizationStateRasterizationOrderAMD **/
class VkPipelineRasterizationStateRasterizationOrderAMD {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9B1050;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.rasterizationOrder !== void 0) this.rasterizationOrder = opts.rasterizationOrder;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPipelineRasterizationStateRasterizationOrderAMD.pNext' isn't allowed to be filled");
  }
  get rasterizationOrder() {
    return this.memoryViewInt32[0x4];
  }
  set rasterizationOrder(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkPipelineRasterizationStateRasterizationOrderAMD.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPipelineRasterizationStateRasterizationOrderAMD.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPipelineRasterizationStateRasterizationOrderAMD.byteLength = 0x18;

VkPipelineRasterizationStateRasterizationOrderAMD.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  rasterizationOrder: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkDebugMarkerObjectNameInfoEXT **/
class VkDebugMarkerObjectNameInfoEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x28);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    this._pObjectName = null;
    this.sType = 0x3B9B1FF0;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.objectType !== void 0) this.objectType = opts.objectType;
      if (opts.object !== void 0) this.object = opts.object;
      if (opts.pObjectName !== void 0) this.pObjectName = opts.pObjectName;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDebugMarkerObjectNameInfoEXT.pNext' isn't allowed to be filled");
  }
  get objectType() {
    return this.memoryViewInt32[0x4];
  }
  set objectType(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get object() {
    return this.memoryViewBigUint64[0x3];
  }
  set object(value) {
    
    this.memoryViewBigUint64[0x3] = BigInt(value);
  }
  get pObjectName() {
    if (this._pObjectName !== null) {
      let str = textDecoder.decode(this._pObjectName);
      return str.substr(0, str.length - 1);
    } else {
      return null;
    }
  }
  set pObjectName(value) {
    if (value !== null ) {
      this._pObjectName = textEncoder.encode(value + NULLT).buffer;
      this.memoryViewBigInt64[0x4] = getAddressFromArrayBuffer(this._pObjectName);
    } else if (value === null) {
      this._pObjectName = null;
      this.memoryViewBigInt64[0x4] = BI0;
    } 
    
  }
  
};

VkDebugMarkerObjectNameInfoEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDebugMarkerObjectNameInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkDebugMarkerObjectNameInfoEXT.byteLength = 0x28;

VkDebugMarkerObjectNameInfoEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  objectType: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  object: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
  pObjectName: {
    byteOffset: 0x20,
    byteLength: 0x8
  },
};
/** VkDebugMarkerObjectTagInfoEXT **/
class VkDebugMarkerObjectTagInfoEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x38) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x38) / 0x8);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x38) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x38);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    
    
    this._pTag = null;
    this.sType = 0x3B9B1FF1;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.objectType !== void 0) this.objectType = opts.objectType;
      if (opts.object !== void 0) this.object = opts.object;
      if (opts.tagName !== void 0) this.tagName = opts.tagName;
      if (opts.tagSize !== void 0) this.tagSize = opts.tagSize;
      if (opts.pTag !== void 0) this.pTag = opts.pTag;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDebugMarkerObjectTagInfoEXT.pNext' isn't allowed to be filled");
  }
  get objectType() {
    return this.memoryViewInt32[0x4];
  }
  set objectType(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get object() {
    return this.memoryViewBigUint64[0x3];
  }
  set object(value) {
    
    this.memoryViewBigUint64[0x3] = BigInt(value);
  }
  get tagName() {
    return this.memoryViewBigUint64[0x4];
  }
  set tagName(value) {
    
    this.memoryViewBigUint64[0x4] = BigInt(value);
  }
  get tagSize() {
    return this.memoryViewBigInt64[0x5];
  }
  set tagSize(value) {
    
    this.memoryViewBigInt64[0x5] = BigInt(value);
  }
  get pTag() {
    return this._pTag;
  }
  set pTag(value) {
    if (value !== null ) {
      this._pTag = value;
      this.memoryViewBigInt64[0x6] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pTag = null;
      this.memoryViewBigInt64[0x6] = BI0;
    } 
    
  }
  
};

VkDebugMarkerObjectTagInfoEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDebugMarkerObjectTagInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkDebugMarkerObjectTagInfoEXT.byteLength = 0x38;

VkDebugMarkerObjectTagInfoEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  objectType: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  object: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
  tagName: {
    byteOffset: 0x20,
    byteLength: 0x8
  },
  tagSize: {
    byteOffset: 0x28,
    byteLength: 0x8
  },
  pTag: {
    byteOffset: 0x30,
    byteLength: 0x8
  },
};
/** VkDebugMarkerMarkerInfoEXT **/
class VkDebugMarkerMarkerInfoEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);
      this.memoryViewFloat32 = new Float32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x28);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewFloat32 = new Float32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._pMarkerName = null;
    this._color = [...Array(4)].fill(0x0);
    this.sType = 0x3B9B1FF2;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.pMarkerName !== void 0) this.pMarkerName = opts.pMarkerName;
      if (opts.color !== void 0) this.color = opts.color;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDebugMarkerMarkerInfoEXT.pNext' isn't allowed to be filled");
  }
  get pMarkerName() {
    if (this._pMarkerName !== null) {
      let str = textDecoder.decode(this._pMarkerName);
      return str.substr(0, str.length - 1);
    } else {
      return null;
    }
  }
  set pMarkerName(value) {
    if (value !== null ) {
      this._pMarkerName = textEncoder.encode(value + NULLT).buffer;
      this.memoryViewBigInt64[0x2] = getAddressFromArrayBuffer(this._pMarkerName);
    } else if (value === null) {
      this._pMarkerName = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } 
    
  }
  get color() {
    return this._color;
  }
  set color(value) {
    if (value !== null ) {
      this._color = value;
    } else if (value === null) {
      this._color = null;
    } 
    
  }
  
};

VkDebugMarkerMarkerInfoEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._color !== null) {
    let array = this._color;
    
    for (let ii = 0; ii < array.length; ++ii) {
      this.memoryViewFloat32[0x6 + ii] = array[ii];
    };
  } else {
    this.memoryViewFloat32[0x6] = 0x0;
  }
  
  return true;
};

VkDebugMarkerMarkerInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
};

VkDebugMarkerMarkerInfoEXT.byteLength = 0x28;

VkDebugMarkerMarkerInfoEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  pMarkerName: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
  color: {
    byteOffset: 0x18,
    byteLength: 0x10
  },
};
/** VkDedicatedAllocationImageCreateInfoNV **/
class VkDedicatedAllocationImageCreateInfoNV {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9B2F90;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.dedicatedAllocation !== void 0) this.dedicatedAllocation = opts.dedicatedAllocation;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDedicatedAllocationImageCreateInfoNV.pNext' isn't allowed to be filled");
  }
  get dedicatedAllocation() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set dedicatedAllocation(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  
};

VkDedicatedAllocationImageCreateInfoNV.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDedicatedAllocationImageCreateInfoNV.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkDedicatedAllocationImageCreateInfoNV.byteLength = 0x18;

VkDedicatedAllocationImageCreateInfoNV.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  dedicatedAllocation: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkDedicatedAllocationBufferCreateInfoNV **/
class VkDedicatedAllocationBufferCreateInfoNV {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9B2F91;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.dedicatedAllocation !== void 0) this.dedicatedAllocation = opts.dedicatedAllocation;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDedicatedAllocationBufferCreateInfoNV.pNext' isn't allowed to be filled");
  }
  get dedicatedAllocation() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set dedicatedAllocation(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  
};

VkDedicatedAllocationBufferCreateInfoNV.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDedicatedAllocationBufferCreateInfoNV.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkDedicatedAllocationBufferCreateInfoNV.byteLength = 0x18;

VkDedicatedAllocationBufferCreateInfoNV.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  dedicatedAllocation: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkDedicatedAllocationMemoryAllocateInfoNV **/
class VkDedicatedAllocationMemoryAllocateInfoNV {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._image = null;
    this._buffer = null;
    this.sType = 0x3B9B2F92;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.image !== void 0) this.image = opts.image;
      if (opts.buffer !== void 0) this.buffer = opts.buffer;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDedicatedAllocationMemoryAllocateInfoNV.pNext' isn't allowed to be filled");
  }
  get image() {
    return this._image;
  }
  set image(value) {
    if (value !== null ) {
      
      this._image = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._image = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } 
    
  }
  get buffer() {
    return this._buffer;
  }
  set buffer(value) {
    if (value !== null ) {
      
      this._buffer = value;
      
      this.memoryViewBigInt64[0x3] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._buffer = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } 
    
  }
  
};

VkDedicatedAllocationMemoryAllocateInfoNV.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDedicatedAllocationMemoryAllocateInfoNV.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkDedicatedAllocationMemoryAllocateInfoNV.byteLength = 0x20;

VkDedicatedAllocationMemoryAllocateInfoNV.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  image: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
  buffer: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
};
/** VkExternalImageFormatPropertiesNV **/
class VkExternalImageFormatPropertiesNV {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x30) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x30);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);

    }
    this._imageFormatProperties = new VkImageFormatProperties({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x0 });
    
    
    
    
    if (typeof opts === "object") {
      
    }
  }
  get imageFormatProperties() {
    return this._imageFormatProperties;
  }
  get externalMemoryFeatures() {
    return this.memoryViewInt32[0x8];
  }
  get exportFromImportedHandleTypes() {
    return this.memoryViewInt32[0x9];
  }
  get compatibleHandleTypes() {
    return this.memoryViewInt32[0xA];
  }
  
};

VkExternalImageFormatPropertiesNV.prototype.flush = function flush() {
  
  return true;
};

VkExternalImageFormatPropertiesNV.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x30));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x30), 0x0);
  
  
};

VkExternalImageFormatPropertiesNV.byteLength = 0x30;

VkExternalImageFormatPropertiesNV.memoryLayout = {
  imageFormatProperties: {
    byteOffset: 0x0,
    byteLength: 0x20
  },
  externalMemoryFeatures: {
    byteOffset: 0x20,
    byteLength: 0x4
  },
  exportFromImportedHandleTypes: {
    byteOffset: 0x24,
    byteLength: 0x4
  },
  compatibleHandleTypes: {
    byteOffset: 0x28,
    byteLength: 0x4
  },
};
/** VkExternalMemoryImageCreateInfoNV **/
class VkExternalMemoryImageCreateInfoNV {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9BA4C0;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleTypes !== void 0) this.handleTypes = opts.handleTypes;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkExternalMemoryImageCreateInfoNV.pNext' isn't allowed to be filled");
  }
  get handleTypes() {
    return this.memoryViewInt32[0x4];
  }
  set handleTypes(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkExternalMemoryImageCreateInfoNV.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkExternalMemoryImageCreateInfoNV.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkExternalMemoryImageCreateInfoNV.byteLength = 0x18;

VkExternalMemoryImageCreateInfoNV.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  handleTypes: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkExportMemoryAllocateInfoNV **/
class VkExportMemoryAllocateInfoNV {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9BA4C1;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleTypes !== void 0) this.handleTypes = opts.handleTypes;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkExportMemoryAllocateInfoNV.pNext' isn't allowed to be filled");
  }
  get handleTypes() {
    return this.memoryViewInt32[0x4];
  }
  set handleTypes(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkExportMemoryAllocateInfoNV.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkExportMemoryAllocateInfoNV.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkExportMemoryAllocateInfoNV.byteLength = 0x18;

VkExportMemoryAllocateInfoNV.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  handleTypes: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkDeviceGeneratedCommandsFeaturesNVX **/
class VkDeviceGeneratedCommandsFeaturesNVX {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9C19F5;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.computeBindingPointSupport !== void 0) this.computeBindingPointSupport = opts.computeBindingPointSupport;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDeviceGeneratedCommandsFeaturesNVX.pNext' isn't allowed to be filled");
  }
  get computeBindingPointSupport() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set computeBindingPointSupport(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  
};

VkDeviceGeneratedCommandsFeaturesNVX.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDeviceGeneratedCommandsFeaturesNVX.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkDeviceGeneratedCommandsFeaturesNVX.byteLength = 0x18;

VkDeviceGeneratedCommandsFeaturesNVX.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  computeBindingPointSupport: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkDeviceGeneratedCommandsLimitsNVX **/
class VkDeviceGeneratedCommandsLimitsNVX {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x28);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    
    
    
    this.sType = 0x3B9C19F4;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.maxIndirectCommandsLayoutTokenCount !== void 0) this.maxIndirectCommandsLayoutTokenCount = opts.maxIndirectCommandsLayoutTokenCount;
      if (opts.maxObjectEntryCounts !== void 0) this.maxObjectEntryCounts = opts.maxObjectEntryCounts;
      if (opts.minSequenceCountBufferOffsetAlignment !== void 0) this.minSequenceCountBufferOffsetAlignment = opts.minSequenceCountBufferOffsetAlignment;
      if (opts.minSequenceIndexBufferOffsetAlignment !== void 0) this.minSequenceIndexBufferOffsetAlignment = opts.minSequenceIndexBufferOffsetAlignment;
      if (opts.minCommandsTokenBufferOffsetAlignment !== void 0) this.minCommandsTokenBufferOffsetAlignment = opts.minCommandsTokenBufferOffsetAlignment;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDeviceGeneratedCommandsLimitsNVX.pNext' isn't allowed to be filled");
  }
  get maxIndirectCommandsLayoutTokenCount() {
    return this.memoryViewUint32[0x4];
  }
  set maxIndirectCommandsLayoutTokenCount(value) {
    
    this.memoryViewUint32[0x4] = value;
  }
  get maxObjectEntryCounts() {
    return this.memoryViewUint32[0x5];
  }
  set maxObjectEntryCounts(value) {
    
    this.memoryViewUint32[0x5] = value;
  }
  get minSequenceCountBufferOffsetAlignment() {
    return this.memoryViewUint32[0x6];
  }
  set minSequenceCountBufferOffsetAlignment(value) {
    
    this.memoryViewUint32[0x6] = value;
  }
  get minSequenceIndexBufferOffsetAlignment() {
    return this.memoryViewUint32[0x7];
  }
  set minSequenceIndexBufferOffsetAlignment(value) {
    
    this.memoryViewUint32[0x7] = value;
  }
  get minCommandsTokenBufferOffsetAlignment() {
    return this.memoryViewUint32[0x8];
  }
  set minCommandsTokenBufferOffsetAlignment(value) {
    
    this.memoryViewUint32[0x8] = value;
  }
  
};

VkDeviceGeneratedCommandsLimitsNVX.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDeviceGeneratedCommandsLimitsNVX.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkDeviceGeneratedCommandsLimitsNVX.byteLength = 0x28;

VkDeviceGeneratedCommandsLimitsNVX.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  maxIndirectCommandsLayoutTokenCount: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  maxObjectEntryCounts: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  minSequenceCountBufferOffsetAlignment: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
  minSequenceIndexBufferOffsetAlignment: {
    byteOffset: 0x1C,
    byteLength: 0x4
  },
  minCommandsTokenBufferOffsetAlignment: {
    byteOffset: 0x20,
    byteLength: 0x4
  },
};
/** VkIndirectCommandsTokenNVX **/
class VkIndirectCommandsTokenNVX {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);

    }
    
    this._buffer = null;
    
    
    if (typeof opts === "object") {
      if (opts.tokenType !== void 0) this.tokenType = opts.tokenType;
      if (opts.buffer !== void 0) this.buffer = opts.buffer;
      if (opts.offset !== void 0) this.offset = opts.offset;
      
    }
  }
  get tokenType() {
    return this.memoryViewInt32[0x0];
  }
  set tokenType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get buffer() {
    return this._buffer;
  }
  set buffer(value) {
    if (value !== null ) {
      
      this._buffer = value;
      
      this.memoryViewBigInt64[0x1] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._buffer = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  get offset() {
    return this.memoryViewBigUint64[0x2];
  }
  set offset(value) {
    
    this.memoryViewBigUint64[0x2] = BigInt(value);
  }
  
};

VkIndirectCommandsTokenNVX.prototype.flush = function flush() {
  
  return true;
};

VkIndirectCommandsTokenNVX.prototype.reflect = function reflect(memoryAddress) {
  
};

VkIndirectCommandsTokenNVX.byteLength = 0x18;

VkIndirectCommandsTokenNVX.memoryLayout = {
  tokenType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  buffer: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  offset: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
};
/** VkIndirectCommandsLayoutTokenNVX **/
class VkIndirectCommandsLayoutTokenNVX {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x10) / 0x4);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x10) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x10);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    
    
    
    
    if (typeof opts === "object") {
      if (opts.tokenType !== void 0) this.tokenType = opts.tokenType;
      if (opts.bindingUnit !== void 0) this.bindingUnit = opts.bindingUnit;
      if (opts.dynamicCount !== void 0) this.dynamicCount = opts.dynamicCount;
      if (opts.divisor !== void 0) this.divisor = opts.divisor;
      
    }
  }
  get tokenType() {
    return this.memoryViewInt32[0x0];
  }
  set tokenType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get bindingUnit() {
    return this.memoryViewUint32[0x1];
  }
  set bindingUnit(value) {
    
    this.memoryViewUint32[0x1] = value;
  }
  get dynamicCount() {
    return this.memoryViewUint32[0x2];
  }
  set dynamicCount(value) {
    
    this.memoryViewUint32[0x2] = value;
  }
  get divisor() {
    return this.memoryViewUint32[0x3];
  }
  set divisor(value) {
    
    this.memoryViewUint32[0x3] = value;
  }
  
};

VkIndirectCommandsLayoutTokenNVX.prototype.flush = function flush() {
  
  return true;
};

VkIndirectCommandsLayoutTokenNVX.prototype.reflect = function reflect(memoryAddress) {
  
};

VkIndirectCommandsLayoutTokenNVX.byteLength = 0x10;

VkIndirectCommandsLayoutTokenNVX.memoryLayout = {
  tokenType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  bindingUnit: {
    byteOffset: 0x4,
    byteLength: 0x4
  },
  dynamicCount: {
    byteOffset: 0x8,
    byteLength: 0x4
  },
  divisor: {
    byteOffset: 0xC,
    byteLength: 0x4
  },
};
/** VkIndirectCommandsLayoutCreateInfoNVX **/
class VkIndirectCommandsLayoutCreateInfoNVX {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x28);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    
    this._pTokens = null;
    this._pTokensNative = null;
    this.sType = 0x3B9C19F1;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.pipelineBindPoint !== void 0) this.pipelineBindPoint = opts.pipelineBindPoint;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.tokenCount !== void 0) this.tokenCount = opts.tokenCount;
      if (opts.pTokens !== void 0) this.pTokens = opts.pTokens;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkIndirectCommandsLayoutCreateInfoNVX.pNext' isn't allowed to be filled");
  }
  get pipelineBindPoint() {
    return this.memoryViewInt32[0x4];
  }
  set pipelineBindPoint(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get flags() {
    return this.memoryViewInt32[0x5];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x5] = value;
  }
  get tokenCount() {
    return this.memoryViewUint32[0x6];
  }
  set tokenCount(value) {
    
    this.memoryViewUint32[0x6] = value;
  }
  get pTokens() {
    return this._pTokens;
  }
  set pTokens(value) {
    if (value !== null ) {
      this._pTokens = value;
    } else if (value === null) {
      this._pTokens = null;
    } 
    
  }
  
};

VkIndirectCommandsLayoutCreateInfoNVX.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pTokens !== null) {
    let array = this._pTokens;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pTokensNative = nativeArray;
    this.memoryViewBigInt64[0x4] = nativeArray.address;
  }
  
  return true;
};

VkIndirectCommandsLayoutCreateInfoNVX.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
};

VkIndirectCommandsLayoutCreateInfoNVX.byteLength = 0x28;

VkIndirectCommandsLayoutCreateInfoNVX.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  pipelineBindPoint: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  flags: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  tokenCount: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
  pTokens: {
    byteOffset: 0x20,
    byteLength: 0x8
  },
};
/** VkCmdProcessCommandsInfoNVX **/
class VkCmdProcessCommandsInfoNVX {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x60) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x60) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x60) / 0x4);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x60) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x60);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._objectTable = null;
    this._indirectCommandsLayout = null;
    
    this._pIndirectCommandsTokens = null;
    this._pIndirectCommandsTokensNative = null;
    
    this._targetCommandBuffer = null;
    this._sequencesCountBuffer = null;
    
    this._sequencesIndexBuffer = null;
    
    this.sType = 0x3B9C19F2;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.objectTable !== void 0) this.objectTable = opts.objectTable;
      if (opts.indirectCommandsLayout !== void 0) this.indirectCommandsLayout = opts.indirectCommandsLayout;
      if (opts.indirectCommandsTokenCount !== void 0) this.indirectCommandsTokenCount = opts.indirectCommandsTokenCount;
      if (opts.pIndirectCommandsTokens !== void 0) this.pIndirectCommandsTokens = opts.pIndirectCommandsTokens;
      if (opts.maxSequencesCount !== void 0) this.maxSequencesCount = opts.maxSequencesCount;
      if (opts.targetCommandBuffer !== void 0) this.targetCommandBuffer = opts.targetCommandBuffer;
      if (opts.sequencesCountBuffer !== void 0) this.sequencesCountBuffer = opts.sequencesCountBuffer;
      if (opts.sequencesCountOffset !== void 0) this.sequencesCountOffset = opts.sequencesCountOffset;
      if (opts.sequencesIndexBuffer !== void 0) this.sequencesIndexBuffer = opts.sequencesIndexBuffer;
      if (opts.sequencesIndexOffset !== void 0) this.sequencesIndexOffset = opts.sequencesIndexOffset;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkCmdProcessCommandsInfoNVX.pNext' isn't allowed to be filled");
  }
  get objectTable() {
    return this._objectTable;
  }
  set objectTable(value) {
    if (value !== null ) {
      
      this._objectTable = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._objectTable = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } 
    
  }
  get indirectCommandsLayout() {
    return this._indirectCommandsLayout;
  }
  set indirectCommandsLayout(value) {
    if (value !== null ) {
      
      this._indirectCommandsLayout = value;
      
      this.memoryViewBigInt64[0x3] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._indirectCommandsLayout = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } 
    
  }
  get indirectCommandsTokenCount() {
    return this.memoryViewUint32[0x8];
  }
  set indirectCommandsTokenCount(value) {
    
    this.memoryViewUint32[0x8] = value;
  }
  get pIndirectCommandsTokens() {
    return this._pIndirectCommandsTokens;
  }
  set pIndirectCommandsTokens(value) {
    if (value !== null ) {
      this._pIndirectCommandsTokens = value;
    } else if (value === null) {
      this._pIndirectCommandsTokens = null;
    } 
    
  }
  get maxSequencesCount() {
    return this.memoryViewUint32[0xC];
  }
  set maxSequencesCount(value) {
    
    this.memoryViewUint32[0xC] = value;
  }
  get targetCommandBuffer() {
    return this._targetCommandBuffer;
  }
  set targetCommandBuffer(value) {
    if (value !== null ) {
      
      this._targetCommandBuffer = value;
      
      this.memoryViewBigInt64[0x7] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._targetCommandBuffer = null;
      this.memoryViewBigInt64[0x7] = BI0;
    } 
    
  }
  get sequencesCountBuffer() {
    return this._sequencesCountBuffer;
  }
  set sequencesCountBuffer(value) {
    if (value !== null ) {
      
      this._sequencesCountBuffer = value;
      
      this.memoryViewBigInt64[0x8] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._sequencesCountBuffer = null;
      this.memoryViewBigInt64[0x8] = BI0;
    } 
    
  }
  get sequencesCountOffset() {
    return this.memoryViewBigUint64[0x9];
  }
  set sequencesCountOffset(value) {
    
    this.memoryViewBigUint64[0x9] = BigInt(value);
  }
  get sequencesIndexBuffer() {
    return this._sequencesIndexBuffer;
  }
  set sequencesIndexBuffer(value) {
    if (value !== null ) {
      
      this._sequencesIndexBuffer = value;
      
      this.memoryViewBigInt64[0xA] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._sequencesIndexBuffer = null;
      this.memoryViewBigInt64[0xA] = BI0;
    } 
    
  }
  get sequencesIndexOffset() {
    return this.memoryViewBigUint64[0xB];
  }
  set sequencesIndexOffset(value) {
    
    this.memoryViewBigUint64[0xB] = BigInt(value);
  }
  
};

VkCmdProcessCommandsInfoNVX.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pIndirectCommandsTokens !== null) {
    let array = this._pIndirectCommandsTokens;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pIndirectCommandsTokensNative = nativeArray;
    this.memoryViewBigInt64[0x5] = nativeArray.address;
  }
  
  return true;
};

VkCmdProcessCommandsInfoNVX.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
};

VkCmdProcessCommandsInfoNVX.byteLength = 0x60;

VkCmdProcessCommandsInfoNVX.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  objectTable: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
  indirectCommandsLayout: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
  indirectCommandsTokenCount: {
    byteOffset: 0x20,
    byteLength: 0x4
  },
  pIndirectCommandsTokens: {
    byteOffset: 0x28,
    byteLength: 0x8
  },
  maxSequencesCount: {
    byteOffset: 0x30,
    byteLength: 0x4
  },
  targetCommandBuffer: {
    byteOffset: 0x38,
    byteLength: 0x8
  },
  sequencesCountBuffer: {
    byteOffset: 0x40,
    byteLength: 0x8
  },
  sequencesCountOffset: {
    byteOffset: 0x48,
    byteLength: 0x8
  },
  sequencesIndexBuffer: {
    byteOffset: 0x50,
    byteLength: 0x8
  },
  sequencesIndexOffset: {
    byteOffset: 0x58,
    byteLength: 0x8
  },
};
/** VkCmdReserveSpaceForCommandsInfoNVX **/
class VkCmdReserveSpaceForCommandsInfoNVX {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x28);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._objectTable = null;
    this._indirectCommandsLayout = null;
    
    this.sType = 0x3B9C19F3;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.objectTable !== void 0) this.objectTable = opts.objectTable;
      if (opts.indirectCommandsLayout !== void 0) this.indirectCommandsLayout = opts.indirectCommandsLayout;
      if (opts.maxSequencesCount !== void 0) this.maxSequencesCount = opts.maxSequencesCount;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkCmdReserveSpaceForCommandsInfoNVX.pNext' isn't allowed to be filled");
  }
  get objectTable() {
    return this._objectTable;
  }
  set objectTable(value) {
    if (value !== null ) {
      
      this._objectTable = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._objectTable = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } 
    
  }
  get indirectCommandsLayout() {
    return this._indirectCommandsLayout;
  }
  set indirectCommandsLayout(value) {
    if (value !== null ) {
      
      this._indirectCommandsLayout = value;
      
      this.memoryViewBigInt64[0x3] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._indirectCommandsLayout = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } 
    
  }
  get maxSequencesCount() {
    return this.memoryViewUint32[0x8];
  }
  set maxSequencesCount(value) {
    
    this.memoryViewUint32[0x8] = value;
  }
  
};

VkCmdReserveSpaceForCommandsInfoNVX.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkCmdReserveSpaceForCommandsInfoNVX.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkCmdReserveSpaceForCommandsInfoNVX.byteLength = 0x28;

VkCmdReserveSpaceForCommandsInfoNVX.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  objectTable: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
  indirectCommandsLayout: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
  maxSequencesCount: {
    byteOffset: 0x20,
    byteLength: 0x4
  },
};
/** VkObjectTableCreateInfoNVX **/
class VkObjectTableCreateInfoNVX {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x48) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x48) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x48) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x48);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this._pObjectEntryTypes = null;
    this._pObjectEntryCounts = null;
    this._pObjectEntryUsageFlags = null;
    
    
    
    
    
    this.sType = 0x3B9C19F0;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.objectCount !== void 0) this.objectCount = opts.objectCount;
      if (opts.pObjectEntryTypes !== void 0) this.pObjectEntryTypes = opts.pObjectEntryTypes;
      if (opts.pObjectEntryCounts !== void 0) this.pObjectEntryCounts = opts.pObjectEntryCounts;
      if (opts.pObjectEntryUsageFlags !== void 0) this.pObjectEntryUsageFlags = opts.pObjectEntryUsageFlags;
      if (opts.maxUniformBuffersPerDescriptor !== void 0) this.maxUniformBuffersPerDescriptor = opts.maxUniformBuffersPerDescriptor;
      if (opts.maxStorageBuffersPerDescriptor !== void 0) this.maxStorageBuffersPerDescriptor = opts.maxStorageBuffersPerDescriptor;
      if (opts.maxStorageImagesPerDescriptor !== void 0) this.maxStorageImagesPerDescriptor = opts.maxStorageImagesPerDescriptor;
      if (opts.maxSampledImagesPerDescriptor !== void 0) this.maxSampledImagesPerDescriptor = opts.maxSampledImagesPerDescriptor;
      if (opts.maxPipelineLayouts !== void 0) this.maxPipelineLayouts = opts.maxPipelineLayouts;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkObjectTableCreateInfoNVX.pNext' isn't allowed to be filled");
  }
  get objectCount() {
    return this.memoryViewUint32[0x4];
  }
  set objectCount(value) {
    
    this.memoryViewUint32[0x4] = value;
  }
  get pObjectEntryTypes() {
    return this._pObjectEntryTypes;
  }
  set pObjectEntryTypes(value) {
    if (value !== null ) {
      this._pObjectEntryTypes = value;
      this.memoryViewBigInt64[0x3] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pObjectEntryTypes = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } 
    
  }
  get pObjectEntryCounts() {
    return this._pObjectEntryCounts;
  }
  set pObjectEntryCounts(value) {
    if (value !== null ) {
      this._pObjectEntryCounts = value;
      this.memoryViewBigInt64[0x4] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pObjectEntryCounts = null;
      this.memoryViewBigInt64[0x4] = BI0;
    } 
    
  }
  get pObjectEntryUsageFlags() {
    return this._pObjectEntryUsageFlags;
  }
  set pObjectEntryUsageFlags(value) {
    if (value !== null ) {
      this._pObjectEntryUsageFlags = value;
      this.memoryViewBigInt64[0x5] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pObjectEntryUsageFlags = null;
      this.memoryViewBigInt64[0x5] = BI0;
    } 
    
  }
  get maxUniformBuffersPerDescriptor() {
    return this.memoryViewUint32[0xC];
  }
  set maxUniformBuffersPerDescriptor(value) {
    
    this.memoryViewUint32[0xC] = value;
  }
  get maxStorageBuffersPerDescriptor() {
    return this.memoryViewUint32[0xD];
  }
  set maxStorageBuffersPerDescriptor(value) {
    
    this.memoryViewUint32[0xD] = value;
  }
  get maxStorageImagesPerDescriptor() {
    return this.memoryViewUint32[0xE];
  }
  set maxStorageImagesPerDescriptor(value) {
    
    this.memoryViewUint32[0xE] = value;
  }
  get maxSampledImagesPerDescriptor() {
    return this.memoryViewUint32[0xF];
  }
  set maxSampledImagesPerDescriptor(value) {
    
    this.memoryViewUint32[0xF] = value;
  }
  get maxPipelineLayouts() {
    return this.memoryViewUint32[0x10];
  }
  set maxPipelineLayouts(value) {
    
    this.memoryViewUint32[0x10] = value;
  }
  
};

VkObjectTableCreateInfoNVX.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkObjectTableCreateInfoNVX.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkObjectTableCreateInfoNVX.byteLength = 0x48;

VkObjectTableCreateInfoNVX.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  objectCount: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  pObjectEntryTypes: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
  pObjectEntryCounts: {
    byteOffset: 0x20,
    byteLength: 0x8
  },
  pObjectEntryUsageFlags: {
    byteOffset: 0x28,
    byteLength: 0x8
  },
  maxUniformBuffersPerDescriptor: {
    byteOffset: 0x30,
    byteLength: 0x4
  },
  maxStorageBuffersPerDescriptor: {
    byteOffset: 0x34,
    byteLength: 0x4
  },
  maxStorageImagesPerDescriptor: {
    byteOffset: 0x38,
    byteLength: 0x4
  },
  maxSampledImagesPerDescriptor: {
    byteOffset: 0x3C,
    byteLength: 0x4
  },
  maxPipelineLayouts: {
    byteOffset: 0x40,
    byteLength: 0x4
  },
};
/** VkObjectTableEntryNVX **/
class VkObjectTableEntryNVX {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x8) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x8);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);

    }
    
    
    
    if (typeof opts === "object") {
      if (opts.type !== void 0) this.type = opts.type;
      if (opts.flags !== void 0) this.flags = opts.flags;
      
    }
  }
  get type() {
    return this.memoryViewInt32[0x0];
  }
  set type(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get flags() {
    return this.memoryViewInt32[0x1];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x1] = value;
  }
  
};

VkObjectTableEntryNVX.prototype.flush = function flush() {
  
  return true;
};

VkObjectTableEntryNVX.prototype.reflect = function reflect(memoryAddress) {
  
};

VkObjectTableEntryNVX.byteLength = 0x8;

VkObjectTableEntryNVX.memoryLayout = {
  type: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  flags: {
    byteOffset: 0x4,
    byteLength: 0x4
  },
};
/** VkObjectTablePipelineEntryNVX **/
class VkObjectTablePipelineEntryNVX {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x10) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x10) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x10);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    
    this._pipeline = null;
    
    if (typeof opts === "object") {
      if (opts.type !== void 0) this.type = opts.type;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.pipeline !== void 0) this.pipeline = opts.pipeline;
      
    }
  }
  get type() {
    return this.memoryViewInt32[0x0];
  }
  set type(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get flags() {
    return this.memoryViewInt32[0x1];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x1] = value;
  }
  get pipeline() {
    return this._pipeline;
  }
  set pipeline(value) {
    if (value !== null ) {
      
      this._pipeline = value;
      
      this.memoryViewBigInt64[0x1] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._pipeline = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  
};

VkObjectTablePipelineEntryNVX.prototype.flush = function flush() {
  
  return true;
};

VkObjectTablePipelineEntryNVX.prototype.reflect = function reflect(memoryAddress) {
  
};

VkObjectTablePipelineEntryNVX.byteLength = 0x10;

VkObjectTablePipelineEntryNVX.memoryLayout = {
  type: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  flags: {
    byteOffset: 0x4,
    byteLength: 0x4
  },
  pipeline: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
};
/** VkObjectTableDescriptorSetEntryNVX **/
class VkObjectTableDescriptorSetEntryNVX {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    
    this._pipelineLayout = null;
    this._descriptorSet = null;
    
    if (typeof opts === "object") {
      if (opts.type !== void 0) this.type = opts.type;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.pipelineLayout !== void 0) this.pipelineLayout = opts.pipelineLayout;
      if (opts.descriptorSet !== void 0) this.descriptorSet = opts.descriptorSet;
      
    }
  }
  get type() {
    return this.memoryViewInt32[0x0];
  }
  set type(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get flags() {
    return this.memoryViewInt32[0x1];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x1] = value;
  }
  get pipelineLayout() {
    return this._pipelineLayout;
  }
  set pipelineLayout(value) {
    if (value !== null ) {
      
      this._pipelineLayout = value;
      
      this.memoryViewBigInt64[0x1] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._pipelineLayout = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  get descriptorSet() {
    return this._descriptorSet;
  }
  set descriptorSet(value) {
    if (value !== null ) {
      
      this._descriptorSet = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._descriptorSet = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } 
    
  }
  
};

VkObjectTableDescriptorSetEntryNVX.prototype.flush = function flush() {
  
  return true;
};

VkObjectTableDescriptorSetEntryNVX.prototype.reflect = function reflect(memoryAddress) {
  
};

VkObjectTableDescriptorSetEntryNVX.byteLength = 0x18;

VkObjectTableDescriptorSetEntryNVX.memoryLayout = {
  type: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  flags: {
    byteOffset: 0x4,
    byteLength: 0x4
  },
  pipelineLayout: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  descriptorSet: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
};
/** VkObjectTableVertexBufferEntryNVX **/
class VkObjectTableVertexBufferEntryNVX {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x10) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x10) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x10);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    
    this._buffer = null;
    
    if (typeof opts === "object") {
      if (opts.type !== void 0) this.type = opts.type;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.buffer !== void 0) this.buffer = opts.buffer;
      
    }
  }
  get type() {
    return this.memoryViewInt32[0x0];
  }
  set type(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get flags() {
    return this.memoryViewInt32[0x1];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x1] = value;
  }
  get buffer() {
    return this._buffer;
  }
  set buffer(value) {
    if (value !== null ) {
      
      this._buffer = value;
      
      this.memoryViewBigInt64[0x1] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._buffer = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  
};

VkObjectTableVertexBufferEntryNVX.prototype.flush = function flush() {
  
  return true;
};

VkObjectTableVertexBufferEntryNVX.prototype.reflect = function reflect(memoryAddress) {
  
};

VkObjectTableVertexBufferEntryNVX.byteLength = 0x10;

VkObjectTableVertexBufferEntryNVX.memoryLayout = {
  type: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  flags: {
    byteOffset: 0x4,
    byteLength: 0x4
  },
  buffer: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
};
/** VkObjectTableIndexBufferEntryNVX **/
class VkObjectTableIndexBufferEntryNVX {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    
    this._buffer = null;
    
    
    if (typeof opts === "object") {
      if (opts.type !== void 0) this.type = opts.type;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.buffer !== void 0) this.buffer = opts.buffer;
      if (opts.indexType !== void 0) this.indexType = opts.indexType;
      
    }
  }
  get type() {
    return this.memoryViewInt32[0x0];
  }
  set type(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get flags() {
    return this.memoryViewInt32[0x1];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x1] = value;
  }
  get buffer() {
    return this._buffer;
  }
  set buffer(value) {
    if (value !== null ) {
      
      this._buffer = value;
      
      this.memoryViewBigInt64[0x1] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._buffer = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  get indexType() {
    return this.memoryViewInt32[0x4];
  }
  set indexType(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkObjectTableIndexBufferEntryNVX.prototype.flush = function flush() {
  
  return true;
};

VkObjectTableIndexBufferEntryNVX.prototype.reflect = function reflect(memoryAddress) {
  
};

VkObjectTableIndexBufferEntryNVX.byteLength = 0x18;

VkObjectTableIndexBufferEntryNVX.memoryLayout = {
  type: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  flags: {
    byteOffset: 0x4,
    byteLength: 0x4
  },
  buffer: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  indexType: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkObjectTablePushConstantEntryNVX **/
class VkObjectTablePushConstantEntryNVX {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    
    this._pipelineLayout = null;
    
    
    if (typeof opts === "object") {
      if (opts.type !== void 0) this.type = opts.type;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.pipelineLayout !== void 0) this.pipelineLayout = opts.pipelineLayout;
      if (opts.stageFlags !== void 0) this.stageFlags = opts.stageFlags;
      
    }
  }
  get type() {
    return this.memoryViewInt32[0x0];
  }
  set type(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get flags() {
    return this.memoryViewInt32[0x1];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x1] = value;
  }
  get pipelineLayout() {
    return this._pipelineLayout;
  }
  set pipelineLayout(value) {
    if (value !== null ) {
      
      this._pipelineLayout = value;
      
      this.memoryViewBigInt64[0x1] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._pipelineLayout = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  get stageFlags() {
    return this.memoryViewInt32[0x4];
  }
  set stageFlags(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkObjectTablePushConstantEntryNVX.prototype.flush = function flush() {
  
  return true;
};

VkObjectTablePushConstantEntryNVX.prototype.reflect = function reflect(memoryAddress) {
  
};

VkObjectTablePushConstantEntryNVX.byteLength = 0x18;

VkObjectTablePushConstantEntryNVX.memoryLayout = {
  type: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  flags: {
    byteOffset: 0x4,
    byteLength: 0x4
  },
  pipelineLayout: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  stageFlags: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceFeatures2 **/
class VkPhysicalDeviceFeatures2 {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0xF0) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0xF0) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0xF0);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._features = new VkPhysicalDeviceFeatures({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x10 });
    this.sType = 0x3B9BB078;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.features !== void 0) this.features = opts.features;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null ) {
      let {sType} = value;
      
      switch (sType) {
          
        case 0x3B9C9EC0:
        case 0x3B9B9909:
        case 0x3B9C0E38:
        case 0x3B9D2B64:
        case VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES:
        case 0x3B9D0C20:
        case 0x3B9CE510:
        case VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES:
        case 0x3B9C0A50:
        case 0x3B9EC588:
        case 0x3B9D3EE9:
        case 0x3B9D7D68:
        case 0x3B9C0669:
        case 0x3B9E0238:
        case 0x3B9D8920:
        case 0x3B9DB032:
        case 0x3B9BCFB9:
        case 0x3B9B3760:
        case 0x3B9D5270:
        case 0x3B9DEACA:
        case 0x3B9B8D50:
        case 0x3B9DDB28:
        case 0x3B9DE2F8:
        case 0x3B9DE6E0:
        case 0x3B9E7380:
        case 0x3B9D4AA1:
        case 0x3B9DDF10:
        case 0x3B9E1D90:
        case 0x3B9E2948:
        case 0x3B9C5870:
        case 0x3B9E6BB0:
        case 0x3B9E8320:
        case 0x3B9E96A8:
        case 0x3B9EA260:
          break;
        default:
          throw new TypeError("Invalid type for 'VkPhysicalDeviceFeatures2.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  get features() {
    return this._features;
  }
  set features(value) {
    if (value !== null ) {
      value.flush();
      this._features = value;
      
      
    } else if (value === null) {
      this._features = null;
      
    } 
    
  }
  
};

VkPhysicalDeviceFeatures2.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._features !== null) {
    this._features.flush();
    if (this.memoryBuffer !== this._features.memoryBuffer) {
      let srcView = new Uint8Array(this._features.memoryBuffer);
      let dstView = new Uint8Array(this.memoryBuffer);
      dstView.set(srcView, 0x10);
      
    }
  }
  
  return true;
};

VkPhysicalDeviceFeatures2.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
};

VkPhysicalDeviceFeatures2.byteLength = 0xF0;

VkPhysicalDeviceFeatures2.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  features: {
    byteOffset: 0x10,
    byteLength: 0xDC
  },
};
/** VkPhysicalDeviceFeatures2KHR **/
class VkPhysicalDeviceFeatures2KHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0xF0) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0xF0) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0xF0);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._features = new VkPhysicalDeviceFeatures({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x10 });
    this.sType = 0x3B9BB078;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.features !== void 0) this.features = opts.features;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null ) {
      let {sType} = value;
      
      switch (sType) {
          
        case 0x3B9C9EC0:
        case 0x3B9B9909:
        case 0x3B9C0E38:
        case 0x3B9D2B64:
        case VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES:
        case 0x3B9D0C20:
        case 0x3B9CE510:
        case VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES:
        case 0x3B9C0A50:
        case 0x3B9EC588:
        case 0x3B9D3EE9:
        case 0x3B9D7D68:
        case 0x3B9C0669:
        case 0x3B9E0238:
        case 0x3B9D8920:
        case 0x3B9DB032:
        case 0x3B9BCFB9:
        case 0x3B9B3760:
        case 0x3B9D5270:
        case 0x3B9DEACA:
        case 0x3B9B8D50:
        case 0x3B9DDB28:
        case 0x3B9DE2F8:
        case 0x3B9DE6E0:
        case 0x3B9E7380:
        case 0x3B9D4AA1:
        case 0x3B9DDF10:
        case 0x3B9E1D90:
        case 0x3B9E2948:
        case 0x3B9C5870:
        case 0x3B9E6BB0:
        case 0x3B9E8320:
        case 0x3B9E96A8:
        case 0x3B9EA260:
          break;
        default:
          throw new TypeError("Invalid type for 'VkPhysicalDeviceFeatures2KHR.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  get features() {
    return this._features;
  }
  set features(value) {
    if (value !== null ) {
      value.flush();
      this._features = value;
      
      
    } else if (value === null) {
      this._features = null;
      
    } 
    
  }
  
};

VkPhysicalDeviceFeatures2KHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._features !== null) {
    this._features.flush();
    if (this.memoryBuffer !== this._features.memoryBuffer) {
      let srcView = new Uint8Array(this._features.memoryBuffer);
      let dstView = new Uint8Array(this.memoryBuffer);
      dstView.set(srcView, 0x10);
      
    }
  }
  
  return true;
};

VkPhysicalDeviceFeatures2KHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
};

VkPhysicalDeviceFeatures2KHR.byteLength = 0xF0;

VkPhysicalDeviceFeatures2KHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  features: {
    byteOffset: 0x10,
    byteLength: 0xDC
  },
};
/** VkPhysicalDeviceProperties2 **/
class VkPhysicalDeviceProperties2 {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x348) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x348) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x348);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._properties = new VkPhysicalDeviceProperties({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x10 });
    this.sType = 0x3B9BB079;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null ) {
      let {sType} = value;
      
      switch (sType) {
          
        case 0x3B9C0280:
        case 0x3B9DC7A0:
        case 0x3B9BDF5C:
        case 0x3B9B990A:
        case 0x3B9C4CB8:
        case 0x3B9C44E8:
        case VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES:
        case 0x3B9C9308:
        case VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES:
        case 0x3B9CC5D0:
        case 0x3B9CF89B:
        case 0x3B9D0C21:
        case 0x3B9CE511:
        case 0x3B9D5A40:
        case 0x3B9DCB88:
        case 0x3B9D8152:
        case 0x3B9C5488:
        case 0x3B9D9CA8:
        case 0x3B9D3EEA:
        case 0x3B9DB030:
        case 0x3B9E0620:
        case 0x3B9DD358:
        case 0x3B9B3761:
        case 0x3B9D4AA2:
        case 0x3B9DDF11:
        case 0x3B9D4E91:
        case 0x3B9E1D91:
        case 0x3B9E96AA:
          break;
        default:
          throw new TypeError("Invalid type for 'VkPhysicalDeviceProperties2.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  get properties() {
    return this._properties;
  }
  
};

VkPhysicalDeviceProperties2.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceProperties2.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x348));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x348), 0x0);
  
  
  
  
};

VkPhysicalDeviceProperties2.byteLength = 0x348;

VkPhysicalDeviceProperties2.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  properties: {
    byteOffset: 0x10,
    byteLength: 0x338
  },
};
/** VkPhysicalDeviceProperties2KHR **/
class VkPhysicalDeviceProperties2KHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x348) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x348) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x348);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._properties = new VkPhysicalDeviceProperties({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x10 });
    this.sType = 0x3B9BB079;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null ) {
      let {sType} = value;
      
      switch (sType) {
          
        case 0x3B9C0280:
        case 0x3B9DC7A0:
        case 0x3B9BDF5C:
        case 0x3B9B990A:
        case 0x3B9C4CB8:
        case 0x3B9C44E8:
        case VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES:
        case 0x3B9C9308:
        case VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES:
        case 0x3B9CC5D0:
        case 0x3B9CF89B:
        case 0x3B9D0C21:
        case 0x3B9CE511:
        case 0x3B9D5A40:
        case 0x3B9DCB88:
        case 0x3B9D8152:
        case 0x3B9C5488:
        case 0x3B9D9CA8:
        case 0x3B9D3EEA:
        case 0x3B9DB030:
        case 0x3B9E0620:
        case 0x3B9DD358:
        case 0x3B9B3761:
        case 0x3B9D4AA2:
        case 0x3B9DDF11:
        case 0x3B9D4E91:
        case 0x3B9E1D91:
        case 0x3B9E96AA:
          break;
        default:
          throw new TypeError("Invalid type for 'VkPhysicalDeviceProperties2KHR.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  get properties() {
    return this._properties;
  }
  
};

VkPhysicalDeviceProperties2KHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceProperties2KHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x348));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x348), 0x0);
  
  
  
  
};

VkPhysicalDeviceProperties2KHR.byteLength = 0x348;

VkPhysicalDeviceProperties2KHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  properties: {
    byteOffset: 0x10,
    byteLength: 0x338
  },
};
/** VkFormatProperties2 **/
class VkFormatProperties2 {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._formatProperties = new VkFormatProperties({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x10 });
    this.sType = 0x3B9BB07A;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null ) {
      let {sType} = value;
      
      switch (sType) {
          
        case 0x3B9D3330:
          break;
        default:
          throw new TypeError("Invalid type for 'VkFormatProperties2.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  get formatProperties() {
    return this._formatProperties;
  }
  
};

VkFormatProperties2.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkFormatProperties2.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x20));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x20), 0x0);
  
  
  
  
};

VkFormatProperties2.byteLength = 0x20;

VkFormatProperties2.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  formatProperties: {
    byteOffset: 0x10,
    byteLength: 0xC
  },
};
/** VkFormatProperties2KHR **/
class VkFormatProperties2KHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._formatProperties = new VkFormatProperties({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x10 });
    this.sType = 0x3B9BB07A;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null ) {
      let {sType} = value;
      
      switch (sType) {
          
        case 0x3B9D3330:
          break;
        default:
          throw new TypeError("Invalid type for 'VkFormatProperties2KHR.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  get formatProperties() {
    return this._formatProperties;
  }
  
};

VkFormatProperties2KHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkFormatProperties2KHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x20));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x20), 0x0);
  
  
  
  
};

VkFormatProperties2KHR.byteLength = 0x20;

VkFormatProperties2KHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  formatProperties: {
    byteOffset: 0x10,
    byteLength: 0xC
  },
};
/** VkImageFormatProperties2 **/
class VkImageFormatProperties2 {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x30) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x30) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x30);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._imageFormatProperties = new VkImageFormatProperties({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x10 });
    this.sType = 0x3B9BB07B;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null ) {
      let {sType} = value;
      
      switch (sType) {
          
        case 0x3B9BDF59:
        case 0x3B9D2B65:
        case 0x3B9B6A28:
        case 0x3B9CC1E8:
        case 0x3B9D6211:
          break;
        default:
          throw new TypeError("Invalid type for 'VkImageFormatProperties2.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  get imageFormatProperties() {
    return this._imageFormatProperties;
  }
  
};

VkImageFormatProperties2.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkImageFormatProperties2.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x30));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x30), 0x0);
  
  
  
  
};

VkImageFormatProperties2.byteLength = 0x30;

VkImageFormatProperties2.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  imageFormatProperties: {
    byteOffset: 0x10,
    byteLength: 0x20
  },
};
/** VkImageFormatProperties2KHR **/
class VkImageFormatProperties2KHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x30) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x30) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x30);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._imageFormatProperties = new VkImageFormatProperties({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x10 });
    this.sType = 0x3B9BB07B;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null ) {
      let {sType} = value;
      
      switch (sType) {
          
        case 0x3B9BDF59:
        case 0x3B9D2B65:
        case 0x3B9B6A28:
        case 0x3B9CC1E8:
        case 0x3B9D6211:
          break;
        default:
          throw new TypeError("Invalid type for 'VkImageFormatProperties2KHR.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  get imageFormatProperties() {
    return this._imageFormatProperties;
  }
  
};

VkImageFormatProperties2KHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkImageFormatProperties2KHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x30));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x30), 0x0);
  
  
  
  
};

VkImageFormatProperties2KHR.byteLength = 0x30;

VkImageFormatProperties2KHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  imageFormatProperties: {
    byteOffset: 0x10,
    byteLength: 0x20
  },
};
/** VkPhysicalDeviceImageFormatInfo2 **/
class VkPhysicalDeviceImageFormatInfo2 {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x28);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    
    
    
    this.sType = 0x3B9BB07C;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.format !== void 0) this.format = opts.format;
      if (opts.type !== void 0) this.type = opts.type;
      if (opts.tiling !== void 0) this.tiling = opts.tiling;
      if (opts.usage !== void 0) this.usage = opts.usage;
      if (opts.flags !== void 0) this.flags = opts.flags;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null ) {
      let {sType} = value;
      
      switch (sType) {
          
        case 0x3B9BDF58:
        case 0x3B9D0838:
        case 0x3B9D3332:
        case 0x3B9E8AF0:
        case 0x3B9D6210:
          break;
        default:
          throw new TypeError("Invalid type for 'VkPhysicalDeviceImageFormatInfo2.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  get format() {
    return this.memoryViewInt32[0x4];
  }
  set format(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get type() {
    return this.memoryViewInt32[0x5];
  }
  set type(value) {
    
    this.memoryViewInt32[0x5] = value;
  }
  get tiling() {
    return this.memoryViewInt32[0x6];
  }
  set tiling(value) {
    
    this.memoryViewInt32[0x6] = value;
  }
  get usage() {
    return this.memoryViewInt32[0x7];
  }
  set usage(value) {
    
    this.memoryViewInt32[0x7] = value;
  }
  get flags() {
    return this.memoryViewInt32[0x8];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x8] = value;
  }
  
};

VkPhysicalDeviceImageFormatInfo2.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceImageFormatInfo2.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPhysicalDeviceImageFormatInfo2.byteLength = 0x28;

VkPhysicalDeviceImageFormatInfo2.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  format: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  type: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  tiling: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
  usage: {
    byteOffset: 0x1C,
    byteLength: 0x4
  },
  flags: {
    byteOffset: 0x20,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceImageFormatInfo2KHR **/
class VkPhysicalDeviceImageFormatInfo2KHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x28);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    
    
    
    this.sType = 0x3B9BB07C;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.format !== void 0) this.format = opts.format;
      if (opts.type !== void 0) this.type = opts.type;
      if (opts.tiling !== void 0) this.tiling = opts.tiling;
      if (opts.usage !== void 0) this.usage = opts.usage;
      if (opts.flags !== void 0) this.flags = opts.flags;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null ) {
      let {sType} = value;
      
      switch (sType) {
          
        case 0x3B9BDF58:
        case 0x3B9D0838:
        case 0x3B9D3332:
        case 0x3B9E8AF0:
        case 0x3B9D6210:
          break;
        default:
          throw new TypeError("Invalid type for 'VkPhysicalDeviceImageFormatInfo2KHR.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  get format() {
    return this.memoryViewInt32[0x4];
  }
  set format(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get type() {
    return this.memoryViewInt32[0x5];
  }
  set type(value) {
    
    this.memoryViewInt32[0x5] = value;
  }
  get tiling() {
    return this.memoryViewInt32[0x6];
  }
  set tiling(value) {
    
    this.memoryViewInt32[0x6] = value;
  }
  get usage() {
    return this.memoryViewInt32[0x7];
  }
  set usage(value) {
    
    this.memoryViewInt32[0x7] = value;
  }
  get flags() {
    return this.memoryViewInt32[0x8];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x8] = value;
  }
  
};

VkPhysicalDeviceImageFormatInfo2KHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceImageFormatInfo2KHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPhysicalDeviceImageFormatInfo2KHR.byteLength = 0x28;

VkPhysicalDeviceImageFormatInfo2KHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  format: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  type: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  tiling: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
  usage: {
    byteOffset: 0x1C,
    byteLength: 0x4
  },
  flags: {
    byteOffset: 0x20,
    byteLength: 0x4
  },
};
/** VkQueueFamilyProperties2 **/
class VkQueueFamilyProperties2 {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x28);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._queueFamilyProperties = new VkQueueFamilyProperties({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x10 });
    this.sType = 0x3B9BB07D;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null ) {
      let {sType} = value;
      
      switch (sType) {
          
        case 0x3B9DEEB1:
          break;
        default:
          throw new TypeError("Invalid type for 'VkQueueFamilyProperties2.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  get queueFamilyProperties() {
    return this._queueFamilyProperties;
  }
  
};

VkQueueFamilyProperties2.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkQueueFamilyProperties2.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x28));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x28), 0x0);
  
  
  
  
};

VkQueueFamilyProperties2.byteLength = 0x28;

VkQueueFamilyProperties2.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  queueFamilyProperties: {
    byteOffset: 0x10,
    byteLength: 0x18
  },
};
/** VkQueueFamilyProperties2KHR **/
class VkQueueFamilyProperties2KHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x28);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._queueFamilyProperties = new VkQueueFamilyProperties({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x10 });
    this.sType = 0x3B9BB07D;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null ) {
      let {sType} = value;
      
      switch (sType) {
          
        case 0x3B9DEEB1:
          break;
        default:
          throw new TypeError("Invalid type for 'VkQueueFamilyProperties2KHR.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  get queueFamilyProperties() {
    return this._queueFamilyProperties;
  }
  
};

VkQueueFamilyProperties2KHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkQueueFamilyProperties2KHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x28));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x28), 0x0);
  
  
  
  
};

VkQueueFamilyProperties2KHR.byteLength = 0x28;

VkQueueFamilyProperties2KHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  queueFamilyProperties: {
    byteOffset: 0x10,
    byteLength: 0x18
  },
};
/** VkPhysicalDeviceMemoryProperties2 **/
class VkPhysicalDeviceMemoryProperties2 {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x218) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x218) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x218);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._memoryProperties = new VkPhysicalDeviceMemoryProperties({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x10 });
    this.sType = 0x3B9BB07E;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null ) {
      let {sType} = value;
      
      switch (sType) {
          
        case 0x3B9E67C8:
          break;
        default:
          throw new TypeError("Invalid type for 'VkPhysicalDeviceMemoryProperties2.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  get memoryProperties() {
    return this._memoryProperties;
  }
  
};

VkPhysicalDeviceMemoryProperties2.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceMemoryProperties2.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x218));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x218), 0x0);
  
  
  
  
};

VkPhysicalDeviceMemoryProperties2.byteLength = 0x218;

VkPhysicalDeviceMemoryProperties2.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  memoryProperties: {
    byteOffset: 0x10,
    byteLength: 0x208
  },
};
/** VkPhysicalDeviceMemoryProperties2KHR **/
class VkPhysicalDeviceMemoryProperties2KHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x218) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x218) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x218);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._memoryProperties = new VkPhysicalDeviceMemoryProperties({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x10 });
    this.sType = 0x3B9BB07E;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null ) {
      let {sType} = value;
      
      switch (sType) {
          
        case 0x3B9E67C8:
          break;
        default:
          throw new TypeError("Invalid type for 'VkPhysicalDeviceMemoryProperties2KHR.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  get memoryProperties() {
    return this._memoryProperties;
  }
  
};

VkPhysicalDeviceMemoryProperties2KHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceMemoryProperties2KHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x218));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x218), 0x0);
  
  
  
  
};

VkPhysicalDeviceMemoryProperties2KHR.byteLength = 0x218;

VkPhysicalDeviceMemoryProperties2KHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  memoryProperties: {
    byteOffset: 0x10,
    byteLength: 0x208
  },
};
/** VkSparseImageFormatProperties2 **/
class VkSparseImageFormatProperties2 {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x28);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._properties = new VkSparseImageFormatProperties({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x10 });
    this.sType = 0x3B9BB07F;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkSparseImageFormatProperties2.pNext' isn't allowed to be filled");
  }
  get properties() {
    return this._properties;
  }
  
};

VkSparseImageFormatProperties2.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkSparseImageFormatProperties2.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x28));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x28), 0x0);
  
  
  
  
};

VkSparseImageFormatProperties2.byteLength = 0x28;

VkSparseImageFormatProperties2.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  properties: {
    byteOffset: 0x10,
    byteLength: 0x14
  },
};
/** VkSparseImageFormatProperties2KHR **/
class VkSparseImageFormatProperties2KHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x28);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._properties = new VkSparseImageFormatProperties({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x10 });
    this.sType = 0x3B9BB07F;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkSparseImageFormatProperties2KHR.pNext' isn't allowed to be filled");
  }
  get properties() {
    return this._properties;
  }
  
};

VkSparseImageFormatProperties2KHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkSparseImageFormatProperties2KHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x28));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x28), 0x0);
  
  
  
  
};

VkSparseImageFormatProperties2KHR.byteLength = 0x28;

VkSparseImageFormatProperties2KHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  properties: {
    byteOffset: 0x10,
    byteLength: 0x14
  },
};
/** VkPhysicalDeviceSparseImageFormatInfo2 **/
class VkPhysicalDeviceSparseImageFormatInfo2 {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x28);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    
    
    
    this.sType = 0x3B9BB080;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.format !== void 0) this.format = opts.format;
      if (opts.type !== void 0) this.type = opts.type;
      if (opts.samples !== void 0) this.samples = opts.samples;
      if (opts.usage !== void 0) this.usage = opts.usage;
      if (opts.tiling !== void 0) this.tiling = opts.tiling;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceSparseImageFormatInfo2.pNext' isn't allowed to be filled");
  }
  get format() {
    return this.memoryViewInt32[0x4];
  }
  set format(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get type() {
    return this.memoryViewInt32[0x5];
  }
  set type(value) {
    
    this.memoryViewInt32[0x5] = value;
  }
  get samples() {
    return this.memoryViewInt32[0x6];
  }
  set samples(value) {
    
    this.memoryViewInt32[0x6] = value;
  }
  get usage() {
    return this.memoryViewInt32[0x7];
  }
  set usage(value) {
    
    this.memoryViewInt32[0x7] = value;
  }
  get tiling() {
    return this.memoryViewInt32[0x8];
  }
  set tiling(value) {
    
    this.memoryViewInt32[0x8] = value;
  }
  
};

VkPhysicalDeviceSparseImageFormatInfo2.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceSparseImageFormatInfo2.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPhysicalDeviceSparseImageFormatInfo2.byteLength = 0x28;

VkPhysicalDeviceSparseImageFormatInfo2.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  format: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  type: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  samples: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
  usage: {
    byteOffset: 0x1C,
    byteLength: 0x4
  },
  tiling: {
    byteOffset: 0x20,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceSparseImageFormatInfo2KHR **/
class VkPhysicalDeviceSparseImageFormatInfo2KHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x28);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    
    
    
    this.sType = 0x3B9BB080;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.format !== void 0) this.format = opts.format;
      if (opts.type !== void 0) this.type = opts.type;
      if (opts.samples !== void 0) this.samples = opts.samples;
      if (opts.usage !== void 0) this.usage = opts.usage;
      if (opts.tiling !== void 0) this.tiling = opts.tiling;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceSparseImageFormatInfo2KHR.pNext' isn't allowed to be filled");
  }
  get format() {
    return this.memoryViewInt32[0x4];
  }
  set format(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get type() {
    return this.memoryViewInt32[0x5];
  }
  set type(value) {
    
    this.memoryViewInt32[0x5] = value;
  }
  get samples() {
    return this.memoryViewInt32[0x6];
  }
  set samples(value) {
    
    this.memoryViewInt32[0x6] = value;
  }
  get usage() {
    return this.memoryViewInt32[0x7];
  }
  set usage(value) {
    
    this.memoryViewInt32[0x7] = value;
  }
  get tiling() {
    return this.memoryViewInt32[0x8];
  }
  set tiling(value) {
    
    this.memoryViewInt32[0x8] = value;
  }
  
};

VkPhysicalDeviceSparseImageFormatInfo2KHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceSparseImageFormatInfo2KHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPhysicalDeviceSparseImageFormatInfo2KHR.byteLength = 0x28;

VkPhysicalDeviceSparseImageFormatInfo2KHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  format: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  type: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  samples: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
  usage: {
    byteOffset: 0x1C,
    byteLength: 0x4
  },
  tiling: {
    byteOffset: 0x20,
    byteLength: 0x4
  },
};
/** VkPhysicalDevicePushDescriptorPropertiesKHR **/
class VkPhysicalDevicePushDescriptorPropertiesKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9C0280;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDevicePushDescriptorPropertiesKHR.pNext' isn't allowed to be filled");
  }
  get maxPushDescriptors() {
    return this.memoryViewUint32[0x4];
  }
  
};

VkPhysicalDevicePushDescriptorPropertiesKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDevicePushDescriptorPropertiesKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x18));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x18), 0x0);
  
  
};

VkPhysicalDevicePushDescriptorPropertiesKHR.byteLength = 0x18;

VkPhysicalDevicePushDescriptorPropertiesKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  maxPushDescriptors: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkConformanceVersionKHR **/
class VkConformanceVersionKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewUint8 = new Uint8Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x1, (opts.$memoryOffset + 0x4) / 0x1);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x4);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewUint8 = new Uint8Array(this.memoryBuffer);

    }
    
    
    
    
    
    if (typeof opts === "object") {
      if (opts.major !== void 0) this.major = opts.major;
      if (opts.minor !== void 0) this.minor = opts.minor;
      if (opts.subminor !== void 0) this.subminor = opts.subminor;
      if (opts.patch !== void 0) this.patch = opts.patch;
      
    }
  }
  get major() {
    return this.memoryViewUint8[0x0];
  }
  set major(value) {
    
    this.memoryViewUint8[0x0] = value;
  }
  get minor() {
    return this.memoryViewUint8[0x1];
  }
  set minor(value) {
    
    this.memoryViewUint8[0x1] = value;
  }
  get subminor() {
    return this.memoryViewUint8[0x2];
  }
  set subminor(value) {
    
    this.memoryViewUint8[0x2] = value;
  }
  get patch() {
    return this.memoryViewUint8[0x3];
  }
  set patch(value) {
    
    this.memoryViewUint8[0x3] = value;
  }
  
};

VkConformanceVersionKHR.prototype.flush = function flush() {
  
  return true;
};

VkConformanceVersionKHR.prototype.reflect = function reflect(memoryAddress) {
  
};

VkConformanceVersionKHR.byteLength = 0x4;

VkConformanceVersionKHR.memoryLayout = {
  major: {
    byteOffset: 0x0,
    byteLength: 0x1
  },
  minor: {
    byteOffset: 0x1,
    byteLength: 0x1
  },
  subminor: {
    byteOffset: 0x2,
    byteLength: 0x1
  },
  patch: {
    byteOffset: 0x3,
    byteLength: 0x1
  },
};
/** VkPhysicalDeviceDriverPropertiesKHR **/
class VkPhysicalDeviceDriverPropertiesKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x218) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x218) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x218);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    
    this._conformanceVersion = new VkConformanceVersionKHR({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x214 });
    this.sType = 0x3B9DC7A0;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceDriverPropertiesKHR.pNext' isn't allowed to be filled");
  }
  get driverID() {
    return this.memoryViewInt32[0x4];
  }
  get driverName() {
    return decodeNullTerminatedUTF8String(
      new Uint8Array(this.memoryBuffer).subarray(this.$memoryOffset + 0x14, 0x128)
    ) || null;
  }
  get driverInfo() {
    return decodeNullTerminatedUTF8String(
      new Uint8Array(this.memoryBuffer).subarray(this.$memoryOffset + 0x114, 0x328)
    ) || null;
  }
  get conformanceVersion() {
    return this._conformanceVersion;
  }
  
};

VkPhysicalDeviceDriverPropertiesKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceDriverPropertiesKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x218));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x218), 0x0);
  
  
  
  
};

VkPhysicalDeviceDriverPropertiesKHR.byteLength = 0x218;

VkPhysicalDeviceDriverPropertiesKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  driverID: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  driverName: {
    byteOffset: 0x14,
    byteLength: 0x100
  },
  driverInfo: {
    byteOffset: 0x114,
    byteLength: 0x100
  },
  conformanceVersion: {
    byteOffset: 0x214,
    byteLength: 0x4
  },
};
/** VkPresentRegionsKHR **/
class VkPresentRegionsKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this._pRegions = null;
    this._pRegionsNative = null;
    this.sType = 0x3B9C1220;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.swapchainCount !== void 0) this.swapchainCount = opts.swapchainCount;
      if (opts.pRegions !== void 0) this.pRegions = opts.pRegions;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPresentRegionsKHR.pNext' isn't allowed to be filled");
  }
  get swapchainCount() {
    return this.memoryViewUint32[0x4];
  }
  set swapchainCount(value) {
    
    this.memoryViewUint32[0x4] = value;
  }
  get pRegions() {
    return this._pRegions;
  }
  set pRegions(value) {
    if (value !== null ) {
      this._pRegions = value;
    } else if (value === null) {
      this._pRegions = null;
    } 
    
  }
  
};

VkPresentRegionsKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pRegions !== null) {
    let array = this._pRegions;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pRegionsNative = nativeArray;
    this.memoryViewBigInt64[0x3] = nativeArray.address;
  }
  
  return true;
};

VkPresentRegionsKHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
};

VkPresentRegionsKHR.byteLength = 0x20;

VkPresentRegionsKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  swapchainCount: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  pRegions: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
};
/** VkPresentRegionKHR **/
class VkPresentRegionKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x10) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x10);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pRectangles = null;
    this._pRectanglesNative = null;
    
    if (typeof opts === "object") {
      if (opts.rectangleCount !== void 0) this.rectangleCount = opts.rectangleCount;
      if (opts.pRectangles !== void 0) this.pRectangles = opts.pRectangles;
      
    }
  }
  get rectangleCount() {
    return this.memoryViewUint32[0x0];
  }
  set rectangleCount(value) {
    
    this.memoryViewUint32[0x0] = value;
  }
  get pRectangles() {
    return this._pRectangles;
  }
  set pRectangles(value) {
    if (value !== null ) {
      this._pRectangles = value;
    } else if (value === null) {
      this._pRectangles = null;
    } 
    
  }
  
};

VkPresentRegionKHR.prototype.flush = function flush() {
  
  
  if (this._pRectangles !== null) {
    let array = this._pRectangles;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pRectanglesNative = nativeArray;
    this.memoryViewBigInt64[0x1] = nativeArray.address;
  }
  
  return true;
};

VkPresentRegionKHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPresentRegionKHR.byteLength = 0x10;

VkPresentRegionKHR.memoryLayout = {
  rectangleCount: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pRectangles: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
};
/** VkRectLayerKHR **/
class VkRectLayerKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x14) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x14);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    this._offset = new VkOffset2D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x0 });
    this._extent = new VkExtent2D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x8 });
    
    
    if (typeof opts === "object") {
      if (opts.offset !== void 0) this.offset = opts.offset;
      if (opts.extent !== void 0) this.extent = opts.extent;
      if (opts.layer !== void 0) this.layer = opts.layer;
      
    }
  }
  get offset() {
    return this._offset;
  }
  set offset(value) {
    if (value !== null ) {
      value.flush();
      this._offset = value;
      
      
    } else if (value === null) {
      this._offset = null;
      
    } 
    
  }
  get extent() {
    return this._extent;
  }
  set extent(value) {
    if (value !== null ) {
      value.flush();
      this._extent = value;
      
      
    } else if (value === null) {
      this._extent = null;
      
    } 
    
  }
  get layer() {
    return this.memoryViewUint32[0x4];
  }
  set layer(value) {
    
    this.memoryViewUint32[0x4] = value;
  }
  
};

VkRectLayerKHR.prototype.flush = function flush() {
  
  
  if (this._offset !== null) {
    this._offset.flush();
    if (this.memoryBuffer !== this._offset.memoryBuffer) {
      let srcView = new Uint8Array(this._offset.memoryBuffer);
      let dstView = new Uint8Array(this.memoryBuffer);
      dstView.set(srcView, 0x0);
      
    }
  }
  
  
  if (this._extent !== null) {
    this._extent.flush();
    if (this.memoryBuffer !== this._extent.memoryBuffer) {
      let srcView = new Uint8Array(this._extent.memoryBuffer);
      let dstView = new Uint8Array(this.memoryBuffer);
      dstView.set(srcView, 0x8);
      
    }
  }
  
  return true;
};

VkRectLayerKHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
};

VkRectLayerKHR.byteLength = 0x14;

VkRectLayerKHR.memoryLayout = {
  offset: {
    byteOffset: 0x0,
    byteLength: 0x8
  },
  extent: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  layer: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceVariablePointersFeatures **/
class VkPhysicalDeviceVariablePointersFeatures {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    this.sType = 0x3B9C9EC0;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.variablePointersStorageBuffer !== void 0) this.variablePointersStorageBuffer = opts.variablePointersStorageBuffer;
      if (opts.variablePointers !== void 0) this.variablePointers = opts.variablePointers;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceVariablePointersFeatures.pNext' isn't allowed to be filled");
  }
  get variablePointersStorageBuffer() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set variablePointersStorageBuffer(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  get variablePointers() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  set variablePointers(value) {
    this.memoryViewUint32[0x5] = value | 0;
  }
  
};

VkPhysicalDeviceVariablePointersFeatures.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceVariablePointersFeatures.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPhysicalDeviceVariablePointersFeatures.byteLength = 0x18;

VkPhysicalDeviceVariablePointersFeatures.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  variablePointersStorageBuffer: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  variablePointers: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceVariablePointersFeaturesKHR **/
class VkPhysicalDeviceVariablePointersFeaturesKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    this.sType = 0x3B9C9EC0;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.variablePointersStorageBuffer !== void 0) this.variablePointersStorageBuffer = opts.variablePointersStorageBuffer;
      if (opts.variablePointers !== void 0) this.variablePointers = opts.variablePointers;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceVariablePointersFeaturesKHR.pNext' isn't allowed to be filled");
  }
  get variablePointersStorageBuffer() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set variablePointersStorageBuffer(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  get variablePointers() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  set variablePointers(value) {
    this.memoryViewUint32[0x5] = value | 0;
  }
  
};

VkPhysicalDeviceVariablePointersFeaturesKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceVariablePointersFeaturesKHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPhysicalDeviceVariablePointersFeaturesKHR.byteLength = 0x18;

VkPhysicalDeviceVariablePointersFeaturesKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  variablePointersStorageBuffer: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  variablePointers: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceVariablePointerFeaturesKHR **/
class VkPhysicalDeviceVariablePointerFeaturesKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    this.sType = 0x3B9C9EC0;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.variablePointersStorageBuffer !== void 0) this.variablePointersStorageBuffer = opts.variablePointersStorageBuffer;
      if (opts.variablePointers !== void 0) this.variablePointers = opts.variablePointers;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceVariablePointerFeaturesKHR.pNext' isn't allowed to be filled");
  }
  get variablePointersStorageBuffer() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set variablePointersStorageBuffer(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  get variablePointers() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  set variablePointers(value) {
    this.memoryViewUint32[0x5] = value | 0;
  }
  
};

VkPhysicalDeviceVariablePointerFeaturesKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceVariablePointerFeaturesKHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPhysicalDeviceVariablePointerFeaturesKHR.byteLength = 0x18;

VkPhysicalDeviceVariablePointerFeaturesKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  variablePointersStorageBuffer: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  variablePointers: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceVariablePointerFeatures **/
class VkPhysicalDeviceVariablePointerFeatures {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    this.sType = 0x3B9C9EC0;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.variablePointersStorageBuffer !== void 0) this.variablePointersStorageBuffer = opts.variablePointersStorageBuffer;
      if (opts.variablePointers !== void 0) this.variablePointers = opts.variablePointers;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceVariablePointerFeatures.pNext' isn't allowed to be filled");
  }
  get variablePointersStorageBuffer() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set variablePointersStorageBuffer(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  get variablePointers() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  set variablePointers(value) {
    this.memoryViewUint32[0x5] = value | 0;
  }
  
};

VkPhysicalDeviceVariablePointerFeatures.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceVariablePointerFeatures.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPhysicalDeviceVariablePointerFeatures.byteLength = 0x18;

VkPhysicalDeviceVariablePointerFeatures.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  variablePointersStorageBuffer: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  variablePointers: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
};
/** VkExternalMemoryProperties **/
class VkExternalMemoryProperties {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0xC) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0xC);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);

    }
    
    
    
    
    if (typeof opts === "object") {
      
    }
  }
  get externalMemoryFeatures() {
    return this.memoryViewInt32[0x0];
  }
  get exportFromImportedHandleTypes() {
    return this.memoryViewInt32[0x1];
  }
  get compatibleHandleTypes() {
    return this.memoryViewInt32[0x2];
  }
  
};

VkExternalMemoryProperties.prototype.flush = function flush() {
  
  return true;
};

VkExternalMemoryProperties.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0xC));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0xC), 0x0);
};

VkExternalMemoryProperties.byteLength = 0xC;

VkExternalMemoryProperties.memoryLayout = {
  externalMemoryFeatures: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  exportFromImportedHandleTypes: {
    byteOffset: 0x4,
    byteLength: 0x4
  },
  compatibleHandleTypes: {
    byteOffset: 0x8,
    byteLength: 0x4
  },
};
/** VkExternalMemoryPropertiesKHR **/
class VkExternalMemoryPropertiesKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0xC) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0xC);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);

    }
    
    
    
    
    if (typeof opts === "object") {
      
    }
  }
  get externalMemoryFeatures() {
    return this.memoryViewInt32[0x0];
  }
  get exportFromImportedHandleTypes() {
    return this.memoryViewInt32[0x1];
  }
  get compatibleHandleTypes() {
    return this.memoryViewInt32[0x2];
  }
  
};

VkExternalMemoryPropertiesKHR.prototype.flush = function flush() {
  
  return true;
};

VkExternalMemoryPropertiesKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0xC));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0xC), 0x0);
};

VkExternalMemoryPropertiesKHR.byteLength = 0xC;

VkExternalMemoryPropertiesKHR.memoryLayout = {
  externalMemoryFeatures: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  exportFromImportedHandleTypes: {
    byteOffset: 0x4,
    byteLength: 0x4
  },
  compatibleHandleTypes: {
    byteOffset: 0x8,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceExternalImageFormatInfo **/
class VkPhysicalDeviceExternalImageFormatInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9BDF58;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceExternalImageFormatInfo.pNext' isn't allowed to be filled");
  }
  get handleType() {
    return this.memoryViewInt32[0x4];
  }
  set handleType(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkPhysicalDeviceExternalImageFormatInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceExternalImageFormatInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPhysicalDeviceExternalImageFormatInfo.byteLength = 0x18;

VkPhysicalDeviceExternalImageFormatInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  handleType: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceExternalImageFormatInfoKHR **/
class VkPhysicalDeviceExternalImageFormatInfoKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9BDF58;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceExternalImageFormatInfoKHR.pNext' isn't allowed to be filled");
  }
  get handleType() {
    return this.memoryViewInt32[0x4];
  }
  set handleType(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkPhysicalDeviceExternalImageFormatInfoKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceExternalImageFormatInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPhysicalDeviceExternalImageFormatInfoKHR.byteLength = 0x18;

VkPhysicalDeviceExternalImageFormatInfoKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  handleType: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkExternalImageFormatProperties **/
class VkExternalImageFormatProperties {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._externalMemoryProperties = new VkExternalMemoryProperties({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x10 });
    this.sType = 0x3B9BDF59;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkExternalImageFormatProperties.pNext' isn't allowed to be filled");
  }
  get externalMemoryProperties() {
    return this._externalMemoryProperties;
  }
  
};

VkExternalImageFormatProperties.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkExternalImageFormatProperties.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x20));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x20), 0x0);
  
  
  
  
};

VkExternalImageFormatProperties.byteLength = 0x20;

VkExternalImageFormatProperties.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  externalMemoryProperties: {
    byteOffset: 0x10,
    byteLength: 0xC
  },
};
/** VkExternalImageFormatPropertiesKHR **/
class VkExternalImageFormatPropertiesKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._externalMemoryProperties = new VkExternalMemoryProperties({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x10 });
    this.sType = 0x3B9BDF59;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkExternalImageFormatPropertiesKHR.pNext' isn't allowed to be filled");
  }
  get externalMemoryProperties() {
    return this._externalMemoryProperties;
  }
  
};

VkExternalImageFormatPropertiesKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkExternalImageFormatPropertiesKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x20));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x20), 0x0);
  
  
  
  
};

VkExternalImageFormatPropertiesKHR.byteLength = 0x20;

VkExternalImageFormatPropertiesKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  externalMemoryProperties: {
    byteOffset: 0x10,
    byteLength: 0xC
  },
};
/** VkPhysicalDeviceExternalBufferInfo **/
class VkPhysicalDeviceExternalBufferInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    
    this.sType = 0x3B9BDF5A;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.usage !== void 0) this.usage = opts.usage;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceExternalBufferInfo.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get usage() {
    return this.memoryViewInt32[0x5];
  }
  set usage(value) {
    
    this.memoryViewInt32[0x5] = value;
  }
  get handleType() {
    return this.memoryViewInt32[0x6];
  }
  set handleType(value) {
    
    this.memoryViewInt32[0x6] = value;
  }
  
};

VkPhysicalDeviceExternalBufferInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceExternalBufferInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPhysicalDeviceExternalBufferInfo.byteLength = 0x20;

VkPhysicalDeviceExternalBufferInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  flags: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  usage: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  handleType: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceExternalBufferInfoKHR **/
class VkPhysicalDeviceExternalBufferInfoKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    
    this.sType = 0x3B9BDF5A;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.usage !== void 0) this.usage = opts.usage;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceExternalBufferInfoKHR.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get usage() {
    return this.memoryViewInt32[0x5];
  }
  set usage(value) {
    
    this.memoryViewInt32[0x5] = value;
  }
  get handleType() {
    return this.memoryViewInt32[0x6];
  }
  set handleType(value) {
    
    this.memoryViewInt32[0x6] = value;
  }
  
};

VkPhysicalDeviceExternalBufferInfoKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceExternalBufferInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPhysicalDeviceExternalBufferInfoKHR.byteLength = 0x20;

VkPhysicalDeviceExternalBufferInfoKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  flags: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  usage: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  handleType: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
};
/** VkExternalBufferProperties **/
class VkExternalBufferProperties {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._externalMemoryProperties = new VkExternalMemoryProperties({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x10 });
    this.sType = 0x3B9BDF5B;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkExternalBufferProperties.pNext' isn't allowed to be filled");
  }
  get externalMemoryProperties() {
    return this._externalMemoryProperties;
  }
  
};

VkExternalBufferProperties.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkExternalBufferProperties.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x20));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x20), 0x0);
  
  
  
  
};

VkExternalBufferProperties.byteLength = 0x20;

VkExternalBufferProperties.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  externalMemoryProperties: {
    byteOffset: 0x10,
    byteLength: 0xC
  },
};
/** VkExternalBufferPropertiesKHR **/
class VkExternalBufferPropertiesKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._externalMemoryProperties = new VkExternalMemoryProperties({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x10 });
    this.sType = 0x3B9BDF5B;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkExternalBufferPropertiesKHR.pNext' isn't allowed to be filled");
  }
  get externalMemoryProperties() {
    return this._externalMemoryProperties;
  }
  
};

VkExternalBufferPropertiesKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkExternalBufferPropertiesKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x20));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x20), 0x0);
  
  
  
  
};

VkExternalBufferPropertiesKHR.byteLength = 0x20;

VkExternalBufferPropertiesKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  externalMemoryProperties: {
    byteOffset: 0x10,
    byteLength: 0xC
  },
};
/** VkPhysicalDeviceIDProperties **/
class VkPhysicalDeviceIDProperties {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x40) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x40) / 0x8);
      this.memoryViewUint8 = new Uint8Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x1, (opts.$memoryOffset + 0x40) / 0x1);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x40) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x40);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint8 = new Uint8Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._deviceUUID = [...Array(16)].fill(0x0);
    this._driverUUID = [...Array(16)].fill(0x0);
    this._deviceLUID = [...Array(8)].fill(0x0);
    
    
    this.sType = 0x3B9BDF5C;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceIDProperties.pNext' isn't allowed to be filled");
  }
  get deviceUUID() {
    return [
      this.memoryViewUint8[0x10],
      this.memoryViewUint8[0x11],
      this.memoryViewUint8[0x12],
      this.memoryViewUint8[0x13],
      this.memoryViewUint8[0x14],
      this.memoryViewUint8[0x15],
      this.memoryViewUint8[0x16],
      this.memoryViewUint8[0x17],
      this.memoryViewUint8[0x18],
      this.memoryViewUint8[0x19],
      this.memoryViewUint8[0x1A],
      this.memoryViewUint8[0x1B],
      this.memoryViewUint8[0x1C],
      this.memoryViewUint8[0x1D],
      this.memoryViewUint8[0x1E],
      this.memoryViewUint8[0x1F]
    ];
  }
  get driverUUID() {
    return [
      this.memoryViewUint8[0x20],
      this.memoryViewUint8[0x21],
      this.memoryViewUint8[0x22],
      this.memoryViewUint8[0x23],
      this.memoryViewUint8[0x24],
      this.memoryViewUint8[0x25],
      this.memoryViewUint8[0x26],
      this.memoryViewUint8[0x27],
      this.memoryViewUint8[0x28],
      this.memoryViewUint8[0x29],
      this.memoryViewUint8[0x2A],
      this.memoryViewUint8[0x2B],
      this.memoryViewUint8[0x2C],
      this.memoryViewUint8[0x2D],
      this.memoryViewUint8[0x2E],
      this.memoryViewUint8[0x2F]
    ];
  }
  get deviceLUID() {
    return [
      this.memoryViewUint8[0x30],
      this.memoryViewUint8[0x31],
      this.memoryViewUint8[0x32],
      this.memoryViewUint8[0x33],
      this.memoryViewUint8[0x34],
      this.memoryViewUint8[0x35],
      this.memoryViewUint8[0x36],
      this.memoryViewUint8[0x37]
    ];
  }
  get deviceNodeMask() {
    return this.memoryViewUint32[0xE];
  }
  get deviceLUIDValid() {
    return this.memoryViewUint32[0xF] !== 0;
  }
  
};

VkPhysicalDeviceIDProperties.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceIDProperties.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x40));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x40), 0x0);
  
  
  
  
  
  
  
  
};

VkPhysicalDeviceIDProperties.byteLength = 0x40;

VkPhysicalDeviceIDProperties.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  deviceUUID: {
    byteOffset: 0x10,
    byteLength: 0x10
  },
  driverUUID: {
    byteOffset: 0x20,
    byteLength: 0x10
  },
  deviceLUID: {
    byteOffset: 0x30,
    byteLength: 0x8
  },
  deviceNodeMask: {
    byteOffset: 0x38,
    byteLength: 0x4
  },
  deviceLUIDValid: {
    byteOffset: 0x3C,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceIDPropertiesKHR **/
class VkPhysicalDeviceIDPropertiesKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x40) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x40) / 0x8);
      this.memoryViewUint8 = new Uint8Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x1, (opts.$memoryOffset + 0x40) / 0x1);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x40) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x40);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint8 = new Uint8Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._deviceUUID = [...Array(16)].fill(0x0);
    this._driverUUID = [...Array(16)].fill(0x0);
    this._deviceLUID = [...Array(8)].fill(0x0);
    
    
    this.sType = 0x3B9BDF5C;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceIDPropertiesKHR.pNext' isn't allowed to be filled");
  }
  get deviceUUID() {
    return [
      this.memoryViewUint8[0x10],
      this.memoryViewUint8[0x11],
      this.memoryViewUint8[0x12],
      this.memoryViewUint8[0x13],
      this.memoryViewUint8[0x14],
      this.memoryViewUint8[0x15],
      this.memoryViewUint8[0x16],
      this.memoryViewUint8[0x17],
      this.memoryViewUint8[0x18],
      this.memoryViewUint8[0x19],
      this.memoryViewUint8[0x1A],
      this.memoryViewUint8[0x1B],
      this.memoryViewUint8[0x1C],
      this.memoryViewUint8[0x1D],
      this.memoryViewUint8[0x1E],
      this.memoryViewUint8[0x1F]
    ];
  }
  get driverUUID() {
    return [
      this.memoryViewUint8[0x20],
      this.memoryViewUint8[0x21],
      this.memoryViewUint8[0x22],
      this.memoryViewUint8[0x23],
      this.memoryViewUint8[0x24],
      this.memoryViewUint8[0x25],
      this.memoryViewUint8[0x26],
      this.memoryViewUint8[0x27],
      this.memoryViewUint8[0x28],
      this.memoryViewUint8[0x29],
      this.memoryViewUint8[0x2A],
      this.memoryViewUint8[0x2B],
      this.memoryViewUint8[0x2C],
      this.memoryViewUint8[0x2D],
      this.memoryViewUint8[0x2E],
      this.memoryViewUint8[0x2F]
    ];
  }
  get deviceLUID() {
    return [
      this.memoryViewUint8[0x30],
      this.memoryViewUint8[0x31],
      this.memoryViewUint8[0x32],
      this.memoryViewUint8[0x33],
      this.memoryViewUint8[0x34],
      this.memoryViewUint8[0x35],
      this.memoryViewUint8[0x36],
      this.memoryViewUint8[0x37]
    ];
  }
  get deviceNodeMask() {
    return this.memoryViewUint32[0xE];
  }
  get deviceLUIDValid() {
    return this.memoryViewUint32[0xF] !== 0;
  }
  
};

VkPhysicalDeviceIDPropertiesKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceIDPropertiesKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x40));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x40), 0x0);
  
  
  
  
  
  
  
  
};

VkPhysicalDeviceIDPropertiesKHR.byteLength = 0x40;

VkPhysicalDeviceIDPropertiesKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  deviceUUID: {
    byteOffset: 0x10,
    byteLength: 0x10
  },
  driverUUID: {
    byteOffset: 0x20,
    byteLength: 0x10
  },
  deviceLUID: {
    byteOffset: 0x30,
    byteLength: 0x8
  },
  deviceNodeMask: {
    byteOffset: 0x38,
    byteLength: 0x4
  },
  deviceLUIDValid: {
    byteOffset: 0x3C,
    byteLength: 0x4
  },
};
/** VkExternalMemoryImageCreateInfo **/
class VkExternalMemoryImageCreateInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9BE341;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleTypes !== void 0) this.handleTypes = opts.handleTypes;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkExternalMemoryImageCreateInfo.pNext' isn't allowed to be filled");
  }
  get handleTypes() {
    return this.memoryViewInt32[0x4];
  }
  set handleTypes(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkExternalMemoryImageCreateInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkExternalMemoryImageCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkExternalMemoryImageCreateInfo.byteLength = 0x18;

VkExternalMemoryImageCreateInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  handleTypes: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkExternalMemoryImageCreateInfoKHR **/
class VkExternalMemoryImageCreateInfoKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9BE341;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleTypes !== void 0) this.handleTypes = opts.handleTypes;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkExternalMemoryImageCreateInfoKHR.pNext' isn't allowed to be filled");
  }
  get handleTypes() {
    return this.memoryViewInt32[0x4];
  }
  set handleTypes(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkExternalMemoryImageCreateInfoKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkExternalMemoryImageCreateInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkExternalMemoryImageCreateInfoKHR.byteLength = 0x18;

VkExternalMemoryImageCreateInfoKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  handleTypes: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkExternalMemoryBufferCreateInfo **/
class VkExternalMemoryBufferCreateInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9BE340;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleTypes !== void 0) this.handleTypes = opts.handleTypes;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkExternalMemoryBufferCreateInfo.pNext' isn't allowed to be filled");
  }
  get handleTypes() {
    return this.memoryViewInt32[0x4];
  }
  set handleTypes(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkExternalMemoryBufferCreateInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkExternalMemoryBufferCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkExternalMemoryBufferCreateInfo.byteLength = 0x18;

VkExternalMemoryBufferCreateInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  handleTypes: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkExternalMemoryBufferCreateInfoKHR **/
class VkExternalMemoryBufferCreateInfoKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9BE340;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleTypes !== void 0) this.handleTypes = opts.handleTypes;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkExternalMemoryBufferCreateInfoKHR.pNext' isn't allowed to be filled");
  }
  get handleTypes() {
    return this.memoryViewInt32[0x4];
  }
  set handleTypes(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkExternalMemoryBufferCreateInfoKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkExternalMemoryBufferCreateInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkExternalMemoryBufferCreateInfoKHR.byteLength = 0x18;

VkExternalMemoryBufferCreateInfoKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  handleTypes: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkExportMemoryAllocateInfo **/
class VkExportMemoryAllocateInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9BE342;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleTypes !== void 0) this.handleTypes = opts.handleTypes;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkExportMemoryAllocateInfo.pNext' isn't allowed to be filled");
  }
  get handleTypes() {
    return this.memoryViewInt32[0x4];
  }
  set handleTypes(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkExportMemoryAllocateInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkExportMemoryAllocateInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkExportMemoryAllocateInfo.byteLength = 0x18;

VkExportMemoryAllocateInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  handleTypes: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkExportMemoryAllocateInfoKHR **/
class VkExportMemoryAllocateInfoKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9BE342;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleTypes !== void 0) this.handleTypes = opts.handleTypes;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkExportMemoryAllocateInfoKHR.pNext' isn't allowed to be filled");
  }
  get handleTypes() {
    return this.memoryViewInt32[0x4];
  }
  set handleTypes(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkExportMemoryAllocateInfoKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkExportMemoryAllocateInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkExportMemoryAllocateInfoKHR.byteLength = 0x18;

VkExportMemoryAllocateInfoKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  handleTypes: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkImportMemoryFdInfoKHR **/
class VkImportMemoryFdInfoKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    this.sType = 0x3B9BEB10;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      if (opts.fd !== void 0) this.fd = opts.fd;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkImportMemoryFdInfoKHR.pNext' isn't allowed to be filled");
  }
  get handleType() {
    return this.memoryViewInt32[0x4];
  }
  set handleType(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get fd() {
    return this.memoryViewInt32[0x5];
  }
  set fd(value) {
    
    this.memoryViewInt32[0x5] = value;
  }
  
};

VkImportMemoryFdInfoKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkImportMemoryFdInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkImportMemoryFdInfoKHR.byteLength = 0x18;

VkImportMemoryFdInfoKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  handleType: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  fd: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
};
/** VkMemoryFdPropertiesKHR **/
class VkMemoryFdPropertiesKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9BEB11;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkMemoryFdPropertiesKHR.pNext' isn't allowed to be filled");
  }
  get memoryTypeBits() {
    return this.memoryViewUint32[0x4];
  }
  
};

VkMemoryFdPropertiesKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkMemoryFdPropertiesKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x18));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x18), 0x0);
  
  
};

VkMemoryFdPropertiesKHR.byteLength = 0x18;

VkMemoryFdPropertiesKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  memoryTypeBits: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkMemoryGetFdInfoKHR **/
class VkMemoryGetFdInfoKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._memory = null;
    
    this.sType = 0x3B9BEB12;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.memory !== void 0) this.memory = opts.memory;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkMemoryGetFdInfoKHR.pNext' isn't allowed to be filled");
  }
  get memory() {
    return this._memory;
  }
  set memory(value) {
    if (value !== null ) {
      
      this._memory = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._memory = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } 
    
  }
  get handleType() {
    return this.memoryViewInt32[0x6];
  }
  set handleType(value) {
    
    this.memoryViewInt32[0x6] = value;
  }
  
};

VkMemoryGetFdInfoKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkMemoryGetFdInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkMemoryGetFdInfoKHR.byteLength = 0x20;

VkMemoryGetFdInfoKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  memory: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
  handleType: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceExternalSemaphoreInfo **/
class VkPhysicalDeviceExternalSemaphoreInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9BF2E0;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceExternalSemaphoreInfo.pNext' isn't allowed to be filled");
  }
  get handleType() {
    return this.memoryViewInt32[0x4];
  }
  set handleType(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkPhysicalDeviceExternalSemaphoreInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceExternalSemaphoreInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPhysicalDeviceExternalSemaphoreInfo.byteLength = 0x18;

VkPhysicalDeviceExternalSemaphoreInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  handleType: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceExternalSemaphoreInfoKHR **/
class VkPhysicalDeviceExternalSemaphoreInfoKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9BF2E0;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceExternalSemaphoreInfoKHR.pNext' isn't allowed to be filled");
  }
  get handleType() {
    return this.memoryViewInt32[0x4];
  }
  set handleType(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkPhysicalDeviceExternalSemaphoreInfoKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceExternalSemaphoreInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPhysicalDeviceExternalSemaphoreInfoKHR.byteLength = 0x18;

VkPhysicalDeviceExternalSemaphoreInfoKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  handleType: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkExternalSemaphoreProperties **/
class VkExternalSemaphoreProperties {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    
    this.sType = 0x3B9BF2E1;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkExternalSemaphoreProperties.pNext' isn't allowed to be filled");
  }
  get exportFromImportedHandleTypes() {
    return this.memoryViewInt32[0x4];
  }
  get compatibleHandleTypes() {
    return this.memoryViewInt32[0x5];
  }
  get externalSemaphoreFeatures() {
    return this.memoryViewInt32[0x6];
  }
  
};

VkExternalSemaphoreProperties.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkExternalSemaphoreProperties.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x20));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x20), 0x0);
  
  
};

VkExternalSemaphoreProperties.byteLength = 0x20;

VkExternalSemaphoreProperties.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  exportFromImportedHandleTypes: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  compatibleHandleTypes: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  externalSemaphoreFeatures: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
};
/** VkExternalSemaphorePropertiesKHR **/
class VkExternalSemaphorePropertiesKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    
    this.sType = 0x3B9BF2E1;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkExternalSemaphorePropertiesKHR.pNext' isn't allowed to be filled");
  }
  get exportFromImportedHandleTypes() {
    return this.memoryViewInt32[0x4];
  }
  get compatibleHandleTypes() {
    return this.memoryViewInt32[0x5];
  }
  get externalSemaphoreFeatures() {
    return this.memoryViewInt32[0x6];
  }
  
};

VkExternalSemaphorePropertiesKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkExternalSemaphorePropertiesKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x20));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x20), 0x0);
  
  
};

VkExternalSemaphorePropertiesKHR.byteLength = 0x20;

VkExternalSemaphorePropertiesKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  exportFromImportedHandleTypes: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  compatibleHandleTypes: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  externalSemaphoreFeatures: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
};
/** VkExportSemaphoreCreateInfo **/
class VkExportSemaphoreCreateInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9BF6C8;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleTypes !== void 0) this.handleTypes = opts.handleTypes;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkExportSemaphoreCreateInfo.pNext' isn't allowed to be filled");
  }
  get handleTypes() {
    return this.memoryViewInt32[0x4];
  }
  set handleTypes(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkExportSemaphoreCreateInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkExportSemaphoreCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkExportSemaphoreCreateInfo.byteLength = 0x18;

VkExportSemaphoreCreateInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  handleTypes: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkExportSemaphoreCreateInfoKHR **/
class VkExportSemaphoreCreateInfoKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9BF6C8;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleTypes !== void 0) this.handleTypes = opts.handleTypes;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkExportSemaphoreCreateInfoKHR.pNext' isn't allowed to be filled");
  }
  get handleTypes() {
    return this.memoryViewInt32[0x4];
  }
  set handleTypes(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkExportSemaphoreCreateInfoKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkExportSemaphoreCreateInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkExportSemaphoreCreateInfoKHR.byteLength = 0x18;

VkExportSemaphoreCreateInfoKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  handleTypes: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkImportSemaphoreFdInfoKHR **/
class VkImportSemaphoreFdInfoKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x28);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._semaphore = null;
    
    
    
    this.sType = 0x3B9BFE98;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.semaphore !== void 0) this.semaphore = opts.semaphore;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      if (opts.fd !== void 0) this.fd = opts.fd;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkImportSemaphoreFdInfoKHR.pNext' isn't allowed to be filled");
  }
  get semaphore() {
    return this._semaphore;
  }
  set semaphore(value) {
    if (value !== null ) {
      
      this._semaphore = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._semaphore = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } 
    
  }
  get flags() {
    return this.memoryViewInt32[0x6];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x6] = value;
  }
  get handleType() {
    return this.memoryViewInt32[0x7];
  }
  set handleType(value) {
    
    this.memoryViewInt32[0x7] = value;
  }
  get fd() {
    return this.memoryViewInt32[0x8];
  }
  set fd(value) {
    
    this.memoryViewInt32[0x8] = value;
  }
  
};

VkImportSemaphoreFdInfoKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkImportSemaphoreFdInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkImportSemaphoreFdInfoKHR.byteLength = 0x28;

VkImportSemaphoreFdInfoKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  semaphore: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
  flags: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
  handleType: {
    byteOffset: 0x1C,
    byteLength: 0x4
  },
  fd: {
    byteOffset: 0x20,
    byteLength: 0x4
  },
};
/** VkSemaphoreGetFdInfoKHR **/
class VkSemaphoreGetFdInfoKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._semaphore = null;
    
    this.sType = 0x3B9BFE99;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.semaphore !== void 0) this.semaphore = opts.semaphore;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkSemaphoreGetFdInfoKHR.pNext' isn't allowed to be filled");
  }
  get semaphore() {
    return this._semaphore;
  }
  set semaphore(value) {
    if (value !== null ) {
      
      this._semaphore = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._semaphore = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } 
    
  }
  get handleType() {
    return this.memoryViewInt32[0x6];
  }
  set handleType(value) {
    
    this.memoryViewInt32[0x6] = value;
  }
  
};

VkSemaphoreGetFdInfoKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkSemaphoreGetFdInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkSemaphoreGetFdInfoKHR.byteLength = 0x20;

VkSemaphoreGetFdInfoKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  semaphore: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
  handleType: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceExternalFenceInfo **/
class VkPhysicalDeviceExternalFenceInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9C7F80;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceExternalFenceInfo.pNext' isn't allowed to be filled");
  }
  get handleType() {
    return this.memoryViewInt32[0x4];
  }
  set handleType(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkPhysicalDeviceExternalFenceInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceExternalFenceInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPhysicalDeviceExternalFenceInfo.byteLength = 0x18;

VkPhysicalDeviceExternalFenceInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  handleType: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceExternalFenceInfoKHR **/
class VkPhysicalDeviceExternalFenceInfoKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9C7F80;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceExternalFenceInfoKHR.pNext' isn't allowed to be filled");
  }
  get handleType() {
    return this.memoryViewInt32[0x4];
  }
  set handleType(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkPhysicalDeviceExternalFenceInfoKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceExternalFenceInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPhysicalDeviceExternalFenceInfoKHR.byteLength = 0x18;

VkPhysicalDeviceExternalFenceInfoKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  handleType: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkExternalFenceProperties **/
class VkExternalFenceProperties {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    
    this.sType = 0x3B9C7F81;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkExternalFenceProperties.pNext' isn't allowed to be filled");
  }
  get exportFromImportedHandleTypes() {
    return this.memoryViewInt32[0x4];
  }
  get compatibleHandleTypes() {
    return this.memoryViewInt32[0x5];
  }
  get externalFenceFeatures() {
    return this.memoryViewInt32[0x6];
  }
  
};

VkExternalFenceProperties.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkExternalFenceProperties.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x20));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x20), 0x0);
  
  
};

VkExternalFenceProperties.byteLength = 0x20;

VkExternalFenceProperties.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  exportFromImportedHandleTypes: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  compatibleHandleTypes: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  externalFenceFeatures: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
};
/** VkExternalFencePropertiesKHR **/
class VkExternalFencePropertiesKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    
    this.sType = 0x3B9C7F81;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkExternalFencePropertiesKHR.pNext' isn't allowed to be filled");
  }
  get exportFromImportedHandleTypes() {
    return this.memoryViewInt32[0x4];
  }
  get compatibleHandleTypes() {
    return this.memoryViewInt32[0x5];
  }
  get externalFenceFeatures() {
    return this.memoryViewInt32[0x6];
  }
  
};

VkExternalFencePropertiesKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkExternalFencePropertiesKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x20));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x20), 0x0);
  
  
};

VkExternalFencePropertiesKHR.byteLength = 0x20;

VkExternalFencePropertiesKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  exportFromImportedHandleTypes: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  compatibleHandleTypes: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  externalFenceFeatures: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
};
/** VkExportFenceCreateInfo **/
class VkExportFenceCreateInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9C8368;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleTypes !== void 0) this.handleTypes = opts.handleTypes;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkExportFenceCreateInfo.pNext' isn't allowed to be filled");
  }
  get handleTypes() {
    return this.memoryViewInt32[0x4];
  }
  set handleTypes(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkExportFenceCreateInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkExportFenceCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkExportFenceCreateInfo.byteLength = 0x18;

VkExportFenceCreateInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  handleTypes: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkExportFenceCreateInfoKHR **/
class VkExportFenceCreateInfoKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9C8368;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleTypes !== void 0) this.handleTypes = opts.handleTypes;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkExportFenceCreateInfoKHR.pNext' isn't allowed to be filled");
  }
  get handleTypes() {
    return this.memoryViewInt32[0x4];
  }
  set handleTypes(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkExportFenceCreateInfoKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkExportFenceCreateInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkExportFenceCreateInfoKHR.byteLength = 0x18;

VkExportFenceCreateInfoKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  handleTypes: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkImportFenceFdInfoKHR **/
class VkImportFenceFdInfoKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x28);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._fence = null;
    
    
    
    this.sType = 0x3B9C8B38;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.fence !== void 0) this.fence = opts.fence;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      if (opts.fd !== void 0) this.fd = opts.fd;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkImportFenceFdInfoKHR.pNext' isn't allowed to be filled");
  }
  get fence() {
    return this._fence;
  }
  set fence(value) {
    if (value !== null ) {
      
      this._fence = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._fence = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } 
    
  }
  get flags() {
    return this.memoryViewInt32[0x6];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x6] = value;
  }
  get handleType() {
    return this.memoryViewInt32[0x7];
  }
  set handleType(value) {
    
    this.memoryViewInt32[0x7] = value;
  }
  get fd() {
    return this.memoryViewInt32[0x8];
  }
  set fd(value) {
    
    this.memoryViewInt32[0x8] = value;
  }
  
};

VkImportFenceFdInfoKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkImportFenceFdInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkImportFenceFdInfoKHR.byteLength = 0x28;

VkImportFenceFdInfoKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  fence: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
  flags: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
  handleType: {
    byteOffset: 0x1C,
    byteLength: 0x4
  },
  fd: {
    byteOffset: 0x20,
    byteLength: 0x4
  },
};
/** VkFenceGetFdInfoKHR **/
class VkFenceGetFdInfoKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._fence = null;
    
    this.sType = 0x3B9C8B39;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.fence !== void 0) this.fence = opts.fence;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkFenceGetFdInfoKHR.pNext' isn't allowed to be filled");
  }
  get fence() {
    return this._fence;
  }
  set fence(value) {
    if (value !== null ) {
      
      this._fence = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._fence = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } 
    
  }
  get handleType() {
    return this.memoryViewInt32[0x6];
  }
  set handleType(value) {
    
    this.memoryViewInt32[0x6] = value;
  }
  
};

VkFenceGetFdInfoKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkFenceGetFdInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkFenceGetFdInfoKHR.byteLength = 0x20;

VkFenceGetFdInfoKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  fence: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
  handleType: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceMultiviewFeatures **/
class VkPhysicalDeviceMultiviewFeatures {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    
    this.sType = 0x3B9B9909;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.multiview !== void 0) this.multiview = opts.multiview;
      if (opts.multiviewGeometryShader !== void 0) this.multiviewGeometryShader = opts.multiviewGeometryShader;
      if (opts.multiviewTessellationShader !== void 0) this.multiviewTessellationShader = opts.multiviewTessellationShader;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceMultiviewFeatures.pNext' isn't allowed to be filled");
  }
  get multiview() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set multiview(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  get multiviewGeometryShader() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  set multiviewGeometryShader(value) {
    this.memoryViewUint32[0x5] = value | 0;
  }
  get multiviewTessellationShader() {
    return this.memoryViewUint32[0x6] !== 0;
  }
  set multiviewTessellationShader(value) {
    this.memoryViewUint32[0x6] = value | 0;
  }
  
};

VkPhysicalDeviceMultiviewFeatures.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceMultiviewFeatures.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPhysicalDeviceMultiviewFeatures.byteLength = 0x20;

VkPhysicalDeviceMultiviewFeatures.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  multiview: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  multiviewGeometryShader: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  multiviewTessellationShader: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceMultiviewFeaturesKHR **/
class VkPhysicalDeviceMultiviewFeaturesKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    
    this.sType = 0x3B9B9909;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.multiview !== void 0) this.multiview = opts.multiview;
      if (opts.multiviewGeometryShader !== void 0) this.multiviewGeometryShader = opts.multiviewGeometryShader;
      if (opts.multiviewTessellationShader !== void 0) this.multiviewTessellationShader = opts.multiviewTessellationShader;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceMultiviewFeaturesKHR.pNext' isn't allowed to be filled");
  }
  get multiview() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set multiview(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  get multiviewGeometryShader() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  set multiviewGeometryShader(value) {
    this.memoryViewUint32[0x5] = value | 0;
  }
  get multiviewTessellationShader() {
    return this.memoryViewUint32[0x6] !== 0;
  }
  set multiviewTessellationShader(value) {
    this.memoryViewUint32[0x6] = value | 0;
  }
  
};

VkPhysicalDeviceMultiviewFeaturesKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceMultiviewFeaturesKHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPhysicalDeviceMultiviewFeaturesKHR.byteLength = 0x20;

VkPhysicalDeviceMultiviewFeaturesKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  multiview: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  multiviewGeometryShader: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  multiviewTessellationShader: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceMultiviewProperties **/
class VkPhysicalDeviceMultiviewProperties {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    this.sType = 0x3B9B990A;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceMultiviewProperties.pNext' isn't allowed to be filled");
  }
  get maxMultiviewViewCount() {
    return this.memoryViewUint32[0x4];
  }
  get maxMultiviewInstanceIndex() {
    return this.memoryViewUint32[0x5];
  }
  
};

VkPhysicalDeviceMultiviewProperties.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceMultiviewProperties.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x18));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x18), 0x0);
  
  
};

VkPhysicalDeviceMultiviewProperties.byteLength = 0x18;

VkPhysicalDeviceMultiviewProperties.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  maxMultiviewViewCount: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  maxMultiviewInstanceIndex: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceMultiviewPropertiesKHR **/
class VkPhysicalDeviceMultiviewPropertiesKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    this.sType = 0x3B9B990A;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceMultiviewPropertiesKHR.pNext' isn't allowed to be filled");
  }
  get maxMultiviewViewCount() {
    return this.memoryViewUint32[0x4];
  }
  get maxMultiviewInstanceIndex() {
    return this.memoryViewUint32[0x5];
  }
  
};

VkPhysicalDeviceMultiviewPropertiesKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceMultiviewPropertiesKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x18));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x18), 0x0);
  
  
};

VkPhysicalDeviceMultiviewPropertiesKHR.byteLength = 0x18;

VkPhysicalDeviceMultiviewPropertiesKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  maxMultiviewViewCount: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  maxMultiviewInstanceIndex: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
};
/** VkRenderPassMultiviewCreateInfo **/
class VkRenderPassMultiviewCreateInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x40) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x40) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x40) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x40);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this._pViewMasks = null;
    
    this._pViewOffsets = null;
    
    this._pCorrelationMasks = null;
    this.sType = 0x3B9B9908;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.subpassCount !== void 0) this.subpassCount = opts.subpassCount;
      if (opts.pViewMasks !== void 0) this.pViewMasks = opts.pViewMasks;
      if (opts.dependencyCount !== void 0) this.dependencyCount = opts.dependencyCount;
      if (opts.pViewOffsets !== void 0) this.pViewOffsets = opts.pViewOffsets;
      if (opts.correlationMaskCount !== void 0) this.correlationMaskCount = opts.correlationMaskCount;
      if (opts.pCorrelationMasks !== void 0) this.pCorrelationMasks = opts.pCorrelationMasks;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkRenderPassMultiviewCreateInfo.pNext' isn't allowed to be filled");
  }
  get subpassCount() {
    return this.memoryViewUint32[0x4];
  }
  set subpassCount(value) {
    
    this.memoryViewUint32[0x4] = value;
  }
  get pViewMasks() {
    return this._pViewMasks;
  }
  set pViewMasks(value) {
    if (value !== null ) {
      this._pViewMasks = value;
      this.memoryViewBigInt64[0x3] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pViewMasks = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } 
    
  }
  get dependencyCount() {
    return this.memoryViewUint32[0x8];
  }
  set dependencyCount(value) {
    
    this.memoryViewUint32[0x8] = value;
  }
  get pViewOffsets() {
    return this._pViewOffsets;
  }
  set pViewOffsets(value) {
    if (value !== null ) {
      this._pViewOffsets = value;
      this.memoryViewBigInt64[0x5] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pViewOffsets = null;
      this.memoryViewBigInt64[0x5] = BI0;
    } 
    
  }
  get correlationMaskCount() {
    return this.memoryViewUint32[0xC];
  }
  set correlationMaskCount(value) {
    
    this.memoryViewUint32[0xC] = value;
  }
  get pCorrelationMasks() {
    return this._pCorrelationMasks;
  }
  set pCorrelationMasks(value) {
    if (value !== null ) {
      this._pCorrelationMasks = value;
      this.memoryViewBigInt64[0x7] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pCorrelationMasks = null;
      this.memoryViewBigInt64[0x7] = BI0;
    } 
    
  }
  
};

VkRenderPassMultiviewCreateInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkRenderPassMultiviewCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkRenderPassMultiviewCreateInfo.byteLength = 0x40;

VkRenderPassMultiviewCreateInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  subpassCount: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  pViewMasks: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
  dependencyCount: {
    byteOffset: 0x20,
    byteLength: 0x4
  },
  pViewOffsets: {
    byteOffset: 0x28,
    byteLength: 0x8
  },
  correlationMaskCount: {
    byteOffset: 0x30,
    byteLength: 0x4
  },
  pCorrelationMasks: {
    byteOffset: 0x38,
    byteLength: 0x8
  },
};
/** VkRenderPassMultiviewCreateInfoKHR **/
class VkRenderPassMultiviewCreateInfoKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x40) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x40) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x40) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x40);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this._pViewMasks = null;
    
    this._pViewOffsets = null;
    
    this._pCorrelationMasks = null;
    this.sType = 0x3B9B9908;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.subpassCount !== void 0) this.subpassCount = opts.subpassCount;
      if (opts.pViewMasks !== void 0) this.pViewMasks = opts.pViewMasks;
      if (opts.dependencyCount !== void 0) this.dependencyCount = opts.dependencyCount;
      if (opts.pViewOffsets !== void 0) this.pViewOffsets = opts.pViewOffsets;
      if (opts.correlationMaskCount !== void 0) this.correlationMaskCount = opts.correlationMaskCount;
      if (opts.pCorrelationMasks !== void 0) this.pCorrelationMasks = opts.pCorrelationMasks;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkRenderPassMultiviewCreateInfoKHR.pNext' isn't allowed to be filled");
  }
  get subpassCount() {
    return this.memoryViewUint32[0x4];
  }
  set subpassCount(value) {
    
    this.memoryViewUint32[0x4] = value;
  }
  get pViewMasks() {
    return this._pViewMasks;
  }
  set pViewMasks(value) {
    if (value !== null ) {
      this._pViewMasks = value;
      this.memoryViewBigInt64[0x3] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pViewMasks = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } 
    
  }
  get dependencyCount() {
    return this.memoryViewUint32[0x8];
  }
  set dependencyCount(value) {
    
    this.memoryViewUint32[0x8] = value;
  }
  get pViewOffsets() {
    return this._pViewOffsets;
  }
  set pViewOffsets(value) {
    if (value !== null ) {
      this._pViewOffsets = value;
      this.memoryViewBigInt64[0x5] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pViewOffsets = null;
      this.memoryViewBigInt64[0x5] = BI0;
    } 
    
  }
  get correlationMaskCount() {
    return this.memoryViewUint32[0xC];
  }
  set correlationMaskCount(value) {
    
    this.memoryViewUint32[0xC] = value;
  }
  get pCorrelationMasks() {
    return this._pCorrelationMasks;
  }
  set pCorrelationMasks(value) {
    if (value !== null ) {
      this._pCorrelationMasks = value;
      this.memoryViewBigInt64[0x7] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pCorrelationMasks = null;
      this.memoryViewBigInt64[0x7] = BI0;
    } 
    
  }
  
};

VkRenderPassMultiviewCreateInfoKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkRenderPassMultiviewCreateInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkRenderPassMultiviewCreateInfoKHR.byteLength = 0x40;

VkRenderPassMultiviewCreateInfoKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  subpassCount: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  pViewMasks: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
  dependencyCount: {
    byteOffset: 0x20,
    byteLength: 0x4
  },
  pViewOffsets: {
    byteOffset: 0x28,
    byteLength: 0x8
  },
  correlationMaskCount: {
    byteOffset: 0x30,
    byteLength: 0x4
  },
  pCorrelationMasks: {
    byteOffset: 0x38,
    byteLength: 0x8
  },
};
/** VkSurfaceCapabilities2EXT **/
class VkSurfaceCapabilities2EXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x48) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x48) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x48) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x48);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    this._currentExtent = new VkExtent2D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x18 });
    this._minImageExtent = new VkExtent2D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x20 });
    this._maxImageExtent = new VkExtent2D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x28 });
    
    
    
    
    
    
    this.sType = 0x3B9C2990;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkSurfaceCapabilities2EXT.pNext' isn't allowed to be filled");
  }
  get minImageCount() {
    return this.memoryViewUint32[0x4];
  }
  get maxImageCount() {
    return this.memoryViewUint32[0x5];
  }
  get currentExtent() {
    return this._currentExtent;
  }
  get minImageExtent() {
    return this._minImageExtent;
  }
  get maxImageExtent() {
    return this._maxImageExtent;
  }
  get maxImageArrayLayers() {
    return this.memoryViewUint32[0xC];
  }
  get supportedTransforms() {
    return this.memoryViewInt32[0xD];
  }
  get currentTransform() {
    return this.memoryViewInt32[0xE];
  }
  get supportedCompositeAlpha() {
    return this.memoryViewInt32[0xF];
  }
  get supportedUsageFlags() {
    return this.memoryViewInt32[0x10];
  }
  get supportedSurfaceCounters() {
    return this.memoryViewInt32[0x11];
  }
  
};

VkSurfaceCapabilities2EXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkSurfaceCapabilities2EXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x48));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x48), 0x0);
  
  
  
  
  
  
  
  
};

VkSurfaceCapabilities2EXT.byteLength = 0x48;

VkSurfaceCapabilities2EXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  minImageCount: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  maxImageCount: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  currentExtent: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
  minImageExtent: {
    byteOffset: 0x20,
    byteLength: 0x8
  },
  maxImageExtent: {
    byteOffset: 0x28,
    byteLength: 0x8
  },
  maxImageArrayLayers: {
    byteOffset: 0x30,
    byteLength: 0x4
  },
  supportedTransforms: {
    byteOffset: 0x34,
    byteLength: 0x4
  },
  currentTransform: {
    byteOffset: 0x38,
    byteLength: 0x4
  },
  supportedCompositeAlpha: {
    byteOffset: 0x3C,
    byteLength: 0x4
  },
  supportedUsageFlags: {
    byteOffset: 0x40,
    byteLength: 0x4
  },
  supportedSurfaceCounters: {
    byteOffset: 0x44,
    byteLength: 0x4
  },
};
/** VkDisplayPowerInfoEXT **/
class VkDisplayPowerInfoEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9C2D78;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.powerState !== void 0) this.powerState = opts.powerState;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDisplayPowerInfoEXT.pNext' isn't allowed to be filled");
  }
  get powerState() {
    return this.memoryViewInt32[0x4];
  }
  set powerState(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkDisplayPowerInfoEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDisplayPowerInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkDisplayPowerInfoEXT.byteLength = 0x18;

VkDisplayPowerInfoEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  powerState: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkDeviceEventInfoEXT **/
class VkDeviceEventInfoEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9C2D79;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.deviceEvent !== void 0) this.deviceEvent = opts.deviceEvent;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDeviceEventInfoEXT.pNext' isn't allowed to be filled");
  }
  get deviceEvent() {
    return this.memoryViewInt32[0x4];
  }
  set deviceEvent(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkDeviceEventInfoEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDeviceEventInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkDeviceEventInfoEXT.byteLength = 0x18;

VkDeviceEventInfoEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  deviceEvent: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkDisplayEventInfoEXT **/
class VkDisplayEventInfoEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9C2D7A;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.displayEvent !== void 0) this.displayEvent = opts.displayEvent;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDisplayEventInfoEXT.pNext' isn't allowed to be filled");
  }
  get displayEvent() {
    return this.memoryViewInt32[0x4];
  }
  set displayEvent(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkDisplayEventInfoEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDisplayEventInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkDisplayEventInfoEXT.byteLength = 0x18;

VkDisplayEventInfoEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  displayEvent: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkSwapchainCounterCreateInfoEXT **/
class VkSwapchainCounterCreateInfoEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9C2D7B;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.surfaceCounters !== void 0) this.surfaceCounters = opts.surfaceCounters;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkSwapchainCounterCreateInfoEXT.pNext' isn't allowed to be filled");
  }
  get surfaceCounters() {
    return this.memoryViewInt32[0x4];
  }
  set surfaceCounters(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkSwapchainCounterCreateInfoEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkSwapchainCounterCreateInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkSwapchainCounterCreateInfoEXT.byteLength = 0x18;

VkSwapchainCounterCreateInfoEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  surfaceCounters: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceGroupProperties **/
class VkPhysicalDeviceGroupProperties {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x120) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x120) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x120) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x120);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this._physicalDevices = null;
    
    this.sType = 0x3B9BDB70;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceGroupProperties.pNext' isn't allowed to be filled");
  }
  get physicalDeviceCount() {
    return this.memoryViewUint32[0x4];
  }
  get physicalDevices() {
    return this._physicalDevices;
  }
  get subsetAllocation() {
    return this.memoryViewUint32[0x46] !== 0;
  }
  
};

VkPhysicalDeviceGroupProperties.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceGroupProperties.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x120));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x120), 0x0);
  
  
  
  
};

VkPhysicalDeviceGroupProperties.byteLength = 0x120;

VkPhysicalDeviceGroupProperties.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  physicalDeviceCount: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  physicalDevices: {
    byteOffset: 0x18,
    byteLength: 0x100
  },
  subsetAllocation: {
    byteOffset: 0x118,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceGroupPropertiesKHR **/
class VkPhysicalDeviceGroupPropertiesKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x120) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x120) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x120) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x120);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this._physicalDevices = null;
    
    this.sType = 0x3B9BDB70;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceGroupPropertiesKHR.pNext' isn't allowed to be filled");
  }
  get physicalDeviceCount() {
    return this.memoryViewUint32[0x4];
  }
  get physicalDevices() {
    return this._physicalDevices;
  }
  get subsetAllocation() {
    return this.memoryViewUint32[0x46] !== 0;
  }
  
};

VkPhysicalDeviceGroupPropertiesKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceGroupPropertiesKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x120));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x120), 0x0);
  
  
  
  
};

VkPhysicalDeviceGroupPropertiesKHR.byteLength = 0x120;

VkPhysicalDeviceGroupPropertiesKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  physicalDeviceCount: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  physicalDevices: {
    byteOffset: 0x18,
    byteLength: 0x100
  },
  subsetAllocation: {
    byteOffset: 0x118,
    byteLength: 0x4
  },
};
/** VkMemoryAllocateFlagsInfo **/
class VkMemoryAllocateFlagsInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    this.sType = 0x3B9BB460;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.deviceMask !== void 0) this.deviceMask = opts.deviceMask;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkMemoryAllocateFlagsInfo.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get deviceMask() {
    return this.memoryViewUint32[0x5];
  }
  set deviceMask(value) {
    
    this.memoryViewUint32[0x5] = value;
  }
  
};

VkMemoryAllocateFlagsInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkMemoryAllocateFlagsInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkMemoryAllocateFlagsInfo.byteLength = 0x18;

VkMemoryAllocateFlagsInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  flags: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  deviceMask: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
};
/** VkMemoryAllocateFlagsInfoKHR **/
class VkMemoryAllocateFlagsInfoKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    this.sType = 0x3B9BB460;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.deviceMask !== void 0) this.deviceMask = opts.deviceMask;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkMemoryAllocateFlagsInfoKHR.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get deviceMask() {
    return this.memoryViewUint32[0x5];
  }
  set deviceMask(value) {
    
    this.memoryViewUint32[0x5] = value;
  }
  
};

VkMemoryAllocateFlagsInfoKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkMemoryAllocateFlagsInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkMemoryAllocateFlagsInfoKHR.byteLength = 0x18;

VkMemoryAllocateFlagsInfoKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  flags: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  deviceMask: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
};
/** VkBindBufferMemoryInfo **/
class VkBindBufferMemoryInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x28);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._buffer = null;
    this._memory = null;
    
    this.sType = 0x3B9D2F48;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.buffer !== void 0) this.buffer = opts.buffer;
      if (opts.memory !== void 0) this.memory = opts.memory;
      if (opts.memoryOffset !== void 0) this.memoryOffset = opts.memoryOffset;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null ) {
      let {sType} = value;
      
      switch (sType) {
          
        case 0x3B9BB46D:
          break;
        default:
          throw new TypeError("Invalid type for 'VkBindBufferMemoryInfo.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  get buffer() {
    return this._buffer;
  }
  set buffer(value) {
    if (value !== null ) {
      
      this._buffer = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._buffer = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } 
    
  }
  get memory() {
    return this._memory;
  }
  set memory(value) {
    if (value !== null ) {
      
      this._memory = value;
      
      this.memoryViewBigInt64[0x3] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._memory = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } 
    
  }
  get memoryOffset() {
    return this.memoryViewBigUint64[0x4];
  }
  set memoryOffset(value) {
    
    this.memoryViewBigUint64[0x4] = BigInt(value);
  }
  
};

VkBindBufferMemoryInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkBindBufferMemoryInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkBindBufferMemoryInfo.byteLength = 0x28;

VkBindBufferMemoryInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  buffer: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
  memory: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
  memoryOffset: {
    byteOffset: 0x20,
    byteLength: 0x8
  },
};
/** VkBindBufferMemoryInfoKHR **/
class VkBindBufferMemoryInfoKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x28);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._buffer = null;
    this._memory = null;
    
    this.sType = 0x3B9D2F48;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.buffer !== void 0) this.buffer = opts.buffer;
      if (opts.memory !== void 0) this.memory = opts.memory;
      if (opts.memoryOffset !== void 0) this.memoryOffset = opts.memoryOffset;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null ) {
      let {sType} = value;
      
      switch (sType) {
          
        case 0x3B9BB46D:
          break;
        default:
          throw new TypeError("Invalid type for 'VkBindBufferMemoryInfoKHR.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  get buffer() {
    return this._buffer;
  }
  set buffer(value) {
    if (value !== null ) {
      
      this._buffer = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._buffer = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } 
    
  }
  get memory() {
    return this._memory;
  }
  set memory(value) {
    if (value !== null ) {
      
      this._memory = value;
      
      this.memoryViewBigInt64[0x3] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._memory = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } 
    
  }
  get memoryOffset() {
    return this.memoryViewBigUint64[0x4];
  }
  set memoryOffset(value) {
    
    this.memoryViewBigUint64[0x4] = BigInt(value);
  }
  
};

VkBindBufferMemoryInfoKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkBindBufferMemoryInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkBindBufferMemoryInfoKHR.byteLength = 0x28;

VkBindBufferMemoryInfoKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  buffer: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
  memory: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
  memoryOffset: {
    byteOffset: 0x20,
    byteLength: 0x8
  },
};
/** VkBindBufferMemoryDeviceGroupInfo **/
class VkBindBufferMemoryDeviceGroupInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this._pDeviceIndices = null;
    this.sType = 0x3B9BB46D;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.deviceIndexCount !== void 0) this.deviceIndexCount = opts.deviceIndexCount;
      if (opts.pDeviceIndices !== void 0) this.pDeviceIndices = opts.pDeviceIndices;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkBindBufferMemoryDeviceGroupInfo.pNext' isn't allowed to be filled");
  }
  get deviceIndexCount() {
    return this.memoryViewUint32[0x4];
  }
  set deviceIndexCount(value) {
    
    this.memoryViewUint32[0x4] = value;
  }
  get pDeviceIndices() {
    return this._pDeviceIndices;
  }
  set pDeviceIndices(value) {
    if (value !== null ) {
      this._pDeviceIndices = value;
      this.memoryViewBigInt64[0x3] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pDeviceIndices = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } 
    
  }
  
};

VkBindBufferMemoryDeviceGroupInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkBindBufferMemoryDeviceGroupInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkBindBufferMemoryDeviceGroupInfo.byteLength = 0x20;

VkBindBufferMemoryDeviceGroupInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  deviceIndexCount: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  pDeviceIndices: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
};
/** VkBindBufferMemoryDeviceGroupInfoKHR **/
class VkBindBufferMemoryDeviceGroupInfoKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this._pDeviceIndices = null;
    this.sType = 0x3B9BB46D;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.deviceIndexCount !== void 0) this.deviceIndexCount = opts.deviceIndexCount;
      if (opts.pDeviceIndices !== void 0) this.pDeviceIndices = opts.pDeviceIndices;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkBindBufferMemoryDeviceGroupInfoKHR.pNext' isn't allowed to be filled");
  }
  get deviceIndexCount() {
    return this.memoryViewUint32[0x4];
  }
  set deviceIndexCount(value) {
    
    this.memoryViewUint32[0x4] = value;
  }
  get pDeviceIndices() {
    return this._pDeviceIndices;
  }
  set pDeviceIndices(value) {
    if (value !== null ) {
      this._pDeviceIndices = value;
      this.memoryViewBigInt64[0x3] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pDeviceIndices = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } 
    
  }
  
};

VkBindBufferMemoryDeviceGroupInfoKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkBindBufferMemoryDeviceGroupInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkBindBufferMemoryDeviceGroupInfoKHR.byteLength = 0x20;

VkBindBufferMemoryDeviceGroupInfoKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  deviceIndexCount: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  pDeviceIndices: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
};
/** VkBindImageMemoryInfo **/
class VkBindImageMemoryInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x28);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._image = null;
    this._memory = null;
    
    this.sType = 0x3B9D2F49;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.image !== void 0) this.image = opts.image;
      if (opts.memory !== void 0) this.memory = opts.memory;
      if (opts.memoryOffset !== void 0) this.memoryOffset = opts.memoryOffset;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null ) {
      let {sType} = value;
      
      switch (sType) {
          
        case 0x3B9BB46E:
        case 0x3B9BB469:
        case 0x3B9D2B62:
          break;
        default:
          throw new TypeError("Invalid type for 'VkBindImageMemoryInfo.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  get image() {
    return this._image;
  }
  set image(value) {
    if (value !== null ) {
      
      this._image = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._image = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } 
    
  }
  get memory() {
    return this._memory;
  }
  set memory(value) {
    if (value !== null ) {
      
      this._memory = value;
      
      this.memoryViewBigInt64[0x3] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._memory = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } 
    
  }
  get memoryOffset() {
    return this.memoryViewBigUint64[0x4];
  }
  set memoryOffset(value) {
    
    this.memoryViewBigUint64[0x4] = BigInt(value);
  }
  
};

VkBindImageMemoryInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkBindImageMemoryInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkBindImageMemoryInfo.byteLength = 0x28;

VkBindImageMemoryInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  image: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
  memory: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
  memoryOffset: {
    byteOffset: 0x20,
    byteLength: 0x8
  },
};
/** VkBindImageMemoryInfoKHR **/
class VkBindImageMemoryInfoKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x28);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._image = null;
    this._memory = null;
    
    this.sType = 0x3B9D2F49;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.image !== void 0) this.image = opts.image;
      if (opts.memory !== void 0) this.memory = opts.memory;
      if (opts.memoryOffset !== void 0) this.memoryOffset = opts.memoryOffset;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null ) {
      let {sType} = value;
      
      switch (sType) {
          
        case 0x3B9BB46E:
        case 0x3B9BB469:
        case 0x3B9D2B62:
          break;
        default:
          throw new TypeError("Invalid type for 'VkBindImageMemoryInfoKHR.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  get image() {
    return this._image;
  }
  set image(value) {
    if (value !== null ) {
      
      this._image = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._image = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } 
    
  }
  get memory() {
    return this._memory;
  }
  set memory(value) {
    if (value !== null ) {
      
      this._memory = value;
      
      this.memoryViewBigInt64[0x3] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._memory = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } 
    
  }
  get memoryOffset() {
    return this.memoryViewBigUint64[0x4];
  }
  set memoryOffset(value) {
    
    this.memoryViewBigUint64[0x4] = BigInt(value);
  }
  
};

VkBindImageMemoryInfoKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkBindImageMemoryInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkBindImageMemoryInfoKHR.byteLength = 0x28;

VkBindImageMemoryInfoKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  image: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
  memory: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
  memoryOffset: {
    byteOffset: 0x20,
    byteLength: 0x8
  },
};
/** VkBindImageMemoryDeviceGroupInfo **/
class VkBindImageMemoryDeviceGroupInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x30) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x30) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x30) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x30);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this._pDeviceIndices = null;
    
    this._pSplitInstanceBindRegions = null;
    this._pSplitInstanceBindRegionsNative = null;
    this.sType = 0x3B9BB46E;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.deviceIndexCount !== void 0) this.deviceIndexCount = opts.deviceIndexCount;
      if (opts.pDeviceIndices !== void 0) this.pDeviceIndices = opts.pDeviceIndices;
      if (opts.splitInstanceBindRegionCount !== void 0) this.splitInstanceBindRegionCount = opts.splitInstanceBindRegionCount;
      if (opts.pSplitInstanceBindRegions !== void 0) this.pSplitInstanceBindRegions = opts.pSplitInstanceBindRegions;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkBindImageMemoryDeviceGroupInfo.pNext' isn't allowed to be filled");
  }
  get deviceIndexCount() {
    return this.memoryViewUint32[0x4];
  }
  set deviceIndexCount(value) {
    
    this.memoryViewUint32[0x4] = value;
  }
  get pDeviceIndices() {
    return this._pDeviceIndices;
  }
  set pDeviceIndices(value) {
    if (value !== null ) {
      this._pDeviceIndices = value;
      this.memoryViewBigInt64[0x3] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pDeviceIndices = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } 
    
  }
  get splitInstanceBindRegionCount() {
    return this.memoryViewUint32[0x8];
  }
  set splitInstanceBindRegionCount(value) {
    
    this.memoryViewUint32[0x8] = value;
  }
  get pSplitInstanceBindRegions() {
    return this._pSplitInstanceBindRegions;
  }
  set pSplitInstanceBindRegions(value) {
    if (value !== null ) {
      this._pSplitInstanceBindRegions = value;
    } else if (value === null) {
      this._pSplitInstanceBindRegions = null;
    } 
    
  }
  
};

VkBindImageMemoryDeviceGroupInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pSplitInstanceBindRegions !== null) {
    let array = this._pSplitInstanceBindRegions;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pSplitInstanceBindRegionsNative = nativeArray;
    this.memoryViewBigInt64[0x5] = nativeArray.address;
  }
  
  return true;
};

VkBindImageMemoryDeviceGroupInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
};

VkBindImageMemoryDeviceGroupInfo.byteLength = 0x30;

VkBindImageMemoryDeviceGroupInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  deviceIndexCount: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  pDeviceIndices: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
  splitInstanceBindRegionCount: {
    byteOffset: 0x20,
    byteLength: 0x4
  },
  pSplitInstanceBindRegions: {
    byteOffset: 0x28,
    byteLength: 0x8
  },
};
/** VkBindImageMemoryDeviceGroupInfoKHR **/
class VkBindImageMemoryDeviceGroupInfoKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x30) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x30) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x30) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x30);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this._pDeviceIndices = null;
    
    this._pSplitInstanceBindRegions = null;
    this._pSplitInstanceBindRegionsNative = null;
    this.sType = 0x3B9BB46E;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.deviceIndexCount !== void 0) this.deviceIndexCount = opts.deviceIndexCount;
      if (opts.pDeviceIndices !== void 0) this.pDeviceIndices = opts.pDeviceIndices;
      if (opts.splitInstanceBindRegionCount !== void 0) this.splitInstanceBindRegionCount = opts.splitInstanceBindRegionCount;
      if (opts.pSplitInstanceBindRegions !== void 0) this.pSplitInstanceBindRegions = opts.pSplitInstanceBindRegions;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkBindImageMemoryDeviceGroupInfoKHR.pNext' isn't allowed to be filled");
  }
  get deviceIndexCount() {
    return this.memoryViewUint32[0x4];
  }
  set deviceIndexCount(value) {
    
    this.memoryViewUint32[0x4] = value;
  }
  get pDeviceIndices() {
    return this._pDeviceIndices;
  }
  set pDeviceIndices(value) {
    if (value !== null ) {
      this._pDeviceIndices = value;
      this.memoryViewBigInt64[0x3] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pDeviceIndices = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } 
    
  }
  get splitInstanceBindRegionCount() {
    return this.memoryViewUint32[0x8];
  }
  set splitInstanceBindRegionCount(value) {
    
    this.memoryViewUint32[0x8] = value;
  }
  get pSplitInstanceBindRegions() {
    return this._pSplitInstanceBindRegions;
  }
  set pSplitInstanceBindRegions(value) {
    if (value !== null ) {
      this._pSplitInstanceBindRegions = value;
    } else if (value === null) {
      this._pSplitInstanceBindRegions = null;
    } 
    
  }
  
};

VkBindImageMemoryDeviceGroupInfoKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pSplitInstanceBindRegions !== null) {
    let array = this._pSplitInstanceBindRegions;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pSplitInstanceBindRegionsNative = nativeArray;
    this.memoryViewBigInt64[0x5] = nativeArray.address;
  }
  
  return true;
};

VkBindImageMemoryDeviceGroupInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
};

VkBindImageMemoryDeviceGroupInfoKHR.byteLength = 0x30;

VkBindImageMemoryDeviceGroupInfoKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  deviceIndexCount: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  pDeviceIndices: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
  splitInstanceBindRegionCount: {
    byteOffset: 0x20,
    byteLength: 0x4
  },
  pSplitInstanceBindRegions: {
    byteOffset: 0x28,
    byteLength: 0x8
  },
};
/** VkDeviceGroupRenderPassBeginInfo **/
class VkDeviceGroupRenderPassBeginInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    this._pDeviceRenderAreas = null;
    this._pDeviceRenderAreasNative = null;
    this.sType = 0x3B9BB463;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.deviceMask !== void 0) this.deviceMask = opts.deviceMask;
      if (opts.deviceRenderAreaCount !== void 0) this.deviceRenderAreaCount = opts.deviceRenderAreaCount;
      if (opts.pDeviceRenderAreas !== void 0) this.pDeviceRenderAreas = opts.pDeviceRenderAreas;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDeviceGroupRenderPassBeginInfo.pNext' isn't allowed to be filled");
  }
  get deviceMask() {
    return this.memoryViewUint32[0x4];
  }
  set deviceMask(value) {
    
    this.memoryViewUint32[0x4] = value;
  }
  get deviceRenderAreaCount() {
    return this.memoryViewUint32[0x5];
  }
  set deviceRenderAreaCount(value) {
    
    this.memoryViewUint32[0x5] = value;
  }
  get pDeviceRenderAreas() {
    return this._pDeviceRenderAreas;
  }
  set pDeviceRenderAreas(value) {
    if (value !== null ) {
      this._pDeviceRenderAreas = value;
    } else if (value === null) {
      this._pDeviceRenderAreas = null;
    } 
    
  }
  
};

VkDeviceGroupRenderPassBeginInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pDeviceRenderAreas !== null) {
    let array = this._pDeviceRenderAreas;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pDeviceRenderAreasNative = nativeArray;
    this.memoryViewBigInt64[0x3] = nativeArray.address;
  }
  
  return true;
};

VkDeviceGroupRenderPassBeginInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
};

VkDeviceGroupRenderPassBeginInfo.byteLength = 0x20;

VkDeviceGroupRenderPassBeginInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  deviceMask: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  deviceRenderAreaCount: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  pDeviceRenderAreas: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
};
/** VkDeviceGroupRenderPassBeginInfoKHR **/
class VkDeviceGroupRenderPassBeginInfoKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    this._pDeviceRenderAreas = null;
    this._pDeviceRenderAreasNative = null;
    this.sType = 0x3B9BB463;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.deviceMask !== void 0) this.deviceMask = opts.deviceMask;
      if (opts.deviceRenderAreaCount !== void 0) this.deviceRenderAreaCount = opts.deviceRenderAreaCount;
      if (opts.pDeviceRenderAreas !== void 0) this.pDeviceRenderAreas = opts.pDeviceRenderAreas;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDeviceGroupRenderPassBeginInfoKHR.pNext' isn't allowed to be filled");
  }
  get deviceMask() {
    return this.memoryViewUint32[0x4];
  }
  set deviceMask(value) {
    
    this.memoryViewUint32[0x4] = value;
  }
  get deviceRenderAreaCount() {
    return this.memoryViewUint32[0x5];
  }
  set deviceRenderAreaCount(value) {
    
    this.memoryViewUint32[0x5] = value;
  }
  get pDeviceRenderAreas() {
    return this._pDeviceRenderAreas;
  }
  set pDeviceRenderAreas(value) {
    if (value !== null ) {
      this._pDeviceRenderAreas = value;
    } else if (value === null) {
      this._pDeviceRenderAreas = null;
    } 
    
  }
  
};

VkDeviceGroupRenderPassBeginInfoKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pDeviceRenderAreas !== null) {
    let array = this._pDeviceRenderAreas;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pDeviceRenderAreasNative = nativeArray;
    this.memoryViewBigInt64[0x3] = nativeArray.address;
  }
  
  return true;
};

VkDeviceGroupRenderPassBeginInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
};

VkDeviceGroupRenderPassBeginInfoKHR.byteLength = 0x20;

VkDeviceGroupRenderPassBeginInfoKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  deviceMask: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  deviceRenderAreaCount: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  pDeviceRenderAreas: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
};
/** VkDeviceGroupCommandBufferBeginInfo **/
class VkDeviceGroupCommandBufferBeginInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9BB464;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.deviceMask !== void 0) this.deviceMask = opts.deviceMask;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDeviceGroupCommandBufferBeginInfo.pNext' isn't allowed to be filled");
  }
  get deviceMask() {
    return this.memoryViewUint32[0x4];
  }
  set deviceMask(value) {
    
    this.memoryViewUint32[0x4] = value;
  }
  
};

VkDeviceGroupCommandBufferBeginInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDeviceGroupCommandBufferBeginInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkDeviceGroupCommandBufferBeginInfo.byteLength = 0x18;

VkDeviceGroupCommandBufferBeginInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  deviceMask: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkDeviceGroupCommandBufferBeginInfoKHR **/
class VkDeviceGroupCommandBufferBeginInfoKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9BB464;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.deviceMask !== void 0) this.deviceMask = opts.deviceMask;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDeviceGroupCommandBufferBeginInfoKHR.pNext' isn't allowed to be filled");
  }
  get deviceMask() {
    return this.memoryViewUint32[0x4];
  }
  set deviceMask(value) {
    
    this.memoryViewUint32[0x4] = value;
  }
  
};

VkDeviceGroupCommandBufferBeginInfoKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDeviceGroupCommandBufferBeginInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkDeviceGroupCommandBufferBeginInfoKHR.byteLength = 0x18;

VkDeviceGroupCommandBufferBeginInfoKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  deviceMask: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkDeviceGroupSubmitInfo **/
class VkDeviceGroupSubmitInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x40) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x40) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x40) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x40);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this._pWaitSemaphoreDeviceIndices = null;
    
    this._pCommandBufferDeviceMasks = null;
    
    this._pSignalSemaphoreDeviceIndices = null;
    this.sType = 0x3B9BB465;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.waitSemaphoreCount !== void 0) this.waitSemaphoreCount = opts.waitSemaphoreCount;
      if (opts.pWaitSemaphoreDeviceIndices !== void 0) this.pWaitSemaphoreDeviceIndices = opts.pWaitSemaphoreDeviceIndices;
      if (opts.commandBufferCount !== void 0) this.commandBufferCount = opts.commandBufferCount;
      if (opts.pCommandBufferDeviceMasks !== void 0) this.pCommandBufferDeviceMasks = opts.pCommandBufferDeviceMasks;
      if (opts.signalSemaphoreCount !== void 0) this.signalSemaphoreCount = opts.signalSemaphoreCount;
      if (opts.pSignalSemaphoreDeviceIndices !== void 0) this.pSignalSemaphoreDeviceIndices = opts.pSignalSemaphoreDeviceIndices;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDeviceGroupSubmitInfo.pNext' isn't allowed to be filled");
  }
  get waitSemaphoreCount() {
    return this.memoryViewUint32[0x4];
  }
  set waitSemaphoreCount(value) {
    
    this.memoryViewUint32[0x4] = value;
  }
  get pWaitSemaphoreDeviceIndices() {
    return this._pWaitSemaphoreDeviceIndices;
  }
  set pWaitSemaphoreDeviceIndices(value) {
    if (value !== null ) {
      this._pWaitSemaphoreDeviceIndices = value;
      this.memoryViewBigInt64[0x3] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pWaitSemaphoreDeviceIndices = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } 
    
  }
  get commandBufferCount() {
    return this.memoryViewUint32[0x8];
  }
  set commandBufferCount(value) {
    
    this.memoryViewUint32[0x8] = value;
  }
  get pCommandBufferDeviceMasks() {
    return this._pCommandBufferDeviceMasks;
  }
  set pCommandBufferDeviceMasks(value) {
    if (value !== null ) {
      this._pCommandBufferDeviceMasks = value;
      this.memoryViewBigInt64[0x5] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pCommandBufferDeviceMasks = null;
      this.memoryViewBigInt64[0x5] = BI0;
    } 
    
  }
  get signalSemaphoreCount() {
    return this.memoryViewUint32[0xC];
  }
  set signalSemaphoreCount(value) {
    
    this.memoryViewUint32[0xC] = value;
  }
  get pSignalSemaphoreDeviceIndices() {
    return this._pSignalSemaphoreDeviceIndices;
  }
  set pSignalSemaphoreDeviceIndices(value) {
    if (value !== null ) {
      this._pSignalSemaphoreDeviceIndices = value;
      this.memoryViewBigInt64[0x7] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pSignalSemaphoreDeviceIndices = null;
      this.memoryViewBigInt64[0x7] = BI0;
    } 
    
  }
  
};

VkDeviceGroupSubmitInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDeviceGroupSubmitInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkDeviceGroupSubmitInfo.byteLength = 0x40;

VkDeviceGroupSubmitInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  waitSemaphoreCount: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  pWaitSemaphoreDeviceIndices: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
  commandBufferCount: {
    byteOffset: 0x20,
    byteLength: 0x4
  },
  pCommandBufferDeviceMasks: {
    byteOffset: 0x28,
    byteLength: 0x8
  },
  signalSemaphoreCount: {
    byteOffset: 0x30,
    byteLength: 0x4
  },
  pSignalSemaphoreDeviceIndices: {
    byteOffset: 0x38,
    byteLength: 0x8
  },
};
/** VkDeviceGroupSubmitInfoKHR **/
class VkDeviceGroupSubmitInfoKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x40) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x40) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x40) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x40);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this._pWaitSemaphoreDeviceIndices = null;
    
    this._pCommandBufferDeviceMasks = null;
    
    this._pSignalSemaphoreDeviceIndices = null;
    this.sType = 0x3B9BB465;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.waitSemaphoreCount !== void 0) this.waitSemaphoreCount = opts.waitSemaphoreCount;
      if (opts.pWaitSemaphoreDeviceIndices !== void 0) this.pWaitSemaphoreDeviceIndices = opts.pWaitSemaphoreDeviceIndices;
      if (opts.commandBufferCount !== void 0) this.commandBufferCount = opts.commandBufferCount;
      if (opts.pCommandBufferDeviceMasks !== void 0) this.pCommandBufferDeviceMasks = opts.pCommandBufferDeviceMasks;
      if (opts.signalSemaphoreCount !== void 0) this.signalSemaphoreCount = opts.signalSemaphoreCount;
      if (opts.pSignalSemaphoreDeviceIndices !== void 0) this.pSignalSemaphoreDeviceIndices = opts.pSignalSemaphoreDeviceIndices;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDeviceGroupSubmitInfoKHR.pNext' isn't allowed to be filled");
  }
  get waitSemaphoreCount() {
    return this.memoryViewUint32[0x4];
  }
  set waitSemaphoreCount(value) {
    
    this.memoryViewUint32[0x4] = value;
  }
  get pWaitSemaphoreDeviceIndices() {
    return this._pWaitSemaphoreDeviceIndices;
  }
  set pWaitSemaphoreDeviceIndices(value) {
    if (value !== null ) {
      this._pWaitSemaphoreDeviceIndices = value;
      this.memoryViewBigInt64[0x3] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pWaitSemaphoreDeviceIndices = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } 
    
  }
  get commandBufferCount() {
    return this.memoryViewUint32[0x8];
  }
  set commandBufferCount(value) {
    
    this.memoryViewUint32[0x8] = value;
  }
  get pCommandBufferDeviceMasks() {
    return this._pCommandBufferDeviceMasks;
  }
  set pCommandBufferDeviceMasks(value) {
    if (value !== null ) {
      this._pCommandBufferDeviceMasks = value;
      this.memoryViewBigInt64[0x5] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pCommandBufferDeviceMasks = null;
      this.memoryViewBigInt64[0x5] = BI0;
    } 
    
  }
  get signalSemaphoreCount() {
    return this.memoryViewUint32[0xC];
  }
  set signalSemaphoreCount(value) {
    
    this.memoryViewUint32[0xC] = value;
  }
  get pSignalSemaphoreDeviceIndices() {
    return this._pSignalSemaphoreDeviceIndices;
  }
  set pSignalSemaphoreDeviceIndices(value) {
    if (value !== null ) {
      this._pSignalSemaphoreDeviceIndices = value;
      this.memoryViewBigInt64[0x7] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pSignalSemaphoreDeviceIndices = null;
      this.memoryViewBigInt64[0x7] = BI0;
    } 
    
  }
  
};

VkDeviceGroupSubmitInfoKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDeviceGroupSubmitInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkDeviceGroupSubmitInfoKHR.byteLength = 0x40;

VkDeviceGroupSubmitInfoKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  waitSemaphoreCount: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  pWaitSemaphoreDeviceIndices: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
  commandBufferCount: {
    byteOffset: 0x20,
    byteLength: 0x4
  },
  pCommandBufferDeviceMasks: {
    byteOffset: 0x28,
    byteLength: 0x8
  },
  signalSemaphoreCount: {
    byteOffset: 0x30,
    byteLength: 0x4
  },
  pSignalSemaphoreDeviceIndices: {
    byteOffset: 0x38,
    byteLength: 0x8
  },
};
/** VkDeviceGroupBindSparseInfo **/
class VkDeviceGroupBindSparseInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    this.sType = 0x3B9BB466;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.resourceDeviceIndex !== void 0) this.resourceDeviceIndex = opts.resourceDeviceIndex;
      if (opts.memoryDeviceIndex !== void 0) this.memoryDeviceIndex = opts.memoryDeviceIndex;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDeviceGroupBindSparseInfo.pNext' isn't allowed to be filled");
  }
  get resourceDeviceIndex() {
    return this.memoryViewUint32[0x4];
  }
  set resourceDeviceIndex(value) {
    
    this.memoryViewUint32[0x4] = value;
  }
  get memoryDeviceIndex() {
    return this.memoryViewUint32[0x5];
  }
  set memoryDeviceIndex(value) {
    
    this.memoryViewUint32[0x5] = value;
  }
  
};

VkDeviceGroupBindSparseInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDeviceGroupBindSparseInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkDeviceGroupBindSparseInfo.byteLength = 0x18;

VkDeviceGroupBindSparseInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  resourceDeviceIndex: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  memoryDeviceIndex: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
};
/** VkDeviceGroupBindSparseInfoKHR **/
class VkDeviceGroupBindSparseInfoKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    this.sType = 0x3B9BB466;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.resourceDeviceIndex !== void 0) this.resourceDeviceIndex = opts.resourceDeviceIndex;
      if (opts.memoryDeviceIndex !== void 0) this.memoryDeviceIndex = opts.memoryDeviceIndex;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDeviceGroupBindSparseInfoKHR.pNext' isn't allowed to be filled");
  }
  get resourceDeviceIndex() {
    return this.memoryViewUint32[0x4];
  }
  set resourceDeviceIndex(value) {
    
    this.memoryViewUint32[0x4] = value;
  }
  get memoryDeviceIndex() {
    return this.memoryViewUint32[0x5];
  }
  set memoryDeviceIndex(value) {
    
    this.memoryViewUint32[0x5] = value;
  }
  
};

VkDeviceGroupBindSparseInfoKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDeviceGroupBindSparseInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkDeviceGroupBindSparseInfoKHR.byteLength = 0x18;

VkDeviceGroupBindSparseInfoKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  resourceDeviceIndex: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  memoryDeviceIndex: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
};
/** VkDeviceGroupPresentCapabilitiesKHR **/
class VkDeviceGroupPresentCapabilitiesKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x98) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x98) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x98) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x98);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._presentMask = [...Array(32)].fill(0x0);
    
    this.sType = 0x3B9BB467;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDeviceGroupPresentCapabilitiesKHR.pNext' isn't allowed to be filled");
  }
  get presentMask() {
    return [
      this.memoryViewUint32[0x4],
      this.memoryViewUint32[0x5],
      this.memoryViewUint32[0x6],
      this.memoryViewUint32[0x7],
      this.memoryViewUint32[0x8],
      this.memoryViewUint32[0x9],
      this.memoryViewUint32[0xA],
      this.memoryViewUint32[0xB],
      this.memoryViewUint32[0xC],
      this.memoryViewUint32[0xD],
      this.memoryViewUint32[0xE],
      this.memoryViewUint32[0xF],
      this.memoryViewUint32[0x10],
      this.memoryViewUint32[0x11],
      this.memoryViewUint32[0x12],
      this.memoryViewUint32[0x13],
      this.memoryViewUint32[0x14],
      this.memoryViewUint32[0x15],
      this.memoryViewUint32[0x16],
      this.memoryViewUint32[0x17],
      this.memoryViewUint32[0x18],
      this.memoryViewUint32[0x19],
      this.memoryViewUint32[0x1A],
      this.memoryViewUint32[0x1B],
      this.memoryViewUint32[0x1C],
      this.memoryViewUint32[0x1D],
      this.memoryViewUint32[0x1E],
      this.memoryViewUint32[0x1F],
      this.memoryViewUint32[0x20],
      this.memoryViewUint32[0x21],
      this.memoryViewUint32[0x22],
      this.memoryViewUint32[0x23]
    ];
  }
  get modes() {
    return this.memoryViewInt32[0x24];
  }
  
};

VkDeviceGroupPresentCapabilitiesKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDeviceGroupPresentCapabilitiesKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x98));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x98), 0x0);
  
  
  
  
};

VkDeviceGroupPresentCapabilitiesKHR.byteLength = 0x98;

VkDeviceGroupPresentCapabilitiesKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  presentMask: {
    byteOffset: 0x10,
    byteLength: 0x80
  },
  modes: {
    byteOffset: 0x90,
    byteLength: 0x4
  },
};
/** VkImageSwapchainCreateInfoKHR **/
class VkImageSwapchainCreateInfoKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._swapchain = null;
    this.sType = 0x3B9BB468;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.swapchain !== void 0) this.swapchain = opts.swapchain;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkImageSwapchainCreateInfoKHR.pNext' isn't allowed to be filled");
  }
  get swapchain() {
    return this._swapchain;
  }
  set swapchain(value) {
    if (value !== null ) {
      
      this._swapchain = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._swapchain = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } 
    
  }
  
};

VkImageSwapchainCreateInfoKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkImageSwapchainCreateInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkImageSwapchainCreateInfoKHR.byteLength = 0x18;

VkImageSwapchainCreateInfoKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  swapchain: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
};
/** VkBindImageMemorySwapchainInfoKHR **/
class VkBindImageMemorySwapchainInfoKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._swapchain = null;
    
    this.sType = 0x3B9BB469;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.swapchain !== void 0) this.swapchain = opts.swapchain;
      if (opts.imageIndex !== void 0) this.imageIndex = opts.imageIndex;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkBindImageMemorySwapchainInfoKHR.pNext' isn't allowed to be filled");
  }
  get swapchain() {
    return this._swapchain;
  }
  set swapchain(value) {
    if (value !== null ) {
      
      this._swapchain = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._swapchain = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } 
    
  }
  get imageIndex() {
    return this.memoryViewUint32[0x6];
  }
  set imageIndex(value) {
    
    this.memoryViewUint32[0x6] = value;
  }
  
};

VkBindImageMemorySwapchainInfoKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkBindImageMemorySwapchainInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkBindImageMemorySwapchainInfoKHR.byteLength = 0x20;

VkBindImageMemorySwapchainInfoKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  swapchain: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
  imageIndex: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
};
/** VkAcquireNextImageInfoKHR **/
class VkAcquireNextImageInfoKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x38) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x38) / 0x8);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x38) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x38) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x38);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._swapchain = null;
    
    this._semaphore = null;
    this._fence = null;
    
    this.sType = 0x3B9BB46A;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.swapchain !== void 0) this.swapchain = opts.swapchain;
      if (opts.timeout !== void 0) this.timeout = opts.timeout;
      if (opts.semaphore !== void 0) this.semaphore = opts.semaphore;
      if (opts.fence !== void 0) this.fence = opts.fence;
      if (opts.deviceMask !== void 0) this.deviceMask = opts.deviceMask;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkAcquireNextImageInfoKHR.pNext' isn't allowed to be filled");
  }
  get swapchain() {
    return this._swapchain;
  }
  set swapchain(value) {
    if (value !== null ) {
      
      this._swapchain = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._swapchain = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } 
    
  }
  get timeout() {
    return this.memoryViewBigUint64[0x3];
  }
  set timeout(value) {
    
    this.memoryViewBigUint64[0x3] = BigInt(value);
  }
  get semaphore() {
    return this._semaphore;
  }
  set semaphore(value) {
    if (value !== null ) {
      
      this._semaphore = value;
      
      this.memoryViewBigInt64[0x4] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._semaphore = null;
      this.memoryViewBigInt64[0x4] = BI0;
    } 
    
  }
  get fence() {
    return this._fence;
  }
  set fence(value) {
    if (value !== null ) {
      
      this._fence = value;
      
      this.memoryViewBigInt64[0x5] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._fence = null;
      this.memoryViewBigInt64[0x5] = BI0;
    } 
    
  }
  get deviceMask() {
    return this.memoryViewUint32[0xC];
  }
  set deviceMask(value) {
    
    this.memoryViewUint32[0xC] = value;
  }
  
};

VkAcquireNextImageInfoKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkAcquireNextImageInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkAcquireNextImageInfoKHR.byteLength = 0x38;

VkAcquireNextImageInfoKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  swapchain: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
  timeout: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
  semaphore: {
    byteOffset: 0x20,
    byteLength: 0x8
  },
  fence: {
    byteOffset: 0x28,
    byteLength: 0x8
  },
  deviceMask: {
    byteOffset: 0x30,
    byteLength: 0x4
  },
};
/** VkDeviceGroupPresentInfoKHR **/
class VkDeviceGroupPresentInfoKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x28);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this._pDeviceMasks = null;
    
    this.sType = 0x3B9BB46B;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.swapchainCount !== void 0) this.swapchainCount = opts.swapchainCount;
      if (opts.pDeviceMasks !== void 0) this.pDeviceMasks = opts.pDeviceMasks;
      if (opts.mode !== void 0) this.mode = opts.mode;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDeviceGroupPresentInfoKHR.pNext' isn't allowed to be filled");
  }
  get swapchainCount() {
    return this.memoryViewUint32[0x4];
  }
  set swapchainCount(value) {
    
    this.memoryViewUint32[0x4] = value;
  }
  get pDeviceMasks() {
    return this._pDeviceMasks;
  }
  set pDeviceMasks(value) {
    if (value !== null ) {
      this._pDeviceMasks = value;
      this.memoryViewBigInt64[0x3] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pDeviceMasks = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } 
    
  }
  get mode() {
    return this.memoryViewInt32[0x8];
  }
  set mode(value) {
    
    this.memoryViewInt32[0x8] = value;
  }
  
};

VkDeviceGroupPresentInfoKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDeviceGroupPresentInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkDeviceGroupPresentInfoKHR.byteLength = 0x28;

VkDeviceGroupPresentInfoKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  swapchainCount: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  pDeviceMasks: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
  mode: {
    byteOffset: 0x20,
    byteLength: 0x4
  },
};
/** VkDeviceGroupDeviceCreateInfo **/
class VkDeviceGroupDeviceCreateInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this._pPhysicalDevices = null;
    this._pPhysicalDevicesNative = null;
    this.sType = 0x3B9BDB71;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.physicalDeviceCount !== void 0) this.physicalDeviceCount = opts.physicalDeviceCount;
      if (opts.pPhysicalDevices !== void 0) this.pPhysicalDevices = opts.pPhysicalDevices;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDeviceGroupDeviceCreateInfo.pNext' isn't allowed to be filled");
  }
  get physicalDeviceCount() {
    return this.memoryViewUint32[0x4];
  }
  set physicalDeviceCount(value) {
    
    this.memoryViewUint32[0x4] = value;
  }
  get pPhysicalDevices() {
    return this._pPhysicalDevices;
  }
  set pPhysicalDevices(value) {
    if (value !== null ) {
      this._pPhysicalDevices = value;
    } else if (value === null) {
      this._pPhysicalDevices = null;
    } 
    
  }
  
};

VkDeviceGroupDeviceCreateInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pPhysicalDevices !== null) {
    let array = this._pPhysicalDevices;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pPhysicalDevicesNative = nativeArray;
    this.memoryViewBigInt64[0x3] = nativeArray.address;
  }
  
  return true;
};

VkDeviceGroupDeviceCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
};

VkDeviceGroupDeviceCreateInfo.byteLength = 0x20;

VkDeviceGroupDeviceCreateInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  physicalDeviceCount: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  pPhysicalDevices: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
};
/** VkDeviceGroupDeviceCreateInfoKHR **/
class VkDeviceGroupDeviceCreateInfoKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this._pPhysicalDevices = null;
    this._pPhysicalDevicesNative = null;
    this.sType = 0x3B9BDB71;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.physicalDeviceCount !== void 0) this.physicalDeviceCount = opts.physicalDeviceCount;
      if (opts.pPhysicalDevices !== void 0) this.pPhysicalDevices = opts.pPhysicalDevices;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDeviceGroupDeviceCreateInfoKHR.pNext' isn't allowed to be filled");
  }
  get physicalDeviceCount() {
    return this.memoryViewUint32[0x4];
  }
  set physicalDeviceCount(value) {
    
    this.memoryViewUint32[0x4] = value;
  }
  get pPhysicalDevices() {
    return this._pPhysicalDevices;
  }
  set pPhysicalDevices(value) {
    if (value !== null ) {
      this._pPhysicalDevices = value;
    } else if (value === null) {
      this._pPhysicalDevices = null;
    } 
    
  }
  
};

VkDeviceGroupDeviceCreateInfoKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pPhysicalDevices !== null) {
    let array = this._pPhysicalDevices;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pPhysicalDevicesNative = nativeArray;
    this.memoryViewBigInt64[0x3] = nativeArray.address;
  }
  
  return true;
};

VkDeviceGroupDeviceCreateInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
};

VkDeviceGroupDeviceCreateInfoKHR.byteLength = 0x20;

VkDeviceGroupDeviceCreateInfoKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  physicalDeviceCount: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  pPhysicalDevices: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
};
/** VkDeviceGroupSwapchainCreateInfoKHR **/
class VkDeviceGroupSwapchainCreateInfoKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9BB46C;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.modes !== void 0) this.modes = opts.modes;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDeviceGroupSwapchainCreateInfoKHR.pNext' isn't allowed to be filled");
  }
  get modes() {
    return this.memoryViewInt32[0x4];
  }
  set modes(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkDeviceGroupSwapchainCreateInfoKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDeviceGroupSwapchainCreateInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkDeviceGroupSwapchainCreateInfoKHR.byteLength = 0x18;

VkDeviceGroupSwapchainCreateInfoKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  modes: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkDescriptorUpdateTemplateEntry **/
class VkDescriptorUpdateTemplateEntry {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    
    
    
    
    
    
    if (typeof opts === "object") {
      if (opts.dstBinding !== void 0) this.dstBinding = opts.dstBinding;
      if (opts.dstArrayElement !== void 0) this.dstArrayElement = opts.dstArrayElement;
      if (opts.descriptorCount !== void 0) this.descriptorCount = opts.descriptorCount;
      if (opts.descriptorType !== void 0) this.descriptorType = opts.descriptorType;
      if (opts.offset !== void 0) this.offset = opts.offset;
      if (opts.stride !== void 0) this.stride = opts.stride;
      
    }
  }
  get dstBinding() {
    return this.memoryViewUint32[0x0];
  }
  set dstBinding(value) {
    
    this.memoryViewUint32[0x0] = value;
  }
  get dstArrayElement() {
    return this.memoryViewUint32[0x1];
  }
  set dstArrayElement(value) {
    
    this.memoryViewUint32[0x1] = value;
  }
  get descriptorCount() {
    return this.memoryViewUint32[0x2];
  }
  set descriptorCount(value) {
    
    this.memoryViewUint32[0x2] = value;
  }
  get descriptorType() {
    return this.memoryViewInt32[0x3];
  }
  set descriptorType(value) {
    
    this.memoryViewInt32[0x3] = value;
  }
  get offset() {
    return this.memoryViewBigInt64[0x2];
  }
  set offset(value) {
    
    this.memoryViewBigInt64[0x2] = BigInt(value);
  }
  get stride() {
    return this.memoryViewBigInt64[0x3];
  }
  set stride(value) {
    
    this.memoryViewBigInt64[0x3] = BigInt(value);
  }
  
};

VkDescriptorUpdateTemplateEntry.prototype.flush = function flush() {
  
  return true;
};

VkDescriptorUpdateTemplateEntry.prototype.reflect = function reflect(memoryAddress) {
  
};

VkDescriptorUpdateTemplateEntry.byteLength = 0x20;

VkDescriptorUpdateTemplateEntry.memoryLayout = {
  dstBinding: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  dstArrayElement: {
    byteOffset: 0x4,
    byteLength: 0x4
  },
  descriptorCount: {
    byteOffset: 0x8,
    byteLength: 0x4
  },
  descriptorType: {
    byteOffset: 0xC,
    byteLength: 0x4
  },
  offset: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
  stride: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
};
/** VkDescriptorUpdateTemplateEntryKHR **/
class VkDescriptorUpdateTemplateEntryKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    
    
    
    
    
    
    if (typeof opts === "object") {
      if (opts.dstBinding !== void 0) this.dstBinding = opts.dstBinding;
      if (opts.dstArrayElement !== void 0) this.dstArrayElement = opts.dstArrayElement;
      if (opts.descriptorCount !== void 0) this.descriptorCount = opts.descriptorCount;
      if (opts.descriptorType !== void 0) this.descriptorType = opts.descriptorType;
      if (opts.offset !== void 0) this.offset = opts.offset;
      if (opts.stride !== void 0) this.stride = opts.stride;
      
    }
  }
  get dstBinding() {
    return this.memoryViewUint32[0x0];
  }
  set dstBinding(value) {
    
    this.memoryViewUint32[0x0] = value;
  }
  get dstArrayElement() {
    return this.memoryViewUint32[0x1];
  }
  set dstArrayElement(value) {
    
    this.memoryViewUint32[0x1] = value;
  }
  get descriptorCount() {
    return this.memoryViewUint32[0x2];
  }
  set descriptorCount(value) {
    
    this.memoryViewUint32[0x2] = value;
  }
  get descriptorType() {
    return this.memoryViewInt32[0x3];
  }
  set descriptorType(value) {
    
    this.memoryViewInt32[0x3] = value;
  }
  get offset() {
    return this.memoryViewBigInt64[0x2];
  }
  set offset(value) {
    
    this.memoryViewBigInt64[0x2] = BigInt(value);
  }
  get stride() {
    return this.memoryViewBigInt64[0x3];
  }
  set stride(value) {
    
    this.memoryViewBigInt64[0x3] = BigInt(value);
  }
  
};

VkDescriptorUpdateTemplateEntryKHR.prototype.flush = function flush() {
  
  return true;
};

VkDescriptorUpdateTemplateEntryKHR.prototype.reflect = function reflect(memoryAddress) {
  
};

VkDescriptorUpdateTemplateEntryKHR.byteLength = 0x20;

VkDescriptorUpdateTemplateEntryKHR.memoryLayout = {
  dstBinding: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  dstArrayElement: {
    byteOffset: 0x4,
    byteLength: 0x4
  },
  descriptorCount: {
    byteOffset: 0x8,
    byteLength: 0x4
  },
  descriptorType: {
    byteOffset: 0xC,
    byteLength: 0x4
  },
  offset: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
  stride: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
};
/** VkDescriptorUpdateTemplateCreateInfo **/
class VkDescriptorUpdateTemplateCreateInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x48) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x48) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x48) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x48);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    this._pDescriptorUpdateEntries = null;
    this._pDescriptorUpdateEntriesNative = null;
    
    this._descriptorSetLayout = null;
    
    this._pipelineLayout = null;
    
    this.sType = 0x3B9C1608;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.descriptorUpdateEntryCount !== void 0) this.descriptorUpdateEntryCount = opts.descriptorUpdateEntryCount;
      if (opts.pDescriptorUpdateEntries !== void 0) this.pDescriptorUpdateEntries = opts.pDescriptorUpdateEntries;
      if (opts.templateType !== void 0) this.templateType = opts.templateType;
      if (opts.descriptorSetLayout !== void 0) this.descriptorSetLayout = opts.descriptorSetLayout;
      if (opts.pipelineBindPoint !== void 0) this.pipelineBindPoint = opts.pipelineBindPoint;
      if (opts.pipelineLayout !== void 0) this.pipelineLayout = opts.pipelineLayout;
      if (opts.set !== void 0) this.set = opts.set;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDescriptorUpdateTemplateCreateInfo.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get descriptorUpdateEntryCount() {
    return this.memoryViewUint32[0x5];
  }
  set descriptorUpdateEntryCount(value) {
    
    this.memoryViewUint32[0x5] = value;
  }
  get pDescriptorUpdateEntries() {
    return this._pDescriptorUpdateEntries;
  }
  set pDescriptorUpdateEntries(value) {
    if (value !== null ) {
      this._pDescriptorUpdateEntries = value;
    } else if (value === null) {
      this._pDescriptorUpdateEntries = null;
    } 
    
  }
  get templateType() {
    return this.memoryViewInt32[0x8];
  }
  set templateType(value) {
    
    this.memoryViewInt32[0x8] = value;
  }
  get descriptorSetLayout() {
    return this._descriptorSetLayout;
  }
  set descriptorSetLayout(value) {
    if (value !== null ) {
      
      this._descriptorSetLayout = value;
      
      this.memoryViewBigInt64[0x5] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._descriptorSetLayout = null;
      this.memoryViewBigInt64[0x5] = BI0;
    } 
    
  }
  get pipelineBindPoint() {
    return this.memoryViewInt32[0xC];
  }
  set pipelineBindPoint(value) {
    
    this.memoryViewInt32[0xC] = value;
  }
  get pipelineLayout() {
    return this._pipelineLayout;
  }
  set pipelineLayout(value) {
    if (value !== null ) {
      
      this._pipelineLayout = value;
      
      this.memoryViewBigInt64[0x7] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._pipelineLayout = null;
      this.memoryViewBigInt64[0x7] = BI0;
    } 
    
  }
  get set() {
    return this.memoryViewUint32[0x10];
  }
  set set(value) {
    
    this.memoryViewUint32[0x10] = value;
  }
  
};

VkDescriptorUpdateTemplateCreateInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pDescriptorUpdateEntries !== null) {
    let array = this._pDescriptorUpdateEntries;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pDescriptorUpdateEntriesNative = nativeArray;
    this.memoryViewBigInt64[0x3] = nativeArray.address;
  }
  
  return true;
};

VkDescriptorUpdateTemplateCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
};

VkDescriptorUpdateTemplateCreateInfo.byteLength = 0x48;

VkDescriptorUpdateTemplateCreateInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  flags: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  descriptorUpdateEntryCount: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  pDescriptorUpdateEntries: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
  templateType: {
    byteOffset: 0x20,
    byteLength: 0x4
  },
  descriptorSetLayout: {
    byteOffset: 0x28,
    byteLength: 0x8
  },
  pipelineBindPoint: {
    byteOffset: 0x30,
    byteLength: 0x4
  },
  pipelineLayout: {
    byteOffset: 0x38,
    byteLength: 0x8
  },
  set: {
    byteOffset: 0x40,
    byteLength: 0x4
  },
};
/** VkDescriptorUpdateTemplateCreateInfoKHR **/
class VkDescriptorUpdateTemplateCreateInfoKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x48) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x48) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x48) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x48);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    this._pDescriptorUpdateEntries = null;
    this._pDescriptorUpdateEntriesNative = null;
    
    this._descriptorSetLayout = null;
    
    this._pipelineLayout = null;
    
    this.sType = 0x3B9C1608;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.descriptorUpdateEntryCount !== void 0) this.descriptorUpdateEntryCount = opts.descriptorUpdateEntryCount;
      if (opts.pDescriptorUpdateEntries !== void 0) this.pDescriptorUpdateEntries = opts.pDescriptorUpdateEntries;
      if (opts.templateType !== void 0) this.templateType = opts.templateType;
      if (opts.descriptorSetLayout !== void 0) this.descriptorSetLayout = opts.descriptorSetLayout;
      if (opts.pipelineBindPoint !== void 0) this.pipelineBindPoint = opts.pipelineBindPoint;
      if (opts.pipelineLayout !== void 0) this.pipelineLayout = opts.pipelineLayout;
      if (opts.set !== void 0) this.set = opts.set;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDescriptorUpdateTemplateCreateInfoKHR.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get descriptorUpdateEntryCount() {
    return this.memoryViewUint32[0x5];
  }
  set descriptorUpdateEntryCount(value) {
    
    this.memoryViewUint32[0x5] = value;
  }
  get pDescriptorUpdateEntries() {
    return this._pDescriptorUpdateEntries;
  }
  set pDescriptorUpdateEntries(value) {
    if (value !== null ) {
      this._pDescriptorUpdateEntries = value;
    } else if (value === null) {
      this._pDescriptorUpdateEntries = null;
    } 
    
  }
  get templateType() {
    return this.memoryViewInt32[0x8];
  }
  set templateType(value) {
    
    this.memoryViewInt32[0x8] = value;
  }
  get descriptorSetLayout() {
    return this._descriptorSetLayout;
  }
  set descriptorSetLayout(value) {
    if (value !== null ) {
      
      this._descriptorSetLayout = value;
      
      this.memoryViewBigInt64[0x5] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._descriptorSetLayout = null;
      this.memoryViewBigInt64[0x5] = BI0;
    } 
    
  }
  get pipelineBindPoint() {
    return this.memoryViewInt32[0xC];
  }
  set pipelineBindPoint(value) {
    
    this.memoryViewInt32[0xC] = value;
  }
  get pipelineLayout() {
    return this._pipelineLayout;
  }
  set pipelineLayout(value) {
    if (value !== null ) {
      
      this._pipelineLayout = value;
      
      this.memoryViewBigInt64[0x7] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._pipelineLayout = null;
      this.memoryViewBigInt64[0x7] = BI0;
    } 
    
  }
  get set() {
    return this.memoryViewUint32[0x10];
  }
  set set(value) {
    
    this.memoryViewUint32[0x10] = value;
  }
  
};

VkDescriptorUpdateTemplateCreateInfoKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pDescriptorUpdateEntries !== null) {
    let array = this._pDescriptorUpdateEntries;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pDescriptorUpdateEntriesNative = nativeArray;
    this.memoryViewBigInt64[0x3] = nativeArray.address;
  }
  
  return true;
};

VkDescriptorUpdateTemplateCreateInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
};

VkDescriptorUpdateTemplateCreateInfoKHR.byteLength = 0x48;

VkDescriptorUpdateTemplateCreateInfoKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  flags: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  descriptorUpdateEntryCount: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  pDescriptorUpdateEntries: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
  templateType: {
    byteOffset: 0x20,
    byteLength: 0x4
  },
  descriptorSetLayout: {
    byteOffset: 0x28,
    byteLength: 0x8
  },
  pipelineBindPoint: {
    byteOffset: 0x30,
    byteLength: 0x4
  },
  pipelineLayout: {
    byteOffset: 0x38,
    byteLength: 0x8
  },
  set: {
    byteOffset: 0x40,
    byteLength: 0x4
  },
};
/** VkXYColorEXT **/
class VkXYColorEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewFloat32 = new Float32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x8) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x8);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewFloat32 = new Float32Array(this.memoryBuffer);

    }
    
    
    
    if (typeof opts === "object") {
      if (opts.x !== void 0) this.x = opts.x;
      if (opts.y !== void 0) this.y = opts.y;
      
    }
  }
  get x() {
    return this.memoryViewFloat32[0x0];
  }
  set x(value) {
    
    this.memoryViewFloat32[0x0] = value;
  }
  get y() {
    return this.memoryViewFloat32[0x1];
  }
  set y(value) {
    
    this.memoryViewFloat32[0x1] = value;
  }
  
};

VkXYColorEXT.prototype.flush = function flush() {
  
  return true;
};

VkXYColorEXT.prototype.reflect = function reflect(memoryAddress) {
  
};

VkXYColorEXT.byteLength = 0x8;

VkXYColorEXT.memoryLayout = {
  x: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  y: {
    byteOffset: 0x4,
    byteLength: 0x4
  },
};
/** VkHdrMetadataEXT **/
class VkHdrMetadataEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x40) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x40) / 0x8);
      this.memoryViewFloat32 = new Float32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x40) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x40);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewFloat32 = new Float32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._displayPrimaryRed = new VkXYColorEXT({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x10 });
    this._displayPrimaryGreen = new VkXYColorEXT({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x18 });
    this._displayPrimaryBlue = new VkXYColorEXT({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x20 });
    this._whitePoint = new VkXYColorEXT({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x28 });
    
    
    
    
    this.sType = 0x3B9C6428;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.displayPrimaryRed !== void 0) this.displayPrimaryRed = opts.displayPrimaryRed;
      if (opts.displayPrimaryGreen !== void 0) this.displayPrimaryGreen = opts.displayPrimaryGreen;
      if (opts.displayPrimaryBlue !== void 0) this.displayPrimaryBlue = opts.displayPrimaryBlue;
      if (opts.whitePoint !== void 0) this.whitePoint = opts.whitePoint;
      if (opts.maxLuminance !== void 0) this.maxLuminance = opts.maxLuminance;
      if (opts.minLuminance !== void 0) this.minLuminance = opts.minLuminance;
      if (opts.maxContentLightLevel !== void 0) this.maxContentLightLevel = opts.maxContentLightLevel;
      if (opts.maxFrameAverageLightLevel !== void 0) this.maxFrameAverageLightLevel = opts.maxFrameAverageLightLevel;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkHdrMetadataEXT.pNext' isn't allowed to be filled");
  }
  get displayPrimaryRed() {
    return this._displayPrimaryRed;
  }
  set displayPrimaryRed(value) {
    if (value !== null ) {
      value.flush();
      this._displayPrimaryRed = value;
      
      
    } else if (value === null) {
      this._displayPrimaryRed = null;
      
    } 
    
  }
  get displayPrimaryGreen() {
    return this._displayPrimaryGreen;
  }
  set displayPrimaryGreen(value) {
    if (value !== null ) {
      value.flush();
      this._displayPrimaryGreen = value;
      
      
    } else if (value === null) {
      this._displayPrimaryGreen = null;
      
    } 
    
  }
  get displayPrimaryBlue() {
    return this._displayPrimaryBlue;
  }
  set displayPrimaryBlue(value) {
    if (value !== null ) {
      value.flush();
      this._displayPrimaryBlue = value;
      
      
    } else if (value === null) {
      this._displayPrimaryBlue = null;
      
    } 
    
  }
  get whitePoint() {
    return this._whitePoint;
  }
  set whitePoint(value) {
    if (value !== null ) {
      value.flush();
      this._whitePoint = value;
      
      
    } else if (value === null) {
      this._whitePoint = null;
      
    } 
    
  }
  get maxLuminance() {
    return this.memoryViewFloat32[0xC];
  }
  set maxLuminance(value) {
    
    this.memoryViewFloat32[0xC] = value;
  }
  get minLuminance() {
    return this.memoryViewFloat32[0xD];
  }
  set minLuminance(value) {
    
    this.memoryViewFloat32[0xD] = value;
  }
  get maxContentLightLevel() {
    return this.memoryViewFloat32[0xE];
  }
  set maxContentLightLevel(value) {
    
    this.memoryViewFloat32[0xE] = value;
  }
  get maxFrameAverageLightLevel() {
    return this.memoryViewFloat32[0xF];
  }
  set maxFrameAverageLightLevel(value) {
    
    this.memoryViewFloat32[0xF] = value;
  }
  
};

VkHdrMetadataEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._displayPrimaryRed !== null) {
    this._displayPrimaryRed.flush();
    if (this.memoryBuffer !== this._displayPrimaryRed.memoryBuffer) {
      let srcView = new Uint8Array(this._displayPrimaryRed.memoryBuffer);
      let dstView = new Uint8Array(this.memoryBuffer);
      dstView.set(srcView, 0x10);
      
    }
  }
  
  
  if (this._displayPrimaryGreen !== null) {
    this._displayPrimaryGreen.flush();
    if (this.memoryBuffer !== this._displayPrimaryGreen.memoryBuffer) {
      let srcView = new Uint8Array(this._displayPrimaryGreen.memoryBuffer);
      let dstView = new Uint8Array(this.memoryBuffer);
      dstView.set(srcView, 0x18);
      
    }
  }
  
  
  if (this._displayPrimaryBlue !== null) {
    this._displayPrimaryBlue.flush();
    if (this.memoryBuffer !== this._displayPrimaryBlue.memoryBuffer) {
      let srcView = new Uint8Array(this._displayPrimaryBlue.memoryBuffer);
      let dstView = new Uint8Array(this.memoryBuffer);
      dstView.set(srcView, 0x20);
      
    }
  }
  
  
  if (this._whitePoint !== null) {
    this._whitePoint.flush();
    if (this.memoryBuffer !== this._whitePoint.memoryBuffer) {
      let srcView = new Uint8Array(this._whitePoint.memoryBuffer);
      let dstView = new Uint8Array(this.memoryBuffer);
      dstView.set(srcView, 0x28);
      
    }
  }
  
  return true;
};

VkHdrMetadataEXT.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
  
  
  
  
  
  
};

VkHdrMetadataEXT.byteLength = 0x40;

VkHdrMetadataEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  displayPrimaryRed: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
  displayPrimaryGreen: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
  displayPrimaryBlue: {
    byteOffset: 0x20,
    byteLength: 0x8
  },
  whitePoint: {
    byteOffset: 0x28,
    byteLength: 0x8
  },
  maxLuminance: {
    byteOffset: 0x30,
    byteLength: 0x4
  },
  minLuminance: {
    byteOffset: 0x34,
    byteLength: 0x4
  },
  maxContentLightLevel: {
    byteOffset: 0x38,
    byteLength: 0x4
  },
  maxFrameAverageLightLevel: {
    byteOffset: 0x3C,
    byteLength: 0x4
  },
};
/** VkDisplayNativeHdrSurfaceCapabilitiesAMD **/
class VkDisplayNativeHdrSurfaceCapabilitiesAMD {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9E0A08;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDisplayNativeHdrSurfaceCapabilitiesAMD.pNext' isn't allowed to be filled");
  }
  get localDimmingSupport() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  
};

VkDisplayNativeHdrSurfaceCapabilitiesAMD.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDisplayNativeHdrSurfaceCapabilitiesAMD.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x18));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x18), 0x0);
  
  
};

VkDisplayNativeHdrSurfaceCapabilitiesAMD.byteLength = 0x18;

VkDisplayNativeHdrSurfaceCapabilitiesAMD.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  localDimmingSupport: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkSwapchainDisplayNativeHdrCreateInfoAMD **/
class VkSwapchainDisplayNativeHdrCreateInfoAMD {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9E0A09;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.localDimmingEnable !== void 0) this.localDimmingEnable = opts.localDimmingEnable;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkSwapchainDisplayNativeHdrCreateInfoAMD.pNext' isn't allowed to be filled");
  }
  get localDimmingEnable() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set localDimmingEnable(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  
};

VkSwapchainDisplayNativeHdrCreateInfoAMD.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkSwapchainDisplayNativeHdrCreateInfoAMD.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkSwapchainDisplayNativeHdrCreateInfoAMD.byteLength = 0x18;

VkSwapchainDisplayNativeHdrCreateInfoAMD.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  localDimmingEnable: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkRefreshCycleDurationGOOGLE **/
class VkRefreshCycleDurationGOOGLE {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x8) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x8);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);

    }
    
    
    if (typeof opts === "object") {
      
    }
  }
  get refreshDuration() {
    return this.memoryViewBigUint64[0x0];
  }
  
};

VkRefreshCycleDurationGOOGLE.prototype.flush = function flush() {
  
  return true;
};

VkRefreshCycleDurationGOOGLE.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x8));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x8), 0x0);
};

VkRefreshCycleDurationGOOGLE.byteLength = 0x8;

VkRefreshCycleDurationGOOGLE.memoryLayout = {
  refreshDuration: {
    byteOffset: 0x0,
    byteLength: 0x8
  },
};
/** VkPastPresentationTimingGOOGLE **/
class VkPastPresentationTimingGOOGLE {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x28);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);

    }
    
    
    
    
    
    
    if (typeof opts === "object") {
      
    }
  }
  get presentID() {
    return this.memoryViewUint32[0x0];
  }
  get desiredPresentTime() {
    return this.memoryViewBigUint64[0x1];
  }
  get actualPresentTime() {
    return this.memoryViewBigUint64[0x2];
  }
  get earliestPresentTime() {
    return this.memoryViewBigUint64[0x3];
  }
  get presentMargin() {
    return this.memoryViewBigUint64[0x4];
  }
  
};

VkPastPresentationTimingGOOGLE.prototype.flush = function flush() {
  
  return true;
};

VkPastPresentationTimingGOOGLE.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x28));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x28), 0x0);
};

VkPastPresentationTimingGOOGLE.byteLength = 0x28;

VkPastPresentationTimingGOOGLE.memoryLayout = {
  presentID: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  desiredPresentTime: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  actualPresentTime: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
  earliestPresentTime: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
  presentMargin: {
    byteOffset: 0x20,
    byteLength: 0x8
  },
};
/** VkPresentTimesInfoGOOGLE **/
class VkPresentTimesInfoGOOGLE {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this._pTimes = null;
    this._pTimesNative = null;
    this.sType = 0x3B9C3160;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.swapchainCount !== void 0) this.swapchainCount = opts.swapchainCount;
      if (opts.pTimes !== void 0) this.pTimes = opts.pTimes;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPresentTimesInfoGOOGLE.pNext' isn't allowed to be filled");
  }
  get swapchainCount() {
    return this.memoryViewUint32[0x4];
  }
  set swapchainCount(value) {
    
    this.memoryViewUint32[0x4] = value;
  }
  get pTimes() {
    return this._pTimes;
  }
  set pTimes(value) {
    if (value !== null ) {
      this._pTimes = value;
    } else if (value === null) {
      this._pTimes = null;
    } 
    
  }
  
};

VkPresentTimesInfoGOOGLE.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pTimes !== null) {
    let array = this._pTimes;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pTimesNative = nativeArray;
    this.memoryViewBigInt64[0x3] = nativeArray.address;
  }
  
  return true;
};

VkPresentTimesInfoGOOGLE.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
};

VkPresentTimesInfoGOOGLE.byteLength = 0x20;

VkPresentTimesInfoGOOGLE.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  swapchainCount: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  pTimes: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
};
/** VkPresentTimeGOOGLE **/
class VkPresentTimeGOOGLE {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x10) / 0x4);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x10) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x10);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);

    }
    
    
    
    if (typeof opts === "object") {
      if (opts.presentID !== void 0) this.presentID = opts.presentID;
      if (opts.desiredPresentTime !== void 0) this.desiredPresentTime = opts.desiredPresentTime;
      
    }
  }
  get presentID() {
    return this.memoryViewUint32[0x0];
  }
  set presentID(value) {
    
    this.memoryViewUint32[0x0] = value;
  }
  get desiredPresentTime() {
    return this.memoryViewBigUint64[0x1];
  }
  set desiredPresentTime(value) {
    
    this.memoryViewBigUint64[0x1] = BigInt(value);
  }
  
};

VkPresentTimeGOOGLE.prototype.flush = function flush() {
  
  return true;
};

VkPresentTimeGOOGLE.prototype.reflect = function reflect(memoryAddress) {
  
};

VkPresentTimeGOOGLE.byteLength = 0x10;

VkPresentTimeGOOGLE.memoryLayout = {
  presentID: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  desiredPresentTime: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
};
/** VkMacOSSurfaceCreateInfoMVK **/
class VkMacOSSurfaceCreateInfoMVK {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this._pView = null;
    this.sType = 0x3B9CAA78;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.pView !== void 0) this.pView = opts.pView;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkMacOSSurfaceCreateInfoMVK.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get pView() {
    return this._pView;
  }
  set pView(value) {
    if (value !== null ) {
      this._pView = value;
      this.memoryViewBigInt64[0x3] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pView = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } 
    
  }
  
};

VkMacOSSurfaceCreateInfoMVK.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkMacOSSurfaceCreateInfoMVK.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkMacOSSurfaceCreateInfoMVK.byteLength = 0x20;

VkMacOSSurfaceCreateInfoMVK.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  flags: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  pView: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
};
/** VkViewportWScalingNV **/
class VkViewportWScalingNV {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewFloat32 = new Float32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x8) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x8);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewFloat32 = new Float32Array(this.memoryBuffer);

    }
    
    
    
    if (typeof opts === "object") {
      if (opts.xcoeff !== void 0) this.xcoeff = opts.xcoeff;
      if (opts.ycoeff !== void 0) this.ycoeff = opts.ycoeff;
      
    }
  }
  get xcoeff() {
    return this.memoryViewFloat32[0x0];
  }
  set xcoeff(value) {
    
    this.memoryViewFloat32[0x0] = value;
  }
  get ycoeff() {
    return this.memoryViewFloat32[0x1];
  }
  set ycoeff(value) {
    
    this.memoryViewFloat32[0x1] = value;
  }
  
};

VkViewportWScalingNV.prototype.flush = function flush() {
  
  return true;
};

VkViewportWScalingNV.prototype.reflect = function reflect(memoryAddress) {
  
};

VkViewportWScalingNV.byteLength = 0x8;

VkViewportWScalingNV.memoryLayout = {
  xcoeff: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  ycoeff: {
    byteOffset: 0x4,
    byteLength: 0x4
  },
};
/** VkPipelineViewportWScalingStateCreateInfoNV **/
class VkPipelineViewportWScalingStateCreateInfoNV {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    this._pViewportWScalings = null;
    this._pViewportWScalingsNative = null;
    this.sType = 0x3B9C1DD8;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.viewportWScalingEnable !== void 0) this.viewportWScalingEnable = opts.viewportWScalingEnable;
      if (opts.viewportCount !== void 0) this.viewportCount = opts.viewportCount;
      if (opts.pViewportWScalings !== void 0) this.pViewportWScalings = opts.pViewportWScalings;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPipelineViewportWScalingStateCreateInfoNV.pNext' isn't allowed to be filled");
  }
  get viewportWScalingEnable() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set viewportWScalingEnable(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  get viewportCount() {
    return this.memoryViewUint32[0x5];
  }
  set viewportCount(value) {
    
    this.memoryViewUint32[0x5] = value;
  }
  get pViewportWScalings() {
    return this._pViewportWScalings;
  }
  set pViewportWScalings(value) {
    if (value !== null ) {
      this._pViewportWScalings = value;
    } else if (value === null) {
      this._pViewportWScalings = null;
    } 
    
  }
  
};

VkPipelineViewportWScalingStateCreateInfoNV.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pViewportWScalings !== null) {
    let array = this._pViewportWScalings;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pViewportWScalingsNative = nativeArray;
    this.memoryViewBigInt64[0x3] = nativeArray.address;
  }
  
  return true;
};

VkPipelineViewportWScalingStateCreateInfoNV.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
};

VkPipelineViewportWScalingStateCreateInfoNV.byteLength = 0x20;

VkPipelineViewportWScalingStateCreateInfoNV.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  viewportWScalingEnable: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  viewportCount: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  pViewportWScalings: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
};
/** VkViewportSwizzleNV **/
class VkViewportSwizzleNV {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x10) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x10);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);

    }
    
    
    
    
    
    if (typeof opts === "object") {
      if (opts.x !== void 0) this.x = opts.x;
      if (opts.y !== void 0) this.y = opts.y;
      if (opts.z !== void 0) this.z = opts.z;
      if (opts.w !== void 0) this.w = opts.w;
      
    }
  }
  get x() {
    return this.memoryViewInt32[0x0];
  }
  set x(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get y() {
    return this.memoryViewInt32[0x1];
  }
  set y(value) {
    
    this.memoryViewInt32[0x1] = value;
  }
  get z() {
    return this.memoryViewInt32[0x2];
  }
  set z(value) {
    
    this.memoryViewInt32[0x2] = value;
  }
  get w() {
    return this.memoryViewInt32[0x3];
  }
  set w(value) {
    
    this.memoryViewInt32[0x3] = value;
  }
  
};

VkViewportSwizzleNV.prototype.flush = function flush() {
  
  return true;
};

VkViewportSwizzleNV.prototype.reflect = function reflect(memoryAddress) {
  
};

VkViewportSwizzleNV.byteLength = 0x10;

VkViewportSwizzleNV.memoryLayout = {
  x: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  y: {
    byteOffset: 0x4,
    byteLength: 0x4
  },
  z: {
    byteOffset: 0x8,
    byteLength: 0x4
  },
  w: {
    byteOffset: 0xC,
    byteLength: 0x4
  },
};
/** VkPipelineViewportSwizzleStateCreateInfoNV **/
class VkPipelineViewportSwizzleStateCreateInfoNV {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    this._pViewportSwizzles = null;
    this._pViewportSwizzlesNative = null;
    this.sType = 0x3B9C48D0;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.viewportCount !== void 0) this.viewportCount = opts.viewportCount;
      if (opts.pViewportSwizzles !== void 0) this.pViewportSwizzles = opts.pViewportSwizzles;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPipelineViewportSwizzleStateCreateInfoNV.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get viewportCount() {
    return this.memoryViewUint32[0x5];
  }
  set viewportCount(value) {
    
    this.memoryViewUint32[0x5] = value;
  }
  get pViewportSwizzles() {
    return this._pViewportSwizzles;
  }
  set pViewportSwizzles(value) {
    if (value !== null ) {
      this._pViewportSwizzles = value;
    } else if (value === null) {
      this._pViewportSwizzles = null;
    } 
    
  }
  
};

VkPipelineViewportSwizzleStateCreateInfoNV.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pViewportSwizzles !== null) {
    let array = this._pViewportSwizzles;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pViewportSwizzlesNative = nativeArray;
    this.memoryViewBigInt64[0x3] = nativeArray.address;
  }
  
  return true;
};

VkPipelineViewportSwizzleStateCreateInfoNV.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
};

VkPipelineViewportSwizzleStateCreateInfoNV.byteLength = 0x20;

VkPipelineViewportSwizzleStateCreateInfoNV.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  flags: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  viewportCount: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  pViewportSwizzles: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
};
/** VkPhysicalDeviceDiscardRectanglePropertiesEXT **/
class VkPhysicalDeviceDiscardRectanglePropertiesEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9C4CB8;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceDiscardRectanglePropertiesEXT.pNext' isn't allowed to be filled");
  }
  get maxDiscardRectangles() {
    return this.memoryViewUint32[0x4];
  }
  
};

VkPhysicalDeviceDiscardRectanglePropertiesEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceDiscardRectanglePropertiesEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x18));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x18), 0x0);
  
  
};

VkPhysicalDeviceDiscardRectanglePropertiesEXT.byteLength = 0x18;

VkPhysicalDeviceDiscardRectanglePropertiesEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  maxDiscardRectangles: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkPipelineDiscardRectangleStateCreateInfoEXT **/
class VkPipelineDiscardRectangleStateCreateInfoEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x28);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    
    this._pDiscardRectangles = null;
    this._pDiscardRectanglesNative = null;
    this.sType = 0x3B9C4CB9;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.discardRectangleMode !== void 0) this.discardRectangleMode = opts.discardRectangleMode;
      if (opts.discardRectangleCount !== void 0) this.discardRectangleCount = opts.discardRectangleCount;
      if (opts.pDiscardRectangles !== void 0) this.pDiscardRectangles = opts.pDiscardRectangles;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPipelineDiscardRectangleStateCreateInfoEXT.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get discardRectangleMode() {
    return this.memoryViewInt32[0x5];
  }
  set discardRectangleMode(value) {
    
    this.memoryViewInt32[0x5] = value;
  }
  get discardRectangleCount() {
    return this.memoryViewUint32[0x6];
  }
  set discardRectangleCount(value) {
    
    this.memoryViewUint32[0x6] = value;
  }
  get pDiscardRectangles() {
    return this._pDiscardRectangles;
  }
  set pDiscardRectangles(value) {
    if (value !== null ) {
      this._pDiscardRectangles = value;
    } else if (value === null) {
      this._pDiscardRectangles = null;
    } 
    
  }
  
};

VkPipelineDiscardRectangleStateCreateInfoEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pDiscardRectangles !== null) {
    let array = this._pDiscardRectangles;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pDiscardRectanglesNative = nativeArray;
    this.memoryViewBigInt64[0x4] = nativeArray.address;
  }
  
  return true;
};

VkPipelineDiscardRectangleStateCreateInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
};

VkPipelineDiscardRectangleStateCreateInfoEXT.byteLength = 0x28;

VkPipelineDiscardRectangleStateCreateInfoEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  flags: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  discardRectangleMode: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  discardRectangleCount: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
  pDiscardRectangles: {
    byteOffset: 0x20,
    byteLength: 0x8
  },
};
/** VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX **/
class VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9C44E8;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX.pNext' isn't allowed to be filled");
  }
  get perViewPositionAllComponents() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  
};

VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x18));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x18), 0x0);
  
  
};

VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX.byteLength = 0x18;

VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  perViewPositionAllComponents: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkInputAttachmentAspectReference **/
class VkInputAttachmentAspectReference {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0xC) / 0x4);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0xC) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0xC);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);

    }
    
    
    
    
    if (typeof opts === "object") {
      if (opts.subpass !== void 0) this.subpass = opts.subpass;
      if (opts.inputAttachmentIndex !== void 0) this.inputAttachmentIndex = opts.inputAttachmentIndex;
      if (opts.aspectMask !== void 0) this.aspectMask = opts.aspectMask;
      
    }
  }
  get subpass() {
    return this.memoryViewUint32[0x0];
  }
  set subpass(value) {
    
    this.memoryViewUint32[0x0] = value;
  }
  get inputAttachmentIndex() {
    return this.memoryViewUint32[0x1];
  }
  set inputAttachmentIndex(value) {
    
    this.memoryViewUint32[0x1] = value;
  }
  get aspectMask() {
    return this.memoryViewInt32[0x2];
  }
  set aspectMask(value) {
    
    this.memoryViewInt32[0x2] = value;
  }
  
};

VkInputAttachmentAspectReference.prototype.flush = function flush() {
  
  return true;
};

VkInputAttachmentAspectReference.prototype.reflect = function reflect(memoryAddress) {
  
};

VkInputAttachmentAspectReference.byteLength = 0xC;

VkInputAttachmentAspectReference.memoryLayout = {
  subpass: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  inputAttachmentIndex: {
    byteOffset: 0x4,
    byteLength: 0x4
  },
  aspectMask: {
    byteOffset: 0x8,
    byteLength: 0x4
  },
};
/** VkInputAttachmentAspectReferenceKHR **/
class VkInputAttachmentAspectReferenceKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0xC) / 0x4);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0xC) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0xC);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);

    }
    
    
    
    
    if (typeof opts === "object") {
      if (opts.subpass !== void 0) this.subpass = opts.subpass;
      if (opts.inputAttachmentIndex !== void 0) this.inputAttachmentIndex = opts.inputAttachmentIndex;
      if (opts.aspectMask !== void 0) this.aspectMask = opts.aspectMask;
      
    }
  }
  get subpass() {
    return this.memoryViewUint32[0x0];
  }
  set subpass(value) {
    
    this.memoryViewUint32[0x0] = value;
  }
  get inputAttachmentIndex() {
    return this.memoryViewUint32[0x1];
  }
  set inputAttachmentIndex(value) {
    
    this.memoryViewUint32[0x1] = value;
  }
  get aspectMask() {
    return this.memoryViewInt32[0x2];
  }
  set aspectMask(value) {
    
    this.memoryViewInt32[0x2] = value;
  }
  
};

VkInputAttachmentAspectReferenceKHR.prototype.flush = function flush() {
  
  return true;
};

VkInputAttachmentAspectReferenceKHR.prototype.reflect = function reflect(memoryAddress) {
  
};

VkInputAttachmentAspectReferenceKHR.byteLength = 0xC;

VkInputAttachmentAspectReferenceKHR.memoryLayout = {
  subpass: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  inputAttachmentIndex: {
    byteOffset: 0x4,
    byteLength: 0x4
  },
  aspectMask: {
    byteOffset: 0x8,
    byteLength: 0x4
  },
};
/** VkRenderPassInputAttachmentAspectCreateInfo **/
class VkRenderPassInputAttachmentAspectCreateInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this._pAspectReferences = null;
    this._pAspectReferencesNative = null;
    this.sType = 0x3B9C9309;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.aspectReferenceCount !== void 0) this.aspectReferenceCount = opts.aspectReferenceCount;
      if (opts.pAspectReferences !== void 0) this.pAspectReferences = opts.pAspectReferences;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkRenderPassInputAttachmentAspectCreateInfo.pNext' isn't allowed to be filled");
  }
  get aspectReferenceCount() {
    return this.memoryViewUint32[0x4];
  }
  set aspectReferenceCount(value) {
    
    this.memoryViewUint32[0x4] = value;
  }
  get pAspectReferences() {
    return this._pAspectReferences;
  }
  set pAspectReferences(value) {
    if (value !== null ) {
      this._pAspectReferences = value;
    } else if (value === null) {
      this._pAspectReferences = null;
    } 
    
  }
  
};

VkRenderPassInputAttachmentAspectCreateInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pAspectReferences !== null) {
    let array = this._pAspectReferences;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pAspectReferencesNative = nativeArray;
    this.memoryViewBigInt64[0x3] = nativeArray.address;
  }
  
  return true;
};

VkRenderPassInputAttachmentAspectCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
};

VkRenderPassInputAttachmentAspectCreateInfo.byteLength = 0x20;

VkRenderPassInputAttachmentAspectCreateInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  aspectReferenceCount: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  pAspectReferences: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
};
/** VkRenderPassInputAttachmentAspectCreateInfoKHR **/
class VkRenderPassInputAttachmentAspectCreateInfoKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this._pAspectReferences = null;
    this._pAspectReferencesNative = null;
    this.sType = 0x3B9C9309;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.aspectReferenceCount !== void 0) this.aspectReferenceCount = opts.aspectReferenceCount;
      if (opts.pAspectReferences !== void 0) this.pAspectReferences = opts.pAspectReferences;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkRenderPassInputAttachmentAspectCreateInfoKHR.pNext' isn't allowed to be filled");
  }
  get aspectReferenceCount() {
    return this.memoryViewUint32[0x4];
  }
  set aspectReferenceCount(value) {
    
    this.memoryViewUint32[0x4] = value;
  }
  get pAspectReferences() {
    return this._pAspectReferences;
  }
  set pAspectReferences(value) {
    if (value !== null ) {
      this._pAspectReferences = value;
    } else if (value === null) {
      this._pAspectReferences = null;
    } 
    
  }
  
};

VkRenderPassInputAttachmentAspectCreateInfoKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pAspectReferences !== null) {
    let array = this._pAspectReferences;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pAspectReferencesNative = nativeArray;
    this.memoryViewBigInt64[0x3] = nativeArray.address;
  }
  
  return true;
};

VkRenderPassInputAttachmentAspectCreateInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
};

VkRenderPassInputAttachmentAspectCreateInfoKHR.byteLength = 0x20;

VkRenderPassInputAttachmentAspectCreateInfoKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  aspectReferenceCount: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  pAspectReferences: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
};
/** VkPhysicalDeviceSurfaceInfo2KHR **/
class VkPhysicalDeviceSurfaceInfo2KHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._surface = null;
    this.sType = 0x3B9C9AD8;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.surface !== void 0) this.surface = opts.surface;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null ) {
      let {sType} = value;
      
      switch (sType) {
          
        case 0x3B9EAE18:
        case 0x3B9EAE19:
          break;
        default:
          throw new TypeError("Invalid type for 'VkPhysicalDeviceSurfaceInfo2KHR.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  get surface() {
    return this._surface;
  }
  set surface(value) {
    if (value !== null ) {
      
      this._surface = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._surface = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } 
    
  }
  
};

VkPhysicalDeviceSurfaceInfo2KHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceSurfaceInfo2KHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPhysicalDeviceSurfaceInfo2KHR.byteLength = 0x18;

VkPhysicalDeviceSurfaceInfo2KHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  surface: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
};
/** VkSurfaceCapabilities2KHR **/
class VkSurfaceCapabilities2KHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x48) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x48) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x48);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._surfaceCapabilities = new VkSurfaceCapabilitiesKHR({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x10 });
    this.sType = 0x3B9C9AD9;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null ) {
      let {sType} = value;
      
      switch (sType) {
          
        case 0x3B9E0A08:
        case 0x3B9C7B98:
        case 0x3B9E6F98:
        case 0x3B9EAE1A:
          break;
        default:
          throw new TypeError("Invalid type for 'VkSurfaceCapabilities2KHR.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  get surfaceCapabilities() {
    return this._surfaceCapabilities;
  }
  
};

VkSurfaceCapabilities2KHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkSurfaceCapabilities2KHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x48));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x48), 0x0);
  
  
  
  
};

VkSurfaceCapabilities2KHR.byteLength = 0x48;

VkSurfaceCapabilities2KHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  surfaceCapabilities: {
    byteOffset: 0x10,
    byteLength: 0x34
  },
};
/** VkSurfaceFormat2KHR **/
class VkSurfaceFormat2KHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._surfaceFormat = new VkSurfaceFormatKHR({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x10 });
    this.sType = 0x3B9C9ADA;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkSurfaceFormat2KHR.pNext' isn't allowed to be filled");
  }
  get surfaceFormat() {
    return this._surfaceFormat;
  }
  
};

VkSurfaceFormat2KHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkSurfaceFormat2KHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x18));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x18), 0x0);
  
  
  
  
};

VkSurfaceFormat2KHR.byteLength = 0x18;

VkSurfaceFormat2KHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  surfaceFormat: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
};
/** VkDisplayProperties2KHR **/
class VkDisplayProperties2KHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x40) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x40) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x40);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._displayProperties = new VkDisplayPropertiesKHR({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x10 });
    this.sType = 0x3B9CA2A8;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDisplayProperties2KHR.pNext' isn't allowed to be filled");
  }
  get displayProperties() {
    return this._displayProperties;
  }
  
};

VkDisplayProperties2KHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDisplayProperties2KHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x40));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x40), 0x0);
  
  
  
  
};

VkDisplayProperties2KHR.byteLength = 0x40;

VkDisplayProperties2KHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  displayProperties: {
    byteOffset: 0x10,
    byteLength: 0x30
  },
};
/** VkDisplayPlaneProperties2KHR **/
class VkDisplayPlaneProperties2KHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._displayPlaneProperties = new VkDisplayPlanePropertiesKHR({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x10 });
    this.sType = 0x3B9CA2A9;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDisplayPlaneProperties2KHR.pNext' isn't allowed to be filled");
  }
  get displayPlaneProperties() {
    return this._displayPlaneProperties;
  }
  
};

VkDisplayPlaneProperties2KHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDisplayPlaneProperties2KHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x20));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x20), 0x0);
  
  
  
  
};

VkDisplayPlaneProperties2KHR.byteLength = 0x20;

VkDisplayPlaneProperties2KHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  displayPlaneProperties: {
    byteOffset: 0x10,
    byteLength: 0x10
  },
};
/** VkDisplayModeProperties2KHR **/
class VkDisplayModeProperties2KHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x28);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._displayModeProperties = new VkDisplayModePropertiesKHR({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x10 });
    this.sType = 0x3B9CA2AA;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDisplayModeProperties2KHR.pNext' isn't allowed to be filled");
  }
  get displayModeProperties() {
    return this._displayModeProperties;
  }
  
};

VkDisplayModeProperties2KHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDisplayModeProperties2KHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x28));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x28), 0x0);
  
  
  
  
};

VkDisplayModeProperties2KHR.byteLength = 0x28;

VkDisplayModeProperties2KHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  displayModeProperties: {
    byteOffset: 0x10,
    byteLength: 0x18
  },
};
/** VkDisplayPlaneInfo2KHR **/
class VkDisplayPlaneInfo2KHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._mode = null;
    
    this.sType = 0x3B9CA2AB;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.mode !== void 0) this.mode = opts.mode;
      if (opts.planeIndex !== void 0) this.planeIndex = opts.planeIndex;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDisplayPlaneInfo2KHR.pNext' isn't allowed to be filled");
  }
  get mode() {
    return this._mode;
  }
  set mode(value) {
    if (value !== null ) {
      
      this._mode = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._mode = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } 
    
  }
  get planeIndex() {
    return this.memoryViewUint32[0x6];
  }
  set planeIndex(value) {
    
    this.memoryViewUint32[0x6] = value;
  }
  
};

VkDisplayPlaneInfo2KHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDisplayPlaneInfo2KHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkDisplayPlaneInfo2KHR.byteLength = 0x20;

VkDisplayPlaneInfo2KHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  mode: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
  planeIndex: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
};
/** VkDisplayPlaneCapabilities2KHR **/
class VkDisplayPlaneCapabilities2KHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x58) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x58) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x58);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._capabilities = new VkDisplayPlaneCapabilitiesKHR({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x10 });
    this.sType = 0x3B9CA2AC;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDisplayPlaneCapabilities2KHR.pNext' isn't allowed to be filled");
  }
  get capabilities() {
    return this._capabilities;
  }
  
};

VkDisplayPlaneCapabilities2KHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDisplayPlaneCapabilities2KHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x58));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x58), 0x0);
  
  
  
  
};

VkDisplayPlaneCapabilities2KHR.byteLength = 0x58;

VkDisplayPlaneCapabilities2KHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  capabilities: {
    byteOffset: 0x10,
    byteLength: 0x44
  },
};
/** VkSharedPresentSurfaceCapabilitiesKHR **/
class VkSharedPresentSurfaceCapabilitiesKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9C7B98;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkSharedPresentSurfaceCapabilitiesKHR.pNext' isn't allowed to be filled");
  }
  get sharedPresentSupportedUsageFlags() {
    return this.memoryViewInt32[0x4];
  }
  
};

VkSharedPresentSurfaceCapabilitiesKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkSharedPresentSurfaceCapabilitiesKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x18));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x18), 0x0);
  
  
};

VkSharedPresentSurfaceCapabilitiesKHR.byteLength = 0x18;

VkSharedPresentSurfaceCapabilitiesKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  sharedPresentSupportedUsageFlags: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkPhysicalDevice16BitStorageFeatures **/
class VkPhysicalDevice16BitStorageFeatures {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    
    
    this.sType = 0x3B9C0E38;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.storageBuffer16BitAccess !== void 0) this.storageBuffer16BitAccess = opts.storageBuffer16BitAccess;
      if (opts.uniformAndStorageBuffer16BitAccess !== void 0) this.uniformAndStorageBuffer16BitAccess = opts.uniformAndStorageBuffer16BitAccess;
      if (opts.storagePushConstant16 !== void 0) this.storagePushConstant16 = opts.storagePushConstant16;
      if (opts.storageInputOutput16 !== void 0) this.storageInputOutput16 = opts.storageInputOutput16;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDevice16BitStorageFeatures.pNext' isn't allowed to be filled");
  }
  get storageBuffer16BitAccess() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set storageBuffer16BitAccess(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  get uniformAndStorageBuffer16BitAccess() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  set uniformAndStorageBuffer16BitAccess(value) {
    this.memoryViewUint32[0x5] = value | 0;
  }
  get storagePushConstant16() {
    return this.memoryViewUint32[0x6] !== 0;
  }
  set storagePushConstant16(value) {
    this.memoryViewUint32[0x6] = value | 0;
  }
  get storageInputOutput16() {
    return this.memoryViewUint32[0x7] !== 0;
  }
  set storageInputOutput16(value) {
    this.memoryViewUint32[0x7] = value | 0;
  }
  
};

VkPhysicalDevice16BitStorageFeatures.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDevice16BitStorageFeatures.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPhysicalDevice16BitStorageFeatures.byteLength = 0x20;

VkPhysicalDevice16BitStorageFeatures.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  storageBuffer16BitAccess: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  uniformAndStorageBuffer16BitAccess: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  storagePushConstant16: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
  storageInputOutput16: {
    byteOffset: 0x1C,
    byteLength: 0x4
  },
};
/** VkPhysicalDevice16BitStorageFeaturesKHR **/
class VkPhysicalDevice16BitStorageFeaturesKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    
    
    this.sType = 0x3B9C0E38;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.storageBuffer16BitAccess !== void 0) this.storageBuffer16BitAccess = opts.storageBuffer16BitAccess;
      if (opts.uniformAndStorageBuffer16BitAccess !== void 0) this.uniformAndStorageBuffer16BitAccess = opts.uniformAndStorageBuffer16BitAccess;
      if (opts.storagePushConstant16 !== void 0) this.storagePushConstant16 = opts.storagePushConstant16;
      if (opts.storageInputOutput16 !== void 0) this.storageInputOutput16 = opts.storageInputOutput16;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDevice16BitStorageFeaturesKHR.pNext' isn't allowed to be filled");
  }
  get storageBuffer16BitAccess() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set storageBuffer16BitAccess(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  get uniformAndStorageBuffer16BitAccess() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  set uniformAndStorageBuffer16BitAccess(value) {
    this.memoryViewUint32[0x5] = value | 0;
  }
  get storagePushConstant16() {
    return this.memoryViewUint32[0x6] !== 0;
  }
  set storagePushConstant16(value) {
    this.memoryViewUint32[0x6] = value | 0;
  }
  get storageInputOutput16() {
    return this.memoryViewUint32[0x7] !== 0;
  }
  set storageInputOutput16(value) {
    this.memoryViewUint32[0x7] = value | 0;
  }
  
};

VkPhysicalDevice16BitStorageFeaturesKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDevice16BitStorageFeaturesKHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPhysicalDevice16BitStorageFeaturesKHR.byteLength = 0x20;

VkPhysicalDevice16BitStorageFeaturesKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  storageBuffer16BitAccess: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  uniformAndStorageBuffer16BitAccess: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  storagePushConstant16: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
  storageInputOutput16: {
    byteOffset: 0x1C,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceSubgroupProperties **/
class VkPhysicalDeviceSubgroupProperties {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    
    
    this.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceSubgroupProperties.pNext' isn't allowed to be filled");
  }
  get subgroupSize() {
    return this.memoryViewUint32[0x4];
  }
  get supportedStages() {
    return this.memoryViewInt32[0x5];
  }
  get supportedOperations() {
    return this.memoryViewInt32[0x6];
  }
  get quadOperationsInAllStages() {
    return this.memoryViewUint32[0x7] !== 0;
  }
  
};

VkPhysicalDeviceSubgroupProperties.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceSubgroupProperties.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x20));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x20), 0x0);
  
  
};

VkPhysicalDeviceSubgroupProperties.byteLength = 0x20;

VkPhysicalDeviceSubgroupProperties.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  subgroupSize: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  supportedStages: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  supportedOperations: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
  quadOperationsInAllStages: {
    byteOffset: 0x1C,
    byteLength: 0x4
  },
};
/** VkBufferMemoryRequirementsInfo2 **/
class VkBufferMemoryRequirementsInfo2 {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._buffer = null;
    this.sType = 0x3B9D0450;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.buffer !== void 0) this.buffer = opts.buffer;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkBufferMemoryRequirementsInfo2.pNext' isn't allowed to be filled");
  }
  get buffer() {
    return this._buffer;
  }
  set buffer(value) {
    if (value !== null ) {
      
      this._buffer = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._buffer = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } 
    
  }
  
};

VkBufferMemoryRequirementsInfo2.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkBufferMemoryRequirementsInfo2.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkBufferMemoryRequirementsInfo2.byteLength = 0x18;

VkBufferMemoryRequirementsInfo2.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  buffer: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
};
/** VkBufferMemoryRequirementsInfo2KHR **/
class VkBufferMemoryRequirementsInfo2KHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._buffer = null;
    this.sType = 0x3B9D0450;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.buffer !== void 0) this.buffer = opts.buffer;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkBufferMemoryRequirementsInfo2KHR.pNext' isn't allowed to be filled");
  }
  get buffer() {
    return this._buffer;
  }
  set buffer(value) {
    if (value !== null ) {
      
      this._buffer = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._buffer = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } 
    
  }
  
};

VkBufferMemoryRequirementsInfo2KHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkBufferMemoryRequirementsInfo2KHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkBufferMemoryRequirementsInfo2KHR.byteLength = 0x18;

VkBufferMemoryRequirementsInfo2KHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  buffer: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
};
/** VkImageMemoryRequirementsInfo2 **/
class VkImageMemoryRequirementsInfo2 {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._image = null;
    this.sType = 0x3B9D0451;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.image !== void 0) this.image = opts.image;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null ) {
      let {sType} = value;
      
      switch (sType) {
          
        case 0x3B9D2B63:
          break;
        default:
          throw new TypeError("Invalid type for 'VkImageMemoryRequirementsInfo2.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  get image() {
    return this._image;
  }
  set image(value) {
    if (value !== null ) {
      
      this._image = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._image = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } 
    
  }
  
};

VkImageMemoryRequirementsInfo2.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkImageMemoryRequirementsInfo2.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkImageMemoryRequirementsInfo2.byteLength = 0x18;

VkImageMemoryRequirementsInfo2.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  image: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
};
/** VkImageMemoryRequirementsInfo2KHR **/
class VkImageMemoryRequirementsInfo2KHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._image = null;
    this.sType = 0x3B9D0451;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.image !== void 0) this.image = opts.image;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null ) {
      let {sType} = value;
      
      switch (sType) {
          
        case 0x3B9D2B63:
          break;
        default:
          throw new TypeError("Invalid type for 'VkImageMemoryRequirementsInfo2KHR.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  get image() {
    return this._image;
  }
  set image(value) {
    if (value !== null ) {
      
      this._image = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._image = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } 
    
  }
  
};

VkImageMemoryRequirementsInfo2KHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkImageMemoryRequirementsInfo2KHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkImageMemoryRequirementsInfo2KHR.byteLength = 0x18;

VkImageMemoryRequirementsInfo2KHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  image: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
};
/** VkImageSparseMemoryRequirementsInfo2 **/
class VkImageSparseMemoryRequirementsInfo2 {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._image = null;
    this.sType = 0x3B9D0452;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.image !== void 0) this.image = opts.image;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkImageSparseMemoryRequirementsInfo2.pNext' isn't allowed to be filled");
  }
  get image() {
    return this._image;
  }
  set image(value) {
    if (value !== null ) {
      
      this._image = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._image = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } 
    
  }
  
};

VkImageSparseMemoryRequirementsInfo2.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkImageSparseMemoryRequirementsInfo2.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkImageSparseMemoryRequirementsInfo2.byteLength = 0x18;

VkImageSparseMemoryRequirementsInfo2.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  image: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
};
/** VkImageSparseMemoryRequirementsInfo2KHR **/
class VkImageSparseMemoryRequirementsInfo2KHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._image = null;
    this.sType = 0x3B9D0452;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.image !== void 0) this.image = opts.image;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkImageSparseMemoryRequirementsInfo2KHR.pNext' isn't allowed to be filled");
  }
  get image() {
    return this._image;
  }
  set image(value) {
    if (value !== null ) {
      
      this._image = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._image = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } 
    
  }
  
};

VkImageSparseMemoryRequirementsInfo2KHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkImageSparseMemoryRequirementsInfo2KHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkImageSparseMemoryRequirementsInfo2KHR.byteLength = 0x18;

VkImageSparseMemoryRequirementsInfo2KHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  image: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
};
/** VkMemoryRequirements2 **/
class VkMemoryRequirements2 {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x28);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._memoryRequirements = new VkMemoryRequirements({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x10 });
    this.sType = 0x3B9D0453;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null ) {
      let {sType} = value;
      
      switch (sType) {
          
        case 0x3B9CBA18:
          break;
        default:
          throw new TypeError("Invalid type for 'VkMemoryRequirements2.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  get memoryRequirements() {
    return this._memoryRequirements;
  }
  
};

VkMemoryRequirements2.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkMemoryRequirements2.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x28));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x28), 0x0);
  
  
  
  
};

VkMemoryRequirements2.byteLength = 0x28;

VkMemoryRequirements2.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  memoryRequirements: {
    byteOffset: 0x10,
    byteLength: 0x18
  },
};
/** VkMemoryRequirements2KHR **/
class VkMemoryRequirements2KHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x28);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._memoryRequirements = new VkMemoryRequirements({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x10 });
    this.sType = 0x3B9D0453;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null ) {
      let {sType} = value;
      
      switch (sType) {
          
        case 0x3B9CBA18:
          break;
        default:
          throw new TypeError("Invalid type for 'VkMemoryRequirements2KHR.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  get memoryRequirements() {
    return this._memoryRequirements;
  }
  
};

VkMemoryRequirements2KHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkMemoryRequirements2KHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x28));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x28), 0x0);
  
  
  
  
};

VkMemoryRequirements2KHR.byteLength = 0x28;

VkMemoryRequirements2KHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  memoryRequirements: {
    byteOffset: 0x10,
    byteLength: 0x18
  },
};
/** VkSparseImageMemoryRequirements2 **/
class VkSparseImageMemoryRequirements2 {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x40) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x40) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x40);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._memoryRequirements = new VkSparseImageMemoryRequirements({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x10 });
    this.sType = 0x3B9D0454;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkSparseImageMemoryRequirements2.pNext' isn't allowed to be filled");
  }
  get memoryRequirements() {
    return this._memoryRequirements;
  }
  
};

VkSparseImageMemoryRequirements2.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkSparseImageMemoryRequirements2.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x40));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x40), 0x0);
  
  
  
  
};

VkSparseImageMemoryRequirements2.byteLength = 0x40;

VkSparseImageMemoryRequirements2.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  memoryRequirements: {
    byteOffset: 0x10,
    byteLength: 0x30
  },
};
/** VkSparseImageMemoryRequirements2KHR **/
class VkSparseImageMemoryRequirements2KHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x40) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x40) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x40);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._memoryRequirements = new VkSparseImageMemoryRequirements({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x10 });
    this.sType = 0x3B9D0454;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkSparseImageMemoryRequirements2KHR.pNext' isn't allowed to be filled");
  }
  get memoryRequirements() {
    return this._memoryRequirements;
  }
  
};

VkSparseImageMemoryRequirements2KHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkSparseImageMemoryRequirements2KHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x40));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x40), 0x0);
  
  
  
  
};

VkSparseImageMemoryRequirements2KHR.byteLength = 0x40;

VkSparseImageMemoryRequirements2KHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  memoryRequirements: {
    byteOffset: 0x10,
    byteLength: 0x30
  },
};
/** VkPhysicalDevicePointClippingProperties **/
class VkPhysicalDevicePointClippingProperties {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9C9308;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDevicePointClippingProperties.pNext' isn't allowed to be filled");
  }
  get pointClippingBehavior() {
    return this.memoryViewInt32[0x4];
  }
  
};

VkPhysicalDevicePointClippingProperties.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDevicePointClippingProperties.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x18));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x18), 0x0);
  
  
};

VkPhysicalDevicePointClippingProperties.byteLength = 0x18;

VkPhysicalDevicePointClippingProperties.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  pointClippingBehavior: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkPhysicalDevicePointClippingPropertiesKHR **/
class VkPhysicalDevicePointClippingPropertiesKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9C9308;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDevicePointClippingPropertiesKHR.pNext' isn't allowed to be filled");
  }
  get pointClippingBehavior() {
    return this.memoryViewInt32[0x4];
  }
  
};

VkPhysicalDevicePointClippingPropertiesKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDevicePointClippingPropertiesKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x18));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x18), 0x0);
  
  
};

VkPhysicalDevicePointClippingPropertiesKHR.byteLength = 0x18;

VkPhysicalDevicePointClippingPropertiesKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  pointClippingBehavior: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkMemoryDedicatedRequirements **/
class VkMemoryDedicatedRequirements {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    this.sType = 0x3B9CBA18;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkMemoryDedicatedRequirements.pNext' isn't allowed to be filled");
  }
  get prefersDedicatedAllocation() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  get requiresDedicatedAllocation() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  
};

VkMemoryDedicatedRequirements.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkMemoryDedicatedRequirements.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x18));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x18), 0x0);
  
  
};

VkMemoryDedicatedRequirements.byteLength = 0x18;

VkMemoryDedicatedRequirements.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  prefersDedicatedAllocation: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  requiresDedicatedAllocation: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
};
/** VkMemoryDedicatedRequirementsKHR **/
class VkMemoryDedicatedRequirementsKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    this.sType = 0x3B9CBA18;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkMemoryDedicatedRequirementsKHR.pNext' isn't allowed to be filled");
  }
  get prefersDedicatedAllocation() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  get requiresDedicatedAllocation() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  
};

VkMemoryDedicatedRequirementsKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkMemoryDedicatedRequirementsKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x18));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x18), 0x0);
  
  
};

VkMemoryDedicatedRequirementsKHR.byteLength = 0x18;

VkMemoryDedicatedRequirementsKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  prefersDedicatedAllocation: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  requiresDedicatedAllocation: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
};
/** VkMemoryDedicatedAllocateInfo **/
class VkMemoryDedicatedAllocateInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._image = null;
    this._buffer = null;
    this.sType = 0x3B9CBA19;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.image !== void 0) this.image = opts.image;
      if (opts.buffer !== void 0) this.buffer = opts.buffer;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkMemoryDedicatedAllocateInfo.pNext' isn't allowed to be filled");
  }
  get image() {
    return this._image;
  }
  set image(value) {
    if (value !== null ) {
      
      this._image = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._image = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } 
    
  }
  get buffer() {
    return this._buffer;
  }
  set buffer(value) {
    if (value !== null ) {
      
      this._buffer = value;
      
      this.memoryViewBigInt64[0x3] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._buffer = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } 
    
  }
  
};

VkMemoryDedicatedAllocateInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkMemoryDedicatedAllocateInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkMemoryDedicatedAllocateInfo.byteLength = 0x20;

VkMemoryDedicatedAllocateInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  image: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
  buffer: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
};
/** VkMemoryDedicatedAllocateInfoKHR **/
class VkMemoryDedicatedAllocateInfoKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._image = null;
    this._buffer = null;
    this.sType = 0x3B9CBA19;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.image !== void 0) this.image = opts.image;
      if (opts.buffer !== void 0) this.buffer = opts.buffer;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkMemoryDedicatedAllocateInfoKHR.pNext' isn't allowed to be filled");
  }
  get image() {
    return this._image;
  }
  set image(value) {
    if (value !== null ) {
      
      this._image = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._image = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } 
    
  }
  get buffer() {
    return this._buffer;
  }
  set buffer(value) {
    if (value !== null ) {
      
      this._buffer = value;
      
      this.memoryViewBigInt64[0x3] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._buffer = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } 
    
  }
  
};

VkMemoryDedicatedAllocateInfoKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkMemoryDedicatedAllocateInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkMemoryDedicatedAllocateInfoKHR.byteLength = 0x20;

VkMemoryDedicatedAllocateInfoKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  image: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
  buffer: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
};
/** VkImageViewUsageCreateInfo **/
class VkImageViewUsageCreateInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9C930A;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.usage !== void 0) this.usage = opts.usage;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkImageViewUsageCreateInfo.pNext' isn't allowed to be filled");
  }
  get usage() {
    return this.memoryViewInt32[0x4];
  }
  set usage(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkImageViewUsageCreateInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkImageViewUsageCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkImageViewUsageCreateInfo.byteLength = 0x18;

VkImageViewUsageCreateInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  usage: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkImageViewUsageCreateInfoKHR **/
class VkImageViewUsageCreateInfoKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9C930A;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.usage !== void 0) this.usage = opts.usage;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkImageViewUsageCreateInfoKHR.pNext' isn't allowed to be filled");
  }
  get usage() {
    return this.memoryViewInt32[0x4];
  }
  set usage(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkImageViewUsageCreateInfoKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkImageViewUsageCreateInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkImageViewUsageCreateInfoKHR.byteLength = 0x18;

VkImageViewUsageCreateInfoKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  usage: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkPipelineTessellationDomainOriginStateCreateInfo **/
class VkPipelineTessellationDomainOriginStateCreateInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9C930B;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.domainOrigin !== void 0) this.domainOrigin = opts.domainOrigin;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPipelineTessellationDomainOriginStateCreateInfo.pNext' isn't allowed to be filled");
  }
  get domainOrigin() {
    return this.memoryViewInt32[0x4];
  }
  set domainOrigin(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkPipelineTessellationDomainOriginStateCreateInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPipelineTessellationDomainOriginStateCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPipelineTessellationDomainOriginStateCreateInfo.byteLength = 0x18;

VkPipelineTessellationDomainOriginStateCreateInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  domainOrigin: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkPipelineTessellationDomainOriginStateCreateInfoKHR **/
class VkPipelineTessellationDomainOriginStateCreateInfoKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9C930B;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.domainOrigin !== void 0) this.domainOrigin = opts.domainOrigin;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPipelineTessellationDomainOriginStateCreateInfoKHR.pNext' isn't allowed to be filled");
  }
  get domainOrigin() {
    return this.memoryViewInt32[0x4];
  }
  set domainOrigin(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkPipelineTessellationDomainOriginStateCreateInfoKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPipelineTessellationDomainOriginStateCreateInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPipelineTessellationDomainOriginStateCreateInfoKHR.byteLength = 0x18;

VkPipelineTessellationDomainOriginStateCreateInfoKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  domainOrigin: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkSamplerYcbcrConversionInfo **/
class VkSamplerYcbcrConversionInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._conversion = null;
    this.sType = 0x3B9D2B61;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.conversion !== void 0) this.conversion = opts.conversion;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkSamplerYcbcrConversionInfo.pNext' isn't allowed to be filled");
  }
  get conversion() {
    return this._conversion;
  }
  set conversion(value) {
    if (value !== null ) {
      
      this._conversion = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._conversion = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } 
    
  }
  
};

VkSamplerYcbcrConversionInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkSamplerYcbcrConversionInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkSamplerYcbcrConversionInfo.byteLength = 0x18;

VkSamplerYcbcrConversionInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  conversion: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
};
/** VkSamplerYcbcrConversionInfoKHR **/
class VkSamplerYcbcrConversionInfoKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._conversion = null;
    this.sType = 0x3B9D2B61;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.conversion !== void 0) this.conversion = opts.conversion;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkSamplerYcbcrConversionInfoKHR.pNext' isn't allowed to be filled");
  }
  get conversion() {
    return this._conversion;
  }
  set conversion(value) {
    if (value !== null ) {
      
      this._conversion = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._conversion = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } 
    
  }
  
};

VkSamplerYcbcrConversionInfoKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkSamplerYcbcrConversionInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkSamplerYcbcrConversionInfoKHR.byteLength = 0x18;

VkSamplerYcbcrConversionInfoKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  conversion: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
};
/** VkSamplerYcbcrConversionCreateInfo **/
class VkSamplerYcbcrConversionCreateInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x40) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x40) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x40) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x40);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    
    this._components = new VkComponentMapping({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x1C });
    
    
    
    
    this.sType = 0x3B9D2B60;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.format !== void 0) this.format = opts.format;
      if (opts.ycbcrModel !== void 0) this.ycbcrModel = opts.ycbcrModel;
      if (opts.ycbcrRange !== void 0) this.ycbcrRange = opts.ycbcrRange;
      if (opts.components !== void 0) this.components = opts.components;
      if (opts.xChromaOffset !== void 0) this.xChromaOffset = opts.xChromaOffset;
      if (opts.yChromaOffset !== void 0) this.yChromaOffset = opts.yChromaOffset;
      if (opts.chromaFilter !== void 0) this.chromaFilter = opts.chromaFilter;
      if (opts.forceExplicitReconstruction !== void 0) this.forceExplicitReconstruction = opts.forceExplicitReconstruction;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null ) {
      let {sType} = value;
      
      switch (sType) {
          
        case 0x3B9CC1ED:
          break;
        default:
          throw new TypeError("Invalid type for 'VkSamplerYcbcrConversionCreateInfo.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  get format() {
    return this.memoryViewInt32[0x4];
  }
  set format(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get ycbcrModel() {
    return this.memoryViewInt32[0x5];
  }
  set ycbcrModel(value) {
    
    this.memoryViewInt32[0x5] = value;
  }
  get ycbcrRange() {
    return this.memoryViewInt32[0x6];
  }
  set ycbcrRange(value) {
    
    this.memoryViewInt32[0x6] = value;
  }
  get components() {
    return this._components;
  }
  set components(value) {
    if (value !== null ) {
      value.flush();
      this._components = value;
      
      
    } else if (value === null) {
      this._components = null;
      
    } 
    
  }
  get xChromaOffset() {
    return this.memoryViewInt32[0xB];
  }
  set xChromaOffset(value) {
    
    this.memoryViewInt32[0xB] = value;
  }
  get yChromaOffset() {
    return this.memoryViewInt32[0xC];
  }
  set yChromaOffset(value) {
    
    this.memoryViewInt32[0xC] = value;
  }
  get chromaFilter() {
    return this.memoryViewInt32[0xD];
  }
  set chromaFilter(value) {
    
    this.memoryViewInt32[0xD] = value;
  }
  get forceExplicitReconstruction() {
    return this.memoryViewUint32[0xE] !== 0;
  }
  set forceExplicitReconstruction(value) {
    this.memoryViewUint32[0xE] = value | 0;
  }
  
};

VkSamplerYcbcrConversionCreateInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._components !== null) {
    this._components.flush();
    if (this.memoryBuffer !== this._components.memoryBuffer) {
      let srcView = new Uint8Array(this._components.memoryBuffer);
      let dstView = new Uint8Array(this.memoryBuffer);
      dstView.set(srcView, 0x1C);
      
    }
  }
  
  return true;
};

VkSamplerYcbcrConversionCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
};

VkSamplerYcbcrConversionCreateInfo.byteLength = 0x40;

VkSamplerYcbcrConversionCreateInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  format: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  ycbcrModel: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  ycbcrRange: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
  components: {
    byteOffset: 0x1C,
    byteLength: 0x10
  },
  xChromaOffset: {
    byteOffset: 0x2C,
    byteLength: 0x4
  },
  yChromaOffset: {
    byteOffset: 0x30,
    byteLength: 0x4
  },
  chromaFilter: {
    byteOffset: 0x34,
    byteLength: 0x4
  },
  forceExplicitReconstruction: {
    byteOffset: 0x38,
    byteLength: 0x4
  },
};
/** VkSamplerYcbcrConversionCreateInfoKHR **/
class VkSamplerYcbcrConversionCreateInfoKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x40) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x40) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x40) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x40);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    
    this._components = new VkComponentMapping({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x1C });
    
    
    
    
    this.sType = 0x3B9D2B60;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.format !== void 0) this.format = opts.format;
      if (opts.ycbcrModel !== void 0) this.ycbcrModel = opts.ycbcrModel;
      if (opts.ycbcrRange !== void 0) this.ycbcrRange = opts.ycbcrRange;
      if (opts.components !== void 0) this.components = opts.components;
      if (opts.xChromaOffset !== void 0) this.xChromaOffset = opts.xChromaOffset;
      if (opts.yChromaOffset !== void 0) this.yChromaOffset = opts.yChromaOffset;
      if (opts.chromaFilter !== void 0) this.chromaFilter = opts.chromaFilter;
      if (opts.forceExplicitReconstruction !== void 0) this.forceExplicitReconstruction = opts.forceExplicitReconstruction;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null ) {
      let {sType} = value;
      
      switch (sType) {
          
        case 0x3B9CC1ED:
          break;
        default:
          throw new TypeError("Invalid type for 'VkSamplerYcbcrConversionCreateInfoKHR.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  get format() {
    return this.memoryViewInt32[0x4];
  }
  set format(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get ycbcrModel() {
    return this.memoryViewInt32[0x5];
  }
  set ycbcrModel(value) {
    
    this.memoryViewInt32[0x5] = value;
  }
  get ycbcrRange() {
    return this.memoryViewInt32[0x6];
  }
  set ycbcrRange(value) {
    
    this.memoryViewInt32[0x6] = value;
  }
  get components() {
    return this._components;
  }
  set components(value) {
    if (value !== null ) {
      value.flush();
      this._components = value;
      
      
    } else if (value === null) {
      this._components = null;
      
    } 
    
  }
  get xChromaOffset() {
    return this.memoryViewInt32[0xB];
  }
  set xChromaOffset(value) {
    
    this.memoryViewInt32[0xB] = value;
  }
  get yChromaOffset() {
    return this.memoryViewInt32[0xC];
  }
  set yChromaOffset(value) {
    
    this.memoryViewInt32[0xC] = value;
  }
  get chromaFilter() {
    return this.memoryViewInt32[0xD];
  }
  set chromaFilter(value) {
    
    this.memoryViewInt32[0xD] = value;
  }
  get forceExplicitReconstruction() {
    return this.memoryViewUint32[0xE] !== 0;
  }
  set forceExplicitReconstruction(value) {
    this.memoryViewUint32[0xE] = value | 0;
  }
  
};

VkSamplerYcbcrConversionCreateInfoKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._components !== null) {
    this._components.flush();
    if (this.memoryBuffer !== this._components.memoryBuffer) {
      let srcView = new Uint8Array(this._components.memoryBuffer);
      let dstView = new Uint8Array(this.memoryBuffer);
      dstView.set(srcView, 0x1C);
      
    }
  }
  
  return true;
};

VkSamplerYcbcrConversionCreateInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
};

VkSamplerYcbcrConversionCreateInfoKHR.byteLength = 0x40;

VkSamplerYcbcrConversionCreateInfoKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  format: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  ycbcrModel: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  ycbcrRange: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
  components: {
    byteOffset: 0x1C,
    byteLength: 0x10
  },
  xChromaOffset: {
    byteOffset: 0x2C,
    byteLength: 0x4
  },
  yChromaOffset: {
    byteOffset: 0x30,
    byteLength: 0x4
  },
  chromaFilter: {
    byteOffset: 0x34,
    byteLength: 0x4
  },
  forceExplicitReconstruction: {
    byteOffset: 0x38,
    byteLength: 0x4
  },
};
/** VkBindImagePlaneMemoryInfo **/
class VkBindImagePlaneMemoryInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9D2B62;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.planeAspect !== void 0) this.planeAspect = opts.planeAspect;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkBindImagePlaneMemoryInfo.pNext' isn't allowed to be filled");
  }
  get planeAspect() {
    return this.memoryViewInt32[0x4];
  }
  set planeAspect(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkBindImagePlaneMemoryInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkBindImagePlaneMemoryInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkBindImagePlaneMemoryInfo.byteLength = 0x18;

VkBindImagePlaneMemoryInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  planeAspect: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkBindImagePlaneMemoryInfoKHR **/
class VkBindImagePlaneMemoryInfoKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9D2B62;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.planeAspect !== void 0) this.planeAspect = opts.planeAspect;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkBindImagePlaneMemoryInfoKHR.pNext' isn't allowed to be filled");
  }
  get planeAspect() {
    return this.memoryViewInt32[0x4];
  }
  set planeAspect(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkBindImagePlaneMemoryInfoKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkBindImagePlaneMemoryInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkBindImagePlaneMemoryInfoKHR.byteLength = 0x18;

VkBindImagePlaneMemoryInfoKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  planeAspect: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkImagePlaneMemoryRequirementsInfo **/
class VkImagePlaneMemoryRequirementsInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9D2B63;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.planeAspect !== void 0) this.planeAspect = opts.planeAspect;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkImagePlaneMemoryRequirementsInfo.pNext' isn't allowed to be filled");
  }
  get planeAspect() {
    return this.memoryViewInt32[0x4];
  }
  set planeAspect(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkImagePlaneMemoryRequirementsInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkImagePlaneMemoryRequirementsInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkImagePlaneMemoryRequirementsInfo.byteLength = 0x18;

VkImagePlaneMemoryRequirementsInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  planeAspect: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkImagePlaneMemoryRequirementsInfoKHR **/
class VkImagePlaneMemoryRequirementsInfoKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9D2B63;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.planeAspect !== void 0) this.planeAspect = opts.planeAspect;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkImagePlaneMemoryRequirementsInfoKHR.pNext' isn't allowed to be filled");
  }
  get planeAspect() {
    return this.memoryViewInt32[0x4];
  }
  set planeAspect(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkImagePlaneMemoryRequirementsInfoKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkImagePlaneMemoryRequirementsInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkImagePlaneMemoryRequirementsInfoKHR.byteLength = 0x18;

VkImagePlaneMemoryRequirementsInfoKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  planeAspect: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceSamplerYcbcrConversionFeatures **/
class VkPhysicalDeviceSamplerYcbcrConversionFeatures {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9D2B64;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.samplerYcbcrConversion !== void 0) this.samplerYcbcrConversion = opts.samplerYcbcrConversion;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceSamplerYcbcrConversionFeatures.pNext' isn't allowed to be filled");
  }
  get samplerYcbcrConversion() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set samplerYcbcrConversion(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  
};

VkPhysicalDeviceSamplerYcbcrConversionFeatures.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceSamplerYcbcrConversionFeatures.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPhysicalDeviceSamplerYcbcrConversionFeatures.byteLength = 0x18;

VkPhysicalDeviceSamplerYcbcrConversionFeatures.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  samplerYcbcrConversion: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR **/
class VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9D2B64;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.samplerYcbcrConversion !== void 0) this.samplerYcbcrConversion = opts.samplerYcbcrConversion;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR.pNext' isn't allowed to be filled");
  }
  get samplerYcbcrConversion() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set samplerYcbcrConversion(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  
};

VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR.byteLength = 0x18;

VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  samplerYcbcrConversion: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkSamplerYcbcrConversionImageFormatProperties **/
class VkSamplerYcbcrConversionImageFormatProperties {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9D2B65;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkSamplerYcbcrConversionImageFormatProperties.pNext' isn't allowed to be filled");
  }
  get combinedImageSamplerDescriptorCount() {
    return this.memoryViewUint32[0x4];
  }
  
};

VkSamplerYcbcrConversionImageFormatProperties.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkSamplerYcbcrConversionImageFormatProperties.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x18));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x18), 0x0);
  
  
};

VkSamplerYcbcrConversionImageFormatProperties.byteLength = 0x18;

VkSamplerYcbcrConversionImageFormatProperties.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  combinedImageSamplerDescriptorCount: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkSamplerYcbcrConversionImageFormatPropertiesKHR **/
class VkSamplerYcbcrConversionImageFormatPropertiesKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9D2B65;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkSamplerYcbcrConversionImageFormatPropertiesKHR.pNext' isn't allowed to be filled");
  }
  get combinedImageSamplerDescriptorCount() {
    return this.memoryViewUint32[0x4];
  }
  
};

VkSamplerYcbcrConversionImageFormatPropertiesKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkSamplerYcbcrConversionImageFormatPropertiesKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x18));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x18), 0x0);
  
  
};

VkSamplerYcbcrConversionImageFormatPropertiesKHR.byteLength = 0x18;

VkSamplerYcbcrConversionImageFormatPropertiesKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  combinedImageSamplerDescriptorCount: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkTextureLODGatherFormatPropertiesAMD **/
class VkTextureLODGatherFormatPropertiesAMD {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9B6A28;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkTextureLODGatherFormatPropertiesAMD.pNext' isn't allowed to be filled");
  }
  get supportsTextureGatherLODBiasAMD() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  
};

VkTextureLODGatherFormatPropertiesAMD.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkTextureLODGatherFormatPropertiesAMD.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x18));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x18), 0x0);
  
  
};

VkTextureLODGatherFormatPropertiesAMD.byteLength = 0x18;

VkTextureLODGatherFormatPropertiesAMD.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  supportsTextureGatherLODBiasAMD: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkConditionalRenderingBeginInfoEXT **/
class VkConditionalRenderingBeginInfoEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x28);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._buffer = null;
    
    
    this.sType = 0x3B9C066A;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.buffer !== void 0) this.buffer = opts.buffer;
      if (opts.offset !== void 0) this.offset = opts.offset;
      if (opts.flags !== void 0) this.flags = opts.flags;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkConditionalRenderingBeginInfoEXT.pNext' isn't allowed to be filled");
  }
  get buffer() {
    return this._buffer;
  }
  set buffer(value) {
    if (value !== null ) {
      
      this._buffer = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._buffer = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } 
    
  }
  get offset() {
    return this.memoryViewBigUint64[0x3];
  }
  set offset(value) {
    
    this.memoryViewBigUint64[0x3] = BigInt(value);
  }
  get flags() {
    return this.memoryViewInt32[0x8];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x8] = value;
  }
  
};

VkConditionalRenderingBeginInfoEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkConditionalRenderingBeginInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkConditionalRenderingBeginInfoEXT.byteLength = 0x28;

VkConditionalRenderingBeginInfoEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  buffer: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
  offset: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
  flags: {
    byteOffset: 0x20,
    byteLength: 0x4
  },
};
/** VkProtectedSubmitInfo **/
class VkProtectedSubmitInfo {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = VkStructureType.VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.protectedSubmit !== void 0) this.protectedSubmit = opts.protectedSubmit;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkProtectedSubmitInfo.pNext' isn't allowed to be filled");
  }
  get protectedSubmit() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set protectedSubmit(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  
};

VkProtectedSubmitInfo.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkProtectedSubmitInfo.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkProtectedSubmitInfo.byteLength = 0x18;

VkProtectedSubmitInfo.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  protectedSubmit: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceProtectedMemoryFeatures **/
class VkPhysicalDeviceProtectedMemoryFeatures {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.protectedMemory !== void 0) this.protectedMemory = opts.protectedMemory;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceProtectedMemoryFeatures.pNext' isn't allowed to be filled");
  }
  get protectedMemory() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set protectedMemory(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  
};

VkPhysicalDeviceProtectedMemoryFeatures.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceProtectedMemoryFeatures.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPhysicalDeviceProtectedMemoryFeatures.byteLength = 0x18;

VkPhysicalDeviceProtectedMemoryFeatures.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  protectedMemory: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceProtectedMemoryProperties **/
class VkPhysicalDeviceProtectedMemoryProperties {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceProtectedMemoryProperties.pNext' isn't allowed to be filled");
  }
  get protectedNoFault() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  
};

VkPhysicalDeviceProtectedMemoryProperties.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceProtectedMemoryProperties.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x18));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x18), 0x0);
  
  
};

VkPhysicalDeviceProtectedMemoryProperties.byteLength = 0x18;

VkPhysicalDeviceProtectedMemoryProperties.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  protectedNoFault: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkDeviceQueueInfo2 **/
class VkDeviceQueueInfo2 {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    
    this.sType = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.queueFamilyIndex !== void 0) this.queueFamilyIndex = opts.queueFamilyIndex;
      if (opts.queueIndex !== void 0) this.queueIndex = opts.queueIndex;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDeviceQueueInfo2.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get queueFamilyIndex() {
    return this.memoryViewUint32[0x5];
  }
  set queueFamilyIndex(value) {
    
    this.memoryViewUint32[0x5] = value;
  }
  get queueIndex() {
    return this.memoryViewUint32[0x6];
  }
  set queueIndex(value) {
    
    this.memoryViewUint32[0x6] = value;
  }
  
};

VkDeviceQueueInfo2.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDeviceQueueInfo2.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkDeviceQueueInfo2.byteLength = 0x20;

VkDeviceQueueInfo2.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  flags: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  queueFamilyIndex: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  queueIndex: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
};
/** VkPipelineCoverageToColorStateCreateInfoNV **/
class VkPipelineCoverageToColorStateCreateInfoNV {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    
    this.sType = 0x3B9D1008;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.coverageToColorEnable !== void 0) this.coverageToColorEnable = opts.coverageToColorEnable;
      if (opts.coverageToColorLocation !== void 0) this.coverageToColorLocation = opts.coverageToColorLocation;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPipelineCoverageToColorStateCreateInfoNV.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get coverageToColorEnable() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  set coverageToColorEnable(value) {
    this.memoryViewUint32[0x5] = value | 0;
  }
  get coverageToColorLocation() {
    return this.memoryViewUint32[0x6];
  }
  set coverageToColorLocation(value) {
    
    this.memoryViewUint32[0x6] = value;
  }
  
};

VkPipelineCoverageToColorStateCreateInfoNV.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPipelineCoverageToColorStateCreateInfoNV.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPipelineCoverageToColorStateCreateInfoNV.byteLength = 0x20;

VkPipelineCoverageToColorStateCreateInfoNV.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  flags: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  coverageToColorEnable: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  coverageToColorLocation: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT **/
class VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    this.sType = 0x3B9CC5D0;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT.pNext' isn't allowed to be filled");
  }
  get filterMinmaxSingleComponentFormats() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  get filterMinmaxImageComponentMapping() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  
};

VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x18));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x18), 0x0);
  
  
};

VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT.byteLength = 0x18;

VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  filterMinmaxSingleComponentFormats: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  filterMinmaxImageComponentMapping: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
};
/** VkSampleLocationEXT **/
class VkSampleLocationEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewFloat32 = new Float32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x8) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x8);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewFloat32 = new Float32Array(this.memoryBuffer);

    }
    
    
    
    if (typeof opts === "object") {
      if (opts.x !== void 0) this.x = opts.x;
      if (opts.y !== void 0) this.y = opts.y;
      
    }
  }
  get x() {
    return this.memoryViewFloat32[0x0];
  }
  set x(value) {
    
    this.memoryViewFloat32[0x0] = value;
  }
  get y() {
    return this.memoryViewFloat32[0x1];
  }
  set y(value) {
    
    this.memoryViewFloat32[0x1] = value;
  }
  
};

VkSampleLocationEXT.prototype.flush = function flush() {
  
  return true;
};

VkSampleLocationEXT.prototype.reflect = function reflect(memoryAddress) {
  
};

VkSampleLocationEXT.byteLength = 0x8;

VkSampleLocationEXT.memoryLayout = {
  x: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  y: {
    byteOffset: 0x4,
    byteLength: 0x4
  },
};
/** VkSampleLocationsInfoEXT **/
class VkSampleLocationsInfoEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x28);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this._sampleLocationGridSize = new VkExtent2D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x14 });
    
    this._pSampleLocations = null;
    this._pSampleLocationsNative = null;
    this.sType = 0x3B9CF898;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.sampleLocationsPerPixel !== void 0) this.sampleLocationsPerPixel = opts.sampleLocationsPerPixel;
      if (opts.sampleLocationGridSize !== void 0) this.sampleLocationGridSize = opts.sampleLocationGridSize;
      if (opts.sampleLocationsCount !== void 0) this.sampleLocationsCount = opts.sampleLocationsCount;
      if (opts.pSampleLocations !== void 0) this.pSampleLocations = opts.pSampleLocations;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkSampleLocationsInfoEXT.pNext' isn't allowed to be filled");
  }
  get sampleLocationsPerPixel() {
    return this.memoryViewInt32[0x4];
  }
  set sampleLocationsPerPixel(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get sampleLocationGridSize() {
    return this._sampleLocationGridSize;
  }
  set sampleLocationGridSize(value) {
    if (value !== null ) {
      value.flush();
      this._sampleLocationGridSize = value;
      
      
    } else if (value === null) {
      this._sampleLocationGridSize = null;
      
    } 
    
  }
  get sampleLocationsCount() {
    return this.memoryViewUint32[0x7];
  }
  set sampleLocationsCount(value) {
    
    this.memoryViewUint32[0x7] = value;
  }
  get pSampleLocations() {
    return this._pSampleLocations;
  }
  set pSampleLocations(value) {
    if (value !== null ) {
      this._pSampleLocations = value;
    } else if (value === null) {
      this._pSampleLocations = null;
    } 
    
  }
  
};

VkSampleLocationsInfoEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._sampleLocationGridSize !== null) {
    this._sampleLocationGridSize.flush();
    if (this.memoryBuffer !== this._sampleLocationGridSize.memoryBuffer) {
      let srcView = new Uint8Array(this._sampleLocationGridSize.memoryBuffer);
      let dstView = new Uint8Array(this.memoryBuffer);
      dstView.set(srcView, 0x14);
      
    }
  }
  
  
  if (this._pSampleLocations !== null) {
    let array = this._pSampleLocations;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pSampleLocationsNative = nativeArray;
    this.memoryViewBigInt64[0x4] = nativeArray.address;
  }
  
  return true;
};

VkSampleLocationsInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
  
  
};

VkSampleLocationsInfoEXT.byteLength = 0x28;

VkSampleLocationsInfoEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  sampleLocationsPerPixel: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  sampleLocationGridSize: {
    byteOffset: 0x14,
    byteLength: 0x8
  },
  sampleLocationsCount: {
    byteOffset: 0x1C,
    byteLength: 0x4
  },
  pSampleLocations: {
    byteOffset: 0x20,
    byteLength: 0x8
  },
};
/** VkAttachmentSampleLocationsEXT **/
class VkAttachmentSampleLocationsEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x30) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x30);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._sampleLocationsInfo = new VkSampleLocationsInfoEXT({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x8 });
    
    if (typeof opts === "object") {
      if (opts.attachmentIndex !== void 0) this.attachmentIndex = opts.attachmentIndex;
      if (opts.sampleLocationsInfo !== void 0) this.sampleLocationsInfo = opts.sampleLocationsInfo;
      
    }
  }
  get attachmentIndex() {
    return this.memoryViewUint32[0x0];
  }
  set attachmentIndex(value) {
    
    this.memoryViewUint32[0x0] = value;
  }
  get sampleLocationsInfo() {
    return this._sampleLocationsInfo;
  }
  set sampleLocationsInfo(value) {
    if (value !== null ) {
      value.flush();
      this._sampleLocationsInfo = value;
      
      
    } else if (value === null) {
      this._sampleLocationsInfo = null;
      
    } 
    
  }
  
};

VkAttachmentSampleLocationsEXT.prototype.flush = function flush() {
  
  
  if (this._sampleLocationsInfo !== null) {
    this._sampleLocationsInfo.flush();
    if (this.memoryBuffer !== this._sampleLocationsInfo.memoryBuffer) {
      let srcView = new Uint8Array(this._sampleLocationsInfo.memoryBuffer);
      let dstView = new Uint8Array(this.memoryBuffer);
      dstView.set(srcView, 0x8);
      
    }
  }
  
  return true;
};

VkAttachmentSampleLocationsEXT.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkAttachmentSampleLocationsEXT.byteLength = 0x30;

VkAttachmentSampleLocationsEXT.memoryLayout = {
  attachmentIndex: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  sampleLocationsInfo: {
    byteOffset: 0x8,
    byteLength: 0x28
  },
};
/** VkSubpassSampleLocationsEXT **/
class VkSubpassSampleLocationsEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x30) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x30);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._sampleLocationsInfo = new VkSampleLocationsInfoEXT({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x8 });
    
    if (typeof opts === "object") {
      if (opts.subpassIndex !== void 0) this.subpassIndex = opts.subpassIndex;
      if (opts.sampleLocationsInfo !== void 0) this.sampleLocationsInfo = opts.sampleLocationsInfo;
      
    }
  }
  get subpassIndex() {
    return this.memoryViewUint32[0x0];
  }
  set subpassIndex(value) {
    
    this.memoryViewUint32[0x0] = value;
  }
  get sampleLocationsInfo() {
    return this._sampleLocationsInfo;
  }
  set sampleLocationsInfo(value) {
    if (value !== null ) {
      value.flush();
      this._sampleLocationsInfo = value;
      
      
    } else if (value === null) {
      this._sampleLocationsInfo = null;
      
    } 
    
  }
  
};

VkSubpassSampleLocationsEXT.prototype.flush = function flush() {
  
  
  if (this._sampleLocationsInfo !== null) {
    this._sampleLocationsInfo.flush();
    if (this.memoryBuffer !== this._sampleLocationsInfo.memoryBuffer) {
      let srcView = new Uint8Array(this._sampleLocationsInfo.memoryBuffer);
      let dstView = new Uint8Array(this.memoryBuffer);
      dstView.set(srcView, 0x8);
      
    }
  }
  
  return true;
};

VkSubpassSampleLocationsEXT.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkSubpassSampleLocationsEXT.byteLength = 0x30;

VkSubpassSampleLocationsEXT.memoryLayout = {
  subpassIndex: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  sampleLocationsInfo: {
    byteOffset: 0x8,
    byteLength: 0x28
  },
};
/** VkRenderPassSampleLocationsBeginInfoEXT **/
class VkRenderPassSampleLocationsBeginInfoEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x30) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x30) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x30) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x30);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this._pAttachmentInitialSampleLocations = null;
    this._pAttachmentInitialSampleLocationsNative = null;
    
    this._pPostSubpassSampleLocations = null;
    this._pPostSubpassSampleLocationsNative = null;
    this.sType = 0x3B9CF899;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.attachmentInitialSampleLocationsCount !== void 0) this.attachmentInitialSampleLocationsCount = opts.attachmentInitialSampleLocationsCount;
      if (opts.pAttachmentInitialSampleLocations !== void 0) this.pAttachmentInitialSampleLocations = opts.pAttachmentInitialSampleLocations;
      if (opts.postSubpassSampleLocationsCount !== void 0) this.postSubpassSampleLocationsCount = opts.postSubpassSampleLocationsCount;
      if (opts.pPostSubpassSampleLocations !== void 0) this.pPostSubpassSampleLocations = opts.pPostSubpassSampleLocations;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkRenderPassSampleLocationsBeginInfoEXT.pNext' isn't allowed to be filled");
  }
  get attachmentInitialSampleLocationsCount() {
    return this.memoryViewUint32[0x4];
  }
  set attachmentInitialSampleLocationsCount(value) {
    
    this.memoryViewUint32[0x4] = value;
  }
  get pAttachmentInitialSampleLocations() {
    return this._pAttachmentInitialSampleLocations;
  }
  set pAttachmentInitialSampleLocations(value) {
    if (value !== null ) {
      this._pAttachmentInitialSampleLocations = value;
    } else if (value === null) {
      this._pAttachmentInitialSampleLocations = null;
    } 
    
  }
  get postSubpassSampleLocationsCount() {
    return this.memoryViewUint32[0x8];
  }
  set postSubpassSampleLocationsCount(value) {
    
    this.memoryViewUint32[0x8] = value;
  }
  get pPostSubpassSampleLocations() {
    return this._pPostSubpassSampleLocations;
  }
  set pPostSubpassSampleLocations(value) {
    if (value !== null ) {
      this._pPostSubpassSampleLocations = value;
    } else if (value === null) {
      this._pPostSubpassSampleLocations = null;
    } 
    
  }
  
};

VkRenderPassSampleLocationsBeginInfoEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pAttachmentInitialSampleLocations !== null) {
    let array = this._pAttachmentInitialSampleLocations;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pAttachmentInitialSampleLocationsNative = nativeArray;
    this.memoryViewBigInt64[0x3] = nativeArray.address;
  }
  
  
  if (this._pPostSubpassSampleLocations !== null) {
    let array = this._pPostSubpassSampleLocations;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pPostSubpassSampleLocationsNative = nativeArray;
    this.memoryViewBigInt64[0x5] = nativeArray.address;
  }
  
  return true;
};

VkRenderPassSampleLocationsBeginInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
  
  
};

VkRenderPassSampleLocationsBeginInfoEXT.byteLength = 0x30;

VkRenderPassSampleLocationsBeginInfoEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  attachmentInitialSampleLocationsCount: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  pAttachmentInitialSampleLocations: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
  postSubpassSampleLocationsCount: {
    byteOffset: 0x20,
    byteLength: 0x4
  },
  pPostSubpassSampleLocations: {
    byteOffset: 0x28,
    byteLength: 0x8
  },
};
/** VkPipelineSampleLocationsStateCreateInfoEXT **/
class VkPipelineSampleLocationsStateCreateInfoEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x40) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x40) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x40) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x40);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this._sampleLocationsInfo = new VkSampleLocationsInfoEXT({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x18 });
    this.sType = 0x3B9CF89A;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.sampleLocationsEnable !== void 0) this.sampleLocationsEnable = opts.sampleLocationsEnable;
      if (opts.sampleLocationsInfo !== void 0) this.sampleLocationsInfo = opts.sampleLocationsInfo;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPipelineSampleLocationsStateCreateInfoEXT.pNext' isn't allowed to be filled");
  }
  get sampleLocationsEnable() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set sampleLocationsEnable(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  get sampleLocationsInfo() {
    return this._sampleLocationsInfo;
  }
  set sampleLocationsInfo(value) {
    if (value !== null ) {
      value.flush();
      this._sampleLocationsInfo = value;
      
      
    } else if (value === null) {
      this._sampleLocationsInfo = null;
      
    } 
    
  }
  
};

VkPipelineSampleLocationsStateCreateInfoEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._sampleLocationsInfo !== null) {
    this._sampleLocationsInfo.flush();
    if (this.memoryBuffer !== this._sampleLocationsInfo.memoryBuffer) {
      let srcView = new Uint8Array(this._sampleLocationsInfo.memoryBuffer);
      let dstView = new Uint8Array(this.memoryBuffer);
      dstView.set(srcView, 0x18);
      
    }
  }
  
  return true;
};

VkPipelineSampleLocationsStateCreateInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
};

VkPipelineSampleLocationsStateCreateInfoEXT.byteLength = 0x40;

VkPipelineSampleLocationsStateCreateInfoEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  sampleLocationsEnable: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  sampleLocationsInfo: {
    byteOffset: 0x18,
    byteLength: 0x28
  },
};
/** VkPhysicalDeviceSampleLocationsPropertiesEXT **/
class VkPhysicalDeviceSampleLocationsPropertiesEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x30) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x30) / 0x8);
      this.memoryViewFloat32 = new Float32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x30) / 0x4);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x30) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x30);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewFloat32 = new Float32Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this._maxSampleLocationGridSize = new VkExtent2D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x14 });
    this._sampleLocationCoordinateRange = [...Array(2)].fill(0x0);
    
    
    this.sType = 0x3B9CF89B;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceSampleLocationsPropertiesEXT.pNext' isn't allowed to be filled");
  }
  get sampleLocationSampleCounts() {
    return this.memoryViewInt32[0x4];
  }
  get maxSampleLocationGridSize() {
    return this._maxSampleLocationGridSize;
  }
  get sampleLocationCoordinateRange() {
    return [
      this.memoryViewFloat32[0x7],
      this.memoryViewFloat32[0x8]
    ];
  }
  get sampleLocationSubPixelBits() {
    return this.memoryViewUint32[0x9];
  }
  get variableSampleLocations() {
    return this.memoryViewUint32[0xA] !== 0;
  }
  
};

VkPhysicalDeviceSampleLocationsPropertiesEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceSampleLocationsPropertiesEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x30));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x30), 0x0);
  
  
  
  
  
  
};

VkPhysicalDeviceSampleLocationsPropertiesEXT.byteLength = 0x30;

VkPhysicalDeviceSampleLocationsPropertiesEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  sampleLocationSampleCounts: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  maxSampleLocationGridSize: {
    byteOffset: 0x14,
    byteLength: 0x8
  },
  sampleLocationCoordinateRange: {
    byteOffset: 0x1C,
    byteLength: 0x8
  },
  sampleLocationSubPixelBits: {
    byteOffset: 0x24,
    byteLength: 0x4
  },
  variableSampleLocations: {
    byteOffset: 0x28,
    byteLength: 0x4
  },
};
/** VkMultisamplePropertiesEXT **/
class VkMultisamplePropertiesEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._maxSampleLocationGridSize = new VkExtent2D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x10 });
    this.sType = 0x3B9CF89C;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkMultisamplePropertiesEXT.pNext' isn't allowed to be filled");
  }
  get maxSampleLocationGridSize() {
    return this._maxSampleLocationGridSize;
  }
  
};

VkMultisamplePropertiesEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkMultisamplePropertiesEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x18));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x18), 0x0);
  
  
  
  
};

VkMultisamplePropertiesEXT.byteLength = 0x18;

VkMultisamplePropertiesEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  maxSampleLocationGridSize: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
};
/** VkSamplerReductionModeCreateInfoEXT **/
class VkSamplerReductionModeCreateInfoEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9CC5D1;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.reductionMode !== void 0) this.reductionMode = opts.reductionMode;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkSamplerReductionModeCreateInfoEXT.pNext' isn't allowed to be filled");
  }
  get reductionMode() {
    return this.memoryViewInt32[0x4];
  }
  set reductionMode(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkSamplerReductionModeCreateInfoEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkSamplerReductionModeCreateInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkSamplerReductionModeCreateInfoEXT.byteLength = 0x18;

VkSamplerReductionModeCreateInfoEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  reductionMode: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT **/
class VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9D0C20;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.advancedBlendCoherentOperations !== void 0) this.advancedBlendCoherentOperations = opts.advancedBlendCoherentOperations;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT.pNext' isn't allowed to be filled");
  }
  get advancedBlendCoherentOperations() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set advancedBlendCoherentOperations(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  
};

VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT.byteLength = 0x18;

VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  advancedBlendCoherentOperations: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT **/
class VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x28);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    
    
    
    
    this.sType = 0x3B9D0C21;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.pNext' isn't allowed to be filled");
  }
  get advancedBlendMaxColorAttachments() {
    return this.memoryViewUint32[0x4];
  }
  get advancedBlendIndependentBlend() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  get advancedBlendNonPremultipliedSrcColor() {
    return this.memoryViewUint32[0x6] !== 0;
  }
  get advancedBlendNonPremultipliedDstColor() {
    return this.memoryViewUint32[0x7] !== 0;
  }
  get advancedBlendCorrelatedOverlap() {
    return this.memoryViewUint32[0x8] !== 0;
  }
  get advancedBlendAllOperations() {
    return this.memoryViewUint32[0x9] !== 0;
  }
  
};

VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x28));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x28), 0x0);
  
  
};

VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.byteLength = 0x28;

VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  advancedBlendMaxColorAttachments: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  advancedBlendIndependentBlend: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  advancedBlendNonPremultipliedSrcColor: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
  advancedBlendNonPremultipliedDstColor: {
    byteOffset: 0x1C,
    byteLength: 0x4
  },
  advancedBlendCorrelatedOverlap: {
    byteOffset: 0x20,
    byteLength: 0x4
  },
  advancedBlendAllOperations: {
    byteOffset: 0x24,
    byteLength: 0x4
  },
};
/** VkPipelineColorBlendAdvancedStateCreateInfoEXT **/
class VkPipelineColorBlendAdvancedStateCreateInfoEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    
    this.sType = 0x3B9D0C22;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.srcPremultiplied !== void 0) this.srcPremultiplied = opts.srcPremultiplied;
      if (opts.dstPremultiplied !== void 0) this.dstPremultiplied = opts.dstPremultiplied;
      if (opts.blendOverlap !== void 0) this.blendOverlap = opts.blendOverlap;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPipelineColorBlendAdvancedStateCreateInfoEXT.pNext' isn't allowed to be filled");
  }
  get srcPremultiplied() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set srcPremultiplied(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  get dstPremultiplied() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  set dstPremultiplied(value) {
    this.memoryViewUint32[0x5] = value | 0;
  }
  get blendOverlap() {
    return this.memoryViewInt32[0x6];
  }
  set blendOverlap(value) {
    
    this.memoryViewInt32[0x6] = value;
  }
  
};

VkPipelineColorBlendAdvancedStateCreateInfoEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPipelineColorBlendAdvancedStateCreateInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPipelineColorBlendAdvancedStateCreateInfoEXT.byteLength = 0x20;

VkPipelineColorBlendAdvancedStateCreateInfoEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  srcPremultiplied: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  dstPremultiplied: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  blendOverlap: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceInlineUniformBlockFeaturesEXT **/
class VkPhysicalDeviceInlineUniformBlockFeaturesEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    this.sType = 0x3B9CE510;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.inlineUniformBlock !== void 0) this.inlineUniformBlock = opts.inlineUniformBlock;
      if (opts.descriptorBindingInlineUniformBlockUpdateAfterBind !== void 0) this.descriptorBindingInlineUniformBlockUpdateAfterBind = opts.descriptorBindingInlineUniformBlockUpdateAfterBind;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceInlineUniformBlockFeaturesEXT.pNext' isn't allowed to be filled");
  }
  get inlineUniformBlock() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set inlineUniformBlock(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  get descriptorBindingInlineUniformBlockUpdateAfterBind() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  set descriptorBindingInlineUniformBlockUpdateAfterBind(value) {
    this.memoryViewUint32[0x5] = value | 0;
  }
  
};

VkPhysicalDeviceInlineUniformBlockFeaturesEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceInlineUniformBlockFeaturesEXT.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPhysicalDeviceInlineUniformBlockFeaturesEXT.byteLength = 0x18;

VkPhysicalDeviceInlineUniformBlockFeaturesEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  inlineUniformBlock: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  descriptorBindingInlineUniformBlockUpdateAfterBind: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceInlineUniformBlockPropertiesEXT **/
class VkPhysicalDeviceInlineUniformBlockPropertiesEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x28);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    
    
    
    this.sType = 0x3B9CE511;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceInlineUniformBlockPropertiesEXT.pNext' isn't allowed to be filled");
  }
  get maxInlineUniformBlockSize() {
    return this.memoryViewUint32[0x4];
  }
  get maxPerStageDescriptorInlineUniformBlocks() {
    return this.memoryViewUint32[0x5];
  }
  get maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks() {
    return this.memoryViewUint32[0x6];
  }
  get maxDescriptorSetInlineUniformBlocks() {
    return this.memoryViewUint32[0x7];
  }
  get maxDescriptorSetUpdateAfterBindInlineUniformBlocks() {
    return this.memoryViewUint32[0x8];
  }
  
};

VkPhysicalDeviceInlineUniformBlockPropertiesEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceInlineUniformBlockPropertiesEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x28));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x28), 0x0);
  
  
};

VkPhysicalDeviceInlineUniformBlockPropertiesEXT.byteLength = 0x28;

VkPhysicalDeviceInlineUniformBlockPropertiesEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  maxInlineUniformBlockSize: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  maxPerStageDescriptorInlineUniformBlocks: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
  maxDescriptorSetInlineUniformBlocks: {
    byteOffset: 0x1C,
    byteLength: 0x4
  },
  maxDescriptorSetUpdateAfterBindInlineUniformBlocks: {
    byteOffset: 0x20,
    byteLength: 0x4
  },
};
/** VkWriteDescriptorSetInlineUniformBlockEXT **/
class VkWriteDescriptorSetInlineUniformBlockEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this._pData = null;
    this.sType = 0x3B9CE512;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.dataSize !== void 0) this.dataSize = opts.dataSize;
      if (opts.pData !== void 0) this.pData = opts.pData;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkWriteDescriptorSetInlineUniformBlockEXT.pNext' isn't allowed to be filled");
  }
  get dataSize() {
    return this.memoryViewUint32[0x4];
  }
  set dataSize(value) {
    
    this.memoryViewUint32[0x4] = value;
  }
  get pData() {
    return this._pData;
  }
  set pData(value) {
    if (value !== null ) {
      this._pData = value;
      this.memoryViewBigInt64[0x3] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pData = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } 
    
  }
  
};

VkWriteDescriptorSetInlineUniformBlockEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkWriteDescriptorSetInlineUniformBlockEXT.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkWriteDescriptorSetInlineUniformBlockEXT.byteLength = 0x20;

VkWriteDescriptorSetInlineUniformBlockEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  dataSize: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  pData: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
};
/** VkDescriptorPoolInlineUniformBlockCreateInfoEXT **/
class VkDescriptorPoolInlineUniformBlockCreateInfoEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9CE513;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.maxInlineUniformBlockBindings !== void 0) this.maxInlineUniformBlockBindings = opts.maxInlineUniformBlockBindings;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDescriptorPoolInlineUniformBlockCreateInfoEXT.pNext' isn't allowed to be filled");
  }
  get maxInlineUniformBlockBindings() {
    return this.memoryViewUint32[0x4];
  }
  set maxInlineUniformBlockBindings(value) {
    
    this.memoryViewUint32[0x4] = value;
  }
  
};

VkDescriptorPoolInlineUniformBlockCreateInfoEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDescriptorPoolInlineUniformBlockCreateInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkDescriptorPoolInlineUniformBlockCreateInfoEXT.byteLength = 0x18;

VkDescriptorPoolInlineUniformBlockCreateInfoEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  maxInlineUniformBlockBindings: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkPipelineCoverageModulationStateCreateInfoNV **/
class VkPipelineCoverageModulationStateCreateInfoNV {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x28);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    
    
    this._pCoverageModulationTable = null;
    this.sType = 0x3B9D1BC0;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.coverageModulationMode !== void 0) this.coverageModulationMode = opts.coverageModulationMode;
      if (opts.coverageModulationTableEnable !== void 0) this.coverageModulationTableEnable = opts.coverageModulationTableEnable;
      if (opts.coverageModulationTableCount !== void 0) this.coverageModulationTableCount = opts.coverageModulationTableCount;
      if (opts.pCoverageModulationTable !== void 0) this.pCoverageModulationTable = opts.pCoverageModulationTable;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPipelineCoverageModulationStateCreateInfoNV.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get coverageModulationMode() {
    return this.memoryViewInt32[0x5];
  }
  set coverageModulationMode(value) {
    
    this.memoryViewInt32[0x5] = value;
  }
  get coverageModulationTableEnable() {
    return this.memoryViewUint32[0x6] !== 0;
  }
  set coverageModulationTableEnable(value) {
    this.memoryViewUint32[0x6] = value | 0;
  }
  get coverageModulationTableCount() {
    return this.memoryViewUint32[0x7];
  }
  set coverageModulationTableCount(value) {
    
    this.memoryViewUint32[0x7] = value;
  }
  get pCoverageModulationTable() {
    return this._pCoverageModulationTable;
  }
  set pCoverageModulationTable(value) {
    if (value !== null ) {
      this._pCoverageModulationTable = value;
      this.memoryViewBigInt64[0x4] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pCoverageModulationTable = null;
      this.memoryViewBigInt64[0x4] = BI0;
    } 
    
  }
  
};

VkPipelineCoverageModulationStateCreateInfoNV.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPipelineCoverageModulationStateCreateInfoNV.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPipelineCoverageModulationStateCreateInfoNV.byteLength = 0x28;

VkPipelineCoverageModulationStateCreateInfoNV.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  flags: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  coverageModulationMode: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  coverageModulationTableEnable: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
  coverageModulationTableCount: {
    byteOffset: 0x1C,
    byteLength: 0x4
  },
  pCoverageModulationTable: {
    byteOffset: 0x20,
    byteLength: 0x8
  },
};
/** VkImageFormatListCreateInfoKHR **/
class VkImageFormatListCreateInfoKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this._pViewFormats = null;
    this.sType = 0x3B9D0838;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.viewFormatCount !== void 0) this.viewFormatCount = opts.viewFormatCount;
      if (opts.pViewFormats !== void 0) this.pViewFormats = opts.pViewFormats;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkImageFormatListCreateInfoKHR.pNext' isn't allowed to be filled");
  }
  get viewFormatCount() {
    return this.memoryViewUint32[0x4];
  }
  set viewFormatCount(value) {
    
    this.memoryViewUint32[0x4] = value;
  }
  get pViewFormats() {
    return this._pViewFormats;
  }
  set pViewFormats(value) {
    if (value !== null ) {
      this._pViewFormats = value;
      this.memoryViewBigInt64[0x3] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pViewFormats = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } 
    
  }
  
};

VkImageFormatListCreateInfoKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkImageFormatListCreateInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkImageFormatListCreateInfoKHR.byteLength = 0x20;

VkImageFormatListCreateInfoKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  viewFormatCount: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  pViewFormats: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
};
/** VkValidationCacheCreateInfoEXT **/
class VkValidationCacheCreateInfoEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x28);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    this._pInitialData = null;
    this.sType = 0x3B9D3B00;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.initialDataSize !== void 0) this.initialDataSize = opts.initialDataSize;
      if (opts.pInitialData !== void 0) this.pInitialData = opts.pInitialData;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkValidationCacheCreateInfoEXT.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get initialDataSize() {
    return this.memoryViewBigInt64[0x3];
  }
  set initialDataSize(value) {
    
    this.memoryViewBigInt64[0x3] = BigInt(value);
  }
  get pInitialData() {
    return this._pInitialData;
  }
  set pInitialData(value) {
    if (value !== null ) {
      this._pInitialData = value;
      this.memoryViewBigInt64[0x4] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pInitialData = null;
      this.memoryViewBigInt64[0x4] = BI0;
    } 
    
  }
  
};

VkValidationCacheCreateInfoEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkValidationCacheCreateInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkValidationCacheCreateInfoEXT.byteLength = 0x28;

VkValidationCacheCreateInfoEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  flags: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  initialDataSize: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
  pInitialData: {
    byteOffset: 0x20,
    byteLength: 0x8
  },
};
/** VkShaderModuleValidationCacheCreateInfoEXT **/
class VkShaderModuleValidationCacheCreateInfoEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._validationCache = null;
    this.sType = 0x3B9D3B01;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.validationCache !== void 0) this.validationCache = opts.validationCache;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkShaderModuleValidationCacheCreateInfoEXT.pNext' isn't allowed to be filled");
  }
  get validationCache() {
    return this._validationCache;
  }
  set validationCache(value) {
    if (value !== null ) {
      
      this._validationCache = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._validationCache = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } 
    
  }
  
};

VkShaderModuleValidationCacheCreateInfoEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkShaderModuleValidationCacheCreateInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkShaderModuleValidationCacheCreateInfoEXT.byteLength = 0x18;

VkShaderModuleValidationCacheCreateInfoEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  validationCache: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
};
/** VkPhysicalDeviceMaintenance3Properties **/
class VkPhysicalDeviceMaintenance3Properties {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    this.sType = 0x3B9D5A40;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceMaintenance3Properties.pNext' isn't allowed to be filled");
  }
  get maxPerSetDescriptors() {
    return this.memoryViewUint32[0x4];
  }
  get maxMemoryAllocationSize() {
    return this.memoryViewBigUint64[0x3];
  }
  
};

VkPhysicalDeviceMaintenance3Properties.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceMaintenance3Properties.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x20));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x20), 0x0);
  
  
};

VkPhysicalDeviceMaintenance3Properties.byteLength = 0x20;

VkPhysicalDeviceMaintenance3Properties.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  maxPerSetDescriptors: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  maxMemoryAllocationSize: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
};
/** VkPhysicalDeviceMaintenance3PropertiesKHR **/
class VkPhysicalDeviceMaintenance3PropertiesKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    this.sType = 0x3B9D5A40;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceMaintenance3PropertiesKHR.pNext' isn't allowed to be filled");
  }
  get maxPerSetDescriptors() {
    return this.memoryViewUint32[0x4];
  }
  get maxMemoryAllocationSize() {
    return this.memoryViewBigUint64[0x3];
  }
  
};

VkPhysicalDeviceMaintenance3PropertiesKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceMaintenance3PropertiesKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x20));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x20), 0x0);
  
  
};

VkPhysicalDeviceMaintenance3PropertiesKHR.byteLength = 0x20;

VkPhysicalDeviceMaintenance3PropertiesKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  maxPerSetDescriptors: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  maxMemoryAllocationSize: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
};
/** VkDescriptorSetLayoutSupport **/
class VkDescriptorSetLayoutSupport {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9D5A41;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null ) {
      let {sType} = value;
      
      switch (sType) {
          
        case 0x3B9D3EEC:
          break;
        default:
          throw new TypeError("Invalid type for 'VkDescriptorSetLayoutSupport.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  get supported() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  
};

VkDescriptorSetLayoutSupport.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDescriptorSetLayoutSupport.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x18));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x18), 0x0);
  
  
};

VkDescriptorSetLayoutSupport.byteLength = 0x18;

VkDescriptorSetLayoutSupport.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  supported: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkDescriptorSetLayoutSupportKHR **/
class VkDescriptorSetLayoutSupportKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9D5A41;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null ) {
      let {sType} = value;
      
      switch (sType) {
          
        case 0x3B9D3EEC:
          break;
        default:
          throw new TypeError("Invalid type for 'VkDescriptorSetLayoutSupportKHR.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  get supported() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  
};

VkDescriptorSetLayoutSupportKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDescriptorSetLayoutSupportKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x18));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x18), 0x0);
  
  
};

VkDescriptorSetLayoutSupportKHR.byteLength = 0x18;

VkDescriptorSetLayoutSupportKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  supported: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceShaderDrawParametersFeatures **/
class VkPhysicalDeviceShaderDrawParametersFeatures {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.shaderDrawParameters !== void 0) this.shaderDrawParameters = opts.shaderDrawParameters;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceShaderDrawParametersFeatures.pNext' isn't allowed to be filled");
  }
  get shaderDrawParameters() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set shaderDrawParameters(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  
};

VkPhysicalDeviceShaderDrawParametersFeatures.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceShaderDrawParametersFeatures.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPhysicalDeviceShaderDrawParametersFeatures.byteLength = 0x18;

VkPhysicalDeviceShaderDrawParametersFeatures.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  shaderDrawParameters: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceShaderDrawParameterFeatures **/
class VkPhysicalDeviceShaderDrawParameterFeatures {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.shaderDrawParameters !== void 0) this.shaderDrawParameters = opts.shaderDrawParameters;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceShaderDrawParameterFeatures.pNext' isn't allowed to be filled");
  }
  get shaderDrawParameters() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set shaderDrawParameters(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  
};

VkPhysicalDeviceShaderDrawParameterFeatures.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceShaderDrawParameterFeatures.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPhysicalDeviceShaderDrawParameterFeatures.byteLength = 0x18;

VkPhysicalDeviceShaderDrawParameterFeatures.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  shaderDrawParameters: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceFloat16Int8FeaturesKHR **/
class VkPhysicalDeviceFloat16Int8FeaturesKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    this.sType = 0x3B9C0A50;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.shaderFloat16 !== void 0) this.shaderFloat16 = opts.shaderFloat16;
      if (opts.shaderInt8 !== void 0) this.shaderInt8 = opts.shaderInt8;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceFloat16Int8FeaturesKHR.pNext' isn't allowed to be filled");
  }
  get shaderFloat16() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set shaderFloat16(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  get shaderInt8() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  set shaderInt8(value) {
    this.memoryViewUint32[0x5] = value | 0;
  }
  
};

VkPhysicalDeviceFloat16Int8FeaturesKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceFloat16Int8FeaturesKHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPhysicalDeviceFloat16Int8FeaturesKHR.byteLength = 0x18;

VkPhysicalDeviceFloat16Int8FeaturesKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  shaderFloat16: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  shaderInt8: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceFloatControlsPropertiesKHR **/
class VkPhysicalDeviceFloatControlsPropertiesKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x58) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x58) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x58) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x58);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    this.sType = 0x3B9DCB88;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceFloatControlsPropertiesKHR.pNext' isn't allowed to be filled");
  }
  get separateDenormSettings() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  get separateRoundingModeSettings() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  get shaderSignedZeroInfNanPreserveFloat16() {
    return this.memoryViewUint32[0x6] !== 0;
  }
  get shaderSignedZeroInfNanPreserveFloat32() {
    return this.memoryViewUint32[0x7] !== 0;
  }
  get shaderSignedZeroInfNanPreserveFloat64() {
    return this.memoryViewUint32[0x8] !== 0;
  }
  get shaderDenormPreserveFloat16() {
    return this.memoryViewUint32[0x9] !== 0;
  }
  get shaderDenormPreserveFloat32() {
    return this.memoryViewUint32[0xA] !== 0;
  }
  get shaderDenormPreserveFloat64() {
    return this.memoryViewUint32[0xB] !== 0;
  }
  get shaderDenormFlushToZeroFloat16() {
    return this.memoryViewUint32[0xC] !== 0;
  }
  get shaderDenormFlushToZeroFloat32() {
    return this.memoryViewUint32[0xD] !== 0;
  }
  get shaderDenormFlushToZeroFloat64() {
    return this.memoryViewUint32[0xE] !== 0;
  }
  get shaderRoundingModeRTEFloat16() {
    return this.memoryViewUint32[0xF] !== 0;
  }
  get shaderRoundingModeRTEFloat32() {
    return this.memoryViewUint32[0x10] !== 0;
  }
  get shaderRoundingModeRTEFloat64() {
    return this.memoryViewUint32[0x11] !== 0;
  }
  get shaderRoundingModeRTZFloat16() {
    return this.memoryViewUint32[0x12] !== 0;
  }
  get shaderRoundingModeRTZFloat32() {
    return this.memoryViewUint32[0x13] !== 0;
  }
  get shaderRoundingModeRTZFloat64() {
    return this.memoryViewUint32[0x14] !== 0;
  }
  
};

VkPhysicalDeviceFloatControlsPropertiesKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceFloatControlsPropertiesKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x58));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x58), 0x0);
  
  
};

VkPhysicalDeviceFloatControlsPropertiesKHR.byteLength = 0x58;

VkPhysicalDeviceFloatControlsPropertiesKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  separateDenormSettings: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  separateRoundingModeSettings: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  shaderSignedZeroInfNanPreserveFloat16: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
  shaderSignedZeroInfNanPreserveFloat32: {
    byteOffset: 0x1C,
    byteLength: 0x4
  },
  shaderSignedZeroInfNanPreserveFloat64: {
    byteOffset: 0x20,
    byteLength: 0x4
  },
  shaderDenormPreserveFloat16: {
    byteOffset: 0x24,
    byteLength: 0x4
  },
  shaderDenormPreserveFloat32: {
    byteOffset: 0x28,
    byteLength: 0x4
  },
  shaderDenormPreserveFloat64: {
    byteOffset: 0x2C,
    byteLength: 0x4
  },
  shaderDenormFlushToZeroFloat16: {
    byteOffset: 0x30,
    byteLength: 0x4
  },
  shaderDenormFlushToZeroFloat32: {
    byteOffset: 0x34,
    byteLength: 0x4
  },
  shaderDenormFlushToZeroFloat64: {
    byteOffset: 0x38,
    byteLength: 0x4
  },
  shaderRoundingModeRTEFloat16: {
    byteOffset: 0x3C,
    byteLength: 0x4
  },
  shaderRoundingModeRTEFloat32: {
    byteOffset: 0x40,
    byteLength: 0x4
  },
  shaderRoundingModeRTEFloat64: {
    byteOffset: 0x44,
    byteLength: 0x4
  },
  shaderRoundingModeRTZFloat16: {
    byteOffset: 0x48,
    byteLength: 0x4
  },
  shaderRoundingModeRTZFloat32: {
    byteOffset: 0x4C,
    byteLength: 0x4
  },
  shaderRoundingModeRTZFloat64: {
    byteOffset: 0x50,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceHostQueryResetFeaturesEXT **/
class VkPhysicalDeviceHostQueryResetFeaturesEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9EC588;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.hostQueryReset !== void 0) this.hostQueryReset = opts.hostQueryReset;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceHostQueryResetFeaturesEXT.pNext' isn't allowed to be filled");
  }
  get hostQueryReset() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set hostQueryReset(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  
};

VkPhysicalDeviceHostQueryResetFeaturesEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceHostQueryResetFeaturesEXT.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPhysicalDeviceHostQueryResetFeaturesEXT.byteLength = 0x18;

VkPhysicalDeviceHostQueryResetFeaturesEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  hostQueryReset: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkShaderResourceUsageAMD **/
class VkShaderResourceUsageAMD {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    
    
    
    
    
    if (typeof opts === "object") {
      
    }
  }
  get numUsedVgprs() {
    return this.memoryViewUint32[0x0];
  }
  get numUsedSgprs() {
    return this.memoryViewUint32[0x1];
  }
  get ldsSizePerLocalWorkGroup() {
    return this.memoryViewUint32[0x2];
  }
  get ldsUsageSizeInBytes() {
    return this.memoryViewBigInt64[0x2];
  }
  get scratchMemUsageInBytes() {
    return this.memoryViewBigInt64[0x3];
  }
  
};

VkShaderResourceUsageAMD.prototype.flush = function flush() {
  
  return true;
};

VkShaderResourceUsageAMD.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x20));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x20), 0x0);
};

VkShaderResourceUsageAMD.byteLength = 0x20;

VkShaderResourceUsageAMD.memoryLayout = {
  numUsedVgprs: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  numUsedSgprs: {
    byteOffset: 0x4,
    byteLength: 0x4
  },
  ldsSizePerLocalWorkGroup: {
    byteOffset: 0x8,
    byteLength: 0x4
  },
  ldsUsageSizeInBytes: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
  scratchMemUsageInBytes: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
};
/** VkShaderStatisticsInfoAMD **/
class VkShaderStatisticsInfoAMD {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x48) / 0x4);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x48) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x48);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._resourceUsage = new VkShaderResourceUsageAMD({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x8 });
    
    
    
    
    this._computeWorkGroupSize = [...Array(3)].fill(0x0);
    
    if (typeof opts === "object") {
      
    }
  }
  get shaderStageMask() {
    return this.memoryViewInt32[0x0];
  }
  get resourceUsage() {
    return this._resourceUsage;
  }
  get numPhysicalVgprs() {
    return this.memoryViewUint32[0xA];
  }
  get numPhysicalSgprs() {
    return this.memoryViewUint32[0xB];
  }
  get numAvailableVgprs() {
    return this.memoryViewUint32[0xC];
  }
  get numAvailableSgprs() {
    return this.memoryViewUint32[0xD];
  }
  get computeWorkGroupSize() {
    return [
      this.memoryViewUint32[0xE],
      this.memoryViewUint32[0xF],
      this.memoryViewUint32[0x10]
    ];
  }
  
};

VkShaderStatisticsInfoAMD.prototype.flush = function flush() {
  
  return true;
};

VkShaderStatisticsInfoAMD.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x48));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x48), 0x0);
  
  
  
  
};

VkShaderStatisticsInfoAMD.byteLength = 0x48;

VkShaderStatisticsInfoAMD.memoryLayout = {
  shaderStageMask: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  resourceUsage: {
    byteOffset: 0x8,
    byteLength: 0x20
  },
  numPhysicalVgprs: {
    byteOffset: 0x28,
    byteLength: 0x4
  },
  numPhysicalSgprs: {
    byteOffset: 0x2C,
    byteLength: 0x4
  },
  numAvailableVgprs: {
    byteOffset: 0x30,
    byteLength: 0x4
  },
  numAvailableSgprs: {
    byteOffset: 0x34,
    byteLength: 0x4
  },
  computeWorkGroupSize: {
    byteOffset: 0x38,
    byteLength: 0xC
  },
};
/** VkDeviceQueueGlobalPriorityCreateInfoEXT **/
class VkDeviceQueueGlobalPriorityCreateInfoEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9D71B0;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.globalPriority !== void 0) this.globalPriority = opts.globalPriority;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDeviceQueueGlobalPriorityCreateInfoEXT.pNext' isn't allowed to be filled");
  }
  get globalPriority() {
    return this.memoryViewInt32[0x4];
  }
  set globalPriority(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkDeviceQueueGlobalPriorityCreateInfoEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDeviceQueueGlobalPriorityCreateInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkDeviceQueueGlobalPriorityCreateInfoEXT.byteLength = 0x18;

VkDeviceQueueGlobalPriorityCreateInfoEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  globalPriority: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkDebugUtilsObjectNameInfoEXT **/
class VkDebugUtilsObjectNameInfoEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x28);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    this._pObjectName = null;
    this.sType = 0x3B9CBE00;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.objectType !== void 0) this.objectType = opts.objectType;
      if (opts.objectHandle !== void 0) this.objectHandle = opts.objectHandle;
      if (opts.pObjectName !== void 0) this.pObjectName = opts.pObjectName;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDebugUtilsObjectNameInfoEXT.pNext' isn't allowed to be filled");
  }
  get objectType() {
    return this.memoryViewInt32[0x4];
  }
  set objectType(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get objectHandle() {
    return this.memoryViewBigUint64[0x3];
  }
  set objectHandle(value) {
    
    this.memoryViewBigUint64[0x3] = BigInt(value);
  }
  get pObjectName() {
    if (this._pObjectName !== null) {
      let str = textDecoder.decode(this._pObjectName);
      return str.substr(0, str.length - 1);
    } else {
      return null;
    }
  }
  set pObjectName(value) {
    if (value !== null ) {
      this._pObjectName = textEncoder.encode(value + NULLT).buffer;
      this.memoryViewBigInt64[0x4] = getAddressFromArrayBuffer(this._pObjectName);
    } else if (value === null) {
      this._pObjectName = null;
      this.memoryViewBigInt64[0x4] = BI0;
    } 
    
  }
  
};

VkDebugUtilsObjectNameInfoEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDebugUtilsObjectNameInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkDebugUtilsObjectNameInfoEXT.byteLength = 0x28;

VkDebugUtilsObjectNameInfoEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  objectType: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  objectHandle: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
  pObjectName: {
    byteOffset: 0x20,
    byteLength: 0x8
  },
};
/** VkDebugUtilsObjectTagInfoEXT **/
class VkDebugUtilsObjectTagInfoEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x38) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x38) / 0x8);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x38) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x38);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    
    
    this._pTag = null;
    this.sType = 0x3B9CBE01;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.objectType !== void 0) this.objectType = opts.objectType;
      if (opts.objectHandle !== void 0) this.objectHandle = opts.objectHandle;
      if (opts.tagName !== void 0) this.tagName = opts.tagName;
      if (opts.tagSize !== void 0) this.tagSize = opts.tagSize;
      if (opts.pTag !== void 0) this.pTag = opts.pTag;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDebugUtilsObjectTagInfoEXT.pNext' isn't allowed to be filled");
  }
  get objectType() {
    return this.memoryViewInt32[0x4];
  }
  set objectType(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get objectHandle() {
    return this.memoryViewBigUint64[0x3];
  }
  set objectHandle(value) {
    
    this.memoryViewBigUint64[0x3] = BigInt(value);
  }
  get tagName() {
    return this.memoryViewBigUint64[0x4];
  }
  set tagName(value) {
    
    this.memoryViewBigUint64[0x4] = BigInt(value);
  }
  get tagSize() {
    return this.memoryViewBigInt64[0x5];
  }
  set tagSize(value) {
    
    this.memoryViewBigInt64[0x5] = BigInt(value);
  }
  get pTag() {
    return this._pTag;
  }
  set pTag(value) {
    if (value !== null ) {
      this._pTag = value;
      this.memoryViewBigInt64[0x6] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pTag = null;
      this.memoryViewBigInt64[0x6] = BI0;
    } 
    
  }
  
};

VkDebugUtilsObjectTagInfoEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDebugUtilsObjectTagInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkDebugUtilsObjectTagInfoEXT.byteLength = 0x38;

VkDebugUtilsObjectTagInfoEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  objectType: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  objectHandle: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
  tagName: {
    byteOffset: 0x20,
    byteLength: 0x8
  },
  tagSize: {
    byteOffset: 0x28,
    byteLength: 0x8
  },
  pTag: {
    byteOffset: 0x30,
    byteLength: 0x8
  },
};
/** VkDebugUtilsLabelEXT **/
class VkDebugUtilsLabelEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);
      this.memoryViewFloat32 = new Float32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x28);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewFloat32 = new Float32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._pLabelName = null;
    this._color = [...Array(4)].fill(0x0);
    this.sType = 0x3B9CBE02;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.pLabelName !== void 0) this.pLabelName = opts.pLabelName;
      if (opts.color !== void 0) this.color = opts.color;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDebugUtilsLabelEXT.pNext' isn't allowed to be filled");
  }
  get pLabelName() {
    if (this._pLabelName !== null) {
      let str = textDecoder.decode(this._pLabelName);
      return str.substr(0, str.length - 1);
    } else {
      return null;
    }
  }
  set pLabelName(value) {
    if (value !== null ) {
      this._pLabelName = textEncoder.encode(value + NULLT).buffer;
      this.memoryViewBigInt64[0x2] = getAddressFromArrayBuffer(this._pLabelName);
    } else if (value === null) {
      this._pLabelName = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } 
    
  }
  get color() {
    return this._color;
  }
  set color(value) {
    if (value !== null ) {
      this._color = value;
    } else if (value === null) {
      this._color = null;
    } 
    
  }
  
};

VkDebugUtilsLabelEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._color !== null) {
    let array = this._color;
    
    for (let ii = 0; ii < array.length; ++ii) {
      this.memoryViewFloat32[0x6 + ii] = array[ii];
    };
  } else {
    this.memoryViewFloat32[0x6] = 0x0;
  }
  
  return true;
};

VkDebugUtilsLabelEXT.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
};

VkDebugUtilsLabelEXT.byteLength = 0x28;

VkDebugUtilsLabelEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  pLabelName: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
  color: {
    byteOffset: 0x18,
    byteLength: 0x10
  },
};
/** VkDebugUtilsMessengerCreateInfoEXT **/
class VkDebugUtilsMessengerCreateInfoEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x30) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x30) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x30);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    
    this._pUserData = null;
    this.sType = 0x3B9CBE04;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.messageSeverity !== void 0) this.messageSeverity = opts.messageSeverity;
      if (opts.messageType !== void 0) this.messageType = opts.messageType;
      if (opts.pUserData !== void 0) this.pUserData = opts.pUserData;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDebugUtilsMessengerCreateInfoEXT.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get messageSeverity() {
    return this.memoryViewInt32[0x5];
  }
  set messageSeverity(value) {
    
    this.memoryViewInt32[0x5] = value;
  }
  get messageType() {
    return this.memoryViewInt32[0x6];
  }
  set messageType(value) {
    
    this.memoryViewInt32[0x6] = value;
  }
  get pUserData() {
    return this._pUserData;
  }
  set pUserData(value) {
    if (value !== null ) {
      this._pUserData = value;
      this.memoryViewBigInt64[0x5] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pUserData = null;
      this.memoryViewBigInt64[0x5] = BI0;
    } 
    
  }
  
};

VkDebugUtilsMessengerCreateInfoEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDebugUtilsMessengerCreateInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkDebugUtilsMessengerCreateInfoEXT.byteLength = 0x30;

VkDebugUtilsMessengerCreateInfoEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  flags: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  messageSeverity: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  messageType: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
  pUserData: {
    byteOffset: 0x28,
    byteLength: 0x8
  },
};
/** VkDebugUtilsMessengerCallbackDataEXT **/
class VkDebugUtilsMessengerCallbackDataEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x60) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x60) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x60) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x60);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this._pMessageIdName = null;
    
    this._pMessage = null;
    
    this._pQueueLabels = null;
    this._pQueueLabelsNative = null;
    
    this._pCmdBufLabels = null;
    this._pCmdBufLabelsNative = null;
    
    this._pObjects = null;
    this._pObjectsNative = null;
    this.sType = 0x3B9CBE03;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.pMessageIdName !== void 0) this.pMessageIdName = opts.pMessageIdName;
      if (opts.messageIdNumber !== void 0) this.messageIdNumber = opts.messageIdNumber;
      if (opts.pMessage !== void 0) this.pMessage = opts.pMessage;
      if (opts.queueLabelCount !== void 0) this.queueLabelCount = opts.queueLabelCount;
      if (opts.pQueueLabels !== void 0) this.pQueueLabels = opts.pQueueLabels;
      if (opts.cmdBufLabelCount !== void 0) this.cmdBufLabelCount = opts.cmdBufLabelCount;
      if (opts.pCmdBufLabels !== void 0) this.pCmdBufLabels = opts.pCmdBufLabels;
      if (opts.objectCount !== void 0) this.objectCount = opts.objectCount;
      if (opts.pObjects !== void 0) this.pObjects = opts.pObjects;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDebugUtilsMessengerCallbackDataEXT.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get pMessageIdName() {
    if (this._pMessageIdName !== null) {
      let str = textDecoder.decode(this._pMessageIdName);
      return str.substr(0, str.length - 1);
    } else {
      return null;
    }
  }
  set pMessageIdName(value) {
    if (value !== null ) {
      this._pMessageIdName = textEncoder.encode(value + NULLT).buffer;
      this.memoryViewBigInt64[0x3] = getAddressFromArrayBuffer(this._pMessageIdName);
    } else if (value === null) {
      this._pMessageIdName = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } 
    
  }
  get messageIdNumber() {
    return this.memoryViewInt32[0x8];
  }
  set messageIdNumber(value) {
    
    this.memoryViewInt32[0x8] = value;
  }
  get pMessage() {
    if (this._pMessage !== null) {
      let str = textDecoder.decode(this._pMessage);
      return str.substr(0, str.length - 1);
    } else {
      return null;
    }
  }
  set pMessage(value) {
    if (value !== null ) {
      this._pMessage = textEncoder.encode(value + NULLT).buffer;
      this.memoryViewBigInt64[0x5] = getAddressFromArrayBuffer(this._pMessage);
    } else if (value === null) {
      this._pMessage = null;
      this.memoryViewBigInt64[0x5] = BI0;
    } 
    
  }
  get queueLabelCount() {
    return this.memoryViewUint32[0xC];
  }
  set queueLabelCount(value) {
    
    this.memoryViewUint32[0xC] = value;
  }
  get pQueueLabels() {
    return this._pQueueLabels;
  }
  set pQueueLabels(value) {
    if (value !== null ) {
      this._pQueueLabels = value;
    } else if (value === null) {
      this._pQueueLabels = null;
    } 
    
  }
  get cmdBufLabelCount() {
    return this.memoryViewUint32[0x10];
  }
  set cmdBufLabelCount(value) {
    
    this.memoryViewUint32[0x10] = value;
  }
  get pCmdBufLabels() {
    return this._pCmdBufLabels;
  }
  set pCmdBufLabels(value) {
    if (value !== null ) {
      this._pCmdBufLabels = value;
    } else if (value === null) {
      this._pCmdBufLabels = null;
    } 
    
  }
  get objectCount() {
    return this.memoryViewUint32[0x14];
  }
  set objectCount(value) {
    
    this.memoryViewUint32[0x14] = value;
  }
  get pObjects() {
    return this._pObjects;
  }
  set pObjects(value) {
    if (value !== null ) {
      this._pObjects = value;
    } else if (value === null) {
      this._pObjects = null;
    } 
    
  }
  
};

VkDebugUtilsMessengerCallbackDataEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pQueueLabels !== null) {
    let array = this._pQueueLabels;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pQueueLabelsNative = nativeArray;
    this.memoryViewBigInt64[0x7] = nativeArray.address;
  }
  
  
  if (this._pCmdBufLabels !== null) {
    let array = this._pCmdBufLabels;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pCmdBufLabelsNative = nativeArray;
    this.memoryViewBigInt64[0x9] = nativeArray.address;
  }
  
  
  if (this._pObjects !== null) {
    let array = this._pObjects;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pObjectsNative = nativeArray;
    this.memoryViewBigInt64[0xB] = nativeArray.address;
  }
  
  return true;
};

VkDebugUtilsMessengerCallbackDataEXT.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
  
  
  
  
};

VkDebugUtilsMessengerCallbackDataEXT.byteLength = 0x60;

VkDebugUtilsMessengerCallbackDataEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  flags: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  pMessageIdName: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
  messageIdNumber: {
    byteOffset: 0x20,
    byteLength: 0x4
  },
  pMessage: {
    byteOffset: 0x28,
    byteLength: 0x8
  },
  queueLabelCount: {
    byteOffset: 0x30,
    byteLength: 0x4
  },
  pQueueLabels: {
    byteOffset: 0x38,
    byteLength: 0x8
  },
  cmdBufLabelCount: {
    byteOffset: 0x40,
    byteLength: 0x4
  },
  pCmdBufLabels: {
    byteOffset: 0x48,
    byteLength: 0x8
  },
  objectCount: {
    byteOffset: 0x50,
    byteLength: 0x4
  },
  pObjects: {
    byteOffset: 0x58,
    byteLength: 0x8
  },
};
/** VkImportMemoryHostPointerInfoEXT **/
class VkImportMemoryHostPointerInfoEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this._pHostPointer = null;
    this.sType = 0x3B9D8150;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      if (opts.pHostPointer !== void 0) this.pHostPointer = opts.pHostPointer;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkImportMemoryHostPointerInfoEXT.pNext' isn't allowed to be filled");
  }
  get handleType() {
    return this.memoryViewInt32[0x4];
  }
  set handleType(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get pHostPointer() {
    return this._pHostPointer;
  }
  set pHostPointer(value) {
    if (value !== null ) {
      this._pHostPointer = value;
      this.memoryViewBigInt64[0x3] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pHostPointer = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } 
    
  }
  
};

VkImportMemoryHostPointerInfoEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkImportMemoryHostPointerInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkImportMemoryHostPointerInfoEXT.byteLength = 0x20;

VkImportMemoryHostPointerInfoEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  handleType: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  pHostPointer: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
};
/** VkMemoryHostPointerPropertiesEXT **/
class VkMemoryHostPointerPropertiesEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9D8151;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkMemoryHostPointerPropertiesEXT.pNext' isn't allowed to be filled");
  }
  get memoryTypeBits() {
    return this.memoryViewUint32[0x4];
  }
  
};

VkMemoryHostPointerPropertiesEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkMemoryHostPointerPropertiesEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x18));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x18), 0x0);
  
  
};

VkMemoryHostPointerPropertiesEXT.byteLength = 0x18;

VkMemoryHostPointerPropertiesEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  memoryTypeBits: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceExternalMemoryHostPropertiesEXT **/
class VkPhysicalDeviceExternalMemoryHostPropertiesEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9D8152;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceExternalMemoryHostPropertiesEXT.pNext' isn't allowed to be filled");
  }
  get minImportedHostPointerAlignment() {
    return this.memoryViewBigUint64[0x2];
  }
  
};

VkPhysicalDeviceExternalMemoryHostPropertiesEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceExternalMemoryHostPropertiesEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x18));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x18), 0x0);
  
  
};

VkPhysicalDeviceExternalMemoryHostPropertiesEXT.byteLength = 0x18;

VkPhysicalDeviceExternalMemoryHostPropertiesEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  minImportedHostPointerAlignment: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
};
/** VkPhysicalDeviceConservativeRasterizationPropertiesEXT **/
class VkPhysicalDeviceConservativeRasterizationPropertiesEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x38) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x38) / 0x8);
      this.memoryViewFloat32 = new Float32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x38) / 0x4);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x38) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x38);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewFloat32 = new Float32Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    
    
    
    
    
    
    
    this.sType = 0x3B9C5488;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceConservativeRasterizationPropertiesEXT.pNext' isn't allowed to be filled");
  }
  get primitiveOverestimationSize() {
    return this.memoryViewFloat32[0x4];
  }
  get maxExtraPrimitiveOverestimationSize() {
    return this.memoryViewFloat32[0x5];
  }
  get extraPrimitiveOverestimationSizeGranularity() {
    return this.memoryViewFloat32[0x6];
  }
  get primitiveUnderestimation() {
    return this.memoryViewUint32[0x7] !== 0;
  }
  get conservativePointAndLineRasterization() {
    return this.memoryViewUint32[0x8] !== 0;
  }
  get degenerateTrianglesRasterized() {
    return this.memoryViewUint32[0x9] !== 0;
  }
  get degenerateLinesRasterized() {
    return this.memoryViewUint32[0xA] !== 0;
  }
  get fullyCoveredFragmentShaderInputVariable() {
    return this.memoryViewUint32[0xB] !== 0;
  }
  get conservativeRasterizationPostDepthCoverage() {
    return this.memoryViewUint32[0xC] !== 0;
  }
  
};

VkPhysicalDeviceConservativeRasterizationPropertiesEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceConservativeRasterizationPropertiesEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x38));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x38), 0x0);
  
  
};

VkPhysicalDeviceConservativeRasterizationPropertiesEXT.byteLength = 0x38;

VkPhysicalDeviceConservativeRasterizationPropertiesEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  primitiveOverestimationSize: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  maxExtraPrimitiveOverestimationSize: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  extraPrimitiveOverestimationSizeGranularity: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
  primitiveUnderestimation: {
    byteOffset: 0x1C,
    byteLength: 0x4
  },
  conservativePointAndLineRasterization: {
    byteOffset: 0x20,
    byteLength: 0x4
  },
  degenerateTrianglesRasterized: {
    byteOffset: 0x24,
    byteLength: 0x4
  },
  degenerateLinesRasterized: {
    byteOffset: 0x28,
    byteLength: 0x4
  },
  fullyCoveredFragmentShaderInputVariable: {
    byteOffset: 0x2C,
    byteLength: 0x4
  },
  conservativeRasterizationPostDepthCoverage: {
    byteOffset: 0x30,
    byteLength: 0x4
  },
};
/** VkCalibratedTimestampInfoEXT **/
class VkCalibratedTimestampInfoEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9D98C0;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.timeDomain !== void 0) this.timeDomain = opts.timeDomain;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkCalibratedTimestampInfoEXT.pNext' isn't allowed to be filled");
  }
  get timeDomain() {
    return this.memoryViewInt32[0x4];
  }
  set timeDomain(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkCalibratedTimestampInfoEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkCalibratedTimestampInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkCalibratedTimestampInfoEXT.byteLength = 0x18;

VkCalibratedTimestampInfoEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  timeDomain: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceShaderCorePropertiesAMD **/
class VkPhysicalDeviceShaderCorePropertiesAMD {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x48) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x48) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x48) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x48);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    this.sType = 0x3B9D9CA8;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceShaderCorePropertiesAMD.pNext' isn't allowed to be filled");
  }
  get shaderEngineCount() {
    return this.memoryViewUint32[0x4];
  }
  get shaderArraysPerEngineCount() {
    return this.memoryViewUint32[0x5];
  }
  get computeUnitsPerShaderArray() {
    return this.memoryViewUint32[0x6];
  }
  get simdPerComputeUnit() {
    return this.memoryViewUint32[0x7];
  }
  get wavefrontsPerSimd() {
    return this.memoryViewUint32[0x8];
  }
  get wavefrontSize() {
    return this.memoryViewUint32[0x9];
  }
  get sgprsPerSimd() {
    return this.memoryViewUint32[0xA];
  }
  get minSgprAllocation() {
    return this.memoryViewUint32[0xB];
  }
  get maxSgprAllocation() {
    return this.memoryViewUint32[0xC];
  }
  get sgprAllocationGranularity() {
    return this.memoryViewUint32[0xD];
  }
  get vgprsPerSimd() {
    return this.memoryViewUint32[0xE];
  }
  get minVgprAllocation() {
    return this.memoryViewUint32[0xF];
  }
  get maxVgprAllocation() {
    return this.memoryViewUint32[0x10];
  }
  get vgprAllocationGranularity() {
    return this.memoryViewUint32[0x11];
  }
  
};

VkPhysicalDeviceShaderCorePropertiesAMD.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceShaderCorePropertiesAMD.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x48));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x48), 0x0);
  
  
};

VkPhysicalDeviceShaderCorePropertiesAMD.byteLength = 0x48;

VkPhysicalDeviceShaderCorePropertiesAMD.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  shaderEngineCount: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  shaderArraysPerEngineCount: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  computeUnitsPerShaderArray: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
  simdPerComputeUnit: {
    byteOffset: 0x1C,
    byteLength: 0x4
  },
  wavefrontsPerSimd: {
    byteOffset: 0x20,
    byteLength: 0x4
  },
  wavefrontSize: {
    byteOffset: 0x24,
    byteLength: 0x4
  },
  sgprsPerSimd: {
    byteOffset: 0x28,
    byteLength: 0x4
  },
  minSgprAllocation: {
    byteOffset: 0x2C,
    byteLength: 0x4
  },
  maxSgprAllocation: {
    byteOffset: 0x30,
    byteLength: 0x4
  },
  sgprAllocationGranularity: {
    byteOffset: 0x34,
    byteLength: 0x4
  },
  vgprsPerSimd: {
    byteOffset: 0x38,
    byteLength: 0x4
  },
  minVgprAllocation: {
    byteOffset: 0x3C,
    byteLength: 0x4
  },
  maxVgprAllocation: {
    byteOffset: 0x40,
    byteLength: 0x4
  },
  vgprAllocationGranularity: {
    byteOffset: 0x44,
    byteLength: 0x4
  },
};
/** VkPipelineRasterizationConservativeStateCreateInfoEXT **/
class VkPipelineRasterizationConservativeStateCreateInfoEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);
      this.memoryViewFloat32 = new Float32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewFloat32 = new Float32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    
    this.sType = 0x3B9C5489;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.conservativeRasterizationMode !== void 0) this.conservativeRasterizationMode = opts.conservativeRasterizationMode;
      if (opts.extraPrimitiveOverestimationSize !== void 0) this.extraPrimitiveOverestimationSize = opts.extraPrimitiveOverestimationSize;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPipelineRasterizationConservativeStateCreateInfoEXT.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get conservativeRasterizationMode() {
    return this.memoryViewInt32[0x5];
  }
  set conservativeRasterizationMode(value) {
    
    this.memoryViewInt32[0x5] = value;
  }
  get extraPrimitiveOverestimationSize() {
    return this.memoryViewFloat32[0x6];
  }
  set extraPrimitiveOverestimationSize(value) {
    
    this.memoryViewFloat32[0x6] = value;
  }
  
};

VkPipelineRasterizationConservativeStateCreateInfoEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPipelineRasterizationConservativeStateCreateInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPipelineRasterizationConservativeStateCreateInfoEXT.byteLength = 0x20;

VkPipelineRasterizationConservativeStateCreateInfoEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  flags: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  conservativeRasterizationMode: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  extraPrimitiveOverestimationSize: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceDescriptorIndexingFeaturesEXT **/
class VkPhysicalDeviceDescriptorIndexingFeaturesEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x60) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x60) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x60) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x60);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    this.sType = 0x3B9D3EE9;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.shaderInputAttachmentArrayDynamicIndexing !== void 0) this.shaderInputAttachmentArrayDynamicIndexing = opts.shaderInputAttachmentArrayDynamicIndexing;
      if (opts.shaderUniformTexelBufferArrayDynamicIndexing !== void 0) this.shaderUniformTexelBufferArrayDynamicIndexing = opts.shaderUniformTexelBufferArrayDynamicIndexing;
      if (opts.shaderStorageTexelBufferArrayDynamicIndexing !== void 0) this.shaderStorageTexelBufferArrayDynamicIndexing = opts.shaderStorageTexelBufferArrayDynamicIndexing;
      if (opts.shaderUniformBufferArrayNonUniformIndexing !== void 0) this.shaderUniformBufferArrayNonUniformIndexing = opts.shaderUniformBufferArrayNonUniformIndexing;
      if (opts.shaderSampledImageArrayNonUniformIndexing !== void 0) this.shaderSampledImageArrayNonUniformIndexing = opts.shaderSampledImageArrayNonUniformIndexing;
      if (opts.shaderStorageBufferArrayNonUniformIndexing !== void 0) this.shaderStorageBufferArrayNonUniformIndexing = opts.shaderStorageBufferArrayNonUniformIndexing;
      if (opts.shaderStorageImageArrayNonUniformIndexing !== void 0) this.shaderStorageImageArrayNonUniformIndexing = opts.shaderStorageImageArrayNonUniformIndexing;
      if (opts.shaderInputAttachmentArrayNonUniformIndexing !== void 0) this.shaderInputAttachmentArrayNonUniformIndexing = opts.shaderInputAttachmentArrayNonUniformIndexing;
      if (opts.shaderUniformTexelBufferArrayNonUniformIndexing !== void 0) this.shaderUniformTexelBufferArrayNonUniformIndexing = opts.shaderUniformTexelBufferArrayNonUniformIndexing;
      if (opts.shaderStorageTexelBufferArrayNonUniformIndexing !== void 0) this.shaderStorageTexelBufferArrayNonUniformIndexing = opts.shaderStorageTexelBufferArrayNonUniformIndexing;
      if (opts.descriptorBindingUniformBufferUpdateAfterBind !== void 0) this.descriptorBindingUniformBufferUpdateAfterBind = opts.descriptorBindingUniformBufferUpdateAfterBind;
      if (opts.descriptorBindingSampledImageUpdateAfterBind !== void 0) this.descriptorBindingSampledImageUpdateAfterBind = opts.descriptorBindingSampledImageUpdateAfterBind;
      if (opts.descriptorBindingStorageImageUpdateAfterBind !== void 0) this.descriptorBindingStorageImageUpdateAfterBind = opts.descriptorBindingStorageImageUpdateAfterBind;
      if (opts.descriptorBindingStorageBufferUpdateAfterBind !== void 0) this.descriptorBindingStorageBufferUpdateAfterBind = opts.descriptorBindingStorageBufferUpdateAfterBind;
      if (opts.descriptorBindingUniformTexelBufferUpdateAfterBind !== void 0) this.descriptorBindingUniformTexelBufferUpdateAfterBind = opts.descriptorBindingUniformTexelBufferUpdateAfterBind;
      if (opts.descriptorBindingStorageTexelBufferUpdateAfterBind !== void 0) this.descriptorBindingStorageTexelBufferUpdateAfterBind = opts.descriptorBindingStorageTexelBufferUpdateAfterBind;
      if (opts.descriptorBindingUpdateUnusedWhilePending !== void 0) this.descriptorBindingUpdateUnusedWhilePending = opts.descriptorBindingUpdateUnusedWhilePending;
      if (opts.descriptorBindingPartiallyBound !== void 0) this.descriptorBindingPartiallyBound = opts.descriptorBindingPartiallyBound;
      if (opts.descriptorBindingVariableDescriptorCount !== void 0) this.descriptorBindingVariableDescriptorCount = opts.descriptorBindingVariableDescriptorCount;
      if (opts.runtimeDescriptorArray !== void 0) this.runtimeDescriptorArray = opts.runtimeDescriptorArray;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceDescriptorIndexingFeaturesEXT.pNext' isn't allowed to be filled");
  }
  get shaderInputAttachmentArrayDynamicIndexing() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set shaderInputAttachmentArrayDynamicIndexing(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  get shaderUniformTexelBufferArrayDynamicIndexing() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  set shaderUniformTexelBufferArrayDynamicIndexing(value) {
    this.memoryViewUint32[0x5] = value | 0;
  }
  get shaderStorageTexelBufferArrayDynamicIndexing() {
    return this.memoryViewUint32[0x6] !== 0;
  }
  set shaderStorageTexelBufferArrayDynamicIndexing(value) {
    this.memoryViewUint32[0x6] = value | 0;
  }
  get shaderUniformBufferArrayNonUniformIndexing() {
    return this.memoryViewUint32[0x7] !== 0;
  }
  set shaderUniformBufferArrayNonUniformIndexing(value) {
    this.memoryViewUint32[0x7] = value | 0;
  }
  get shaderSampledImageArrayNonUniformIndexing() {
    return this.memoryViewUint32[0x8] !== 0;
  }
  set shaderSampledImageArrayNonUniformIndexing(value) {
    this.memoryViewUint32[0x8] = value | 0;
  }
  get shaderStorageBufferArrayNonUniformIndexing() {
    return this.memoryViewUint32[0x9] !== 0;
  }
  set shaderStorageBufferArrayNonUniformIndexing(value) {
    this.memoryViewUint32[0x9] = value | 0;
  }
  get shaderStorageImageArrayNonUniformIndexing() {
    return this.memoryViewUint32[0xA] !== 0;
  }
  set shaderStorageImageArrayNonUniformIndexing(value) {
    this.memoryViewUint32[0xA] = value | 0;
  }
  get shaderInputAttachmentArrayNonUniformIndexing() {
    return this.memoryViewUint32[0xB] !== 0;
  }
  set shaderInputAttachmentArrayNonUniformIndexing(value) {
    this.memoryViewUint32[0xB] = value | 0;
  }
  get shaderUniformTexelBufferArrayNonUniformIndexing() {
    return this.memoryViewUint32[0xC] !== 0;
  }
  set shaderUniformTexelBufferArrayNonUniformIndexing(value) {
    this.memoryViewUint32[0xC] = value | 0;
  }
  get shaderStorageTexelBufferArrayNonUniformIndexing() {
    return this.memoryViewUint32[0xD] !== 0;
  }
  set shaderStorageTexelBufferArrayNonUniformIndexing(value) {
    this.memoryViewUint32[0xD] = value | 0;
  }
  get descriptorBindingUniformBufferUpdateAfterBind() {
    return this.memoryViewUint32[0xE] !== 0;
  }
  set descriptorBindingUniformBufferUpdateAfterBind(value) {
    this.memoryViewUint32[0xE] = value | 0;
  }
  get descriptorBindingSampledImageUpdateAfterBind() {
    return this.memoryViewUint32[0xF] !== 0;
  }
  set descriptorBindingSampledImageUpdateAfterBind(value) {
    this.memoryViewUint32[0xF] = value | 0;
  }
  get descriptorBindingStorageImageUpdateAfterBind() {
    return this.memoryViewUint32[0x10] !== 0;
  }
  set descriptorBindingStorageImageUpdateAfterBind(value) {
    this.memoryViewUint32[0x10] = value | 0;
  }
  get descriptorBindingStorageBufferUpdateAfterBind() {
    return this.memoryViewUint32[0x11] !== 0;
  }
  set descriptorBindingStorageBufferUpdateAfterBind(value) {
    this.memoryViewUint32[0x11] = value | 0;
  }
  get descriptorBindingUniformTexelBufferUpdateAfterBind() {
    return this.memoryViewUint32[0x12] !== 0;
  }
  set descriptorBindingUniformTexelBufferUpdateAfterBind(value) {
    this.memoryViewUint32[0x12] = value | 0;
  }
  get descriptorBindingStorageTexelBufferUpdateAfterBind() {
    return this.memoryViewUint32[0x13] !== 0;
  }
  set descriptorBindingStorageTexelBufferUpdateAfterBind(value) {
    this.memoryViewUint32[0x13] = value | 0;
  }
  get descriptorBindingUpdateUnusedWhilePending() {
    return this.memoryViewUint32[0x14] !== 0;
  }
  set descriptorBindingUpdateUnusedWhilePending(value) {
    this.memoryViewUint32[0x14] = value | 0;
  }
  get descriptorBindingPartiallyBound() {
    return this.memoryViewUint32[0x15] !== 0;
  }
  set descriptorBindingPartiallyBound(value) {
    this.memoryViewUint32[0x15] = value | 0;
  }
  get descriptorBindingVariableDescriptorCount() {
    return this.memoryViewUint32[0x16] !== 0;
  }
  set descriptorBindingVariableDescriptorCount(value) {
    this.memoryViewUint32[0x16] = value | 0;
  }
  get runtimeDescriptorArray() {
    return this.memoryViewUint32[0x17] !== 0;
  }
  set runtimeDescriptorArray(value) {
    this.memoryViewUint32[0x17] = value | 0;
  }
  
};

VkPhysicalDeviceDescriptorIndexingFeaturesEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceDescriptorIndexingFeaturesEXT.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPhysicalDeviceDescriptorIndexingFeaturesEXT.byteLength = 0x60;

VkPhysicalDeviceDescriptorIndexingFeaturesEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  shaderInputAttachmentArrayDynamicIndexing: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  shaderUniformTexelBufferArrayDynamicIndexing: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  shaderStorageTexelBufferArrayDynamicIndexing: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
  shaderUniformBufferArrayNonUniformIndexing: {
    byteOffset: 0x1C,
    byteLength: 0x4
  },
  shaderSampledImageArrayNonUniformIndexing: {
    byteOffset: 0x20,
    byteLength: 0x4
  },
  shaderStorageBufferArrayNonUniformIndexing: {
    byteOffset: 0x24,
    byteLength: 0x4
  },
  shaderStorageImageArrayNonUniformIndexing: {
    byteOffset: 0x28,
    byteLength: 0x4
  },
  shaderInputAttachmentArrayNonUniformIndexing: {
    byteOffset: 0x2C,
    byteLength: 0x4
  },
  shaderUniformTexelBufferArrayNonUniformIndexing: {
    byteOffset: 0x30,
    byteLength: 0x4
  },
  shaderStorageTexelBufferArrayNonUniformIndexing: {
    byteOffset: 0x34,
    byteLength: 0x4
  },
  descriptorBindingUniformBufferUpdateAfterBind: {
    byteOffset: 0x38,
    byteLength: 0x4
  },
  descriptorBindingSampledImageUpdateAfterBind: {
    byteOffset: 0x3C,
    byteLength: 0x4
  },
  descriptorBindingStorageImageUpdateAfterBind: {
    byteOffset: 0x40,
    byteLength: 0x4
  },
  descriptorBindingStorageBufferUpdateAfterBind: {
    byteOffset: 0x44,
    byteLength: 0x4
  },
  descriptorBindingUniformTexelBufferUpdateAfterBind: {
    byteOffset: 0x48,
    byteLength: 0x4
  },
  descriptorBindingStorageTexelBufferUpdateAfterBind: {
    byteOffset: 0x4C,
    byteLength: 0x4
  },
  descriptorBindingUpdateUnusedWhilePending: {
    byteOffset: 0x50,
    byteLength: 0x4
  },
  descriptorBindingPartiallyBound: {
    byteOffset: 0x54,
    byteLength: 0x4
  },
  descriptorBindingVariableDescriptorCount: {
    byteOffset: 0x58,
    byteLength: 0x4
  },
  runtimeDescriptorArray: {
    byteOffset: 0x5C,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceDescriptorIndexingPropertiesEXT **/
class VkPhysicalDeviceDescriptorIndexingPropertiesEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x70) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x70) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x70) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x70);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    this.sType = 0x3B9D3EEA;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceDescriptorIndexingPropertiesEXT.pNext' isn't allowed to be filled");
  }
  get maxUpdateAfterBindDescriptorsInAllPools() {
    return this.memoryViewUint32[0x4];
  }
  get shaderUniformBufferArrayNonUniformIndexingNative() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  get shaderSampledImageArrayNonUniformIndexingNative() {
    return this.memoryViewUint32[0x6] !== 0;
  }
  get shaderStorageBufferArrayNonUniformIndexingNative() {
    return this.memoryViewUint32[0x7] !== 0;
  }
  get shaderStorageImageArrayNonUniformIndexingNative() {
    return this.memoryViewUint32[0x8] !== 0;
  }
  get shaderInputAttachmentArrayNonUniformIndexingNative() {
    return this.memoryViewUint32[0x9] !== 0;
  }
  get robustBufferAccessUpdateAfterBind() {
    return this.memoryViewUint32[0xA] !== 0;
  }
  get quadDivergentImplicitLod() {
    return this.memoryViewUint32[0xB] !== 0;
  }
  get maxPerStageDescriptorUpdateAfterBindSamplers() {
    return this.memoryViewUint32[0xC];
  }
  get maxPerStageDescriptorUpdateAfterBindUniformBuffers() {
    return this.memoryViewUint32[0xD];
  }
  get maxPerStageDescriptorUpdateAfterBindStorageBuffers() {
    return this.memoryViewUint32[0xE];
  }
  get maxPerStageDescriptorUpdateAfterBindSampledImages() {
    return this.memoryViewUint32[0xF];
  }
  get maxPerStageDescriptorUpdateAfterBindStorageImages() {
    return this.memoryViewUint32[0x10];
  }
  get maxPerStageDescriptorUpdateAfterBindInputAttachments() {
    return this.memoryViewUint32[0x11];
  }
  get maxPerStageUpdateAfterBindResources() {
    return this.memoryViewUint32[0x12];
  }
  get maxDescriptorSetUpdateAfterBindSamplers() {
    return this.memoryViewUint32[0x13];
  }
  get maxDescriptorSetUpdateAfterBindUniformBuffers() {
    return this.memoryViewUint32[0x14];
  }
  get maxDescriptorSetUpdateAfterBindUniformBuffersDynamic() {
    return this.memoryViewUint32[0x15];
  }
  get maxDescriptorSetUpdateAfterBindStorageBuffers() {
    return this.memoryViewUint32[0x16];
  }
  get maxDescriptorSetUpdateAfterBindStorageBuffersDynamic() {
    return this.memoryViewUint32[0x17];
  }
  get maxDescriptorSetUpdateAfterBindSampledImages() {
    return this.memoryViewUint32[0x18];
  }
  get maxDescriptorSetUpdateAfterBindStorageImages() {
    return this.memoryViewUint32[0x19];
  }
  get maxDescriptorSetUpdateAfterBindInputAttachments() {
    return this.memoryViewUint32[0x1A];
  }
  
};

VkPhysicalDeviceDescriptorIndexingPropertiesEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceDescriptorIndexingPropertiesEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x70));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x70), 0x0);
  
  
};

VkPhysicalDeviceDescriptorIndexingPropertiesEXT.byteLength = 0x70;

VkPhysicalDeviceDescriptorIndexingPropertiesEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  maxUpdateAfterBindDescriptorsInAllPools: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  shaderUniformBufferArrayNonUniformIndexingNative: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  shaderSampledImageArrayNonUniformIndexingNative: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
  shaderStorageBufferArrayNonUniformIndexingNative: {
    byteOffset: 0x1C,
    byteLength: 0x4
  },
  shaderStorageImageArrayNonUniformIndexingNative: {
    byteOffset: 0x20,
    byteLength: 0x4
  },
  shaderInputAttachmentArrayNonUniformIndexingNative: {
    byteOffset: 0x24,
    byteLength: 0x4
  },
  robustBufferAccessUpdateAfterBind: {
    byteOffset: 0x28,
    byteLength: 0x4
  },
  quadDivergentImplicitLod: {
    byteOffset: 0x2C,
    byteLength: 0x4
  },
  maxPerStageDescriptorUpdateAfterBindSamplers: {
    byteOffset: 0x30,
    byteLength: 0x4
  },
  maxPerStageDescriptorUpdateAfterBindUniformBuffers: {
    byteOffset: 0x34,
    byteLength: 0x4
  },
  maxPerStageDescriptorUpdateAfterBindStorageBuffers: {
    byteOffset: 0x38,
    byteLength: 0x4
  },
  maxPerStageDescriptorUpdateAfterBindSampledImages: {
    byteOffset: 0x3C,
    byteLength: 0x4
  },
  maxPerStageDescriptorUpdateAfterBindStorageImages: {
    byteOffset: 0x40,
    byteLength: 0x4
  },
  maxPerStageDescriptorUpdateAfterBindInputAttachments: {
    byteOffset: 0x44,
    byteLength: 0x4
  },
  maxPerStageUpdateAfterBindResources: {
    byteOffset: 0x48,
    byteLength: 0x4
  },
  maxDescriptorSetUpdateAfterBindSamplers: {
    byteOffset: 0x4C,
    byteLength: 0x4
  },
  maxDescriptorSetUpdateAfterBindUniformBuffers: {
    byteOffset: 0x50,
    byteLength: 0x4
  },
  maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: {
    byteOffset: 0x54,
    byteLength: 0x4
  },
  maxDescriptorSetUpdateAfterBindStorageBuffers: {
    byteOffset: 0x58,
    byteLength: 0x4
  },
  maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: {
    byteOffset: 0x5C,
    byteLength: 0x4
  },
  maxDescriptorSetUpdateAfterBindSampledImages: {
    byteOffset: 0x60,
    byteLength: 0x4
  },
  maxDescriptorSetUpdateAfterBindStorageImages: {
    byteOffset: 0x64,
    byteLength: 0x4
  },
  maxDescriptorSetUpdateAfterBindInputAttachments: {
    byteOffset: 0x68,
    byteLength: 0x4
  },
};
/** VkDescriptorSetLayoutBindingFlagsCreateInfoEXT **/
class VkDescriptorSetLayoutBindingFlagsCreateInfoEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this._pBindingFlags = null;
    this.sType = 0x3B9D3EE8;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.bindingCount !== void 0) this.bindingCount = opts.bindingCount;
      if (opts.pBindingFlags !== void 0) this.pBindingFlags = opts.pBindingFlags;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDescriptorSetLayoutBindingFlagsCreateInfoEXT.pNext' isn't allowed to be filled");
  }
  get bindingCount() {
    return this.memoryViewUint32[0x4];
  }
  set bindingCount(value) {
    
    this.memoryViewUint32[0x4] = value;
  }
  get pBindingFlags() {
    return this._pBindingFlags;
  }
  set pBindingFlags(value) {
    if (value !== null ) {
      this._pBindingFlags = value;
      this.memoryViewBigInt64[0x3] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pBindingFlags = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } 
    
  }
  
};

VkDescriptorSetLayoutBindingFlagsCreateInfoEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDescriptorSetLayoutBindingFlagsCreateInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkDescriptorSetLayoutBindingFlagsCreateInfoEXT.byteLength = 0x20;

VkDescriptorSetLayoutBindingFlagsCreateInfoEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  bindingCount: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  pBindingFlags: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
};
/** VkDescriptorSetVariableDescriptorCountAllocateInfoEXT **/
class VkDescriptorSetVariableDescriptorCountAllocateInfoEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this._pDescriptorCounts = null;
    this.sType = 0x3B9D3EEB;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.descriptorSetCount !== void 0) this.descriptorSetCount = opts.descriptorSetCount;
      if (opts.pDescriptorCounts !== void 0) this.pDescriptorCounts = opts.pDescriptorCounts;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDescriptorSetVariableDescriptorCountAllocateInfoEXT.pNext' isn't allowed to be filled");
  }
  get descriptorSetCount() {
    return this.memoryViewUint32[0x4];
  }
  set descriptorSetCount(value) {
    
    this.memoryViewUint32[0x4] = value;
  }
  get pDescriptorCounts() {
    return this._pDescriptorCounts;
  }
  set pDescriptorCounts(value) {
    if (value !== null ) {
      this._pDescriptorCounts = value;
      this.memoryViewBigInt64[0x3] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pDescriptorCounts = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } 
    
  }
  
};

VkDescriptorSetVariableDescriptorCountAllocateInfoEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDescriptorSetVariableDescriptorCountAllocateInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkDescriptorSetVariableDescriptorCountAllocateInfoEXT.byteLength = 0x20;

VkDescriptorSetVariableDescriptorCountAllocateInfoEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  descriptorSetCount: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  pDescriptorCounts: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
};
/** VkDescriptorSetVariableDescriptorCountLayoutSupportEXT **/
class VkDescriptorSetVariableDescriptorCountLayoutSupportEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9D3EEC;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDescriptorSetVariableDescriptorCountLayoutSupportEXT.pNext' isn't allowed to be filled");
  }
  get maxVariableDescriptorCount() {
    return this.memoryViewUint32[0x4];
  }
  
};

VkDescriptorSetVariableDescriptorCountLayoutSupportEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDescriptorSetVariableDescriptorCountLayoutSupportEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x18));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x18), 0x0);
  
  
};

VkDescriptorSetVariableDescriptorCountLayoutSupportEXT.byteLength = 0x18;

VkDescriptorSetVariableDescriptorCountLayoutSupportEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  maxVariableDescriptorCount: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkAttachmentDescription2KHR **/
class VkAttachmentDescription2KHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x38) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x38) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x38);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    
    
    
    
    
    
    
    this.sType = 0x3B9C73C8;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.format !== void 0) this.format = opts.format;
      if (opts.samples !== void 0) this.samples = opts.samples;
      if (opts.loadOp !== void 0) this.loadOp = opts.loadOp;
      if (opts.storeOp !== void 0) this.storeOp = opts.storeOp;
      if (opts.stencilLoadOp !== void 0) this.stencilLoadOp = opts.stencilLoadOp;
      if (opts.stencilStoreOp !== void 0) this.stencilStoreOp = opts.stencilStoreOp;
      if (opts.initialLayout !== void 0) this.initialLayout = opts.initialLayout;
      if (opts.finalLayout !== void 0) this.finalLayout = opts.finalLayout;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkAttachmentDescription2KHR.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get format() {
    return this.memoryViewInt32[0x5];
  }
  set format(value) {
    
    this.memoryViewInt32[0x5] = value;
  }
  get samples() {
    return this.memoryViewInt32[0x6];
  }
  set samples(value) {
    
    this.memoryViewInt32[0x6] = value;
  }
  get loadOp() {
    return this.memoryViewInt32[0x7];
  }
  set loadOp(value) {
    
    this.memoryViewInt32[0x7] = value;
  }
  get storeOp() {
    return this.memoryViewInt32[0x8];
  }
  set storeOp(value) {
    
    this.memoryViewInt32[0x8] = value;
  }
  get stencilLoadOp() {
    return this.memoryViewInt32[0x9];
  }
  set stencilLoadOp(value) {
    
    this.memoryViewInt32[0x9] = value;
  }
  get stencilStoreOp() {
    return this.memoryViewInt32[0xA];
  }
  set stencilStoreOp(value) {
    
    this.memoryViewInt32[0xA] = value;
  }
  get initialLayout() {
    return this.memoryViewInt32[0xB];
  }
  set initialLayout(value) {
    
    this.memoryViewInt32[0xB] = value;
  }
  get finalLayout() {
    return this.memoryViewInt32[0xC];
  }
  set finalLayout(value) {
    
    this.memoryViewInt32[0xC] = value;
  }
  
};

VkAttachmentDescription2KHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkAttachmentDescription2KHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkAttachmentDescription2KHR.byteLength = 0x38;

VkAttachmentDescription2KHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  flags: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  format: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  samples: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
  loadOp: {
    byteOffset: 0x1C,
    byteLength: 0x4
  },
  storeOp: {
    byteOffset: 0x20,
    byteLength: 0x4
  },
  stencilLoadOp: {
    byteOffset: 0x24,
    byteLength: 0x4
  },
  stencilStoreOp: {
    byteOffset: 0x28,
    byteLength: 0x4
  },
  initialLayout: {
    byteOffset: 0x2C,
    byteLength: 0x4
  },
  finalLayout: {
    byteOffset: 0x30,
    byteLength: 0x4
  },
};
/** VkAttachmentReference2KHR **/
class VkAttachmentReference2KHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    
    this.sType = 0x3B9C73C9;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.attachment !== void 0) this.attachment = opts.attachment;
      if (opts.layout !== void 0) this.layout = opts.layout;
      if (opts.aspectMask !== void 0) this.aspectMask = opts.aspectMask;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkAttachmentReference2KHR.pNext' isn't allowed to be filled");
  }
  get attachment() {
    return this.memoryViewUint32[0x4];
  }
  set attachment(value) {
    
    this.memoryViewUint32[0x4] = value;
  }
  get layout() {
    return this.memoryViewInt32[0x5];
  }
  set layout(value) {
    
    this.memoryViewInt32[0x5] = value;
  }
  get aspectMask() {
    return this.memoryViewInt32[0x6];
  }
  set aspectMask(value) {
    
    this.memoryViewInt32[0x6] = value;
  }
  
};

VkAttachmentReference2KHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkAttachmentReference2KHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkAttachmentReference2KHR.byteLength = 0x20;

VkAttachmentReference2KHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  attachment: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  layout: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  aspectMask: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
};
/** VkSubpassDescription2KHR **/
class VkSubpassDescription2KHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x58) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x58) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x58) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x58);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    
    
    this._pInputAttachments = null;
    this._pInputAttachmentsNative = null;
    
    this._pColorAttachments = null;
    this._pColorAttachmentsNative = null;
    this._pResolveAttachments = null;
    this._pResolveAttachmentsNative = null;
    this._pDepthStencilAttachment = null;
    
    this._pPreserveAttachments = null;
    this.sType = 0x3B9C73CA;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.pipelineBindPoint !== void 0) this.pipelineBindPoint = opts.pipelineBindPoint;
      if (opts.viewMask !== void 0) this.viewMask = opts.viewMask;
      if (opts.inputAttachmentCount !== void 0) this.inputAttachmentCount = opts.inputAttachmentCount;
      if (opts.pInputAttachments !== void 0) this.pInputAttachments = opts.pInputAttachments;
      if (opts.colorAttachmentCount !== void 0) this.colorAttachmentCount = opts.colorAttachmentCount;
      if (opts.pColorAttachments !== void 0) this.pColorAttachments = opts.pColorAttachments;
      if (opts.pResolveAttachments !== void 0) this.pResolveAttachments = opts.pResolveAttachments;
      if (opts.pDepthStencilAttachment !== void 0) this.pDepthStencilAttachment = opts.pDepthStencilAttachment;
      if (opts.preserveAttachmentCount !== void 0) this.preserveAttachmentCount = opts.preserveAttachmentCount;
      if (opts.pPreserveAttachments !== void 0) this.pPreserveAttachments = opts.pPreserveAttachments;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null ) {
      let {sType} = value;
      
      switch (sType) {
          
        case 0x3B9DD359:
          break;
        default:
          throw new TypeError("Invalid type for 'VkSubpassDescription2KHR.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get pipelineBindPoint() {
    return this.memoryViewInt32[0x5];
  }
  set pipelineBindPoint(value) {
    
    this.memoryViewInt32[0x5] = value;
  }
  get viewMask() {
    return this.memoryViewUint32[0x6];
  }
  set viewMask(value) {
    
    this.memoryViewUint32[0x6] = value;
  }
  get inputAttachmentCount() {
    return this.memoryViewUint32[0x7];
  }
  set inputAttachmentCount(value) {
    
    this.memoryViewUint32[0x7] = value;
  }
  get pInputAttachments() {
    return this._pInputAttachments;
  }
  set pInputAttachments(value) {
    if (value !== null ) {
      this._pInputAttachments = value;
    } else if (value === null) {
      this._pInputAttachments = null;
    } 
    
  }
  get colorAttachmentCount() {
    return this.memoryViewUint32[0xA];
  }
  set colorAttachmentCount(value) {
    
    this.memoryViewUint32[0xA] = value;
  }
  get pColorAttachments() {
    return this._pColorAttachments;
  }
  set pColorAttachments(value) {
    if (value !== null ) {
      this._pColorAttachments = value;
    } else if (value === null) {
      this._pColorAttachments = null;
    } 
    
  }
  get pResolveAttachments() {
    return this._pResolveAttachments;
  }
  set pResolveAttachments(value) {
    if (value !== null ) {
      this._pResolveAttachments = value;
    } else if (value === null) {
      this._pResolveAttachments = null;
    } 
    
  }
  get pDepthStencilAttachment() {
    return this._pDepthStencilAttachment;
  }
  set pDepthStencilAttachment(value) {
    if (value !== null ) {
      value.flush();
      this._pDepthStencilAttachment = value;
      this.memoryViewBigInt64[0x8] = value.memoryAddress;
      
    } else if (value === null) {
      this._pDepthStencilAttachment = null;
      this.memoryViewBigInt64[0x8] = BI0;
    } 
    
  }
  get preserveAttachmentCount() {
    return this.memoryViewUint32[0x12];
  }
  set preserveAttachmentCount(value) {
    
    this.memoryViewUint32[0x12] = value;
  }
  get pPreserveAttachments() {
    return this._pPreserveAttachments;
  }
  set pPreserveAttachments(value) {
    if (value !== null ) {
      this._pPreserveAttachments = value;
      this.memoryViewBigInt64[0xA] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pPreserveAttachments = null;
      this.memoryViewBigInt64[0xA] = BI0;
    } 
    
  }
  
};

VkSubpassDescription2KHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pInputAttachments !== null) {
    let array = this._pInputAttachments;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pInputAttachmentsNative = nativeArray;
    this.memoryViewBigInt64[0x4] = nativeArray.address;
  }
  
  
  if (this._pColorAttachments !== null) {
    let array = this._pColorAttachments;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pColorAttachmentsNative = nativeArray;
    this.memoryViewBigInt64[0x6] = nativeArray.address;
  }
  
  
  if (this._pResolveAttachments !== null) {
    let array = this._pResolveAttachments;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pResolveAttachmentsNative = nativeArray;
    this.memoryViewBigInt64[0x7] = nativeArray.address;
  }
  
  return true;
};

VkSubpassDescription2KHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
  
  
  
  
};

VkSubpassDescription2KHR.byteLength = 0x58;

VkSubpassDescription2KHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  flags: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  pipelineBindPoint: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  viewMask: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
  inputAttachmentCount: {
    byteOffset: 0x1C,
    byteLength: 0x4
  },
  pInputAttachments: {
    byteOffset: 0x20,
    byteLength: 0x8
  },
  colorAttachmentCount: {
    byteOffset: 0x28,
    byteLength: 0x4
  },
  pColorAttachments: {
    byteOffset: 0x30,
    byteLength: 0x8
  },
  pResolveAttachments: {
    byteOffset: 0x38,
    byteLength: 0x8
  },
  pDepthStencilAttachment: {
    byteOffset: 0x40,
    byteLength: 0x8
  },
  preserveAttachmentCount: {
    byteOffset: 0x48,
    byteLength: 0x4
  },
  pPreserveAttachments: {
    byteOffset: 0x50,
    byteLength: 0x8
  },
};
/** VkSubpassDependency2KHR **/
class VkSubpassDependency2KHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x30) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x30) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x30) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x30);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    
    
    
    
    
    
    this.sType = 0x3B9C73CB;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.srcSubpass !== void 0) this.srcSubpass = opts.srcSubpass;
      if (opts.dstSubpass !== void 0) this.dstSubpass = opts.dstSubpass;
      if (opts.srcStageMask !== void 0) this.srcStageMask = opts.srcStageMask;
      if (opts.dstStageMask !== void 0) this.dstStageMask = opts.dstStageMask;
      if (opts.srcAccessMask !== void 0) this.srcAccessMask = opts.srcAccessMask;
      if (opts.dstAccessMask !== void 0) this.dstAccessMask = opts.dstAccessMask;
      if (opts.dependencyFlags !== void 0) this.dependencyFlags = opts.dependencyFlags;
      if (opts.viewOffset !== void 0) this.viewOffset = opts.viewOffset;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkSubpassDependency2KHR.pNext' isn't allowed to be filled");
  }
  get srcSubpass() {
    return this.memoryViewUint32[0x4];
  }
  set srcSubpass(value) {
    
    this.memoryViewUint32[0x4] = value;
  }
  get dstSubpass() {
    return this.memoryViewUint32[0x5];
  }
  set dstSubpass(value) {
    
    this.memoryViewUint32[0x5] = value;
  }
  get srcStageMask() {
    return this.memoryViewInt32[0x6];
  }
  set srcStageMask(value) {
    
    this.memoryViewInt32[0x6] = value;
  }
  get dstStageMask() {
    return this.memoryViewInt32[0x7];
  }
  set dstStageMask(value) {
    
    this.memoryViewInt32[0x7] = value;
  }
  get srcAccessMask() {
    return this.memoryViewInt32[0x8];
  }
  set srcAccessMask(value) {
    
    this.memoryViewInt32[0x8] = value;
  }
  get dstAccessMask() {
    return this.memoryViewInt32[0x9];
  }
  set dstAccessMask(value) {
    
    this.memoryViewInt32[0x9] = value;
  }
  get dependencyFlags() {
    return this.memoryViewInt32[0xA];
  }
  set dependencyFlags(value) {
    
    this.memoryViewInt32[0xA] = value;
  }
  get viewOffset() {
    return this.memoryViewInt32[0xB];
  }
  set viewOffset(value) {
    
    this.memoryViewInt32[0xB] = value;
  }
  
};

VkSubpassDependency2KHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkSubpassDependency2KHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkSubpassDependency2KHR.byteLength = 0x30;

VkSubpassDependency2KHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  srcSubpass: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  dstSubpass: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  srcStageMask: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
  dstStageMask: {
    byteOffset: 0x1C,
    byteLength: 0x4
  },
  srcAccessMask: {
    byteOffset: 0x20,
    byteLength: 0x4
  },
  dstAccessMask: {
    byteOffset: 0x24,
    byteLength: 0x4
  },
  dependencyFlags: {
    byteOffset: 0x28,
    byteLength: 0x4
  },
  viewOffset: {
    byteOffset: 0x2C,
    byteLength: 0x4
  },
};
/** VkRenderPassCreateInfo2KHR **/
class VkRenderPassCreateInfo2KHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x50) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x50) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x50) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x50);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    this._pAttachments = null;
    this._pAttachmentsNative = null;
    
    this._pSubpasses = null;
    this._pSubpassesNative = null;
    
    this._pDependencies = null;
    this._pDependenciesNative = null;
    
    this._pCorrelatedViewMasks = null;
    this.sType = 0x3B9C73CC;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.attachmentCount !== void 0) this.attachmentCount = opts.attachmentCount;
      if (opts.pAttachments !== void 0) this.pAttachments = opts.pAttachments;
      if (opts.subpassCount !== void 0) this.subpassCount = opts.subpassCount;
      if (opts.pSubpasses !== void 0) this.pSubpasses = opts.pSubpasses;
      if (opts.dependencyCount !== void 0) this.dependencyCount = opts.dependencyCount;
      if (opts.pDependencies !== void 0) this.pDependencies = opts.pDependencies;
      if (opts.correlatedViewMaskCount !== void 0) this.correlatedViewMaskCount = opts.correlatedViewMaskCount;
      if (opts.pCorrelatedViewMasks !== void 0) this.pCorrelatedViewMasks = opts.pCorrelatedViewMasks;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkRenderPassCreateInfo2KHR.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get attachmentCount() {
    return this.memoryViewUint32[0x5];
  }
  set attachmentCount(value) {
    
    this.memoryViewUint32[0x5] = value;
  }
  get pAttachments() {
    return this._pAttachments;
  }
  set pAttachments(value) {
    if (value !== null ) {
      this._pAttachments = value;
    } else if (value === null) {
      this._pAttachments = null;
    } 
    
  }
  get subpassCount() {
    return this.memoryViewUint32[0x8];
  }
  set subpassCount(value) {
    
    this.memoryViewUint32[0x8] = value;
  }
  get pSubpasses() {
    return this._pSubpasses;
  }
  set pSubpasses(value) {
    if (value !== null ) {
      this._pSubpasses = value;
    } else if (value === null) {
      this._pSubpasses = null;
    } 
    
  }
  get dependencyCount() {
    return this.memoryViewUint32[0xC];
  }
  set dependencyCount(value) {
    
    this.memoryViewUint32[0xC] = value;
  }
  get pDependencies() {
    return this._pDependencies;
  }
  set pDependencies(value) {
    if (value !== null ) {
      this._pDependencies = value;
    } else if (value === null) {
      this._pDependencies = null;
    } 
    
  }
  get correlatedViewMaskCount() {
    return this.memoryViewUint32[0x10];
  }
  set correlatedViewMaskCount(value) {
    
    this.memoryViewUint32[0x10] = value;
  }
  get pCorrelatedViewMasks() {
    return this._pCorrelatedViewMasks;
  }
  set pCorrelatedViewMasks(value) {
    if (value !== null ) {
      this._pCorrelatedViewMasks = value;
      this.memoryViewBigInt64[0x9] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pCorrelatedViewMasks = null;
      this.memoryViewBigInt64[0x9] = BI0;
    } 
    
  }
  
};

VkRenderPassCreateInfo2KHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pAttachments !== null) {
    let array = this._pAttachments;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pAttachmentsNative = nativeArray;
    this.memoryViewBigInt64[0x3] = nativeArray.address;
  }
  
  
  if (this._pSubpasses !== null) {
    let array = this._pSubpasses;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pSubpassesNative = nativeArray;
    this.memoryViewBigInt64[0x5] = nativeArray.address;
  }
  
  
  if (this._pDependencies !== null) {
    let array = this._pDependencies;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pDependenciesNative = nativeArray;
    this.memoryViewBigInt64[0x7] = nativeArray.address;
  }
  
  return true;
};

VkRenderPassCreateInfo2KHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
  
  
  
  
};

VkRenderPassCreateInfo2KHR.byteLength = 0x50;

VkRenderPassCreateInfo2KHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  flags: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  attachmentCount: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  pAttachments: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
  subpassCount: {
    byteOffset: 0x20,
    byteLength: 0x4
  },
  pSubpasses: {
    byteOffset: 0x28,
    byteLength: 0x8
  },
  dependencyCount: {
    byteOffset: 0x30,
    byteLength: 0x4
  },
  pDependencies: {
    byteOffset: 0x38,
    byteLength: 0x8
  },
  correlatedViewMaskCount: {
    byteOffset: 0x40,
    byteLength: 0x4
  },
  pCorrelatedViewMasks: {
    byteOffset: 0x48,
    byteLength: 0x8
  },
};
/** VkSubpassBeginInfoKHR **/
class VkSubpassBeginInfoKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9C73CD;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.contents !== void 0) this.contents = opts.contents;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkSubpassBeginInfoKHR.pNext' isn't allowed to be filled");
  }
  get contents() {
    return this.memoryViewInt32[0x4];
  }
  set contents(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkSubpassBeginInfoKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkSubpassBeginInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkSubpassBeginInfoKHR.byteLength = 0x18;

VkSubpassBeginInfoKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  contents: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkSubpassEndInfoKHR **/
class VkSubpassEndInfoKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x10) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x10) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x10);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this.sType = 0x3B9C73CE;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkSubpassEndInfoKHR.pNext' isn't allowed to be filled");
  }
  
};

VkSubpassEndInfoKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkSubpassEndInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkSubpassEndInfoKHR.byteLength = 0x10;

VkSubpassEndInfoKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
};
/** VkVertexInputBindingDivisorDescriptionEXT **/
class VkVertexInputBindingDivisorDescriptionEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x8) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x8);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    
    
    if (typeof opts === "object") {
      if (opts.binding !== void 0) this.binding = opts.binding;
      if (opts.divisor !== void 0) this.divisor = opts.divisor;
      
    }
  }
  get binding() {
    return this.memoryViewUint32[0x0];
  }
  set binding(value) {
    
    this.memoryViewUint32[0x0] = value;
  }
  get divisor() {
    return this.memoryViewUint32[0x1];
  }
  set divisor(value) {
    
    this.memoryViewUint32[0x1] = value;
  }
  
};

VkVertexInputBindingDivisorDescriptionEXT.prototype.flush = function flush() {
  
  return true;
};

VkVertexInputBindingDivisorDescriptionEXT.prototype.reflect = function reflect(memoryAddress) {
  
};

VkVertexInputBindingDivisorDescriptionEXT.byteLength = 0x8;

VkVertexInputBindingDivisorDescriptionEXT.memoryLayout = {
  binding: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  divisor: {
    byteOffset: 0x4,
    byteLength: 0x4
  },
};
/** VkPipelineVertexInputDivisorStateCreateInfoEXT **/
class VkPipelineVertexInputDivisorStateCreateInfoEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this._pVertexBindingDivisors = null;
    this._pVertexBindingDivisorsNative = null;
    this.sType = 0x3B9DB031;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.vertexBindingDivisorCount !== void 0) this.vertexBindingDivisorCount = opts.vertexBindingDivisorCount;
      if (opts.pVertexBindingDivisors !== void 0) this.pVertexBindingDivisors = opts.pVertexBindingDivisors;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPipelineVertexInputDivisorStateCreateInfoEXT.pNext' isn't allowed to be filled");
  }
  get vertexBindingDivisorCount() {
    return this.memoryViewUint32[0x4];
  }
  set vertexBindingDivisorCount(value) {
    
    this.memoryViewUint32[0x4] = value;
  }
  get pVertexBindingDivisors() {
    return this._pVertexBindingDivisors;
  }
  set pVertexBindingDivisors(value) {
    if (value !== null ) {
      this._pVertexBindingDivisors = value;
    } else if (value === null) {
      this._pVertexBindingDivisors = null;
    } 
    
  }
  
};

VkPipelineVertexInputDivisorStateCreateInfoEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pVertexBindingDivisors !== null) {
    let array = this._pVertexBindingDivisors;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pVertexBindingDivisorsNative = nativeArray;
    this.memoryViewBigInt64[0x3] = nativeArray.address;
  }
  
  return true;
};

VkPipelineVertexInputDivisorStateCreateInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
};

VkPipelineVertexInputDivisorStateCreateInfoEXT.byteLength = 0x20;

VkPipelineVertexInputDivisorStateCreateInfoEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  vertexBindingDivisorCount: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  pVertexBindingDivisors: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
};
/** VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT **/
class VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9DB030;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT.pNext' isn't allowed to be filled");
  }
  get maxVertexAttribDivisor() {
    return this.memoryViewUint32[0x4];
  }
  
};

VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x18));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x18), 0x0);
  
  
};

VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT.byteLength = 0x18;

VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  maxVertexAttribDivisor: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkPhysicalDevicePCIBusInfoPropertiesEXT **/
class VkPhysicalDevicePCIBusInfoPropertiesEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    
    
    this.sType = 0x3B9E0620;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDevicePCIBusInfoPropertiesEXT.pNext' isn't allowed to be filled");
  }
  get pciDomain() {
    return this.memoryViewUint32[0x4];
  }
  get pciBus() {
    return this.memoryViewUint32[0x5];
  }
  get pciDevice() {
    return this.memoryViewUint32[0x6];
  }
  get pciFunction() {
    return this.memoryViewUint32[0x7];
  }
  
};

VkPhysicalDevicePCIBusInfoPropertiesEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDevicePCIBusInfoPropertiesEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x20));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x20), 0x0);
  
  
};

VkPhysicalDevicePCIBusInfoPropertiesEXT.byteLength = 0x20;

VkPhysicalDevicePCIBusInfoPropertiesEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  pciDomain: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  pciBus: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  pciDevice: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
  pciFunction: {
    byteOffset: 0x1C,
    byteLength: 0x4
  },
};
/** VkCommandBufferInheritanceConditionalRenderingInfoEXT **/
class VkCommandBufferInheritanceConditionalRenderingInfoEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9C0668;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.conditionalRenderingEnable !== void 0) this.conditionalRenderingEnable = opts.conditionalRenderingEnable;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkCommandBufferInheritanceConditionalRenderingInfoEXT.pNext' isn't allowed to be filled");
  }
  get conditionalRenderingEnable() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set conditionalRenderingEnable(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  
};

VkCommandBufferInheritanceConditionalRenderingInfoEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkCommandBufferInheritanceConditionalRenderingInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkCommandBufferInheritanceConditionalRenderingInfoEXT.byteLength = 0x18;

VkCommandBufferInheritanceConditionalRenderingInfoEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  conditionalRenderingEnable: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkPhysicalDevice8BitStorageFeaturesKHR **/
class VkPhysicalDevice8BitStorageFeaturesKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    
    this.sType = 0x3B9D7D68;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.storageBuffer8BitAccess !== void 0) this.storageBuffer8BitAccess = opts.storageBuffer8BitAccess;
      if (opts.uniformAndStorageBuffer8BitAccess !== void 0) this.uniformAndStorageBuffer8BitAccess = opts.uniformAndStorageBuffer8BitAccess;
      if (opts.storagePushConstant8 !== void 0) this.storagePushConstant8 = opts.storagePushConstant8;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDevice8BitStorageFeaturesKHR.pNext' isn't allowed to be filled");
  }
  get storageBuffer8BitAccess() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set storageBuffer8BitAccess(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  get uniformAndStorageBuffer8BitAccess() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  set uniformAndStorageBuffer8BitAccess(value) {
    this.memoryViewUint32[0x5] = value | 0;
  }
  get storagePushConstant8() {
    return this.memoryViewUint32[0x6] !== 0;
  }
  set storagePushConstant8(value) {
    this.memoryViewUint32[0x6] = value | 0;
  }
  
};

VkPhysicalDevice8BitStorageFeaturesKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDevice8BitStorageFeaturesKHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPhysicalDevice8BitStorageFeaturesKHR.byteLength = 0x20;

VkPhysicalDevice8BitStorageFeaturesKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  storageBuffer8BitAccess: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  uniformAndStorageBuffer8BitAccess: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  storagePushConstant8: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceConditionalRenderingFeaturesEXT **/
class VkPhysicalDeviceConditionalRenderingFeaturesEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    this.sType = 0x3B9C0669;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.conditionalRendering !== void 0) this.conditionalRendering = opts.conditionalRendering;
      if (opts.inheritedConditionalRendering !== void 0) this.inheritedConditionalRendering = opts.inheritedConditionalRendering;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceConditionalRenderingFeaturesEXT.pNext' isn't allowed to be filled");
  }
  get conditionalRendering() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set conditionalRendering(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  get inheritedConditionalRendering() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  set inheritedConditionalRendering(value) {
    this.memoryViewUint32[0x5] = value | 0;
  }
  
};

VkPhysicalDeviceConditionalRenderingFeaturesEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceConditionalRenderingFeaturesEXT.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPhysicalDeviceConditionalRenderingFeaturesEXT.byteLength = 0x18;

VkPhysicalDeviceConditionalRenderingFeaturesEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  conditionalRendering: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  inheritedConditionalRendering: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceVulkanMemoryModelFeaturesKHR **/
class VkPhysicalDeviceVulkanMemoryModelFeaturesKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    
    this.sType = 0x3B9E0238;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.vulkanMemoryModel !== void 0) this.vulkanMemoryModel = opts.vulkanMemoryModel;
      if (opts.vulkanMemoryModelDeviceScope !== void 0) this.vulkanMemoryModelDeviceScope = opts.vulkanMemoryModelDeviceScope;
      if (opts.vulkanMemoryModelAvailabilityVisibilityChains !== void 0) this.vulkanMemoryModelAvailabilityVisibilityChains = opts.vulkanMemoryModelAvailabilityVisibilityChains;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceVulkanMemoryModelFeaturesKHR.pNext' isn't allowed to be filled");
  }
  get vulkanMemoryModel() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set vulkanMemoryModel(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  get vulkanMemoryModelDeviceScope() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  set vulkanMemoryModelDeviceScope(value) {
    this.memoryViewUint32[0x5] = value | 0;
  }
  get vulkanMemoryModelAvailabilityVisibilityChains() {
    return this.memoryViewUint32[0x6] !== 0;
  }
  set vulkanMemoryModelAvailabilityVisibilityChains(value) {
    this.memoryViewUint32[0x6] = value | 0;
  }
  
};

VkPhysicalDeviceVulkanMemoryModelFeaturesKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceVulkanMemoryModelFeaturesKHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPhysicalDeviceVulkanMemoryModelFeaturesKHR.byteLength = 0x20;

VkPhysicalDeviceVulkanMemoryModelFeaturesKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  vulkanMemoryModel: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  vulkanMemoryModelDeviceScope: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  vulkanMemoryModelAvailabilityVisibilityChains: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceShaderAtomicInt64FeaturesKHR **/
class VkPhysicalDeviceShaderAtomicInt64FeaturesKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    this.sType = 0x3B9D8920;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.shaderBufferInt64Atomics !== void 0) this.shaderBufferInt64Atomics = opts.shaderBufferInt64Atomics;
      if (opts.shaderSharedInt64Atomics !== void 0) this.shaderSharedInt64Atomics = opts.shaderSharedInt64Atomics;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceShaderAtomicInt64FeaturesKHR.pNext' isn't allowed to be filled");
  }
  get shaderBufferInt64Atomics() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set shaderBufferInt64Atomics(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  get shaderSharedInt64Atomics() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  set shaderSharedInt64Atomics(value) {
    this.memoryViewUint32[0x5] = value | 0;
  }
  
};

VkPhysicalDeviceShaderAtomicInt64FeaturesKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceShaderAtomicInt64FeaturesKHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPhysicalDeviceShaderAtomicInt64FeaturesKHR.byteLength = 0x18;

VkPhysicalDeviceShaderAtomicInt64FeaturesKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  shaderBufferInt64Atomics: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  shaderSharedInt64Atomics: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT **/
class VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    this.sType = 0x3B9DB032;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.vertexAttributeInstanceRateDivisor !== void 0) this.vertexAttributeInstanceRateDivisor = opts.vertexAttributeInstanceRateDivisor;
      if (opts.vertexAttributeInstanceRateZeroDivisor !== void 0) this.vertexAttributeInstanceRateZeroDivisor = opts.vertexAttributeInstanceRateZeroDivisor;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT.pNext' isn't allowed to be filled");
  }
  get vertexAttributeInstanceRateDivisor() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set vertexAttributeInstanceRateDivisor(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  get vertexAttributeInstanceRateZeroDivisor() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  set vertexAttributeInstanceRateZeroDivisor(value) {
    this.memoryViewUint32[0x5] = value | 0;
  }
  
};

VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT.byteLength = 0x18;

VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  vertexAttributeInstanceRateDivisor: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  vertexAttributeInstanceRateZeroDivisor: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
};
/** VkQueueFamilyCheckpointPropertiesNV **/
class VkQueueFamilyCheckpointPropertiesNV {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9DEEB1;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkQueueFamilyCheckpointPropertiesNV.pNext' isn't allowed to be filled");
  }
  get checkpointExecutionStageMask() {
    return this.memoryViewInt32[0x4];
  }
  
};

VkQueueFamilyCheckpointPropertiesNV.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkQueueFamilyCheckpointPropertiesNV.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x18));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x18), 0x0);
  
  
};

VkQueueFamilyCheckpointPropertiesNV.byteLength = 0x18;

VkQueueFamilyCheckpointPropertiesNV.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  checkpointExecutionStageMask: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkCheckpointDataNV **/
class VkCheckpointDataNV {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this._pCheckpointMarker = null;
    this.sType = 0x3B9DEEB0;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.pCheckpointMarker !== void 0) this.pCheckpointMarker = opts.pCheckpointMarker;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkCheckpointDataNV.pNext' isn't allowed to be filled");
  }
  get stage() {
    return this.memoryViewInt32[0x4];
  }
  get pCheckpointMarker() {
    return this._pCheckpointMarker;
  }
  set pCheckpointMarker(value) {
    if (value !== null ) {
      this._pCheckpointMarker = value;
      this.memoryViewBigInt64[0x3] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pCheckpointMarker = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } 
    
  }
  
};

VkCheckpointDataNV.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkCheckpointDataNV.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x20));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x20), 0x0);
  
  
};

VkCheckpointDataNV.byteLength = 0x20;

VkCheckpointDataNV.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  stage: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  pCheckpointMarker: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
};
/** VkPhysicalDeviceDepthStencilResolvePropertiesKHR **/
class VkPhysicalDeviceDepthStencilResolvePropertiesKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    
    
    this.sType = 0x3B9DD358;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceDepthStencilResolvePropertiesKHR.pNext' isn't allowed to be filled");
  }
  get supportedDepthResolveModes() {
    return this.memoryViewInt32[0x4];
  }
  get supportedStencilResolveModes() {
    return this.memoryViewInt32[0x5];
  }
  get independentResolveNone() {
    return this.memoryViewUint32[0x6] !== 0;
  }
  get independentResolve() {
    return this.memoryViewUint32[0x7] !== 0;
  }
  
};

VkPhysicalDeviceDepthStencilResolvePropertiesKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceDepthStencilResolvePropertiesKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x20));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x20), 0x0);
  
  
};

VkPhysicalDeviceDepthStencilResolvePropertiesKHR.byteLength = 0x20;

VkPhysicalDeviceDepthStencilResolvePropertiesKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  supportedDepthResolveModes: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  supportedStencilResolveModes: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  independentResolveNone: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
  independentResolve: {
    byteOffset: 0x1C,
    byteLength: 0x4
  },
};
/** VkSubpassDescriptionDepthStencilResolveKHR **/
class VkSubpassDescriptionDepthStencilResolveKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    this._pDepthStencilResolveAttachment = null;
    this.sType = 0x3B9DD359;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.depthResolveMode !== void 0) this.depthResolveMode = opts.depthResolveMode;
      if (opts.stencilResolveMode !== void 0) this.stencilResolveMode = opts.stencilResolveMode;
      if (opts.pDepthStencilResolveAttachment !== void 0) this.pDepthStencilResolveAttachment = opts.pDepthStencilResolveAttachment;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkSubpassDescriptionDepthStencilResolveKHR.pNext' isn't allowed to be filled");
  }
  get depthResolveMode() {
    return this.memoryViewInt32[0x4];
  }
  set depthResolveMode(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get stencilResolveMode() {
    return this.memoryViewInt32[0x5];
  }
  set stencilResolveMode(value) {
    
    this.memoryViewInt32[0x5] = value;
  }
  get pDepthStencilResolveAttachment() {
    return this._pDepthStencilResolveAttachment;
  }
  set pDepthStencilResolveAttachment(value) {
    if (value !== null ) {
      value.flush();
      this._pDepthStencilResolveAttachment = value;
      this.memoryViewBigInt64[0x3] = value.memoryAddress;
      
    } else if (value === null) {
      this._pDepthStencilResolveAttachment = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } 
    
  }
  
};

VkSubpassDescriptionDepthStencilResolveKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkSubpassDescriptionDepthStencilResolveKHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkSubpassDescriptionDepthStencilResolveKHR.byteLength = 0x20;

VkSubpassDescriptionDepthStencilResolveKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  depthResolveMode: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  stencilResolveMode: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  pDepthStencilResolveAttachment: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
};
/** VkImageViewASTCDecodeModeEXT **/
class VkImageViewASTCDecodeModeEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9BCFB8;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.decodeMode !== void 0) this.decodeMode = opts.decodeMode;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkImageViewASTCDecodeModeEXT.pNext' isn't allowed to be filled");
  }
  get decodeMode() {
    return this.memoryViewInt32[0x4];
  }
  set decodeMode(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkImageViewASTCDecodeModeEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkImageViewASTCDecodeModeEXT.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkImageViewASTCDecodeModeEXT.byteLength = 0x18;

VkImageViewASTCDecodeModeEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  decodeMode: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceASTCDecodeFeaturesEXT **/
class VkPhysicalDeviceASTCDecodeFeaturesEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9BCFB9;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.decodeModeSharedExponent !== void 0) this.decodeModeSharedExponent = opts.decodeModeSharedExponent;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceASTCDecodeFeaturesEXT.pNext' isn't allowed to be filled");
  }
  get decodeModeSharedExponent() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set decodeModeSharedExponent(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  
};

VkPhysicalDeviceASTCDecodeFeaturesEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceASTCDecodeFeaturesEXT.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPhysicalDeviceASTCDecodeFeaturesEXT.byteLength = 0x18;

VkPhysicalDeviceASTCDecodeFeaturesEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  decodeModeSharedExponent: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceTransformFeedbackFeaturesEXT **/
class VkPhysicalDeviceTransformFeedbackFeaturesEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    this.sType = 0x3B9B3760;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.transformFeedback !== void 0) this.transformFeedback = opts.transformFeedback;
      if (opts.geometryStreams !== void 0) this.geometryStreams = opts.geometryStreams;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceTransformFeedbackFeaturesEXT.pNext' isn't allowed to be filled");
  }
  get transformFeedback() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set transformFeedback(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  get geometryStreams() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  set geometryStreams(value) {
    this.memoryViewUint32[0x5] = value | 0;
  }
  
};

VkPhysicalDeviceTransformFeedbackFeaturesEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceTransformFeedbackFeaturesEXT.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPhysicalDeviceTransformFeedbackFeaturesEXT.byteLength = 0x18;

VkPhysicalDeviceTransformFeedbackFeaturesEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  transformFeedback: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  geometryStreams: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceTransformFeedbackPropertiesEXT **/
class VkPhysicalDeviceTransformFeedbackPropertiesEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x40) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x40) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x40) / 0x4);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x40) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x40);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    
    
    
    
    
    
    
    
    this.sType = 0x3B9B3761;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceTransformFeedbackPropertiesEXT.pNext' isn't allowed to be filled");
  }
  get maxTransformFeedbackStreams() {
    return this.memoryViewUint32[0x4];
  }
  get maxTransformFeedbackBuffers() {
    return this.memoryViewUint32[0x5];
  }
  get maxTransformFeedbackBufferSize() {
    return this.memoryViewBigUint64[0x3];
  }
  get maxTransformFeedbackStreamDataSize() {
    return this.memoryViewUint32[0x8];
  }
  get maxTransformFeedbackBufferDataSize() {
    return this.memoryViewUint32[0x9];
  }
  get maxTransformFeedbackBufferDataStride() {
    return this.memoryViewUint32[0xA];
  }
  get transformFeedbackQueries() {
    return this.memoryViewUint32[0xB] !== 0;
  }
  get transformFeedbackStreamsLinesTriangles() {
    return this.memoryViewUint32[0xC] !== 0;
  }
  get transformFeedbackRasterizationStreamSelect() {
    return this.memoryViewUint32[0xD] !== 0;
  }
  get transformFeedbackDraw() {
    return this.memoryViewUint32[0xE] !== 0;
  }
  
};

VkPhysicalDeviceTransformFeedbackPropertiesEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceTransformFeedbackPropertiesEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x40));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x40), 0x0);
  
  
};

VkPhysicalDeviceTransformFeedbackPropertiesEXT.byteLength = 0x40;

VkPhysicalDeviceTransformFeedbackPropertiesEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  maxTransformFeedbackStreams: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  maxTransformFeedbackBuffers: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  maxTransformFeedbackBufferSize: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
  maxTransformFeedbackStreamDataSize: {
    byteOffset: 0x20,
    byteLength: 0x4
  },
  maxTransformFeedbackBufferDataSize: {
    byteOffset: 0x24,
    byteLength: 0x4
  },
  maxTransformFeedbackBufferDataStride: {
    byteOffset: 0x28,
    byteLength: 0x4
  },
  transformFeedbackQueries: {
    byteOffset: 0x2C,
    byteLength: 0x4
  },
  transformFeedbackStreamsLinesTriangles: {
    byteOffset: 0x30,
    byteLength: 0x4
  },
  transformFeedbackRasterizationStreamSelect: {
    byteOffset: 0x34,
    byteLength: 0x4
  },
  transformFeedbackDraw: {
    byteOffset: 0x38,
    byteLength: 0x4
  },
};
/** VkPipelineRasterizationStateStreamCreateInfoEXT **/
class VkPipelineRasterizationStateStreamCreateInfoEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    this.sType = 0x3B9B3762;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.rasterizationStream !== void 0) this.rasterizationStream = opts.rasterizationStream;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPipelineRasterizationStateStreamCreateInfoEXT.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get rasterizationStream() {
    return this.memoryViewUint32[0x5];
  }
  set rasterizationStream(value) {
    
    this.memoryViewUint32[0x5] = value;
  }
  
};

VkPipelineRasterizationStateStreamCreateInfoEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPipelineRasterizationStateStreamCreateInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPipelineRasterizationStateStreamCreateInfoEXT.byteLength = 0x18;

VkPipelineRasterizationStateStreamCreateInfoEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  flags: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  rasterizationStream: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV **/
class VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9D5270;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.representativeFragmentTest !== void 0) this.representativeFragmentTest = opts.representativeFragmentTest;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV.pNext' isn't allowed to be filled");
  }
  get representativeFragmentTest() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set representativeFragmentTest(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  
};

VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV.byteLength = 0x18;

VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  representativeFragmentTest: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkPipelineRepresentativeFragmentTestStateCreateInfoNV **/
class VkPipelineRepresentativeFragmentTestStateCreateInfoNV {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9D5271;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.representativeFragmentTestEnable !== void 0) this.representativeFragmentTestEnable = opts.representativeFragmentTestEnable;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPipelineRepresentativeFragmentTestStateCreateInfoNV.pNext' isn't allowed to be filled");
  }
  get representativeFragmentTestEnable() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set representativeFragmentTestEnable(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  
};

VkPipelineRepresentativeFragmentTestStateCreateInfoNV.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPipelineRepresentativeFragmentTestStateCreateInfoNV.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPipelineRepresentativeFragmentTestStateCreateInfoNV.byteLength = 0x18;

VkPipelineRepresentativeFragmentTestStateCreateInfoNV.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  representativeFragmentTestEnable: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceExclusiveScissorFeaturesNV **/
class VkPhysicalDeviceExclusiveScissorFeaturesNV {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9DEACA;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.exclusiveScissor !== void 0) this.exclusiveScissor = opts.exclusiveScissor;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceExclusiveScissorFeaturesNV.pNext' isn't allowed to be filled");
  }
  get exclusiveScissor() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set exclusiveScissor(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  
};

VkPhysicalDeviceExclusiveScissorFeaturesNV.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceExclusiveScissorFeaturesNV.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPhysicalDeviceExclusiveScissorFeaturesNV.byteLength = 0x18;

VkPhysicalDeviceExclusiveScissorFeaturesNV.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  exclusiveScissor: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkPipelineViewportExclusiveScissorStateCreateInfoNV **/
class VkPipelineViewportExclusiveScissorStateCreateInfoNV {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this._pExclusiveScissors = null;
    this._pExclusiveScissorsNative = null;
    this.sType = 0x3B9DEAC8;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.exclusiveScissorCount !== void 0) this.exclusiveScissorCount = opts.exclusiveScissorCount;
      if (opts.pExclusiveScissors !== void 0) this.pExclusiveScissors = opts.pExclusiveScissors;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPipelineViewportExclusiveScissorStateCreateInfoNV.pNext' isn't allowed to be filled");
  }
  get exclusiveScissorCount() {
    return this.memoryViewUint32[0x4];
  }
  set exclusiveScissorCount(value) {
    
    this.memoryViewUint32[0x4] = value;
  }
  get pExclusiveScissors() {
    return this._pExclusiveScissors;
  }
  set pExclusiveScissors(value) {
    if (value !== null ) {
      this._pExclusiveScissors = value;
    } else if (value === null) {
      this._pExclusiveScissors = null;
    } 
    
  }
  
};

VkPipelineViewportExclusiveScissorStateCreateInfoNV.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pExclusiveScissors !== null) {
    let array = this._pExclusiveScissors;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pExclusiveScissorsNative = nativeArray;
    this.memoryViewBigInt64[0x3] = nativeArray.address;
  }
  
  return true;
};

VkPipelineViewportExclusiveScissorStateCreateInfoNV.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
};

VkPipelineViewportExclusiveScissorStateCreateInfoNV.byteLength = 0x20;

VkPipelineViewportExclusiveScissorStateCreateInfoNV.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  exclusiveScissorCount: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  pExclusiveScissors: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
};
/** VkPhysicalDeviceCornerSampledImageFeaturesNV **/
class VkPhysicalDeviceCornerSampledImageFeaturesNV {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9B8D50;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.cornerSampledImage !== void 0) this.cornerSampledImage = opts.cornerSampledImage;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceCornerSampledImageFeaturesNV.pNext' isn't allowed to be filled");
  }
  get cornerSampledImage() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set cornerSampledImage(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  
};

VkPhysicalDeviceCornerSampledImageFeaturesNV.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceCornerSampledImageFeaturesNV.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPhysicalDeviceCornerSampledImageFeaturesNV.byteLength = 0x18;

VkPhysicalDeviceCornerSampledImageFeaturesNV.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  cornerSampledImage: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceComputeShaderDerivativesFeaturesNV **/
class VkPhysicalDeviceComputeShaderDerivativesFeaturesNV {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    this.sType = 0x3B9DDB28;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.computeDerivativeGroupQuads !== void 0) this.computeDerivativeGroupQuads = opts.computeDerivativeGroupQuads;
      if (opts.computeDerivativeGroupLinear !== void 0) this.computeDerivativeGroupLinear = opts.computeDerivativeGroupLinear;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceComputeShaderDerivativesFeaturesNV.pNext' isn't allowed to be filled");
  }
  get computeDerivativeGroupQuads() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set computeDerivativeGroupQuads(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  get computeDerivativeGroupLinear() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  set computeDerivativeGroupLinear(value) {
    this.memoryViewUint32[0x5] = value | 0;
  }
  
};

VkPhysicalDeviceComputeShaderDerivativesFeaturesNV.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceComputeShaderDerivativesFeaturesNV.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPhysicalDeviceComputeShaderDerivativesFeaturesNV.byteLength = 0x18;

VkPhysicalDeviceComputeShaderDerivativesFeaturesNV.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  computeDerivativeGroupQuads: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  computeDerivativeGroupLinear: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV **/
class VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9DE2F8;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.fragmentShaderBarycentric !== void 0) this.fragmentShaderBarycentric = opts.fragmentShaderBarycentric;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV.pNext' isn't allowed to be filled");
  }
  get fragmentShaderBarycentric() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set fragmentShaderBarycentric(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  
};

VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV.byteLength = 0x18;

VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  fragmentShaderBarycentric: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceShaderImageFootprintFeaturesNV **/
class VkPhysicalDeviceShaderImageFootprintFeaturesNV {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9DE6E0;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.imageFootprint !== void 0) this.imageFootprint = opts.imageFootprint;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceShaderImageFootprintFeaturesNV.pNext' isn't allowed to be filled");
  }
  get imageFootprint() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set imageFootprint(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  
};

VkPhysicalDeviceShaderImageFootprintFeaturesNV.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceShaderImageFootprintFeaturesNV.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPhysicalDeviceShaderImageFootprintFeaturesNV.byteLength = 0x18;

VkPhysicalDeviceShaderImageFootprintFeaturesNV.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  imageFootprint: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV **/
class VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9E7380;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.dedicatedAllocationImageAliasing !== void 0) this.dedicatedAllocationImageAliasing = opts.dedicatedAllocationImageAliasing;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV.pNext' isn't allowed to be filled");
  }
  get dedicatedAllocationImageAliasing() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set dedicatedAllocationImageAliasing(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  
};

VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV.byteLength = 0x18;

VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  dedicatedAllocationImageAliasing: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkShadingRatePaletteNV **/
class VkShadingRatePaletteNV {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x10) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x10) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x10);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pShadingRatePaletteEntries = null;
    
    if (typeof opts === "object") {
      if (opts.shadingRatePaletteEntryCount !== void 0) this.shadingRatePaletteEntryCount = opts.shadingRatePaletteEntryCount;
      if (opts.pShadingRatePaletteEntries !== void 0) this.pShadingRatePaletteEntries = opts.pShadingRatePaletteEntries;
      
    }
  }
  get shadingRatePaletteEntryCount() {
    return this.memoryViewUint32[0x0];
  }
  set shadingRatePaletteEntryCount(value) {
    
    this.memoryViewUint32[0x0] = value;
  }
  get pShadingRatePaletteEntries() {
    return this._pShadingRatePaletteEntries;
  }
  set pShadingRatePaletteEntries(value) {
    if (value !== null ) {
      this._pShadingRatePaletteEntries = value;
      this.memoryViewBigInt64[0x1] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pShadingRatePaletteEntries = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  
};

VkShadingRatePaletteNV.prototype.flush = function flush() {
  
  return true;
};

VkShadingRatePaletteNV.prototype.reflect = function reflect(memoryAddress) {
  
};

VkShadingRatePaletteNV.byteLength = 0x10;

VkShadingRatePaletteNV.memoryLayout = {
  shadingRatePaletteEntryCount: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pShadingRatePaletteEntries: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
};
/** VkPipelineViewportShadingRateImageStateCreateInfoNV **/
class VkPipelineViewportShadingRateImageStateCreateInfoNV {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    this._pShadingRatePalettes = null;
    this._pShadingRatePalettesNative = null;
    this.sType = 0x3B9D4AA0;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.shadingRateImageEnable !== void 0) this.shadingRateImageEnable = opts.shadingRateImageEnable;
      if (opts.viewportCount !== void 0) this.viewportCount = opts.viewportCount;
      if (opts.pShadingRatePalettes !== void 0) this.pShadingRatePalettes = opts.pShadingRatePalettes;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPipelineViewportShadingRateImageStateCreateInfoNV.pNext' isn't allowed to be filled");
  }
  get shadingRateImageEnable() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set shadingRateImageEnable(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  get viewportCount() {
    return this.memoryViewUint32[0x5];
  }
  set viewportCount(value) {
    
    this.memoryViewUint32[0x5] = value;
  }
  get pShadingRatePalettes() {
    return this._pShadingRatePalettes;
  }
  set pShadingRatePalettes(value) {
    if (value !== null ) {
      this._pShadingRatePalettes = value;
    } else if (value === null) {
      this._pShadingRatePalettes = null;
    } 
    
  }
  
};

VkPipelineViewportShadingRateImageStateCreateInfoNV.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pShadingRatePalettes !== null) {
    let array = this._pShadingRatePalettes;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pShadingRatePalettesNative = nativeArray;
    this.memoryViewBigInt64[0x3] = nativeArray.address;
  }
  
  return true;
};

VkPipelineViewportShadingRateImageStateCreateInfoNV.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
};

VkPipelineViewportShadingRateImageStateCreateInfoNV.byteLength = 0x20;

VkPipelineViewportShadingRateImageStateCreateInfoNV.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  shadingRateImageEnable: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  viewportCount: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  pShadingRatePalettes: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
};
/** VkPhysicalDeviceShadingRateImageFeaturesNV **/
class VkPhysicalDeviceShadingRateImageFeaturesNV {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    this.sType = 0x3B9D4AA1;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.shadingRateImage !== void 0) this.shadingRateImage = opts.shadingRateImage;
      if (opts.shadingRateCoarseSampleOrder !== void 0) this.shadingRateCoarseSampleOrder = opts.shadingRateCoarseSampleOrder;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceShadingRateImageFeaturesNV.pNext' isn't allowed to be filled");
  }
  get shadingRateImage() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set shadingRateImage(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  get shadingRateCoarseSampleOrder() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  set shadingRateCoarseSampleOrder(value) {
    this.memoryViewUint32[0x5] = value | 0;
  }
  
};

VkPhysicalDeviceShadingRateImageFeaturesNV.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceShadingRateImageFeaturesNV.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPhysicalDeviceShadingRateImageFeaturesNV.byteLength = 0x18;

VkPhysicalDeviceShadingRateImageFeaturesNV.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  shadingRateImage: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  shadingRateCoarseSampleOrder: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceShadingRateImagePropertiesNV **/
class VkPhysicalDeviceShadingRateImagePropertiesNV {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._shadingRateTexelSize = new VkExtent2D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x10 });
    
    
    this.sType = 0x3B9D4AA2;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceShadingRateImagePropertiesNV.pNext' isn't allowed to be filled");
  }
  get shadingRateTexelSize() {
    return this._shadingRateTexelSize;
  }
  get shadingRatePaletteSize() {
    return this.memoryViewUint32[0x6];
  }
  get shadingRateMaxCoarseSamples() {
    return this.memoryViewUint32[0x7];
  }
  
};

VkPhysicalDeviceShadingRateImagePropertiesNV.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceShadingRateImagePropertiesNV.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x20));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x20), 0x0);
  
  
  
  
};

VkPhysicalDeviceShadingRateImagePropertiesNV.byteLength = 0x20;

VkPhysicalDeviceShadingRateImagePropertiesNV.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  shadingRateTexelSize: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
  shadingRatePaletteSize: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
  shadingRateMaxCoarseSamples: {
    byteOffset: 0x1C,
    byteLength: 0x4
  },
};
/** VkCoarseSampleLocationNV **/
class VkCoarseSampleLocationNV {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0xC) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0xC);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    
    
    
    if (typeof opts === "object") {
      if (opts.pixelX !== void 0) this.pixelX = opts.pixelX;
      if (opts.pixelY !== void 0) this.pixelY = opts.pixelY;
      if (opts.sample !== void 0) this.sample = opts.sample;
      
    }
  }
  get pixelX() {
    return this.memoryViewUint32[0x0];
  }
  set pixelX(value) {
    
    this.memoryViewUint32[0x0] = value;
  }
  get pixelY() {
    return this.memoryViewUint32[0x1];
  }
  set pixelY(value) {
    
    this.memoryViewUint32[0x1] = value;
  }
  get sample() {
    return this.memoryViewUint32[0x2];
  }
  set sample(value) {
    
    this.memoryViewUint32[0x2] = value;
  }
  
};

VkCoarseSampleLocationNV.prototype.flush = function flush() {
  
  return true;
};

VkCoarseSampleLocationNV.prototype.reflect = function reflect(memoryAddress) {
  
};

VkCoarseSampleLocationNV.byteLength = 0xC;

VkCoarseSampleLocationNV.memoryLayout = {
  pixelX: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pixelY: {
    byteOffset: 0x4,
    byteLength: 0x4
  },
  sample: {
    byteOffset: 0x8,
    byteLength: 0x4
  },
};
/** VkCoarseSampleOrderCustomNV **/
class VkCoarseSampleOrderCustomNV {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    
    
    this._pSampleLocations = null;
    this._pSampleLocationsNative = null;
    
    if (typeof opts === "object") {
      if (opts.shadingRate !== void 0) this.shadingRate = opts.shadingRate;
      if (opts.sampleCount !== void 0) this.sampleCount = opts.sampleCount;
      if (opts.sampleLocationCount !== void 0) this.sampleLocationCount = opts.sampleLocationCount;
      if (opts.pSampleLocations !== void 0) this.pSampleLocations = opts.pSampleLocations;
      
    }
  }
  get shadingRate() {
    return this.memoryViewInt32[0x0];
  }
  set shadingRate(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get sampleCount() {
    return this.memoryViewUint32[0x1];
  }
  set sampleCount(value) {
    
    this.memoryViewUint32[0x1] = value;
  }
  get sampleLocationCount() {
    return this.memoryViewUint32[0x2];
  }
  set sampleLocationCount(value) {
    
    this.memoryViewUint32[0x2] = value;
  }
  get pSampleLocations() {
    return this._pSampleLocations;
  }
  set pSampleLocations(value) {
    if (value !== null ) {
      this._pSampleLocations = value;
    } else if (value === null) {
      this._pSampleLocations = null;
    } 
    
  }
  
};

VkCoarseSampleOrderCustomNV.prototype.flush = function flush() {
  
  
  if (this._pSampleLocations !== null) {
    let array = this._pSampleLocations;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pSampleLocationsNative = nativeArray;
    this.memoryViewBigInt64[0x2] = nativeArray.address;
  }
  
  return true;
};

VkCoarseSampleOrderCustomNV.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkCoarseSampleOrderCustomNV.byteLength = 0x18;

VkCoarseSampleOrderCustomNV.memoryLayout = {
  shadingRate: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  sampleCount: {
    byteOffset: 0x4,
    byteLength: 0x4
  },
  sampleLocationCount: {
    byteOffset: 0x8,
    byteLength: 0x4
  },
  pSampleLocations: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
};
/** VkPipelineViewportCoarseSampleOrderStateCreateInfoNV **/
class VkPipelineViewportCoarseSampleOrderStateCreateInfoNV {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    this._pCustomSampleOrders = null;
    this._pCustomSampleOrdersNative = null;
    this.sType = 0x3B9D4AA5;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.sampleOrderType !== void 0) this.sampleOrderType = opts.sampleOrderType;
      if (opts.customSampleOrderCount !== void 0) this.customSampleOrderCount = opts.customSampleOrderCount;
      if (opts.pCustomSampleOrders !== void 0) this.pCustomSampleOrders = opts.pCustomSampleOrders;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPipelineViewportCoarseSampleOrderStateCreateInfoNV.pNext' isn't allowed to be filled");
  }
  get sampleOrderType() {
    return this.memoryViewInt32[0x4];
  }
  set sampleOrderType(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get customSampleOrderCount() {
    return this.memoryViewUint32[0x5];
  }
  set customSampleOrderCount(value) {
    
    this.memoryViewUint32[0x5] = value;
  }
  get pCustomSampleOrders() {
    return this._pCustomSampleOrders;
  }
  set pCustomSampleOrders(value) {
    if (value !== null ) {
      this._pCustomSampleOrders = value;
    } else if (value === null) {
      this._pCustomSampleOrders = null;
    } 
    
  }
  
};

VkPipelineViewportCoarseSampleOrderStateCreateInfoNV.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pCustomSampleOrders !== null) {
    let array = this._pCustomSampleOrders;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pCustomSampleOrdersNative = nativeArray;
    this.memoryViewBigInt64[0x3] = nativeArray.address;
  }
  
  return true;
};

VkPipelineViewportCoarseSampleOrderStateCreateInfoNV.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
};

VkPipelineViewportCoarseSampleOrderStateCreateInfoNV.byteLength = 0x20;

VkPipelineViewportCoarseSampleOrderStateCreateInfoNV.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  sampleOrderType: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  customSampleOrderCount: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  pCustomSampleOrders: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
};
/** VkPhysicalDeviceMeshShaderFeaturesNV **/
class VkPhysicalDeviceMeshShaderFeaturesNV {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    this.sType = 0x3B9DDF10;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.taskShader !== void 0) this.taskShader = opts.taskShader;
      if (opts.meshShader !== void 0) this.meshShader = opts.meshShader;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceMeshShaderFeaturesNV.pNext' isn't allowed to be filled");
  }
  get taskShader() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set taskShader(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  get meshShader() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  set meshShader(value) {
    this.memoryViewUint32[0x5] = value | 0;
  }
  
};

VkPhysicalDeviceMeshShaderFeaturesNV.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceMeshShaderFeaturesNV.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPhysicalDeviceMeshShaderFeaturesNV.byteLength = 0x18;

VkPhysicalDeviceMeshShaderFeaturesNV.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  taskShader: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  meshShader: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceMeshShaderPropertiesNV **/
class VkPhysicalDeviceMeshShaderPropertiesNV {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x58) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x58) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x58) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x58);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    this._maxTaskWorkGroupSize = [...Array(3)].fill(0x0);
    
    
    
    this._maxMeshWorkGroupSize = [...Array(3)].fill(0x0);
    
    
    
    
    
    
    this.sType = 0x3B9DDF11;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceMeshShaderPropertiesNV.pNext' isn't allowed to be filled");
  }
  get maxDrawMeshTasksCount() {
    return this.memoryViewUint32[0x4];
  }
  get maxTaskWorkGroupInvocations() {
    return this.memoryViewUint32[0x5];
  }
  get maxTaskWorkGroupSize() {
    return [
      this.memoryViewUint32[0x6],
      this.memoryViewUint32[0x7],
      this.memoryViewUint32[0x8]
    ];
  }
  get maxTaskTotalMemorySize() {
    return this.memoryViewUint32[0x9];
  }
  get maxTaskOutputCount() {
    return this.memoryViewUint32[0xA];
  }
  get maxMeshWorkGroupInvocations() {
    return this.memoryViewUint32[0xB];
  }
  get maxMeshWorkGroupSize() {
    return [
      this.memoryViewUint32[0xC],
      this.memoryViewUint32[0xD],
      this.memoryViewUint32[0xE]
    ];
  }
  get maxMeshTotalMemorySize() {
    return this.memoryViewUint32[0xF];
  }
  get maxMeshOutputVertices() {
    return this.memoryViewUint32[0x10];
  }
  get maxMeshOutputPrimitives() {
    return this.memoryViewUint32[0x11];
  }
  get maxMeshMultiviewViewCount() {
    return this.memoryViewUint32[0x12];
  }
  get meshOutputPerVertexGranularity() {
    return this.memoryViewUint32[0x13];
  }
  get meshOutputPerPrimitiveGranularity() {
    return this.memoryViewUint32[0x14];
  }
  
};

VkPhysicalDeviceMeshShaderPropertiesNV.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceMeshShaderPropertiesNV.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x58));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x58), 0x0);
  
  
  
  
  
  
};

VkPhysicalDeviceMeshShaderPropertiesNV.byteLength = 0x58;

VkPhysicalDeviceMeshShaderPropertiesNV.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  maxDrawMeshTasksCount: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  maxTaskWorkGroupInvocations: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  maxTaskWorkGroupSize: {
    byteOffset: 0x18,
    byteLength: 0xC
  },
  maxTaskTotalMemorySize: {
    byteOffset: 0x24,
    byteLength: 0x4
  },
  maxTaskOutputCount: {
    byteOffset: 0x28,
    byteLength: 0x4
  },
  maxMeshWorkGroupInvocations: {
    byteOffset: 0x2C,
    byteLength: 0x4
  },
  maxMeshWorkGroupSize: {
    byteOffset: 0x30,
    byteLength: 0xC
  },
  maxMeshTotalMemorySize: {
    byteOffset: 0x3C,
    byteLength: 0x4
  },
  maxMeshOutputVertices: {
    byteOffset: 0x40,
    byteLength: 0x4
  },
  maxMeshOutputPrimitives: {
    byteOffset: 0x44,
    byteLength: 0x4
  },
  maxMeshMultiviewViewCount: {
    byteOffset: 0x48,
    byteLength: 0x4
  },
  meshOutputPerVertexGranularity: {
    byteOffset: 0x4C,
    byteLength: 0x4
  },
  meshOutputPerPrimitiveGranularity: {
    byteOffset: 0x50,
    byteLength: 0x4
  },
};
/** VkDrawMeshTasksIndirectCommandNV **/
class VkDrawMeshTasksIndirectCommandNV {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x8) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x8);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    
    
    if (typeof opts === "object") {
      if (opts.taskCount !== void 0) this.taskCount = opts.taskCount;
      if (opts.firstTask !== void 0) this.firstTask = opts.firstTask;
      
    }
  }
  get taskCount() {
    return this.memoryViewUint32[0x0];
  }
  set taskCount(value) {
    
    this.memoryViewUint32[0x0] = value;
  }
  get firstTask() {
    return this.memoryViewUint32[0x1];
  }
  set firstTask(value) {
    
    this.memoryViewUint32[0x1] = value;
  }
  
};

VkDrawMeshTasksIndirectCommandNV.prototype.flush = function flush() {
  
  return true;
};

VkDrawMeshTasksIndirectCommandNV.prototype.reflect = function reflect(memoryAddress) {
  
};

VkDrawMeshTasksIndirectCommandNV.byteLength = 0x8;

VkDrawMeshTasksIndirectCommandNV.memoryLayout = {
  taskCount: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  firstTask: {
    byteOffset: 0x4,
    byteLength: 0x4
  },
};
/** VkRayTracingShaderGroupCreateInfoNV **/
class VkRayTracingShaderGroupCreateInfoNV {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x28);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    
    
    
    this.sType = 0x3B9D4E93;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.type !== void 0) this.type = opts.type;
      if (opts.generalShader !== void 0) this.generalShader = opts.generalShader;
      if (opts.closestHitShader !== void 0) this.closestHitShader = opts.closestHitShader;
      if (opts.anyHitShader !== void 0) this.anyHitShader = opts.anyHitShader;
      if (opts.intersectionShader !== void 0) this.intersectionShader = opts.intersectionShader;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkRayTracingShaderGroupCreateInfoNV.pNext' isn't allowed to be filled");
  }
  get type() {
    return this.memoryViewInt32[0x4];
  }
  set type(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get generalShader() {
    return this.memoryViewUint32[0x5];
  }
  set generalShader(value) {
    
    this.memoryViewUint32[0x5] = value;
  }
  get closestHitShader() {
    return this.memoryViewUint32[0x6];
  }
  set closestHitShader(value) {
    
    this.memoryViewUint32[0x6] = value;
  }
  get anyHitShader() {
    return this.memoryViewUint32[0x7];
  }
  set anyHitShader(value) {
    
    this.memoryViewUint32[0x7] = value;
  }
  get intersectionShader() {
    return this.memoryViewUint32[0x8];
  }
  set intersectionShader(value) {
    
    this.memoryViewUint32[0x8] = value;
  }
  
};

VkRayTracingShaderGroupCreateInfoNV.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkRayTracingShaderGroupCreateInfoNV.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkRayTracingShaderGroupCreateInfoNV.byteLength = 0x28;

VkRayTracingShaderGroupCreateInfoNV.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  type: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  generalShader: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  closestHitShader: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
  anyHitShader: {
    byteOffset: 0x1C,
    byteLength: 0x4
  },
  intersectionShader: {
    byteOffset: 0x20,
    byteLength: 0x4
  },
};
/** VkRayTracingPipelineCreateInfoNV **/
class VkRayTracingPipelineCreateInfoNV {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x50) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x50) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x50) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x50);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    this._pStages = null;
    this._pStagesNative = null;
    
    this._pGroups = null;
    this._pGroupsNative = null;
    
    this._layout = null;
    this._basePipelineHandle = null;
    
    this.sType = 0x3B9D4E88;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.stageCount !== void 0) this.stageCount = opts.stageCount;
      if (opts.pStages !== void 0) this.pStages = opts.pStages;
      if (opts.groupCount !== void 0) this.groupCount = opts.groupCount;
      if (opts.pGroups !== void 0) this.pGroups = opts.pGroups;
      if (opts.maxRecursionDepth !== void 0) this.maxRecursionDepth = opts.maxRecursionDepth;
      if (opts.layout !== void 0) this.layout = opts.layout;
      if (opts.basePipelineHandle !== void 0) this.basePipelineHandle = opts.basePipelineHandle;
      if (opts.basePipelineIndex !== void 0) this.basePipelineIndex = opts.basePipelineIndex;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null ) {
      let {sType} = value;
      
      switch (sType) {
          
        case 0x3B9DB800:
          break;
        default:
          throw new TypeError("Invalid type for 'VkRayTracingPipelineCreateInfoNV.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } 
    
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get stageCount() {
    return this.memoryViewUint32[0x5];
  }
  set stageCount(value) {
    
    this.memoryViewUint32[0x5] = value;
  }
  get pStages() {
    return this._pStages;
  }
  set pStages(value) {
    if (value !== null ) {
      this._pStages = value;
    } else if (value === null) {
      this._pStages = null;
    } 
    
  }
  get groupCount() {
    return this.memoryViewUint32[0x8];
  }
  set groupCount(value) {
    
    this.memoryViewUint32[0x8] = value;
  }
  get pGroups() {
    return this._pGroups;
  }
  set pGroups(value) {
    if (value !== null ) {
      this._pGroups = value;
    } else if (value === null) {
      this._pGroups = null;
    } 
    
  }
  get maxRecursionDepth() {
    return this.memoryViewUint32[0xC];
  }
  set maxRecursionDepth(value) {
    
    this.memoryViewUint32[0xC] = value;
  }
  get layout() {
    return this._layout;
  }
  set layout(value) {
    if (value !== null ) {
      
      this._layout = value;
      
      this.memoryViewBigInt64[0x7] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._layout = null;
      this.memoryViewBigInt64[0x7] = BI0;
    } 
    
  }
  get basePipelineHandle() {
    return this._basePipelineHandle;
  }
  set basePipelineHandle(value) {
    if (value !== null ) {
      
      this._basePipelineHandle = value;
      
      this.memoryViewBigInt64[0x8] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._basePipelineHandle = null;
      this.memoryViewBigInt64[0x8] = BI0;
    } 
    
  }
  get basePipelineIndex() {
    return this.memoryViewInt32[0x12];
  }
  set basePipelineIndex(value) {
    
    this.memoryViewInt32[0x12] = value;
  }
  
};

VkRayTracingPipelineCreateInfoNV.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pStages !== null) {
    let array = this._pStages;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pStagesNative = nativeArray;
    this.memoryViewBigInt64[0x3] = nativeArray.address;
  }
  
  
  if (this._pGroups !== null) {
    let array = this._pGroups;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pGroupsNative = nativeArray;
    this.memoryViewBigInt64[0x5] = nativeArray.address;
  }
  
  return true;
};

VkRayTracingPipelineCreateInfoNV.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
  
  
};

VkRayTracingPipelineCreateInfoNV.byteLength = 0x50;

VkRayTracingPipelineCreateInfoNV.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  flags: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  stageCount: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  pStages: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
  groupCount: {
    byteOffset: 0x20,
    byteLength: 0x4
  },
  pGroups: {
    byteOffset: 0x28,
    byteLength: 0x8
  },
  maxRecursionDepth: {
    byteOffset: 0x30,
    byteLength: 0x4
  },
  layout: {
    byteOffset: 0x38,
    byteLength: 0x8
  },
  basePipelineHandle: {
    byteOffset: 0x40,
    byteLength: 0x8
  },
  basePipelineIndex: {
    byteOffset: 0x48,
    byteLength: 0x4
  },
};
/** VkGeometryTrianglesNV **/
class VkGeometryTrianglesNV {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x60) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x60) / 0x8);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x60) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x60) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x60);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._vertexData = null;
    
    
    
    
    this._indexData = null;
    
    
    
    this._transformData = null;
    
    this.sType = 0x3B9D4E8C;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.vertexData !== void 0) this.vertexData = opts.vertexData;
      if (opts.vertexOffset !== void 0) this.vertexOffset = opts.vertexOffset;
      if (opts.vertexCount !== void 0) this.vertexCount = opts.vertexCount;
      if (opts.vertexStride !== void 0) this.vertexStride = opts.vertexStride;
      if (opts.vertexFormat !== void 0) this.vertexFormat = opts.vertexFormat;
      if (opts.indexData !== void 0) this.indexData = opts.indexData;
      if (opts.indexOffset !== void 0) this.indexOffset = opts.indexOffset;
      if (opts.indexCount !== void 0) this.indexCount = opts.indexCount;
      if (opts.indexType !== void 0) this.indexType = opts.indexType;
      if (opts.transformData !== void 0) this.transformData = opts.transformData;
      if (opts.transformOffset !== void 0) this.transformOffset = opts.transformOffset;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkGeometryTrianglesNV.pNext' isn't allowed to be filled");
  }
  get vertexData() {
    return this._vertexData;
  }
  set vertexData(value) {
    if (value !== null ) {
      
      this._vertexData = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._vertexData = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } 
    
  }
  get vertexOffset() {
    return this.memoryViewBigUint64[0x3];
  }
  set vertexOffset(value) {
    
    this.memoryViewBigUint64[0x3] = BigInt(value);
  }
  get vertexCount() {
    return this.memoryViewUint32[0x8];
  }
  set vertexCount(value) {
    
    this.memoryViewUint32[0x8] = value;
  }
  get vertexStride() {
    return this.memoryViewBigUint64[0x5];
  }
  set vertexStride(value) {
    
    this.memoryViewBigUint64[0x5] = BigInt(value);
  }
  get vertexFormat() {
    return this.memoryViewInt32[0xC];
  }
  set vertexFormat(value) {
    
    this.memoryViewInt32[0xC] = value;
  }
  get indexData() {
    return this._indexData;
  }
  set indexData(value) {
    if (value !== null ) {
      
      this._indexData = value;
      
      this.memoryViewBigInt64[0x7] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._indexData = null;
      this.memoryViewBigInt64[0x7] = BI0;
    } 
    
  }
  get indexOffset() {
    return this.memoryViewBigUint64[0x8];
  }
  set indexOffset(value) {
    
    this.memoryViewBigUint64[0x8] = BigInt(value);
  }
  get indexCount() {
    return this.memoryViewUint32[0x12];
  }
  set indexCount(value) {
    
    this.memoryViewUint32[0x12] = value;
  }
  get indexType() {
    return this.memoryViewInt32[0x13];
  }
  set indexType(value) {
    
    this.memoryViewInt32[0x13] = value;
  }
  get transformData() {
    return this._transformData;
  }
  set transformData(value) {
    if (value !== null ) {
      
      this._transformData = value;
      
      this.memoryViewBigInt64[0xA] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._transformData = null;
      this.memoryViewBigInt64[0xA] = BI0;
    } 
    
  }
  get transformOffset() {
    return this.memoryViewBigUint64[0xB];
  }
  set transformOffset(value) {
    
    this.memoryViewBigUint64[0xB] = BigInt(value);
  }
  
};

VkGeometryTrianglesNV.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkGeometryTrianglesNV.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkGeometryTrianglesNV.byteLength = 0x60;

VkGeometryTrianglesNV.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  vertexData: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
  vertexOffset: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
  vertexCount: {
    byteOffset: 0x20,
    byteLength: 0x4
  },
  vertexStride: {
    byteOffset: 0x28,
    byteLength: 0x8
  },
  vertexFormat: {
    byteOffset: 0x30,
    byteLength: 0x4
  },
  indexData: {
    byteOffset: 0x38,
    byteLength: 0x8
  },
  indexOffset: {
    byteOffset: 0x40,
    byteLength: 0x8
  },
  indexCount: {
    byteOffset: 0x48,
    byteLength: 0x4
  },
  indexType: {
    byteOffset: 0x4C,
    byteLength: 0x4
  },
  transformData: {
    byteOffset: 0x50,
    byteLength: 0x8
  },
  transformOffset: {
    byteOffset: 0x58,
    byteLength: 0x8
  },
};
/** VkGeometryAABBNV **/
class VkGeometryAABBNV {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x28);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._aabbData = null;
    
    
    
    this.sType = 0x3B9D4E8D;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.aabbData !== void 0) this.aabbData = opts.aabbData;
      if (opts.numAABBs !== void 0) this.numAABBs = opts.numAABBs;
      if (opts.stride !== void 0) this.stride = opts.stride;
      if (opts.offset !== void 0) this.offset = opts.offset;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkGeometryAABBNV.pNext' isn't allowed to be filled");
  }
  get aabbData() {
    return this._aabbData;
  }
  set aabbData(value) {
    if (value !== null ) {
      
      this._aabbData = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._aabbData = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } 
    
  }
  get numAABBs() {
    return this.memoryViewUint32[0x6];
  }
  set numAABBs(value) {
    
    this.memoryViewUint32[0x6] = value;
  }
  get stride() {
    return this.memoryViewUint32[0x7];
  }
  set stride(value) {
    
    this.memoryViewUint32[0x7] = value;
  }
  get offset() {
    return this.memoryViewBigUint64[0x4];
  }
  set offset(value) {
    
    this.memoryViewBigUint64[0x4] = BigInt(value);
  }
  
};

VkGeometryAABBNV.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkGeometryAABBNV.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkGeometryAABBNV.byteLength = 0x28;

VkGeometryAABBNV.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  aabbData: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
  numAABBs: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
  stride: {
    byteOffset: 0x1C,
    byteLength: 0x4
  },
  offset: {
    byteOffset: 0x20,
    byteLength: 0x8
  },
};
/** VkGeometryDataNV **/
class VkGeometryDataNV {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;

    } else {
      this.memoryBuffer = new ArrayBuffer(0x88);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);

    }
    this._triangles = new VkGeometryTrianglesNV({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x0 });
    this._aabbs = new VkGeometryAABBNV({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x60 });
    
    if (typeof opts === "object") {
      if (opts.triangles !== void 0) this.triangles = opts.triangles;
      if (opts.aabbs !== void 0) this.aabbs = opts.aabbs;
      
    }
  }
  get triangles() {
    return this._triangles;
  }
  set triangles(value) {
    if (value !== null ) {
      value.flush();
      this._triangles = value;
      
      
    } else if (value === null) {
      this._triangles = null;
      
    } 
    
  }
  get aabbs() {
    return this._aabbs;
  }
  set aabbs(value) {
    if (value !== null ) {
      value.flush();
      this._aabbs = value;
      
      
    } else if (value === null) {
      this._aabbs = null;
      
    } 
    
  }
  
};

VkGeometryDataNV.prototype.flush = function flush() {
  
  
  if (this._triangles !== null) {
    this._triangles.flush();
    if (this.memoryBuffer !== this._triangles.memoryBuffer) {
      let srcView = new Uint8Array(this._triangles.memoryBuffer);
      let dstView = new Uint8Array(this.memoryBuffer);
      dstView.set(srcView, 0x0);
      
    }
  }
  
  
  if (this._aabbs !== null) {
    this._aabbs.flush();
    if (this.memoryBuffer !== this._aabbs.memoryBuffer) {
      let srcView = new Uint8Array(this._aabbs.memoryBuffer);
      let dstView = new Uint8Array(this.memoryBuffer);
      dstView.set(srcView, 0x60);
      
    }
  }
  
  return true;
};

VkGeometryDataNV.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
};

VkGeometryDataNV.byteLength = 0x88;

VkGeometryDataNV.memoryLayout = {
  triangles: {
    byteOffset: 0x0,
    byteLength: 0x60
  },
  aabbs: {
    byteOffset: 0x60,
    byteLength: 0x28
  },
};
/** VkGeometryNV **/
class VkGeometryNV {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0xA8) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0xA8) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0xA8);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this._geometry = new VkGeometryDataNV({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x18 });
    
    this.sType = 0x3B9D4E8B;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.geometryType !== void 0) this.geometryType = opts.geometryType;
      if (opts.geometry !== void 0) this.geometry = opts.geometry;
      if (opts.flags !== void 0) this.flags = opts.flags;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkGeometryNV.pNext' isn't allowed to be filled");
  }
  get geometryType() {
    return this.memoryViewInt32[0x4];
  }
  set geometryType(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get geometry() {
    return this._geometry;
  }
  set geometry(value) {
    if (value !== null ) {
      value.flush();
      this._geometry = value;
      
      
    } else if (value === null) {
      this._geometry = null;
      
    } 
    
  }
  get flags() {
    return this.memoryViewInt32[0x28];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x28] = value;
  }
  
};

VkGeometryNV.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._geometry !== null) {
    this._geometry.flush();
    if (this.memoryBuffer !== this._geometry.memoryBuffer) {
      let srcView = new Uint8Array(this._geometry.memoryBuffer);
      let dstView = new Uint8Array(this.memoryBuffer);
      dstView.set(srcView, 0x18);
      
    }
  }
  
  return true;
};

VkGeometryNV.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
};

VkGeometryNV.byteLength = 0xA8;

VkGeometryNV.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  geometryType: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  geometry: {
    byteOffset: 0x18,
    byteLength: 0x88
  },
  flags: {
    byteOffset: 0xA0,
    byteLength: 0x4
  },
};
/** VkAccelerationStructureInfoNV **/
class VkAccelerationStructureInfoNV {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x28);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    
    
    this._pGeometries = null;
    this._pGeometriesNative = null;
    this.sType = 0x3B9D4E94;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.type !== void 0) this.type = opts.type;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.instanceCount !== void 0) this.instanceCount = opts.instanceCount;
      if (opts.geometryCount !== void 0) this.geometryCount = opts.geometryCount;
      if (opts.pGeometries !== void 0) this.pGeometries = opts.pGeometries;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkAccelerationStructureInfoNV.pNext' isn't allowed to be filled");
  }
  get type() {
    return this.memoryViewInt32[0x4];
  }
  set type(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get flags() {
    return this.memoryViewInt32[0x5];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x5] = value;
  }
  get instanceCount() {
    return this.memoryViewUint32[0x6];
  }
  set instanceCount(value) {
    
    this.memoryViewUint32[0x6] = value;
  }
  get geometryCount() {
    return this.memoryViewUint32[0x7];
  }
  set geometryCount(value) {
    
    this.memoryViewUint32[0x7] = value;
  }
  get pGeometries() {
    return this._pGeometries;
  }
  set pGeometries(value) {
    if (value !== null ) {
      this._pGeometries = value;
    } else if (value === null) {
      this._pGeometries = null;
    } 
    
  }
  
};

VkAccelerationStructureInfoNV.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pGeometries !== null) {
    let array = this._pGeometries;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pGeometriesNative = nativeArray;
    this.memoryViewBigInt64[0x4] = nativeArray.address;
  }
  
  return true;
};

VkAccelerationStructureInfoNV.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
};

VkAccelerationStructureInfoNV.byteLength = 0x28;

VkAccelerationStructureInfoNV.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  type: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  flags: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  instanceCount: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
  geometryCount: {
    byteOffset: 0x1C,
    byteLength: 0x4
  },
  pGeometries: {
    byteOffset: 0x20,
    byteLength: 0x8
  },
};
/** VkAccelerationStructureCreateInfoNV **/
class VkAccelerationStructureCreateInfoNV {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x40) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x40) / 0x8);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x40) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x40);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this._info = new VkAccelerationStructureInfoNV({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x18 });
    this.sType = 0x3B9D4E89;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.compactedSize !== void 0) this.compactedSize = opts.compactedSize;
      if (opts.info !== void 0) this.info = opts.info;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkAccelerationStructureCreateInfoNV.pNext' isn't allowed to be filled");
  }
  get compactedSize() {
    return this.memoryViewBigUint64[0x2];
  }
  set compactedSize(value) {
    
    this.memoryViewBigUint64[0x2] = BigInt(value);
  }
  get info() {
    return this._info;
  }
  set info(value) {
    if (value !== null ) {
      value.flush();
      this._info = value;
      
      
    } else if (value === null) {
      this._info = null;
      
    } 
    
  }
  
};

VkAccelerationStructureCreateInfoNV.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._info !== null) {
    this._info.flush();
    if (this.memoryBuffer !== this._info.memoryBuffer) {
      let srcView = new Uint8Array(this._info.memoryBuffer);
      let dstView = new Uint8Array(this.memoryBuffer);
      dstView.set(srcView, 0x18);
      
    }
  }
  
  return true;
};

VkAccelerationStructureCreateInfoNV.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
};

VkAccelerationStructureCreateInfoNV.byteLength = 0x40;

VkAccelerationStructureCreateInfoNV.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  compactedSize: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
  info: {
    byteOffset: 0x18,
    byteLength: 0x28
  },
};
/** VkBindAccelerationStructureMemoryInfoNV **/
class VkBindAccelerationStructureMemoryInfoNV {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x38) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x38) / 0x8);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x38) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x38) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x38);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._accelerationStructure = null;
    this._memory = null;
    
    
    this._pDeviceIndices = null;
    this.sType = 0x3B9D4E8E;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.accelerationStructure !== void 0) this.accelerationStructure = opts.accelerationStructure;
      if (opts.memory !== void 0) this.memory = opts.memory;
      if (opts.memoryOffset !== void 0) this.memoryOffset = opts.memoryOffset;
      if (opts.deviceIndexCount !== void 0) this.deviceIndexCount = opts.deviceIndexCount;
      if (opts.pDeviceIndices !== void 0) this.pDeviceIndices = opts.pDeviceIndices;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkBindAccelerationStructureMemoryInfoNV.pNext' isn't allowed to be filled");
  }
  get accelerationStructure() {
    return this._accelerationStructure;
  }
  set accelerationStructure(value) {
    if (value !== null ) {
      
      this._accelerationStructure = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._accelerationStructure = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } 
    
  }
  get memory() {
    return this._memory;
  }
  set memory(value) {
    if (value !== null ) {
      
      this._memory = value;
      
      this.memoryViewBigInt64[0x3] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._memory = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } 
    
  }
  get memoryOffset() {
    return this.memoryViewBigUint64[0x4];
  }
  set memoryOffset(value) {
    
    this.memoryViewBigUint64[0x4] = BigInt(value);
  }
  get deviceIndexCount() {
    return this.memoryViewUint32[0xA];
  }
  set deviceIndexCount(value) {
    
    this.memoryViewUint32[0xA] = value;
  }
  get pDeviceIndices() {
    return this._pDeviceIndices;
  }
  set pDeviceIndices(value) {
    if (value !== null ) {
      this._pDeviceIndices = value;
      this.memoryViewBigInt64[0x6] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pDeviceIndices = null;
      this.memoryViewBigInt64[0x6] = BI0;
    } 
    
  }
  
};

VkBindAccelerationStructureMemoryInfoNV.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkBindAccelerationStructureMemoryInfoNV.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkBindAccelerationStructureMemoryInfoNV.byteLength = 0x38;

VkBindAccelerationStructureMemoryInfoNV.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  accelerationStructure: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
  memory: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
  memoryOffset: {
    byteOffset: 0x20,
    byteLength: 0x8
  },
  deviceIndexCount: {
    byteOffset: 0x28,
    byteLength: 0x4
  },
  pDeviceIndices: {
    byteOffset: 0x30,
    byteLength: 0x8
  },
};
/** VkWriteDescriptorSetAccelerationStructureNV **/
class VkWriteDescriptorSetAccelerationStructureNV {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this._pAccelerationStructures = null;
    this._pAccelerationStructuresNative = null;
    this.sType = 0x3B9D4E8F;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.accelerationStructureCount !== void 0) this.accelerationStructureCount = opts.accelerationStructureCount;
      if (opts.pAccelerationStructures !== void 0) this.pAccelerationStructures = opts.pAccelerationStructures;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkWriteDescriptorSetAccelerationStructureNV.pNext' isn't allowed to be filled");
  }
  get accelerationStructureCount() {
    return this.memoryViewUint32[0x4];
  }
  set accelerationStructureCount(value) {
    
    this.memoryViewUint32[0x4] = value;
  }
  get pAccelerationStructures() {
    return this._pAccelerationStructures;
  }
  set pAccelerationStructures(value) {
    if (value !== null ) {
      this._pAccelerationStructures = value;
    } else if (value === null) {
      this._pAccelerationStructures = null;
    } 
    
  }
  
};

VkWriteDescriptorSetAccelerationStructureNV.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pAccelerationStructures !== null) {
    let array = this._pAccelerationStructures;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pAccelerationStructuresNative = nativeArray;
    this.memoryViewBigInt64[0x3] = nativeArray.address;
  }
  
  return true;
};

VkWriteDescriptorSetAccelerationStructureNV.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
};

VkWriteDescriptorSetAccelerationStructureNV.byteLength = 0x20;

VkWriteDescriptorSetAccelerationStructureNV.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  accelerationStructureCount: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  pAccelerationStructures: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
};
/** VkAccelerationStructureMemoryRequirementsInfoNV **/
class VkAccelerationStructureMemoryRequirementsInfoNV {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this._accelerationStructure = null;
    this.sType = 0x3B9D4E90;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.type !== void 0) this.type = opts.type;
      if (opts.accelerationStructure !== void 0) this.accelerationStructure = opts.accelerationStructure;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkAccelerationStructureMemoryRequirementsInfoNV.pNext' isn't allowed to be filled");
  }
  get type() {
    return this.memoryViewInt32[0x4];
  }
  set type(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get accelerationStructure() {
    return this._accelerationStructure;
  }
  set accelerationStructure(value) {
    if (value !== null ) {
      
      this._accelerationStructure = value;
      
      this.memoryViewBigInt64[0x3] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._accelerationStructure = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } 
    
  }
  
};

VkAccelerationStructureMemoryRequirementsInfoNV.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkAccelerationStructureMemoryRequirementsInfoNV.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkAccelerationStructureMemoryRequirementsInfoNV.byteLength = 0x20;

VkAccelerationStructureMemoryRequirementsInfoNV.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  type: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  accelerationStructure: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
};
/** VkPhysicalDeviceRayTracingPropertiesNV **/
class VkPhysicalDeviceRayTracingPropertiesNV {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x40) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x40) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x40) / 0x4);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x40) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x40);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    
    
    
    
    
    
    this.sType = 0x3B9D4E91;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceRayTracingPropertiesNV.pNext' isn't allowed to be filled");
  }
  get shaderGroupHandleSize() {
    return this.memoryViewUint32[0x4];
  }
  get maxRecursionDepth() {
    return this.memoryViewUint32[0x5];
  }
  get maxShaderGroupStride() {
    return this.memoryViewUint32[0x6];
  }
  get shaderGroupBaseAlignment() {
    return this.memoryViewUint32[0x7];
  }
  get maxGeometryCount() {
    return this.memoryViewBigUint64[0x4];
  }
  get maxInstanceCount() {
    return this.memoryViewBigUint64[0x5];
  }
  get maxTriangleCount() {
    return this.memoryViewBigUint64[0x6];
  }
  get maxDescriptorSetAccelerationStructures() {
    return this.memoryViewUint32[0xE];
  }
  
};

VkPhysicalDeviceRayTracingPropertiesNV.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceRayTracingPropertiesNV.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x40));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x40), 0x0);
  
  
};

VkPhysicalDeviceRayTracingPropertiesNV.byteLength = 0x40;

VkPhysicalDeviceRayTracingPropertiesNV.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  shaderGroupHandleSize: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  maxRecursionDepth: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  maxShaderGroupStride: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
  shaderGroupBaseAlignment: {
    byteOffset: 0x1C,
    byteLength: 0x4
  },
  maxGeometryCount: {
    byteOffset: 0x20,
    byteLength: 0x8
  },
  maxInstanceCount: {
    byteOffset: 0x28,
    byteLength: 0x8
  },
  maxTriangleCount: {
    byteOffset: 0x30,
    byteLength: 0x8
  },
  maxDescriptorSetAccelerationStructures: {
    byteOffset: 0x38,
    byteLength: 0x4
  },
};
/** VkDrmFormatModifierPropertiesListEXT **/
class VkDrmFormatModifierPropertiesListEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this._pDrmFormatModifierProperties = null;
    this._pDrmFormatModifierPropertiesNative = null;
    this.sType = 0x3B9D3330;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDrmFormatModifierPropertiesListEXT.pNext' isn't allowed to be filled");
  }
  get drmFormatModifierCount() {
    return this.memoryViewUint32[0x4];
  }
  get pDrmFormatModifierProperties() {
    return this._pDrmFormatModifierProperties;
  }
  
};

VkDrmFormatModifierPropertiesListEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDrmFormatModifierPropertiesListEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x20));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x20), 0x0);
  
  
  
  
};

VkDrmFormatModifierPropertiesListEXT.byteLength = 0x20;

VkDrmFormatModifierPropertiesListEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  drmFormatModifierCount: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  pDrmFormatModifierProperties: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
};
/** VkDrmFormatModifierPropertiesEXT **/
class VkDrmFormatModifierPropertiesEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x10) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x10) / 0x4);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x10) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x10);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);

    }
    
    
    
    
    if (typeof opts === "object") {
      
    }
  }
  get drmFormatModifier() {
    return this.memoryViewBigUint64[0x0];
  }
  get drmFormatModifierPlaneCount() {
    return this.memoryViewUint32[0x2];
  }
  get drmFormatModifierTilingFeatures() {
    return this.memoryViewInt32[0x3];
  }
  
};

VkDrmFormatModifierPropertiesEXT.prototype.flush = function flush() {
  
  return true;
};

VkDrmFormatModifierPropertiesEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x10));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x10), 0x0);
};

VkDrmFormatModifierPropertiesEXT.byteLength = 0x10;

VkDrmFormatModifierPropertiesEXT.memoryLayout = {
  drmFormatModifier: {
    byteOffset: 0x0,
    byteLength: 0x8
  },
  drmFormatModifierPlaneCount: {
    byteOffset: 0x8,
    byteLength: 0x4
  },
  drmFormatModifierTilingFeatures: {
    byteOffset: 0xC,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceImageDrmFormatModifierInfoEXT **/
class VkPhysicalDeviceImageDrmFormatModifierInfoEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x28);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    
    this._pQueueFamilyIndices = null;
    this.sType = 0x3B9D3332;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.drmFormatModifier !== void 0) this.drmFormatModifier = opts.drmFormatModifier;
      if (opts.sharingMode !== void 0) this.sharingMode = opts.sharingMode;
      if (opts.queueFamilyIndexCount !== void 0) this.queueFamilyIndexCount = opts.queueFamilyIndexCount;
      if (opts.pQueueFamilyIndices !== void 0) this.pQueueFamilyIndices = opts.pQueueFamilyIndices;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceImageDrmFormatModifierInfoEXT.pNext' isn't allowed to be filled");
  }
  get drmFormatModifier() {
    return this.memoryViewBigUint64[0x2];
  }
  set drmFormatModifier(value) {
    
    this.memoryViewBigUint64[0x2] = BigInt(value);
  }
  get sharingMode() {
    return this.memoryViewInt32[0x6];
  }
  set sharingMode(value) {
    
    this.memoryViewInt32[0x6] = value;
  }
  get queueFamilyIndexCount() {
    return this.memoryViewUint32[0x7];
  }
  set queueFamilyIndexCount(value) {
    
    this.memoryViewUint32[0x7] = value;
  }
  get pQueueFamilyIndices() {
    return this._pQueueFamilyIndices;
  }
  set pQueueFamilyIndices(value) {
    if (value !== null ) {
      this._pQueueFamilyIndices = value;
      this.memoryViewBigInt64[0x4] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pQueueFamilyIndices = null;
      this.memoryViewBigInt64[0x4] = BI0;
    } 
    
  }
  
};

VkPhysicalDeviceImageDrmFormatModifierInfoEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceImageDrmFormatModifierInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPhysicalDeviceImageDrmFormatModifierInfoEXT.byteLength = 0x28;

VkPhysicalDeviceImageDrmFormatModifierInfoEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  drmFormatModifier: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
  sharingMode: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
  queueFamilyIndexCount: {
    byteOffset: 0x1C,
    byteLength: 0x4
  },
  pQueueFamilyIndices: {
    byteOffset: 0x20,
    byteLength: 0x8
  },
};
/** VkImageDrmFormatModifierListCreateInfoEXT **/
class VkImageDrmFormatModifierListCreateInfoEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this._pDrmFormatModifiers = null;
    this.sType = 0x3B9D3333;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.drmFormatModifierCount !== void 0) this.drmFormatModifierCount = opts.drmFormatModifierCount;
      if (opts.pDrmFormatModifiers !== void 0) this.pDrmFormatModifiers = opts.pDrmFormatModifiers;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkImageDrmFormatModifierListCreateInfoEXT.pNext' isn't allowed to be filled");
  }
  get drmFormatModifierCount() {
    return this.memoryViewUint32[0x4];
  }
  set drmFormatModifierCount(value) {
    
    this.memoryViewUint32[0x4] = value;
  }
  get pDrmFormatModifiers() {
    return this._pDrmFormatModifiers;
  }
  set pDrmFormatModifiers(value) {
    if (value !== null ) {
      this._pDrmFormatModifiers = value;
      this.memoryViewBigInt64[0x3] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pDrmFormatModifiers = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } 
    
  }
  
};

VkImageDrmFormatModifierListCreateInfoEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkImageDrmFormatModifierListCreateInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkImageDrmFormatModifierListCreateInfoEXT.byteLength = 0x20;

VkImageDrmFormatModifierListCreateInfoEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  drmFormatModifierCount: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  pDrmFormatModifiers: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
};
/** VkImageDrmFormatModifierExplicitCreateInfoEXT **/
class VkImageDrmFormatModifierExplicitCreateInfoEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x28);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    this._pPlaneLayouts = null;
    this._pPlaneLayoutsNative = null;
    this.sType = 0x3B9D3334;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.drmFormatModifier !== void 0) this.drmFormatModifier = opts.drmFormatModifier;
      if (opts.drmFormatModifierPlaneCount !== void 0) this.drmFormatModifierPlaneCount = opts.drmFormatModifierPlaneCount;
      if (opts.pPlaneLayouts !== void 0) this.pPlaneLayouts = opts.pPlaneLayouts;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkImageDrmFormatModifierExplicitCreateInfoEXT.pNext' isn't allowed to be filled");
  }
  get drmFormatModifier() {
    return this.memoryViewBigUint64[0x2];
  }
  set drmFormatModifier(value) {
    
    this.memoryViewBigUint64[0x2] = BigInt(value);
  }
  get drmFormatModifierPlaneCount() {
    return this.memoryViewUint32[0x6];
  }
  set drmFormatModifierPlaneCount(value) {
    
    this.memoryViewUint32[0x6] = value;
  }
  get pPlaneLayouts() {
    return this._pPlaneLayouts;
  }
  set pPlaneLayouts(value) {
    if (value !== null ) {
      this._pPlaneLayouts = value;
    } else if (value === null) {
      this._pPlaneLayouts = null;
    } 
    
  }
  
};

VkImageDrmFormatModifierExplicitCreateInfoEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pPlaneLayouts !== null) {
    let array = this._pPlaneLayouts;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pPlaneLayoutsNative = nativeArray;
    this.memoryViewBigInt64[0x4] = nativeArray.address;
  }
  
  return true;
};

VkImageDrmFormatModifierExplicitCreateInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
};

VkImageDrmFormatModifierExplicitCreateInfoEXT.byteLength = 0x28;

VkImageDrmFormatModifierExplicitCreateInfoEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  drmFormatModifier: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
  drmFormatModifierPlaneCount: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
  pPlaneLayouts: {
    byteOffset: 0x20,
    byteLength: 0x8
  },
};
/** VkImageDrmFormatModifierPropertiesEXT **/
class VkImageDrmFormatModifierPropertiesEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9D3335;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkImageDrmFormatModifierPropertiesEXT.pNext' isn't allowed to be filled");
  }
  get drmFormatModifier() {
    return this.memoryViewBigUint64[0x2];
  }
  
};

VkImageDrmFormatModifierPropertiesEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkImageDrmFormatModifierPropertiesEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x18));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x18), 0x0);
  
  
};

VkImageDrmFormatModifierPropertiesEXT.byteLength = 0x18;

VkImageDrmFormatModifierPropertiesEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  drmFormatModifier: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
};
/** VkImageStencilUsageCreateInfoEXT **/
class VkImageStencilUsageCreateInfoEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9E8AF0;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.stencilUsage !== void 0) this.stencilUsage = opts.stencilUsage;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkImageStencilUsageCreateInfoEXT.pNext' isn't allowed to be filled");
  }
  get stencilUsage() {
    return this.memoryViewInt32[0x4];
  }
  set stencilUsage(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkImageStencilUsageCreateInfoEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkImageStencilUsageCreateInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkImageStencilUsageCreateInfoEXT.byteLength = 0x18;

VkImageStencilUsageCreateInfoEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  stencilUsage: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkDeviceMemoryOverallocationCreateInfoAMD **/
class VkDeviceMemoryOverallocationCreateInfoAMD {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9DAC48;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.overallocationBehavior !== void 0) this.overallocationBehavior = opts.overallocationBehavior;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDeviceMemoryOverallocationCreateInfoAMD.pNext' isn't allowed to be filled");
  }
  get overallocationBehavior() {
    return this.memoryViewInt32[0x4];
  }
  set overallocationBehavior(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkDeviceMemoryOverallocationCreateInfoAMD.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDeviceMemoryOverallocationCreateInfoAMD.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkDeviceMemoryOverallocationCreateInfoAMD.byteLength = 0x18;

VkDeviceMemoryOverallocationCreateInfoAMD.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  overallocationBehavior: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceFragmentDensityMapFeaturesEXT **/
class VkPhysicalDeviceFragmentDensityMapFeaturesEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    
    this.sType = 0x3B9E1D90;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceFragmentDensityMapFeaturesEXT.pNext' isn't allowed to be filled");
  }
  get fragmentDensityMap() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  get fragmentDensityMapDynamic() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  get fragmentDensityMapNonSubsampledImages() {
    return this.memoryViewUint32[0x6] !== 0;
  }
  
};

VkPhysicalDeviceFragmentDensityMapFeaturesEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceFragmentDensityMapFeaturesEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x20));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x20), 0x0);
  
  
};

VkPhysicalDeviceFragmentDensityMapFeaturesEXT.byteLength = 0x20;

VkPhysicalDeviceFragmentDensityMapFeaturesEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  fragmentDensityMap: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  fragmentDensityMapDynamic: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  fragmentDensityMapNonSubsampledImages: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceFragmentDensityMapPropertiesEXT **/
class VkPhysicalDeviceFragmentDensityMapPropertiesEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x28);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._minFragmentDensityTexelSize = new VkExtent2D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x10 });
    this._maxFragmentDensityTexelSize = new VkExtent2D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x18 });
    
    this.sType = 0x3B9E1D91;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceFragmentDensityMapPropertiesEXT.pNext' isn't allowed to be filled");
  }
  get minFragmentDensityTexelSize() {
    return this._minFragmentDensityTexelSize;
  }
  get maxFragmentDensityTexelSize() {
    return this._maxFragmentDensityTexelSize;
  }
  get fragmentDensityInvocations() {
    return this.memoryViewUint32[0x8] !== 0;
  }
  
};

VkPhysicalDeviceFragmentDensityMapPropertiesEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceFragmentDensityMapPropertiesEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x28));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x28), 0x0);
  
  
  
  
  
  
};

VkPhysicalDeviceFragmentDensityMapPropertiesEXT.byteLength = 0x28;

VkPhysicalDeviceFragmentDensityMapPropertiesEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  minFragmentDensityTexelSize: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
  maxFragmentDensityTexelSize: {
    byteOffset: 0x18,
    byteLength: 0x8
  },
  fragmentDensityInvocations: {
    byteOffset: 0x20,
    byteLength: 0x4
  },
};
/** VkRenderPassFragmentDensityMapCreateInfoEXT **/
class VkRenderPassFragmentDensityMapCreateInfoEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._fragmentDensityMapAttachment = new VkAttachmentReference({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x10 });
    this.sType = 0x3B9E1D92;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.fragmentDensityMapAttachment !== void 0) this.fragmentDensityMapAttachment = opts.fragmentDensityMapAttachment;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkRenderPassFragmentDensityMapCreateInfoEXT.pNext' isn't allowed to be filled");
  }
  get fragmentDensityMapAttachment() {
    return this._fragmentDensityMapAttachment;
  }
  set fragmentDensityMapAttachment(value) {
    if (value !== null ) {
      value.flush();
      this._fragmentDensityMapAttachment = value;
      
      
    } else if (value === null) {
      this._fragmentDensityMapAttachment = null;
      
    } 
    
  }
  
};

VkRenderPassFragmentDensityMapCreateInfoEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._fragmentDensityMapAttachment !== null) {
    this._fragmentDensityMapAttachment.flush();
    if (this.memoryBuffer !== this._fragmentDensityMapAttachment.memoryBuffer) {
      let srcView = new Uint8Array(this._fragmentDensityMapAttachment.memoryBuffer);
      let dstView = new Uint8Array(this.memoryBuffer);
      dstView.set(srcView, 0x10);
      
    }
  }
  
  return true;
};

VkRenderPassFragmentDensityMapCreateInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
};

VkRenderPassFragmentDensityMapCreateInfoEXT.byteLength = 0x18;

VkRenderPassFragmentDensityMapCreateInfoEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  fragmentDensityMapAttachment: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
};
/** VkPhysicalDeviceScalarBlockLayoutFeaturesEXT **/
class VkPhysicalDeviceScalarBlockLayoutFeaturesEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9E2948;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.scalarBlockLayout !== void 0) this.scalarBlockLayout = opts.scalarBlockLayout;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceScalarBlockLayoutFeaturesEXT.pNext' isn't allowed to be filled");
  }
  get scalarBlockLayout() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set scalarBlockLayout(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  
};

VkPhysicalDeviceScalarBlockLayoutFeaturesEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceScalarBlockLayoutFeaturesEXT.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPhysicalDeviceScalarBlockLayoutFeaturesEXT.byteLength = 0x18;

VkPhysicalDeviceScalarBlockLayoutFeaturesEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  scalarBlockLayout: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkSurfaceProtectedCapabilitiesKHR **/
class VkSurfaceProtectedCapabilitiesKHR {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9E6F98;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.supportsProtected !== void 0) this.supportsProtected = opts.supportsProtected;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkSurfaceProtectedCapabilitiesKHR.pNext' isn't allowed to be filled");
  }
  get supportsProtected() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set supportsProtected(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  
};

VkSurfaceProtectedCapabilitiesKHR.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkSurfaceProtectedCapabilitiesKHR.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkSurfaceProtectedCapabilitiesKHR.byteLength = 0x18;

VkSurfaceProtectedCapabilitiesKHR.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  supportsProtected: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceDepthClipEnableFeaturesEXT **/
class VkPhysicalDeviceDepthClipEnableFeaturesEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9C5870;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.depthClipEnable !== void 0) this.depthClipEnable = opts.depthClipEnable;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceDepthClipEnableFeaturesEXT.pNext' isn't allowed to be filled");
  }
  get depthClipEnable() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set depthClipEnable(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  
};

VkPhysicalDeviceDepthClipEnableFeaturesEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceDepthClipEnableFeaturesEXT.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPhysicalDeviceDepthClipEnableFeaturesEXT.byteLength = 0x18;

VkPhysicalDeviceDepthClipEnableFeaturesEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  depthClipEnable: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkPipelineRasterizationDepthClipStateCreateInfoEXT **/
class VkPipelineRasterizationDepthClipStateCreateInfoEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    this.sType = 0x3B9C5871;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.depthClipEnable !== void 0) this.depthClipEnable = opts.depthClipEnable;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPipelineRasterizationDepthClipStateCreateInfoEXT.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  get depthClipEnable() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  set depthClipEnable(value) {
    this.memoryViewUint32[0x5] = value | 0;
  }
  
};

VkPipelineRasterizationDepthClipStateCreateInfoEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPipelineRasterizationDepthClipStateCreateInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPipelineRasterizationDepthClipStateCreateInfoEXT.byteLength = 0x18;

VkPipelineRasterizationDepthClipStateCreateInfoEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  flags: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  depthClipEnable: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceMemoryBudgetPropertiesEXT **/
class VkPhysicalDeviceMemoryBudgetPropertiesEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x110) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x110) / 0x8);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x110) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x110);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._heapBudget = [...Array(16)].fill(0x0);
    this._heapUsage = [...Array(16)].fill(0x0);
    this.sType = 0x3B9E67C8;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceMemoryBudgetPropertiesEXT.pNext' isn't allowed to be filled");
  }
  get heapBudget() {
    return [
      this.memoryViewBigUint64[0x2],
      this.memoryViewBigUint64[0x3],
      this.memoryViewBigUint64[0x4],
      this.memoryViewBigUint64[0x5],
      this.memoryViewBigUint64[0x6],
      this.memoryViewBigUint64[0x7],
      this.memoryViewBigUint64[0x8],
      this.memoryViewBigUint64[0x9],
      this.memoryViewBigUint64[0xA],
      this.memoryViewBigUint64[0xB],
      this.memoryViewBigUint64[0xC],
      this.memoryViewBigUint64[0xD],
      this.memoryViewBigUint64[0xE],
      this.memoryViewBigUint64[0xF],
      this.memoryViewBigUint64[0x10],
      this.memoryViewBigUint64[0x11]
    ];
  }
  get heapUsage() {
    return [
      this.memoryViewBigUint64[0x12],
      this.memoryViewBigUint64[0x13],
      this.memoryViewBigUint64[0x14],
      this.memoryViewBigUint64[0x15],
      this.memoryViewBigUint64[0x16],
      this.memoryViewBigUint64[0x17],
      this.memoryViewBigUint64[0x18],
      this.memoryViewBigUint64[0x19],
      this.memoryViewBigUint64[0x1A],
      this.memoryViewBigUint64[0x1B],
      this.memoryViewBigUint64[0x1C],
      this.memoryViewBigUint64[0x1D],
      this.memoryViewBigUint64[0x1E],
      this.memoryViewBigUint64[0x1F],
      this.memoryViewBigUint64[0x20],
      this.memoryViewBigUint64[0x21]
    ];
  }
  
};

VkPhysicalDeviceMemoryBudgetPropertiesEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceMemoryBudgetPropertiesEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x110));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x110), 0x0);
  
  
  
  
  
  
};

VkPhysicalDeviceMemoryBudgetPropertiesEXT.byteLength = 0x110;

VkPhysicalDeviceMemoryBudgetPropertiesEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  heapBudget: {
    byteOffset: 0x10,
    byteLength: 0x80
  },
  heapUsage: {
    byteOffset: 0x90,
    byteLength: 0x80
  },
};
/** VkPhysicalDeviceMemoryPriorityFeaturesEXT **/
class VkPhysicalDeviceMemoryPriorityFeaturesEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9E6BB0;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.memoryPriority !== void 0) this.memoryPriority = opts.memoryPriority;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceMemoryPriorityFeaturesEXT.pNext' isn't allowed to be filled");
  }
  get memoryPriority() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set memoryPriority(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  
};

VkPhysicalDeviceMemoryPriorityFeaturesEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceMemoryPriorityFeaturesEXT.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPhysicalDeviceMemoryPriorityFeaturesEXT.byteLength = 0x18;

VkPhysicalDeviceMemoryPriorityFeaturesEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  memoryPriority: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkMemoryPriorityAllocateInfoEXT **/
class VkMemoryPriorityAllocateInfoEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewFloat32 = new Float32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewFloat32 = new Float32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9E6BB1;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.priority !== void 0) this.priority = opts.priority;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkMemoryPriorityAllocateInfoEXT.pNext' isn't allowed to be filled");
  }
  get priority() {
    return this.memoryViewFloat32[0x4];
  }
  set priority(value) {
    
    this.memoryViewFloat32[0x4] = value;
  }
  
};

VkMemoryPriorityAllocateInfoEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkMemoryPriorityAllocateInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkMemoryPriorityAllocateInfoEXT.byteLength = 0x18;

VkMemoryPriorityAllocateInfoEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  priority: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceBufferDeviceAddressFeaturesEXT **/
class VkPhysicalDeviceBufferDeviceAddressFeaturesEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    
    this.sType = 0x3B9E8320;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.bufferDeviceAddress !== void 0) this.bufferDeviceAddress = opts.bufferDeviceAddress;
      if (opts.bufferDeviceAddressCaptureReplay !== void 0) this.bufferDeviceAddressCaptureReplay = opts.bufferDeviceAddressCaptureReplay;
      if (opts.bufferDeviceAddressMultiDevice !== void 0) this.bufferDeviceAddressMultiDevice = opts.bufferDeviceAddressMultiDevice;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceBufferDeviceAddressFeaturesEXT.pNext' isn't allowed to be filled");
  }
  get bufferDeviceAddress() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set bufferDeviceAddress(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  get bufferDeviceAddressCaptureReplay() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  set bufferDeviceAddressCaptureReplay(value) {
    this.memoryViewUint32[0x5] = value | 0;
  }
  get bufferDeviceAddressMultiDevice() {
    return this.memoryViewUint32[0x6] !== 0;
  }
  set bufferDeviceAddressMultiDevice(value) {
    this.memoryViewUint32[0x6] = value | 0;
  }
  
};

VkPhysicalDeviceBufferDeviceAddressFeaturesEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceBufferDeviceAddressFeaturesEXT.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPhysicalDeviceBufferDeviceAddressFeaturesEXT.byteLength = 0x20;

VkPhysicalDeviceBufferDeviceAddressFeaturesEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  bufferDeviceAddress: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  bufferDeviceAddressCaptureReplay: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  bufferDeviceAddressMultiDevice: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceBufferAddressFeaturesEXT **/
class VkPhysicalDeviceBufferAddressFeaturesEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x20);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    
    this.sType = 0x3B9E8320;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.bufferDeviceAddress !== void 0) this.bufferDeviceAddress = opts.bufferDeviceAddress;
      if (opts.bufferDeviceAddressCaptureReplay !== void 0) this.bufferDeviceAddressCaptureReplay = opts.bufferDeviceAddressCaptureReplay;
      if (opts.bufferDeviceAddressMultiDevice !== void 0) this.bufferDeviceAddressMultiDevice = opts.bufferDeviceAddressMultiDevice;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceBufferAddressFeaturesEXT.pNext' isn't allowed to be filled");
  }
  get bufferDeviceAddress() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set bufferDeviceAddress(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  get bufferDeviceAddressCaptureReplay() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  set bufferDeviceAddressCaptureReplay(value) {
    this.memoryViewUint32[0x5] = value | 0;
  }
  get bufferDeviceAddressMultiDevice() {
    return this.memoryViewUint32[0x6] !== 0;
  }
  set bufferDeviceAddressMultiDevice(value) {
    this.memoryViewUint32[0x6] = value | 0;
  }
  
};

VkPhysicalDeviceBufferAddressFeaturesEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceBufferAddressFeaturesEXT.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPhysicalDeviceBufferAddressFeaturesEXT.byteLength = 0x20;

VkPhysicalDeviceBufferAddressFeaturesEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  bufferDeviceAddress: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  bufferDeviceAddressCaptureReplay: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  bufferDeviceAddressMultiDevice: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
};
/** VkBufferDeviceAddressInfoEXT **/
class VkBufferDeviceAddressInfoEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._buffer = null;
    this.sType = 0x3B9E8321;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.buffer !== void 0) this.buffer = opts.buffer;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkBufferDeviceAddressInfoEXT.pNext' isn't allowed to be filled");
  }
  get buffer() {
    return this._buffer;
  }
  set buffer(value) {
    if (value !== null ) {
      
      this._buffer = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._buffer = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } 
    
  }
  
};

VkBufferDeviceAddressInfoEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkBufferDeviceAddressInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkBufferDeviceAddressInfoEXT.byteLength = 0x18;

VkBufferDeviceAddressInfoEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  buffer: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
};
/** VkBufferDeviceAddressCreateInfoEXT **/
class VkBufferDeviceAddressCreateInfoEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9E8322;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.deviceAddress !== void 0) this.deviceAddress = opts.deviceAddress;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkBufferDeviceAddressCreateInfoEXT.pNext' isn't allowed to be filled");
  }
  get deviceAddress() {
    return this.memoryViewBigUint64[0x2];
  }
  set deviceAddress(value) {
    
    this.memoryViewBigUint64[0x2] = BigInt(value);
  }
  
};

VkBufferDeviceAddressCreateInfoEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkBufferDeviceAddressCreateInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkBufferDeviceAddressCreateInfoEXT.byteLength = 0x18;

VkBufferDeviceAddressCreateInfoEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  deviceAddress: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
};
/** VkPhysicalDeviceImageViewImageFormatInfoEXT **/
class VkPhysicalDeviceImageViewImageFormatInfoEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9D6210;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.imageViewType !== void 0) this.imageViewType = opts.imageViewType;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceImageViewImageFormatInfoEXT.pNext' isn't allowed to be filled");
  }
  get imageViewType() {
    return this.memoryViewInt32[0x4];
  }
  set imageViewType(value) {
    
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkPhysicalDeviceImageViewImageFormatInfoEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceImageViewImageFormatInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPhysicalDeviceImageViewImageFormatInfoEXT.byteLength = 0x18;

VkPhysicalDeviceImageViewImageFormatInfoEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  imageViewType: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkFilterCubicImageViewImageFormatPropertiesEXT **/
class VkFilterCubicImageViewImageFormatPropertiesEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    this.sType = 0x3B9D6211;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkFilterCubicImageViewImageFormatPropertiesEXT.pNext' isn't allowed to be filled");
  }
  get filterCubic() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  get filterCubicMinmax() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  
};

VkFilterCubicImageViewImageFormatPropertiesEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkFilterCubicImageViewImageFormatPropertiesEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x18));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x18), 0x0);
  
  
};

VkFilterCubicImageViewImageFormatPropertiesEXT.byteLength = 0x18;

VkFilterCubicImageViewImageFormatPropertiesEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  filterCubic: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  filterCubicMinmax: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceCooperativeMatrixFeaturesNV **/
class VkPhysicalDeviceCooperativeMatrixFeaturesNV {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    this.sType = 0x3B9E96A8;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.cooperativeMatrix !== void 0) this.cooperativeMatrix = opts.cooperativeMatrix;
      if (opts.cooperativeMatrixRobustBufferAccess !== void 0) this.cooperativeMatrixRobustBufferAccess = opts.cooperativeMatrixRobustBufferAccess;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceCooperativeMatrixFeaturesNV.pNext' isn't allowed to be filled");
  }
  get cooperativeMatrix() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set cooperativeMatrix(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  get cooperativeMatrixRobustBufferAccess() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  set cooperativeMatrixRobustBufferAccess(value) {
    this.memoryViewUint32[0x5] = value | 0;
  }
  
};

VkPhysicalDeviceCooperativeMatrixFeaturesNV.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceCooperativeMatrixFeaturesNV.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPhysicalDeviceCooperativeMatrixFeaturesNV.byteLength = 0x18;

VkPhysicalDeviceCooperativeMatrixFeaturesNV.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  cooperativeMatrix: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  cooperativeMatrixRobustBufferAccess: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceCooperativeMatrixPropertiesNV **/
class VkPhysicalDeviceCooperativeMatrixPropertiesNV {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9E96AA;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceCooperativeMatrixPropertiesNV.pNext' isn't allowed to be filled");
  }
  get cooperativeMatrixSupportedStages() {
    return this.memoryViewInt32[0x4];
  }
  
};

VkPhysicalDeviceCooperativeMatrixPropertiesNV.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceCooperativeMatrixPropertiesNV.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x18));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x18), 0x0);
  
  
};

VkPhysicalDeviceCooperativeMatrixPropertiesNV.byteLength = 0x18;

VkPhysicalDeviceCooperativeMatrixPropertiesNV.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  cooperativeMatrixSupportedStages: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkCooperativeMatrixPropertiesNV **/
class VkCooperativeMatrixPropertiesNV {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x30) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x30) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x30) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x30);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    
    
    
    
    
    
    
    this.sType = 0x3B9E96A9;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.MSize !== void 0) this.MSize = opts.MSize;
      if (opts.NSize !== void 0) this.NSize = opts.NSize;
      if (opts.KSize !== void 0) this.KSize = opts.KSize;
      if (opts.AType !== void 0) this.AType = opts.AType;
      if (opts.BType !== void 0) this.BType = opts.BType;
      if (opts.CType !== void 0) this.CType = opts.CType;
      if (opts.DType !== void 0) this.DType = opts.DType;
      if (opts.scope !== void 0) this.scope = opts.scope;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkCooperativeMatrixPropertiesNV.pNext' isn't allowed to be filled");
  }
  get MSize() {
    return this.memoryViewUint32[0x4];
  }
  set MSize(value) {
    
    this.memoryViewUint32[0x4] = value;
  }
  get NSize() {
    return this.memoryViewUint32[0x5];
  }
  set NSize(value) {
    
    this.memoryViewUint32[0x5] = value;
  }
  get KSize() {
    return this.memoryViewUint32[0x6];
  }
  set KSize(value) {
    
    this.memoryViewUint32[0x6] = value;
  }
  get AType() {
    return this.memoryViewInt32[0x7];
  }
  set AType(value) {
    
    this.memoryViewInt32[0x7] = value;
  }
  get BType() {
    return this.memoryViewInt32[0x8];
  }
  set BType(value) {
    
    this.memoryViewInt32[0x8] = value;
  }
  get CType() {
    return this.memoryViewInt32[0x9];
  }
  set CType(value) {
    
    this.memoryViewInt32[0x9] = value;
  }
  get DType() {
    return this.memoryViewInt32[0xA];
  }
  set DType(value) {
    
    this.memoryViewInt32[0xA] = value;
  }
  get scope() {
    return this.memoryViewInt32[0xB];
  }
  set scope(value) {
    
    this.memoryViewInt32[0xB] = value;
  }
  
};

VkCooperativeMatrixPropertiesNV.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkCooperativeMatrixPropertiesNV.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkCooperativeMatrixPropertiesNV.byteLength = 0x30;

VkCooperativeMatrixPropertiesNV.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  MSize: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
  NSize: {
    byteOffset: 0x14,
    byteLength: 0x4
  },
  KSize: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
  AType: {
    byteOffset: 0x1C,
    byteLength: 0x4
  },
  BType: {
    byteOffset: 0x20,
    byteLength: 0x4
  },
  CType: {
    byteOffset: 0x24,
    byteLength: 0x4
  },
  DType: {
    byteOffset: 0x28,
    byteLength: 0x4
  },
  scope: {
    byteOffset: 0x2C,
    byteLength: 0x4
  },
};
/** VkPhysicalDeviceYcbcrImageArraysFeaturesEXT **/
class VkPhysicalDeviceYcbcrImageArraysFeaturesEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x18);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    
    this.sType = 0x3B9EA260;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.ycbcrImageArrays !== void 0) this.ycbcrImageArrays = opts.ycbcrImageArrays;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceYcbcrImageArraysFeaturesEXT.pNext' isn't allowed to be filled");
  }
  get ycbcrImageArrays() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set ycbcrImageArrays(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  
};

VkPhysicalDeviceYcbcrImageArraysFeaturesEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceYcbcrImageArraysFeaturesEXT.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkPhysicalDeviceYcbcrImageArraysFeaturesEXT.byteLength = 0x18;

VkPhysicalDeviceYcbcrImageArraysFeaturesEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  ycbcrImageArrays: {
    byteOffset: 0x10,
    byteLength: 0x4
  },
};
/** VkImageViewHandleInfoNVX **/
class VkImageViewHandleInfoNVX {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x28);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._imageView = null;
    
    this._sampler = null;
    this.sType = 0x3B9B3F30;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.imageView !== void 0) this.imageView = opts.imageView;
      if (opts.descriptorType !== void 0) this.descriptorType = opts.descriptorType;
      if (opts.sampler !== void 0) this.sampler = opts.sampler;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkImageViewHandleInfoNVX.pNext' isn't allowed to be filled");
  }
  get imageView() {
    return this._imageView;
  }
  set imageView(value) {
    if (value !== null ) {
      
      this._imageView = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._imageView = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } 
    
  }
  get descriptorType() {
    return this.memoryViewInt32[0x6];
  }
  set descriptorType(value) {
    
    this.memoryViewInt32[0x6] = value;
  }
  get sampler() {
    return this._sampler;
  }
  set sampler(value) {
    if (value !== null ) {
      
      this._sampler = value;
      
      this.memoryViewBigInt64[0x4] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._sampler = null;
      this.memoryViewBigInt64[0x4] = BI0;
    } 
    
  }
  
};

VkImageViewHandleInfoNVX.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkImageViewHandleInfoNVX.prototype.reflect = function reflect(memoryAddress) {
  
  
  
};

VkImageViewHandleInfoNVX.byteLength = 0x28;

VkImageViewHandleInfoNVX.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  imageView: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
  descriptorType: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
  sampler: {
    byteOffset: 0x20,
    byteLength: 0x8
  },
};
/** VkPipelineCreationFeedbackEXT **/
class VkPipelineCreationFeedbackEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x10) / 0x4);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x10) / 0x8);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x10);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);

    }
    
    
    
    if (typeof opts === "object") {
      
    }
  }
  get flags() {
    return this.memoryViewInt32[0x0];
  }
  get duration() {
    return this.memoryViewBigUint64[0x1];
  }
  
};

VkPipelineCreationFeedbackEXT.prototype.flush = function flush() {
  
  return true;
};

VkPipelineCreationFeedbackEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, BigInt(0x10));
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  dstView.set(srcView.subarray(0x0, 0x10), 0x0);
};

VkPipelineCreationFeedbackEXT.byteLength = 0x10;

VkPipelineCreationFeedbackEXT.memoryLayout = {
  flags: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  duration: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
};
/** VkPipelineCreationFeedbackCreateInfoEXT **/
class VkPipelineCreationFeedbackCreateInfoEXT {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x28);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    
    this._pNext = null;
    this._pPipelineCreationFeedback = null;
    
    this._pPipelineStageCreationFeedbacks = null;
    this._pPipelineStageCreationFeedbacksNative = null;
    this.sType = 0x3B9DB800;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.pPipelineCreationFeedback !== void 0) this.pPipelineCreationFeedback = opts.pPipelineCreationFeedback;
      if (opts.pipelineStageCreationFeedbackCount !== void 0) this.pipelineStageCreationFeedbackCount = opts.pipelineStageCreationFeedbackCount;
      if (opts.pPipelineStageCreationFeedbacks !== void 0) this.pPipelineStageCreationFeedbacks = opts.pPipelineStageCreationFeedbacks;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPipelineCreationFeedbackCreateInfoEXT.pNext' isn't allowed to be filled");
  }
  get pPipelineCreationFeedback() {
    return this._pPipelineCreationFeedback;
  }
  set pPipelineCreationFeedback(value) {
    if (value !== null ) {
      value.flush();
      this._pPipelineCreationFeedback = value;
      this.memoryViewBigInt64[0x2] = value.memoryAddress;
      
    } else if (value === null) {
      this._pPipelineCreationFeedback = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } 
    
  }
  get pipelineStageCreationFeedbackCount() {
    return this.memoryViewUint32[0x6];
  }
  set pipelineStageCreationFeedbackCount(value) {
    
    this.memoryViewUint32[0x6] = value;
  }
  get pPipelineStageCreationFeedbacks() {
    return this._pPipelineStageCreationFeedbacks;
  }
  set pPipelineStageCreationFeedbacks(value) {
    if (value !== null ) {
      this._pPipelineStageCreationFeedbacks = value;
    } else if (value === null) {
      this._pPipelineStageCreationFeedbacks = null;
    } 
    
  }
  
};

VkPipelineCreationFeedbackCreateInfoEXT.prototype.flush = function flush() {
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pPipelineStageCreationFeedbacks !== null) {
    let array = this._pPipelineStageCreationFeedbacks;
    
    for (let ii = 0; ii < array.length; ++ii) {
      
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pPipelineStageCreationFeedbacksNative = nativeArray;
    this.memoryViewBigInt64[0x4] = nativeArray.address;
  }
  
  return true;
};

VkPipelineCreationFeedbackCreateInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
};

VkPipelineCreationFeedbackCreateInfoEXT.byteLength = 0x28;

VkPipelineCreationFeedbackCreateInfoEXT.memoryLayout = {
  sType: {
    byteOffset: 0x0,
    byteLength: 0x4
  },
  pNext: {
    byteOffset: 0x8,
    byteLength: 0x8
  },
  pPipelineCreationFeedback: {
    byteOffset: 0x10,
    byteLength: 0x8
  },
  pipelineStageCreationFeedbackCount: {
    byteOffset: 0x18,
    byteLength: 0x4
  },
  pPipelineStageCreationFeedbacks: {
    byteOffset: 0x20,
    byteLength: 0x8
  },
};
/** VkClearColorValue **/
class VkClearColorValue {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;
      this.memoryViewFloat32 = new Float32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x10) / 0x4);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x10) / 0x4);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x10) / 0x4);

    } else {
      this.memoryBuffer = new ArrayBuffer(0x10);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
      this.memoryViewFloat32 = new Float32Array(this.memoryBuffer);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    }
    this._float32 = null;
    this._int32 = null;
    this._uint32 = null;
    
    if (typeof opts === "object") {
      if (opts.float32 !== void 0) this.float32 = opts.float32;
      if (opts.int32 !== void 0) this.int32 = opts.int32;
      if (opts.uint32 !== void 0) this.uint32 = opts.uint32;
      
    }
  }
  get float32() {
    return this._float32;
  }
  set float32(value) {
    if (value !== null ) {
      this._float32 = value;
    } else if (value === null) {
      this._float32 = null;
    } 
    
  }
  get int32() {
    return this._int32;
  }
  set int32(value) {
    if (value !== null ) {
      this._int32 = value;
    } else if (value === null) {
      this._int32 = null;
    } 
    
  }
  get uint32() {
    return this._uint32;
  }
  set uint32(value) {
    if (value !== null ) {
      this._uint32 = value;
    } else if (value === null) {
      this._uint32 = null;
    } 
    
  }
  
};

VkClearColorValue.prototype.flush = function flush() {
  
  
  if (this._float32 !== null) {
    let array = this._float32;
    
    for (let ii = 0; ii < array.length; ++ii) {
      this.memoryViewFloat32[0x0 + ii] = array[ii];
    };
  } else {
    
  }
  
  
  if (this._int32 !== null) {
    let array = this._int32;
    
    for (let ii = 0; ii < array.length; ++ii) {
      this.memoryViewInt32[0x0 + ii] = array[ii];
    };
  } else {
    
  }
  
  
  if (this._uint32 !== null) {
    let array = this._uint32;
    
    for (let ii = 0; ii < array.length; ++ii) {
      this.memoryViewUint32[0x0 + ii] = array[ii];
    };
  } else {
    
  }
  
  return true;
};

VkClearColorValue.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
  
  
};

VkClearColorValue.byteLength = 0x10;

VkClearColorValue.memoryLayout = {
  float32: {
    byteOffset: 0x0,
    byteLength: 0x10
  },
  int32: {
    byteOffset: 0x0,
    byteLength: 0x10
  },
  uint32: {
    byteOffset: 0x0,
    byteLength: 0x10
  },
};
/** VkClearValue **/
class VkClearValue {
  constructor(opts) {
    this.memoryBuffer = null;
    this.memoryAddress = BI0;
    this.$memoryOffset = 0;
    if (typeof opts === "object" && opts.$memoryOffset !== void 0) {
      this.memoryBuffer = opts.$memoryBuffer;
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer) + BigInt(opts.$memoryOffset);
      this.$memoryOffset = opts.$memoryOffset | 0;

    } else {
      this.memoryBuffer = new ArrayBuffer(0x10);
      this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);

    }
    this._color = new VkClearColorValue({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x0 });
    this._depthStencil = new VkClearDepthStencilValue({ $memoryBuffer: this.memoryBuffer, $memoryOffset: this.$memoryOffset + 0x0 });
    
    if (typeof opts === "object") {
      if (opts.color !== void 0) this.color = opts.color;
      if (opts.depthStencil !== void 0) this.depthStencil = opts.depthStencil;
      
    }
  }
  get color() {
    return this._color;
  }
  set color(value) {
    if (value !== null ) {
      value.flush();
      this._color = value;
      
      
    } else if (value === null) {
      this._color = null;
      
    } 
    
  }
  get depthStencil() {
    return this._depthStencil;
  }
  set depthStencil(value) {
    if (value !== null ) {
      value.flush();
      this._depthStencil = value;
      
      
    } else if (value === null) {
      this._depthStencil = null;
      
    } 
    
  }
  
};

VkClearValue.prototype.flush = function flush() {
  
  
  if (this._color !== null) {
    this._color.flush();
    if (this.memoryBuffer !== this._color.memoryBuffer) {
      let srcView = new Uint8Array(this._color.memoryBuffer);
      let dstView = new Uint8Array(this.memoryBuffer);
      dstView.set(srcView, 0x0);
      
    }
  }
  
  
  if (this._depthStencil !== null) {
    this._depthStencil.flush();
    if (this.memoryBuffer !== this._depthStencil.memoryBuffer) {
      let srcView = new Uint8Array(this._depthStencil.memoryBuffer);
      let dstView = new Uint8Array(this.memoryBuffer);
      dstView.set(srcView, 0x0);
      
    }
  }
  
  return true;
};

VkClearValue.prototype.reflect = function reflect(memoryAddress) {
  
  
  
  
  
};

VkClearValue.byteLength = 0x10;

VkClearValue.memoryLayout = {
  color: {
    byteOffset: 0x0,
    byteLength: 0x10
  },
  depthStencil: {
    byteOffset: 0x0,
    byteLength: 0x8
  },
};

module.exports = {
  ...(nvk.$getVulkanEnumerations()),
  VK_MAKE_VERSION: nvk.VK_MAKE_VERSION,
  VK_VERSION_MAJOR: nvk.VK_VERSION_MAJOR,
  VK_VERSION_MINOR: nvk.VK_VERSION_MINOR,
  VK_VERSION_PATCH: nvk.VK_VERSION_PATCH,
  VK_API_VERSION_1_0: nvk.VK_API_VERSION_1_0,
  VK_API_VERSION_1_1: nvk.VK_API_VERSION_1_1,
  vkUseDevice: nvk.vkUseDevice,
  vkUseInstance: nvk.vkUseInstance,
  VulkanWindow: nvk.VulkanWindow,
  vkCreateInstance: nvk.vkCreateInstance,
  vkDestroyInstance: nvk.vkDestroyInstance,
  vkEnumeratePhysicalDevices: nvk.vkEnumeratePhysicalDevices,
  vkGetDeviceProcAddr: nvk.vkGetDeviceProcAddr,
  vkGetInstanceProcAddr: nvk.vkGetInstanceProcAddr,
  vkGetPhysicalDeviceProperties: nvk.vkGetPhysicalDeviceProperties,
  vkGetPhysicalDeviceQueueFamilyProperties: nvk.vkGetPhysicalDeviceQueueFamilyProperties,
  vkGetPhysicalDeviceMemoryProperties: nvk.vkGetPhysicalDeviceMemoryProperties,
  vkGetPhysicalDeviceFeatures: nvk.vkGetPhysicalDeviceFeatures,
  vkGetPhysicalDeviceFormatProperties: nvk.vkGetPhysicalDeviceFormatProperties,
  vkGetPhysicalDeviceImageFormatProperties: nvk.vkGetPhysicalDeviceImageFormatProperties,
  vkCreateDevice: nvk.vkCreateDevice,
  vkDestroyDevice: nvk.vkDestroyDevice,
  vkEnumerateInstanceVersion: nvk.vkEnumerateInstanceVersion,
  vkEnumerateInstanceLayerProperties: nvk.vkEnumerateInstanceLayerProperties,
  vkEnumerateInstanceExtensionProperties: nvk.vkEnumerateInstanceExtensionProperties,
  vkEnumerateDeviceLayerProperties: nvk.vkEnumerateDeviceLayerProperties,
  vkEnumerateDeviceExtensionProperties: nvk.vkEnumerateDeviceExtensionProperties,
  vkGetDeviceQueue: nvk.vkGetDeviceQueue,
  vkQueueSubmit: nvk.vkQueueSubmit,
  vkQueueWaitIdle: nvk.vkQueueWaitIdle,
  vkDeviceWaitIdle: nvk.vkDeviceWaitIdle,
  vkAllocateMemory: nvk.vkAllocateMemory,
  vkFreeMemory: nvk.vkFreeMemory,
  vkMapMemory: nvk.vkMapMemory,
  vkUnmapMemory: nvk.vkUnmapMemory,
  vkFlushMappedMemoryRanges: nvk.vkFlushMappedMemoryRanges,
  vkInvalidateMappedMemoryRanges: nvk.vkInvalidateMappedMemoryRanges,
  vkGetDeviceMemoryCommitment: nvk.vkGetDeviceMemoryCommitment,
  vkGetBufferMemoryRequirements: nvk.vkGetBufferMemoryRequirements,
  vkBindBufferMemory: nvk.vkBindBufferMemory,
  vkGetImageMemoryRequirements: nvk.vkGetImageMemoryRequirements,
  vkBindImageMemory: nvk.vkBindImageMemory,
  vkGetImageSparseMemoryRequirements: nvk.vkGetImageSparseMemoryRequirements,
  vkGetPhysicalDeviceSparseImageFormatProperties: nvk.vkGetPhysicalDeviceSparseImageFormatProperties,
  vkQueueBindSparse: nvk.vkQueueBindSparse,
  vkCreateFence: nvk.vkCreateFence,
  vkDestroyFence: nvk.vkDestroyFence,
  vkResetFences: nvk.vkResetFences,
  vkGetFenceStatus: nvk.vkGetFenceStatus,
  vkWaitForFences: nvk.vkWaitForFences,
  vkCreateSemaphore: nvk.vkCreateSemaphore,
  vkDestroySemaphore: nvk.vkDestroySemaphore,
  vkCreateEvent: nvk.vkCreateEvent,
  vkDestroyEvent: nvk.vkDestroyEvent,
  vkGetEventStatus: nvk.vkGetEventStatus,
  vkSetEvent: nvk.vkSetEvent,
  vkResetEvent: nvk.vkResetEvent,
  vkCreateQueryPool: nvk.vkCreateQueryPool,
  vkDestroyQueryPool: nvk.vkDestroyQueryPool,
  vkGetQueryPoolResults: nvk.vkGetQueryPoolResults,
  vkResetQueryPoolEXT: nvk.vkResetQueryPoolEXT,
  vkCreateBuffer: nvk.vkCreateBuffer,
  vkDestroyBuffer: nvk.vkDestroyBuffer,
  vkCreateBufferView: nvk.vkCreateBufferView,
  vkDestroyBufferView: nvk.vkDestroyBufferView,
  vkCreateImage: nvk.vkCreateImage,
  vkDestroyImage: nvk.vkDestroyImage,
  vkGetImageSubresourceLayout: nvk.vkGetImageSubresourceLayout,
  vkCreateImageView: nvk.vkCreateImageView,
  vkDestroyImageView: nvk.vkDestroyImageView,
  vkCreateShaderModule: nvk.vkCreateShaderModule,
  vkDestroyShaderModule: nvk.vkDestroyShaderModule,
  vkCreatePipelineCache: nvk.vkCreatePipelineCache,
  vkDestroyPipelineCache: nvk.vkDestroyPipelineCache,
  vkGetPipelineCacheData: nvk.vkGetPipelineCacheData,
  vkMergePipelineCaches: nvk.vkMergePipelineCaches,
  vkCreateGraphicsPipelines: nvk.vkCreateGraphicsPipelines,
  vkCreateComputePipelines: nvk.vkCreateComputePipelines,
  vkDestroyPipeline: nvk.vkDestroyPipeline,
  vkCreatePipelineLayout: nvk.vkCreatePipelineLayout,
  vkDestroyPipelineLayout: nvk.vkDestroyPipelineLayout,
  vkCreateSampler: nvk.vkCreateSampler,
  vkDestroySampler: nvk.vkDestroySampler,
  vkCreateDescriptorSetLayout: nvk.vkCreateDescriptorSetLayout,
  vkDestroyDescriptorSetLayout: nvk.vkDestroyDescriptorSetLayout,
  vkCreateDescriptorPool: nvk.vkCreateDescriptorPool,
  vkDestroyDescriptorPool: nvk.vkDestroyDescriptorPool,
  vkResetDescriptorPool: nvk.vkResetDescriptorPool,
  vkAllocateDescriptorSets: nvk.vkAllocateDescriptorSets,
  vkFreeDescriptorSets: nvk.vkFreeDescriptorSets,
  vkUpdateDescriptorSets: nvk.vkUpdateDescriptorSets,
  vkCreateFramebuffer: nvk.vkCreateFramebuffer,
  vkDestroyFramebuffer: nvk.vkDestroyFramebuffer,
  vkCreateRenderPass: nvk.vkCreateRenderPass,
  vkDestroyRenderPass: nvk.vkDestroyRenderPass,
  vkGetRenderAreaGranularity: nvk.vkGetRenderAreaGranularity,
  vkCreateCommandPool: nvk.vkCreateCommandPool,
  vkDestroyCommandPool: nvk.vkDestroyCommandPool,
  vkResetCommandPool: nvk.vkResetCommandPool,
  vkAllocateCommandBuffers: nvk.vkAllocateCommandBuffers,
  vkFreeCommandBuffers: nvk.vkFreeCommandBuffers,
  vkBeginCommandBuffer: nvk.vkBeginCommandBuffer,
  vkEndCommandBuffer: nvk.vkEndCommandBuffer,
  vkResetCommandBuffer: nvk.vkResetCommandBuffer,
  vkCmdBindPipeline: nvk.vkCmdBindPipeline,
  vkCmdSetViewport: nvk.vkCmdSetViewport,
  vkCmdSetScissor: nvk.vkCmdSetScissor,
  vkCmdSetLineWidth: nvk.vkCmdSetLineWidth,
  vkCmdSetDepthBias: nvk.vkCmdSetDepthBias,
  vkCmdSetBlendConstants: nvk.vkCmdSetBlendConstants,
  vkCmdSetDepthBounds: nvk.vkCmdSetDepthBounds,
  vkCmdSetStencilCompareMask: nvk.vkCmdSetStencilCompareMask,
  vkCmdSetStencilWriteMask: nvk.vkCmdSetStencilWriteMask,
  vkCmdSetStencilReference: nvk.vkCmdSetStencilReference,
  vkCmdBindDescriptorSets: nvk.vkCmdBindDescriptorSets,
  vkCmdBindIndexBuffer: nvk.vkCmdBindIndexBuffer,
  vkCmdBindVertexBuffers: nvk.vkCmdBindVertexBuffers,
  vkCmdDraw: nvk.vkCmdDraw,
  vkCmdDrawIndexed: nvk.vkCmdDrawIndexed,
  vkCmdDrawIndirect: nvk.vkCmdDrawIndirect,
  vkCmdDrawIndexedIndirect: nvk.vkCmdDrawIndexedIndirect,
  vkCmdDispatch: nvk.vkCmdDispatch,
  vkCmdDispatchIndirect: nvk.vkCmdDispatchIndirect,
  vkCmdCopyBuffer: nvk.vkCmdCopyBuffer,
  vkCmdCopyImage: nvk.vkCmdCopyImage,
  vkCmdBlitImage: nvk.vkCmdBlitImage,
  vkCmdCopyBufferToImage: nvk.vkCmdCopyBufferToImage,
  vkCmdCopyImageToBuffer: nvk.vkCmdCopyImageToBuffer,
  vkCmdUpdateBuffer: nvk.vkCmdUpdateBuffer,
  vkCmdFillBuffer: nvk.vkCmdFillBuffer,
  vkCmdClearColorImage: nvk.vkCmdClearColorImage,
  vkCmdClearDepthStencilImage: nvk.vkCmdClearDepthStencilImage,
  vkCmdClearAttachments: nvk.vkCmdClearAttachments,
  vkCmdResolveImage: nvk.vkCmdResolveImage,
  vkCmdSetEvent: nvk.vkCmdSetEvent,
  vkCmdResetEvent: nvk.vkCmdResetEvent,
  vkCmdWaitEvents: nvk.vkCmdWaitEvents,
  vkCmdPipelineBarrier: nvk.vkCmdPipelineBarrier,
  vkCmdBeginQuery: nvk.vkCmdBeginQuery,
  vkCmdEndQuery: nvk.vkCmdEndQuery,
  vkCmdBeginConditionalRenderingEXT: nvk.vkCmdBeginConditionalRenderingEXT,
  vkCmdEndConditionalRenderingEXT: nvk.vkCmdEndConditionalRenderingEXT,
  vkCmdResetQueryPool: nvk.vkCmdResetQueryPool,
  vkCmdWriteTimestamp: nvk.vkCmdWriteTimestamp,
  vkCmdCopyQueryPoolResults: nvk.vkCmdCopyQueryPoolResults,
  vkCmdPushConstants: nvk.vkCmdPushConstants,
  vkCmdBeginRenderPass: nvk.vkCmdBeginRenderPass,
  vkCmdNextSubpass: nvk.vkCmdNextSubpass,
  vkCmdEndRenderPass: nvk.vkCmdEndRenderPass,
  vkCmdExecuteCommands: nvk.vkCmdExecuteCommands,
  vkGetPhysicalDeviceDisplayPropertiesKHR: nvk.vkGetPhysicalDeviceDisplayPropertiesKHR,
  vkGetPhysicalDeviceDisplayPlanePropertiesKHR: nvk.vkGetPhysicalDeviceDisplayPlanePropertiesKHR,
  vkGetDisplayPlaneSupportedDisplaysKHR: nvk.vkGetDisplayPlaneSupportedDisplaysKHR,
  vkGetDisplayModePropertiesKHR: nvk.vkGetDisplayModePropertiesKHR,
  vkCreateDisplayModeKHR: nvk.vkCreateDisplayModeKHR,
  vkGetDisplayPlaneCapabilitiesKHR: nvk.vkGetDisplayPlaneCapabilitiesKHR,
  vkCreateDisplayPlaneSurfaceKHR: nvk.vkCreateDisplayPlaneSurfaceKHR,
  vkCreateSharedSwapchainsKHR: nvk.vkCreateSharedSwapchainsKHR,
  vkDestroySurfaceKHR: nvk.vkDestroySurfaceKHR,
  vkGetPhysicalDeviceSurfaceSupportKHR: nvk.vkGetPhysicalDeviceSurfaceSupportKHR,
  vkGetPhysicalDeviceSurfaceCapabilitiesKHR: nvk.vkGetPhysicalDeviceSurfaceCapabilitiesKHR,
  vkGetPhysicalDeviceSurfaceFormatsKHR: nvk.vkGetPhysicalDeviceSurfaceFormatsKHR,
  vkGetPhysicalDeviceSurfacePresentModesKHR: nvk.vkGetPhysicalDeviceSurfacePresentModesKHR,
  vkCreateSwapchainKHR: nvk.vkCreateSwapchainKHR,
  vkDestroySwapchainKHR: nvk.vkDestroySwapchainKHR,
  vkGetSwapchainImagesKHR: nvk.vkGetSwapchainImagesKHR,
  vkAcquireNextImageKHR: nvk.vkAcquireNextImageKHR,
  vkQueuePresentKHR: nvk.vkQueuePresentKHR,
  vkCreateDebugReportCallbackEXT: nvk.vkCreateDebugReportCallbackEXT,
  vkDestroyDebugReportCallbackEXT: nvk.vkDestroyDebugReportCallbackEXT,
  vkDebugReportMessageEXT: nvk.vkDebugReportMessageEXT,
  vkDebugMarkerSetObjectNameEXT: nvk.vkDebugMarkerSetObjectNameEXT,
  vkDebugMarkerSetObjectTagEXT: nvk.vkDebugMarkerSetObjectTagEXT,
  vkCmdDebugMarkerBeginEXT: nvk.vkCmdDebugMarkerBeginEXT,
  vkCmdDebugMarkerEndEXT: nvk.vkCmdDebugMarkerEndEXT,
  vkCmdDebugMarkerInsertEXT: nvk.vkCmdDebugMarkerInsertEXT,
  vkGetPhysicalDeviceExternalImageFormatPropertiesNV: nvk.vkGetPhysicalDeviceExternalImageFormatPropertiesNV,
  vkCmdDrawIndirectCountAMD: nvk.vkCmdDrawIndirectCountAMD,
  vkCmdDrawIndexedIndirectCountAMD: nvk.vkCmdDrawIndexedIndirectCountAMD,
  vkCmdProcessCommandsNVX: nvk.vkCmdProcessCommandsNVX,
  vkCmdReserveSpaceForCommandsNVX: nvk.vkCmdReserveSpaceForCommandsNVX,
  vkCreateIndirectCommandsLayoutNVX: nvk.vkCreateIndirectCommandsLayoutNVX,
  vkDestroyIndirectCommandsLayoutNVX: nvk.vkDestroyIndirectCommandsLayoutNVX,
  vkCreateObjectTableNVX: nvk.vkCreateObjectTableNVX,
  vkDestroyObjectTableNVX: nvk.vkDestroyObjectTableNVX,
  vkRegisterObjectsNVX: nvk.vkRegisterObjectsNVX,
  vkUnregisterObjectsNVX: nvk.vkUnregisterObjectsNVX,
  vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX: nvk.vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX,
  vkGetPhysicalDeviceFeatures2: nvk.vkGetPhysicalDeviceFeatures2,
  vkGetPhysicalDeviceProperties2: nvk.vkGetPhysicalDeviceProperties2,
  vkGetPhysicalDeviceFormatProperties2: nvk.vkGetPhysicalDeviceFormatProperties2,
  vkGetPhysicalDeviceImageFormatProperties2: nvk.vkGetPhysicalDeviceImageFormatProperties2,
  vkGetPhysicalDeviceQueueFamilyProperties2: nvk.vkGetPhysicalDeviceQueueFamilyProperties2,
  vkGetPhysicalDeviceMemoryProperties2: nvk.vkGetPhysicalDeviceMemoryProperties2,
  vkGetPhysicalDeviceSparseImageFormatProperties2: nvk.vkGetPhysicalDeviceSparseImageFormatProperties2,
  vkCmdPushDescriptorSetKHR: nvk.vkCmdPushDescriptorSetKHR,
  vkTrimCommandPool: nvk.vkTrimCommandPool,
  vkGetPhysicalDeviceExternalBufferProperties: nvk.vkGetPhysicalDeviceExternalBufferProperties,
  vkGetMemoryFdKHR: nvk.vkGetMemoryFdKHR,
  vkGetMemoryFdPropertiesKHR: nvk.vkGetMemoryFdPropertiesKHR,
  vkGetPhysicalDeviceExternalSemaphoreProperties: nvk.vkGetPhysicalDeviceExternalSemaphoreProperties,
  vkGetSemaphoreFdKHR: nvk.vkGetSemaphoreFdKHR,
  vkImportSemaphoreFdKHR: nvk.vkImportSemaphoreFdKHR,
  vkGetPhysicalDeviceExternalFenceProperties: nvk.vkGetPhysicalDeviceExternalFenceProperties,
  vkGetFenceFdKHR: nvk.vkGetFenceFdKHR,
  vkImportFenceFdKHR: nvk.vkImportFenceFdKHR,
  vkReleaseDisplayEXT: nvk.vkReleaseDisplayEXT,
  vkDisplayPowerControlEXT: nvk.vkDisplayPowerControlEXT,
  vkRegisterDeviceEventEXT: nvk.vkRegisterDeviceEventEXT,
  vkRegisterDisplayEventEXT: nvk.vkRegisterDisplayEventEXT,
  vkGetSwapchainCounterEXT: nvk.vkGetSwapchainCounterEXT,
  vkGetPhysicalDeviceSurfaceCapabilities2EXT: nvk.vkGetPhysicalDeviceSurfaceCapabilities2EXT,
  vkEnumeratePhysicalDeviceGroups: nvk.vkEnumeratePhysicalDeviceGroups,
  vkGetDeviceGroupPeerMemoryFeatures: nvk.vkGetDeviceGroupPeerMemoryFeatures,
  vkBindBufferMemory2: nvk.vkBindBufferMemory2,
  vkBindImageMemory2: nvk.vkBindImageMemory2,
  vkCmdSetDeviceMask: nvk.vkCmdSetDeviceMask,
  vkGetDeviceGroupPresentCapabilitiesKHR: nvk.vkGetDeviceGroupPresentCapabilitiesKHR,
  vkGetDeviceGroupSurfacePresentModesKHR: nvk.vkGetDeviceGroupSurfacePresentModesKHR,
  vkAcquireNextImage2KHR: nvk.vkAcquireNextImage2KHR,
  vkCmdDispatchBase: nvk.vkCmdDispatchBase,
  vkGetPhysicalDevicePresentRectanglesKHR: nvk.vkGetPhysicalDevicePresentRectanglesKHR,
  vkCreateDescriptorUpdateTemplate: nvk.vkCreateDescriptorUpdateTemplate,
  vkDestroyDescriptorUpdateTemplate: nvk.vkDestroyDescriptorUpdateTemplate,
  vkUpdateDescriptorSetWithTemplate: nvk.vkUpdateDescriptorSetWithTemplate,
  vkCmdPushDescriptorSetWithTemplateKHR: nvk.vkCmdPushDescriptorSetWithTemplateKHR,
  vkSetHdrMetadataEXT: nvk.vkSetHdrMetadataEXT,
  vkGetSwapchainStatusKHR: nvk.vkGetSwapchainStatusKHR,
  vkGetRefreshCycleDurationGOOGLE: nvk.vkGetRefreshCycleDurationGOOGLE,
  vkGetPastPresentationTimingGOOGLE: nvk.vkGetPastPresentationTimingGOOGLE,
  vkCreateMacOSSurfaceMVK: nvk.vkCreateMacOSSurfaceMVK,
  vkCmdSetViewportWScalingNV: nvk.vkCmdSetViewportWScalingNV,
  vkCmdSetDiscardRectangleEXT: nvk.vkCmdSetDiscardRectangleEXT,
  vkCmdSetSampleLocationsEXT: nvk.vkCmdSetSampleLocationsEXT,
  vkGetPhysicalDeviceMultisamplePropertiesEXT: nvk.vkGetPhysicalDeviceMultisamplePropertiesEXT,
  vkGetPhysicalDeviceSurfaceCapabilities2KHR: nvk.vkGetPhysicalDeviceSurfaceCapabilities2KHR,
  vkGetPhysicalDeviceSurfaceFormats2KHR: nvk.vkGetPhysicalDeviceSurfaceFormats2KHR,
  vkGetPhysicalDeviceDisplayProperties2KHR: nvk.vkGetPhysicalDeviceDisplayProperties2KHR,
  vkGetPhysicalDeviceDisplayPlaneProperties2KHR: nvk.vkGetPhysicalDeviceDisplayPlaneProperties2KHR,
  vkGetDisplayModeProperties2KHR: nvk.vkGetDisplayModeProperties2KHR,
  vkGetDisplayPlaneCapabilities2KHR: nvk.vkGetDisplayPlaneCapabilities2KHR,
  vkGetBufferMemoryRequirements2: nvk.vkGetBufferMemoryRequirements2,
  vkGetImageMemoryRequirements2: nvk.vkGetImageMemoryRequirements2,
  vkGetImageSparseMemoryRequirements2: nvk.vkGetImageSparseMemoryRequirements2,
  vkCreateSamplerYcbcrConversion: nvk.vkCreateSamplerYcbcrConversion,
  vkDestroySamplerYcbcrConversion: nvk.vkDestroySamplerYcbcrConversion,
  vkGetDeviceQueue2: nvk.vkGetDeviceQueue2,
  vkCreateValidationCacheEXT: nvk.vkCreateValidationCacheEXT,
  vkDestroyValidationCacheEXT: nvk.vkDestroyValidationCacheEXT,
  vkGetValidationCacheDataEXT: nvk.vkGetValidationCacheDataEXT,
  vkMergeValidationCachesEXT: nvk.vkMergeValidationCachesEXT,
  vkGetDescriptorSetLayoutSupport: nvk.vkGetDescriptorSetLayoutSupport,
  vkGetShaderInfoAMD: nvk.vkGetShaderInfoAMD,
  vkSetLocalDimmingAMD: nvk.vkSetLocalDimmingAMD,
  vkGetPhysicalDeviceCalibrateableTimeDomainsEXT: nvk.vkGetPhysicalDeviceCalibrateableTimeDomainsEXT,
  vkGetCalibratedTimestampsEXT: nvk.vkGetCalibratedTimestampsEXT,
  vkSetDebugUtilsObjectNameEXT: nvk.vkSetDebugUtilsObjectNameEXT,
  vkSetDebugUtilsObjectTagEXT: nvk.vkSetDebugUtilsObjectTagEXT,
  vkQueueBeginDebugUtilsLabelEXT: nvk.vkQueueBeginDebugUtilsLabelEXT,
  vkQueueEndDebugUtilsLabelEXT: nvk.vkQueueEndDebugUtilsLabelEXT,
  vkQueueInsertDebugUtilsLabelEXT: nvk.vkQueueInsertDebugUtilsLabelEXT,
  vkCmdBeginDebugUtilsLabelEXT: nvk.vkCmdBeginDebugUtilsLabelEXT,
  vkCmdEndDebugUtilsLabelEXT: nvk.vkCmdEndDebugUtilsLabelEXT,
  vkCmdInsertDebugUtilsLabelEXT: nvk.vkCmdInsertDebugUtilsLabelEXT,
  vkCreateDebugUtilsMessengerEXT: nvk.vkCreateDebugUtilsMessengerEXT,
  vkDestroyDebugUtilsMessengerEXT: nvk.vkDestroyDebugUtilsMessengerEXT,
  vkSubmitDebugUtilsMessageEXT: nvk.vkSubmitDebugUtilsMessageEXT,
  vkGetMemoryHostPointerPropertiesEXT: nvk.vkGetMemoryHostPointerPropertiesEXT,
  vkCmdWriteBufferMarkerAMD: nvk.vkCmdWriteBufferMarkerAMD,
  vkCreateRenderPass2KHR: nvk.vkCreateRenderPass2KHR,
  vkCmdBeginRenderPass2KHR: nvk.vkCmdBeginRenderPass2KHR,
  vkCmdNextSubpass2KHR: nvk.vkCmdNextSubpass2KHR,
  vkCmdEndRenderPass2KHR: nvk.vkCmdEndRenderPass2KHR,
  vkCmdDrawIndirectCountKHR: nvk.vkCmdDrawIndirectCountKHR,
  vkCmdDrawIndexedIndirectCountKHR: nvk.vkCmdDrawIndexedIndirectCountKHR,
  vkCmdSetCheckpointNV: nvk.vkCmdSetCheckpointNV,
  vkGetQueueCheckpointDataNV: nvk.vkGetQueueCheckpointDataNV,
  vkCmdBindTransformFeedbackBuffersEXT: nvk.vkCmdBindTransformFeedbackBuffersEXT,
  vkCmdBeginTransformFeedbackEXT: nvk.vkCmdBeginTransformFeedbackEXT,
  vkCmdEndTransformFeedbackEXT: nvk.vkCmdEndTransformFeedbackEXT,
  vkCmdBeginQueryIndexedEXT: nvk.vkCmdBeginQueryIndexedEXT,
  vkCmdEndQueryIndexedEXT: nvk.vkCmdEndQueryIndexedEXT,
  vkCmdDrawIndirectByteCountEXT: nvk.vkCmdDrawIndirectByteCountEXT,
  vkCmdSetExclusiveScissorNV: nvk.vkCmdSetExclusiveScissorNV,
  vkCmdBindShadingRateImageNV: nvk.vkCmdBindShadingRateImageNV,
  vkCmdSetViewportShadingRatePaletteNV: nvk.vkCmdSetViewportShadingRatePaletteNV,
  vkCmdSetCoarseSampleOrderNV: nvk.vkCmdSetCoarseSampleOrderNV,
  vkCmdDrawMeshTasksNV: nvk.vkCmdDrawMeshTasksNV,
  vkCmdDrawMeshTasksIndirectNV: nvk.vkCmdDrawMeshTasksIndirectNV,
  vkCmdDrawMeshTasksIndirectCountNV: nvk.vkCmdDrawMeshTasksIndirectCountNV,
  vkCompileDeferredNV: nvk.vkCompileDeferredNV,
  vkCreateAccelerationStructureNV: nvk.vkCreateAccelerationStructureNV,
  vkDestroyAccelerationStructureNV: nvk.vkDestroyAccelerationStructureNV,
  vkGetAccelerationStructureMemoryRequirementsNV: nvk.vkGetAccelerationStructureMemoryRequirementsNV,
  vkBindAccelerationStructureMemoryNV: nvk.vkBindAccelerationStructureMemoryNV,
  vkCmdCopyAccelerationStructureNV: nvk.vkCmdCopyAccelerationStructureNV,
  vkCmdWriteAccelerationStructuresPropertiesNV: nvk.vkCmdWriteAccelerationStructuresPropertiesNV,
  vkCmdBuildAccelerationStructureNV: nvk.vkCmdBuildAccelerationStructureNV,
  vkCmdTraceRaysNV: nvk.vkCmdTraceRaysNV,
  vkGetRayTracingShaderGroupHandlesNV: nvk.vkGetRayTracingShaderGroupHandlesNV,
  vkGetAccelerationStructureHandleNV: nvk.vkGetAccelerationStructureHandleNV,
  vkCreateRayTracingPipelinesNV: nvk.vkCreateRayTracingPipelinesNV,
  vkGetImageDrmFormatModifierPropertiesEXT: nvk.vkGetImageDrmFormatModifierPropertiesEXT,
  vkGetBufferDeviceAddressEXT: nvk.vkGetBufferDeviceAddressEXT,
  vkGetPhysicalDeviceCooperativeMatrixPropertiesNV: nvk.vkGetPhysicalDeviceCooperativeMatrixPropertiesNV,
  vkGetImageViewHandleNVX: nvk.vkGetImageViewHandleNVX,
  VkInstance,
  VkPhysicalDevice,
  VkDevice,
  VkQueue,
  VkCommandBuffer,
  VkDeviceMemory,
  VkCommandPool,
  VkBuffer,
  VkBufferView,
  VkImage,
  VkImageView,
  VkShaderModule,
  VkPipeline,
  VkPipelineLayout,
  VkSampler,
  VkDescriptorSet,
  VkDescriptorSetLayout,
  VkDescriptorPool,
  VkFence,
  VkSemaphore,
  VkEvent,
  VkQueryPool,
  VkFramebuffer,
  VkRenderPass,
  VkPipelineCache,
  VkObjectTableNVX,
  VkIndirectCommandsLayoutNVX,
  VkDescriptorUpdateTemplate,
  VkSamplerYcbcrConversion,
  VkValidationCacheEXT,
  VkAccelerationStructureNV,
  VkDisplayKHR,
  VkDisplayModeKHR,
  VkSurfaceKHR,
  VkSwapchainKHR,
  VkDebugReportCallbackEXT,
  VkDebugUtilsMessengerEXT,
  VkBaseOutStructure,
  VkBaseInStructure,
  VkOffset2D,
  VkOffset3D,
  VkExtent2D,
  VkExtent3D,
  VkViewport,
  VkRect2D,
  VkClearRect,
  VkComponentMapping,
  VkPhysicalDeviceProperties,
  VkExtensionProperties,
  VkLayerProperties,
  VkApplicationInfo,
  VkAllocationCallbacks,
  VkDeviceQueueCreateInfo,
  VkDeviceCreateInfo,
  VkInstanceCreateInfo,
  VkQueueFamilyProperties,
  VkPhysicalDeviceMemoryProperties,
  VkMemoryAllocateInfo,
  VkMemoryRequirements,
  VkSparseImageFormatProperties,
  VkSparseImageMemoryRequirements,
  VkMemoryType,
  VkMemoryHeap,
  VkMappedMemoryRange,
  VkFormatProperties,
  VkImageFormatProperties,
  VkDescriptorBufferInfo,
  VkDescriptorImageInfo,
  VkWriteDescriptorSet,
  VkCopyDescriptorSet,
  VkBufferCreateInfo,
  VkBufferViewCreateInfo,
  VkImageSubresource,
  VkImageSubresourceLayers,
  VkImageSubresourceRange,
  VkMemoryBarrier,
  VkBufferMemoryBarrier,
  VkImageMemoryBarrier,
  VkImageCreateInfo,
  VkSubresourceLayout,
  VkImageViewCreateInfo,
  VkBufferCopy,
  VkSparseMemoryBind,
  VkSparseImageMemoryBind,
  VkSparseBufferMemoryBindInfo,
  VkSparseImageOpaqueMemoryBindInfo,
  VkSparseImageMemoryBindInfo,
  VkBindSparseInfo,
  VkImageCopy,
  VkImageBlit,
  VkBufferImageCopy,
  VkImageResolve,
  VkShaderModuleCreateInfo,
  VkDescriptorSetLayoutBinding,
  VkDescriptorSetLayoutCreateInfo,
  VkDescriptorPoolSize,
  VkDescriptorPoolCreateInfo,
  VkDescriptorSetAllocateInfo,
  VkSpecializationMapEntry,
  VkSpecializationInfo,
  VkPipelineShaderStageCreateInfo,
  VkComputePipelineCreateInfo,
  VkVertexInputBindingDescription,
  VkVertexInputAttributeDescription,
  VkPipelineVertexInputStateCreateInfo,
  VkPipelineInputAssemblyStateCreateInfo,
  VkPipelineTessellationStateCreateInfo,
  VkPipelineViewportStateCreateInfo,
  VkPipelineRasterizationStateCreateInfo,
  VkPipelineMultisampleStateCreateInfo,
  VkPipelineColorBlendAttachmentState,
  VkPipelineColorBlendStateCreateInfo,
  VkPipelineDynamicStateCreateInfo,
  VkStencilOpState,
  VkPipelineDepthStencilStateCreateInfo,
  VkGraphicsPipelineCreateInfo,
  VkPipelineCacheCreateInfo,
  VkPushConstantRange,
  VkPipelineLayoutCreateInfo,
  VkSamplerCreateInfo,
  VkCommandPoolCreateInfo,
  VkCommandBufferAllocateInfo,
  VkCommandBufferInheritanceInfo,
  VkCommandBufferBeginInfo,
  VkRenderPassBeginInfo,
  VkClearDepthStencilValue,
  VkClearAttachment,
  VkAttachmentDescription,
  VkAttachmentReference,
  VkSubpassDescription,
  VkSubpassDependency,
  VkRenderPassCreateInfo,
  VkEventCreateInfo,
  VkFenceCreateInfo,
  VkPhysicalDeviceFeatures,
  VkPhysicalDeviceSparseProperties,
  VkPhysicalDeviceLimits,
  VkSemaphoreCreateInfo,
  VkQueryPoolCreateInfo,
  VkFramebufferCreateInfo,
  VkDrawIndirectCommand,
  VkDrawIndexedIndirectCommand,
  VkDispatchIndirectCommand,
  VkSubmitInfo,
  VkDisplayPropertiesKHR,
  VkDisplayPlanePropertiesKHR,
  VkDisplayModeParametersKHR,
  VkDisplayModePropertiesKHR,
  VkDisplayModeCreateInfoKHR,
  VkDisplayPlaneCapabilitiesKHR,
  VkDisplaySurfaceCreateInfoKHR,
  VkDisplayPresentInfoKHR,
  VkSurfaceCapabilitiesKHR,
  VkSurfaceFormatKHR,
  VkSwapchainCreateInfoKHR,
  VkPresentInfoKHR,
  VkDebugReportCallbackCreateInfoEXT,
  VkValidationFlagsEXT,
  VkValidationFeaturesEXT,
  VkPipelineRasterizationStateRasterizationOrderAMD,
  VkDebugMarkerObjectNameInfoEXT,
  VkDebugMarkerObjectTagInfoEXT,
  VkDebugMarkerMarkerInfoEXT,
  VkDedicatedAllocationImageCreateInfoNV,
  VkDedicatedAllocationBufferCreateInfoNV,
  VkDedicatedAllocationMemoryAllocateInfoNV,
  VkExternalImageFormatPropertiesNV,
  VkExternalMemoryImageCreateInfoNV,
  VkExportMemoryAllocateInfoNV,
  VkDeviceGeneratedCommandsFeaturesNVX,
  VkDeviceGeneratedCommandsLimitsNVX,
  VkIndirectCommandsTokenNVX,
  VkIndirectCommandsLayoutTokenNVX,
  VkIndirectCommandsLayoutCreateInfoNVX,
  VkCmdProcessCommandsInfoNVX,
  VkCmdReserveSpaceForCommandsInfoNVX,
  VkObjectTableCreateInfoNVX,
  VkObjectTableEntryNVX,
  VkObjectTablePipelineEntryNVX,
  VkObjectTableDescriptorSetEntryNVX,
  VkObjectTableVertexBufferEntryNVX,
  VkObjectTableIndexBufferEntryNVX,
  VkObjectTablePushConstantEntryNVX,
  VkPhysicalDeviceFeatures2,
  VkPhysicalDeviceFeatures2KHR,
  VkPhysicalDeviceProperties2,
  VkPhysicalDeviceProperties2KHR,
  VkFormatProperties2,
  VkFormatProperties2KHR,
  VkImageFormatProperties2,
  VkImageFormatProperties2KHR,
  VkPhysicalDeviceImageFormatInfo2,
  VkPhysicalDeviceImageFormatInfo2KHR,
  VkQueueFamilyProperties2,
  VkQueueFamilyProperties2KHR,
  VkPhysicalDeviceMemoryProperties2,
  VkPhysicalDeviceMemoryProperties2KHR,
  VkSparseImageFormatProperties2,
  VkSparseImageFormatProperties2KHR,
  VkPhysicalDeviceSparseImageFormatInfo2,
  VkPhysicalDeviceSparseImageFormatInfo2KHR,
  VkPhysicalDevicePushDescriptorPropertiesKHR,
  VkConformanceVersionKHR,
  VkPhysicalDeviceDriverPropertiesKHR,
  VkPresentRegionsKHR,
  VkPresentRegionKHR,
  VkRectLayerKHR,
  VkPhysicalDeviceVariablePointersFeatures,
  VkPhysicalDeviceVariablePointersFeaturesKHR,
  VkPhysicalDeviceVariablePointerFeaturesKHR,
  VkPhysicalDeviceVariablePointerFeatures,
  VkExternalMemoryProperties,
  VkExternalMemoryPropertiesKHR,
  VkPhysicalDeviceExternalImageFormatInfo,
  VkPhysicalDeviceExternalImageFormatInfoKHR,
  VkExternalImageFormatProperties,
  VkExternalImageFormatPropertiesKHR,
  VkPhysicalDeviceExternalBufferInfo,
  VkPhysicalDeviceExternalBufferInfoKHR,
  VkExternalBufferProperties,
  VkExternalBufferPropertiesKHR,
  VkPhysicalDeviceIDProperties,
  VkPhysicalDeviceIDPropertiesKHR,
  VkExternalMemoryImageCreateInfo,
  VkExternalMemoryImageCreateInfoKHR,
  VkExternalMemoryBufferCreateInfo,
  VkExternalMemoryBufferCreateInfoKHR,
  VkExportMemoryAllocateInfo,
  VkExportMemoryAllocateInfoKHR,
  VkImportMemoryFdInfoKHR,
  VkMemoryFdPropertiesKHR,
  VkMemoryGetFdInfoKHR,
  VkPhysicalDeviceExternalSemaphoreInfo,
  VkPhysicalDeviceExternalSemaphoreInfoKHR,
  VkExternalSemaphoreProperties,
  VkExternalSemaphorePropertiesKHR,
  VkExportSemaphoreCreateInfo,
  VkExportSemaphoreCreateInfoKHR,
  VkImportSemaphoreFdInfoKHR,
  VkSemaphoreGetFdInfoKHR,
  VkPhysicalDeviceExternalFenceInfo,
  VkPhysicalDeviceExternalFenceInfoKHR,
  VkExternalFenceProperties,
  VkExternalFencePropertiesKHR,
  VkExportFenceCreateInfo,
  VkExportFenceCreateInfoKHR,
  VkImportFenceFdInfoKHR,
  VkFenceGetFdInfoKHR,
  VkPhysicalDeviceMultiviewFeatures,
  VkPhysicalDeviceMultiviewFeaturesKHR,
  VkPhysicalDeviceMultiviewProperties,
  VkPhysicalDeviceMultiviewPropertiesKHR,
  VkRenderPassMultiviewCreateInfo,
  VkRenderPassMultiviewCreateInfoKHR,
  VkSurfaceCapabilities2EXT,
  VkDisplayPowerInfoEXT,
  VkDeviceEventInfoEXT,
  VkDisplayEventInfoEXT,
  VkSwapchainCounterCreateInfoEXT,
  VkPhysicalDeviceGroupProperties,
  VkPhysicalDeviceGroupPropertiesKHR,
  VkMemoryAllocateFlagsInfo,
  VkMemoryAllocateFlagsInfoKHR,
  VkBindBufferMemoryInfo,
  VkBindBufferMemoryInfoKHR,
  VkBindBufferMemoryDeviceGroupInfo,
  VkBindBufferMemoryDeviceGroupInfoKHR,
  VkBindImageMemoryInfo,
  VkBindImageMemoryInfoKHR,
  VkBindImageMemoryDeviceGroupInfo,
  VkBindImageMemoryDeviceGroupInfoKHR,
  VkDeviceGroupRenderPassBeginInfo,
  VkDeviceGroupRenderPassBeginInfoKHR,
  VkDeviceGroupCommandBufferBeginInfo,
  VkDeviceGroupCommandBufferBeginInfoKHR,
  VkDeviceGroupSubmitInfo,
  VkDeviceGroupSubmitInfoKHR,
  VkDeviceGroupBindSparseInfo,
  VkDeviceGroupBindSparseInfoKHR,
  VkDeviceGroupPresentCapabilitiesKHR,
  VkImageSwapchainCreateInfoKHR,
  VkBindImageMemorySwapchainInfoKHR,
  VkAcquireNextImageInfoKHR,
  VkDeviceGroupPresentInfoKHR,
  VkDeviceGroupDeviceCreateInfo,
  VkDeviceGroupDeviceCreateInfoKHR,
  VkDeviceGroupSwapchainCreateInfoKHR,
  VkDescriptorUpdateTemplateEntry,
  VkDescriptorUpdateTemplateEntryKHR,
  VkDescriptorUpdateTemplateCreateInfo,
  VkDescriptorUpdateTemplateCreateInfoKHR,
  VkXYColorEXT,
  VkHdrMetadataEXT,
  VkDisplayNativeHdrSurfaceCapabilitiesAMD,
  VkSwapchainDisplayNativeHdrCreateInfoAMD,
  VkRefreshCycleDurationGOOGLE,
  VkPastPresentationTimingGOOGLE,
  VkPresentTimesInfoGOOGLE,
  VkPresentTimeGOOGLE,
  VkMacOSSurfaceCreateInfoMVK,
  VkViewportWScalingNV,
  VkPipelineViewportWScalingStateCreateInfoNV,
  VkViewportSwizzleNV,
  VkPipelineViewportSwizzleStateCreateInfoNV,
  VkPhysicalDeviceDiscardRectanglePropertiesEXT,
  VkPipelineDiscardRectangleStateCreateInfoEXT,
  VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX,
  VkInputAttachmentAspectReference,
  VkInputAttachmentAspectReferenceKHR,
  VkRenderPassInputAttachmentAspectCreateInfo,
  VkRenderPassInputAttachmentAspectCreateInfoKHR,
  VkPhysicalDeviceSurfaceInfo2KHR,
  VkSurfaceCapabilities2KHR,
  VkSurfaceFormat2KHR,
  VkDisplayProperties2KHR,
  VkDisplayPlaneProperties2KHR,
  VkDisplayModeProperties2KHR,
  VkDisplayPlaneInfo2KHR,
  VkDisplayPlaneCapabilities2KHR,
  VkSharedPresentSurfaceCapabilitiesKHR,
  VkPhysicalDevice16BitStorageFeatures,
  VkPhysicalDevice16BitStorageFeaturesKHR,
  VkPhysicalDeviceSubgroupProperties,
  VkBufferMemoryRequirementsInfo2,
  VkBufferMemoryRequirementsInfo2KHR,
  VkImageMemoryRequirementsInfo2,
  VkImageMemoryRequirementsInfo2KHR,
  VkImageSparseMemoryRequirementsInfo2,
  VkImageSparseMemoryRequirementsInfo2KHR,
  VkMemoryRequirements2,
  VkMemoryRequirements2KHR,
  VkSparseImageMemoryRequirements2,
  VkSparseImageMemoryRequirements2KHR,
  VkPhysicalDevicePointClippingProperties,
  VkPhysicalDevicePointClippingPropertiesKHR,
  VkMemoryDedicatedRequirements,
  VkMemoryDedicatedRequirementsKHR,
  VkMemoryDedicatedAllocateInfo,
  VkMemoryDedicatedAllocateInfoKHR,
  VkImageViewUsageCreateInfo,
  VkImageViewUsageCreateInfoKHR,
  VkPipelineTessellationDomainOriginStateCreateInfo,
  VkPipelineTessellationDomainOriginStateCreateInfoKHR,
  VkSamplerYcbcrConversionInfo,
  VkSamplerYcbcrConversionInfoKHR,
  VkSamplerYcbcrConversionCreateInfo,
  VkSamplerYcbcrConversionCreateInfoKHR,
  VkBindImagePlaneMemoryInfo,
  VkBindImagePlaneMemoryInfoKHR,
  VkImagePlaneMemoryRequirementsInfo,
  VkImagePlaneMemoryRequirementsInfoKHR,
  VkPhysicalDeviceSamplerYcbcrConversionFeatures,
  VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR,
  VkSamplerYcbcrConversionImageFormatProperties,
  VkSamplerYcbcrConversionImageFormatPropertiesKHR,
  VkTextureLODGatherFormatPropertiesAMD,
  VkConditionalRenderingBeginInfoEXT,
  VkProtectedSubmitInfo,
  VkPhysicalDeviceProtectedMemoryFeatures,
  VkPhysicalDeviceProtectedMemoryProperties,
  VkDeviceQueueInfo2,
  VkPipelineCoverageToColorStateCreateInfoNV,
  VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT,
  VkSampleLocationEXT,
  VkSampleLocationsInfoEXT,
  VkAttachmentSampleLocationsEXT,
  VkSubpassSampleLocationsEXT,
  VkRenderPassSampleLocationsBeginInfoEXT,
  VkPipelineSampleLocationsStateCreateInfoEXT,
  VkPhysicalDeviceSampleLocationsPropertiesEXT,
  VkMultisamplePropertiesEXT,
  VkSamplerReductionModeCreateInfoEXT,
  VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT,
  VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT,
  VkPipelineColorBlendAdvancedStateCreateInfoEXT,
  VkPhysicalDeviceInlineUniformBlockFeaturesEXT,
  VkPhysicalDeviceInlineUniformBlockPropertiesEXT,
  VkWriteDescriptorSetInlineUniformBlockEXT,
  VkDescriptorPoolInlineUniformBlockCreateInfoEXT,
  VkPipelineCoverageModulationStateCreateInfoNV,
  VkImageFormatListCreateInfoKHR,
  VkValidationCacheCreateInfoEXT,
  VkShaderModuleValidationCacheCreateInfoEXT,
  VkPhysicalDeviceMaintenance3Properties,
  VkPhysicalDeviceMaintenance3PropertiesKHR,
  VkDescriptorSetLayoutSupport,
  VkDescriptorSetLayoutSupportKHR,
  VkPhysicalDeviceShaderDrawParametersFeatures,
  VkPhysicalDeviceShaderDrawParameterFeatures,
  VkPhysicalDeviceFloat16Int8FeaturesKHR,
  VkPhysicalDeviceFloatControlsPropertiesKHR,
  VkPhysicalDeviceHostQueryResetFeaturesEXT,
  VkShaderResourceUsageAMD,
  VkShaderStatisticsInfoAMD,
  VkDeviceQueueGlobalPriorityCreateInfoEXT,
  VkDebugUtilsObjectNameInfoEXT,
  VkDebugUtilsObjectTagInfoEXT,
  VkDebugUtilsLabelEXT,
  VkDebugUtilsMessengerCreateInfoEXT,
  VkDebugUtilsMessengerCallbackDataEXT,
  VkImportMemoryHostPointerInfoEXT,
  VkMemoryHostPointerPropertiesEXT,
  VkPhysicalDeviceExternalMemoryHostPropertiesEXT,
  VkPhysicalDeviceConservativeRasterizationPropertiesEXT,
  VkCalibratedTimestampInfoEXT,
  VkPhysicalDeviceShaderCorePropertiesAMD,
  VkPipelineRasterizationConservativeStateCreateInfoEXT,
  VkPhysicalDeviceDescriptorIndexingFeaturesEXT,
  VkPhysicalDeviceDescriptorIndexingPropertiesEXT,
  VkDescriptorSetLayoutBindingFlagsCreateInfoEXT,
  VkDescriptorSetVariableDescriptorCountAllocateInfoEXT,
  VkDescriptorSetVariableDescriptorCountLayoutSupportEXT,
  VkAttachmentDescription2KHR,
  VkAttachmentReference2KHR,
  VkSubpassDescription2KHR,
  VkSubpassDependency2KHR,
  VkRenderPassCreateInfo2KHR,
  VkSubpassBeginInfoKHR,
  VkSubpassEndInfoKHR,
  VkVertexInputBindingDivisorDescriptionEXT,
  VkPipelineVertexInputDivisorStateCreateInfoEXT,
  VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT,
  VkPhysicalDevicePCIBusInfoPropertiesEXT,
  VkCommandBufferInheritanceConditionalRenderingInfoEXT,
  VkPhysicalDevice8BitStorageFeaturesKHR,
  VkPhysicalDeviceConditionalRenderingFeaturesEXT,
  VkPhysicalDeviceVulkanMemoryModelFeaturesKHR,
  VkPhysicalDeviceShaderAtomicInt64FeaturesKHR,
  VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT,
  VkQueueFamilyCheckpointPropertiesNV,
  VkCheckpointDataNV,
  VkPhysicalDeviceDepthStencilResolvePropertiesKHR,
  VkSubpassDescriptionDepthStencilResolveKHR,
  VkImageViewASTCDecodeModeEXT,
  VkPhysicalDeviceASTCDecodeFeaturesEXT,
  VkPhysicalDeviceTransformFeedbackFeaturesEXT,
  VkPhysicalDeviceTransformFeedbackPropertiesEXT,
  VkPipelineRasterizationStateStreamCreateInfoEXT,
  VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV,
  VkPipelineRepresentativeFragmentTestStateCreateInfoNV,
  VkPhysicalDeviceExclusiveScissorFeaturesNV,
  VkPipelineViewportExclusiveScissorStateCreateInfoNV,
  VkPhysicalDeviceCornerSampledImageFeaturesNV,
  VkPhysicalDeviceComputeShaderDerivativesFeaturesNV,
  VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV,
  VkPhysicalDeviceShaderImageFootprintFeaturesNV,
  VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV,
  VkShadingRatePaletteNV,
  VkPipelineViewportShadingRateImageStateCreateInfoNV,
  VkPhysicalDeviceShadingRateImageFeaturesNV,
  VkPhysicalDeviceShadingRateImagePropertiesNV,
  VkCoarseSampleLocationNV,
  VkCoarseSampleOrderCustomNV,
  VkPipelineViewportCoarseSampleOrderStateCreateInfoNV,
  VkPhysicalDeviceMeshShaderFeaturesNV,
  VkPhysicalDeviceMeshShaderPropertiesNV,
  VkDrawMeshTasksIndirectCommandNV,
  VkRayTracingShaderGroupCreateInfoNV,
  VkRayTracingPipelineCreateInfoNV,
  VkGeometryTrianglesNV,
  VkGeometryAABBNV,
  VkGeometryDataNV,
  VkGeometryNV,
  VkAccelerationStructureInfoNV,
  VkAccelerationStructureCreateInfoNV,
  VkBindAccelerationStructureMemoryInfoNV,
  VkWriteDescriptorSetAccelerationStructureNV,
  VkAccelerationStructureMemoryRequirementsInfoNV,
  VkPhysicalDeviceRayTracingPropertiesNV,
  VkDrmFormatModifierPropertiesListEXT,
  VkDrmFormatModifierPropertiesEXT,
  VkPhysicalDeviceImageDrmFormatModifierInfoEXT,
  VkImageDrmFormatModifierListCreateInfoEXT,
  VkImageDrmFormatModifierExplicitCreateInfoEXT,
  VkImageDrmFormatModifierPropertiesEXT,
  VkImageStencilUsageCreateInfoEXT,
  VkDeviceMemoryOverallocationCreateInfoAMD,
  VkPhysicalDeviceFragmentDensityMapFeaturesEXT,
  VkPhysicalDeviceFragmentDensityMapPropertiesEXT,
  VkRenderPassFragmentDensityMapCreateInfoEXT,
  VkPhysicalDeviceScalarBlockLayoutFeaturesEXT,
  VkSurfaceProtectedCapabilitiesKHR,
  VkPhysicalDeviceDepthClipEnableFeaturesEXT,
  VkPipelineRasterizationDepthClipStateCreateInfoEXT,
  VkPhysicalDeviceMemoryBudgetPropertiesEXT,
  VkPhysicalDeviceMemoryPriorityFeaturesEXT,
  VkMemoryPriorityAllocateInfoEXT,
  VkPhysicalDeviceBufferDeviceAddressFeaturesEXT,
  VkPhysicalDeviceBufferAddressFeaturesEXT,
  VkBufferDeviceAddressInfoEXT,
  VkBufferDeviceAddressCreateInfoEXT,
  VkPhysicalDeviceImageViewImageFormatInfoEXT,
  VkFilterCubicImageViewImageFormatPropertiesEXT,
  VkPhysicalDeviceCooperativeMatrixFeaturesNV,
  VkPhysicalDeviceCooperativeMatrixPropertiesNV,
  VkCooperativeMatrixPropertiesNV,
  VkPhysicalDeviceYcbcrImageArraysFeaturesEXT,
  VkImageViewHandleInfoNVX,
  VkPipelineCreationFeedbackEXT,
  VkPipelineCreationFeedbackCreateInfoEXT,
  VkClearColorValue,
  VkClearValue
};
