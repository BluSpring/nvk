/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY nvk v0.2.5
 */

#ifndef __SOURCE_H__
#define __SOURCE_H__

#define NAPI_EXPERIMENTAL
#include <napi.h>

#define GLFW_INCLUDE_VULKAN
#include <GLFW/glfw3.h>

#define GLFW_EXPOSE_NATIVE_WIN32
#include <GLFW/glfw3native.h>

#define VK_USE_PLATFORM_WIN32_KHR
#include <vulkan/vulkan_win32.h>

#include "utils.h"
/** ## BEGIN VkDebugUtilsMessengerEXT ## **/
#ifndef __VK_VKDEBUGUTILSMESSENGEREXT_H__
#define __VK_VKDEBUGUTILSMESSENGEREXT_H__

class _VkDebugUtilsMessengerEXT : public Napi::ObjectWrap<_VkDebugUtilsMessengerEXT> {
  public:
    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    _VkDebugUtilsMessengerEXT(const Napi::CallbackInfo &info);
    ~_VkDebugUtilsMessengerEXT();
    static Napi::FunctionReference constructor;

    // real instance
    VkDebugUtilsMessengerEXT instance;

};

#endif
/** ## END VkDebugUtilsMessengerEXT ## **/

/** ## BEGIN VkDebugReportCallbackEXT ## **/
#ifndef __VK_VKDEBUGREPORTCALLBACKEXT_H__
#define __VK_VKDEBUGREPORTCALLBACKEXT_H__

class _VkDebugReportCallbackEXT : public Napi::ObjectWrap<_VkDebugReportCallbackEXT> {
  public:
    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    _VkDebugReportCallbackEXT(const Napi::CallbackInfo &info);
    ~_VkDebugReportCallbackEXT();
    static Napi::FunctionReference constructor;

    // real instance
    VkDebugReportCallbackEXT instance;

};

#endif
/** ## END VkDebugReportCallbackEXT ## **/

/** ## BEGIN VkSwapchainKHR ## **/
#ifndef __VK_VKSWAPCHAINKHR_H__
#define __VK_VKSWAPCHAINKHR_H__

class _VkSwapchainKHR : public Napi::ObjectWrap<_VkSwapchainKHR> {
  public:
    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    _VkSwapchainKHR(const Napi::CallbackInfo &info);
    ~_VkSwapchainKHR();
    static Napi::FunctionReference constructor;

    // real instance
    VkSwapchainKHR instance;

};

#endif
/** ## END VkSwapchainKHR ## **/

/** ## BEGIN VkSurfaceKHR ## **/
#ifndef __VK_VKSURFACEKHR_H__
#define __VK_VKSURFACEKHR_H__

class _VkSurfaceKHR : public Napi::ObjectWrap<_VkSurfaceKHR> {
  public:
    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    _VkSurfaceKHR(const Napi::CallbackInfo &info);
    ~_VkSurfaceKHR();
    static Napi::FunctionReference constructor;

    // real instance
    VkSurfaceKHR instance;

};

#endif
/** ## END VkSurfaceKHR ## **/

/** ## BEGIN VkDisplayModeKHR ## **/
#ifndef __VK_VKDISPLAYMODEKHR_H__
#define __VK_VKDISPLAYMODEKHR_H__

class _VkDisplayModeKHR : public Napi::ObjectWrap<_VkDisplayModeKHR> {
  public:
    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    _VkDisplayModeKHR(const Napi::CallbackInfo &info);
    ~_VkDisplayModeKHR();
    static Napi::FunctionReference constructor;

    // real instance
    VkDisplayModeKHR instance;

};

#endif
/** ## END VkDisplayModeKHR ## **/

/** ## BEGIN VkDisplayKHR ## **/
#ifndef __VK_VKDISPLAYKHR_H__
#define __VK_VKDISPLAYKHR_H__

class _VkDisplayKHR : public Napi::ObjectWrap<_VkDisplayKHR> {
  public:
    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    _VkDisplayKHR(const Napi::CallbackInfo &info);
    ~_VkDisplayKHR();
    static Napi::FunctionReference constructor;

    // real instance
    VkDisplayKHR instance;

};

#endif
/** ## END VkDisplayKHR ## **/

/** ## BEGIN VkAccelerationStructureNV ## **/
#ifndef __VK_VKACCELERATIONSTRUCTURENV_H__
#define __VK_VKACCELERATIONSTRUCTURENV_H__

class _VkAccelerationStructureNV : public Napi::ObjectWrap<_VkAccelerationStructureNV> {
  public:
    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    _VkAccelerationStructureNV(const Napi::CallbackInfo &info);
    ~_VkAccelerationStructureNV();
    static Napi::FunctionReference constructor;

    // real instance
    VkAccelerationStructureNV instance;

};

#endif
/** ## END VkAccelerationStructureNV ## **/

/** ## BEGIN VkValidationCacheEXT ## **/
#ifndef __VK_VKVALIDATIONCACHEEXT_H__
#define __VK_VKVALIDATIONCACHEEXT_H__

class _VkValidationCacheEXT : public Napi::ObjectWrap<_VkValidationCacheEXT> {
  public:
    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    _VkValidationCacheEXT(const Napi::CallbackInfo &info);
    ~_VkValidationCacheEXT();
    static Napi::FunctionReference constructor;

    // real instance
    VkValidationCacheEXT instance;

};

#endif
/** ## END VkValidationCacheEXT ## **/

/** ## BEGIN VkSamplerYcbcrConversion ## **/
#ifndef __VK_VKSAMPLERYCBCRCONVERSION_H__
#define __VK_VKSAMPLERYCBCRCONVERSION_H__

class _VkSamplerYcbcrConversion : public Napi::ObjectWrap<_VkSamplerYcbcrConversion> {
  public:
    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    _VkSamplerYcbcrConversion(const Napi::CallbackInfo &info);
    ~_VkSamplerYcbcrConversion();
    static Napi::FunctionReference constructor;

    // real instance
    VkSamplerYcbcrConversion instance;

};

#endif
/** ## END VkSamplerYcbcrConversion ## **/

/** ## BEGIN VkDescriptorUpdateTemplate ## **/
#ifndef __VK_VKDESCRIPTORUPDATETEMPLATE_H__
#define __VK_VKDESCRIPTORUPDATETEMPLATE_H__

class _VkDescriptorUpdateTemplate : public Napi::ObjectWrap<_VkDescriptorUpdateTemplate> {
  public:
    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    _VkDescriptorUpdateTemplate(const Napi::CallbackInfo &info);
    ~_VkDescriptorUpdateTemplate();
    static Napi::FunctionReference constructor;

    // real instance
    VkDescriptorUpdateTemplate instance;

};

#endif
/** ## END VkDescriptorUpdateTemplate ## **/

/** ## BEGIN VkIndirectCommandsLayoutNVX ## **/
#ifndef __VK_VKINDIRECTCOMMANDSLAYOUTNVX_H__
#define __VK_VKINDIRECTCOMMANDSLAYOUTNVX_H__

class _VkIndirectCommandsLayoutNVX : public Napi::ObjectWrap<_VkIndirectCommandsLayoutNVX> {
  public:
    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    _VkIndirectCommandsLayoutNVX(const Napi::CallbackInfo &info);
    ~_VkIndirectCommandsLayoutNVX();
    static Napi::FunctionReference constructor;

    // real instance
    VkIndirectCommandsLayoutNVX instance;

};

#endif
/** ## END VkIndirectCommandsLayoutNVX ## **/

/** ## BEGIN VkObjectTableNVX ## **/
#ifndef __VK_VKOBJECTTABLENVX_H__
#define __VK_VKOBJECTTABLENVX_H__

class _VkObjectTableNVX : public Napi::ObjectWrap<_VkObjectTableNVX> {
  public:
    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    _VkObjectTableNVX(const Napi::CallbackInfo &info);
    ~_VkObjectTableNVX();
    static Napi::FunctionReference constructor;

    // real instance
    VkObjectTableNVX instance;

};

#endif
/** ## END VkObjectTableNVX ## **/

/** ## BEGIN VkPipelineCache ## **/
#ifndef __VK_VKPIPELINECACHE_H__
#define __VK_VKPIPELINECACHE_H__

class _VkPipelineCache : public Napi::ObjectWrap<_VkPipelineCache> {
  public:
    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    _VkPipelineCache(const Napi::CallbackInfo &info);
    ~_VkPipelineCache();
    static Napi::FunctionReference constructor;

    // real instance
    VkPipelineCache instance;

};

#endif
/** ## END VkPipelineCache ## **/

/** ## BEGIN VkRenderPass ## **/
#ifndef __VK_VKRENDERPASS_H__
#define __VK_VKRENDERPASS_H__

class _VkRenderPass : public Napi::ObjectWrap<_VkRenderPass> {
  public:
    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    _VkRenderPass(const Napi::CallbackInfo &info);
    ~_VkRenderPass();
    static Napi::FunctionReference constructor;

    // real instance
    VkRenderPass instance;

};

#endif
/** ## END VkRenderPass ## **/

/** ## BEGIN VkFramebuffer ## **/
#ifndef __VK_VKFRAMEBUFFER_H__
#define __VK_VKFRAMEBUFFER_H__

class _VkFramebuffer : public Napi::ObjectWrap<_VkFramebuffer> {
  public:
    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    _VkFramebuffer(const Napi::CallbackInfo &info);
    ~_VkFramebuffer();
    static Napi::FunctionReference constructor;

    // real instance
    VkFramebuffer instance;

};

#endif
/** ## END VkFramebuffer ## **/

/** ## BEGIN VkQueryPool ## **/
#ifndef __VK_VKQUERYPOOL_H__
#define __VK_VKQUERYPOOL_H__

class _VkQueryPool : public Napi::ObjectWrap<_VkQueryPool> {
  public:
    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    _VkQueryPool(const Napi::CallbackInfo &info);
    ~_VkQueryPool();
    static Napi::FunctionReference constructor;

    // real instance
    VkQueryPool instance;

};

#endif
/** ## END VkQueryPool ## **/

/** ## BEGIN VkEvent ## **/
#ifndef __VK_VKEVENT_H__
#define __VK_VKEVENT_H__

class _VkEvent : public Napi::ObjectWrap<_VkEvent> {
  public:
    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    _VkEvent(const Napi::CallbackInfo &info);
    ~_VkEvent();
    static Napi::FunctionReference constructor;

    // real instance
    VkEvent instance;

};

#endif
/** ## END VkEvent ## **/

/** ## BEGIN VkSemaphore ## **/
#ifndef __VK_VKSEMAPHORE_H__
#define __VK_VKSEMAPHORE_H__

class _VkSemaphore : public Napi::ObjectWrap<_VkSemaphore> {
  public:
    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    _VkSemaphore(const Napi::CallbackInfo &info);
    ~_VkSemaphore();
    static Napi::FunctionReference constructor;

    // real instance
    VkSemaphore instance;

};

#endif
/** ## END VkSemaphore ## **/

/** ## BEGIN VkFence ## **/
#ifndef __VK_VKFENCE_H__
#define __VK_VKFENCE_H__

class _VkFence : public Napi::ObjectWrap<_VkFence> {
  public:
    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    _VkFence(const Napi::CallbackInfo &info);
    ~_VkFence();
    static Napi::FunctionReference constructor;

    // real instance
    VkFence instance;

};

#endif
/** ## END VkFence ## **/

/** ## BEGIN VkDescriptorPool ## **/
#ifndef __VK_VKDESCRIPTORPOOL_H__
#define __VK_VKDESCRIPTORPOOL_H__

class _VkDescriptorPool : public Napi::ObjectWrap<_VkDescriptorPool> {
  public:
    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    _VkDescriptorPool(const Napi::CallbackInfo &info);
    ~_VkDescriptorPool();
    static Napi::FunctionReference constructor;

    // real instance
    VkDescriptorPool instance;

};

#endif
/** ## END VkDescriptorPool ## **/

/** ## BEGIN VkDescriptorSetLayout ## **/
#ifndef __VK_VKDESCRIPTORSETLAYOUT_H__
#define __VK_VKDESCRIPTORSETLAYOUT_H__

class _VkDescriptorSetLayout : public Napi::ObjectWrap<_VkDescriptorSetLayout> {
  public:
    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    _VkDescriptorSetLayout(const Napi::CallbackInfo &info);
    ~_VkDescriptorSetLayout();
    static Napi::FunctionReference constructor;

    // real instance
    VkDescriptorSetLayout instance;

};

#endif
/** ## END VkDescriptorSetLayout ## **/

/** ## BEGIN VkDescriptorSet ## **/
#ifndef __VK_VKDESCRIPTORSET_H__
#define __VK_VKDESCRIPTORSET_H__

class _VkDescriptorSet : public Napi::ObjectWrap<_VkDescriptorSet> {
  public:
    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    _VkDescriptorSet(const Napi::CallbackInfo &info);
    ~_VkDescriptorSet();
    static Napi::FunctionReference constructor;

    // real instance
    VkDescriptorSet instance;

};

#endif
/** ## END VkDescriptorSet ## **/

/** ## BEGIN VkSampler ## **/
#ifndef __VK_VKSAMPLER_H__
#define __VK_VKSAMPLER_H__

class _VkSampler : public Napi::ObjectWrap<_VkSampler> {
  public:
    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    _VkSampler(const Napi::CallbackInfo &info);
    ~_VkSampler();
    static Napi::FunctionReference constructor;

    // real instance
    VkSampler instance;

};

#endif
/** ## END VkSampler ## **/

/** ## BEGIN VkPipelineLayout ## **/
#ifndef __VK_VKPIPELINELAYOUT_H__
#define __VK_VKPIPELINELAYOUT_H__

class _VkPipelineLayout : public Napi::ObjectWrap<_VkPipelineLayout> {
  public:
    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    _VkPipelineLayout(const Napi::CallbackInfo &info);
    ~_VkPipelineLayout();
    static Napi::FunctionReference constructor;

    // real instance
    VkPipelineLayout instance;

};

#endif
/** ## END VkPipelineLayout ## **/

/** ## BEGIN VkPipeline ## **/
#ifndef __VK_VKPIPELINE_H__
#define __VK_VKPIPELINE_H__

class _VkPipeline : public Napi::ObjectWrap<_VkPipeline> {
  public:
    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    _VkPipeline(const Napi::CallbackInfo &info);
    ~_VkPipeline();
    static Napi::FunctionReference constructor;

    // real instance
    VkPipeline instance;

};

#endif
/** ## END VkPipeline ## **/

/** ## BEGIN VkShaderModule ## **/
#ifndef __VK_VKSHADERMODULE_H__
#define __VK_VKSHADERMODULE_H__

class _VkShaderModule : public Napi::ObjectWrap<_VkShaderModule> {
  public:
    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    _VkShaderModule(const Napi::CallbackInfo &info);
    ~_VkShaderModule();
    static Napi::FunctionReference constructor;

    // real instance
    VkShaderModule instance;

};

#endif
/** ## END VkShaderModule ## **/

/** ## BEGIN VkImageView ## **/
#ifndef __VK_VKIMAGEVIEW_H__
#define __VK_VKIMAGEVIEW_H__

class _VkImageView : public Napi::ObjectWrap<_VkImageView> {
  public:
    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    _VkImageView(const Napi::CallbackInfo &info);
    ~_VkImageView();
    static Napi::FunctionReference constructor;

    // real instance
    VkImageView instance;

};

#endif
/** ## END VkImageView ## **/

/** ## BEGIN VkImage ## **/
#ifndef __VK_VKIMAGE_H__
#define __VK_VKIMAGE_H__

class _VkImage : public Napi::ObjectWrap<_VkImage> {
  public:
    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    _VkImage(const Napi::CallbackInfo &info);
    ~_VkImage();
    static Napi::FunctionReference constructor;

    // real instance
    VkImage instance;

};

#endif
/** ## END VkImage ## **/

/** ## BEGIN VkBufferView ## **/
#ifndef __VK_VKBUFFERVIEW_H__
#define __VK_VKBUFFERVIEW_H__

class _VkBufferView : public Napi::ObjectWrap<_VkBufferView> {
  public:
    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    _VkBufferView(const Napi::CallbackInfo &info);
    ~_VkBufferView();
    static Napi::FunctionReference constructor;

    // real instance
    VkBufferView instance;

};

#endif
/** ## END VkBufferView ## **/

/** ## BEGIN VkBuffer ## **/
#ifndef __VK_VKBUFFER_H__
#define __VK_VKBUFFER_H__

class _VkBuffer : public Napi::ObjectWrap<_VkBuffer> {
  public:
    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    _VkBuffer(const Napi::CallbackInfo &info);
    ~_VkBuffer();
    static Napi::FunctionReference constructor;

    // real instance
    VkBuffer instance;

};

#endif
/** ## END VkBuffer ## **/

/** ## BEGIN VkCommandPool ## **/
#ifndef __VK_VKCOMMANDPOOL_H__
#define __VK_VKCOMMANDPOOL_H__

class _VkCommandPool : public Napi::ObjectWrap<_VkCommandPool> {
  public:
    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    _VkCommandPool(const Napi::CallbackInfo &info);
    ~_VkCommandPool();
    static Napi::FunctionReference constructor;

    // real instance
    VkCommandPool instance;

};

#endif
/** ## END VkCommandPool ## **/

/** ## BEGIN VkDeviceMemory ## **/
#ifndef __VK_VKDEVICEMEMORY_H__
#define __VK_VKDEVICEMEMORY_H__

class _VkDeviceMemory : public Napi::ObjectWrap<_VkDeviceMemory> {
  public:
    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    _VkDeviceMemory(const Napi::CallbackInfo &info);
    ~_VkDeviceMemory();
    static Napi::FunctionReference constructor;

    // real instance
    VkDeviceMemory instance;

};

#endif
/** ## END VkDeviceMemory ## **/

/** ## BEGIN VkCommandBuffer ## **/
#ifndef __VK_VKCOMMANDBUFFER_H__
#define __VK_VKCOMMANDBUFFER_H__

class _VkCommandBuffer : public Napi::ObjectWrap<_VkCommandBuffer> {
  public:
    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    _VkCommandBuffer(const Napi::CallbackInfo &info);
    ~_VkCommandBuffer();
    static Napi::FunctionReference constructor;

    // real instance
    VkCommandBuffer instance;

};

#endif
/** ## END VkCommandBuffer ## **/

/** ## BEGIN VkQueue ## **/
#ifndef __VK_VKQUEUE_H__
#define __VK_VKQUEUE_H__

class _VkQueue : public Napi::ObjectWrap<_VkQueue> {
  public:
    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    _VkQueue(const Napi::CallbackInfo &info);
    ~_VkQueue();
    static Napi::FunctionReference constructor;

    // real instance
    VkQueue instance;

};

#endif
/** ## END VkQueue ## **/

/** ## BEGIN VkDevice ## **/
#ifndef __VK_VKDEVICE_H__
#define __VK_VKDEVICE_H__

class _VkDevice : public Napi::ObjectWrap<_VkDevice> {
  public:
    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    _VkDevice(const Napi::CallbackInfo &info);
    ~_VkDevice();
    static Napi::FunctionReference constructor;

    // real instance
    VkDevice instance;

};

#endif
/** ## END VkDevice ## **/

/** ## BEGIN VkPhysicalDevice ## **/
#ifndef __VK_VKPHYSICALDEVICE_H__
#define __VK_VKPHYSICALDEVICE_H__

class _VkPhysicalDevice : public Napi::ObjectWrap<_VkPhysicalDevice> {
  public:
    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    _VkPhysicalDevice(const Napi::CallbackInfo &info);
    ~_VkPhysicalDevice();
    static Napi::FunctionReference constructor;

    // real instance
    VkPhysicalDevice instance;

};

#endif
/** ## END VkPhysicalDevice ## **/

/** ## BEGIN VkInstance ## **/
#ifndef __VK_VKINSTANCE_H__
#define __VK_VKINSTANCE_H__

class _VkInstance : public Napi::ObjectWrap<_VkInstance> {
  public:
    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    _VkInstance(const Napi::CallbackInfo &info);
    ~_VkInstance();
    static Napi::FunctionReference constructor;

    // real instance
    VkInstance instance;

};

#endif
/** ## END VkInstance ## **/

/** ## BEGIN VkClearValue ## **/

class _VkClearValue : public Napi::ObjectWrap<_VkClearValue> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkClearValue(const Napi::CallbackInfo &info);
    ~_VkClearValue();

    // #accessors
    Napi::ObjectReference color;
    Napi::Value Getcolor(const Napi::CallbackInfo &info);
    void Setcolor(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference depthStencil;
    Napi::Value GetdepthStencil(const Napi::CallbackInfo &info);
    void SetdepthStencil(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkClearValue instance = {};

};

/** ## END VkClearValue ## **/

/** ## BEGIN VkClearColorValue ## **/

class _VkClearColorValue : public Napi::ObjectWrap<_VkClearColorValue> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkClearColorValue(const Napi::CallbackInfo &info);
    ~_VkClearColorValue();

    // #accessors
    std::vector<float>* vfloat32;
    Napi::ObjectReference float32;
    Napi::Value Getfloat32(const Napi::CallbackInfo &info);
    void Setfloat32(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<int32_t>* vint32;
    Napi::ObjectReference int32;
    Napi::Value Getint32(const Napi::CallbackInfo &info);
    void Setint32(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<uint32_t>* vuint32;
    Napi::ObjectReference uint32;
    Napi::Value Getuint32(const Napi::CallbackInfo &info);
    void Setuint32(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkClearColorValue instance = {};

};

/** ## END VkClearColorValue ## **/

/** ## BEGIN VkBufferDeviceAddressCreateInfoEXT ## **/

class _VkBufferDeviceAddressCreateInfoEXT : public Napi::ObjectWrap<_VkBufferDeviceAddressCreateInfoEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkBufferDeviceAddressCreateInfoEXT(const Napi::CallbackInfo &info);
    ~_VkBufferDeviceAddressCreateInfoEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdeviceAddress(const Napi::CallbackInfo &info);
    void SetdeviceAddress(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkBufferDeviceAddressCreateInfoEXT instance = {};

};

/** ## END VkBufferDeviceAddressCreateInfoEXT ## **/

/** ## BEGIN VkBufferDeviceAddressInfoEXT ## **/

class _VkBufferDeviceAddressInfoEXT : public Napi::ObjectWrap<_VkBufferDeviceAddressInfoEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkBufferDeviceAddressInfoEXT(const Napi::CallbackInfo &info);
    ~_VkBufferDeviceAddressInfoEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference buffer;
    Napi::Value Getbuffer(const Napi::CallbackInfo &info);
    void Setbuffer(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkBufferDeviceAddressInfoEXT instance = {};

};

/** ## END VkBufferDeviceAddressInfoEXT ## **/

/** ## BEGIN VkPhysicalDeviceBufferAddressFeaturesEXT ## **/

class _VkPhysicalDeviceBufferAddressFeaturesEXT : public Napi::ObjectWrap<_VkPhysicalDeviceBufferAddressFeaturesEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceBufferAddressFeaturesEXT(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceBufferAddressFeaturesEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetbufferDeviceAddress(const Napi::CallbackInfo &info);
    void SetbufferDeviceAddress(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetbufferDeviceAddressCaptureReplay(const Napi::CallbackInfo &info);
    void SetbufferDeviceAddressCaptureReplay(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetbufferDeviceAddressMultiDevice(const Napi::CallbackInfo &info);
    void SetbufferDeviceAddressMultiDevice(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceBufferAddressFeaturesEXT instance = {};

};

/** ## END VkPhysicalDeviceBufferAddressFeaturesEXT ## **/

/** ## BEGIN VkMemoryPriorityAllocateInfoEXT ## **/

class _VkMemoryPriorityAllocateInfoEXT : public Napi::ObjectWrap<_VkMemoryPriorityAllocateInfoEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkMemoryPriorityAllocateInfoEXT(const Napi::CallbackInfo &info);
    ~_VkMemoryPriorityAllocateInfoEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getpriority(const Napi::CallbackInfo &info);
    void Setpriority(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkMemoryPriorityAllocateInfoEXT instance = {};

};

/** ## END VkMemoryPriorityAllocateInfoEXT ## **/

/** ## BEGIN VkPhysicalDeviceMemoryPriorityFeaturesEXT ## **/

class _VkPhysicalDeviceMemoryPriorityFeaturesEXT : public Napi::ObjectWrap<_VkPhysicalDeviceMemoryPriorityFeaturesEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceMemoryPriorityFeaturesEXT(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceMemoryPriorityFeaturesEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmemoryPriority(const Napi::CallbackInfo &info);
    void SetmemoryPriority(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceMemoryPriorityFeaturesEXT instance = {};

};

/** ## END VkPhysicalDeviceMemoryPriorityFeaturesEXT ## **/

/** ## BEGIN VkPhysicalDeviceMemoryBudgetPropertiesEXT ## **/

class _VkPhysicalDeviceMemoryBudgetPropertiesEXT : public Napi::ObjectWrap<_VkPhysicalDeviceMemoryBudgetPropertiesEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceMemoryBudgetPropertiesEXT(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceMemoryBudgetPropertiesEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<uint64_t>* vheapBudget;
    Napi::ObjectReference heapBudget;
    Napi::Value GetheapBudget(const Napi::CallbackInfo &info);
    std::vector<uint64_t>* vheapUsage;
    Napi::ObjectReference heapUsage;
    Napi::Value GetheapUsage(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceMemoryBudgetPropertiesEXT instance = {};

};

/** ## END VkPhysicalDeviceMemoryBudgetPropertiesEXT ## **/

/** ## BEGIN VkPhysicalDeviceScalarBlockLayoutFeaturesEXT ## **/

class _VkPhysicalDeviceScalarBlockLayoutFeaturesEXT : public Napi::ObjectWrap<_VkPhysicalDeviceScalarBlockLayoutFeaturesEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceScalarBlockLayoutFeaturesEXT(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceScalarBlockLayoutFeaturesEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetscalarBlockLayout(const Napi::CallbackInfo &info);
    void SetscalarBlockLayout(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceScalarBlockLayoutFeaturesEXT instance = {};

};

/** ## END VkPhysicalDeviceScalarBlockLayoutFeaturesEXT ## **/

/** ## BEGIN VkRenderPassFragmentDensityMapCreateInfoEXT ## **/

class _VkRenderPassFragmentDensityMapCreateInfoEXT : public Napi::ObjectWrap<_VkRenderPassFragmentDensityMapCreateInfoEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkRenderPassFragmentDensityMapCreateInfoEXT(const Napi::CallbackInfo &info);
    ~_VkRenderPassFragmentDensityMapCreateInfoEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference fragmentDensityMapAttachment;
    Napi::Value GetfragmentDensityMapAttachment(const Napi::CallbackInfo &info);
    void SetfragmentDensityMapAttachment(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkRenderPassFragmentDensityMapCreateInfoEXT instance = {};

};

/** ## END VkRenderPassFragmentDensityMapCreateInfoEXT ## **/

/** ## BEGIN VkPhysicalDeviceFragmentDensityMapPropertiesEXT ## **/

class _VkPhysicalDeviceFragmentDensityMapPropertiesEXT : public Napi::ObjectWrap<_VkPhysicalDeviceFragmentDensityMapPropertiesEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceFragmentDensityMapPropertiesEXT(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceFragmentDensityMapPropertiesEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference minFragmentDensityTexelSize;
    Napi::Value GetminFragmentDensityTexelSize(const Napi::CallbackInfo &info);
    Napi::ObjectReference maxFragmentDensityTexelSize;
    Napi::Value GetmaxFragmentDensityTexelSize(const Napi::CallbackInfo &info);
    Napi::Value GetfragmentDensityInvocations(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceFragmentDensityMapPropertiesEXT instance = {};

};

/** ## END VkPhysicalDeviceFragmentDensityMapPropertiesEXT ## **/

/** ## BEGIN VkPhysicalDeviceFragmentDensityMapFeaturesEXT ## **/

class _VkPhysicalDeviceFragmentDensityMapFeaturesEXT : public Napi::ObjectWrap<_VkPhysicalDeviceFragmentDensityMapFeaturesEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceFragmentDensityMapFeaturesEXT(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceFragmentDensityMapFeaturesEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetfragmentDensityMap(const Napi::CallbackInfo &info);
    Napi::Value GetfragmentDensityMapDynamic(const Napi::CallbackInfo &info);
    Napi::Value GetfragmentDensityMapNonSubsampledImages(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceFragmentDensityMapFeaturesEXT instance = {};

};

/** ## END VkPhysicalDeviceFragmentDensityMapFeaturesEXT ## **/

/** ## BEGIN VkDeviceMemoryOverallocationCreateInfoAMD ## **/

class _VkDeviceMemoryOverallocationCreateInfoAMD : public Napi::ObjectWrap<_VkDeviceMemoryOverallocationCreateInfoAMD> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDeviceMemoryOverallocationCreateInfoAMD(const Napi::CallbackInfo &info);
    ~_VkDeviceMemoryOverallocationCreateInfoAMD();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetoverallocationBehavior(const Napi::CallbackInfo &info);
    void SetoverallocationBehavior(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDeviceMemoryOverallocationCreateInfoAMD instance = {};

};

/** ## END VkDeviceMemoryOverallocationCreateInfoAMD ## **/

/** ## BEGIN VkImageStencilUsageCreateInfoEXT ## **/

class _VkImageStencilUsageCreateInfoEXT : public Napi::ObjectWrap<_VkImageStencilUsageCreateInfoEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkImageStencilUsageCreateInfoEXT(const Napi::CallbackInfo &info);
    ~_VkImageStencilUsageCreateInfoEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetstencilUsage(const Napi::CallbackInfo &info);
    void SetstencilUsage(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkImageStencilUsageCreateInfoEXT instance = {};

};

/** ## END VkImageStencilUsageCreateInfoEXT ## **/

/** ## BEGIN VkImageDrmFormatModifierPropertiesEXT ## **/

class _VkImageDrmFormatModifierPropertiesEXT : public Napi::ObjectWrap<_VkImageDrmFormatModifierPropertiesEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkImageDrmFormatModifierPropertiesEXT(const Napi::CallbackInfo &info);
    ~_VkImageDrmFormatModifierPropertiesEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdrmFormatModifier(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkImageDrmFormatModifierPropertiesEXT instance = {};

};

/** ## END VkImageDrmFormatModifierPropertiesEXT ## **/

/** ## BEGIN VkImageDrmFormatModifierExplicitCreateInfoEXT ## **/

class _VkImageDrmFormatModifierExplicitCreateInfoEXT : public Napi::ObjectWrap<_VkImageDrmFormatModifierExplicitCreateInfoEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkImageDrmFormatModifierExplicitCreateInfoEXT(const Napi::CallbackInfo &info);
    ~_VkImageDrmFormatModifierExplicitCreateInfoEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdrmFormatModifier(const Napi::CallbackInfo &info);
    void SetdrmFormatModifier(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdrmFormatModifierPlaneCount(const Napi::CallbackInfo &info);
    void SetdrmFormatModifierPlaneCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkSubresourceLayout>* vpPlaneLayouts;
    Napi::ObjectReference pPlaneLayouts;
    Napi::Value GetpPlaneLayouts(const Napi::CallbackInfo &info);
    void SetpPlaneLayouts(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkImageDrmFormatModifierExplicitCreateInfoEXT instance = {};

};

/** ## END VkImageDrmFormatModifierExplicitCreateInfoEXT ## **/

/** ## BEGIN VkImageDrmFormatModifierListCreateInfoEXT ## **/

class _VkImageDrmFormatModifierListCreateInfoEXT : public Napi::ObjectWrap<_VkImageDrmFormatModifierListCreateInfoEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkImageDrmFormatModifierListCreateInfoEXT(const Napi::CallbackInfo &info);
    ~_VkImageDrmFormatModifierListCreateInfoEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdrmFormatModifierCount(const Napi::CallbackInfo &info);
    void SetdrmFormatModifierCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pDrmFormatModifiers;
    Napi::Value GetpDrmFormatModifiers(const Napi::CallbackInfo &info);
    void SetpDrmFormatModifiers(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkImageDrmFormatModifierListCreateInfoEXT instance = {};

};

/** ## END VkImageDrmFormatModifierListCreateInfoEXT ## **/

/** ## BEGIN VkPhysicalDeviceImageDrmFormatModifierInfoEXT ## **/

class _VkPhysicalDeviceImageDrmFormatModifierInfoEXT : public Napi::ObjectWrap<_VkPhysicalDeviceImageDrmFormatModifierInfoEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceImageDrmFormatModifierInfoEXT(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceImageDrmFormatModifierInfoEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdrmFormatModifier(const Napi::CallbackInfo &info);
    void SetdrmFormatModifier(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetsharingMode(const Napi::CallbackInfo &info);
    void SetsharingMode(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetqueueFamilyIndexCount(const Napi::CallbackInfo &info);
    void SetqueueFamilyIndexCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pQueueFamilyIndices;
    Napi::Value GetpQueueFamilyIndices(const Napi::CallbackInfo &info);
    void SetpQueueFamilyIndices(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceImageDrmFormatModifierInfoEXT instance = {};

};

/** ## END VkPhysicalDeviceImageDrmFormatModifierInfoEXT ## **/

/** ## BEGIN VkDrmFormatModifierPropertiesEXT ## **/

class _VkDrmFormatModifierPropertiesEXT : public Napi::ObjectWrap<_VkDrmFormatModifierPropertiesEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDrmFormatModifierPropertiesEXT(const Napi::CallbackInfo &info);
    ~_VkDrmFormatModifierPropertiesEXT();

    // #accessors
    Napi::Value GetdrmFormatModifier(const Napi::CallbackInfo &info);
    Napi::Value GetdrmFormatModifierPlaneCount(const Napi::CallbackInfo &info);
    Napi::Value GetdrmFormatModifierTilingFeatures(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDrmFormatModifierPropertiesEXT instance = {};

};

/** ## END VkDrmFormatModifierPropertiesEXT ## **/

/** ## BEGIN VkDrmFormatModifierPropertiesListEXT ## **/

class _VkDrmFormatModifierPropertiesListEXT : public Napi::ObjectWrap<_VkDrmFormatModifierPropertiesListEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDrmFormatModifierPropertiesListEXT(const Napi::CallbackInfo &info);
    ~_VkDrmFormatModifierPropertiesListEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdrmFormatModifierCount(const Napi::CallbackInfo &info);
    void SetdrmFormatModifierCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkDrmFormatModifierPropertiesEXT>* vpDrmFormatModifierProperties;
    Napi::ObjectReference pDrmFormatModifierProperties;
    Napi::Value GetpDrmFormatModifierProperties(const Napi::CallbackInfo &info);
    void SetpDrmFormatModifierProperties(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDrmFormatModifierPropertiesListEXT instance = {};

};

/** ## END VkDrmFormatModifierPropertiesListEXT ## **/

/** ## BEGIN VkPhysicalDeviceRayTracingPropertiesNV ## **/

class _VkPhysicalDeviceRayTracingPropertiesNV : public Napi::ObjectWrap<_VkPhysicalDeviceRayTracingPropertiesNV> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceRayTracingPropertiesNV(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceRayTracingPropertiesNV();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetshaderGroupHandleSize(const Napi::CallbackInfo &info);
    void SetshaderGroupHandleSize(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmaxRecursionDepth(const Napi::CallbackInfo &info);
    void SetmaxRecursionDepth(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmaxShaderGroupStride(const Napi::CallbackInfo &info);
    void SetmaxShaderGroupStride(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetshaderGroupBaseAlignment(const Napi::CallbackInfo &info);
    void SetshaderGroupBaseAlignment(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmaxGeometryCount(const Napi::CallbackInfo &info);
    void SetmaxGeometryCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmaxInstanceCount(const Napi::CallbackInfo &info);
    void SetmaxInstanceCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmaxTriangleCount(const Napi::CallbackInfo &info);
    void SetmaxTriangleCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmaxDescriptorSetAccelerationStructures(const Napi::CallbackInfo &info);
    void SetmaxDescriptorSetAccelerationStructures(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceRayTracingPropertiesNV instance = {};

};

/** ## END VkPhysicalDeviceRayTracingPropertiesNV ## **/

/** ## BEGIN VkAccelerationStructureMemoryRequirementsInfoNV ## **/

class _VkAccelerationStructureMemoryRequirementsInfoNV : public Napi::ObjectWrap<_VkAccelerationStructureMemoryRequirementsInfoNV> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkAccelerationStructureMemoryRequirementsInfoNV(const Napi::CallbackInfo &info);
    ~_VkAccelerationStructureMemoryRequirementsInfoNV();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Gettype(const Napi::CallbackInfo &info);
    void Settype(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference accelerationStructure;
    Napi::Value GetaccelerationStructure(const Napi::CallbackInfo &info);
    void SetaccelerationStructure(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkAccelerationStructureMemoryRequirementsInfoNV instance = {};

};

/** ## END VkAccelerationStructureMemoryRequirementsInfoNV ## **/

/** ## BEGIN VkWriteDescriptorSetAccelerationStructureNV ## **/

class _VkWriteDescriptorSetAccelerationStructureNV : public Napi::ObjectWrap<_VkWriteDescriptorSetAccelerationStructureNV> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkWriteDescriptorSetAccelerationStructureNV(const Napi::CallbackInfo &info);
    ~_VkWriteDescriptorSetAccelerationStructureNV();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetaccelerationStructureCount(const Napi::CallbackInfo &info);
    void SetaccelerationStructureCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkAccelerationStructureNV>* vpAccelerationStructures;
    Napi::ObjectReference pAccelerationStructures;
    Napi::Value GetpAccelerationStructures(const Napi::CallbackInfo &info);
    void SetpAccelerationStructures(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkWriteDescriptorSetAccelerationStructureNV instance = {};

};

/** ## END VkWriteDescriptorSetAccelerationStructureNV ## **/

/** ## BEGIN VkBindAccelerationStructureMemoryInfoNV ## **/

class _VkBindAccelerationStructureMemoryInfoNV : public Napi::ObjectWrap<_VkBindAccelerationStructureMemoryInfoNV> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkBindAccelerationStructureMemoryInfoNV(const Napi::CallbackInfo &info);
    ~_VkBindAccelerationStructureMemoryInfoNV();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference accelerationStructure;
    Napi::Value GetaccelerationStructure(const Napi::CallbackInfo &info);
    void SetaccelerationStructure(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference memory;
    Napi::Value Getmemory(const Napi::CallbackInfo &info);
    void Setmemory(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmemoryOffset(const Napi::CallbackInfo &info);
    void SetmemoryOffset(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdeviceIndexCount(const Napi::CallbackInfo &info);
    void SetdeviceIndexCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pDeviceIndices;
    Napi::Value GetpDeviceIndices(const Napi::CallbackInfo &info);
    void SetpDeviceIndices(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkBindAccelerationStructureMemoryInfoNV instance = {};

};

/** ## END VkBindAccelerationStructureMemoryInfoNV ## **/

/** ## BEGIN VkAccelerationStructureCreateInfoNV ## **/

class _VkAccelerationStructureCreateInfoNV : public Napi::ObjectWrap<_VkAccelerationStructureCreateInfoNV> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkAccelerationStructureCreateInfoNV(const Napi::CallbackInfo &info);
    ~_VkAccelerationStructureCreateInfoNV();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetcompactedSize(const Napi::CallbackInfo &info);
    void SetcompactedSize(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference info;
    Napi::Value Getinfo(const Napi::CallbackInfo &info);
    void Setinfo(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkAccelerationStructureCreateInfoNV instance = {};

};

/** ## END VkAccelerationStructureCreateInfoNV ## **/

/** ## BEGIN VkAccelerationStructureInfoNV ## **/

class _VkAccelerationStructureInfoNV : public Napi::ObjectWrap<_VkAccelerationStructureInfoNV> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkAccelerationStructureInfoNV(const Napi::CallbackInfo &info);
    ~_VkAccelerationStructureInfoNV();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Gettype(const Napi::CallbackInfo &info);
    void Settype(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetinstanceCount(const Napi::CallbackInfo &info);
    void SetinstanceCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetgeometryCount(const Napi::CallbackInfo &info);
    void SetgeometryCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkGeometryNV>* vpGeometries;
    Napi::ObjectReference pGeometries;
    Napi::Value GetpGeometries(const Napi::CallbackInfo &info);
    void SetpGeometries(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkAccelerationStructureInfoNV instance = {};

};

/** ## END VkAccelerationStructureInfoNV ## **/

/** ## BEGIN VkGeometryNV ## **/

class _VkGeometryNV : public Napi::ObjectWrap<_VkGeometryNV> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkGeometryNV(const Napi::CallbackInfo &info);
    ~_VkGeometryNV();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetgeometryType(const Napi::CallbackInfo &info);
    void SetgeometryType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference geometry;
    Napi::Value Getgeometry(const Napi::CallbackInfo &info);
    void Setgeometry(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkGeometryNV instance = {};

};

/** ## END VkGeometryNV ## **/

/** ## BEGIN VkGeometryDataNV ## **/

class _VkGeometryDataNV : public Napi::ObjectWrap<_VkGeometryDataNV> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkGeometryDataNV(const Napi::CallbackInfo &info);
    ~_VkGeometryDataNV();

    // #accessors
    Napi::ObjectReference triangles;
    Napi::Value Gettriangles(const Napi::CallbackInfo &info);
    void Settriangles(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference aabbs;
    Napi::Value Getaabbs(const Napi::CallbackInfo &info);
    void Setaabbs(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkGeometryDataNV instance = {};

};

/** ## END VkGeometryDataNV ## **/

/** ## BEGIN VkGeometryAABBNV ## **/

class _VkGeometryAABBNV : public Napi::ObjectWrap<_VkGeometryAABBNV> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkGeometryAABBNV(const Napi::CallbackInfo &info);
    ~_VkGeometryAABBNV();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference aabbData;
    Napi::Value GetaabbData(const Napi::CallbackInfo &info);
    void SetaabbData(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetnumAABBs(const Napi::CallbackInfo &info);
    void SetnumAABBs(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getstride(const Napi::CallbackInfo &info);
    void Setstride(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getoffset(const Napi::CallbackInfo &info);
    void Setoffset(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkGeometryAABBNV instance = {};

};

/** ## END VkGeometryAABBNV ## **/

/** ## BEGIN VkGeometryTrianglesNV ## **/

class _VkGeometryTrianglesNV : public Napi::ObjectWrap<_VkGeometryTrianglesNV> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkGeometryTrianglesNV(const Napi::CallbackInfo &info);
    ~_VkGeometryTrianglesNV();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference vertexData;
    Napi::Value GetvertexData(const Napi::CallbackInfo &info);
    void SetvertexData(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetvertexOffset(const Napi::CallbackInfo &info);
    void SetvertexOffset(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetvertexCount(const Napi::CallbackInfo &info);
    void SetvertexCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetvertexStride(const Napi::CallbackInfo &info);
    void SetvertexStride(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetvertexFormat(const Napi::CallbackInfo &info);
    void SetvertexFormat(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference indexData;
    Napi::Value GetindexData(const Napi::CallbackInfo &info);
    void SetindexData(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetindexOffset(const Napi::CallbackInfo &info);
    void SetindexOffset(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetindexCount(const Napi::CallbackInfo &info);
    void SetindexCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetindexType(const Napi::CallbackInfo &info);
    void SetindexType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference transformData;
    Napi::Value GettransformData(const Napi::CallbackInfo &info);
    void SettransformData(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GettransformOffset(const Napi::CallbackInfo &info);
    void SettransformOffset(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkGeometryTrianglesNV instance = {};

};

/** ## END VkGeometryTrianglesNV ## **/

/** ## BEGIN VkRayTracingPipelineCreateInfoNV ## **/

class _VkRayTracingPipelineCreateInfoNV : public Napi::ObjectWrap<_VkRayTracingPipelineCreateInfoNV> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkRayTracingPipelineCreateInfoNV(const Napi::CallbackInfo &info);
    ~_VkRayTracingPipelineCreateInfoNV();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetstageCount(const Napi::CallbackInfo &info);
    void SetstageCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkPipelineShaderStageCreateInfo>* vpStages;
    Napi::ObjectReference pStages;
    Napi::Value GetpStages(const Napi::CallbackInfo &info);
    void SetpStages(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetgroupCount(const Napi::CallbackInfo &info);
    void SetgroupCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkRayTracingShaderGroupCreateInfoNV>* vpGroups;
    Napi::ObjectReference pGroups;
    Napi::Value GetpGroups(const Napi::CallbackInfo &info);
    void SetpGroups(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmaxRecursionDepth(const Napi::CallbackInfo &info);
    void SetmaxRecursionDepth(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference layout;
    Napi::Value Getlayout(const Napi::CallbackInfo &info);
    void Setlayout(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference basePipelineHandle;
    Napi::Value GetbasePipelineHandle(const Napi::CallbackInfo &info);
    void SetbasePipelineHandle(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetbasePipelineIndex(const Napi::CallbackInfo &info);
    void SetbasePipelineIndex(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkRayTracingPipelineCreateInfoNV instance = {};

};

/** ## END VkRayTracingPipelineCreateInfoNV ## **/

/** ## BEGIN VkRayTracingShaderGroupCreateInfoNV ## **/

class _VkRayTracingShaderGroupCreateInfoNV : public Napi::ObjectWrap<_VkRayTracingShaderGroupCreateInfoNV> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkRayTracingShaderGroupCreateInfoNV(const Napi::CallbackInfo &info);
    ~_VkRayTracingShaderGroupCreateInfoNV();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Gettype(const Napi::CallbackInfo &info);
    void Settype(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetgeneralShader(const Napi::CallbackInfo &info);
    void SetgeneralShader(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetclosestHitShader(const Napi::CallbackInfo &info);
    void SetclosestHitShader(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetanyHitShader(const Napi::CallbackInfo &info);
    void SetanyHitShader(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetintersectionShader(const Napi::CallbackInfo &info);
    void SetintersectionShader(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkRayTracingShaderGroupCreateInfoNV instance = {};

};

/** ## END VkRayTracingShaderGroupCreateInfoNV ## **/

/** ## BEGIN VkDrawMeshTasksIndirectCommandNV ## **/

class _VkDrawMeshTasksIndirectCommandNV : public Napi::ObjectWrap<_VkDrawMeshTasksIndirectCommandNV> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDrawMeshTasksIndirectCommandNV(const Napi::CallbackInfo &info);
    ~_VkDrawMeshTasksIndirectCommandNV();

    // #accessors
    Napi::Value GettaskCount(const Napi::CallbackInfo &info);
    void SettaskCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetfirstTask(const Napi::CallbackInfo &info);
    void SetfirstTask(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDrawMeshTasksIndirectCommandNV instance = {};

};

/** ## END VkDrawMeshTasksIndirectCommandNV ## **/

/** ## BEGIN VkPhysicalDeviceMeshShaderPropertiesNV ## **/

class _VkPhysicalDeviceMeshShaderPropertiesNV : public Napi::ObjectWrap<_VkPhysicalDeviceMeshShaderPropertiesNV> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceMeshShaderPropertiesNV(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceMeshShaderPropertiesNV();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmaxDrawMeshTasksCount(const Napi::CallbackInfo &info);
    void SetmaxDrawMeshTasksCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmaxTaskWorkGroupInvocations(const Napi::CallbackInfo &info);
    void SetmaxTaskWorkGroupInvocations(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<uint32_t>* vmaxTaskWorkGroupSize;
    Napi::ObjectReference maxTaskWorkGroupSize;
    Napi::Value GetmaxTaskWorkGroupSize(const Napi::CallbackInfo &info);
    void SetmaxTaskWorkGroupSize(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmaxTaskTotalMemorySize(const Napi::CallbackInfo &info);
    void SetmaxTaskTotalMemorySize(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmaxTaskOutputCount(const Napi::CallbackInfo &info);
    void SetmaxTaskOutputCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmaxMeshWorkGroupInvocations(const Napi::CallbackInfo &info);
    void SetmaxMeshWorkGroupInvocations(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<uint32_t>* vmaxMeshWorkGroupSize;
    Napi::ObjectReference maxMeshWorkGroupSize;
    Napi::Value GetmaxMeshWorkGroupSize(const Napi::CallbackInfo &info);
    void SetmaxMeshWorkGroupSize(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmaxMeshTotalMemorySize(const Napi::CallbackInfo &info);
    void SetmaxMeshTotalMemorySize(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmaxMeshOutputVertices(const Napi::CallbackInfo &info);
    void SetmaxMeshOutputVertices(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmaxMeshOutputPrimitives(const Napi::CallbackInfo &info);
    void SetmaxMeshOutputPrimitives(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmaxMeshMultiviewViewCount(const Napi::CallbackInfo &info);
    void SetmaxMeshMultiviewViewCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmeshOutputPerVertexGranularity(const Napi::CallbackInfo &info);
    void SetmeshOutputPerVertexGranularity(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmeshOutputPerPrimitiveGranularity(const Napi::CallbackInfo &info);
    void SetmeshOutputPerPrimitiveGranularity(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceMeshShaderPropertiesNV instance = {};

};

/** ## END VkPhysicalDeviceMeshShaderPropertiesNV ## **/

/** ## BEGIN VkPhysicalDeviceMeshShaderFeaturesNV ## **/

class _VkPhysicalDeviceMeshShaderFeaturesNV : public Napi::ObjectWrap<_VkPhysicalDeviceMeshShaderFeaturesNV> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceMeshShaderFeaturesNV(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceMeshShaderFeaturesNV();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GettaskShader(const Napi::CallbackInfo &info);
    void SettaskShader(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmeshShader(const Napi::CallbackInfo &info);
    void SetmeshShader(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceMeshShaderFeaturesNV instance = {};

};

/** ## END VkPhysicalDeviceMeshShaderFeaturesNV ## **/

/** ## BEGIN VkPipelineViewportCoarseSampleOrderStateCreateInfoNV ## **/

class _VkPipelineViewportCoarseSampleOrderStateCreateInfoNV : public Napi::ObjectWrap<_VkPipelineViewportCoarseSampleOrderStateCreateInfoNV> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPipelineViewportCoarseSampleOrderStateCreateInfoNV(const Napi::CallbackInfo &info);
    ~_VkPipelineViewportCoarseSampleOrderStateCreateInfoNV();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetsampleOrderType(const Napi::CallbackInfo &info);
    void SetsampleOrderType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetcustomSampleOrderCount(const Napi::CallbackInfo &info);
    void SetcustomSampleOrderCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkCoarseSampleOrderCustomNV>* vpCustomSampleOrders;
    Napi::ObjectReference pCustomSampleOrders;
    Napi::Value GetpCustomSampleOrders(const Napi::CallbackInfo &info);
    void SetpCustomSampleOrders(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPipelineViewportCoarseSampleOrderStateCreateInfoNV instance = {};

};

/** ## END VkPipelineViewportCoarseSampleOrderStateCreateInfoNV ## **/

/** ## BEGIN VkCoarseSampleOrderCustomNV ## **/

class _VkCoarseSampleOrderCustomNV : public Napi::ObjectWrap<_VkCoarseSampleOrderCustomNV> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkCoarseSampleOrderCustomNV(const Napi::CallbackInfo &info);
    ~_VkCoarseSampleOrderCustomNV();

    // #accessors
    Napi::Value GetshadingRate(const Napi::CallbackInfo &info);
    void SetshadingRate(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetsampleCount(const Napi::CallbackInfo &info);
    void SetsampleCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetsampleLocationCount(const Napi::CallbackInfo &info);
    void SetsampleLocationCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkCoarseSampleLocationNV>* vpSampleLocations;
    Napi::ObjectReference pSampleLocations;
    Napi::Value GetpSampleLocations(const Napi::CallbackInfo &info);
    void SetpSampleLocations(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkCoarseSampleOrderCustomNV instance = {};

};

/** ## END VkCoarseSampleOrderCustomNV ## **/

/** ## BEGIN VkCoarseSampleLocationNV ## **/

class _VkCoarseSampleLocationNV : public Napi::ObjectWrap<_VkCoarseSampleLocationNV> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkCoarseSampleLocationNV(const Napi::CallbackInfo &info);
    ~_VkCoarseSampleLocationNV();

    // #accessors
    Napi::Value GetpixelX(const Napi::CallbackInfo &info);
    void SetpixelX(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetpixelY(const Napi::CallbackInfo &info);
    void SetpixelY(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getsample(const Napi::CallbackInfo &info);
    void Setsample(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkCoarseSampleLocationNV instance = {};

};

/** ## END VkCoarseSampleLocationNV ## **/

/** ## BEGIN VkPhysicalDeviceShadingRateImagePropertiesNV ## **/

class _VkPhysicalDeviceShadingRateImagePropertiesNV : public Napi::ObjectWrap<_VkPhysicalDeviceShadingRateImagePropertiesNV> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceShadingRateImagePropertiesNV(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceShadingRateImagePropertiesNV();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference shadingRateTexelSize;
    Napi::Value GetshadingRateTexelSize(const Napi::CallbackInfo &info);
    Napi::Value GetshadingRatePaletteSize(const Napi::CallbackInfo &info);
    Napi::Value GetshadingRateMaxCoarseSamples(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceShadingRateImagePropertiesNV instance = {};

};

/** ## END VkPhysicalDeviceShadingRateImagePropertiesNV ## **/

/** ## BEGIN VkPhysicalDeviceShadingRateImageFeaturesNV ## **/

class _VkPhysicalDeviceShadingRateImageFeaturesNV : public Napi::ObjectWrap<_VkPhysicalDeviceShadingRateImageFeaturesNV> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceShadingRateImageFeaturesNV(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceShadingRateImageFeaturesNV();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetshadingRateImage(const Napi::CallbackInfo &info);
    void SetshadingRateImage(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetshadingRateCoarseSampleOrder(const Napi::CallbackInfo &info);
    void SetshadingRateCoarseSampleOrder(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceShadingRateImageFeaturesNV instance = {};

};

/** ## END VkPhysicalDeviceShadingRateImageFeaturesNV ## **/

/** ## BEGIN VkPipelineViewportShadingRateImageStateCreateInfoNV ## **/

class _VkPipelineViewportShadingRateImageStateCreateInfoNV : public Napi::ObjectWrap<_VkPipelineViewportShadingRateImageStateCreateInfoNV> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPipelineViewportShadingRateImageStateCreateInfoNV(const Napi::CallbackInfo &info);
    ~_VkPipelineViewportShadingRateImageStateCreateInfoNV();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetshadingRateImageEnable(const Napi::CallbackInfo &info);
    void SetshadingRateImageEnable(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetviewportCount(const Napi::CallbackInfo &info);
    void SetviewportCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkShadingRatePaletteNV>* vpShadingRatePalettes;
    Napi::ObjectReference pShadingRatePalettes;
    Napi::Value GetpShadingRatePalettes(const Napi::CallbackInfo &info);
    void SetpShadingRatePalettes(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPipelineViewportShadingRateImageStateCreateInfoNV instance = {};

};

/** ## END VkPipelineViewportShadingRateImageStateCreateInfoNV ## **/

/** ## BEGIN VkShadingRatePaletteNV ## **/

class _VkShadingRatePaletteNV : public Napi::ObjectWrap<_VkShadingRatePaletteNV> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkShadingRatePaletteNV(const Napi::CallbackInfo &info);
    ~_VkShadingRatePaletteNV();

    // #accessors
    Napi::Value GetshadingRatePaletteEntryCount(const Napi::CallbackInfo &info);
    void SetshadingRatePaletteEntryCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pShadingRatePaletteEntries;
    Napi::Value GetpShadingRatePaletteEntries(const Napi::CallbackInfo &info);
    void SetpShadingRatePaletteEntries(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkShadingRatePaletteNV instance = {};

};

/** ## END VkShadingRatePaletteNV ## **/

/** ## BEGIN VkPhysicalDeviceShaderImageFootprintFeaturesNV ## **/

class _VkPhysicalDeviceShaderImageFootprintFeaturesNV : public Napi::ObjectWrap<_VkPhysicalDeviceShaderImageFootprintFeaturesNV> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceShaderImageFootprintFeaturesNV(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceShaderImageFootprintFeaturesNV();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetimageFootprint(const Napi::CallbackInfo &info);
    void SetimageFootprint(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceShaderImageFootprintFeaturesNV instance = {};

};

/** ## END VkPhysicalDeviceShaderImageFootprintFeaturesNV ## **/

/** ## BEGIN VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV ## **/

class _VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV : public Napi::ObjectWrap<_VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetfragmentShaderBarycentric(const Napi::CallbackInfo &info);
    void SetfragmentShaderBarycentric(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV instance = {};

};

/** ## END VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV ## **/

/** ## BEGIN VkPhysicalDeviceComputeShaderDerivativesFeaturesNV ## **/

class _VkPhysicalDeviceComputeShaderDerivativesFeaturesNV : public Napi::ObjectWrap<_VkPhysicalDeviceComputeShaderDerivativesFeaturesNV> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceComputeShaderDerivativesFeaturesNV(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceComputeShaderDerivativesFeaturesNV();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetcomputeDerivativeGroupQuads(const Napi::CallbackInfo &info);
    void SetcomputeDerivativeGroupQuads(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetcomputeDerivativeGroupLinear(const Napi::CallbackInfo &info);
    void SetcomputeDerivativeGroupLinear(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceComputeShaderDerivativesFeaturesNV instance = {};

};

/** ## END VkPhysicalDeviceComputeShaderDerivativesFeaturesNV ## **/

/** ## BEGIN VkPhysicalDeviceCornerSampledImageFeaturesNV ## **/

class _VkPhysicalDeviceCornerSampledImageFeaturesNV : public Napi::ObjectWrap<_VkPhysicalDeviceCornerSampledImageFeaturesNV> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceCornerSampledImageFeaturesNV(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceCornerSampledImageFeaturesNV();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetcornerSampledImage(const Napi::CallbackInfo &info);
    void SetcornerSampledImage(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceCornerSampledImageFeaturesNV instance = {};

};

/** ## END VkPhysicalDeviceCornerSampledImageFeaturesNV ## **/

/** ## BEGIN VkPipelineViewportExclusiveScissorStateCreateInfoNV ## **/

class _VkPipelineViewportExclusiveScissorStateCreateInfoNV : public Napi::ObjectWrap<_VkPipelineViewportExclusiveScissorStateCreateInfoNV> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPipelineViewportExclusiveScissorStateCreateInfoNV(const Napi::CallbackInfo &info);
    ~_VkPipelineViewportExclusiveScissorStateCreateInfoNV();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetexclusiveScissorCount(const Napi::CallbackInfo &info);
    void SetexclusiveScissorCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkRect2D>* vpExclusiveScissors;
    Napi::ObjectReference pExclusiveScissors;
    Napi::Value GetpExclusiveScissors(const Napi::CallbackInfo &info);
    void SetpExclusiveScissors(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPipelineViewportExclusiveScissorStateCreateInfoNV instance = {};

};

/** ## END VkPipelineViewportExclusiveScissorStateCreateInfoNV ## **/

/** ## BEGIN VkPhysicalDeviceExclusiveScissorFeaturesNV ## **/

class _VkPhysicalDeviceExclusiveScissorFeaturesNV : public Napi::ObjectWrap<_VkPhysicalDeviceExclusiveScissorFeaturesNV> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceExclusiveScissorFeaturesNV(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceExclusiveScissorFeaturesNV();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetexclusiveScissor(const Napi::CallbackInfo &info);
    void SetexclusiveScissor(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceExclusiveScissorFeaturesNV instance = {};

};

/** ## END VkPhysicalDeviceExclusiveScissorFeaturesNV ## **/

/** ## BEGIN VkPipelineRepresentativeFragmentTestStateCreateInfoNV ## **/

class _VkPipelineRepresentativeFragmentTestStateCreateInfoNV : public Napi::ObjectWrap<_VkPipelineRepresentativeFragmentTestStateCreateInfoNV> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPipelineRepresentativeFragmentTestStateCreateInfoNV(const Napi::CallbackInfo &info);
    ~_VkPipelineRepresentativeFragmentTestStateCreateInfoNV();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetrepresentativeFragmentTestEnable(const Napi::CallbackInfo &info);
    void SetrepresentativeFragmentTestEnable(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPipelineRepresentativeFragmentTestStateCreateInfoNV instance = {};

};

/** ## END VkPipelineRepresentativeFragmentTestStateCreateInfoNV ## **/

/** ## BEGIN VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV ## **/

class _VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV : public Napi::ObjectWrap<_VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetrepresentativeFragmentTest(const Napi::CallbackInfo &info);
    void SetrepresentativeFragmentTest(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV instance = {};

};

/** ## END VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV ## **/

/** ## BEGIN VkPipelineRasterizationStateStreamCreateInfoEXT ## **/

class _VkPipelineRasterizationStateStreamCreateInfoEXT : public Napi::ObjectWrap<_VkPipelineRasterizationStateStreamCreateInfoEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPipelineRasterizationStateStreamCreateInfoEXT(const Napi::CallbackInfo &info);
    ~_VkPipelineRasterizationStateStreamCreateInfoEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetrasterizationStream(const Napi::CallbackInfo &info);
    void SetrasterizationStream(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPipelineRasterizationStateStreamCreateInfoEXT instance = {};

};

/** ## END VkPipelineRasterizationStateStreamCreateInfoEXT ## **/

/** ## BEGIN VkPhysicalDeviceTransformFeedbackPropertiesEXT ## **/

class _VkPhysicalDeviceTransformFeedbackPropertiesEXT : public Napi::ObjectWrap<_VkPhysicalDeviceTransformFeedbackPropertiesEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceTransformFeedbackPropertiesEXT(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceTransformFeedbackPropertiesEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmaxTransformFeedbackStreams(const Napi::CallbackInfo &info);
    Napi::Value GetmaxTransformFeedbackBuffers(const Napi::CallbackInfo &info);
    Napi::Value GetmaxTransformFeedbackBufferSize(const Napi::CallbackInfo &info);
    Napi::Value GetmaxTransformFeedbackStreamDataSize(const Napi::CallbackInfo &info);
    Napi::Value GetmaxTransformFeedbackBufferDataSize(const Napi::CallbackInfo &info);
    Napi::Value GetmaxTransformFeedbackBufferDataStride(const Napi::CallbackInfo &info);
    Napi::Value GettransformFeedbackQueries(const Napi::CallbackInfo &info);
    Napi::Value GettransformFeedbackStreamsLinesTriangles(const Napi::CallbackInfo &info);
    Napi::Value GettransformFeedbackRasterizationStreamSelect(const Napi::CallbackInfo &info);
    Napi::Value GettransformFeedbackDraw(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceTransformFeedbackPropertiesEXT instance = {};

};

/** ## END VkPhysicalDeviceTransformFeedbackPropertiesEXT ## **/

/** ## BEGIN VkPhysicalDeviceTransformFeedbackFeaturesEXT ## **/

class _VkPhysicalDeviceTransformFeedbackFeaturesEXT : public Napi::ObjectWrap<_VkPhysicalDeviceTransformFeedbackFeaturesEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceTransformFeedbackFeaturesEXT(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceTransformFeedbackFeaturesEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GettransformFeedback(const Napi::CallbackInfo &info);
    void SettransformFeedback(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetgeometryStreams(const Napi::CallbackInfo &info);
    void SetgeometryStreams(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceTransformFeedbackFeaturesEXT instance = {};

};

/** ## END VkPhysicalDeviceTransformFeedbackFeaturesEXT ## **/

/** ## BEGIN VkPhysicalDeviceASTCDecodeFeaturesEXT ## **/

class _VkPhysicalDeviceASTCDecodeFeaturesEXT : public Napi::ObjectWrap<_VkPhysicalDeviceASTCDecodeFeaturesEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceASTCDecodeFeaturesEXT(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceASTCDecodeFeaturesEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdecodeModeSharedExponent(const Napi::CallbackInfo &info);
    void SetdecodeModeSharedExponent(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceASTCDecodeFeaturesEXT instance = {};

};

/** ## END VkPhysicalDeviceASTCDecodeFeaturesEXT ## **/

/** ## BEGIN VkImageViewASTCDecodeModeEXT ## **/

class _VkImageViewASTCDecodeModeEXT : public Napi::ObjectWrap<_VkImageViewASTCDecodeModeEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkImageViewASTCDecodeModeEXT(const Napi::CallbackInfo &info);
    ~_VkImageViewASTCDecodeModeEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdecodeMode(const Napi::CallbackInfo &info);
    void SetdecodeMode(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkImageViewASTCDecodeModeEXT instance = {};

};

/** ## END VkImageViewASTCDecodeModeEXT ## **/

/** ## BEGIN VkSubpassDescriptionDepthStencilResolveKHR ## **/

class _VkSubpassDescriptionDepthStencilResolveKHR : public Napi::ObjectWrap<_VkSubpassDescriptionDepthStencilResolveKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkSubpassDescriptionDepthStencilResolveKHR(const Napi::CallbackInfo &info);
    ~_VkSubpassDescriptionDepthStencilResolveKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdepthResolveMode(const Napi::CallbackInfo &info);
    void SetdepthResolveMode(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetstencilResolveMode(const Napi::CallbackInfo &info);
    void SetstencilResolveMode(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pDepthStencilResolveAttachment;
    Napi::Value GetpDepthStencilResolveAttachment(const Napi::CallbackInfo &info);
    void SetpDepthStencilResolveAttachment(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkSubpassDescriptionDepthStencilResolveKHR instance = {};

};

/** ## END VkSubpassDescriptionDepthStencilResolveKHR ## **/

/** ## BEGIN VkPhysicalDeviceDepthStencilResolvePropertiesKHR ## **/

class _VkPhysicalDeviceDepthStencilResolvePropertiesKHR : public Napi::ObjectWrap<_VkPhysicalDeviceDepthStencilResolvePropertiesKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceDepthStencilResolvePropertiesKHR(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceDepthStencilResolvePropertiesKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetsupportedDepthResolveModes(const Napi::CallbackInfo &info);
    Napi::Value GetsupportedStencilResolveModes(const Napi::CallbackInfo &info);
    Napi::Value GetindependentResolveNone(const Napi::CallbackInfo &info);
    Napi::Value GetindependentResolve(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceDepthStencilResolvePropertiesKHR instance = {};

};

/** ## END VkPhysicalDeviceDepthStencilResolvePropertiesKHR ## **/

/** ## BEGIN VkCheckpointDataNV ## **/

class _VkCheckpointDataNV : public Napi::ObjectWrap<_VkCheckpointDataNV> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkCheckpointDataNV(const Napi::CallbackInfo &info);
    ~_VkCheckpointDataNV();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getstage(const Napi::CallbackInfo &info);
    Napi::ObjectReference pCheckpointMarker;
    Napi::Value GetpCheckpointMarker(const Napi::CallbackInfo &info);
    void SetpCheckpointMarker(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkCheckpointDataNV instance = {};

};

/** ## END VkCheckpointDataNV ## **/

/** ## BEGIN VkQueueFamilyCheckpointPropertiesNV ## **/

class _VkQueueFamilyCheckpointPropertiesNV : public Napi::ObjectWrap<_VkQueueFamilyCheckpointPropertiesNV> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkQueueFamilyCheckpointPropertiesNV(const Napi::CallbackInfo &info);
    ~_VkQueueFamilyCheckpointPropertiesNV();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetcheckpointExecutionStageMask(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkQueueFamilyCheckpointPropertiesNV instance = {};

};

/** ## END VkQueueFamilyCheckpointPropertiesNV ## **/

/** ## BEGIN VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT ## **/

class _VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT : public Napi::ObjectWrap<_VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetvertexAttributeInstanceRateDivisor(const Napi::CallbackInfo &info);
    void SetvertexAttributeInstanceRateDivisor(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetvertexAttributeInstanceRateZeroDivisor(const Napi::CallbackInfo &info);
    void SetvertexAttributeInstanceRateZeroDivisor(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT instance = {};

};

/** ## END VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT ## **/

/** ## BEGIN VkPhysicalDeviceShaderAtomicInt64FeaturesKHR ## **/

class _VkPhysicalDeviceShaderAtomicInt64FeaturesKHR : public Napi::ObjectWrap<_VkPhysicalDeviceShaderAtomicInt64FeaturesKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceShaderAtomicInt64FeaturesKHR(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceShaderAtomicInt64FeaturesKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetshaderBufferInt64Atomics(const Napi::CallbackInfo &info);
    void SetshaderBufferInt64Atomics(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetshaderSharedInt64Atomics(const Napi::CallbackInfo &info);
    void SetshaderSharedInt64Atomics(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceShaderAtomicInt64FeaturesKHR instance = {};

};

/** ## END VkPhysicalDeviceShaderAtomicInt64FeaturesKHR ## **/

/** ## BEGIN VkPhysicalDeviceVulkanMemoryModelFeaturesKHR ## **/

class _VkPhysicalDeviceVulkanMemoryModelFeaturesKHR : public Napi::ObjectWrap<_VkPhysicalDeviceVulkanMemoryModelFeaturesKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceVulkanMemoryModelFeaturesKHR(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceVulkanMemoryModelFeaturesKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetvulkanMemoryModel(const Napi::CallbackInfo &info);
    void SetvulkanMemoryModel(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetvulkanMemoryModelDeviceScope(const Napi::CallbackInfo &info);
    void SetvulkanMemoryModelDeviceScope(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceVulkanMemoryModelFeaturesKHR instance = {};

};

/** ## END VkPhysicalDeviceVulkanMemoryModelFeaturesKHR ## **/

/** ## BEGIN VkPhysicalDeviceConditionalRenderingFeaturesEXT ## **/

class _VkPhysicalDeviceConditionalRenderingFeaturesEXT : public Napi::ObjectWrap<_VkPhysicalDeviceConditionalRenderingFeaturesEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceConditionalRenderingFeaturesEXT(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceConditionalRenderingFeaturesEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetconditionalRendering(const Napi::CallbackInfo &info);
    void SetconditionalRendering(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetinheritedConditionalRendering(const Napi::CallbackInfo &info);
    void SetinheritedConditionalRendering(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceConditionalRenderingFeaturesEXT instance = {};

};

/** ## END VkPhysicalDeviceConditionalRenderingFeaturesEXT ## **/

/** ## BEGIN VkPhysicalDevice8BitStorageFeaturesKHR ## **/

class _VkPhysicalDevice8BitStorageFeaturesKHR : public Napi::ObjectWrap<_VkPhysicalDevice8BitStorageFeaturesKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDevice8BitStorageFeaturesKHR(const Napi::CallbackInfo &info);
    ~_VkPhysicalDevice8BitStorageFeaturesKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetstorageBuffer8BitAccess(const Napi::CallbackInfo &info);
    void SetstorageBuffer8BitAccess(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetuniformAndStorageBuffer8BitAccess(const Napi::CallbackInfo &info);
    void SetuniformAndStorageBuffer8BitAccess(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetstoragePushConstant8(const Napi::CallbackInfo &info);
    void SetstoragePushConstant8(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDevice8BitStorageFeaturesKHR instance = {};

};

/** ## END VkPhysicalDevice8BitStorageFeaturesKHR ## **/

/** ## BEGIN VkCommandBufferInheritanceConditionalRenderingInfoEXT ## **/

class _VkCommandBufferInheritanceConditionalRenderingInfoEXT : public Napi::ObjectWrap<_VkCommandBufferInheritanceConditionalRenderingInfoEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkCommandBufferInheritanceConditionalRenderingInfoEXT(const Napi::CallbackInfo &info);
    ~_VkCommandBufferInheritanceConditionalRenderingInfoEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetconditionalRenderingEnable(const Napi::CallbackInfo &info);
    void SetconditionalRenderingEnable(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkCommandBufferInheritanceConditionalRenderingInfoEXT instance = {};

};

/** ## END VkCommandBufferInheritanceConditionalRenderingInfoEXT ## **/

/** ## BEGIN VkPhysicalDevicePCIBusInfoPropertiesEXT ## **/

class _VkPhysicalDevicePCIBusInfoPropertiesEXT : public Napi::ObjectWrap<_VkPhysicalDevicePCIBusInfoPropertiesEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDevicePCIBusInfoPropertiesEXT(const Napi::CallbackInfo &info);
    ~_VkPhysicalDevicePCIBusInfoPropertiesEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetpciDomain(const Napi::CallbackInfo &info);
    Napi::Value GetpciBus(const Napi::CallbackInfo &info);
    Napi::Value GetpciDevice(const Napi::CallbackInfo &info);
    Napi::Value GetpciFunction(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDevicePCIBusInfoPropertiesEXT instance = {};

};

/** ## END VkPhysicalDevicePCIBusInfoPropertiesEXT ## **/

/** ## BEGIN VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT ## **/

class _VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT : public Napi::ObjectWrap<_VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmaxVertexAttribDivisor(const Napi::CallbackInfo &info);
    void SetmaxVertexAttribDivisor(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT instance = {};

};

/** ## END VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT ## **/

/** ## BEGIN VkPipelineVertexInputDivisorStateCreateInfoEXT ## **/

class _VkPipelineVertexInputDivisorStateCreateInfoEXT : public Napi::ObjectWrap<_VkPipelineVertexInputDivisorStateCreateInfoEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPipelineVertexInputDivisorStateCreateInfoEXT(const Napi::CallbackInfo &info);
    ~_VkPipelineVertexInputDivisorStateCreateInfoEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetvertexBindingDivisorCount(const Napi::CallbackInfo &info);
    void SetvertexBindingDivisorCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkVertexInputBindingDivisorDescriptionEXT>* vpVertexBindingDivisors;
    Napi::ObjectReference pVertexBindingDivisors;
    Napi::Value GetpVertexBindingDivisors(const Napi::CallbackInfo &info);
    void SetpVertexBindingDivisors(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPipelineVertexInputDivisorStateCreateInfoEXT instance = {};

};

/** ## END VkPipelineVertexInputDivisorStateCreateInfoEXT ## **/

/** ## BEGIN VkVertexInputBindingDivisorDescriptionEXT ## **/

class _VkVertexInputBindingDivisorDescriptionEXT : public Napi::ObjectWrap<_VkVertexInputBindingDivisorDescriptionEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkVertexInputBindingDivisorDescriptionEXT(const Napi::CallbackInfo &info);
    ~_VkVertexInputBindingDivisorDescriptionEXT();

    // #accessors
    Napi::Value Getbinding(const Napi::CallbackInfo &info);
    void Setbinding(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getdivisor(const Napi::CallbackInfo &info);
    void Setdivisor(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkVertexInputBindingDivisorDescriptionEXT instance = {};

};

/** ## END VkVertexInputBindingDivisorDescriptionEXT ## **/

/** ## BEGIN VkSubpassEndInfoKHR ## **/

class _VkSubpassEndInfoKHR : public Napi::ObjectWrap<_VkSubpassEndInfoKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkSubpassEndInfoKHR(const Napi::CallbackInfo &info);
    ~_VkSubpassEndInfoKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkSubpassEndInfoKHR instance = {};

};

/** ## END VkSubpassEndInfoKHR ## **/

/** ## BEGIN VkSubpassBeginInfoKHR ## **/

class _VkSubpassBeginInfoKHR : public Napi::ObjectWrap<_VkSubpassBeginInfoKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkSubpassBeginInfoKHR(const Napi::CallbackInfo &info);
    ~_VkSubpassBeginInfoKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getcontents(const Napi::CallbackInfo &info);
    void Setcontents(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkSubpassBeginInfoKHR instance = {};

};

/** ## END VkSubpassBeginInfoKHR ## **/

/** ## BEGIN VkRenderPassCreateInfo2KHR ## **/

class _VkRenderPassCreateInfo2KHR : public Napi::ObjectWrap<_VkRenderPassCreateInfo2KHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkRenderPassCreateInfo2KHR(const Napi::CallbackInfo &info);
    ~_VkRenderPassCreateInfo2KHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetattachmentCount(const Napi::CallbackInfo &info);
    void SetattachmentCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkAttachmentDescription2KHR>* vpAttachments;
    Napi::ObjectReference pAttachments;
    Napi::Value GetpAttachments(const Napi::CallbackInfo &info);
    void SetpAttachments(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetsubpassCount(const Napi::CallbackInfo &info);
    void SetsubpassCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkSubpassDescription2KHR>* vpSubpasses;
    Napi::ObjectReference pSubpasses;
    Napi::Value GetpSubpasses(const Napi::CallbackInfo &info);
    void SetpSubpasses(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdependencyCount(const Napi::CallbackInfo &info);
    void SetdependencyCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkSubpassDependency2KHR>* vpDependencies;
    Napi::ObjectReference pDependencies;
    Napi::Value GetpDependencies(const Napi::CallbackInfo &info);
    void SetpDependencies(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetcorrelatedViewMaskCount(const Napi::CallbackInfo &info);
    void SetcorrelatedViewMaskCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pCorrelatedViewMasks;
    Napi::Value GetpCorrelatedViewMasks(const Napi::CallbackInfo &info);
    void SetpCorrelatedViewMasks(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkRenderPassCreateInfo2KHR instance = {};

};

/** ## END VkRenderPassCreateInfo2KHR ## **/

/** ## BEGIN VkSubpassDependency2KHR ## **/

class _VkSubpassDependency2KHR : public Napi::ObjectWrap<_VkSubpassDependency2KHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkSubpassDependency2KHR(const Napi::CallbackInfo &info);
    ~_VkSubpassDependency2KHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetsrcSubpass(const Napi::CallbackInfo &info);
    void SetsrcSubpass(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdstSubpass(const Napi::CallbackInfo &info);
    void SetdstSubpass(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetsrcStageMask(const Napi::CallbackInfo &info);
    void SetsrcStageMask(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdstStageMask(const Napi::CallbackInfo &info);
    void SetdstStageMask(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetsrcAccessMask(const Napi::CallbackInfo &info);
    void SetsrcAccessMask(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdstAccessMask(const Napi::CallbackInfo &info);
    void SetdstAccessMask(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdependencyFlags(const Napi::CallbackInfo &info);
    void SetdependencyFlags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetviewOffset(const Napi::CallbackInfo &info);
    void SetviewOffset(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkSubpassDependency2KHR instance = {};

};

/** ## END VkSubpassDependency2KHR ## **/

/** ## BEGIN VkSubpassDescription2KHR ## **/

class _VkSubpassDescription2KHR : public Napi::ObjectWrap<_VkSubpassDescription2KHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkSubpassDescription2KHR(const Napi::CallbackInfo &info);
    ~_VkSubpassDescription2KHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetpipelineBindPoint(const Napi::CallbackInfo &info);
    void SetpipelineBindPoint(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetviewMask(const Napi::CallbackInfo &info);
    void SetviewMask(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetinputAttachmentCount(const Napi::CallbackInfo &info);
    void SetinputAttachmentCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkAttachmentReference2KHR>* vpInputAttachments;
    Napi::ObjectReference pInputAttachments;
    Napi::Value GetpInputAttachments(const Napi::CallbackInfo &info);
    void SetpInputAttachments(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetcolorAttachmentCount(const Napi::CallbackInfo &info);
    void SetcolorAttachmentCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkAttachmentReference2KHR>* vpColorAttachments;
    Napi::ObjectReference pColorAttachments;
    Napi::Value GetpColorAttachments(const Napi::CallbackInfo &info);
    void SetpColorAttachments(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkAttachmentReference2KHR>* vpResolveAttachments;
    Napi::ObjectReference pResolveAttachments;
    Napi::Value GetpResolveAttachments(const Napi::CallbackInfo &info);
    void SetpResolveAttachments(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pDepthStencilAttachment;
    Napi::Value GetpDepthStencilAttachment(const Napi::CallbackInfo &info);
    void SetpDepthStencilAttachment(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetpreserveAttachmentCount(const Napi::CallbackInfo &info);
    void SetpreserveAttachmentCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pPreserveAttachments;
    Napi::Value GetpPreserveAttachments(const Napi::CallbackInfo &info);
    void SetpPreserveAttachments(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkSubpassDescription2KHR instance = {};

};

/** ## END VkSubpassDescription2KHR ## **/

/** ## BEGIN VkAttachmentReference2KHR ## **/

class _VkAttachmentReference2KHR : public Napi::ObjectWrap<_VkAttachmentReference2KHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkAttachmentReference2KHR(const Napi::CallbackInfo &info);
    ~_VkAttachmentReference2KHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getattachment(const Napi::CallbackInfo &info);
    void Setattachment(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getlayout(const Napi::CallbackInfo &info);
    void Setlayout(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetaspectMask(const Napi::CallbackInfo &info);
    void SetaspectMask(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkAttachmentReference2KHR instance = {};

};

/** ## END VkAttachmentReference2KHR ## **/

/** ## BEGIN VkAttachmentDescription2KHR ## **/

class _VkAttachmentDescription2KHR : public Napi::ObjectWrap<_VkAttachmentDescription2KHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkAttachmentDescription2KHR(const Napi::CallbackInfo &info);
    ~_VkAttachmentDescription2KHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getformat(const Napi::CallbackInfo &info);
    void Setformat(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getsamples(const Napi::CallbackInfo &info);
    void Setsamples(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetloadOp(const Napi::CallbackInfo &info);
    void SetloadOp(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetstoreOp(const Napi::CallbackInfo &info);
    void SetstoreOp(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetstencilLoadOp(const Napi::CallbackInfo &info);
    void SetstencilLoadOp(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetstencilStoreOp(const Napi::CallbackInfo &info);
    void SetstencilStoreOp(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetinitialLayout(const Napi::CallbackInfo &info);
    void SetinitialLayout(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetfinalLayout(const Napi::CallbackInfo &info);
    void SetfinalLayout(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkAttachmentDescription2KHR instance = {};

};

/** ## END VkAttachmentDescription2KHR ## **/

/** ## BEGIN VkDescriptorSetVariableDescriptorCountLayoutSupportEXT ## **/

class _VkDescriptorSetVariableDescriptorCountLayoutSupportEXT : public Napi::ObjectWrap<_VkDescriptorSetVariableDescriptorCountLayoutSupportEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDescriptorSetVariableDescriptorCountLayoutSupportEXT(const Napi::CallbackInfo &info);
    ~_VkDescriptorSetVariableDescriptorCountLayoutSupportEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmaxVariableDescriptorCount(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDescriptorSetVariableDescriptorCountLayoutSupportEXT instance = {};

};

/** ## END VkDescriptorSetVariableDescriptorCountLayoutSupportEXT ## **/

/** ## BEGIN VkDescriptorSetVariableDescriptorCountAllocateInfoEXT ## **/

class _VkDescriptorSetVariableDescriptorCountAllocateInfoEXT : public Napi::ObjectWrap<_VkDescriptorSetVariableDescriptorCountAllocateInfoEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDescriptorSetVariableDescriptorCountAllocateInfoEXT(const Napi::CallbackInfo &info);
    ~_VkDescriptorSetVariableDescriptorCountAllocateInfoEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdescriptorSetCount(const Napi::CallbackInfo &info);
    void SetdescriptorSetCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pDescriptorCounts;
    Napi::Value GetpDescriptorCounts(const Napi::CallbackInfo &info);
    void SetpDescriptorCounts(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDescriptorSetVariableDescriptorCountAllocateInfoEXT instance = {};

};

/** ## END VkDescriptorSetVariableDescriptorCountAllocateInfoEXT ## **/

/** ## BEGIN VkDescriptorSetLayoutBindingFlagsCreateInfoEXT ## **/

class _VkDescriptorSetLayoutBindingFlagsCreateInfoEXT : public Napi::ObjectWrap<_VkDescriptorSetLayoutBindingFlagsCreateInfoEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDescriptorSetLayoutBindingFlagsCreateInfoEXT(const Napi::CallbackInfo &info);
    ~_VkDescriptorSetLayoutBindingFlagsCreateInfoEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetbindingCount(const Napi::CallbackInfo &info);
    void SetbindingCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pBindingFlags;
    Napi::Value GetpBindingFlags(const Napi::CallbackInfo &info);
    void SetpBindingFlags(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDescriptorSetLayoutBindingFlagsCreateInfoEXT instance = {};

};

/** ## END VkDescriptorSetLayoutBindingFlagsCreateInfoEXT ## **/

/** ## BEGIN VkPhysicalDeviceDescriptorIndexingPropertiesEXT ## **/

class _VkPhysicalDeviceDescriptorIndexingPropertiesEXT : public Napi::ObjectWrap<_VkPhysicalDeviceDescriptorIndexingPropertiesEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceDescriptorIndexingPropertiesEXT(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceDescriptorIndexingPropertiesEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmaxUpdateAfterBindDescriptorsInAllPools(const Napi::CallbackInfo &info);
    Napi::Value GetshaderUniformBufferArrayNonUniformIndexingNative(const Napi::CallbackInfo &info);
    Napi::Value GetshaderSampledImageArrayNonUniformIndexingNative(const Napi::CallbackInfo &info);
    Napi::Value GetshaderStorageBufferArrayNonUniformIndexingNative(const Napi::CallbackInfo &info);
    Napi::Value GetshaderStorageImageArrayNonUniformIndexingNative(const Napi::CallbackInfo &info);
    Napi::Value GetshaderInputAttachmentArrayNonUniformIndexingNative(const Napi::CallbackInfo &info);
    Napi::Value GetrobustBufferAccessUpdateAfterBind(const Napi::CallbackInfo &info);
    Napi::Value GetquadDivergentImplicitLod(const Napi::CallbackInfo &info);
    Napi::Value GetmaxPerStageDescriptorUpdateAfterBindSamplers(const Napi::CallbackInfo &info);
    Napi::Value GetmaxPerStageDescriptorUpdateAfterBindUniformBuffers(const Napi::CallbackInfo &info);
    Napi::Value GetmaxPerStageDescriptorUpdateAfterBindStorageBuffers(const Napi::CallbackInfo &info);
    Napi::Value GetmaxPerStageDescriptorUpdateAfterBindSampledImages(const Napi::CallbackInfo &info);
    Napi::Value GetmaxPerStageDescriptorUpdateAfterBindStorageImages(const Napi::CallbackInfo &info);
    Napi::Value GetmaxPerStageDescriptorUpdateAfterBindInputAttachments(const Napi::CallbackInfo &info);
    Napi::Value GetmaxPerStageUpdateAfterBindResources(const Napi::CallbackInfo &info);
    Napi::Value GetmaxDescriptorSetUpdateAfterBindSamplers(const Napi::CallbackInfo &info);
    Napi::Value GetmaxDescriptorSetUpdateAfterBindUniformBuffers(const Napi::CallbackInfo &info);
    Napi::Value GetmaxDescriptorSetUpdateAfterBindUniformBuffersDynamic(const Napi::CallbackInfo &info);
    Napi::Value GetmaxDescriptorSetUpdateAfterBindStorageBuffers(const Napi::CallbackInfo &info);
    Napi::Value GetmaxDescriptorSetUpdateAfterBindStorageBuffersDynamic(const Napi::CallbackInfo &info);
    Napi::Value GetmaxDescriptorSetUpdateAfterBindSampledImages(const Napi::CallbackInfo &info);
    Napi::Value GetmaxDescriptorSetUpdateAfterBindStorageImages(const Napi::CallbackInfo &info);
    Napi::Value GetmaxDescriptorSetUpdateAfterBindInputAttachments(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceDescriptorIndexingPropertiesEXT instance = {};

};

/** ## END VkPhysicalDeviceDescriptorIndexingPropertiesEXT ## **/

/** ## BEGIN VkPhysicalDeviceDescriptorIndexingFeaturesEXT ## **/

class _VkPhysicalDeviceDescriptorIndexingFeaturesEXT : public Napi::ObjectWrap<_VkPhysicalDeviceDescriptorIndexingFeaturesEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceDescriptorIndexingFeaturesEXT(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceDescriptorIndexingFeaturesEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetshaderInputAttachmentArrayDynamicIndexing(const Napi::CallbackInfo &info);
    void SetshaderInputAttachmentArrayDynamicIndexing(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetshaderUniformTexelBufferArrayDynamicIndexing(const Napi::CallbackInfo &info);
    void SetshaderUniformTexelBufferArrayDynamicIndexing(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetshaderStorageTexelBufferArrayDynamicIndexing(const Napi::CallbackInfo &info);
    void SetshaderStorageTexelBufferArrayDynamicIndexing(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetshaderUniformBufferArrayNonUniformIndexing(const Napi::CallbackInfo &info);
    void SetshaderUniformBufferArrayNonUniformIndexing(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetshaderSampledImageArrayNonUniformIndexing(const Napi::CallbackInfo &info);
    void SetshaderSampledImageArrayNonUniformIndexing(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetshaderStorageBufferArrayNonUniformIndexing(const Napi::CallbackInfo &info);
    void SetshaderStorageBufferArrayNonUniformIndexing(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetshaderStorageImageArrayNonUniformIndexing(const Napi::CallbackInfo &info);
    void SetshaderStorageImageArrayNonUniformIndexing(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetshaderInputAttachmentArrayNonUniformIndexing(const Napi::CallbackInfo &info);
    void SetshaderInputAttachmentArrayNonUniformIndexing(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetshaderUniformTexelBufferArrayNonUniformIndexing(const Napi::CallbackInfo &info);
    void SetshaderUniformTexelBufferArrayNonUniformIndexing(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetshaderStorageTexelBufferArrayNonUniformIndexing(const Napi::CallbackInfo &info);
    void SetshaderStorageTexelBufferArrayNonUniformIndexing(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdescriptorBindingUniformBufferUpdateAfterBind(const Napi::CallbackInfo &info);
    void SetdescriptorBindingUniformBufferUpdateAfterBind(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdescriptorBindingSampledImageUpdateAfterBind(const Napi::CallbackInfo &info);
    void SetdescriptorBindingSampledImageUpdateAfterBind(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdescriptorBindingStorageImageUpdateAfterBind(const Napi::CallbackInfo &info);
    void SetdescriptorBindingStorageImageUpdateAfterBind(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdescriptorBindingStorageBufferUpdateAfterBind(const Napi::CallbackInfo &info);
    void SetdescriptorBindingStorageBufferUpdateAfterBind(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdescriptorBindingUniformTexelBufferUpdateAfterBind(const Napi::CallbackInfo &info);
    void SetdescriptorBindingUniformTexelBufferUpdateAfterBind(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdescriptorBindingStorageTexelBufferUpdateAfterBind(const Napi::CallbackInfo &info);
    void SetdescriptorBindingStorageTexelBufferUpdateAfterBind(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdescriptorBindingUpdateUnusedWhilePending(const Napi::CallbackInfo &info);
    void SetdescriptorBindingUpdateUnusedWhilePending(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdescriptorBindingPartiallyBound(const Napi::CallbackInfo &info);
    void SetdescriptorBindingPartiallyBound(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdescriptorBindingVariableDescriptorCount(const Napi::CallbackInfo &info);
    void SetdescriptorBindingVariableDescriptorCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetruntimeDescriptorArray(const Napi::CallbackInfo &info);
    void SetruntimeDescriptorArray(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceDescriptorIndexingFeaturesEXT instance = {};

};

/** ## END VkPhysicalDeviceDescriptorIndexingFeaturesEXT ## **/

/** ## BEGIN VkPipelineRasterizationConservativeStateCreateInfoEXT ## **/

class _VkPipelineRasterizationConservativeStateCreateInfoEXT : public Napi::ObjectWrap<_VkPipelineRasterizationConservativeStateCreateInfoEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPipelineRasterizationConservativeStateCreateInfoEXT(const Napi::CallbackInfo &info);
    ~_VkPipelineRasterizationConservativeStateCreateInfoEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetconservativeRasterizationMode(const Napi::CallbackInfo &info);
    void SetconservativeRasterizationMode(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetextraPrimitiveOverestimationSize(const Napi::CallbackInfo &info);
    void SetextraPrimitiveOverestimationSize(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPipelineRasterizationConservativeStateCreateInfoEXT instance = {};

};

/** ## END VkPipelineRasterizationConservativeStateCreateInfoEXT ## **/

/** ## BEGIN VkPhysicalDeviceShaderCorePropertiesAMD ## **/

class _VkPhysicalDeviceShaderCorePropertiesAMD : public Napi::ObjectWrap<_VkPhysicalDeviceShaderCorePropertiesAMD> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceShaderCorePropertiesAMD(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceShaderCorePropertiesAMD();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetshaderEngineCount(const Napi::CallbackInfo &info);
    Napi::Value GetshaderArraysPerEngineCount(const Napi::CallbackInfo &info);
    Napi::Value GetcomputeUnitsPerShaderArray(const Napi::CallbackInfo &info);
    Napi::Value GetsimdPerComputeUnit(const Napi::CallbackInfo &info);
    Napi::Value GetwavefrontsPerSimd(const Napi::CallbackInfo &info);
    Napi::Value GetwavefrontSize(const Napi::CallbackInfo &info);
    Napi::Value GetsgprsPerSimd(const Napi::CallbackInfo &info);
    Napi::Value GetminSgprAllocation(const Napi::CallbackInfo &info);
    Napi::Value GetmaxSgprAllocation(const Napi::CallbackInfo &info);
    Napi::Value GetsgprAllocationGranularity(const Napi::CallbackInfo &info);
    Napi::Value GetvgprsPerSimd(const Napi::CallbackInfo &info);
    Napi::Value GetminVgprAllocation(const Napi::CallbackInfo &info);
    Napi::Value GetmaxVgprAllocation(const Napi::CallbackInfo &info);
    Napi::Value GetvgprAllocationGranularity(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceShaderCorePropertiesAMD instance = {};

};

/** ## END VkPhysicalDeviceShaderCorePropertiesAMD ## **/

/** ## BEGIN VkCalibratedTimestampInfoEXT ## **/

class _VkCalibratedTimestampInfoEXT : public Napi::ObjectWrap<_VkCalibratedTimestampInfoEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkCalibratedTimestampInfoEXT(const Napi::CallbackInfo &info);
    ~_VkCalibratedTimestampInfoEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GettimeDomain(const Napi::CallbackInfo &info);
    void SettimeDomain(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkCalibratedTimestampInfoEXT instance = {};

};

/** ## END VkCalibratedTimestampInfoEXT ## **/

/** ## BEGIN VkPhysicalDeviceConservativeRasterizationPropertiesEXT ## **/

class _VkPhysicalDeviceConservativeRasterizationPropertiesEXT : public Napi::ObjectWrap<_VkPhysicalDeviceConservativeRasterizationPropertiesEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceConservativeRasterizationPropertiesEXT(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceConservativeRasterizationPropertiesEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetprimitiveOverestimationSize(const Napi::CallbackInfo &info);
    void SetprimitiveOverestimationSize(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmaxExtraPrimitiveOverestimationSize(const Napi::CallbackInfo &info);
    void SetmaxExtraPrimitiveOverestimationSize(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetextraPrimitiveOverestimationSizeGranularity(const Napi::CallbackInfo &info);
    void SetextraPrimitiveOverestimationSizeGranularity(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetprimitiveUnderestimation(const Napi::CallbackInfo &info);
    void SetprimitiveUnderestimation(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetconservativePointAndLineRasterization(const Napi::CallbackInfo &info);
    void SetconservativePointAndLineRasterization(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdegenerateTrianglesRasterized(const Napi::CallbackInfo &info);
    void SetdegenerateTrianglesRasterized(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdegenerateLinesRasterized(const Napi::CallbackInfo &info);
    void SetdegenerateLinesRasterized(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetfullyCoveredFragmentShaderInputVariable(const Napi::CallbackInfo &info);
    void SetfullyCoveredFragmentShaderInputVariable(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetconservativeRasterizationPostDepthCoverage(const Napi::CallbackInfo &info);
    void SetconservativeRasterizationPostDepthCoverage(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceConservativeRasterizationPropertiesEXT instance = {};

};

/** ## END VkPhysicalDeviceConservativeRasterizationPropertiesEXT ## **/

/** ## BEGIN VkPhysicalDeviceExternalMemoryHostPropertiesEXT ## **/

class _VkPhysicalDeviceExternalMemoryHostPropertiesEXT : public Napi::ObjectWrap<_VkPhysicalDeviceExternalMemoryHostPropertiesEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceExternalMemoryHostPropertiesEXT(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceExternalMemoryHostPropertiesEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetminImportedHostPointerAlignment(const Napi::CallbackInfo &info);
    void SetminImportedHostPointerAlignment(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceExternalMemoryHostPropertiesEXT instance = {};

};

/** ## END VkPhysicalDeviceExternalMemoryHostPropertiesEXT ## **/

/** ## BEGIN VkMemoryHostPointerPropertiesEXT ## **/

class _VkMemoryHostPointerPropertiesEXT : public Napi::ObjectWrap<_VkMemoryHostPointerPropertiesEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkMemoryHostPointerPropertiesEXT(const Napi::CallbackInfo &info);
    ~_VkMemoryHostPointerPropertiesEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmemoryTypeBits(const Napi::CallbackInfo &info);
    void SetmemoryTypeBits(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkMemoryHostPointerPropertiesEXT instance = {};

};

/** ## END VkMemoryHostPointerPropertiesEXT ## **/

/** ## BEGIN VkImportMemoryHostPointerInfoEXT ## **/

class _VkImportMemoryHostPointerInfoEXT : public Napi::ObjectWrap<_VkImportMemoryHostPointerInfoEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkImportMemoryHostPointerInfoEXT(const Napi::CallbackInfo &info);
    ~_VkImportMemoryHostPointerInfoEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GethandleType(const Napi::CallbackInfo &info);
    void SethandleType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pHostPointer;
    Napi::Value GetpHostPointer(const Napi::CallbackInfo &info);
    void SetpHostPointer(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkImportMemoryHostPointerInfoEXT instance = {};

};

/** ## END VkImportMemoryHostPointerInfoEXT ## **/

/** ## BEGIN VkDebugUtilsMessengerCallbackDataEXT ## **/

class _VkDebugUtilsMessengerCallbackDataEXT : public Napi::ObjectWrap<_VkDebugUtilsMessengerCallbackDataEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDebugUtilsMessengerCallbackDataEXT(const Napi::CallbackInfo &info);
    ~_VkDebugUtilsMessengerCallbackDataEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pMessageIdName;
    Napi::Value GetpMessageIdName(const Napi::CallbackInfo &info);
    void SetpMessageIdName(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmessageIdNumber(const Napi::CallbackInfo &info);
    void SetmessageIdNumber(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pMessage;
    Napi::Value GetpMessage(const Napi::CallbackInfo &info);
    void SetpMessage(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetqueueLabelCount(const Napi::CallbackInfo &info);
    void SetqueueLabelCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkDebugUtilsLabelEXT>* vpQueueLabels;
    Napi::ObjectReference pQueueLabels;
    Napi::Value GetpQueueLabels(const Napi::CallbackInfo &info);
    void SetpQueueLabels(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetcmdBufLabelCount(const Napi::CallbackInfo &info);
    void SetcmdBufLabelCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkDebugUtilsLabelEXT>* vpCmdBufLabels;
    Napi::ObjectReference pCmdBufLabels;
    Napi::Value GetpCmdBufLabels(const Napi::CallbackInfo &info);
    void SetpCmdBufLabels(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetobjectCount(const Napi::CallbackInfo &info);
    void SetobjectCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkDebugUtilsObjectNameInfoEXT>* vpObjects;
    Napi::ObjectReference pObjects;
    Napi::Value GetpObjects(const Napi::CallbackInfo &info);
    void SetpObjects(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDebugUtilsMessengerCallbackDataEXT instance = {};

};

/** ## END VkDebugUtilsMessengerCallbackDataEXT ## **/

/** ## BEGIN VkDebugUtilsMessengerCreateInfoEXT ## **/

class _VkDebugUtilsMessengerCreateInfoEXT : public Napi::ObjectWrap<_VkDebugUtilsMessengerCreateInfoEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDebugUtilsMessengerCreateInfoEXT(const Napi::CallbackInfo &info);
    ~_VkDebugUtilsMessengerCreateInfoEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmessageSeverity(const Napi::CallbackInfo &info);
    void SetmessageSeverity(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmessageType(const Napi::CallbackInfo &info);
    void SetmessageType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pUserData;
    Napi::Value GetpUserData(const Napi::CallbackInfo &info);
    void SetpUserData(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDebugUtilsMessengerCreateInfoEXT instance = {};

};

/** ## END VkDebugUtilsMessengerCreateInfoEXT ## **/

/** ## BEGIN VkDebugUtilsLabelEXT ## **/

class _VkDebugUtilsLabelEXT : public Napi::ObjectWrap<_VkDebugUtilsLabelEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDebugUtilsLabelEXT(const Napi::CallbackInfo &info);
    ~_VkDebugUtilsLabelEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pLabelName;
    Napi::Value GetpLabelName(const Napi::CallbackInfo &info);
    void SetpLabelName(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<float>* vcolor;
    Napi::ObjectReference color;
    Napi::Value Getcolor(const Napi::CallbackInfo &info);
    void Setcolor(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDebugUtilsLabelEXT instance = {};

};

/** ## END VkDebugUtilsLabelEXT ## **/

/** ## BEGIN VkDebugUtilsObjectTagInfoEXT ## **/

class _VkDebugUtilsObjectTagInfoEXT : public Napi::ObjectWrap<_VkDebugUtilsObjectTagInfoEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDebugUtilsObjectTagInfoEXT(const Napi::CallbackInfo &info);
    ~_VkDebugUtilsObjectTagInfoEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetobjectType(const Napi::CallbackInfo &info);
    void SetobjectType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetobjectHandle(const Napi::CallbackInfo &info);
    void SetobjectHandle(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GettagName(const Napi::CallbackInfo &info);
    void SettagName(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GettagSize(const Napi::CallbackInfo &info);
    void SettagSize(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pTag;
    Napi::Value GetpTag(const Napi::CallbackInfo &info);
    void SetpTag(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDebugUtilsObjectTagInfoEXT instance = {};

};

/** ## END VkDebugUtilsObjectTagInfoEXT ## **/

/** ## BEGIN VkDebugUtilsObjectNameInfoEXT ## **/

class _VkDebugUtilsObjectNameInfoEXT : public Napi::ObjectWrap<_VkDebugUtilsObjectNameInfoEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDebugUtilsObjectNameInfoEXT(const Napi::CallbackInfo &info);
    ~_VkDebugUtilsObjectNameInfoEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetobjectType(const Napi::CallbackInfo &info);
    void SetobjectType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetobjectHandle(const Napi::CallbackInfo &info);
    void SetobjectHandle(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pObjectName;
    Napi::Value GetpObjectName(const Napi::CallbackInfo &info);
    void SetpObjectName(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDebugUtilsObjectNameInfoEXT instance = {};

};

/** ## END VkDebugUtilsObjectNameInfoEXT ## **/

/** ## BEGIN VkDeviceQueueGlobalPriorityCreateInfoEXT ## **/

class _VkDeviceQueueGlobalPriorityCreateInfoEXT : public Napi::ObjectWrap<_VkDeviceQueueGlobalPriorityCreateInfoEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDeviceQueueGlobalPriorityCreateInfoEXT(const Napi::CallbackInfo &info);
    ~_VkDeviceQueueGlobalPriorityCreateInfoEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetglobalPriority(const Napi::CallbackInfo &info);
    void SetglobalPriority(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDeviceQueueGlobalPriorityCreateInfoEXT instance = {};

};

/** ## END VkDeviceQueueGlobalPriorityCreateInfoEXT ## **/

/** ## BEGIN VkShaderStatisticsInfoAMD ## **/

class _VkShaderStatisticsInfoAMD : public Napi::ObjectWrap<_VkShaderStatisticsInfoAMD> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkShaderStatisticsInfoAMD(const Napi::CallbackInfo &info);
    ~_VkShaderStatisticsInfoAMD();

    // #accessors
    Napi::Value GetshaderStageMask(const Napi::CallbackInfo &info);
    Napi::ObjectReference resourceUsage;
    Napi::Value GetresourceUsage(const Napi::CallbackInfo &info);
    Napi::Value GetnumPhysicalVgprs(const Napi::CallbackInfo &info);
    Napi::Value GetnumPhysicalSgprs(const Napi::CallbackInfo &info);
    Napi::Value GetnumAvailableVgprs(const Napi::CallbackInfo &info);
    Napi::Value GetnumAvailableSgprs(const Napi::CallbackInfo &info);
    std::vector<uint32_t>* vcomputeWorkGroupSize;
    Napi::ObjectReference computeWorkGroupSize;
    Napi::Value GetcomputeWorkGroupSize(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkShaderStatisticsInfoAMD instance = {};

};

/** ## END VkShaderStatisticsInfoAMD ## **/

/** ## BEGIN VkShaderResourceUsageAMD ## **/

class _VkShaderResourceUsageAMD : public Napi::ObjectWrap<_VkShaderResourceUsageAMD> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkShaderResourceUsageAMD(const Napi::CallbackInfo &info);
    ~_VkShaderResourceUsageAMD();

    // #accessors
    Napi::Value GetnumUsedVgprs(const Napi::CallbackInfo &info);
    Napi::Value GetnumUsedSgprs(const Napi::CallbackInfo &info);
    Napi::Value GetldsSizePerLocalWorkGroup(const Napi::CallbackInfo &info);
    Napi::Value GetldsUsageSizeInBytes(const Napi::CallbackInfo &info);
    Napi::Value GetscratchMemUsageInBytes(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkShaderResourceUsageAMD instance = {};

};

/** ## END VkShaderResourceUsageAMD ## **/

/** ## BEGIN VkPhysicalDeviceFloatControlsPropertiesKHR ## **/

class _VkPhysicalDeviceFloatControlsPropertiesKHR : public Napi::ObjectWrap<_VkPhysicalDeviceFloatControlsPropertiesKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceFloatControlsPropertiesKHR(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceFloatControlsPropertiesKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetseparateDenormSettings(const Napi::CallbackInfo &info);
    void SetseparateDenormSettings(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetseparateRoundingModeSettings(const Napi::CallbackInfo &info);
    void SetseparateRoundingModeSettings(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetshaderSignedZeroInfNanPreserveFloat16(const Napi::CallbackInfo &info);
    void SetshaderSignedZeroInfNanPreserveFloat16(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetshaderSignedZeroInfNanPreserveFloat32(const Napi::CallbackInfo &info);
    void SetshaderSignedZeroInfNanPreserveFloat32(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetshaderSignedZeroInfNanPreserveFloat64(const Napi::CallbackInfo &info);
    void SetshaderSignedZeroInfNanPreserveFloat64(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetshaderDenormPreserveFloat16(const Napi::CallbackInfo &info);
    void SetshaderDenormPreserveFloat16(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetshaderDenormPreserveFloat32(const Napi::CallbackInfo &info);
    void SetshaderDenormPreserveFloat32(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetshaderDenormPreserveFloat64(const Napi::CallbackInfo &info);
    void SetshaderDenormPreserveFloat64(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetshaderDenormFlushToZeroFloat16(const Napi::CallbackInfo &info);
    void SetshaderDenormFlushToZeroFloat16(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetshaderDenormFlushToZeroFloat32(const Napi::CallbackInfo &info);
    void SetshaderDenormFlushToZeroFloat32(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetshaderDenormFlushToZeroFloat64(const Napi::CallbackInfo &info);
    void SetshaderDenormFlushToZeroFloat64(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetshaderRoundingModeRTEFloat16(const Napi::CallbackInfo &info);
    void SetshaderRoundingModeRTEFloat16(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetshaderRoundingModeRTEFloat32(const Napi::CallbackInfo &info);
    void SetshaderRoundingModeRTEFloat32(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetshaderRoundingModeRTEFloat64(const Napi::CallbackInfo &info);
    void SetshaderRoundingModeRTEFloat64(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetshaderRoundingModeRTZFloat16(const Napi::CallbackInfo &info);
    void SetshaderRoundingModeRTZFloat16(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetshaderRoundingModeRTZFloat32(const Napi::CallbackInfo &info);
    void SetshaderRoundingModeRTZFloat32(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetshaderRoundingModeRTZFloat64(const Napi::CallbackInfo &info);
    void SetshaderRoundingModeRTZFloat64(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceFloatControlsPropertiesKHR instance = {};

};

/** ## END VkPhysicalDeviceFloatControlsPropertiesKHR ## **/

/** ## BEGIN VkPhysicalDeviceFloat16Int8FeaturesKHR ## **/

class _VkPhysicalDeviceFloat16Int8FeaturesKHR : public Napi::ObjectWrap<_VkPhysicalDeviceFloat16Int8FeaturesKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceFloat16Int8FeaturesKHR(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceFloat16Int8FeaturesKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetshaderFloat16(const Napi::CallbackInfo &info);
    void SetshaderFloat16(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetshaderInt8(const Napi::CallbackInfo &info);
    void SetshaderInt8(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceFloat16Int8FeaturesKHR instance = {};

};

/** ## END VkPhysicalDeviceFloat16Int8FeaturesKHR ## **/

/** ## BEGIN VkPhysicalDeviceShaderDrawParameterFeatures ## **/

class _VkPhysicalDeviceShaderDrawParameterFeatures : public Napi::ObjectWrap<_VkPhysicalDeviceShaderDrawParameterFeatures> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceShaderDrawParameterFeatures(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceShaderDrawParameterFeatures();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetshaderDrawParameters(const Napi::CallbackInfo &info);
    void SetshaderDrawParameters(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceShaderDrawParameterFeatures instance = {};

};

/** ## END VkPhysicalDeviceShaderDrawParameterFeatures ## **/

/** ## BEGIN VkDescriptorSetLayoutSupportKHR ## **/

class _VkDescriptorSetLayoutSupportKHR : public Napi::ObjectWrap<_VkDescriptorSetLayoutSupportKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDescriptorSetLayoutSupportKHR(const Napi::CallbackInfo &info);
    ~_VkDescriptorSetLayoutSupportKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getsupported(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDescriptorSetLayoutSupportKHR instance = {};

};

/** ## END VkDescriptorSetLayoutSupportKHR ## **/

/** ## BEGIN VkDescriptorSetLayoutSupport ## **/

class _VkDescriptorSetLayoutSupport : public Napi::ObjectWrap<_VkDescriptorSetLayoutSupport> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDescriptorSetLayoutSupport(const Napi::CallbackInfo &info);
    ~_VkDescriptorSetLayoutSupport();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getsupported(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDescriptorSetLayoutSupport instance = {};

};

/** ## END VkDescriptorSetLayoutSupport ## **/

/** ## BEGIN VkPhysicalDeviceMaintenance3PropertiesKHR ## **/

class _VkPhysicalDeviceMaintenance3PropertiesKHR : public Napi::ObjectWrap<_VkPhysicalDeviceMaintenance3PropertiesKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceMaintenance3PropertiesKHR(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceMaintenance3PropertiesKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmaxPerSetDescriptors(const Napi::CallbackInfo &info);
    Napi::Value GetmaxMemoryAllocationSize(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceMaintenance3PropertiesKHR instance = {};

};

/** ## END VkPhysicalDeviceMaintenance3PropertiesKHR ## **/

/** ## BEGIN VkPhysicalDeviceMaintenance3Properties ## **/

class _VkPhysicalDeviceMaintenance3Properties : public Napi::ObjectWrap<_VkPhysicalDeviceMaintenance3Properties> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceMaintenance3Properties(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceMaintenance3Properties();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmaxPerSetDescriptors(const Napi::CallbackInfo &info);
    Napi::Value GetmaxMemoryAllocationSize(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceMaintenance3Properties instance = {};

};

/** ## END VkPhysicalDeviceMaintenance3Properties ## **/

/** ## BEGIN VkShaderModuleValidationCacheCreateInfoEXT ## **/

class _VkShaderModuleValidationCacheCreateInfoEXT : public Napi::ObjectWrap<_VkShaderModuleValidationCacheCreateInfoEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkShaderModuleValidationCacheCreateInfoEXT(const Napi::CallbackInfo &info);
    ~_VkShaderModuleValidationCacheCreateInfoEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference validationCache;
    Napi::Value GetvalidationCache(const Napi::CallbackInfo &info);
    void SetvalidationCache(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkShaderModuleValidationCacheCreateInfoEXT instance = {};

};

/** ## END VkShaderModuleValidationCacheCreateInfoEXT ## **/

/** ## BEGIN VkValidationCacheCreateInfoEXT ## **/

class _VkValidationCacheCreateInfoEXT : public Napi::ObjectWrap<_VkValidationCacheCreateInfoEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkValidationCacheCreateInfoEXT(const Napi::CallbackInfo &info);
    ~_VkValidationCacheCreateInfoEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetinitialDataSize(const Napi::CallbackInfo &info);
    void SetinitialDataSize(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pInitialData;
    Napi::Value GetpInitialData(const Napi::CallbackInfo &info);
    void SetpInitialData(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkValidationCacheCreateInfoEXT instance = {};

};

/** ## END VkValidationCacheCreateInfoEXT ## **/

/** ## BEGIN VkImageFormatListCreateInfoKHR ## **/

class _VkImageFormatListCreateInfoKHR : public Napi::ObjectWrap<_VkImageFormatListCreateInfoKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkImageFormatListCreateInfoKHR(const Napi::CallbackInfo &info);
    ~_VkImageFormatListCreateInfoKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetviewFormatCount(const Napi::CallbackInfo &info);
    void SetviewFormatCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pViewFormats;
    Napi::Value GetpViewFormats(const Napi::CallbackInfo &info);
    void SetpViewFormats(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkImageFormatListCreateInfoKHR instance = {};

};

/** ## END VkImageFormatListCreateInfoKHR ## **/

/** ## BEGIN VkPipelineCoverageModulationStateCreateInfoNV ## **/

class _VkPipelineCoverageModulationStateCreateInfoNV : public Napi::ObjectWrap<_VkPipelineCoverageModulationStateCreateInfoNV> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPipelineCoverageModulationStateCreateInfoNV(const Napi::CallbackInfo &info);
    ~_VkPipelineCoverageModulationStateCreateInfoNV();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetcoverageModulationMode(const Napi::CallbackInfo &info);
    void SetcoverageModulationMode(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetcoverageModulationTableEnable(const Napi::CallbackInfo &info);
    void SetcoverageModulationTableEnable(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetcoverageModulationTableCount(const Napi::CallbackInfo &info);
    void SetcoverageModulationTableCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pCoverageModulationTable;
    Napi::Value GetpCoverageModulationTable(const Napi::CallbackInfo &info);
    void SetpCoverageModulationTable(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPipelineCoverageModulationStateCreateInfoNV instance = {};

};

/** ## END VkPipelineCoverageModulationStateCreateInfoNV ## **/

/** ## BEGIN VkDescriptorPoolInlineUniformBlockCreateInfoEXT ## **/

class _VkDescriptorPoolInlineUniformBlockCreateInfoEXT : public Napi::ObjectWrap<_VkDescriptorPoolInlineUniformBlockCreateInfoEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDescriptorPoolInlineUniformBlockCreateInfoEXT(const Napi::CallbackInfo &info);
    ~_VkDescriptorPoolInlineUniformBlockCreateInfoEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmaxInlineUniformBlockBindings(const Napi::CallbackInfo &info);
    void SetmaxInlineUniformBlockBindings(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDescriptorPoolInlineUniformBlockCreateInfoEXT instance = {};

};

/** ## END VkDescriptorPoolInlineUniformBlockCreateInfoEXT ## **/

/** ## BEGIN VkWriteDescriptorSetInlineUniformBlockEXT ## **/

class _VkWriteDescriptorSetInlineUniformBlockEXT : public Napi::ObjectWrap<_VkWriteDescriptorSetInlineUniformBlockEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkWriteDescriptorSetInlineUniformBlockEXT(const Napi::CallbackInfo &info);
    ~_VkWriteDescriptorSetInlineUniformBlockEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdataSize(const Napi::CallbackInfo &info);
    void SetdataSize(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pData;
    Napi::Value GetpData(const Napi::CallbackInfo &info);
    void SetpData(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkWriteDescriptorSetInlineUniformBlockEXT instance = {};

};

/** ## END VkWriteDescriptorSetInlineUniformBlockEXT ## **/

/** ## BEGIN VkPhysicalDeviceInlineUniformBlockPropertiesEXT ## **/

class _VkPhysicalDeviceInlineUniformBlockPropertiesEXT : public Napi::ObjectWrap<_VkPhysicalDeviceInlineUniformBlockPropertiesEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceInlineUniformBlockPropertiesEXT(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceInlineUniformBlockPropertiesEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmaxInlineUniformBlockSize(const Napi::CallbackInfo &info);
    Napi::Value GetmaxPerStageDescriptorInlineUniformBlocks(const Napi::CallbackInfo &info);
    Napi::Value GetmaxPerStageDescriptorUpdateAfterBindInlineUniformBlocks(const Napi::CallbackInfo &info);
    Napi::Value GetmaxDescriptorSetInlineUniformBlocks(const Napi::CallbackInfo &info);
    Napi::Value GetmaxDescriptorSetUpdateAfterBindInlineUniformBlocks(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceInlineUniformBlockPropertiesEXT instance = {};

};

/** ## END VkPhysicalDeviceInlineUniformBlockPropertiesEXT ## **/

/** ## BEGIN VkPhysicalDeviceInlineUniformBlockFeaturesEXT ## **/

class _VkPhysicalDeviceInlineUniformBlockFeaturesEXT : public Napi::ObjectWrap<_VkPhysicalDeviceInlineUniformBlockFeaturesEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceInlineUniformBlockFeaturesEXT(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceInlineUniformBlockFeaturesEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetinlineUniformBlock(const Napi::CallbackInfo &info);
    void SetinlineUniformBlock(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdescriptorBindingInlineUniformBlockUpdateAfterBind(const Napi::CallbackInfo &info);
    void SetdescriptorBindingInlineUniformBlockUpdateAfterBind(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceInlineUniformBlockFeaturesEXT instance = {};

};

/** ## END VkPhysicalDeviceInlineUniformBlockFeaturesEXT ## **/

/** ## BEGIN VkPipelineColorBlendAdvancedStateCreateInfoEXT ## **/

class _VkPipelineColorBlendAdvancedStateCreateInfoEXT : public Napi::ObjectWrap<_VkPipelineColorBlendAdvancedStateCreateInfoEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPipelineColorBlendAdvancedStateCreateInfoEXT(const Napi::CallbackInfo &info);
    ~_VkPipelineColorBlendAdvancedStateCreateInfoEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetsrcPremultiplied(const Napi::CallbackInfo &info);
    void SetsrcPremultiplied(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdstPremultiplied(const Napi::CallbackInfo &info);
    void SetdstPremultiplied(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetblendOverlap(const Napi::CallbackInfo &info);
    void SetblendOverlap(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPipelineColorBlendAdvancedStateCreateInfoEXT instance = {};

};

/** ## END VkPipelineColorBlendAdvancedStateCreateInfoEXT ## **/

/** ## BEGIN VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT ## **/

class _VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT : public Napi::ObjectWrap<_VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetadvancedBlendMaxColorAttachments(const Napi::CallbackInfo &info);
    Napi::Value GetadvancedBlendIndependentBlend(const Napi::CallbackInfo &info);
    Napi::Value GetadvancedBlendNonPremultipliedSrcColor(const Napi::CallbackInfo &info);
    Napi::Value GetadvancedBlendNonPremultipliedDstColor(const Napi::CallbackInfo &info);
    Napi::Value GetadvancedBlendCorrelatedOverlap(const Napi::CallbackInfo &info);
    Napi::Value GetadvancedBlendAllOperations(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT instance = {};

};

/** ## END VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT ## **/

/** ## BEGIN VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT ## **/

class _VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT : public Napi::ObjectWrap<_VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetadvancedBlendCoherentOperations(const Napi::CallbackInfo &info);
    void SetadvancedBlendCoherentOperations(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT instance = {};

};

/** ## END VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT ## **/

/** ## BEGIN VkSamplerReductionModeCreateInfoEXT ## **/

class _VkSamplerReductionModeCreateInfoEXT : public Napi::ObjectWrap<_VkSamplerReductionModeCreateInfoEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkSamplerReductionModeCreateInfoEXT(const Napi::CallbackInfo &info);
    ~_VkSamplerReductionModeCreateInfoEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetreductionMode(const Napi::CallbackInfo &info);
    void SetreductionMode(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkSamplerReductionModeCreateInfoEXT instance = {};

};

/** ## END VkSamplerReductionModeCreateInfoEXT ## **/

/** ## BEGIN VkMultisamplePropertiesEXT ## **/

class _VkMultisamplePropertiesEXT : public Napi::ObjectWrap<_VkMultisamplePropertiesEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkMultisamplePropertiesEXT(const Napi::CallbackInfo &info);
    ~_VkMultisamplePropertiesEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference maxSampleLocationGridSize;
    Napi::Value GetmaxSampleLocationGridSize(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkMultisamplePropertiesEXT instance = {};

};

/** ## END VkMultisamplePropertiesEXT ## **/

/** ## BEGIN VkPhysicalDeviceSampleLocationsPropertiesEXT ## **/

class _VkPhysicalDeviceSampleLocationsPropertiesEXT : public Napi::ObjectWrap<_VkPhysicalDeviceSampleLocationsPropertiesEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceSampleLocationsPropertiesEXT(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceSampleLocationsPropertiesEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetsampleLocationSampleCounts(const Napi::CallbackInfo &info);
    Napi::ObjectReference maxSampleLocationGridSize;
    Napi::Value GetmaxSampleLocationGridSize(const Napi::CallbackInfo &info);
    std::vector<float>* vsampleLocationCoordinateRange;
    Napi::ObjectReference sampleLocationCoordinateRange;
    Napi::Value GetsampleLocationCoordinateRange(const Napi::CallbackInfo &info);
    Napi::Value GetsampleLocationSubPixelBits(const Napi::CallbackInfo &info);
    Napi::Value GetvariableSampleLocations(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceSampleLocationsPropertiesEXT instance = {};

};

/** ## END VkPhysicalDeviceSampleLocationsPropertiesEXT ## **/

/** ## BEGIN VkPipelineSampleLocationsStateCreateInfoEXT ## **/

class _VkPipelineSampleLocationsStateCreateInfoEXT : public Napi::ObjectWrap<_VkPipelineSampleLocationsStateCreateInfoEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPipelineSampleLocationsStateCreateInfoEXT(const Napi::CallbackInfo &info);
    ~_VkPipelineSampleLocationsStateCreateInfoEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetsampleLocationsEnable(const Napi::CallbackInfo &info);
    void SetsampleLocationsEnable(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference sampleLocationsInfo;
    Napi::Value GetsampleLocationsInfo(const Napi::CallbackInfo &info);
    void SetsampleLocationsInfo(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPipelineSampleLocationsStateCreateInfoEXT instance = {};

};

/** ## END VkPipelineSampleLocationsStateCreateInfoEXT ## **/

/** ## BEGIN VkRenderPassSampleLocationsBeginInfoEXT ## **/

class _VkRenderPassSampleLocationsBeginInfoEXT : public Napi::ObjectWrap<_VkRenderPassSampleLocationsBeginInfoEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkRenderPassSampleLocationsBeginInfoEXT(const Napi::CallbackInfo &info);
    ~_VkRenderPassSampleLocationsBeginInfoEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetattachmentInitialSampleLocationsCount(const Napi::CallbackInfo &info);
    void SetattachmentInitialSampleLocationsCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkAttachmentSampleLocationsEXT>* vpAttachmentInitialSampleLocations;
    Napi::ObjectReference pAttachmentInitialSampleLocations;
    Napi::Value GetpAttachmentInitialSampleLocations(const Napi::CallbackInfo &info);
    void SetpAttachmentInitialSampleLocations(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetpostSubpassSampleLocationsCount(const Napi::CallbackInfo &info);
    void SetpostSubpassSampleLocationsCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkSubpassSampleLocationsEXT>* vpPostSubpassSampleLocations;
    Napi::ObjectReference pPostSubpassSampleLocations;
    Napi::Value GetpPostSubpassSampleLocations(const Napi::CallbackInfo &info);
    void SetpPostSubpassSampleLocations(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkRenderPassSampleLocationsBeginInfoEXT instance = {};

};

/** ## END VkRenderPassSampleLocationsBeginInfoEXT ## **/

/** ## BEGIN VkSubpassSampleLocationsEXT ## **/

class _VkSubpassSampleLocationsEXT : public Napi::ObjectWrap<_VkSubpassSampleLocationsEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkSubpassSampleLocationsEXT(const Napi::CallbackInfo &info);
    ~_VkSubpassSampleLocationsEXT();

    // #accessors
    Napi::Value GetsubpassIndex(const Napi::CallbackInfo &info);
    void SetsubpassIndex(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference sampleLocationsInfo;
    Napi::Value GetsampleLocationsInfo(const Napi::CallbackInfo &info);
    void SetsampleLocationsInfo(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkSubpassSampleLocationsEXT instance = {};

};

/** ## END VkSubpassSampleLocationsEXT ## **/

/** ## BEGIN VkAttachmentSampleLocationsEXT ## **/

class _VkAttachmentSampleLocationsEXT : public Napi::ObjectWrap<_VkAttachmentSampleLocationsEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkAttachmentSampleLocationsEXT(const Napi::CallbackInfo &info);
    ~_VkAttachmentSampleLocationsEXT();

    // #accessors
    Napi::Value GetattachmentIndex(const Napi::CallbackInfo &info);
    void SetattachmentIndex(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference sampleLocationsInfo;
    Napi::Value GetsampleLocationsInfo(const Napi::CallbackInfo &info);
    void SetsampleLocationsInfo(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkAttachmentSampleLocationsEXT instance = {};

};

/** ## END VkAttachmentSampleLocationsEXT ## **/

/** ## BEGIN VkSampleLocationsInfoEXT ## **/

class _VkSampleLocationsInfoEXT : public Napi::ObjectWrap<_VkSampleLocationsInfoEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkSampleLocationsInfoEXT(const Napi::CallbackInfo &info);
    ~_VkSampleLocationsInfoEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetsampleLocationsPerPixel(const Napi::CallbackInfo &info);
    void SetsampleLocationsPerPixel(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference sampleLocationGridSize;
    Napi::Value GetsampleLocationGridSize(const Napi::CallbackInfo &info);
    void SetsampleLocationGridSize(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetsampleLocationsCount(const Napi::CallbackInfo &info);
    void SetsampleLocationsCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkSampleLocationEXT>* vpSampleLocations;
    Napi::ObjectReference pSampleLocations;
    Napi::Value GetpSampleLocations(const Napi::CallbackInfo &info);
    void SetpSampleLocations(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkSampleLocationsInfoEXT instance = {};

};

/** ## END VkSampleLocationsInfoEXT ## **/

/** ## BEGIN VkSampleLocationEXT ## **/

class _VkSampleLocationEXT : public Napi::ObjectWrap<_VkSampleLocationEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkSampleLocationEXT(const Napi::CallbackInfo &info);
    ~_VkSampleLocationEXT();

    // #accessors
    Napi::Value Getx(const Napi::CallbackInfo &info);
    void Setx(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Gety(const Napi::CallbackInfo &info);
    void Sety(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkSampleLocationEXT instance = {};

};

/** ## END VkSampleLocationEXT ## **/

/** ## BEGIN VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT ## **/

class _VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT : public Napi::ObjectWrap<_VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetfilterMinmaxSingleComponentFormats(const Napi::CallbackInfo &info);
    Napi::Value GetfilterMinmaxImageComponentMapping(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT instance = {};

};

/** ## END VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT ## **/

/** ## BEGIN VkPipelineCoverageToColorStateCreateInfoNV ## **/

class _VkPipelineCoverageToColorStateCreateInfoNV : public Napi::ObjectWrap<_VkPipelineCoverageToColorStateCreateInfoNV> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPipelineCoverageToColorStateCreateInfoNV(const Napi::CallbackInfo &info);
    ~_VkPipelineCoverageToColorStateCreateInfoNV();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetcoverageToColorEnable(const Napi::CallbackInfo &info);
    void SetcoverageToColorEnable(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetcoverageToColorLocation(const Napi::CallbackInfo &info);
    void SetcoverageToColorLocation(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPipelineCoverageToColorStateCreateInfoNV instance = {};

};

/** ## END VkPipelineCoverageToColorStateCreateInfoNV ## **/

/** ## BEGIN VkDeviceQueueInfo2 ## **/

class _VkDeviceQueueInfo2 : public Napi::ObjectWrap<_VkDeviceQueueInfo2> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDeviceQueueInfo2(const Napi::CallbackInfo &info);
    ~_VkDeviceQueueInfo2();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetqueueFamilyIndex(const Napi::CallbackInfo &info);
    void SetqueueFamilyIndex(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetqueueIndex(const Napi::CallbackInfo &info);
    void SetqueueIndex(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDeviceQueueInfo2 instance = {};

};

/** ## END VkDeviceQueueInfo2 ## **/

/** ## BEGIN VkPhysicalDeviceProtectedMemoryProperties ## **/

class _VkPhysicalDeviceProtectedMemoryProperties : public Napi::ObjectWrap<_VkPhysicalDeviceProtectedMemoryProperties> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceProtectedMemoryProperties(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceProtectedMemoryProperties();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetprotectedNoFault(const Napi::CallbackInfo &info);
    void SetprotectedNoFault(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceProtectedMemoryProperties instance = {};

};

/** ## END VkPhysicalDeviceProtectedMemoryProperties ## **/

/** ## BEGIN VkPhysicalDeviceProtectedMemoryFeatures ## **/

class _VkPhysicalDeviceProtectedMemoryFeatures : public Napi::ObjectWrap<_VkPhysicalDeviceProtectedMemoryFeatures> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceProtectedMemoryFeatures(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceProtectedMemoryFeatures();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetprotectedMemory(const Napi::CallbackInfo &info);
    void SetprotectedMemory(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceProtectedMemoryFeatures instance = {};

};

/** ## END VkPhysicalDeviceProtectedMemoryFeatures ## **/

/** ## BEGIN VkProtectedSubmitInfo ## **/

class _VkProtectedSubmitInfo : public Napi::ObjectWrap<_VkProtectedSubmitInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkProtectedSubmitInfo(const Napi::CallbackInfo &info);
    ~_VkProtectedSubmitInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetprotectedSubmit(const Napi::CallbackInfo &info);
    void SetprotectedSubmit(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkProtectedSubmitInfo instance = {};

};

/** ## END VkProtectedSubmitInfo ## **/

/** ## BEGIN VkConditionalRenderingBeginInfoEXT ## **/

class _VkConditionalRenderingBeginInfoEXT : public Napi::ObjectWrap<_VkConditionalRenderingBeginInfoEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkConditionalRenderingBeginInfoEXT(const Napi::CallbackInfo &info);
    ~_VkConditionalRenderingBeginInfoEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference buffer;
    Napi::Value Getbuffer(const Napi::CallbackInfo &info);
    void Setbuffer(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getoffset(const Napi::CallbackInfo &info);
    void Setoffset(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkConditionalRenderingBeginInfoEXT instance = {};

};

/** ## END VkConditionalRenderingBeginInfoEXT ## **/

/** ## BEGIN VkTextureLODGatherFormatPropertiesAMD ## **/

class _VkTextureLODGatherFormatPropertiesAMD : public Napi::ObjectWrap<_VkTextureLODGatherFormatPropertiesAMD> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkTextureLODGatherFormatPropertiesAMD(const Napi::CallbackInfo &info);
    ~_VkTextureLODGatherFormatPropertiesAMD();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetsupportsTextureGatherLODBiasAMD(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkTextureLODGatherFormatPropertiesAMD instance = {};

};

/** ## END VkTextureLODGatherFormatPropertiesAMD ## **/

/** ## BEGIN VkSamplerYcbcrConversionImageFormatPropertiesKHR ## **/

class _VkSamplerYcbcrConversionImageFormatPropertiesKHR : public Napi::ObjectWrap<_VkSamplerYcbcrConversionImageFormatPropertiesKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkSamplerYcbcrConversionImageFormatPropertiesKHR(const Napi::CallbackInfo &info);
    ~_VkSamplerYcbcrConversionImageFormatPropertiesKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetcombinedImageSamplerDescriptorCount(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkSamplerYcbcrConversionImageFormatPropertiesKHR instance = {};

};

/** ## END VkSamplerYcbcrConversionImageFormatPropertiesKHR ## **/

/** ## BEGIN VkSamplerYcbcrConversionImageFormatProperties ## **/

class _VkSamplerYcbcrConversionImageFormatProperties : public Napi::ObjectWrap<_VkSamplerYcbcrConversionImageFormatProperties> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkSamplerYcbcrConversionImageFormatProperties(const Napi::CallbackInfo &info);
    ~_VkSamplerYcbcrConversionImageFormatProperties();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetcombinedImageSamplerDescriptorCount(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkSamplerYcbcrConversionImageFormatProperties instance = {};

};

/** ## END VkSamplerYcbcrConversionImageFormatProperties ## **/

/** ## BEGIN VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR ## **/

class _VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR : public Napi::ObjectWrap<_VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetsamplerYcbcrConversion(const Napi::CallbackInfo &info);
    void SetsamplerYcbcrConversion(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR instance = {};

};

/** ## END VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR ## **/

/** ## BEGIN VkPhysicalDeviceSamplerYcbcrConversionFeatures ## **/

class _VkPhysicalDeviceSamplerYcbcrConversionFeatures : public Napi::ObjectWrap<_VkPhysicalDeviceSamplerYcbcrConversionFeatures> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceSamplerYcbcrConversionFeatures(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceSamplerYcbcrConversionFeatures();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetsamplerYcbcrConversion(const Napi::CallbackInfo &info);
    void SetsamplerYcbcrConversion(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceSamplerYcbcrConversionFeatures instance = {};

};

/** ## END VkPhysicalDeviceSamplerYcbcrConversionFeatures ## **/

/** ## BEGIN VkImagePlaneMemoryRequirementsInfoKHR ## **/

class _VkImagePlaneMemoryRequirementsInfoKHR : public Napi::ObjectWrap<_VkImagePlaneMemoryRequirementsInfoKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkImagePlaneMemoryRequirementsInfoKHR(const Napi::CallbackInfo &info);
    ~_VkImagePlaneMemoryRequirementsInfoKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetplaneAspect(const Napi::CallbackInfo &info);
    void SetplaneAspect(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkImagePlaneMemoryRequirementsInfoKHR instance = {};

};

/** ## END VkImagePlaneMemoryRequirementsInfoKHR ## **/

/** ## BEGIN VkImagePlaneMemoryRequirementsInfo ## **/

class _VkImagePlaneMemoryRequirementsInfo : public Napi::ObjectWrap<_VkImagePlaneMemoryRequirementsInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkImagePlaneMemoryRequirementsInfo(const Napi::CallbackInfo &info);
    ~_VkImagePlaneMemoryRequirementsInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetplaneAspect(const Napi::CallbackInfo &info);
    void SetplaneAspect(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkImagePlaneMemoryRequirementsInfo instance = {};

};

/** ## END VkImagePlaneMemoryRequirementsInfo ## **/

/** ## BEGIN VkBindImagePlaneMemoryInfoKHR ## **/

class _VkBindImagePlaneMemoryInfoKHR : public Napi::ObjectWrap<_VkBindImagePlaneMemoryInfoKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkBindImagePlaneMemoryInfoKHR(const Napi::CallbackInfo &info);
    ~_VkBindImagePlaneMemoryInfoKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetplaneAspect(const Napi::CallbackInfo &info);
    void SetplaneAspect(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkBindImagePlaneMemoryInfoKHR instance = {};

};

/** ## END VkBindImagePlaneMemoryInfoKHR ## **/

/** ## BEGIN VkBindImagePlaneMemoryInfo ## **/

class _VkBindImagePlaneMemoryInfo : public Napi::ObjectWrap<_VkBindImagePlaneMemoryInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkBindImagePlaneMemoryInfo(const Napi::CallbackInfo &info);
    ~_VkBindImagePlaneMemoryInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetplaneAspect(const Napi::CallbackInfo &info);
    void SetplaneAspect(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkBindImagePlaneMemoryInfo instance = {};

};

/** ## END VkBindImagePlaneMemoryInfo ## **/

/** ## BEGIN VkSamplerYcbcrConversionCreateInfoKHR ## **/

class _VkSamplerYcbcrConversionCreateInfoKHR : public Napi::ObjectWrap<_VkSamplerYcbcrConversionCreateInfoKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkSamplerYcbcrConversionCreateInfoKHR(const Napi::CallbackInfo &info);
    ~_VkSamplerYcbcrConversionCreateInfoKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getformat(const Napi::CallbackInfo &info);
    void Setformat(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetycbcrModel(const Napi::CallbackInfo &info);
    void SetycbcrModel(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetycbcrRange(const Napi::CallbackInfo &info);
    void SetycbcrRange(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference components;
    Napi::Value Getcomponents(const Napi::CallbackInfo &info);
    void Setcomponents(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetxChromaOffset(const Napi::CallbackInfo &info);
    void SetxChromaOffset(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetyChromaOffset(const Napi::CallbackInfo &info);
    void SetyChromaOffset(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetchromaFilter(const Napi::CallbackInfo &info);
    void SetchromaFilter(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetforceExplicitReconstruction(const Napi::CallbackInfo &info);
    void SetforceExplicitReconstruction(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkSamplerYcbcrConversionCreateInfoKHR instance = {};

};

/** ## END VkSamplerYcbcrConversionCreateInfoKHR ## **/

/** ## BEGIN VkSamplerYcbcrConversionCreateInfo ## **/

class _VkSamplerYcbcrConversionCreateInfo : public Napi::ObjectWrap<_VkSamplerYcbcrConversionCreateInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkSamplerYcbcrConversionCreateInfo(const Napi::CallbackInfo &info);
    ~_VkSamplerYcbcrConversionCreateInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getformat(const Napi::CallbackInfo &info);
    void Setformat(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetycbcrModel(const Napi::CallbackInfo &info);
    void SetycbcrModel(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetycbcrRange(const Napi::CallbackInfo &info);
    void SetycbcrRange(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference components;
    Napi::Value Getcomponents(const Napi::CallbackInfo &info);
    void Setcomponents(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetxChromaOffset(const Napi::CallbackInfo &info);
    void SetxChromaOffset(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetyChromaOffset(const Napi::CallbackInfo &info);
    void SetyChromaOffset(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetchromaFilter(const Napi::CallbackInfo &info);
    void SetchromaFilter(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetforceExplicitReconstruction(const Napi::CallbackInfo &info);
    void SetforceExplicitReconstruction(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkSamplerYcbcrConversionCreateInfo instance = {};

};

/** ## END VkSamplerYcbcrConversionCreateInfo ## **/

/** ## BEGIN VkSamplerYcbcrConversionInfoKHR ## **/

class _VkSamplerYcbcrConversionInfoKHR : public Napi::ObjectWrap<_VkSamplerYcbcrConversionInfoKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkSamplerYcbcrConversionInfoKHR(const Napi::CallbackInfo &info);
    ~_VkSamplerYcbcrConversionInfoKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference conversion;
    Napi::Value Getconversion(const Napi::CallbackInfo &info);
    void Setconversion(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkSamplerYcbcrConversionInfoKHR instance = {};

};

/** ## END VkSamplerYcbcrConversionInfoKHR ## **/

/** ## BEGIN VkSamplerYcbcrConversionInfo ## **/

class _VkSamplerYcbcrConversionInfo : public Napi::ObjectWrap<_VkSamplerYcbcrConversionInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkSamplerYcbcrConversionInfo(const Napi::CallbackInfo &info);
    ~_VkSamplerYcbcrConversionInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference conversion;
    Napi::Value Getconversion(const Napi::CallbackInfo &info);
    void Setconversion(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkSamplerYcbcrConversionInfo instance = {};

};

/** ## END VkSamplerYcbcrConversionInfo ## **/

/** ## BEGIN VkPipelineTessellationDomainOriginStateCreateInfoKHR ## **/

class _VkPipelineTessellationDomainOriginStateCreateInfoKHR : public Napi::ObjectWrap<_VkPipelineTessellationDomainOriginStateCreateInfoKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPipelineTessellationDomainOriginStateCreateInfoKHR(const Napi::CallbackInfo &info);
    ~_VkPipelineTessellationDomainOriginStateCreateInfoKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdomainOrigin(const Napi::CallbackInfo &info);
    void SetdomainOrigin(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPipelineTessellationDomainOriginStateCreateInfoKHR instance = {};

};

/** ## END VkPipelineTessellationDomainOriginStateCreateInfoKHR ## **/

/** ## BEGIN VkPipelineTessellationDomainOriginStateCreateInfo ## **/

class _VkPipelineTessellationDomainOriginStateCreateInfo : public Napi::ObjectWrap<_VkPipelineTessellationDomainOriginStateCreateInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPipelineTessellationDomainOriginStateCreateInfo(const Napi::CallbackInfo &info);
    ~_VkPipelineTessellationDomainOriginStateCreateInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdomainOrigin(const Napi::CallbackInfo &info);
    void SetdomainOrigin(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPipelineTessellationDomainOriginStateCreateInfo instance = {};

};

/** ## END VkPipelineTessellationDomainOriginStateCreateInfo ## **/

/** ## BEGIN VkImageViewUsageCreateInfoKHR ## **/

class _VkImageViewUsageCreateInfoKHR : public Napi::ObjectWrap<_VkImageViewUsageCreateInfoKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkImageViewUsageCreateInfoKHR(const Napi::CallbackInfo &info);
    ~_VkImageViewUsageCreateInfoKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getusage(const Napi::CallbackInfo &info);
    void Setusage(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkImageViewUsageCreateInfoKHR instance = {};

};

/** ## END VkImageViewUsageCreateInfoKHR ## **/

/** ## BEGIN VkImageViewUsageCreateInfo ## **/

class _VkImageViewUsageCreateInfo : public Napi::ObjectWrap<_VkImageViewUsageCreateInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkImageViewUsageCreateInfo(const Napi::CallbackInfo &info);
    ~_VkImageViewUsageCreateInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getusage(const Napi::CallbackInfo &info);
    void Setusage(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkImageViewUsageCreateInfo instance = {};

};

/** ## END VkImageViewUsageCreateInfo ## **/

/** ## BEGIN VkMemoryDedicatedAllocateInfoKHR ## **/

class _VkMemoryDedicatedAllocateInfoKHR : public Napi::ObjectWrap<_VkMemoryDedicatedAllocateInfoKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkMemoryDedicatedAllocateInfoKHR(const Napi::CallbackInfo &info);
    ~_VkMemoryDedicatedAllocateInfoKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference image;
    Napi::Value Getimage(const Napi::CallbackInfo &info);
    void Setimage(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference buffer;
    Napi::Value Getbuffer(const Napi::CallbackInfo &info);
    void Setbuffer(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkMemoryDedicatedAllocateInfoKHR instance = {};

};

/** ## END VkMemoryDedicatedAllocateInfoKHR ## **/

/** ## BEGIN VkMemoryDedicatedAllocateInfo ## **/

class _VkMemoryDedicatedAllocateInfo : public Napi::ObjectWrap<_VkMemoryDedicatedAllocateInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkMemoryDedicatedAllocateInfo(const Napi::CallbackInfo &info);
    ~_VkMemoryDedicatedAllocateInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference image;
    Napi::Value Getimage(const Napi::CallbackInfo &info);
    void Setimage(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference buffer;
    Napi::Value Getbuffer(const Napi::CallbackInfo &info);
    void Setbuffer(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkMemoryDedicatedAllocateInfo instance = {};

};

/** ## END VkMemoryDedicatedAllocateInfo ## **/

/** ## BEGIN VkMemoryDedicatedRequirementsKHR ## **/

class _VkMemoryDedicatedRequirementsKHR : public Napi::ObjectWrap<_VkMemoryDedicatedRequirementsKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkMemoryDedicatedRequirementsKHR(const Napi::CallbackInfo &info);
    ~_VkMemoryDedicatedRequirementsKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetprefersDedicatedAllocation(const Napi::CallbackInfo &info);
    Napi::Value GetrequiresDedicatedAllocation(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkMemoryDedicatedRequirementsKHR instance = {};

};

/** ## END VkMemoryDedicatedRequirementsKHR ## **/

/** ## BEGIN VkMemoryDedicatedRequirements ## **/

class _VkMemoryDedicatedRequirements : public Napi::ObjectWrap<_VkMemoryDedicatedRequirements> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkMemoryDedicatedRequirements(const Napi::CallbackInfo &info);
    ~_VkMemoryDedicatedRequirements();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetprefersDedicatedAllocation(const Napi::CallbackInfo &info);
    Napi::Value GetrequiresDedicatedAllocation(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkMemoryDedicatedRequirements instance = {};

};

/** ## END VkMemoryDedicatedRequirements ## **/

/** ## BEGIN VkPhysicalDevicePointClippingPropertiesKHR ## **/

class _VkPhysicalDevicePointClippingPropertiesKHR : public Napi::ObjectWrap<_VkPhysicalDevicePointClippingPropertiesKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDevicePointClippingPropertiesKHR(const Napi::CallbackInfo &info);
    ~_VkPhysicalDevicePointClippingPropertiesKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetpointClippingBehavior(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDevicePointClippingPropertiesKHR instance = {};

};

/** ## END VkPhysicalDevicePointClippingPropertiesKHR ## **/

/** ## BEGIN VkPhysicalDevicePointClippingProperties ## **/

class _VkPhysicalDevicePointClippingProperties : public Napi::ObjectWrap<_VkPhysicalDevicePointClippingProperties> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDevicePointClippingProperties(const Napi::CallbackInfo &info);
    ~_VkPhysicalDevicePointClippingProperties();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetpointClippingBehavior(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDevicePointClippingProperties instance = {};

};

/** ## END VkPhysicalDevicePointClippingProperties ## **/

/** ## BEGIN VkSparseImageMemoryRequirements2KHR ## **/

class _VkSparseImageMemoryRequirements2KHR : public Napi::ObjectWrap<_VkSparseImageMemoryRequirements2KHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkSparseImageMemoryRequirements2KHR(const Napi::CallbackInfo &info);
    ~_VkSparseImageMemoryRequirements2KHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference memoryRequirements;
    Napi::Value GetmemoryRequirements(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkSparseImageMemoryRequirements2KHR instance = {};

};

/** ## END VkSparseImageMemoryRequirements2KHR ## **/

/** ## BEGIN VkSparseImageMemoryRequirements2 ## **/

class _VkSparseImageMemoryRequirements2 : public Napi::ObjectWrap<_VkSparseImageMemoryRequirements2> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkSparseImageMemoryRequirements2(const Napi::CallbackInfo &info);
    ~_VkSparseImageMemoryRequirements2();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference memoryRequirements;
    Napi::Value GetmemoryRequirements(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkSparseImageMemoryRequirements2 instance = {};

};

/** ## END VkSparseImageMemoryRequirements2 ## **/

/** ## BEGIN VkMemoryRequirements2KHR ## **/

class _VkMemoryRequirements2KHR : public Napi::ObjectWrap<_VkMemoryRequirements2KHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkMemoryRequirements2KHR(const Napi::CallbackInfo &info);
    ~_VkMemoryRequirements2KHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference memoryRequirements;
    Napi::Value GetmemoryRequirements(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkMemoryRequirements2KHR instance = {};

};

/** ## END VkMemoryRequirements2KHR ## **/

/** ## BEGIN VkMemoryRequirements2 ## **/

class _VkMemoryRequirements2 : public Napi::ObjectWrap<_VkMemoryRequirements2> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkMemoryRequirements2(const Napi::CallbackInfo &info);
    ~_VkMemoryRequirements2();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference memoryRequirements;
    Napi::Value GetmemoryRequirements(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkMemoryRequirements2 instance = {};

};

/** ## END VkMemoryRequirements2 ## **/

/** ## BEGIN VkImageSparseMemoryRequirementsInfo2KHR ## **/

class _VkImageSparseMemoryRequirementsInfo2KHR : public Napi::ObjectWrap<_VkImageSparseMemoryRequirementsInfo2KHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkImageSparseMemoryRequirementsInfo2KHR(const Napi::CallbackInfo &info);
    ~_VkImageSparseMemoryRequirementsInfo2KHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference image;
    Napi::Value Getimage(const Napi::CallbackInfo &info);
    void Setimage(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkImageSparseMemoryRequirementsInfo2KHR instance = {};

};

/** ## END VkImageSparseMemoryRequirementsInfo2KHR ## **/

/** ## BEGIN VkImageSparseMemoryRequirementsInfo2 ## **/

class _VkImageSparseMemoryRequirementsInfo2 : public Napi::ObjectWrap<_VkImageSparseMemoryRequirementsInfo2> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkImageSparseMemoryRequirementsInfo2(const Napi::CallbackInfo &info);
    ~_VkImageSparseMemoryRequirementsInfo2();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference image;
    Napi::Value Getimage(const Napi::CallbackInfo &info);
    void Setimage(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkImageSparseMemoryRequirementsInfo2 instance = {};

};

/** ## END VkImageSparseMemoryRequirementsInfo2 ## **/

/** ## BEGIN VkImageMemoryRequirementsInfo2KHR ## **/

class _VkImageMemoryRequirementsInfo2KHR : public Napi::ObjectWrap<_VkImageMemoryRequirementsInfo2KHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkImageMemoryRequirementsInfo2KHR(const Napi::CallbackInfo &info);
    ~_VkImageMemoryRequirementsInfo2KHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference image;
    Napi::Value Getimage(const Napi::CallbackInfo &info);
    void Setimage(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkImageMemoryRequirementsInfo2KHR instance = {};

};

/** ## END VkImageMemoryRequirementsInfo2KHR ## **/

/** ## BEGIN VkImageMemoryRequirementsInfo2 ## **/

class _VkImageMemoryRequirementsInfo2 : public Napi::ObjectWrap<_VkImageMemoryRequirementsInfo2> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkImageMemoryRequirementsInfo2(const Napi::CallbackInfo &info);
    ~_VkImageMemoryRequirementsInfo2();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference image;
    Napi::Value Getimage(const Napi::CallbackInfo &info);
    void Setimage(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkImageMemoryRequirementsInfo2 instance = {};

};

/** ## END VkImageMemoryRequirementsInfo2 ## **/

/** ## BEGIN VkBufferMemoryRequirementsInfo2KHR ## **/

class _VkBufferMemoryRequirementsInfo2KHR : public Napi::ObjectWrap<_VkBufferMemoryRequirementsInfo2KHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkBufferMemoryRequirementsInfo2KHR(const Napi::CallbackInfo &info);
    ~_VkBufferMemoryRequirementsInfo2KHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference buffer;
    Napi::Value Getbuffer(const Napi::CallbackInfo &info);
    void Setbuffer(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkBufferMemoryRequirementsInfo2KHR instance = {};

};

/** ## END VkBufferMemoryRequirementsInfo2KHR ## **/

/** ## BEGIN VkBufferMemoryRequirementsInfo2 ## **/

class _VkBufferMemoryRequirementsInfo2 : public Napi::ObjectWrap<_VkBufferMemoryRequirementsInfo2> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkBufferMemoryRequirementsInfo2(const Napi::CallbackInfo &info);
    ~_VkBufferMemoryRequirementsInfo2();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference buffer;
    Napi::Value Getbuffer(const Napi::CallbackInfo &info);
    void Setbuffer(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkBufferMemoryRequirementsInfo2 instance = {};

};

/** ## END VkBufferMemoryRequirementsInfo2 ## **/

/** ## BEGIN VkPhysicalDeviceSubgroupProperties ## **/

class _VkPhysicalDeviceSubgroupProperties : public Napi::ObjectWrap<_VkPhysicalDeviceSubgroupProperties> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceSubgroupProperties(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceSubgroupProperties();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetsubgroupSize(const Napi::CallbackInfo &info);
    Napi::Value GetsupportedStages(const Napi::CallbackInfo &info);
    Napi::Value GetsupportedOperations(const Napi::CallbackInfo &info);
    Napi::Value GetquadOperationsInAllStages(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceSubgroupProperties instance = {};

};

/** ## END VkPhysicalDeviceSubgroupProperties ## **/

/** ## BEGIN VkPhysicalDevice16BitStorageFeaturesKHR ## **/

class _VkPhysicalDevice16BitStorageFeaturesKHR : public Napi::ObjectWrap<_VkPhysicalDevice16BitStorageFeaturesKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDevice16BitStorageFeaturesKHR(const Napi::CallbackInfo &info);
    ~_VkPhysicalDevice16BitStorageFeaturesKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetstorageBuffer16BitAccess(const Napi::CallbackInfo &info);
    void SetstorageBuffer16BitAccess(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetuniformAndStorageBuffer16BitAccess(const Napi::CallbackInfo &info);
    void SetuniformAndStorageBuffer16BitAccess(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetstoragePushConstant16(const Napi::CallbackInfo &info);
    void SetstoragePushConstant16(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetstorageInputOutput16(const Napi::CallbackInfo &info);
    void SetstorageInputOutput16(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDevice16BitStorageFeaturesKHR instance = {};

};

/** ## END VkPhysicalDevice16BitStorageFeaturesKHR ## **/

/** ## BEGIN VkPhysicalDevice16BitStorageFeatures ## **/

class _VkPhysicalDevice16BitStorageFeatures : public Napi::ObjectWrap<_VkPhysicalDevice16BitStorageFeatures> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDevice16BitStorageFeatures(const Napi::CallbackInfo &info);
    ~_VkPhysicalDevice16BitStorageFeatures();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetstorageBuffer16BitAccess(const Napi::CallbackInfo &info);
    void SetstorageBuffer16BitAccess(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetuniformAndStorageBuffer16BitAccess(const Napi::CallbackInfo &info);
    void SetuniformAndStorageBuffer16BitAccess(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetstoragePushConstant16(const Napi::CallbackInfo &info);
    void SetstoragePushConstant16(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetstorageInputOutput16(const Napi::CallbackInfo &info);
    void SetstorageInputOutput16(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDevice16BitStorageFeatures instance = {};

};

/** ## END VkPhysicalDevice16BitStorageFeatures ## **/

/** ## BEGIN VkSharedPresentSurfaceCapabilitiesKHR ## **/

class _VkSharedPresentSurfaceCapabilitiesKHR : public Napi::ObjectWrap<_VkSharedPresentSurfaceCapabilitiesKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkSharedPresentSurfaceCapabilitiesKHR(const Napi::CallbackInfo &info);
    ~_VkSharedPresentSurfaceCapabilitiesKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetsharedPresentSupportedUsageFlags(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkSharedPresentSurfaceCapabilitiesKHR instance = {};

};

/** ## END VkSharedPresentSurfaceCapabilitiesKHR ## **/

/** ## BEGIN VkDisplayPlaneCapabilities2KHR ## **/

class _VkDisplayPlaneCapabilities2KHR : public Napi::ObjectWrap<_VkDisplayPlaneCapabilities2KHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDisplayPlaneCapabilities2KHR(const Napi::CallbackInfo &info);
    ~_VkDisplayPlaneCapabilities2KHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference capabilities;
    Napi::Value Getcapabilities(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDisplayPlaneCapabilities2KHR instance = {};

};

/** ## END VkDisplayPlaneCapabilities2KHR ## **/

/** ## BEGIN VkDisplayPlaneInfo2KHR ## **/

class _VkDisplayPlaneInfo2KHR : public Napi::ObjectWrap<_VkDisplayPlaneInfo2KHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDisplayPlaneInfo2KHR(const Napi::CallbackInfo &info);
    ~_VkDisplayPlaneInfo2KHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference mode;
    Napi::Value Getmode(const Napi::CallbackInfo &info);
    void Setmode(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetplaneIndex(const Napi::CallbackInfo &info);
    void SetplaneIndex(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDisplayPlaneInfo2KHR instance = {};

};

/** ## END VkDisplayPlaneInfo2KHR ## **/

/** ## BEGIN VkDisplayModeProperties2KHR ## **/

class _VkDisplayModeProperties2KHR : public Napi::ObjectWrap<_VkDisplayModeProperties2KHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDisplayModeProperties2KHR(const Napi::CallbackInfo &info);
    ~_VkDisplayModeProperties2KHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference displayModeProperties;
    Napi::Value GetdisplayModeProperties(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDisplayModeProperties2KHR instance = {};

};

/** ## END VkDisplayModeProperties2KHR ## **/

/** ## BEGIN VkDisplayPlaneProperties2KHR ## **/

class _VkDisplayPlaneProperties2KHR : public Napi::ObjectWrap<_VkDisplayPlaneProperties2KHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDisplayPlaneProperties2KHR(const Napi::CallbackInfo &info);
    ~_VkDisplayPlaneProperties2KHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference displayPlaneProperties;
    Napi::Value GetdisplayPlaneProperties(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDisplayPlaneProperties2KHR instance = {};

};

/** ## END VkDisplayPlaneProperties2KHR ## **/

/** ## BEGIN VkDisplayProperties2KHR ## **/

class _VkDisplayProperties2KHR : public Napi::ObjectWrap<_VkDisplayProperties2KHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDisplayProperties2KHR(const Napi::CallbackInfo &info);
    ~_VkDisplayProperties2KHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference displayProperties;
    Napi::Value GetdisplayProperties(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDisplayProperties2KHR instance = {};

};

/** ## END VkDisplayProperties2KHR ## **/

/** ## BEGIN VkSurfaceFormat2KHR ## **/

class _VkSurfaceFormat2KHR : public Napi::ObjectWrap<_VkSurfaceFormat2KHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkSurfaceFormat2KHR(const Napi::CallbackInfo &info);
    ~_VkSurfaceFormat2KHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference surfaceFormat;
    Napi::Value GetsurfaceFormat(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkSurfaceFormat2KHR instance = {};

};

/** ## END VkSurfaceFormat2KHR ## **/

/** ## BEGIN VkSurfaceCapabilities2KHR ## **/

class _VkSurfaceCapabilities2KHR : public Napi::ObjectWrap<_VkSurfaceCapabilities2KHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkSurfaceCapabilities2KHR(const Napi::CallbackInfo &info);
    ~_VkSurfaceCapabilities2KHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference surfaceCapabilities;
    Napi::Value GetsurfaceCapabilities(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkSurfaceCapabilities2KHR instance = {};

};

/** ## END VkSurfaceCapabilities2KHR ## **/

/** ## BEGIN VkPhysicalDeviceSurfaceInfo2KHR ## **/

class _VkPhysicalDeviceSurfaceInfo2KHR : public Napi::ObjectWrap<_VkPhysicalDeviceSurfaceInfo2KHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceSurfaceInfo2KHR(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceSurfaceInfo2KHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference surface;
    Napi::Value Getsurface(const Napi::CallbackInfo &info);
    void Setsurface(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceSurfaceInfo2KHR instance = {};

};

/** ## END VkPhysicalDeviceSurfaceInfo2KHR ## **/

/** ## BEGIN VkRenderPassInputAttachmentAspectCreateInfoKHR ## **/

class _VkRenderPassInputAttachmentAspectCreateInfoKHR : public Napi::ObjectWrap<_VkRenderPassInputAttachmentAspectCreateInfoKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkRenderPassInputAttachmentAspectCreateInfoKHR(const Napi::CallbackInfo &info);
    ~_VkRenderPassInputAttachmentAspectCreateInfoKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetaspectReferenceCount(const Napi::CallbackInfo &info);
    void SetaspectReferenceCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkInputAttachmentAspectReference>* vpAspectReferences;
    Napi::ObjectReference pAspectReferences;
    Napi::Value GetpAspectReferences(const Napi::CallbackInfo &info);
    void SetpAspectReferences(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkRenderPassInputAttachmentAspectCreateInfoKHR instance = {};

};

/** ## END VkRenderPassInputAttachmentAspectCreateInfoKHR ## **/

/** ## BEGIN VkRenderPassInputAttachmentAspectCreateInfo ## **/

class _VkRenderPassInputAttachmentAspectCreateInfo : public Napi::ObjectWrap<_VkRenderPassInputAttachmentAspectCreateInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkRenderPassInputAttachmentAspectCreateInfo(const Napi::CallbackInfo &info);
    ~_VkRenderPassInputAttachmentAspectCreateInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetaspectReferenceCount(const Napi::CallbackInfo &info);
    void SetaspectReferenceCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkInputAttachmentAspectReference>* vpAspectReferences;
    Napi::ObjectReference pAspectReferences;
    Napi::Value GetpAspectReferences(const Napi::CallbackInfo &info);
    void SetpAspectReferences(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkRenderPassInputAttachmentAspectCreateInfo instance = {};

};

/** ## END VkRenderPassInputAttachmentAspectCreateInfo ## **/

/** ## BEGIN VkInputAttachmentAspectReferenceKHR ## **/

class _VkInputAttachmentAspectReferenceKHR : public Napi::ObjectWrap<_VkInputAttachmentAspectReferenceKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkInputAttachmentAspectReferenceKHR(const Napi::CallbackInfo &info);
    ~_VkInputAttachmentAspectReferenceKHR();

    // #accessors
    Napi::Value Getsubpass(const Napi::CallbackInfo &info);
    void Setsubpass(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetinputAttachmentIndex(const Napi::CallbackInfo &info);
    void SetinputAttachmentIndex(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetaspectMask(const Napi::CallbackInfo &info);
    void SetaspectMask(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkInputAttachmentAspectReferenceKHR instance = {};

};

/** ## END VkInputAttachmentAspectReferenceKHR ## **/

/** ## BEGIN VkInputAttachmentAspectReference ## **/

class _VkInputAttachmentAspectReference : public Napi::ObjectWrap<_VkInputAttachmentAspectReference> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkInputAttachmentAspectReference(const Napi::CallbackInfo &info);
    ~_VkInputAttachmentAspectReference();

    // #accessors
    Napi::Value Getsubpass(const Napi::CallbackInfo &info);
    void Setsubpass(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetinputAttachmentIndex(const Napi::CallbackInfo &info);
    void SetinputAttachmentIndex(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetaspectMask(const Napi::CallbackInfo &info);
    void SetaspectMask(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkInputAttachmentAspectReference instance = {};

};

/** ## END VkInputAttachmentAspectReference ## **/

/** ## BEGIN VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX ## **/

class _VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX : public Napi::ObjectWrap<_VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetperViewPositionAllComponents(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX instance = {};

};

/** ## END VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX ## **/

/** ## BEGIN VkPipelineDiscardRectangleStateCreateInfoEXT ## **/

class _VkPipelineDiscardRectangleStateCreateInfoEXT : public Napi::ObjectWrap<_VkPipelineDiscardRectangleStateCreateInfoEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPipelineDiscardRectangleStateCreateInfoEXT(const Napi::CallbackInfo &info);
    ~_VkPipelineDiscardRectangleStateCreateInfoEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdiscardRectangleMode(const Napi::CallbackInfo &info);
    void SetdiscardRectangleMode(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdiscardRectangleCount(const Napi::CallbackInfo &info);
    void SetdiscardRectangleCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkRect2D>* vpDiscardRectangles;
    Napi::ObjectReference pDiscardRectangles;
    Napi::Value GetpDiscardRectangles(const Napi::CallbackInfo &info);
    void SetpDiscardRectangles(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPipelineDiscardRectangleStateCreateInfoEXT instance = {};

};

/** ## END VkPipelineDiscardRectangleStateCreateInfoEXT ## **/

/** ## BEGIN VkPhysicalDeviceDiscardRectanglePropertiesEXT ## **/

class _VkPhysicalDeviceDiscardRectanglePropertiesEXT : public Napi::ObjectWrap<_VkPhysicalDeviceDiscardRectanglePropertiesEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceDiscardRectanglePropertiesEXT(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceDiscardRectanglePropertiesEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmaxDiscardRectangles(const Napi::CallbackInfo &info);
    void SetmaxDiscardRectangles(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceDiscardRectanglePropertiesEXT instance = {};

};

/** ## END VkPhysicalDeviceDiscardRectanglePropertiesEXT ## **/

/** ## BEGIN VkPipelineViewportSwizzleStateCreateInfoNV ## **/

class _VkPipelineViewportSwizzleStateCreateInfoNV : public Napi::ObjectWrap<_VkPipelineViewportSwizzleStateCreateInfoNV> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPipelineViewportSwizzleStateCreateInfoNV(const Napi::CallbackInfo &info);
    ~_VkPipelineViewportSwizzleStateCreateInfoNV();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetviewportCount(const Napi::CallbackInfo &info);
    void SetviewportCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkViewportSwizzleNV>* vpViewportSwizzles;
    Napi::ObjectReference pViewportSwizzles;
    Napi::Value GetpViewportSwizzles(const Napi::CallbackInfo &info);
    void SetpViewportSwizzles(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPipelineViewportSwizzleStateCreateInfoNV instance = {};

};

/** ## END VkPipelineViewportSwizzleStateCreateInfoNV ## **/

/** ## BEGIN VkViewportSwizzleNV ## **/

class _VkViewportSwizzleNV : public Napi::ObjectWrap<_VkViewportSwizzleNV> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkViewportSwizzleNV(const Napi::CallbackInfo &info);
    ~_VkViewportSwizzleNV();

    // #accessors
    Napi::Value Getx(const Napi::CallbackInfo &info);
    void Setx(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Gety(const Napi::CallbackInfo &info);
    void Sety(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getz(const Napi::CallbackInfo &info);
    void Setz(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getw(const Napi::CallbackInfo &info);
    void Setw(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkViewportSwizzleNV instance = {};

};

/** ## END VkViewportSwizzleNV ## **/

/** ## BEGIN VkPipelineViewportWScalingStateCreateInfoNV ## **/

class _VkPipelineViewportWScalingStateCreateInfoNV : public Napi::ObjectWrap<_VkPipelineViewportWScalingStateCreateInfoNV> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPipelineViewportWScalingStateCreateInfoNV(const Napi::CallbackInfo &info);
    ~_VkPipelineViewportWScalingStateCreateInfoNV();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetviewportWScalingEnable(const Napi::CallbackInfo &info);
    void SetviewportWScalingEnable(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetviewportCount(const Napi::CallbackInfo &info);
    void SetviewportCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkViewportWScalingNV>* vpViewportWScalings;
    Napi::ObjectReference pViewportWScalings;
    Napi::Value GetpViewportWScalings(const Napi::CallbackInfo &info);
    void SetpViewportWScalings(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPipelineViewportWScalingStateCreateInfoNV instance = {};

};

/** ## END VkPipelineViewportWScalingStateCreateInfoNV ## **/

/** ## BEGIN VkViewportWScalingNV ## **/

class _VkViewportWScalingNV : public Napi::ObjectWrap<_VkViewportWScalingNV> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkViewportWScalingNV(const Napi::CallbackInfo &info);
    ~_VkViewportWScalingNV();

    // #accessors
    Napi::Value Getxcoeff(const Napi::CallbackInfo &info);
    void Setxcoeff(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getycoeff(const Napi::CallbackInfo &info);
    void Setycoeff(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkViewportWScalingNV instance = {};

};

/** ## END VkViewportWScalingNV ## **/

/** ## BEGIN VkPresentTimeGOOGLE ## **/

class _VkPresentTimeGOOGLE : public Napi::ObjectWrap<_VkPresentTimeGOOGLE> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPresentTimeGOOGLE(const Napi::CallbackInfo &info);
    ~_VkPresentTimeGOOGLE();

    // #accessors
    Napi::Value GetpresentID(const Napi::CallbackInfo &info);
    void SetpresentID(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdesiredPresentTime(const Napi::CallbackInfo &info);
    void SetdesiredPresentTime(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPresentTimeGOOGLE instance = {};

};

/** ## END VkPresentTimeGOOGLE ## **/

/** ## BEGIN VkPresentTimesInfoGOOGLE ## **/

class _VkPresentTimesInfoGOOGLE : public Napi::ObjectWrap<_VkPresentTimesInfoGOOGLE> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPresentTimesInfoGOOGLE(const Napi::CallbackInfo &info);
    ~_VkPresentTimesInfoGOOGLE();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetswapchainCount(const Napi::CallbackInfo &info);
    void SetswapchainCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkPresentTimeGOOGLE>* vpTimes;
    Napi::ObjectReference pTimes;
    Napi::Value GetpTimes(const Napi::CallbackInfo &info);
    void SetpTimes(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPresentTimesInfoGOOGLE instance = {};

};

/** ## END VkPresentTimesInfoGOOGLE ## **/

/** ## BEGIN VkPastPresentationTimingGOOGLE ## **/

class _VkPastPresentationTimingGOOGLE : public Napi::ObjectWrap<_VkPastPresentationTimingGOOGLE> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPastPresentationTimingGOOGLE(const Napi::CallbackInfo &info);
    ~_VkPastPresentationTimingGOOGLE();

    // #accessors
    Napi::Value GetpresentID(const Napi::CallbackInfo &info);
    Napi::Value GetdesiredPresentTime(const Napi::CallbackInfo &info);
    Napi::Value GetactualPresentTime(const Napi::CallbackInfo &info);
    Napi::Value GetearliestPresentTime(const Napi::CallbackInfo &info);
    Napi::Value GetpresentMargin(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPastPresentationTimingGOOGLE instance = {};

};

/** ## END VkPastPresentationTimingGOOGLE ## **/

/** ## BEGIN VkRefreshCycleDurationGOOGLE ## **/

class _VkRefreshCycleDurationGOOGLE : public Napi::ObjectWrap<_VkRefreshCycleDurationGOOGLE> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkRefreshCycleDurationGOOGLE(const Napi::CallbackInfo &info);
    ~_VkRefreshCycleDurationGOOGLE();

    // #accessors
    Napi::Value GetrefreshDuration(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkRefreshCycleDurationGOOGLE instance = {};

};

/** ## END VkRefreshCycleDurationGOOGLE ## **/

/** ## BEGIN VkHdrMetadataEXT ## **/

class _VkHdrMetadataEXT : public Napi::ObjectWrap<_VkHdrMetadataEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkHdrMetadataEXT(const Napi::CallbackInfo &info);
    ~_VkHdrMetadataEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference displayPrimaryRed;
    Napi::Value GetdisplayPrimaryRed(const Napi::CallbackInfo &info);
    void SetdisplayPrimaryRed(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference displayPrimaryGreen;
    Napi::Value GetdisplayPrimaryGreen(const Napi::CallbackInfo &info);
    void SetdisplayPrimaryGreen(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference displayPrimaryBlue;
    Napi::Value GetdisplayPrimaryBlue(const Napi::CallbackInfo &info);
    void SetdisplayPrimaryBlue(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference whitePoint;
    Napi::Value GetwhitePoint(const Napi::CallbackInfo &info);
    void SetwhitePoint(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmaxLuminance(const Napi::CallbackInfo &info);
    void SetmaxLuminance(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetminLuminance(const Napi::CallbackInfo &info);
    void SetminLuminance(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmaxContentLightLevel(const Napi::CallbackInfo &info);
    void SetmaxContentLightLevel(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmaxFrameAverageLightLevel(const Napi::CallbackInfo &info);
    void SetmaxFrameAverageLightLevel(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkHdrMetadataEXT instance = {};

};

/** ## END VkHdrMetadataEXT ## **/

/** ## BEGIN VkXYColorEXT ## **/

class _VkXYColorEXT : public Napi::ObjectWrap<_VkXYColorEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkXYColorEXT(const Napi::CallbackInfo &info);
    ~_VkXYColorEXT();

    // #accessors
    Napi::Value Getx(const Napi::CallbackInfo &info);
    void Setx(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Gety(const Napi::CallbackInfo &info);
    void Sety(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkXYColorEXT instance = {};

};

/** ## END VkXYColorEXT ## **/

/** ## BEGIN VkDescriptorUpdateTemplateCreateInfoKHR ## **/

class _VkDescriptorUpdateTemplateCreateInfoKHR : public Napi::ObjectWrap<_VkDescriptorUpdateTemplateCreateInfoKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDescriptorUpdateTemplateCreateInfoKHR(const Napi::CallbackInfo &info);
    ~_VkDescriptorUpdateTemplateCreateInfoKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdescriptorUpdateEntryCount(const Napi::CallbackInfo &info);
    void SetdescriptorUpdateEntryCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkDescriptorUpdateTemplateEntry>* vpDescriptorUpdateEntries;
    Napi::ObjectReference pDescriptorUpdateEntries;
    Napi::Value GetpDescriptorUpdateEntries(const Napi::CallbackInfo &info);
    void SetpDescriptorUpdateEntries(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GettemplateType(const Napi::CallbackInfo &info);
    void SettemplateType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference descriptorSetLayout;
    Napi::Value GetdescriptorSetLayout(const Napi::CallbackInfo &info);
    void SetdescriptorSetLayout(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetpipelineBindPoint(const Napi::CallbackInfo &info);
    void SetpipelineBindPoint(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pipelineLayout;
    Napi::Value GetpipelineLayout(const Napi::CallbackInfo &info);
    void SetpipelineLayout(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getset(const Napi::CallbackInfo &info);
    void Setset(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDescriptorUpdateTemplateCreateInfoKHR instance = {};

};

/** ## END VkDescriptorUpdateTemplateCreateInfoKHR ## **/

/** ## BEGIN VkDescriptorUpdateTemplateCreateInfo ## **/

class _VkDescriptorUpdateTemplateCreateInfo : public Napi::ObjectWrap<_VkDescriptorUpdateTemplateCreateInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDescriptorUpdateTemplateCreateInfo(const Napi::CallbackInfo &info);
    ~_VkDescriptorUpdateTemplateCreateInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdescriptorUpdateEntryCount(const Napi::CallbackInfo &info);
    void SetdescriptorUpdateEntryCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkDescriptorUpdateTemplateEntry>* vpDescriptorUpdateEntries;
    Napi::ObjectReference pDescriptorUpdateEntries;
    Napi::Value GetpDescriptorUpdateEntries(const Napi::CallbackInfo &info);
    void SetpDescriptorUpdateEntries(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GettemplateType(const Napi::CallbackInfo &info);
    void SettemplateType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference descriptorSetLayout;
    Napi::Value GetdescriptorSetLayout(const Napi::CallbackInfo &info);
    void SetdescriptorSetLayout(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetpipelineBindPoint(const Napi::CallbackInfo &info);
    void SetpipelineBindPoint(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pipelineLayout;
    Napi::Value GetpipelineLayout(const Napi::CallbackInfo &info);
    void SetpipelineLayout(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getset(const Napi::CallbackInfo &info);
    void Setset(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDescriptorUpdateTemplateCreateInfo instance = {};

};

/** ## END VkDescriptorUpdateTemplateCreateInfo ## **/

/** ## BEGIN VkDescriptorUpdateTemplateEntryKHR ## **/

class _VkDescriptorUpdateTemplateEntryKHR : public Napi::ObjectWrap<_VkDescriptorUpdateTemplateEntryKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDescriptorUpdateTemplateEntryKHR(const Napi::CallbackInfo &info);
    ~_VkDescriptorUpdateTemplateEntryKHR();

    // #accessors
    Napi::Value GetdstBinding(const Napi::CallbackInfo &info);
    void SetdstBinding(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdstArrayElement(const Napi::CallbackInfo &info);
    void SetdstArrayElement(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdescriptorCount(const Napi::CallbackInfo &info);
    void SetdescriptorCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdescriptorType(const Napi::CallbackInfo &info);
    void SetdescriptorType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getoffset(const Napi::CallbackInfo &info);
    void Setoffset(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getstride(const Napi::CallbackInfo &info);
    void Setstride(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDescriptorUpdateTemplateEntryKHR instance = {};

};

/** ## END VkDescriptorUpdateTemplateEntryKHR ## **/

/** ## BEGIN VkDescriptorUpdateTemplateEntry ## **/

class _VkDescriptorUpdateTemplateEntry : public Napi::ObjectWrap<_VkDescriptorUpdateTemplateEntry> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDescriptorUpdateTemplateEntry(const Napi::CallbackInfo &info);
    ~_VkDescriptorUpdateTemplateEntry();

    // #accessors
    Napi::Value GetdstBinding(const Napi::CallbackInfo &info);
    void SetdstBinding(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdstArrayElement(const Napi::CallbackInfo &info);
    void SetdstArrayElement(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdescriptorCount(const Napi::CallbackInfo &info);
    void SetdescriptorCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdescriptorType(const Napi::CallbackInfo &info);
    void SetdescriptorType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getoffset(const Napi::CallbackInfo &info);
    void Setoffset(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getstride(const Napi::CallbackInfo &info);
    void Setstride(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDescriptorUpdateTemplateEntry instance = {};

};

/** ## END VkDescriptorUpdateTemplateEntry ## **/

/** ## BEGIN VkDeviceGroupSwapchainCreateInfoKHR ## **/

class _VkDeviceGroupSwapchainCreateInfoKHR : public Napi::ObjectWrap<_VkDeviceGroupSwapchainCreateInfoKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDeviceGroupSwapchainCreateInfoKHR(const Napi::CallbackInfo &info);
    ~_VkDeviceGroupSwapchainCreateInfoKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getmodes(const Napi::CallbackInfo &info);
    void Setmodes(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDeviceGroupSwapchainCreateInfoKHR instance = {};

};

/** ## END VkDeviceGroupSwapchainCreateInfoKHR ## **/

/** ## BEGIN VkDeviceGroupDeviceCreateInfoKHR ## **/

class _VkDeviceGroupDeviceCreateInfoKHR : public Napi::ObjectWrap<_VkDeviceGroupDeviceCreateInfoKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDeviceGroupDeviceCreateInfoKHR(const Napi::CallbackInfo &info);
    ~_VkDeviceGroupDeviceCreateInfoKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetphysicalDeviceCount(const Napi::CallbackInfo &info);
    void SetphysicalDeviceCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkPhysicalDevice>* vpPhysicalDevices;
    Napi::ObjectReference pPhysicalDevices;
    Napi::Value GetpPhysicalDevices(const Napi::CallbackInfo &info);
    void SetpPhysicalDevices(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDeviceGroupDeviceCreateInfoKHR instance = {};

};

/** ## END VkDeviceGroupDeviceCreateInfoKHR ## **/

/** ## BEGIN VkDeviceGroupDeviceCreateInfo ## **/

class _VkDeviceGroupDeviceCreateInfo : public Napi::ObjectWrap<_VkDeviceGroupDeviceCreateInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDeviceGroupDeviceCreateInfo(const Napi::CallbackInfo &info);
    ~_VkDeviceGroupDeviceCreateInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetphysicalDeviceCount(const Napi::CallbackInfo &info);
    void SetphysicalDeviceCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkPhysicalDevice>* vpPhysicalDevices;
    Napi::ObjectReference pPhysicalDevices;
    Napi::Value GetpPhysicalDevices(const Napi::CallbackInfo &info);
    void SetpPhysicalDevices(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDeviceGroupDeviceCreateInfo instance = {};

};

/** ## END VkDeviceGroupDeviceCreateInfo ## **/

/** ## BEGIN VkDeviceGroupPresentInfoKHR ## **/

class _VkDeviceGroupPresentInfoKHR : public Napi::ObjectWrap<_VkDeviceGroupPresentInfoKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDeviceGroupPresentInfoKHR(const Napi::CallbackInfo &info);
    ~_VkDeviceGroupPresentInfoKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetswapchainCount(const Napi::CallbackInfo &info);
    void SetswapchainCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pDeviceMasks;
    Napi::Value GetpDeviceMasks(const Napi::CallbackInfo &info);
    void SetpDeviceMasks(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getmode(const Napi::CallbackInfo &info);
    void Setmode(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDeviceGroupPresentInfoKHR instance = {};

};

/** ## END VkDeviceGroupPresentInfoKHR ## **/

/** ## BEGIN VkAcquireNextImageInfoKHR ## **/

class _VkAcquireNextImageInfoKHR : public Napi::ObjectWrap<_VkAcquireNextImageInfoKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkAcquireNextImageInfoKHR(const Napi::CallbackInfo &info);
    ~_VkAcquireNextImageInfoKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference swapchain;
    Napi::Value Getswapchain(const Napi::CallbackInfo &info);
    void Setswapchain(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Gettimeout(const Napi::CallbackInfo &info);
    void Settimeout(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference semaphore;
    Napi::Value Getsemaphore(const Napi::CallbackInfo &info);
    void Setsemaphore(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference fence;
    Napi::Value Getfence(const Napi::CallbackInfo &info);
    void Setfence(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdeviceMask(const Napi::CallbackInfo &info);
    void SetdeviceMask(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkAcquireNextImageInfoKHR instance = {};

};

/** ## END VkAcquireNextImageInfoKHR ## **/

/** ## BEGIN VkBindImageMemorySwapchainInfoKHR ## **/

class _VkBindImageMemorySwapchainInfoKHR : public Napi::ObjectWrap<_VkBindImageMemorySwapchainInfoKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkBindImageMemorySwapchainInfoKHR(const Napi::CallbackInfo &info);
    ~_VkBindImageMemorySwapchainInfoKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference swapchain;
    Napi::Value Getswapchain(const Napi::CallbackInfo &info);
    void Setswapchain(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetimageIndex(const Napi::CallbackInfo &info);
    void SetimageIndex(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkBindImageMemorySwapchainInfoKHR instance = {};

};

/** ## END VkBindImageMemorySwapchainInfoKHR ## **/

/** ## BEGIN VkImageSwapchainCreateInfoKHR ## **/

class _VkImageSwapchainCreateInfoKHR : public Napi::ObjectWrap<_VkImageSwapchainCreateInfoKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkImageSwapchainCreateInfoKHR(const Napi::CallbackInfo &info);
    ~_VkImageSwapchainCreateInfoKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference swapchain;
    Napi::Value Getswapchain(const Napi::CallbackInfo &info);
    void Setswapchain(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkImageSwapchainCreateInfoKHR instance = {};

};

/** ## END VkImageSwapchainCreateInfoKHR ## **/

/** ## BEGIN VkDeviceGroupPresentCapabilitiesKHR ## **/

class _VkDeviceGroupPresentCapabilitiesKHR : public Napi::ObjectWrap<_VkDeviceGroupPresentCapabilitiesKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDeviceGroupPresentCapabilitiesKHR(const Napi::CallbackInfo &info);
    ~_VkDeviceGroupPresentCapabilitiesKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<uint32_t>* vpresentMask;
    Napi::ObjectReference presentMask;
    Napi::Value GetpresentMask(const Napi::CallbackInfo &info);
    Napi::Value Getmodes(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDeviceGroupPresentCapabilitiesKHR instance = {};

};

/** ## END VkDeviceGroupPresentCapabilitiesKHR ## **/

/** ## BEGIN VkDeviceGroupBindSparseInfoKHR ## **/

class _VkDeviceGroupBindSparseInfoKHR : public Napi::ObjectWrap<_VkDeviceGroupBindSparseInfoKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDeviceGroupBindSparseInfoKHR(const Napi::CallbackInfo &info);
    ~_VkDeviceGroupBindSparseInfoKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetresourceDeviceIndex(const Napi::CallbackInfo &info);
    void SetresourceDeviceIndex(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmemoryDeviceIndex(const Napi::CallbackInfo &info);
    void SetmemoryDeviceIndex(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDeviceGroupBindSparseInfoKHR instance = {};

};

/** ## END VkDeviceGroupBindSparseInfoKHR ## **/

/** ## BEGIN VkDeviceGroupBindSparseInfo ## **/

class _VkDeviceGroupBindSparseInfo : public Napi::ObjectWrap<_VkDeviceGroupBindSparseInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDeviceGroupBindSparseInfo(const Napi::CallbackInfo &info);
    ~_VkDeviceGroupBindSparseInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetresourceDeviceIndex(const Napi::CallbackInfo &info);
    void SetresourceDeviceIndex(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmemoryDeviceIndex(const Napi::CallbackInfo &info);
    void SetmemoryDeviceIndex(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDeviceGroupBindSparseInfo instance = {};

};

/** ## END VkDeviceGroupBindSparseInfo ## **/

/** ## BEGIN VkDeviceGroupSubmitInfoKHR ## **/

class _VkDeviceGroupSubmitInfoKHR : public Napi::ObjectWrap<_VkDeviceGroupSubmitInfoKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDeviceGroupSubmitInfoKHR(const Napi::CallbackInfo &info);
    ~_VkDeviceGroupSubmitInfoKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetwaitSemaphoreCount(const Napi::CallbackInfo &info);
    void SetwaitSemaphoreCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pWaitSemaphoreDeviceIndices;
    Napi::Value GetpWaitSemaphoreDeviceIndices(const Napi::CallbackInfo &info);
    void SetpWaitSemaphoreDeviceIndices(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetcommandBufferCount(const Napi::CallbackInfo &info);
    void SetcommandBufferCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pCommandBufferDeviceMasks;
    Napi::Value GetpCommandBufferDeviceMasks(const Napi::CallbackInfo &info);
    void SetpCommandBufferDeviceMasks(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetsignalSemaphoreCount(const Napi::CallbackInfo &info);
    void SetsignalSemaphoreCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pSignalSemaphoreDeviceIndices;
    Napi::Value GetpSignalSemaphoreDeviceIndices(const Napi::CallbackInfo &info);
    void SetpSignalSemaphoreDeviceIndices(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDeviceGroupSubmitInfoKHR instance = {};

};

/** ## END VkDeviceGroupSubmitInfoKHR ## **/

/** ## BEGIN VkDeviceGroupSubmitInfo ## **/

class _VkDeviceGroupSubmitInfo : public Napi::ObjectWrap<_VkDeviceGroupSubmitInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDeviceGroupSubmitInfo(const Napi::CallbackInfo &info);
    ~_VkDeviceGroupSubmitInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetwaitSemaphoreCount(const Napi::CallbackInfo &info);
    void SetwaitSemaphoreCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pWaitSemaphoreDeviceIndices;
    Napi::Value GetpWaitSemaphoreDeviceIndices(const Napi::CallbackInfo &info);
    void SetpWaitSemaphoreDeviceIndices(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetcommandBufferCount(const Napi::CallbackInfo &info);
    void SetcommandBufferCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pCommandBufferDeviceMasks;
    Napi::Value GetpCommandBufferDeviceMasks(const Napi::CallbackInfo &info);
    void SetpCommandBufferDeviceMasks(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetsignalSemaphoreCount(const Napi::CallbackInfo &info);
    void SetsignalSemaphoreCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pSignalSemaphoreDeviceIndices;
    Napi::Value GetpSignalSemaphoreDeviceIndices(const Napi::CallbackInfo &info);
    void SetpSignalSemaphoreDeviceIndices(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDeviceGroupSubmitInfo instance = {};

};

/** ## END VkDeviceGroupSubmitInfo ## **/

/** ## BEGIN VkDeviceGroupCommandBufferBeginInfoKHR ## **/

class _VkDeviceGroupCommandBufferBeginInfoKHR : public Napi::ObjectWrap<_VkDeviceGroupCommandBufferBeginInfoKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDeviceGroupCommandBufferBeginInfoKHR(const Napi::CallbackInfo &info);
    ~_VkDeviceGroupCommandBufferBeginInfoKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdeviceMask(const Napi::CallbackInfo &info);
    void SetdeviceMask(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDeviceGroupCommandBufferBeginInfoKHR instance = {};

};

/** ## END VkDeviceGroupCommandBufferBeginInfoKHR ## **/

/** ## BEGIN VkDeviceGroupCommandBufferBeginInfo ## **/

class _VkDeviceGroupCommandBufferBeginInfo : public Napi::ObjectWrap<_VkDeviceGroupCommandBufferBeginInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDeviceGroupCommandBufferBeginInfo(const Napi::CallbackInfo &info);
    ~_VkDeviceGroupCommandBufferBeginInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdeviceMask(const Napi::CallbackInfo &info);
    void SetdeviceMask(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDeviceGroupCommandBufferBeginInfo instance = {};

};

/** ## END VkDeviceGroupCommandBufferBeginInfo ## **/

/** ## BEGIN VkDeviceGroupRenderPassBeginInfoKHR ## **/

class _VkDeviceGroupRenderPassBeginInfoKHR : public Napi::ObjectWrap<_VkDeviceGroupRenderPassBeginInfoKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDeviceGroupRenderPassBeginInfoKHR(const Napi::CallbackInfo &info);
    ~_VkDeviceGroupRenderPassBeginInfoKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdeviceMask(const Napi::CallbackInfo &info);
    void SetdeviceMask(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdeviceRenderAreaCount(const Napi::CallbackInfo &info);
    void SetdeviceRenderAreaCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkRect2D>* vpDeviceRenderAreas;
    Napi::ObjectReference pDeviceRenderAreas;
    Napi::Value GetpDeviceRenderAreas(const Napi::CallbackInfo &info);
    void SetpDeviceRenderAreas(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDeviceGroupRenderPassBeginInfoKHR instance = {};

};

/** ## END VkDeviceGroupRenderPassBeginInfoKHR ## **/

/** ## BEGIN VkDeviceGroupRenderPassBeginInfo ## **/

class _VkDeviceGroupRenderPassBeginInfo : public Napi::ObjectWrap<_VkDeviceGroupRenderPassBeginInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDeviceGroupRenderPassBeginInfo(const Napi::CallbackInfo &info);
    ~_VkDeviceGroupRenderPassBeginInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdeviceMask(const Napi::CallbackInfo &info);
    void SetdeviceMask(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdeviceRenderAreaCount(const Napi::CallbackInfo &info);
    void SetdeviceRenderAreaCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkRect2D>* vpDeviceRenderAreas;
    Napi::ObjectReference pDeviceRenderAreas;
    Napi::Value GetpDeviceRenderAreas(const Napi::CallbackInfo &info);
    void SetpDeviceRenderAreas(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDeviceGroupRenderPassBeginInfo instance = {};

};

/** ## END VkDeviceGroupRenderPassBeginInfo ## **/

/** ## BEGIN VkBindImageMemoryDeviceGroupInfoKHR ## **/

class _VkBindImageMemoryDeviceGroupInfoKHR : public Napi::ObjectWrap<_VkBindImageMemoryDeviceGroupInfoKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkBindImageMemoryDeviceGroupInfoKHR(const Napi::CallbackInfo &info);
    ~_VkBindImageMemoryDeviceGroupInfoKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdeviceIndexCount(const Napi::CallbackInfo &info);
    void SetdeviceIndexCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pDeviceIndices;
    Napi::Value GetpDeviceIndices(const Napi::CallbackInfo &info);
    void SetpDeviceIndices(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetsplitInstanceBindRegionCount(const Napi::CallbackInfo &info);
    void SetsplitInstanceBindRegionCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkRect2D>* vpSplitInstanceBindRegions;
    Napi::ObjectReference pSplitInstanceBindRegions;
    Napi::Value GetpSplitInstanceBindRegions(const Napi::CallbackInfo &info);
    void SetpSplitInstanceBindRegions(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkBindImageMemoryDeviceGroupInfoKHR instance = {};

};

/** ## END VkBindImageMemoryDeviceGroupInfoKHR ## **/

/** ## BEGIN VkBindImageMemoryDeviceGroupInfo ## **/

class _VkBindImageMemoryDeviceGroupInfo : public Napi::ObjectWrap<_VkBindImageMemoryDeviceGroupInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkBindImageMemoryDeviceGroupInfo(const Napi::CallbackInfo &info);
    ~_VkBindImageMemoryDeviceGroupInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdeviceIndexCount(const Napi::CallbackInfo &info);
    void SetdeviceIndexCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pDeviceIndices;
    Napi::Value GetpDeviceIndices(const Napi::CallbackInfo &info);
    void SetpDeviceIndices(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetsplitInstanceBindRegionCount(const Napi::CallbackInfo &info);
    void SetsplitInstanceBindRegionCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkRect2D>* vpSplitInstanceBindRegions;
    Napi::ObjectReference pSplitInstanceBindRegions;
    Napi::Value GetpSplitInstanceBindRegions(const Napi::CallbackInfo &info);
    void SetpSplitInstanceBindRegions(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkBindImageMemoryDeviceGroupInfo instance = {};

};

/** ## END VkBindImageMemoryDeviceGroupInfo ## **/

/** ## BEGIN VkBindImageMemoryInfoKHR ## **/

class _VkBindImageMemoryInfoKHR : public Napi::ObjectWrap<_VkBindImageMemoryInfoKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkBindImageMemoryInfoKHR(const Napi::CallbackInfo &info);
    ~_VkBindImageMemoryInfoKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference image;
    Napi::Value Getimage(const Napi::CallbackInfo &info);
    void Setimage(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference memory;
    Napi::Value Getmemory(const Napi::CallbackInfo &info);
    void Setmemory(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmemoryOffset(const Napi::CallbackInfo &info);
    void SetmemoryOffset(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkBindImageMemoryInfoKHR instance = {};

};

/** ## END VkBindImageMemoryInfoKHR ## **/

/** ## BEGIN VkBindImageMemoryInfo ## **/

class _VkBindImageMemoryInfo : public Napi::ObjectWrap<_VkBindImageMemoryInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkBindImageMemoryInfo(const Napi::CallbackInfo &info);
    ~_VkBindImageMemoryInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference image;
    Napi::Value Getimage(const Napi::CallbackInfo &info);
    void Setimage(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference memory;
    Napi::Value Getmemory(const Napi::CallbackInfo &info);
    void Setmemory(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmemoryOffset(const Napi::CallbackInfo &info);
    void SetmemoryOffset(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkBindImageMemoryInfo instance = {};

};

/** ## END VkBindImageMemoryInfo ## **/

/** ## BEGIN VkBindBufferMemoryDeviceGroupInfoKHR ## **/

class _VkBindBufferMemoryDeviceGroupInfoKHR : public Napi::ObjectWrap<_VkBindBufferMemoryDeviceGroupInfoKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkBindBufferMemoryDeviceGroupInfoKHR(const Napi::CallbackInfo &info);
    ~_VkBindBufferMemoryDeviceGroupInfoKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdeviceIndexCount(const Napi::CallbackInfo &info);
    void SetdeviceIndexCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pDeviceIndices;
    Napi::Value GetpDeviceIndices(const Napi::CallbackInfo &info);
    void SetpDeviceIndices(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkBindBufferMemoryDeviceGroupInfoKHR instance = {};

};

/** ## END VkBindBufferMemoryDeviceGroupInfoKHR ## **/

/** ## BEGIN VkBindBufferMemoryDeviceGroupInfo ## **/

class _VkBindBufferMemoryDeviceGroupInfo : public Napi::ObjectWrap<_VkBindBufferMemoryDeviceGroupInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkBindBufferMemoryDeviceGroupInfo(const Napi::CallbackInfo &info);
    ~_VkBindBufferMemoryDeviceGroupInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdeviceIndexCount(const Napi::CallbackInfo &info);
    void SetdeviceIndexCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pDeviceIndices;
    Napi::Value GetpDeviceIndices(const Napi::CallbackInfo &info);
    void SetpDeviceIndices(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkBindBufferMemoryDeviceGroupInfo instance = {};

};

/** ## END VkBindBufferMemoryDeviceGroupInfo ## **/

/** ## BEGIN VkBindBufferMemoryInfoKHR ## **/

class _VkBindBufferMemoryInfoKHR : public Napi::ObjectWrap<_VkBindBufferMemoryInfoKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkBindBufferMemoryInfoKHR(const Napi::CallbackInfo &info);
    ~_VkBindBufferMemoryInfoKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference buffer;
    Napi::Value Getbuffer(const Napi::CallbackInfo &info);
    void Setbuffer(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference memory;
    Napi::Value Getmemory(const Napi::CallbackInfo &info);
    void Setmemory(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmemoryOffset(const Napi::CallbackInfo &info);
    void SetmemoryOffset(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkBindBufferMemoryInfoKHR instance = {};

};

/** ## END VkBindBufferMemoryInfoKHR ## **/

/** ## BEGIN VkBindBufferMemoryInfo ## **/

class _VkBindBufferMemoryInfo : public Napi::ObjectWrap<_VkBindBufferMemoryInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkBindBufferMemoryInfo(const Napi::CallbackInfo &info);
    ~_VkBindBufferMemoryInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference buffer;
    Napi::Value Getbuffer(const Napi::CallbackInfo &info);
    void Setbuffer(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference memory;
    Napi::Value Getmemory(const Napi::CallbackInfo &info);
    void Setmemory(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmemoryOffset(const Napi::CallbackInfo &info);
    void SetmemoryOffset(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkBindBufferMemoryInfo instance = {};

};

/** ## END VkBindBufferMemoryInfo ## **/

/** ## BEGIN VkMemoryAllocateFlagsInfoKHR ## **/

class _VkMemoryAllocateFlagsInfoKHR : public Napi::ObjectWrap<_VkMemoryAllocateFlagsInfoKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkMemoryAllocateFlagsInfoKHR(const Napi::CallbackInfo &info);
    ~_VkMemoryAllocateFlagsInfoKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdeviceMask(const Napi::CallbackInfo &info);
    void SetdeviceMask(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkMemoryAllocateFlagsInfoKHR instance = {};

};

/** ## END VkMemoryAllocateFlagsInfoKHR ## **/

/** ## BEGIN VkMemoryAllocateFlagsInfo ## **/

class _VkMemoryAllocateFlagsInfo : public Napi::ObjectWrap<_VkMemoryAllocateFlagsInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkMemoryAllocateFlagsInfo(const Napi::CallbackInfo &info);
    ~_VkMemoryAllocateFlagsInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdeviceMask(const Napi::CallbackInfo &info);
    void SetdeviceMask(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkMemoryAllocateFlagsInfo instance = {};

};

/** ## END VkMemoryAllocateFlagsInfo ## **/

/** ## BEGIN VkPhysicalDeviceGroupPropertiesKHR ## **/

class _VkPhysicalDeviceGroupPropertiesKHR : public Napi::ObjectWrap<_VkPhysicalDeviceGroupPropertiesKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceGroupPropertiesKHR(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceGroupPropertiesKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetphysicalDeviceCount(const Napi::CallbackInfo &info);
    std::vector<VkPhysicalDevice>* vphysicalDevices;
    Napi::ObjectReference physicalDevices;
    Napi::Value GetphysicalDevices(const Napi::CallbackInfo &info);
    Napi::Value GetsubsetAllocation(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceGroupPropertiesKHR instance = {};

};

/** ## END VkPhysicalDeviceGroupPropertiesKHR ## **/

/** ## BEGIN VkPhysicalDeviceGroupProperties ## **/

class _VkPhysicalDeviceGroupProperties : public Napi::ObjectWrap<_VkPhysicalDeviceGroupProperties> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceGroupProperties(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceGroupProperties();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetphysicalDeviceCount(const Napi::CallbackInfo &info);
    std::vector<VkPhysicalDevice>* vphysicalDevices;
    Napi::ObjectReference physicalDevices;
    Napi::Value GetphysicalDevices(const Napi::CallbackInfo &info);
    Napi::Value GetsubsetAllocation(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceGroupProperties instance = {};

};

/** ## END VkPhysicalDeviceGroupProperties ## **/

/** ## BEGIN VkSwapchainCounterCreateInfoEXT ## **/

class _VkSwapchainCounterCreateInfoEXT : public Napi::ObjectWrap<_VkSwapchainCounterCreateInfoEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkSwapchainCounterCreateInfoEXT(const Napi::CallbackInfo &info);
    ~_VkSwapchainCounterCreateInfoEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetsurfaceCounters(const Napi::CallbackInfo &info);
    void SetsurfaceCounters(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkSwapchainCounterCreateInfoEXT instance = {};

};

/** ## END VkSwapchainCounterCreateInfoEXT ## **/

/** ## BEGIN VkDisplayEventInfoEXT ## **/

class _VkDisplayEventInfoEXT : public Napi::ObjectWrap<_VkDisplayEventInfoEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDisplayEventInfoEXT(const Napi::CallbackInfo &info);
    ~_VkDisplayEventInfoEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdisplayEvent(const Napi::CallbackInfo &info);
    void SetdisplayEvent(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDisplayEventInfoEXT instance = {};

};

/** ## END VkDisplayEventInfoEXT ## **/

/** ## BEGIN VkDeviceEventInfoEXT ## **/

class _VkDeviceEventInfoEXT : public Napi::ObjectWrap<_VkDeviceEventInfoEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDeviceEventInfoEXT(const Napi::CallbackInfo &info);
    ~_VkDeviceEventInfoEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdeviceEvent(const Napi::CallbackInfo &info);
    void SetdeviceEvent(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDeviceEventInfoEXT instance = {};

};

/** ## END VkDeviceEventInfoEXT ## **/

/** ## BEGIN VkDisplayPowerInfoEXT ## **/

class _VkDisplayPowerInfoEXT : public Napi::ObjectWrap<_VkDisplayPowerInfoEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDisplayPowerInfoEXT(const Napi::CallbackInfo &info);
    ~_VkDisplayPowerInfoEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetpowerState(const Napi::CallbackInfo &info);
    void SetpowerState(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDisplayPowerInfoEXT instance = {};

};

/** ## END VkDisplayPowerInfoEXT ## **/

/** ## BEGIN VkSurfaceCapabilities2EXT ## **/

class _VkSurfaceCapabilities2EXT : public Napi::ObjectWrap<_VkSurfaceCapabilities2EXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkSurfaceCapabilities2EXT(const Napi::CallbackInfo &info);
    ~_VkSurfaceCapabilities2EXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetminImageCount(const Napi::CallbackInfo &info);
    Napi::Value GetmaxImageCount(const Napi::CallbackInfo &info);
    Napi::ObjectReference currentExtent;
    Napi::Value GetcurrentExtent(const Napi::CallbackInfo &info);
    Napi::ObjectReference minImageExtent;
    Napi::Value GetminImageExtent(const Napi::CallbackInfo &info);
    Napi::ObjectReference maxImageExtent;
    Napi::Value GetmaxImageExtent(const Napi::CallbackInfo &info);
    Napi::Value GetmaxImageArrayLayers(const Napi::CallbackInfo &info);
    Napi::Value GetsupportedTransforms(const Napi::CallbackInfo &info);
    Napi::Value GetcurrentTransform(const Napi::CallbackInfo &info);
    Napi::Value GetsupportedCompositeAlpha(const Napi::CallbackInfo &info);
    Napi::Value GetsupportedUsageFlags(const Napi::CallbackInfo &info);
    Napi::Value GetsupportedSurfaceCounters(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkSurfaceCapabilities2EXT instance = {};

};

/** ## END VkSurfaceCapabilities2EXT ## **/

/** ## BEGIN VkRenderPassMultiviewCreateInfoKHR ## **/

class _VkRenderPassMultiviewCreateInfoKHR : public Napi::ObjectWrap<_VkRenderPassMultiviewCreateInfoKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkRenderPassMultiviewCreateInfoKHR(const Napi::CallbackInfo &info);
    ~_VkRenderPassMultiviewCreateInfoKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetsubpassCount(const Napi::CallbackInfo &info);
    void SetsubpassCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pViewMasks;
    Napi::Value GetpViewMasks(const Napi::CallbackInfo &info);
    void SetpViewMasks(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdependencyCount(const Napi::CallbackInfo &info);
    void SetdependencyCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pViewOffsets;
    Napi::Value GetpViewOffsets(const Napi::CallbackInfo &info);
    void SetpViewOffsets(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetcorrelationMaskCount(const Napi::CallbackInfo &info);
    void SetcorrelationMaskCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pCorrelationMasks;
    Napi::Value GetpCorrelationMasks(const Napi::CallbackInfo &info);
    void SetpCorrelationMasks(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkRenderPassMultiviewCreateInfoKHR instance = {};

};

/** ## END VkRenderPassMultiviewCreateInfoKHR ## **/

/** ## BEGIN VkRenderPassMultiviewCreateInfo ## **/

class _VkRenderPassMultiviewCreateInfo : public Napi::ObjectWrap<_VkRenderPassMultiviewCreateInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkRenderPassMultiviewCreateInfo(const Napi::CallbackInfo &info);
    ~_VkRenderPassMultiviewCreateInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetsubpassCount(const Napi::CallbackInfo &info);
    void SetsubpassCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pViewMasks;
    Napi::Value GetpViewMasks(const Napi::CallbackInfo &info);
    void SetpViewMasks(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdependencyCount(const Napi::CallbackInfo &info);
    void SetdependencyCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pViewOffsets;
    Napi::Value GetpViewOffsets(const Napi::CallbackInfo &info);
    void SetpViewOffsets(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetcorrelationMaskCount(const Napi::CallbackInfo &info);
    void SetcorrelationMaskCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pCorrelationMasks;
    Napi::Value GetpCorrelationMasks(const Napi::CallbackInfo &info);
    void SetpCorrelationMasks(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkRenderPassMultiviewCreateInfo instance = {};

};

/** ## END VkRenderPassMultiviewCreateInfo ## **/

/** ## BEGIN VkPhysicalDeviceMultiviewPropertiesKHR ## **/

class _VkPhysicalDeviceMultiviewPropertiesKHR : public Napi::ObjectWrap<_VkPhysicalDeviceMultiviewPropertiesKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceMultiviewPropertiesKHR(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceMultiviewPropertiesKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmaxMultiviewViewCount(const Napi::CallbackInfo &info);
    Napi::Value GetmaxMultiviewInstanceIndex(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceMultiviewPropertiesKHR instance = {};

};

/** ## END VkPhysicalDeviceMultiviewPropertiesKHR ## **/

/** ## BEGIN VkPhysicalDeviceMultiviewProperties ## **/

class _VkPhysicalDeviceMultiviewProperties : public Napi::ObjectWrap<_VkPhysicalDeviceMultiviewProperties> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceMultiviewProperties(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceMultiviewProperties();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmaxMultiviewViewCount(const Napi::CallbackInfo &info);
    Napi::Value GetmaxMultiviewInstanceIndex(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceMultiviewProperties instance = {};

};

/** ## END VkPhysicalDeviceMultiviewProperties ## **/

/** ## BEGIN VkPhysicalDeviceMultiviewFeaturesKHR ## **/

class _VkPhysicalDeviceMultiviewFeaturesKHR : public Napi::ObjectWrap<_VkPhysicalDeviceMultiviewFeaturesKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceMultiviewFeaturesKHR(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceMultiviewFeaturesKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getmultiview(const Napi::CallbackInfo &info);
    void Setmultiview(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmultiviewGeometryShader(const Napi::CallbackInfo &info);
    void SetmultiviewGeometryShader(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmultiviewTessellationShader(const Napi::CallbackInfo &info);
    void SetmultiviewTessellationShader(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceMultiviewFeaturesKHR instance = {};

};

/** ## END VkPhysicalDeviceMultiviewFeaturesKHR ## **/

/** ## BEGIN VkPhysicalDeviceMultiviewFeatures ## **/

class _VkPhysicalDeviceMultiviewFeatures : public Napi::ObjectWrap<_VkPhysicalDeviceMultiviewFeatures> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceMultiviewFeatures(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceMultiviewFeatures();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getmultiview(const Napi::CallbackInfo &info);
    void Setmultiview(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmultiviewGeometryShader(const Napi::CallbackInfo &info);
    void SetmultiviewGeometryShader(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmultiviewTessellationShader(const Napi::CallbackInfo &info);
    void SetmultiviewTessellationShader(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceMultiviewFeatures instance = {};

};

/** ## END VkPhysicalDeviceMultiviewFeatures ## **/

/** ## BEGIN VkFenceGetFdInfoKHR ## **/

class _VkFenceGetFdInfoKHR : public Napi::ObjectWrap<_VkFenceGetFdInfoKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkFenceGetFdInfoKHR(const Napi::CallbackInfo &info);
    ~_VkFenceGetFdInfoKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference fence;
    Napi::Value Getfence(const Napi::CallbackInfo &info);
    void Setfence(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GethandleType(const Napi::CallbackInfo &info);
    void SethandleType(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkFenceGetFdInfoKHR instance = {};

};

/** ## END VkFenceGetFdInfoKHR ## **/

/** ## BEGIN VkImportFenceFdInfoKHR ## **/

class _VkImportFenceFdInfoKHR : public Napi::ObjectWrap<_VkImportFenceFdInfoKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkImportFenceFdInfoKHR(const Napi::CallbackInfo &info);
    ~_VkImportFenceFdInfoKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference fence;
    Napi::Value Getfence(const Napi::CallbackInfo &info);
    void Setfence(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GethandleType(const Napi::CallbackInfo &info);
    void SethandleType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getfd(const Napi::CallbackInfo &info);
    void Setfd(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkImportFenceFdInfoKHR instance = {};

};

/** ## END VkImportFenceFdInfoKHR ## **/

/** ## BEGIN VkFenceGetWin32HandleInfoKHR ## **/

class _VkFenceGetWin32HandleInfoKHR : public Napi::ObjectWrap<_VkFenceGetWin32HandleInfoKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkFenceGetWin32HandleInfoKHR(const Napi::CallbackInfo &info);
    ~_VkFenceGetWin32HandleInfoKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference fence;
    Napi::Value Getfence(const Napi::CallbackInfo &info);
    void Setfence(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GethandleType(const Napi::CallbackInfo &info);
    void SethandleType(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkFenceGetWin32HandleInfoKHR instance = {};

};

/** ## END VkFenceGetWin32HandleInfoKHR ## **/

/** ## BEGIN VkExportFenceWin32HandleInfoKHR ## **/

class _VkExportFenceWin32HandleInfoKHR : public Napi::ObjectWrap<_VkExportFenceWin32HandleInfoKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkExportFenceWin32HandleInfoKHR(const Napi::CallbackInfo &info);
    ~_VkExportFenceWin32HandleInfoKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkExportFenceWin32HandleInfoKHR instance = {};

};

/** ## END VkExportFenceWin32HandleInfoKHR ## **/

/** ## BEGIN VkImportFenceWin32HandleInfoKHR ## **/

class _VkImportFenceWin32HandleInfoKHR : public Napi::ObjectWrap<_VkImportFenceWin32HandleInfoKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkImportFenceWin32HandleInfoKHR(const Napi::CallbackInfo &info);
    ~_VkImportFenceWin32HandleInfoKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference fence;
    Napi::Value Getfence(const Napi::CallbackInfo &info);
    void Setfence(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GethandleType(const Napi::CallbackInfo &info);
    void SethandleType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Gethandle(const Napi::CallbackInfo &info);
    void Sethandle(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkImportFenceWin32HandleInfoKHR instance = {};

};

/** ## END VkImportFenceWin32HandleInfoKHR ## **/

/** ## BEGIN VkExportFenceCreateInfoKHR ## **/

class _VkExportFenceCreateInfoKHR : public Napi::ObjectWrap<_VkExportFenceCreateInfoKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkExportFenceCreateInfoKHR(const Napi::CallbackInfo &info);
    ~_VkExportFenceCreateInfoKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GethandleTypes(const Napi::CallbackInfo &info);
    void SethandleTypes(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkExportFenceCreateInfoKHR instance = {};

};

/** ## END VkExportFenceCreateInfoKHR ## **/

/** ## BEGIN VkExportFenceCreateInfo ## **/

class _VkExportFenceCreateInfo : public Napi::ObjectWrap<_VkExportFenceCreateInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkExportFenceCreateInfo(const Napi::CallbackInfo &info);
    ~_VkExportFenceCreateInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GethandleTypes(const Napi::CallbackInfo &info);
    void SethandleTypes(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkExportFenceCreateInfo instance = {};

};

/** ## END VkExportFenceCreateInfo ## **/

/** ## BEGIN VkExternalFencePropertiesKHR ## **/

class _VkExternalFencePropertiesKHR : public Napi::ObjectWrap<_VkExternalFencePropertiesKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkExternalFencePropertiesKHR(const Napi::CallbackInfo &info);
    ~_VkExternalFencePropertiesKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetexportFromImportedHandleTypes(const Napi::CallbackInfo &info);
    Napi::Value GetcompatibleHandleTypes(const Napi::CallbackInfo &info);
    Napi::Value GetexternalFenceFeatures(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkExternalFencePropertiesKHR instance = {};

};

/** ## END VkExternalFencePropertiesKHR ## **/

/** ## BEGIN VkExternalFenceProperties ## **/

class _VkExternalFenceProperties : public Napi::ObjectWrap<_VkExternalFenceProperties> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkExternalFenceProperties(const Napi::CallbackInfo &info);
    ~_VkExternalFenceProperties();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetexportFromImportedHandleTypes(const Napi::CallbackInfo &info);
    Napi::Value GetcompatibleHandleTypes(const Napi::CallbackInfo &info);
    Napi::Value GetexternalFenceFeatures(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkExternalFenceProperties instance = {};

};

/** ## END VkExternalFenceProperties ## **/

/** ## BEGIN VkPhysicalDeviceExternalFenceInfoKHR ## **/

class _VkPhysicalDeviceExternalFenceInfoKHR : public Napi::ObjectWrap<_VkPhysicalDeviceExternalFenceInfoKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceExternalFenceInfoKHR(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceExternalFenceInfoKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GethandleType(const Napi::CallbackInfo &info);
    void SethandleType(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceExternalFenceInfoKHR instance = {};

};

/** ## END VkPhysicalDeviceExternalFenceInfoKHR ## **/

/** ## BEGIN VkPhysicalDeviceExternalFenceInfo ## **/

class _VkPhysicalDeviceExternalFenceInfo : public Napi::ObjectWrap<_VkPhysicalDeviceExternalFenceInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceExternalFenceInfo(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceExternalFenceInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GethandleType(const Napi::CallbackInfo &info);
    void SethandleType(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceExternalFenceInfo instance = {};

};

/** ## END VkPhysicalDeviceExternalFenceInfo ## **/

/** ## BEGIN VkSemaphoreGetFdInfoKHR ## **/

class _VkSemaphoreGetFdInfoKHR : public Napi::ObjectWrap<_VkSemaphoreGetFdInfoKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkSemaphoreGetFdInfoKHR(const Napi::CallbackInfo &info);
    ~_VkSemaphoreGetFdInfoKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference semaphore;
    Napi::Value Getsemaphore(const Napi::CallbackInfo &info);
    void Setsemaphore(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GethandleType(const Napi::CallbackInfo &info);
    void SethandleType(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkSemaphoreGetFdInfoKHR instance = {};

};

/** ## END VkSemaphoreGetFdInfoKHR ## **/

/** ## BEGIN VkImportSemaphoreFdInfoKHR ## **/

class _VkImportSemaphoreFdInfoKHR : public Napi::ObjectWrap<_VkImportSemaphoreFdInfoKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkImportSemaphoreFdInfoKHR(const Napi::CallbackInfo &info);
    ~_VkImportSemaphoreFdInfoKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference semaphore;
    Napi::Value Getsemaphore(const Napi::CallbackInfo &info);
    void Setsemaphore(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GethandleType(const Napi::CallbackInfo &info);
    void SethandleType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getfd(const Napi::CallbackInfo &info);
    void Setfd(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkImportSemaphoreFdInfoKHR instance = {};

};

/** ## END VkImportSemaphoreFdInfoKHR ## **/

/** ## BEGIN VkSemaphoreGetWin32HandleInfoKHR ## **/

class _VkSemaphoreGetWin32HandleInfoKHR : public Napi::ObjectWrap<_VkSemaphoreGetWin32HandleInfoKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkSemaphoreGetWin32HandleInfoKHR(const Napi::CallbackInfo &info);
    ~_VkSemaphoreGetWin32HandleInfoKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference semaphore;
    Napi::Value Getsemaphore(const Napi::CallbackInfo &info);
    void Setsemaphore(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GethandleType(const Napi::CallbackInfo &info);
    void SethandleType(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkSemaphoreGetWin32HandleInfoKHR instance = {};

};

/** ## END VkSemaphoreGetWin32HandleInfoKHR ## **/

/** ## BEGIN VkD3D12FenceSubmitInfoKHR ## **/

class _VkD3D12FenceSubmitInfoKHR : public Napi::ObjectWrap<_VkD3D12FenceSubmitInfoKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkD3D12FenceSubmitInfoKHR(const Napi::CallbackInfo &info);
    ~_VkD3D12FenceSubmitInfoKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetwaitSemaphoreValuesCount(const Napi::CallbackInfo &info);
    void SetwaitSemaphoreValuesCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pWaitSemaphoreValues;
    Napi::Value GetpWaitSemaphoreValues(const Napi::CallbackInfo &info);
    void SetpWaitSemaphoreValues(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetsignalSemaphoreValuesCount(const Napi::CallbackInfo &info);
    void SetsignalSemaphoreValuesCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pSignalSemaphoreValues;
    Napi::Value GetpSignalSemaphoreValues(const Napi::CallbackInfo &info);
    void SetpSignalSemaphoreValues(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkD3D12FenceSubmitInfoKHR instance = {};

};

/** ## END VkD3D12FenceSubmitInfoKHR ## **/

/** ## BEGIN VkExportSemaphoreWin32HandleInfoKHR ## **/

class _VkExportSemaphoreWin32HandleInfoKHR : public Napi::ObjectWrap<_VkExportSemaphoreWin32HandleInfoKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkExportSemaphoreWin32HandleInfoKHR(const Napi::CallbackInfo &info);
    ~_VkExportSemaphoreWin32HandleInfoKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkExportSemaphoreWin32HandleInfoKHR instance = {};

};

/** ## END VkExportSemaphoreWin32HandleInfoKHR ## **/

/** ## BEGIN VkImportSemaphoreWin32HandleInfoKHR ## **/

class _VkImportSemaphoreWin32HandleInfoKHR : public Napi::ObjectWrap<_VkImportSemaphoreWin32HandleInfoKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkImportSemaphoreWin32HandleInfoKHR(const Napi::CallbackInfo &info);
    ~_VkImportSemaphoreWin32HandleInfoKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference semaphore;
    Napi::Value Getsemaphore(const Napi::CallbackInfo &info);
    void Setsemaphore(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GethandleType(const Napi::CallbackInfo &info);
    void SethandleType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Gethandle(const Napi::CallbackInfo &info);
    void Sethandle(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkImportSemaphoreWin32HandleInfoKHR instance = {};

};

/** ## END VkImportSemaphoreWin32HandleInfoKHR ## **/

/** ## BEGIN VkExportSemaphoreCreateInfoKHR ## **/

class _VkExportSemaphoreCreateInfoKHR : public Napi::ObjectWrap<_VkExportSemaphoreCreateInfoKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkExportSemaphoreCreateInfoKHR(const Napi::CallbackInfo &info);
    ~_VkExportSemaphoreCreateInfoKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GethandleTypes(const Napi::CallbackInfo &info);
    void SethandleTypes(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkExportSemaphoreCreateInfoKHR instance = {};

};

/** ## END VkExportSemaphoreCreateInfoKHR ## **/

/** ## BEGIN VkExportSemaphoreCreateInfo ## **/

class _VkExportSemaphoreCreateInfo : public Napi::ObjectWrap<_VkExportSemaphoreCreateInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkExportSemaphoreCreateInfo(const Napi::CallbackInfo &info);
    ~_VkExportSemaphoreCreateInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GethandleTypes(const Napi::CallbackInfo &info);
    void SethandleTypes(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkExportSemaphoreCreateInfo instance = {};

};

/** ## END VkExportSemaphoreCreateInfo ## **/

/** ## BEGIN VkExternalSemaphorePropertiesKHR ## **/

class _VkExternalSemaphorePropertiesKHR : public Napi::ObjectWrap<_VkExternalSemaphorePropertiesKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkExternalSemaphorePropertiesKHR(const Napi::CallbackInfo &info);
    ~_VkExternalSemaphorePropertiesKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetexportFromImportedHandleTypes(const Napi::CallbackInfo &info);
    Napi::Value GetcompatibleHandleTypes(const Napi::CallbackInfo &info);
    Napi::Value GetexternalSemaphoreFeatures(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkExternalSemaphorePropertiesKHR instance = {};

};

/** ## END VkExternalSemaphorePropertiesKHR ## **/

/** ## BEGIN VkExternalSemaphoreProperties ## **/

class _VkExternalSemaphoreProperties : public Napi::ObjectWrap<_VkExternalSemaphoreProperties> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkExternalSemaphoreProperties(const Napi::CallbackInfo &info);
    ~_VkExternalSemaphoreProperties();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetexportFromImportedHandleTypes(const Napi::CallbackInfo &info);
    Napi::Value GetcompatibleHandleTypes(const Napi::CallbackInfo &info);
    Napi::Value GetexternalSemaphoreFeatures(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkExternalSemaphoreProperties instance = {};

};

/** ## END VkExternalSemaphoreProperties ## **/

/** ## BEGIN VkPhysicalDeviceExternalSemaphoreInfoKHR ## **/

class _VkPhysicalDeviceExternalSemaphoreInfoKHR : public Napi::ObjectWrap<_VkPhysicalDeviceExternalSemaphoreInfoKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceExternalSemaphoreInfoKHR(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceExternalSemaphoreInfoKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GethandleType(const Napi::CallbackInfo &info);
    void SethandleType(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceExternalSemaphoreInfoKHR instance = {};

};

/** ## END VkPhysicalDeviceExternalSemaphoreInfoKHR ## **/

/** ## BEGIN VkPhysicalDeviceExternalSemaphoreInfo ## **/

class _VkPhysicalDeviceExternalSemaphoreInfo : public Napi::ObjectWrap<_VkPhysicalDeviceExternalSemaphoreInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceExternalSemaphoreInfo(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceExternalSemaphoreInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GethandleType(const Napi::CallbackInfo &info);
    void SethandleType(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceExternalSemaphoreInfo instance = {};

};

/** ## END VkPhysicalDeviceExternalSemaphoreInfo ## **/

/** ## BEGIN VkWin32KeyedMutexAcquireReleaseInfoKHR ## **/

class _VkWin32KeyedMutexAcquireReleaseInfoKHR : public Napi::ObjectWrap<_VkWin32KeyedMutexAcquireReleaseInfoKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkWin32KeyedMutexAcquireReleaseInfoKHR(const Napi::CallbackInfo &info);
    ~_VkWin32KeyedMutexAcquireReleaseInfoKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetacquireCount(const Napi::CallbackInfo &info);
    void SetacquireCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkDeviceMemory>* vpAcquireSyncs;
    Napi::ObjectReference pAcquireSyncs;
    Napi::Value GetpAcquireSyncs(const Napi::CallbackInfo &info);
    void SetpAcquireSyncs(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pAcquireKeys;
    Napi::Value GetpAcquireKeys(const Napi::CallbackInfo &info);
    void SetpAcquireKeys(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pAcquireTimeouts;
    Napi::Value GetpAcquireTimeouts(const Napi::CallbackInfo &info);
    void SetpAcquireTimeouts(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetreleaseCount(const Napi::CallbackInfo &info);
    void SetreleaseCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkDeviceMemory>* vpReleaseSyncs;
    Napi::ObjectReference pReleaseSyncs;
    Napi::Value GetpReleaseSyncs(const Napi::CallbackInfo &info);
    void SetpReleaseSyncs(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pReleaseKeys;
    Napi::Value GetpReleaseKeys(const Napi::CallbackInfo &info);
    void SetpReleaseKeys(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkWin32KeyedMutexAcquireReleaseInfoKHR instance = {};

};

/** ## END VkWin32KeyedMutexAcquireReleaseInfoKHR ## **/

/** ## BEGIN VkMemoryGetFdInfoKHR ## **/

class _VkMemoryGetFdInfoKHR : public Napi::ObjectWrap<_VkMemoryGetFdInfoKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkMemoryGetFdInfoKHR(const Napi::CallbackInfo &info);
    ~_VkMemoryGetFdInfoKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference memory;
    Napi::Value Getmemory(const Napi::CallbackInfo &info);
    void Setmemory(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GethandleType(const Napi::CallbackInfo &info);
    void SethandleType(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkMemoryGetFdInfoKHR instance = {};

};

/** ## END VkMemoryGetFdInfoKHR ## **/

/** ## BEGIN VkMemoryFdPropertiesKHR ## **/

class _VkMemoryFdPropertiesKHR : public Napi::ObjectWrap<_VkMemoryFdPropertiesKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkMemoryFdPropertiesKHR(const Napi::CallbackInfo &info);
    ~_VkMemoryFdPropertiesKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmemoryTypeBits(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkMemoryFdPropertiesKHR instance = {};

};

/** ## END VkMemoryFdPropertiesKHR ## **/

/** ## BEGIN VkImportMemoryFdInfoKHR ## **/

class _VkImportMemoryFdInfoKHR : public Napi::ObjectWrap<_VkImportMemoryFdInfoKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkImportMemoryFdInfoKHR(const Napi::CallbackInfo &info);
    ~_VkImportMemoryFdInfoKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GethandleType(const Napi::CallbackInfo &info);
    void SethandleType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getfd(const Napi::CallbackInfo &info);
    void Setfd(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkImportMemoryFdInfoKHR instance = {};

};

/** ## END VkImportMemoryFdInfoKHR ## **/

/** ## BEGIN VkMemoryGetWin32HandleInfoKHR ## **/

class _VkMemoryGetWin32HandleInfoKHR : public Napi::ObjectWrap<_VkMemoryGetWin32HandleInfoKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkMemoryGetWin32HandleInfoKHR(const Napi::CallbackInfo &info);
    ~_VkMemoryGetWin32HandleInfoKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference memory;
    Napi::Value Getmemory(const Napi::CallbackInfo &info);
    void Setmemory(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GethandleType(const Napi::CallbackInfo &info);
    void SethandleType(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkMemoryGetWin32HandleInfoKHR instance = {};

};

/** ## END VkMemoryGetWin32HandleInfoKHR ## **/

/** ## BEGIN VkMemoryWin32HandlePropertiesKHR ## **/

class _VkMemoryWin32HandlePropertiesKHR : public Napi::ObjectWrap<_VkMemoryWin32HandlePropertiesKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkMemoryWin32HandlePropertiesKHR(const Napi::CallbackInfo &info);
    ~_VkMemoryWin32HandlePropertiesKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmemoryTypeBits(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkMemoryWin32HandlePropertiesKHR instance = {};

};

/** ## END VkMemoryWin32HandlePropertiesKHR ## **/

/** ## BEGIN VkExportMemoryWin32HandleInfoKHR ## **/

class _VkExportMemoryWin32HandleInfoKHR : public Napi::ObjectWrap<_VkExportMemoryWin32HandleInfoKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkExportMemoryWin32HandleInfoKHR(const Napi::CallbackInfo &info);
    ~_VkExportMemoryWin32HandleInfoKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkExportMemoryWin32HandleInfoKHR instance = {};

};

/** ## END VkExportMemoryWin32HandleInfoKHR ## **/

/** ## BEGIN VkImportMemoryWin32HandleInfoKHR ## **/

class _VkImportMemoryWin32HandleInfoKHR : public Napi::ObjectWrap<_VkImportMemoryWin32HandleInfoKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkImportMemoryWin32HandleInfoKHR(const Napi::CallbackInfo &info);
    ~_VkImportMemoryWin32HandleInfoKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GethandleType(const Napi::CallbackInfo &info);
    void SethandleType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Gethandle(const Napi::CallbackInfo &info);
    void Sethandle(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkImportMemoryWin32HandleInfoKHR instance = {};

};

/** ## END VkImportMemoryWin32HandleInfoKHR ## **/

/** ## BEGIN VkExportMemoryAllocateInfoKHR ## **/

class _VkExportMemoryAllocateInfoKHR : public Napi::ObjectWrap<_VkExportMemoryAllocateInfoKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkExportMemoryAllocateInfoKHR(const Napi::CallbackInfo &info);
    ~_VkExportMemoryAllocateInfoKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GethandleTypes(const Napi::CallbackInfo &info);
    void SethandleTypes(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkExportMemoryAllocateInfoKHR instance = {};

};

/** ## END VkExportMemoryAllocateInfoKHR ## **/

/** ## BEGIN VkExportMemoryAllocateInfo ## **/

class _VkExportMemoryAllocateInfo : public Napi::ObjectWrap<_VkExportMemoryAllocateInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkExportMemoryAllocateInfo(const Napi::CallbackInfo &info);
    ~_VkExportMemoryAllocateInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GethandleTypes(const Napi::CallbackInfo &info);
    void SethandleTypes(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkExportMemoryAllocateInfo instance = {};

};

/** ## END VkExportMemoryAllocateInfo ## **/

/** ## BEGIN VkExternalMemoryBufferCreateInfoKHR ## **/

class _VkExternalMemoryBufferCreateInfoKHR : public Napi::ObjectWrap<_VkExternalMemoryBufferCreateInfoKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkExternalMemoryBufferCreateInfoKHR(const Napi::CallbackInfo &info);
    ~_VkExternalMemoryBufferCreateInfoKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GethandleTypes(const Napi::CallbackInfo &info);
    void SethandleTypes(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkExternalMemoryBufferCreateInfoKHR instance = {};

};

/** ## END VkExternalMemoryBufferCreateInfoKHR ## **/

/** ## BEGIN VkExternalMemoryBufferCreateInfo ## **/

class _VkExternalMemoryBufferCreateInfo : public Napi::ObjectWrap<_VkExternalMemoryBufferCreateInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkExternalMemoryBufferCreateInfo(const Napi::CallbackInfo &info);
    ~_VkExternalMemoryBufferCreateInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GethandleTypes(const Napi::CallbackInfo &info);
    void SethandleTypes(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkExternalMemoryBufferCreateInfo instance = {};

};

/** ## END VkExternalMemoryBufferCreateInfo ## **/

/** ## BEGIN VkExternalMemoryImageCreateInfoKHR ## **/

class _VkExternalMemoryImageCreateInfoKHR : public Napi::ObjectWrap<_VkExternalMemoryImageCreateInfoKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkExternalMemoryImageCreateInfoKHR(const Napi::CallbackInfo &info);
    ~_VkExternalMemoryImageCreateInfoKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GethandleTypes(const Napi::CallbackInfo &info);
    void SethandleTypes(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkExternalMemoryImageCreateInfoKHR instance = {};

};

/** ## END VkExternalMemoryImageCreateInfoKHR ## **/

/** ## BEGIN VkExternalMemoryImageCreateInfo ## **/

class _VkExternalMemoryImageCreateInfo : public Napi::ObjectWrap<_VkExternalMemoryImageCreateInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkExternalMemoryImageCreateInfo(const Napi::CallbackInfo &info);
    ~_VkExternalMemoryImageCreateInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GethandleTypes(const Napi::CallbackInfo &info);
    void SethandleTypes(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkExternalMemoryImageCreateInfo instance = {};

};

/** ## END VkExternalMemoryImageCreateInfo ## **/

/** ## BEGIN VkPhysicalDeviceIDPropertiesKHR ## **/

class _VkPhysicalDeviceIDPropertiesKHR : public Napi::ObjectWrap<_VkPhysicalDeviceIDPropertiesKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceIDPropertiesKHR(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceIDPropertiesKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<uint8_t>* vdeviceUUID;
    Napi::ObjectReference deviceUUID;
    Napi::Value GetdeviceUUID(const Napi::CallbackInfo &info);
    std::vector<uint8_t>* vdriverUUID;
    Napi::ObjectReference driverUUID;
    Napi::Value GetdriverUUID(const Napi::CallbackInfo &info);
    std::vector<uint8_t>* vdeviceLUID;
    Napi::ObjectReference deviceLUID;
    Napi::Value GetdeviceLUID(const Napi::CallbackInfo &info);
    Napi::Value GetdeviceNodeMask(const Napi::CallbackInfo &info);
    Napi::Value GetdeviceLUIDValid(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceIDPropertiesKHR instance = {};

};

/** ## END VkPhysicalDeviceIDPropertiesKHR ## **/

/** ## BEGIN VkPhysicalDeviceIDProperties ## **/

class _VkPhysicalDeviceIDProperties : public Napi::ObjectWrap<_VkPhysicalDeviceIDProperties> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceIDProperties(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceIDProperties();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<uint8_t>* vdeviceUUID;
    Napi::ObjectReference deviceUUID;
    Napi::Value GetdeviceUUID(const Napi::CallbackInfo &info);
    std::vector<uint8_t>* vdriverUUID;
    Napi::ObjectReference driverUUID;
    Napi::Value GetdriverUUID(const Napi::CallbackInfo &info);
    std::vector<uint8_t>* vdeviceLUID;
    Napi::ObjectReference deviceLUID;
    Napi::Value GetdeviceLUID(const Napi::CallbackInfo &info);
    Napi::Value GetdeviceNodeMask(const Napi::CallbackInfo &info);
    Napi::Value GetdeviceLUIDValid(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceIDProperties instance = {};

};

/** ## END VkPhysicalDeviceIDProperties ## **/

/** ## BEGIN VkExternalBufferPropertiesKHR ## **/

class _VkExternalBufferPropertiesKHR : public Napi::ObjectWrap<_VkExternalBufferPropertiesKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkExternalBufferPropertiesKHR(const Napi::CallbackInfo &info);
    ~_VkExternalBufferPropertiesKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference externalMemoryProperties;
    Napi::Value GetexternalMemoryProperties(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkExternalBufferPropertiesKHR instance = {};

};

/** ## END VkExternalBufferPropertiesKHR ## **/

/** ## BEGIN VkExternalBufferProperties ## **/

class _VkExternalBufferProperties : public Napi::ObjectWrap<_VkExternalBufferProperties> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkExternalBufferProperties(const Napi::CallbackInfo &info);
    ~_VkExternalBufferProperties();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference externalMemoryProperties;
    Napi::Value GetexternalMemoryProperties(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkExternalBufferProperties instance = {};

};

/** ## END VkExternalBufferProperties ## **/

/** ## BEGIN VkPhysicalDeviceExternalBufferInfoKHR ## **/

class _VkPhysicalDeviceExternalBufferInfoKHR : public Napi::ObjectWrap<_VkPhysicalDeviceExternalBufferInfoKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceExternalBufferInfoKHR(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceExternalBufferInfoKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getusage(const Napi::CallbackInfo &info);
    void Setusage(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GethandleType(const Napi::CallbackInfo &info);
    void SethandleType(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceExternalBufferInfoKHR instance = {};

};

/** ## END VkPhysicalDeviceExternalBufferInfoKHR ## **/

/** ## BEGIN VkPhysicalDeviceExternalBufferInfo ## **/

class _VkPhysicalDeviceExternalBufferInfo : public Napi::ObjectWrap<_VkPhysicalDeviceExternalBufferInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceExternalBufferInfo(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceExternalBufferInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getusage(const Napi::CallbackInfo &info);
    void Setusage(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GethandleType(const Napi::CallbackInfo &info);
    void SethandleType(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceExternalBufferInfo instance = {};

};

/** ## END VkPhysicalDeviceExternalBufferInfo ## **/

/** ## BEGIN VkExternalImageFormatPropertiesKHR ## **/

class _VkExternalImageFormatPropertiesKHR : public Napi::ObjectWrap<_VkExternalImageFormatPropertiesKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkExternalImageFormatPropertiesKHR(const Napi::CallbackInfo &info);
    ~_VkExternalImageFormatPropertiesKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference externalMemoryProperties;
    Napi::Value GetexternalMemoryProperties(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkExternalImageFormatPropertiesKHR instance = {};

};

/** ## END VkExternalImageFormatPropertiesKHR ## **/

/** ## BEGIN VkExternalImageFormatProperties ## **/

class _VkExternalImageFormatProperties : public Napi::ObjectWrap<_VkExternalImageFormatProperties> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkExternalImageFormatProperties(const Napi::CallbackInfo &info);
    ~_VkExternalImageFormatProperties();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference externalMemoryProperties;
    Napi::Value GetexternalMemoryProperties(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkExternalImageFormatProperties instance = {};

};

/** ## END VkExternalImageFormatProperties ## **/

/** ## BEGIN VkPhysicalDeviceExternalImageFormatInfoKHR ## **/

class _VkPhysicalDeviceExternalImageFormatInfoKHR : public Napi::ObjectWrap<_VkPhysicalDeviceExternalImageFormatInfoKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceExternalImageFormatInfoKHR(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceExternalImageFormatInfoKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GethandleType(const Napi::CallbackInfo &info);
    void SethandleType(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceExternalImageFormatInfoKHR instance = {};

};

/** ## END VkPhysicalDeviceExternalImageFormatInfoKHR ## **/

/** ## BEGIN VkPhysicalDeviceExternalImageFormatInfo ## **/

class _VkPhysicalDeviceExternalImageFormatInfo : public Napi::ObjectWrap<_VkPhysicalDeviceExternalImageFormatInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceExternalImageFormatInfo(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceExternalImageFormatInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GethandleType(const Napi::CallbackInfo &info);
    void SethandleType(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceExternalImageFormatInfo instance = {};

};

/** ## END VkPhysicalDeviceExternalImageFormatInfo ## **/

/** ## BEGIN VkExternalMemoryPropertiesKHR ## **/

class _VkExternalMemoryPropertiesKHR : public Napi::ObjectWrap<_VkExternalMemoryPropertiesKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkExternalMemoryPropertiesKHR(const Napi::CallbackInfo &info);
    ~_VkExternalMemoryPropertiesKHR();

    // #accessors
    Napi::Value GetexternalMemoryFeatures(const Napi::CallbackInfo &info);
    Napi::Value GetexportFromImportedHandleTypes(const Napi::CallbackInfo &info);
    Napi::Value GetcompatibleHandleTypes(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkExternalMemoryPropertiesKHR instance = {};

};

/** ## END VkExternalMemoryPropertiesKHR ## **/

/** ## BEGIN VkExternalMemoryProperties ## **/

class _VkExternalMemoryProperties : public Napi::ObjectWrap<_VkExternalMemoryProperties> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkExternalMemoryProperties(const Napi::CallbackInfo &info);
    ~_VkExternalMemoryProperties();

    // #accessors
    Napi::Value GetexternalMemoryFeatures(const Napi::CallbackInfo &info);
    Napi::Value GetexportFromImportedHandleTypes(const Napi::CallbackInfo &info);
    Napi::Value GetcompatibleHandleTypes(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkExternalMemoryProperties instance = {};

};

/** ## END VkExternalMemoryProperties ## **/

/** ## BEGIN VkPhysicalDeviceVariablePointerFeaturesKHR ## **/

class _VkPhysicalDeviceVariablePointerFeaturesKHR : public Napi::ObjectWrap<_VkPhysicalDeviceVariablePointerFeaturesKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceVariablePointerFeaturesKHR(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceVariablePointerFeaturesKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetvariablePointersStorageBuffer(const Napi::CallbackInfo &info);
    void SetvariablePointersStorageBuffer(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetvariablePointers(const Napi::CallbackInfo &info);
    void SetvariablePointers(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceVariablePointerFeaturesKHR instance = {};

};

/** ## END VkPhysicalDeviceVariablePointerFeaturesKHR ## **/

/** ## BEGIN VkPhysicalDeviceVariablePointerFeatures ## **/

class _VkPhysicalDeviceVariablePointerFeatures : public Napi::ObjectWrap<_VkPhysicalDeviceVariablePointerFeatures> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceVariablePointerFeatures(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceVariablePointerFeatures();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetvariablePointersStorageBuffer(const Napi::CallbackInfo &info);
    void SetvariablePointersStorageBuffer(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetvariablePointers(const Napi::CallbackInfo &info);
    void SetvariablePointers(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceVariablePointerFeatures instance = {};

};

/** ## END VkPhysicalDeviceVariablePointerFeatures ## **/

/** ## BEGIN VkRectLayerKHR ## **/

class _VkRectLayerKHR : public Napi::ObjectWrap<_VkRectLayerKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkRectLayerKHR(const Napi::CallbackInfo &info);
    ~_VkRectLayerKHR();

    // #accessors
    Napi::ObjectReference offset;
    Napi::Value Getoffset(const Napi::CallbackInfo &info);
    void Setoffset(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference extent;
    Napi::Value Getextent(const Napi::CallbackInfo &info);
    void Setextent(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getlayer(const Napi::CallbackInfo &info);
    void Setlayer(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkRectLayerKHR instance = {};

};

/** ## END VkRectLayerKHR ## **/

/** ## BEGIN VkPresentRegionKHR ## **/

class _VkPresentRegionKHR : public Napi::ObjectWrap<_VkPresentRegionKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPresentRegionKHR(const Napi::CallbackInfo &info);
    ~_VkPresentRegionKHR();

    // #accessors
    Napi::Value GetrectangleCount(const Napi::CallbackInfo &info);
    void SetrectangleCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkRectLayerKHR>* vpRectangles;
    Napi::ObjectReference pRectangles;
    Napi::Value GetpRectangles(const Napi::CallbackInfo &info);
    void SetpRectangles(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPresentRegionKHR instance = {};

};

/** ## END VkPresentRegionKHR ## **/

/** ## BEGIN VkPresentRegionsKHR ## **/

class _VkPresentRegionsKHR : public Napi::ObjectWrap<_VkPresentRegionsKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPresentRegionsKHR(const Napi::CallbackInfo &info);
    ~_VkPresentRegionsKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetswapchainCount(const Napi::CallbackInfo &info);
    void SetswapchainCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkPresentRegionKHR>* vpRegions;
    Napi::ObjectReference pRegions;
    Napi::Value GetpRegions(const Napi::CallbackInfo &info);
    void SetpRegions(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPresentRegionsKHR instance = {};

};

/** ## END VkPresentRegionsKHR ## **/

/** ## BEGIN VkPhysicalDeviceDriverPropertiesKHR ## **/

class _VkPhysicalDeviceDriverPropertiesKHR : public Napi::ObjectWrap<_VkPhysicalDeviceDriverPropertiesKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceDriverPropertiesKHR(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceDriverPropertiesKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdriverID(const Napi::CallbackInfo &info);
    Napi::ObjectReference driverName;
    Napi::Value GetdriverName(const Napi::CallbackInfo &info);
    Napi::ObjectReference driverInfo;
    Napi::Value GetdriverInfo(const Napi::CallbackInfo &info);
    Napi::ObjectReference conformanceVersion;
    Napi::Value GetconformanceVersion(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceDriverPropertiesKHR instance = {};

};

/** ## END VkPhysicalDeviceDriverPropertiesKHR ## **/

/** ## BEGIN VkConformanceVersionKHR ## **/

class _VkConformanceVersionKHR : public Napi::ObjectWrap<_VkConformanceVersionKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkConformanceVersionKHR(const Napi::CallbackInfo &info);
    ~_VkConformanceVersionKHR();

    // #accessors
    Napi::Value Getmajor(const Napi::CallbackInfo &info);
    void Setmajor(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getminor(const Napi::CallbackInfo &info);
    void Setminor(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getsubminor(const Napi::CallbackInfo &info);
    void Setsubminor(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getpatch(const Napi::CallbackInfo &info);
    void Setpatch(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkConformanceVersionKHR instance = {};

};

/** ## END VkConformanceVersionKHR ## **/

/** ## BEGIN VkPhysicalDevicePushDescriptorPropertiesKHR ## **/

class _VkPhysicalDevicePushDescriptorPropertiesKHR : public Napi::ObjectWrap<_VkPhysicalDevicePushDescriptorPropertiesKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDevicePushDescriptorPropertiesKHR(const Napi::CallbackInfo &info);
    ~_VkPhysicalDevicePushDescriptorPropertiesKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmaxPushDescriptors(const Napi::CallbackInfo &info);
    void SetmaxPushDescriptors(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDevicePushDescriptorPropertiesKHR instance = {};

};

/** ## END VkPhysicalDevicePushDescriptorPropertiesKHR ## **/

/** ## BEGIN VkPhysicalDeviceSparseImageFormatInfo2KHR ## **/

class _VkPhysicalDeviceSparseImageFormatInfo2KHR : public Napi::ObjectWrap<_VkPhysicalDeviceSparseImageFormatInfo2KHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceSparseImageFormatInfo2KHR(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceSparseImageFormatInfo2KHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getformat(const Napi::CallbackInfo &info);
    void Setformat(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Gettype(const Napi::CallbackInfo &info);
    void Settype(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getsamples(const Napi::CallbackInfo &info);
    void Setsamples(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getusage(const Napi::CallbackInfo &info);
    void Setusage(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Gettiling(const Napi::CallbackInfo &info);
    void Settiling(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceSparseImageFormatInfo2KHR instance = {};

};

/** ## END VkPhysicalDeviceSparseImageFormatInfo2KHR ## **/

/** ## BEGIN VkPhysicalDeviceSparseImageFormatInfo2 ## **/

class _VkPhysicalDeviceSparseImageFormatInfo2 : public Napi::ObjectWrap<_VkPhysicalDeviceSparseImageFormatInfo2> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceSparseImageFormatInfo2(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceSparseImageFormatInfo2();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getformat(const Napi::CallbackInfo &info);
    void Setformat(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Gettype(const Napi::CallbackInfo &info);
    void Settype(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getsamples(const Napi::CallbackInfo &info);
    void Setsamples(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getusage(const Napi::CallbackInfo &info);
    void Setusage(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Gettiling(const Napi::CallbackInfo &info);
    void Settiling(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceSparseImageFormatInfo2 instance = {};

};

/** ## END VkPhysicalDeviceSparseImageFormatInfo2 ## **/

/** ## BEGIN VkSparseImageFormatProperties2KHR ## **/

class _VkSparseImageFormatProperties2KHR : public Napi::ObjectWrap<_VkSparseImageFormatProperties2KHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkSparseImageFormatProperties2KHR(const Napi::CallbackInfo &info);
    ~_VkSparseImageFormatProperties2KHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference properties;
    Napi::Value Getproperties(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkSparseImageFormatProperties2KHR instance = {};

};

/** ## END VkSparseImageFormatProperties2KHR ## **/

/** ## BEGIN VkSparseImageFormatProperties2 ## **/

class _VkSparseImageFormatProperties2 : public Napi::ObjectWrap<_VkSparseImageFormatProperties2> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkSparseImageFormatProperties2(const Napi::CallbackInfo &info);
    ~_VkSparseImageFormatProperties2();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference properties;
    Napi::Value Getproperties(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkSparseImageFormatProperties2 instance = {};

};

/** ## END VkSparseImageFormatProperties2 ## **/

/** ## BEGIN VkPhysicalDeviceMemoryProperties2KHR ## **/

class _VkPhysicalDeviceMemoryProperties2KHR : public Napi::ObjectWrap<_VkPhysicalDeviceMemoryProperties2KHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceMemoryProperties2KHR(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceMemoryProperties2KHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference memoryProperties;
    Napi::Value GetmemoryProperties(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceMemoryProperties2KHR instance = {};

};

/** ## END VkPhysicalDeviceMemoryProperties2KHR ## **/

/** ## BEGIN VkPhysicalDeviceMemoryProperties2 ## **/

class _VkPhysicalDeviceMemoryProperties2 : public Napi::ObjectWrap<_VkPhysicalDeviceMemoryProperties2> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceMemoryProperties2(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceMemoryProperties2();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference memoryProperties;
    Napi::Value GetmemoryProperties(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceMemoryProperties2 instance = {};

};

/** ## END VkPhysicalDeviceMemoryProperties2 ## **/

/** ## BEGIN VkQueueFamilyProperties2KHR ## **/

class _VkQueueFamilyProperties2KHR : public Napi::ObjectWrap<_VkQueueFamilyProperties2KHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkQueueFamilyProperties2KHR(const Napi::CallbackInfo &info);
    ~_VkQueueFamilyProperties2KHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference queueFamilyProperties;
    Napi::Value GetqueueFamilyProperties(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkQueueFamilyProperties2KHR instance = {};

};

/** ## END VkQueueFamilyProperties2KHR ## **/

/** ## BEGIN VkQueueFamilyProperties2 ## **/

class _VkQueueFamilyProperties2 : public Napi::ObjectWrap<_VkQueueFamilyProperties2> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkQueueFamilyProperties2(const Napi::CallbackInfo &info);
    ~_VkQueueFamilyProperties2();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference queueFamilyProperties;
    Napi::Value GetqueueFamilyProperties(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkQueueFamilyProperties2 instance = {};

};

/** ## END VkQueueFamilyProperties2 ## **/

/** ## BEGIN VkPhysicalDeviceImageFormatInfo2KHR ## **/

class _VkPhysicalDeviceImageFormatInfo2KHR : public Napi::ObjectWrap<_VkPhysicalDeviceImageFormatInfo2KHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceImageFormatInfo2KHR(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceImageFormatInfo2KHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getformat(const Napi::CallbackInfo &info);
    void Setformat(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Gettype(const Napi::CallbackInfo &info);
    void Settype(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Gettiling(const Napi::CallbackInfo &info);
    void Settiling(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getusage(const Napi::CallbackInfo &info);
    void Setusage(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceImageFormatInfo2KHR instance = {};

};

/** ## END VkPhysicalDeviceImageFormatInfo2KHR ## **/

/** ## BEGIN VkPhysicalDeviceImageFormatInfo2 ## **/

class _VkPhysicalDeviceImageFormatInfo2 : public Napi::ObjectWrap<_VkPhysicalDeviceImageFormatInfo2> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceImageFormatInfo2(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceImageFormatInfo2();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getformat(const Napi::CallbackInfo &info);
    void Setformat(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Gettype(const Napi::CallbackInfo &info);
    void Settype(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Gettiling(const Napi::CallbackInfo &info);
    void Settiling(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getusage(const Napi::CallbackInfo &info);
    void Setusage(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceImageFormatInfo2 instance = {};

};

/** ## END VkPhysicalDeviceImageFormatInfo2 ## **/

/** ## BEGIN VkImageFormatProperties2KHR ## **/

class _VkImageFormatProperties2KHR : public Napi::ObjectWrap<_VkImageFormatProperties2KHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkImageFormatProperties2KHR(const Napi::CallbackInfo &info);
    ~_VkImageFormatProperties2KHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference imageFormatProperties;
    Napi::Value GetimageFormatProperties(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkImageFormatProperties2KHR instance = {};

};

/** ## END VkImageFormatProperties2KHR ## **/

/** ## BEGIN VkImageFormatProperties2 ## **/

class _VkImageFormatProperties2 : public Napi::ObjectWrap<_VkImageFormatProperties2> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkImageFormatProperties2(const Napi::CallbackInfo &info);
    ~_VkImageFormatProperties2();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference imageFormatProperties;
    Napi::Value GetimageFormatProperties(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkImageFormatProperties2 instance = {};

};

/** ## END VkImageFormatProperties2 ## **/

/** ## BEGIN VkFormatProperties2KHR ## **/

class _VkFormatProperties2KHR : public Napi::ObjectWrap<_VkFormatProperties2KHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkFormatProperties2KHR(const Napi::CallbackInfo &info);
    ~_VkFormatProperties2KHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference formatProperties;
    Napi::Value GetformatProperties(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkFormatProperties2KHR instance = {};

};

/** ## END VkFormatProperties2KHR ## **/

/** ## BEGIN VkFormatProperties2 ## **/

class _VkFormatProperties2 : public Napi::ObjectWrap<_VkFormatProperties2> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkFormatProperties2(const Napi::CallbackInfo &info);
    ~_VkFormatProperties2();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference formatProperties;
    Napi::Value GetformatProperties(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkFormatProperties2 instance = {};

};

/** ## END VkFormatProperties2 ## **/

/** ## BEGIN VkPhysicalDeviceProperties2KHR ## **/

class _VkPhysicalDeviceProperties2KHR : public Napi::ObjectWrap<_VkPhysicalDeviceProperties2KHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceProperties2KHR(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceProperties2KHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference properties;
    Napi::Value Getproperties(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceProperties2KHR instance = {};

};

/** ## END VkPhysicalDeviceProperties2KHR ## **/

/** ## BEGIN VkPhysicalDeviceProperties2 ## **/

class _VkPhysicalDeviceProperties2 : public Napi::ObjectWrap<_VkPhysicalDeviceProperties2> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceProperties2(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceProperties2();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference properties;
    Napi::Value Getproperties(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceProperties2 instance = {};

};

/** ## END VkPhysicalDeviceProperties2 ## **/

/** ## BEGIN VkPhysicalDeviceFeatures2KHR ## **/

class _VkPhysicalDeviceFeatures2KHR : public Napi::ObjectWrap<_VkPhysicalDeviceFeatures2KHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceFeatures2KHR(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceFeatures2KHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference features;
    Napi::Value Getfeatures(const Napi::CallbackInfo &info);
    void Setfeatures(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceFeatures2KHR instance = {};

};

/** ## END VkPhysicalDeviceFeatures2KHR ## **/

/** ## BEGIN VkPhysicalDeviceFeatures2 ## **/

class _VkPhysicalDeviceFeatures2 : public Napi::ObjectWrap<_VkPhysicalDeviceFeatures2> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceFeatures2(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceFeatures2();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference features;
    Napi::Value Getfeatures(const Napi::CallbackInfo &info);
    void Setfeatures(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceFeatures2 instance = {};

};

/** ## END VkPhysicalDeviceFeatures2 ## **/

/** ## BEGIN VkObjectTablePushConstantEntryNVX ## **/

class _VkObjectTablePushConstantEntryNVX : public Napi::ObjectWrap<_VkObjectTablePushConstantEntryNVX> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkObjectTablePushConstantEntryNVX(const Napi::CallbackInfo &info);
    ~_VkObjectTablePushConstantEntryNVX();

    // #accessors
    Napi::Value Gettype(const Napi::CallbackInfo &info);
    void Settype(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pipelineLayout;
    Napi::Value GetpipelineLayout(const Napi::CallbackInfo &info);
    void SetpipelineLayout(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetstageFlags(const Napi::CallbackInfo &info);
    void SetstageFlags(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkObjectTablePushConstantEntryNVX instance = {};

};

/** ## END VkObjectTablePushConstantEntryNVX ## **/

/** ## BEGIN VkObjectTableIndexBufferEntryNVX ## **/

class _VkObjectTableIndexBufferEntryNVX : public Napi::ObjectWrap<_VkObjectTableIndexBufferEntryNVX> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkObjectTableIndexBufferEntryNVX(const Napi::CallbackInfo &info);
    ~_VkObjectTableIndexBufferEntryNVX();

    // #accessors
    Napi::Value Gettype(const Napi::CallbackInfo &info);
    void Settype(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference buffer;
    Napi::Value Getbuffer(const Napi::CallbackInfo &info);
    void Setbuffer(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetindexType(const Napi::CallbackInfo &info);
    void SetindexType(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkObjectTableIndexBufferEntryNVX instance = {};

};

/** ## END VkObjectTableIndexBufferEntryNVX ## **/

/** ## BEGIN VkObjectTableVertexBufferEntryNVX ## **/

class _VkObjectTableVertexBufferEntryNVX : public Napi::ObjectWrap<_VkObjectTableVertexBufferEntryNVX> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkObjectTableVertexBufferEntryNVX(const Napi::CallbackInfo &info);
    ~_VkObjectTableVertexBufferEntryNVX();

    // #accessors
    Napi::Value Gettype(const Napi::CallbackInfo &info);
    void Settype(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference buffer;
    Napi::Value Getbuffer(const Napi::CallbackInfo &info);
    void Setbuffer(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkObjectTableVertexBufferEntryNVX instance = {};

};

/** ## END VkObjectTableVertexBufferEntryNVX ## **/

/** ## BEGIN VkObjectTableDescriptorSetEntryNVX ## **/

class _VkObjectTableDescriptorSetEntryNVX : public Napi::ObjectWrap<_VkObjectTableDescriptorSetEntryNVX> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkObjectTableDescriptorSetEntryNVX(const Napi::CallbackInfo &info);
    ~_VkObjectTableDescriptorSetEntryNVX();

    // #accessors
    Napi::Value Gettype(const Napi::CallbackInfo &info);
    void Settype(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pipelineLayout;
    Napi::Value GetpipelineLayout(const Napi::CallbackInfo &info);
    void SetpipelineLayout(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference descriptorSet;
    Napi::Value GetdescriptorSet(const Napi::CallbackInfo &info);
    void SetdescriptorSet(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkObjectTableDescriptorSetEntryNVX instance = {};

};

/** ## END VkObjectTableDescriptorSetEntryNVX ## **/

/** ## BEGIN VkObjectTablePipelineEntryNVX ## **/

class _VkObjectTablePipelineEntryNVX : public Napi::ObjectWrap<_VkObjectTablePipelineEntryNVX> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkObjectTablePipelineEntryNVX(const Napi::CallbackInfo &info);
    ~_VkObjectTablePipelineEntryNVX();

    // #accessors
    Napi::Value Gettype(const Napi::CallbackInfo &info);
    void Settype(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pipeline;
    Napi::Value Getpipeline(const Napi::CallbackInfo &info);
    void Setpipeline(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkObjectTablePipelineEntryNVX instance = {};

};

/** ## END VkObjectTablePipelineEntryNVX ## **/

/** ## BEGIN VkObjectTableEntryNVX ## **/

class _VkObjectTableEntryNVX : public Napi::ObjectWrap<_VkObjectTableEntryNVX> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkObjectTableEntryNVX(const Napi::CallbackInfo &info);
    ~_VkObjectTableEntryNVX();

    // #accessors
    Napi::Value Gettype(const Napi::CallbackInfo &info);
    void Settype(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkObjectTableEntryNVX instance = {};

};

/** ## END VkObjectTableEntryNVX ## **/

/** ## BEGIN VkObjectTableCreateInfoNVX ## **/

class _VkObjectTableCreateInfoNVX : public Napi::ObjectWrap<_VkObjectTableCreateInfoNVX> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkObjectTableCreateInfoNVX(const Napi::CallbackInfo &info);
    ~_VkObjectTableCreateInfoNVX();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetobjectCount(const Napi::CallbackInfo &info);
    void SetobjectCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pObjectEntryTypes;
    Napi::Value GetpObjectEntryTypes(const Napi::CallbackInfo &info);
    void SetpObjectEntryTypes(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pObjectEntryCounts;
    Napi::Value GetpObjectEntryCounts(const Napi::CallbackInfo &info);
    void SetpObjectEntryCounts(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pObjectEntryUsageFlags;
    Napi::Value GetpObjectEntryUsageFlags(const Napi::CallbackInfo &info);
    void SetpObjectEntryUsageFlags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmaxUniformBuffersPerDescriptor(const Napi::CallbackInfo &info);
    void SetmaxUniformBuffersPerDescriptor(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmaxStorageBuffersPerDescriptor(const Napi::CallbackInfo &info);
    void SetmaxStorageBuffersPerDescriptor(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmaxStorageImagesPerDescriptor(const Napi::CallbackInfo &info);
    void SetmaxStorageImagesPerDescriptor(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmaxSampledImagesPerDescriptor(const Napi::CallbackInfo &info);
    void SetmaxSampledImagesPerDescriptor(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmaxPipelineLayouts(const Napi::CallbackInfo &info);
    void SetmaxPipelineLayouts(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkObjectTableCreateInfoNVX instance = {};

};

/** ## END VkObjectTableCreateInfoNVX ## **/

/** ## BEGIN VkCmdReserveSpaceForCommandsInfoNVX ## **/

class _VkCmdReserveSpaceForCommandsInfoNVX : public Napi::ObjectWrap<_VkCmdReserveSpaceForCommandsInfoNVX> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkCmdReserveSpaceForCommandsInfoNVX(const Napi::CallbackInfo &info);
    ~_VkCmdReserveSpaceForCommandsInfoNVX();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference objectTable;
    Napi::Value GetobjectTable(const Napi::CallbackInfo &info);
    void SetobjectTable(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference indirectCommandsLayout;
    Napi::Value GetindirectCommandsLayout(const Napi::CallbackInfo &info);
    void SetindirectCommandsLayout(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmaxSequencesCount(const Napi::CallbackInfo &info);
    void SetmaxSequencesCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkCmdReserveSpaceForCommandsInfoNVX instance = {};

};

/** ## END VkCmdReserveSpaceForCommandsInfoNVX ## **/

/** ## BEGIN VkCmdProcessCommandsInfoNVX ## **/

class _VkCmdProcessCommandsInfoNVX : public Napi::ObjectWrap<_VkCmdProcessCommandsInfoNVX> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkCmdProcessCommandsInfoNVX(const Napi::CallbackInfo &info);
    ~_VkCmdProcessCommandsInfoNVX();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference objectTable;
    Napi::Value GetobjectTable(const Napi::CallbackInfo &info);
    void SetobjectTable(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference indirectCommandsLayout;
    Napi::Value GetindirectCommandsLayout(const Napi::CallbackInfo &info);
    void SetindirectCommandsLayout(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetindirectCommandsTokenCount(const Napi::CallbackInfo &info);
    void SetindirectCommandsTokenCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkIndirectCommandsTokenNVX>* vpIndirectCommandsTokens;
    Napi::ObjectReference pIndirectCommandsTokens;
    Napi::Value GetpIndirectCommandsTokens(const Napi::CallbackInfo &info);
    void SetpIndirectCommandsTokens(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmaxSequencesCount(const Napi::CallbackInfo &info);
    void SetmaxSequencesCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference targetCommandBuffer;
    Napi::Value GettargetCommandBuffer(const Napi::CallbackInfo &info);
    void SettargetCommandBuffer(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference sequencesCountBuffer;
    Napi::Value GetsequencesCountBuffer(const Napi::CallbackInfo &info);
    void SetsequencesCountBuffer(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetsequencesCountOffset(const Napi::CallbackInfo &info);
    void SetsequencesCountOffset(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference sequencesIndexBuffer;
    Napi::Value GetsequencesIndexBuffer(const Napi::CallbackInfo &info);
    void SetsequencesIndexBuffer(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetsequencesIndexOffset(const Napi::CallbackInfo &info);
    void SetsequencesIndexOffset(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkCmdProcessCommandsInfoNVX instance = {};

};

/** ## END VkCmdProcessCommandsInfoNVX ## **/

/** ## BEGIN VkIndirectCommandsLayoutCreateInfoNVX ## **/

class _VkIndirectCommandsLayoutCreateInfoNVX : public Napi::ObjectWrap<_VkIndirectCommandsLayoutCreateInfoNVX> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkIndirectCommandsLayoutCreateInfoNVX(const Napi::CallbackInfo &info);
    ~_VkIndirectCommandsLayoutCreateInfoNVX();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetpipelineBindPoint(const Napi::CallbackInfo &info);
    void SetpipelineBindPoint(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GettokenCount(const Napi::CallbackInfo &info);
    void SettokenCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkIndirectCommandsLayoutTokenNVX>* vpTokens;
    Napi::ObjectReference pTokens;
    Napi::Value GetpTokens(const Napi::CallbackInfo &info);
    void SetpTokens(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkIndirectCommandsLayoutCreateInfoNVX instance = {};

};

/** ## END VkIndirectCommandsLayoutCreateInfoNVX ## **/

/** ## BEGIN VkIndirectCommandsLayoutTokenNVX ## **/

class _VkIndirectCommandsLayoutTokenNVX : public Napi::ObjectWrap<_VkIndirectCommandsLayoutTokenNVX> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkIndirectCommandsLayoutTokenNVX(const Napi::CallbackInfo &info);
    ~_VkIndirectCommandsLayoutTokenNVX();

    // #accessors
    Napi::Value GettokenType(const Napi::CallbackInfo &info);
    void SettokenType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetbindingUnit(const Napi::CallbackInfo &info);
    void SetbindingUnit(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdynamicCount(const Napi::CallbackInfo &info);
    void SetdynamicCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getdivisor(const Napi::CallbackInfo &info);
    void Setdivisor(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkIndirectCommandsLayoutTokenNVX instance = {};

};

/** ## END VkIndirectCommandsLayoutTokenNVX ## **/

/** ## BEGIN VkIndirectCommandsTokenNVX ## **/

class _VkIndirectCommandsTokenNVX : public Napi::ObjectWrap<_VkIndirectCommandsTokenNVX> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkIndirectCommandsTokenNVX(const Napi::CallbackInfo &info);
    ~_VkIndirectCommandsTokenNVX();

    // #accessors
    Napi::Value GettokenType(const Napi::CallbackInfo &info);
    void SettokenType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference buffer;
    Napi::Value Getbuffer(const Napi::CallbackInfo &info);
    void Setbuffer(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getoffset(const Napi::CallbackInfo &info);
    void Setoffset(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkIndirectCommandsTokenNVX instance = {};

};

/** ## END VkIndirectCommandsTokenNVX ## **/

/** ## BEGIN VkDeviceGeneratedCommandsLimitsNVX ## **/

class _VkDeviceGeneratedCommandsLimitsNVX : public Napi::ObjectWrap<_VkDeviceGeneratedCommandsLimitsNVX> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDeviceGeneratedCommandsLimitsNVX(const Napi::CallbackInfo &info);
    ~_VkDeviceGeneratedCommandsLimitsNVX();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmaxIndirectCommandsLayoutTokenCount(const Napi::CallbackInfo &info);
    void SetmaxIndirectCommandsLayoutTokenCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmaxObjectEntryCounts(const Napi::CallbackInfo &info);
    void SetmaxObjectEntryCounts(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetminSequenceCountBufferOffsetAlignment(const Napi::CallbackInfo &info);
    void SetminSequenceCountBufferOffsetAlignment(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetminSequenceIndexBufferOffsetAlignment(const Napi::CallbackInfo &info);
    void SetminSequenceIndexBufferOffsetAlignment(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetminCommandsTokenBufferOffsetAlignment(const Napi::CallbackInfo &info);
    void SetminCommandsTokenBufferOffsetAlignment(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDeviceGeneratedCommandsLimitsNVX instance = {};

};

/** ## END VkDeviceGeneratedCommandsLimitsNVX ## **/

/** ## BEGIN VkDeviceGeneratedCommandsFeaturesNVX ## **/

class _VkDeviceGeneratedCommandsFeaturesNVX : public Napi::ObjectWrap<_VkDeviceGeneratedCommandsFeaturesNVX> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDeviceGeneratedCommandsFeaturesNVX(const Napi::CallbackInfo &info);
    ~_VkDeviceGeneratedCommandsFeaturesNVX();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetcomputeBindingPointSupport(const Napi::CallbackInfo &info);
    void SetcomputeBindingPointSupport(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDeviceGeneratedCommandsFeaturesNVX instance = {};

};

/** ## END VkDeviceGeneratedCommandsFeaturesNVX ## **/

/** ## BEGIN VkWin32KeyedMutexAcquireReleaseInfoNV ## **/

class _VkWin32KeyedMutexAcquireReleaseInfoNV : public Napi::ObjectWrap<_VkWin32KeyedMutexAcquireReleaseInfoNV> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkWin32KeyedMutexAcquireReleaseInfoNV(const Napi::CallbackInfo &info);
    ~_VkWin32KeyedMutexAcquireReleaseInfoNV();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetacquireCount(const Napi::CallbackInfo &info);
    void SetacquireCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkDeviceMemory>* vpAcquireSyncs;
    Napi::ObjectReference pAcquireSyncs;
    Napi::Value GetpAcquireSyncs(const Napi::CallbackInfo &info);
    void SetpAcquireSyncs(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pAcquireKeys;
    Napi::Value GetpAcquireKeys(const Napi::CallbackInfo &info);
    void SetpAcquireKeys(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pAcquireTimeoutMilliseconds;
    Napi::Value GetpAcquireTimeoutMilliseconds(const Napi::CallbackInfo &info);
    void SetpAcquireTimeoutMilliseconds(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetreleaseCount(const Napi::CallbackInfo &info);
    void SetreleaseCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkDeviceMemory>* vpReleaseSyncs;
    Napi::ObjectReference pReleaseSyncs;
    Napi::Value GetpReleaseSyncs(const Napi::CallbackInfo &info);
    void SetpReleaseSyncs(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pReleaseKeys;
    Napi::Value GetpReleaseKeys(const Napi::CallbackInfo &info);
    void SetpReleaseKeys(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkWin32KeyedMutexAcquireReleaseInfoNV instance = {};

};

/** ## END VkWin32KeyedMutexAcquireReleaseInfoNV ## **/

/** ## BEGIN VkExportMemoryWin32HandleInfoNV ## **/

class _VkExportMemoryWin32HandleInfoNV : public Napi::ObjectWrap<_VkExportMemoryWin32HandleInfoNV> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkExportMemoryWin32HandleInfoNV(const Napi::CallbackInfo &info);
    ~_VkExportMemoryWin32HandleInfoNV();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkExportMemoryWin32HandleInfoNV instance = {};

};

/** ## END VkExportMemoryWin32HandleInfoNV ## **/

/** ## BEGIN VkImportMemoryWin32HandleInfoNV ## **/

class _VkImportMemoryWin32HandleInfoNV : public Napi::ObjectWrap<_VkImportMemoryWin32HandleInfoNV> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkImportMemoryWin32HandleInfoNV(const Napi::CallbackInfo &info);
    ~_VkImportMemoryWin32HandleInfoNV();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GethandleType(const Napi::CallbackInfo &info);
    void SethandleType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Gethandle(const Napi::CallbackInfo &info);
    void Sethandle(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkImportMemoryWin32HandleInfoNV instance = {};

};

/** ## END VkImportMemoryWin32HandleInfoNV ## **/

/** ## BEGIN VkExportMemoryAllocateInfoNV ## **/

class _VkExportMemoryAllocateInfoNV : public Napi::ObjectWrap<_VkExportMemoryAllocateInfoNV> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkExportMemoryAllocateInfoNV(const Napi::CallbackInfo &info);
    ~_VkExportMemoryAllocateInfoNV();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GethandleTypes(const Napi::CallbackInfo &info);
    void SethandleTypes(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkExportMemoryAllocateInfoNV instance = {};

};

/** ## END VkExportMemoryAllocateInfoNV ## **/

/** ## BEGIN VkExternalMemoryImageCreateInfoNV ## **/

class _VkExternalMemoryImageCreateInfoNV : public Napi::ObjectWrap<_VkExternalMemoryImageCreateInfoNV> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkExternalMemoryImageCreateInfoNV(const Napi::CallbackInfo &info);
    ~_VkExternalMemoryImageCreateInfoNV();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GethandleTypes(const Napi::CallbackInfo &info);
    void SethandleTypes(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkExternalMemoryImageCreateInfoNV instance = {};

};

/** ## END VkExternalMemoryImageCreateInfoNV ## **/

/** ## BEGIN VkExternalImageFormatPropertiesNV ## **/

class _VkExternalImageFormatPropertiesNV : public Napi::ObjectWrap<_VkExternalImageFormatPropertiesNV> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkExternalImageFormatPropertiesNV(const Napi::CallbackInfo &info);
    ~_VkExternalImageFormatPropertiesNV();

    // #accessors
    Napi::ObjectReference imageFormatProperties;
    Napi::Value GetimageFormatProperties(const Napi::CallbackInfo &info);
    Napi::Value GetexternalMemoryFeatures(const Napi::CallbackInfo &info);
    Napi::Value GetexportFromImportedHandleTypes(const Napi::CallbackInfo &info);
    Napi::Value GetcompatibleHandleTypes(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkExternalImageFormatPropertiesNV instance = {};

};

/** ## END VkExternalImageFormatPropertiesNV ## **/

/** ## BEGIN VkDedicatedAllocationMemoryAllocateInfoNV ## **/

class _VkDedicatedAllocationMemoryAllocateInfoNV : public Napi::ObjectWrap<_VkDedicatedAllocationMemoryAllocateInfoNV> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDedicatedAllocationMemoryAllocateInfoNV(const Napi::CallbackInfo &info);
    ~_VkDedicatedAllocationMemoryAllocateInfoNV();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference image;
    Napi::Value Getimage(const Napi::CallbackInfo &info);
    void Setimage(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference buffer;
    Napi::Value Getbuffer(const Napi::CallbackInfo &info);
    void Setbuffer(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDedicatedAllocationMemoryAllocateInfoNV instance = {};

};

/** ## END VkDedicatedAllocationMemoryAllocateInfoNV ## **/

/** ## BEGIN VkDedicatedAllocationBufferCreateInfoNV ## **/

class _VkDedicatedAllocationBufferCreateInfoNV : public Napi::ObjectWrap<_VkDedicatedAllocationBufferCreateInfoNV> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDedicatedAllocationBufferCreateInfoNV(const Napi::CallbackInfo &info);
    ~_VkDedicatedAllocationBufferCreateInfoNV();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdedicatedAllocation(const Napi::CallbackInfo &info);
    void SetdedicatedAllocation(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDedicatedAllocationBufferCreateInfoNV instance = {};

};

/** ## END VkDedicatedAllocationBufferCreateInfoNV ## **/

/** ## BEGIN VkDedicatedAllocationImageCreateInfoNV ## **/

class _VkDedicatedAllocationImageCreateInfoNV : public Napi::ObjectWrap<_VkDedicatedAllocationImageCreateInfoNV> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDedicatedAllocationImageCreateInfoNV(const Napi::CallbackInfo &info);
    ~_VkDedicatedAllocationImageCreateInfoNV();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdedicatedAllocation(const Napi::CallbackInfo &info);
    void SetdedicatedAllocation(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDedicatedAllocationImageCreateInfoNV instance = {};

};

/** ## END VkDedicatedAllocationImageCreateInfoNV ## **/

/** ## BEGIN VkDebugMarkerMarkerInfoEXT ## **/

class _VkDebugMarkerMarkerInfoEXT : public Napi::ObjectWrap<_VkDebugMarkerMarkerInfoEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDebugMarkerMarkerInfoEXT(const Napi::CallbackInfo &info);
    ~_VkDebugMarkerMarkerInfoEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pMarkerName;
    Napi::Value GetpMarkerName(const Napi::CallbackInfo &info);
    void SetpMarkerName(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<float>* vcolor;
    Napi::ObjectReference color;
    Napi::Value Getcolor(const Napi::CallbackInfo &info);
    void Setcolor(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDebugMarkerMarkerInfoEXT instance = {};

};

/** ## END VkDebugMarkerMarkerInfoEXT ## **/

/** ## BEGIN VkDebugMarkerObjectTagInfoEXT ## **/

class _VkDebugMarkerObjectTagInfoEXT : public Napi::ObjectWrap<_VkDebugMarkerObjectTagInfoEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDebugMarkerObjectTagInfoEXT(const Napi::CallbackInfo &info);
    ~_VkDebugMarkerObjectTagInfoEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetobjectType(const Napi::CallbackInfo &info);
    void SetobjectType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getobject(const Napi::CallbackInfo &info);
    void Setobject(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GettagName(const Napi::CallbackInfo &info);
    void SettagName(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GettagSize(const Napi::CallbackInfo &info);
    void SettagSize(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pTag;
    Napi::Value GetpTag(const Napi::CallbackInfo &info);
    void SetpTag(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDebugMarkerObjectTagInfoEXT instance = {};

};

/** ## END VkDebugMarkerObjectTagInfoEXT ## **/

/** ## BEGIN VkDebugMarkerObjectNameInfoEXT ## **/

class _VkDebugMarkerObjectNameInfoEXT : public Napi::ObjectWrap<_VkDebugMarkerObjectNameInfoEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDebugMarkerObjectNameInfoEXT(const Napi::CallbackInfo &info);
    ~_VkDebugMarkerObjectNameInfoEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetobjectType(const Napi::CallbackInfo &info);
    void SetobjectType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getobject(const Napi::CallbackInfo &info);
    void Setobject(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pObjectName;
    Napi::Value GetpObjectName(const Napi::CallbackInfo &info);
    void SetpObjectName(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDebugMarkerObjectNameInfoEXT instance = {};

};

/** ## END VkDebugMarkerObjectNameInfoEXT ## **/

/** ## BEGIN VkPipelineRasterizationStateRasterizationOrderAMD ## **/

class _VkPipelineRasterizationStateRasterizationOrderAMD : public Napi::ObjectWrap<_VkPipelineRasterizationStateRasterizationOrderAMD> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPipelineRasterizationStateRasterizationOrderAMD(const Napi::CallbackInfo &info);
    ~_VkPipelineRasterizationStateRasterizationOrderAMD();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetrasterizationOrder(const Napi::CallbackInfo &info);
    void SetrasterizationOrder(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPipelineRasterizationStateRasterizationOrderAMD instance = {};

};

/** ## END VkPipelineRasterizationStateRasterizationOrderAMD ## **/

/** ## BEGIN VkValidationFeaturesEXT ## **/

class _VkValidationFeaturesEXT : public Napi::ObjectWrap<_VkValidationFeaturesEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkValidationFeaturesEXT(const Napi::CallbackInfo &info);
    ~_VkValidationFeaturesEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetenabledValidationFeatureCount(const Napi::CallbackInfo &info);
    void SetenabledValidationFeatureCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pEnabledValidationFeatures;
    Napi::Value GetpEnabledValidationFeatures(const Napi::CallbackInfo &info);
    void SetpEnabledValidationFeatures(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdisabledValidationFeatureCount(const Napi::CallbackInfo &info);
    void SetdisabledValidationFeatureCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pDisabledValidationFeatures;
    Napi::Value GetpDisabledValidationFeatures(const Napi::CallbackInfo &info);
    void SetpDisabledValidationFeatures(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkValidationFeaturesEXT instance = {};

};

/** ## END VkValidationFeaturesEXT ## **/

/** ## BEGIN VkValidationFlagsEXT ## **/

class _VkValidationFlagsEXT : public Napi::ObjectWrap<_VkValidationFlagsEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkValidationFlagsEXT(const Napi::CallbackInfo &info);
    ~_VkValidationFlagsEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdisabledValidationCheckCount(const Napi::CallbackInfo &info);
    void SetdisabledValidationCheckCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pDisabledValidationChecks;
    Napi::Value GetpDisabledValidationChecks(const Napi::CallbackInfo &info);
    void SetpDisabledValidationChecks(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkValidationFlagsEXT instance = {};

};

/** ## END VkValidationFlagsEXT ## **/

/** ## BEGIN VkDebugReportCallbackCreateInfoEXT ## **/

class _VkDebugReportCallbackCreateInfoEXT : public Napi::ObjectWrap<_VkDebugReportCallbackCreateInfoEXT> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDebugReportCallbackCreateInfoEXT(const Napi::CallbackInfo &info);
    ~_VkDebugReportCallbackCreateInfoEXT();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pUserData;
    Napi::Value GetpUserData(const Napi::CallbackInfo &info);
    void SetpUserData(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDebugReportCallbackCreateInfoEXT instance = {};

};

/** ## END VkDebugReportCallbackCreateInfoEXT ## **/

/** ## BEGIN VkPresentInfoKHR ## **/

class _VkPresentInfoKHR : public Napi::ObjectWrap<_VkPresentInfoKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPresentInfoKHR(const Napi::CallbackInfo &info);
    ~_VkPresentInfoKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetwaitSemaphoreCount(const Napi::CallbackInfo &info);
    void SetwaitSemaphoreCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkSemaphore>* vpWaitSemaphores;
    Napi::ObjectReference pWaitSemaphores;
    Napi::Value GetpWaitSemaphores(const Napi::CallbackInfo &info);
    void SetpWaitSemaphores(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetswapchainCount(const Napi::CallbackInfo &info);
    void SetswapchainCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkSwapchainKHR>* vpSwapchains;
    Napi::ObjectReference pSwapchains;
    Napi::Value GetpSwapchains(const Napi::CallbackInfo &info);
    void SetpSwapchains(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pImageIndices;
    Napi::Value GetpImageIndices(const Napi::CallbackInfo &info);
    void SetpImageIndices(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pResults;
    Napi::Value GetpResults(const Napi::CallbackInfo &info);
    void SetpResults(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPresentInfoKHR instance = {};

};

/** ## END VkPresentInfoKHR ## **/

/** ## BEGIN VkSwapchainCreateInfoKHR ## **/

class _VkSwapchainCreateInfoKHR : public Napi::ObjectWrap<_VkSwapchainCreateInfoKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkSwapchainCreateInfoKHR(const Napi::CallbackInfo &info);
    ~_VkSwapchainCreateInfoKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference surface;
    Napi::Value Getsurface(const Napi::CallbackInfo &info);
    void Setsurface(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetminImageCount(const Napi::CallbackInfo &info);
    void SetminImageCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetimageFormat(const Napi::CallbackInfo &info);
    void SetimageFormat(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetimageColorSpace(const Napi::CallbackInfo &info);
    void SetimageColorSpace(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference imageExtent;
    Napi::Value GetimageExtent(const Napi::CallbackInfo &info);
    void SetimageExtent(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetimageArrayLayers(const Napi::CallbackInfo &info);
    void SetimageArrayLayers(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetimageUsage(const Napi::CallbackInfo &info);
    void SetimageUsage(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetimageSharingMode(const Napi::CallbackInfo &info);
    void SetimageSharingMode(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetqueueFamilyIndexCount(const Napi::CallbackInfo &info);
    void SetqueueFamilyIndexCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pQueueFamilyIndices;
    Napi::Value GetpQueueFamilyIndices(const Napi::CallbackInfo &info);
    void SetpQueueFamilyIndices(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetpreTransform(const Napi::CallbackInfo &info);
    void SetpreTransform(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetcompositeAlpha(const Napi::CallbackInfo &info);
    void SetcompositeAlpha(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetpresentMode(const Napi::CallbackInfo &info);
    void SetpresentMode(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getclipped(const Napi::CallbackInfo &info);
    void Setclipped(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference oldSwapchain;
    Napi::Value GetoldSwapchain(const Napi::CallbackInfo &info);
    void SetoldSwapchain(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkSwapchainCreateInfoKHR instance = {};

};

/** ## END VkSwapchainCreateInfoKHR ## **/

/** ## BEGIN VkSurfaceFormatKHR ## **/

class _VkSurfaceFormatKHR : public Napi::ObjectWrap<_VkSurfaceFormatKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkSurfaceFormatKHR(const Napi::CallbackInfo &info);
    ~_VkSurfaceFormatKHR();

    // #accessors
    Napi::Value Getformat(const Napi::CallbackInfo &info);
    Napi::Value GetcolorSpace(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkSurfaceFormatKHR instance = {};

};

/** ## END VkSurfaceFormatKHR ## **/

/** ## BEGIN VkWin32SurfaceCreateInfoKHR ## **/

class _VkWin32SurfaceCreateInfoKHR : public Napi::ObjectWrap<_VkWin32SurfaceCreateInfoKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkWin32SurfaceCreateInfoKHR(const Napi::CallbackInfo &info);
    ~_VkWin32SurfaceCreateInfoKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Gethinstance(const Napi::CallbackInfo &info);
    void Sethinstance(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Gethwnd(const Napi::CallbackInfo &info);
    void Sethwnd(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkWin32SurfaceCreateInfoKHR instance = {};

};

/** ## END VkWin32SurfaceCreateInfoKHR ## **/

/** ## BEGIN VkSurfaceCapabilitiesKHR ## **/

class _VkSurfaceCapabilitiesKHR : public Napi::ObjectWrap<_VkSurfaceCapabilitiesKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkSurfaceCapabilitiesKHR(const Napi::CallbackInfo &info);
    ~_VkSurfaceCapabilitiesKHR();

    // #accessors
    Napi::Value GetminImageCount(const Napi::CallbackInfo &info);
    Napi::Value GetmaxImageCount(const Napi::CallbackInfo &info);
    Napi::ObjectReference currentExtent;
    Napi::Value GetcurrentExtent(const Napi::CallbackInfo &info);
    Napi::ObjectReference minImageExtent;
    Napi::Value GetminImageExtent(const Napi::CallbackInfo &info);
    Napi::ObjectReference maxImageExtent;
    Napi::Value GetmaxImageExtent(const Napi::CallbackInfo &info);
    Napi::Value GetmaxImageArrayLayers(const Napi::CallbackInfo &info);
    Napi::Value GetsupportedTransforms(const Napi::CallbackInfo &info);
    Napi::Value GetcurrentTransform(const Napi::CallbackInfo &info);
    Napi::Value GetsupportedCompositeAlpha(const Napi::CallbackInfo &info);
    Napi::Value GetsupportedUsageFlags(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkSurfaceCapabilitiesKHR instance = {};

};

/** ## END VkSurfaceCapabilitiesKHR ## **/

/** ## BEGIN VkDisplayPresentInfoKHR ## **/

class _VkDisplayPresentInfoKHR : public Napi::ObjectWrap<_VkDisplayPresentInfoKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDisplayPresentInfoKHR(const Napi::CallbackInfo &info);
    ~_VkDisplayPresentInfoKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference srcRect;
    Napi::Value GetsrcRect(const Napi::CallbackInfo &info);
    void SetsrcRect(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference dstRect;
    Napi::Value GetdstRect(const Napi::CallbackInfo &info);
    void SetdstRect(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getpersistent(const Napi::CallbackInfo &info);
    void Setpersistent(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDisplayPresentInfoKHR instance = {};

};

/** ## END VkDisplayPresentInfoKHR ## **/

/** ## BEGIN VkDisplaySurfaceCreateInfoKHR ## **/

class _VkDisplaySurfaceCreateInfoKHR : public Napi::ObjectWrap<_VkDisplaySurfaceCreateInfoKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDisplaySurfaceCreateInfoKHR(const Napi::CallbackInfo &info);
    ~_VkDisplaySurfaceCreateInfoKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference displayMode;
    Napi::Value GetdisplayMode(const Napi::CallbackInfo &info);
    void SetdisplayMode(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetplaneIndex(const Napi::CallbackInfo &info);
    void SetplaneIndex(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetplaneStackIndex(const Napi::CallbackInfo &info);
    void SetplaneStackIndex(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Gettransform(const Napi::CallbackInfo &info);
    void Settransform(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetglobalAlpha(const Napi::CallbackInfo &info);
    void SetglobalAlpha(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetalphaMode(const Napi::CallbackInfo &info);
    void SetalphaMode(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference imageExtent;
    Napi::Value GetimageExtent(const Napi::CallbackInfo &info);
    void SetimageExtent(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDisplaySurfaceCreateInfoKHR instance = {};

};

/** ## END VkDisplaySurfaceCreateInfoKHR ## **/

/** ## BEGIN VkDisplayPlaneCapabilitiesKHR ## **/

class _VkDisplayPlaneCapabilitiesKHR : public Napi::ObjectWrap<_VkDisplayPlaneCapabilitiesKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDisplayPlaneCapabilitiesKHR(const Napi::CallbackInfo &info);
    ~_VkDisplayPlaneCapabilitiesKHR();

    // #accessors
    Napi::Value GetsupportedAlpha(const Napi::CallbackInfo &info);
    Napi::ObjectReference minSrcPosition;
    Napi::Value GetminSrcPosition(const Napi::CallbackInfo &info);
    Napi::ObjectReference maxSrcPosition;
    Napi::Value GetmaxSrcPosition(const Napi::CallbackInfo &info);
    Napi::ObjectReference minSrcExtent;
    Napi::Value GetminSrcExtent(const Napi::CallbackInfo &info);
    Napi::ObjectReference maxSrcExtent;
    Napi::Value GetmaxSrcExtent(const Napi::CallbackInfo &info);
    Napi::ObjectReference minDstPosition;
    Napi::Value GetminDstPosition(const Napi::CallbackInfo &info);
    Napi::ObjectReference maxDstPosition;
    Napi::Value GetmaxDstPosition(const Napi::CallbackInfo &info);
    Napi::ObjectReference minDstExtent;
    Napi::Value GetminDstExtent(const Napi::CallbackInfo &info);
    Napi::ObjectReference maxDstExtent;
    Napi::Value GetmaxDstExtent(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDisplayPlaneCapabilitiesKHR instance = {};

};

/** ## END VkDisplayPlaneCapabilitiesKHR ## **/

/** ## BEGIN VkDisplayModeCreateInfoKHR ## **/

class _VkDisplayModeCreateInfoKHR : public Napi::ObjectWrap<_VkDisplayModeCreateInfoKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDisplayModeCreateInfoKHR(const Napi::CallbackInfo &info);
    ~_VkDisplayModeCreateInfoKHR();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference parameters;
    Napi::Value Getparameters(const Napi::CallbackInfo &info);
    void Setparameters(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDisplayModeCreateInfoKHR instance = {};

};

/** ## END VkDisplayModeCreateInfoKHR ## **/

/** ## BEGIN VkDisplayModePropertiesKHR ## **/

class _VkDisplayModePropertiesKHR : public Napi::ObjectWrap<_VkDisplayModePropertiesKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDisplayModePropertiesKHR(const Napi::CallbackInfo &info);
    ~_VkDisplayModePropertiesKHR();

    // #accessors
    Napi::ObjectReference displayMode;
    Napi::Value GetdisplayMode(const Napi::CallbackInfo &info);
    Napi::ObjectReference parameters;
    Napi::Value Getparameters(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDisplayModePropertiesKHR instance = {};

};

/** ## END VkDisplayModePropertiesKHR ## **/

/** ## BEGIN VkDisplayModeParametersKHR ## **/

class _VkDisplayModeParametersKHR : public Napi::ObjectWrap<_VkDisplayModeParametersKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDisplayModeParametersKHR(const Napi::CallbackInfo &info);
    ~_VkDisplayModeParametersKHR();

    // #accessors
    Napi::ObjectReference visibleRegion;
    Napi::Value GetvisibleRegion(const Napi::CallbackInfo &info);
    void SetvisibleRegion(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetrefreshRate(const Napi::CallbackInfo &info);
    void SetrefreshRate(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDisplayModeParametersKHR instance = {};

};

/** ## END VkDisplayModeParametersKHR ## **/

/** ## BEGIN VkDisplayPlanePropertiesKHR ## **/

class _VkDisplayPlanePropertiesKHR : public Napi::ObjectWrap<_VkDisplayPlanePropertiesKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDisplayPlanePropertiesKHR(const Napi::CallbackInfo &info);
    ~_VkDisplayPlanePropertiesKHR();

    // #accessors
    Napi::ObjectReference currentDisplay;
    Napi::Value GetcurrentDisplay(const Napi::CallbackInfo &info);
    Napi::Value GetcurrentStackIndex(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDisplayPlanePropertiesKHR instance = {};

};

/** ## END VkDisplayPlanePropertiesKHR ## **/

/** ## BEGIN VkDisplayPropertiesKHR ## **/

class _VkDisplayPropertiesKHR : public Napi::ObjectWrap<_VkDisplayPropertiesKHR> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDisplayPropertiesKHR(const Napi::CallbackInfo &info);
    ~_VkDisplayPropertiesKHR();

    // #accessors
    Napi::ObjectReference display;
    Napi::Value Getdisplay(const Napi::CallbackInfo &info);
    Napi::ObjectReference displayName;
    Napi::Value GetdisplayName(const Napi::CallbackInfo &info);
    Napi::ObjectReference physicalDimensions;
    Napi::Value GetphysicalDimensions(const Napi::CallbackInfo &info);
    Napi::ObjectReference physicalResolution;
    Napi::Value GetphysicalResolution(const Napi::CallbackInfo &info);
    Napi::Value GetsupportedTransforms(const Napi::CallbackInfo &info);
    Napi::Value GetplaneReorderPossible(const Napi::CallbackInfo &info);
    Napi::Value GetpersistentContent(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDisplayPropertiesKHR instance = {};

};

/** ## END VkDisplayPropertiesKHR ## **/

/** ## BEGIN VkSubmitInfo ## **/

class _VkSubmitInfo : public Napi::ObjectWrap<_VkSubmitInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkSubmitInfo(const Napi::CallbackInfo &info);
    ~_VkSubmitInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetwaitSemaphoreCount(const Napi::CallbackInfo &info);
    void SetwaitSemaphoreCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkSemaphore>* vpWaitSemaphores;
    Napi::ObjectReference pWaitSemaphores;
    Napi::Value GetpWaitSemaphores(const Napi::CallbackInfo &info);
    void SetpWaitSemaphores(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pWaitDstStageMask;
    Napi::Value GetpWaitDstStageMask(const Napi::CallbackInfo &info);
    void SetpWaitDstStageMask(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetcommandBufferCount(const Napi::CallbackInfo &info);
    void SetcommandBufferCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkCommandBuffer>* vpCommandBuffers;
    Napi::ObjectReference pCommandBuffers;
    Napi::Value GetpCommandBuffers(const Napi::CallbackInfo &info);
    void SetpCommandBuffers(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetsignalSemaphoreCount(const Napi::CallbackInfo &info);
    void SetsignalSemaphoreCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkSemaphore>* vpSignalSemaphores;
    Napi::ObjectReference pSignalSemaphores;
    Napi::Value GetpSignalSemaphores(const Napi::CallbackInfo &info);
    void SetpSignalSemaphores(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkSubmitInfo instance = {};

};

/** ## END VkSubmitInfo ## **/

/** ## BEGIN VkDispatchIndirectCommand ## **/

class _VkDispatchIndirectCommand : public Napi::ObjectWrap<_VkDispatchIndirectCommand> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDispatchIndirectCommand(const Napi::CallbackInfo &info);
    ~_VkDispatchIndirectCommand();

    // #accessors
    Napi::Value Getx(const Napi::CallbackInfo &info);
    void Setx(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Gety(const Napi::CallbackInfo &info);
    void Sety(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getz(const Napi::CallbackInfo &info);
    void Setz(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDispatchIndirectCommand instance = {};

};

/** ## END VkDispatchIndirectCommand ## **/

/** ## BEGIN VkDrawIndexedIndirectCommand ## **/

class _VkDrawIndexedIndirectCommand : public Napi::ObjectWrap<_VkDrawIndexedIndirectCommand> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDrawIndexedIndirectCommand(const Napi::CallbackInfo &info);
    ~_VkDrawIndexedIndirectCommand();

    // #accessors
    Napi::Value GetindexCount(const Napi::CallbackInfo &info);
    void SetindexCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetinstanceCount(const Napi::CallbackInfo &info);
    void SetinstanceCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetfirstIndex(const Napi::CallbackInfo &info);
    void SetfirstIndex(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetvertexOffset(const Napi::CallbackInfo &info);
    void SetvertexOffset(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetfirstInstance(const Napi::CallbackInfo &info);
    void SetfirstInstance(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDrawIndexedIndirectCommand instance = {};

};

/** ## END VkDrawIndexedIndirectCommand ## **/

/** ## BEGIN VkDrawIndirectCommand ## **/

class _VkDrawIndirectCommand : public Napi::ObjectWrap<_VkDrawIndirectCommand> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDrawIndirectCommand(const Napi::CallbackInfo &info);
    ~_VkDrawIndirectCommand();

    // #accessors
    Napi::Value GetvertexCount(const Napi::CallbackInfo &info);
    void SetvertexCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetinstanceCount(const Napi::CallbackInfo &info);
    void SetinstanceCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetfirstVertex(const Napi::CallbackInfo &info);
    void SetfirstVertex(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetfirstInstance(const Napi::CallbackInfo &info);
    void SetfirstInstance(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDrawIndirectCommand instance = {};

};

/** ## END VkDrawIndirectCommand ## **/

/** ## BEGIN VkFramebufferCreateInfo ## **/

class _VkFramebufferCreateInfo : public Napi::ObjectWrap<_VkFramebufferCreateInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkFramebufferCreateInfo(const Napi::CallbackInfo &info);
    ~_VkFramebufferCreateInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference renderPass;
    Napi::Value GetrenderPass(const Napi::CallbackInfo &info);
    void SetrenderPass(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetattachmentCount(const Napi::CallbackInfo &info);
    void SetattachmentCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkImageView>* vpAttachments;
    Napi::ObjectReference pAttachments;
    Napi::Value GetpAttachments(const Napi::CallbackInfo &info);
    void SetpAttachments(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getwidth(const Napi::CallbackInfo &info);
    void Setwidth(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getheight(const Napi::CallbackInfo &info);
    void Setheight(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getlayers(const Napi::CallbackInfo &info);
    void Setlayers(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkFramebufferCreateInfo instance = {};

};

/** ## END VkFramebufferCreateInfo ## **/

/** ## BEGIN VkQueryPoolCreateInfo ## **/

class _VkQueryPoolCreateInfo : public Napi::ObjectWrap<_VkQueryPoolCreateInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkQueryPoolCreateInfo(const Napi::CallbackInfo &info);
    ~_VkQueryPoolCreateInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetqueryType(const Napi::CallbackInfo &info);
    void SetqueryType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetqueryCount(const Napi::CallbackInfo &info);
    void SetqueryCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetpipelineStatistics(const Napi::CallbackInfo &info);
    void SetpipelineStatistics(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkQueryPoolCreateInfo instance = {};

};

/** ## END VkQueryPoolCreateInfo ## **/

/** ## BEGIN VkSemaphoreCreateInfo ## **/

class _VkSemaphoreCreateInfo : public Napi::ObjectWrap<_VkSemaphoreCreateInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkSemaphoreCreateInfo(const Napi::CallbackInfo &info);
    ~_VkSemaphoreCreateInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkSemaphoreCreateInfo instance = {};

};

/** ## END VkSemaphoreCreateInfo ## **/

/** ## BEGIN VkPhysicalDeviceLimits ## **/

class _VkPhysicalDeviceLimits : public Napi::ObjectWrap<_VkPhysicalDeviceLimits> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceLimits(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceLimits();

    // #accessors
    Napi::Value GetmaxImageDimension1D(const Napi::CallbackInfo &info);
    Napi::Value GetmaxImageDimension2D(const Napi::CallbackInfo &info);
    Napi::Value GetmaxImageDimension3D(const Napi::CallbackInfo &info);
    Napi::Value GetmaxImageDimensionCube(const Napi::CallbackInfo &info);
    Napi::Value GetmaxImageArrayLayers(const Napi::CallbackInfo &info);
    Napi::Value GetmaxTexelBufferElements(const Napi::CallbackInfo &info);
    Napi::Value GetmaxUniformBufferRange(const Napi::CallbackInfo &info);
    Napi::Value GetmaxStorageBufferRange(const Napi::CallbackInfo &info);
    Napi::Value GetmaxPushConstantsSize(const Napi::CallbackInfo &info);
    Napi::Value GetmaxMemoryAllocationCount(const Napi::CallbackInfo &info);
    Napi::Value GetmaxSamplerAllocationCount(const Napi::CallbackInfo &info);
    Napi::Value GetbufferImageGranularity(const Napi::CallbackInfo &info);
    Napi::Value GetsparseAddressSpaceSize(const Napi::CallbackInfo &info);
    Napi::Value GetmaxBoundDescriptorSets(const Napi::CallbackInfo &info);
    Napi::Value GetmaxPerStageDescriptorSamplers(const Napi::CallbackInfo &info);
    Napi::Value GetmaxPerStageDescriptorUniformBuffers(const Napi::CallbackInfo &info);
    Napi::Value GetmaxPerStageDescriptorStorageBuffers(const Napi::CallbackInfo &info);
    Napi::Value GetmaxPerStageDescriptorSampledImages(const Napi::CallbackInfo &info);
    Napi::Value GetmaxPerStageDescriptorStorageImages(const Napi::CallbackInfo &info);
    Napi::Value GetmaxPerStageDescriptorInputAttachments(const Napi::CallbackInfo &info);
    Napi::Value GetmaxPerStageResources(const Napi::CallbackInfo &info);
    Napi::Value GetmaxDescriptorSetSamplers(const Napi::CallbackInfo &info);
    Napi::Value GetmaxDescriptorSetUniformBuffers(const Napi::CallbackInfo &info);
    Napi::Value GetmaxDescriptorSetUniformBuffersDynamic(const Napi::CallbackInfo &info);
    Napi::Value GetmaxDescriptorSetStorageBuffers(const Napi::CallbackInfo &info);
    Napi::Value GetmaxDescriptorSetStorageBuffersDynamic(const Napi::CallbackInfo &info);
    Napi::Value GetmaxDescriptorSetSampledImages(const Napi::CallbackInfo &info);
    Napi::Value GetmaxDescriptorSetStorageImages(const Napi::CallbackInfo &info);
    Napi::Value GetmaxDescriptorSetInputAttachments(const Napi::CallbackInfo &info);
    Napi::Value GetmaxVertexInputAttributes(const Napi::CallbackInfo &info);
    Napi::Value GetmaxVertexInputBindings(const Napi::CallbackInfo &info);
    Napi::Value GetmaxVertexInputAttributeOffset(const Napi::CallbackInfo &info);
    Napi::Value GetmaxVertexInputBindingStride(const Napi::CallbackInfo &info);
    Napi::Value GetmaxVertexOutputComponents(const Napi::CallbackInfo &info);
    Napi::Value GetmaxTessellationGenerationLevel(const Napi::CallbackInfo &info);
    Napi::Value GetmaxTessellationPatchSize(const Napi::CallbackInfo &info);
    Napi::Value GetmaxTessellationControlPerVertexInputComponents(const Napi::CallbackInfo &info);
    Napi::Value GetmaxTessellationControlPerVertexOutputComponents(const Napi::CallbackInfo &info);
    Napi::Value GetmaxTessellationControlPerPatchOutputComponents(const Napi::CallbackInfo &info);
    Napi::Value GetmaxTessellationControlTotalOutputComponents(const Napi::CallbackInfo &info);
    Napi::Value GetmaxTessellationEvaluationInputComponents(const Napi::CallbackInfo &info);
    Napi::Value GetmaxTessellationEvaluationOutputComponents(const Napi::CallbackInfo &info);
    Napi::Value GetmaxGeometryShaderInvocations(const Napi::CallbackInfo &info);
    Napi::Value GetmaxGeometryInputComponents(const Napi::CallbackInfo &info);
    Napi::Value GetmaxGeometryOutputComponents(const Napi::CallbackInfo &info);
    Napi::Value GetmaxGeometryOutputVertices(const Napi::CallbackInfo &info);
    Napi::Value GetmaxGeometryTotalOutputComponents(const Napi::CallbackInfo &info);
    Napi::Value GetmaxFragmentInputComponents(const Napi::CallbackInfo &info);
    Napi::Value GetmaxFragmentOutputAttachments(const Napi::CallbackInfo &info);
    Napi::Value GetmaxFragmentDualSrcAttachments(const Napi::CallbackInfo &info);
    Napi::Value GetmaxFragmentCombinedOutputResources(const Napi::CallbackInfo &info);
    Napi::Value GetmaxComputeSharedMemorySize(const Napi::CallbackInfo &info);
    std::vector<uint32_t>* vmaxComputeWorkGroupCount;
    Napi::ObjectReference maxComputeWorkGroupCount;
    Napi::Value GetmaxComputeWorkGroupCount(const Napi::CallbackInfo &info);
    Napi::Value GetmaxComputeWorkGroupInvocations(const Napi::CallbackInfo &info);
    std::vector<uint32_t>* vmaxComputeWorkGroupSize;
    Napi::ObjectReference maxComputeWorkGroupSize;
    Napi::Value GetmaxComputeWorkGroupSize(const Napi::CallbackInfo &info);
    Napi::Value GetsubPixelPrecisionBits(const Napi::CallbackInfo &info);
    Napi::Value GetsubTexelPrecisionBits(const Napi::CallbackInfo &info);
    Napi::Value GetmipmapPrecisionBits(const Napi::CallbackInfo &info);
    Napi::Value GetmaxDrawIndexedIndexValue(const Napi::CallbackInfo &info);
    Napi::Value GetmaxDrawIndirectCount(const Napi::CallbackInfo &info);
    Napi::Value GetmaxSamplerLodBias(const Napi::CallbackInfo &info);
    Napi::Value GetmaxSamplerAnisotropy(const Napi::CallbackInfo &info);
    Napi::Value GetmaxViewports(const Napi::CallbackInfo &info);
    std::vector<uint32_t>* vmaxViewportDimensions;
    Napi::ObjectReference maxViewportDimensions;
    Napi::Value GetmaxViewportDimensions(const Napi::CallbackInfo &info);
    std::vector<float>* vviewportBoundsRange;
    Napi::ObjectReference viewportBoundsRange;
    Napi::Value GetviewportBoundsRange(const Napi::CallbackInfo &info);
    Napi::Value GetviewportSubPixelBits(const Napi::CallbackInfo &info);
    Napi::Value GetminMemoryMapAlignment(const Napi::CallbackInfo &info);
    Napi::Value GetminTexelBufferOffsetAlignment(const Napi::CallbackInfo &info);
    Napi::Value GetminUniformBufferOffsetAlignment(const Napi::CallbackInfo &info);
    Napi::Value GetminStorageBufferOffsetAlignment(const Napi::CallbackInfo &info);
    Napi::Value GetminTexelOffset(const Napi::CallbackInfo &info);
    Napi::Value GetmaxTexelOffset(const Napi::CallbackInfo &info);
    Napi::Value GetminTexelGatherOffset(const Napi::CallbackInfo &info);
    Napi::Value GetmaxTexelGatherOffset(const Napi::CallbackInfo &info);
    Napi::Value GetminInterpolationOffset(const Napi::CallbackInfo &info);
    Napi::Value GetmaxInterpolationOffset(const Napi::CallbackInfo &info);
    Napi::Value GetsubPixelInterpolationOffsetBits(const Napi::CallbackInfo &info);
    Napi::Value GetmaxFramebufferWidth(const Napi::CallbackInfo &info);
    Napi::Value GetmaxFramebufferHeight(const Napi::CallbackInfo &info);
    Napi::Value GetmaxFramebufferLayers(const Napi::CallbackInfo &info);
    Napi::Value GetframebufferColorSampleCounts(const Napi::CallbackInfo &info);
    Napi::Value GetframebufferDepthSampleCounts(const Napi::CallbackInfo &info);
    Napi::Value GetframebufferStencilSampleCounts(const Napi::CallbackInfo &info);
    Napi::Value GetframebufferNoAttachmentsSampleCounts(const Napi::CallbackInfo &info);
    Napi::Value GetmaxColorAttachments(const Napi::CallbackInfo &info);
    Napi::Value GetsampledImageColorSampleCounts(const Napi::CallbackInfo &info);
    Napi::Value GetsampledImageIntegerSampleCounts(const Napi::CallbackInfo &info);
    Napi::Value GetsampledImageDepthSampleCounts(const Napi::CallbackInfo &info);
    Napi::Value GetsampledImageStencilSampleCounts(const Napi::CallbackInfo &info);
    Napi::Value GetstorageImageSampleCounts(const Napi::CallbackInfo &info);
    Napi::Value GetmaxSampleMaskWords(const Napi::CallbackInfo &info);
    Napi::Value GettimestampComputeAndGraphics(const Napi::CallbackInfo &info);
    Napi::Value GettimestampPeriod(const Napi::CallbackInfo &info);
    Napi::Value GetmaxClipDistances(const Napi::CallbackInfo &info);
    Napi::Value GetmaxCullDistances(const Napi::CallbackInfo &info);
    Napi::Value GetmaxCombinedClipAndCullDistances(const Napi::CallbackInfo &info);
    Napi::Value GetdiscreteQueuePriorities(const Napi::CallbackInfo &info);
    std::vector<float>* vpointSizeRange;
    Napi::ObjectReference pointSizeRange;
    Napi::Value GetpointSizeRange(const Napi::CallbackInfo &info);
    std::vector<float>* vlineWidthRange;
    Napi::ObjectReference lineWidthRange;
    Napi::Value GetlineWidthRange(const Napi::CallbackInfo &info);
    Napi::Value GetpointSizeGranularity(const Napi::CallbackInfo &info);
    Napi::Value GetlineWidthGranularity(const Napi::CallbackInfo &info);
    Napi::Value GetstrictLines(const Napi::CallbackInfo &info);
    Napi::Value GetstandardSampleLocations(const Napi::CallbackInfo &info);
    Napi::Value GetoptimalBufferCopyOffsetAlignment(const Napi::CallbackInfo &info);
    Napi::Value GetoptimalBufferCopyRowPitchAlignment(const Napi::CallbackInfo &info);
    Napi::Value GetnonCoherentAtomSize(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceLimits instance = {};

};

/** ## END VkPhysicalDeviceLimits ## **/

/** ## BEGIN VkPhysicalDeviceSparseProperties ## **/

class _VkPhysicalDeviceSparseProperties : public Napi::ObjectWrap<_VkPhysicalDeviceSparseProperties> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceSparseProperties(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceSparseProperties();

    // #accessors
    Napi::Value GetresidencyStandard2DBlockShape(const Napi::CallbackInfo &info);
    Napi::Value GetresidencyStandard2DMultisampleBlockShape(const Napi::CallbackInfo &info);
    Napi::Value GetresidencyStandard3DBlockShape(const Napi::CallbackInfo &info);
    Napi::Value GetresidencyAlignedMipSize(const Napi::CallbackInfo &info);
    Napi::Value GetresidencyNonResidentStrict(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceSparseProperties instance = {};

};

/** ## END VkPhysicalDeviceSparseProperties ## **/

/** ## BEGIN VkPhysicalDeviceFeatures ## **/

class _VkPhysicalDeviceFeatures : public Napi::ObjectWrap<_VkPhysicalDeviceFeatures> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceFeatures(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceFeatures();

    // #accessors
    Napi::Value GetrobustBufferAccess(const Napi::CallbackInfo &info);
    void SetrobustBufferAccess(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetfullDrawIndexUint32(const Napi::CallbackInfo &info);
    void SetfullDrawIndexUint32(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetimageCubeArray(const Napi::CallbackInfo &info);
    void SetimageCubeArray(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetindependentBlend(const Napi::CallbackInfo &info);
    void SetindependentBlend(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetgeometryShader(const Napi::CallbackInfo &info);
    void SetgeometryShader(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GettessellationShader(const Napi::CallbackInfo &info);
    void SettessellationShader(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetsampleRateShading(const Napi::CallbackInfo &info);
    void SetsampleRateShading(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdualSrcBlend(const Napi::CallbackInfo &info);
    void SetdualSrcBlend(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetlogicOp(const Napi::CallbackInfo &info);
    void SetlogicOp(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmultiDrawIndirect(const Napi::CallbackInfo &info);
    void SetmultiDrawIndirect(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdrawIndirectFirstInstance(const Napi::CallbackInfo &info);
    void SetdrawIndirectFirstInstance(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdepthClamp(const Napi::CallbackInfo &info);
    void SetdepthClamp(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdepthBiasClamp(const Napi::CallbackInfo &info);
    void SetdepthBiasClamp(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetfillModeNonSolid(const Napi::CallbackInfo &info);
    void SetfillModeNonSolid(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdepthBounds(const Napi::CallbackInfo &info);
    void SetdepthBounds(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetwideLines(const Napi::CallbackInfo &info);
    void SetwideLines(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetlargePoints(const Napi::CallbackInfo &info);
    void SetlargePoints(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetalphaToOne(const Napi::CallbackInfo &info);
    void SetalphaToOne(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmultiViewport(const Napi::CallbackInfo &info);
    void SetmultiViewport(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetsamplerAnisotropy(const Napi::CallbackInfo &info);
    void SetsamplerAnisotropy(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GettextureCompressionETC2(const Napi::CallbackInfo &info);
    void SettextureCompressionETC2(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GettextureCompressionASTC_LDR(const Napi::CallbackInfo &info);
    void SettextureCompressionASTC_LDR(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GettextureCompressionBC(const Napi::CallbackInfo &info);
    void SettextureCompressionBC(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetocclusionQueryPrecise(const Napi::CallbackInfo &info);
    void SetocclusionQueryPrecise(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetpipelineStatisticsQuery(const Napi::CallbackInfo &info);
    void SetpipelineStatisticsQuery(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetvertexPipelineStoresAndAtomics(const Napi::CallbackInfo &info);
    void SetvertexPipelineStoresAndAtomics(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetfragmentStoresAndAtomics(const Napi::CallbackInfo &info);
    void SetfragmentStoresAndAtomics(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetshaderTessellationAndGeometryPointSize(const Napi::CallbackInfo &info);
    void SetshaderTessellationAndGeometryPointSize(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetshaderImageGatherExtended(const Napi::CallbackInfo &info);
    void SetshaderImageGatherExtended(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetshaderStorageImageExtendedFormats(const Napi::CallbackInfo &info);
    void SetshaderStorageImageExtendedFormats(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetshaderStorageImageMultisample(const Napi::CallbackInfo &info);
    void SetshaderStorageImageMultisample(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetshaderStorageImageReadWithoutFormat(const Napi::CallbackInfo &info);
    void SetshaderStorageImageReadWithoutFormat(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetshaderStorageImageWriteWithoutFormat(const Napi::CallbackInfo &info);
    void SetshaderStorageImageWriteWithoutFormat(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetshaderUniformBufferArrayDynamicIndexing(const Napi::CallbackInfo &info);
    void SetshaderUniformBufferArrayDynamicIndexing(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetshaderSampledImageArrayDynamicIndexing(const Napi::CallbackInfo &info);
    void SetshaderSampledImageArrayDynamicIndexing(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetshaderStorageBufferArrayDynamicIndexing(const Napi::CallbackInfo &info);
    void SetshaderStorageBufferArrayDynamicIndexing(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetshaderStorageImageArrayDynamicIndexing(const Napi::CallbackInfo &info);
    void SetshaderStorageImageArrayDynamicIndexing(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetshaderClipDistance(const Napi::CallbackInfo &info);
    void SetshaderClipDistance(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetshaderCullDistance(const Napi::CallbackInfo &info);
    void SetshaderCullDistance(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetshaderFloat64(const Napi::CallbackInfo &info);
    void SetshaderFloat64(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetshaderInt64(const Napi::CallbackInfo &info);
    void SetshaderInt64(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetshaderInt16(const Napi::CallbackInfo &info);
    void SetshaderInt16(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetshaderResourceResidency(const Napi::CallbackInfo &info);
    void SetshaderResourceResidency(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetshaderResourceMinLod(const Napi::CallbackInfo &info);
    void SetshaderResourceMinLod(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetsparseBinding(const Napi::CallbackInfo &info);
    void SetsparseBinding(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetsparseResidencyBuffer(const Napi::CallbackInfo &info);
    void SetsparseResidencyBuffer(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetsparseResidencyImage2D(const Napi::CallbackInfo &info);
    void SetsparseResidencyImage2D(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetsparseResidencyImage3D(const Napi::CallbackInfo &info);
    void SetsparseResidencyImage3D(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetsparseResidency2Samples(const Napi::CallbackInfo &info);
    void SetsparseResidency2Samples(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetsparseResidency4Samples(const Napi::CallbackInfo &info);
    void SetsparseResidency4Samples(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetsparseResidency8Samples(const Napi::CallbackInfo &info);
    void SetsparseResidency8Samples(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetsparseResidency16Samples(const Napi::CallbackInfo &info);
    void SetsparseResidency16Samples(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetsparseResidencyAliased(const Napi::CallbackInfo &info);
    void SetsparseResidencyAliased(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetvariableMultisampleRate(const Napi::CallbackInfo &info);
    void SetvariableMultisampleRate(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetinheritedQueries(const Napi::CallbackInfo &info);
    void SetinheritedQueries(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceFeatures instance = {};

};

/** ## END VkPhysicalDeviceFeatures ## **/

/** ## BEGIN VkFenceCreateInfo ## **/

class _VkFenceCreateInfo : public Napi::ObjectWrap<_VkFenceCreateInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkFenceCreateInfo(const Napi::CallbackInfo &info);
    ~_VkFenceCreateInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkFenceCreateInfo instance = {};

};

/** ## END VkFenceCreateInfo ## **/

/** ## BEGIN VkEventCreateInfo ## **/

class _VkEventCreateInfo : public Napi::ObjectWrap<_VkEventCreateInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkEventCreateInfo(const Napi::CallbackInfo &info);
    ~_VkEventCreateInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkEventCreateInfo instance = {};

};

/** ## END VkEventCreateInfo ## **/

/** ## BEGIN VkRenderPassCreateInfo ## **/

class _VkRenderPassCreateInfo : public Napi::ObjectWrap<_VkRenderPassCreateInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkRenderPassCreateInfo(const Napi::CallbackInfo &info);
    ~_VkRenderPassCreateInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetattachmentCount(const Napi::CallbackInfo &info);
    void SetattachmentCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkAttachmentDescription>* vpAttachments;
    Napi::ObjectReference pAttachments;
    Napi::Value GetpAttachments(const Napi::CallbackInfo &info);
    void SetpAttachments(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetsubpassCount(const Napi::CallbackInfo &info);
    void SetsubpassCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkSubpassDescription>* vpSubpasses;
    Napi::ObjectReference pSubpasses;
    Napi::Value GetpSubpasses(const Napi::CallbackInfo &info);
    void SetpSubpasses(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdependencyCount(const Napi::CallbackInfo &info);
    void SetdependencyCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkSubpassDependency>* vpDependencies;
    Napi::ObjectReference pDependencies;
    Napi::Value GetpDependencies(const Napi::CallbackInfo &info);
    void SetpDependencies(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkRenderPassCreateInfo instance = {};

};

/** ## END VkRenderPassCreateInfo ## **/

/** ## BEGIN VkSubpassDependency ## **/

class _VkSubpassDependency : public Napi::ObjectWrap<_VkSubpassDependency> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkSubpassDependency(const Napi::CallbackInfo &info);
    ~_VkSubpassDependency();

    // #accessors
    Napi::Value GetsrcSubpass(const Napi::CallbackInfo &info);
    void SetsrcSubpass(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdstSubpass(const Napi::CallbackInfo &info);
    void SetdstSubpass(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetsrcStageMask(const Napi::CallbackInfo &info);
    void SetsrcStageMask(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdstStageMask(const Napi::CallbackInfo &info);
    void SetdstStageMask(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetsrcAccessMask(const Napi::CallbackInfo &info);
    void SetsrcAccessMask(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdstAccessMask(const Napi::CallbackInfo &info);
    void SetdstAccessMask(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdependencyFlags(const Napi::CallbackInfo &info);
    void SetdependencyFlags(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkSubpassDependency instance = {};

};

/** ## END VkSubpassDependency ## **/

/** ## BEGIN VkSubpassDescription ## **/

class _VkSubpassDescription : public Napi::ObjectWrap<_VkSubpassDescription> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkSubpassDescription(const Napi::CallbackInfo &info);
    ~_VkSubpassDescription();

    // #accessors
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetpipelineBindPoint(const Napi::CallbackInfo &info);
    void SetpipelineBindPoint(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetinputAttachmentCount(const Napi::CallbackInfo &info);
    void SetinputAttachmentCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkAttachmentReference>* vpInputAttachments;
    Napi::ObjectReference pInputAttachments;
    Napi::Value GetpInputAttachments(const Napi::CallbackInfo &info);
    void SetpInputAttachments(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetcolorAttachmentCount(const Napi::CallbackInfo &info);
    void SetcolorAttachmentCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkAttachmentReference>* vpColorAttachments;
    Napi::ObjectReference pColorAttachments;
    Napi::Value GetpColorAttachments(const Napi::CallbackInfo &info);
    void SetpColorAttachments(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkAttachmentReference>* vpResolveAttachments;
    Napi::ObjectReference pResolveAttachments;
    Napi::Value GetpResolveAttachments(const Napi::CallbackInfo &info);
    void SetpResolveAttachments(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pDepthStencilAttachment;
    Napi::Value GetpDepthStencilAttachment(const Napi::CallbackInfo &info);
    void SetpDepthStencilAttachment(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetpreserveAttachmentCount(const Napi::CallbackInfo &info);
    void SetpreserveAttachmentCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pPreserveAttachments;
    Napi::Value GetpPreserveAttachments(const Napi::CallbackInfo &info);
    void SetpPreserveAttachments(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkSubpassDescription instance = {};

};

/** ## END VkSubpassDescription ## **/

/** ## BEGIN VkAttachmentReference ## **/

class _VkAttachmentReference : public Napi::ObjectWrap<_VkAttachmentReference> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkAttachmentReference(const Napi::CallbackInfo &info);
    ~_VkAttachmentReference();

    // #accessors
    Napi::Value Getattachment(const Napi::CallbackInfo &info);
    void Setattachment(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getlayout(const Napi::CallbackInfo &info);
    void Setlayout(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkAttachmentReference instance = {};

};

/** ## END VkAttachmentReference ## **/

/** ## BEGIN VkAttachmentDescription ## **/

class _VkAttachmentDescription : public Napi::ObjectWrap<_VkAttachmentDescription> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkAttachmentDescription(const Napi::CallbackInfo &info);
    ~_VkAttachmentDescription();

    // #accessors
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getformat(const Napi::CallbackInfo &info);
    void Setformat(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getsamples(const Napi::CallbackInfo &info);
    void Setsamples(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetloadOp(const Napi::CallbackInfo &info);
    void SetloadOp(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetstoreOp(const Napi::CallbackInfo &info);
    void SetstoreOp(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetstencilLoadOp(const Napi::CallbackInfo &info);
    void SetstencilLoadOp(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetstencilStoreOp(const Napi::CallbackInfo &info);
    void SetstencilStoreOp(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetinitialLayout(const Napi::CallbackInfo &info);
    void SetinitialLayout(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetfinalLayout(const Napi::CallbackInfo &info);
    void SetfinalLayout(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkAttachmentDescription instance = {};

};

/** ## END VkAttachmentDescription ## **/

/** ## BEGIN VkClearAttachment ## **/

class _VkClearAttachment : public Napi::ObjectWrap<_VkClearAttachment> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkClearAttachment(const Napi::CallbackInfo &info);
    ~_VkClearAttachment();

    // #accessors
    Napi::Value GetaspectMask(const Napi::CallbackInfo &info);
    void SetaspectMask(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetcolorAttachment(const Napi::CallbackInfo &info);
    void SetcolorAttachment(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference clearValue;
    Napi::Value GetclearValue(const Napi::CallbackInfo &info);
    void SetclearValue(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkClearAttachment instance = {};

};

/** ## END VkClearAttachment ## **/

/** ## BEGIN VkClearDepthStencilValue ## **/

class _VkClearDepthStencilValue : public Napi::ObjectWrap<_VkClearDepthStencilValue> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkClearDepthStencilValue(const Napi::CallbackInfo &info);
    ~_VkClearDepthStencilValue();

    // #accessors
    Napi::Value Getdepth(const Napi::CallbackInfo &info);
    void Setdepth(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getstencil(const Napi::CallbackInfo &info);
    void Setstencil(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkClearDepthStencilValue instance = {};

};

/** ## END VkClearDepthStencilValue ## **/

/** ## BEGIN VkRenderPassBeginInfo ## **/

class _VkRenderPassBeginInfo : public Napi::ObjectWrap<_VkRenderPassBeginInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkRenderPassBeginInfo(const Napi::CallbackInfo &info);
    ~_VkRenderPassBeginInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference renderPass;
    Napi::Value GetrenderPass(const Napi::CallbackInfo &info);
    void SetrenderPass(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference framebuffer;
    Napi::Value Getframebuffer(const Napi::CallbackInfo &info);
    void Setframebuffer(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference renderArea;
    Napi::Value GetrenderArea(const Napi::CallbackInfo &info);
    void SetrenderArea(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetclearValueCount(const Napi::CallbackInfo &info);
    void SetclearValueCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkClearValue>* vpClearValues;
    Napi::ObjectReference pClearValues;
    Napi::Value GetpClearValues(const Napi::CallbackInfo &info);
    void SetpClearValues(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkRenderPassBeginInfo instance = {};

};

/** ## END VkRenderPassBeginInfo ## **/

/** ## BEGIN VkCommandBufferBeginInfo ## **/

class _VkCommandBufferBeginInfo : public Napi::ObjectWrap<_VkCommandBufferBeginInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkCommandBufferBeginInfo(const Napi::CallbackInfo &info);
    ~_VkCommandBufferBeginInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pInheritanceInfo;
    Napi::Value GetpInheritanceInfo(const Napi::CallbackInfo &info);
    void SetpInheritanceInfo(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkCommandBufferBeginInfo instance = {};

};

/** ## END VkCommandBufferBeginInfo ## **/

/** ## BEGIN VkCommandBufferInheritanceInfo ## **/

class _VkCommandBufferInheritanceInfo : public Napi::ObjectWrap<_VkCommandBufferInheritanceInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkCommandBufferInheritanceInfo(const Napi::CallbackInfo &info);
    ~_VkCommandBufferInheritanceInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference renderPass;
    Napi::Value GetrenderPass(const Napi::CallbackInfo &info);
    void SetrenderPass(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getsubpass(const Napi::CallbackInfo &info);
    void Setsubpass(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference framebuffer;
    Napi::Value Getframebuffer(const Napi::CallbackInfo &info);
    void Setframebuffer(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetocclusionQueryEnable(const Napi::CallbackInfo &info);
    void SetocclusionQueryEnable(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetqueryFlags(const Napi::CallbackInfo &info);
    void SetqueryFlags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetpipelineStatistics(const Napi::CallbackInfo &info);
    void SetpipelineStatistics(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkCommandBufferInheritanceInfo instance = {};

};

/** ## END VkCommandBufferInheritanceInfo ## **/

/** ## BEGIN VkCommandBufferAllocateInfo ## **/

class _VkCommandBufferAllocateInfo : public Napi::ObjectWrap<_VkCommandBufferAllocateInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkCommandBufferAllocateInfo(const Napi::CallbackInfo &info);
    ~_VkCommandBufferAllocateInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference commandPool;
    Napi::Value GetcommandPool(const Napi::CallbackInfo &info);
    void SetcommandPool(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getlevel(const Napi::CallbackInfo &info);
    void Setlevel(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetcommandBufferCount(const Napi::CallbackInfo &info);
    void SetcommandBufferCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkCommandBufferAllocateInfo instance = {};

};

/** ## END VkCommandBufferAllocateInfo ## **/

/** ## BEGIN VkCommandPoolCreateInfo ## **/

class _VkCommandPoolCreateInfo : public Napi::ObjectWrap<_VkCommandPoolCreateInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkCommandPoolCreateInfo(const Napi::CallbackInfo &info);
    ~_VkCommandPoolCreateInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetqueueFamilyIndex(const Napi::CallbackInfo &info);
    void SetqueueFamilyIndex(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkCommandPoolCreateInfo instance = {};

};

/** ## END VkCommandPoolCreateInfo ## **/

/** ## BEGIN VkSamplerCreateInfo ## **/

class _VkSamplerCreateInfo : public Napi::ObjectWrap<_VkSamplerCreateInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkSamplerCreateInfo(const Napi::CallbackInfo &info);
    ~_VkSamplerCreateInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmagFilter(const Napi::CallbackInfo &info);
    void SetmagFilter(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetminFilter(const Napi::CallbackInfo &info);
    void SetminFilter(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmipmapMode(const Napi::CallbackInfo &info);
    void SetmipmapMode(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetaddressModeU(const Napi::CallbackInfo &info);
    void SetaddressModeU(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetaddressModeV(const Napi::CallbackInfo &info);
    void SetaddressModeV(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetaddressModeW(const Napi::CallbackInfo &info);
    void SetaddressModeW(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmipLodBias(const Napi::CallbackInfo &info);
    void SetmipLodBias(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetanisotropyEnable(const Napi::CallbackInfo &info);
    void SetanisotropyEnable(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmaxAnisotropy(const Napi::CallbackInfo &info);
    void SetmaxAnisotropy(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetcompareEnable(const Napi::CallbackInfo &info);
    void SetcompareEnable(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetcompareOp(const Napi::CallbackInfo &info);
    void SetcompareOp(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetminLod(const Napi::CallbackInfo &info);
    void SetminLod(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmaxLod(const Napi::CallbackInfo &info);
    void SetmaxLod(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetborderColor(const Napi::CallbackInfo &info);
    void SetborderColor(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetunnormalizedCoordinates(const Napi::CallbackInfo &info);
    void SetunnormalizedCoordinates(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkSamplerCreateInfo instance = {};

};

/** ## END VkSamplerCreateInfo ## **/

/** ## BEGIN VkPipelineLayoutCreateInfo ## **/

class _VkPipelineLayoutCreateInfo : public Napi::ObjectWrap<_VkPipelineLayoutCreateInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPipelineLayoutCreateInfo(const Napi::CallbackInfo &info);
    ~_VkPipelineLayoutCreateInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetsetLayoutCount(const Napi::CallbackInfo &info);
    void SetsetLayoutCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkDescriptorSetLayout>* vpSetLayouts;
    Napi::ObjectReference pSetLayouts;
    Napi::Value GetpSetLayouts(const Napi::CallbackInfo &info);
    void SetpSetLayouts(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetpushConstantRangeCount(const Napi::CallbackInfo &info);
    void SetpushConstantRangeCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkPushConstantRange>* vpPushConstantRanges;
    Napi::ObjectReference pPushConstantRanges;
    Napi::Value GetpPushConstantRanges(const Napi::CallbackInfo &info);
    void SetpPushConstantRanges(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPipelineLayoutCreateInfo instance = {};

};

/** ## END VkPipelineLayoutCreateInfo ## **/

/** ## BEGIN VkPushConstantRange ## **/

class _VkPushConstantRange : public Napi::ObjectWrap<_VkPushConstantRange> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPushConstantRange(const Napi::CallbackInfo &info);
    ~_VkPushConstantRange();

    // #accessors
    Napi::Value GetstageFlags(const Napi::CallbackInfo &info);
    void SetstageFlags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getoffset(const Napi::CallbackInfo &info);
    void Setoffset(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getsize(const Napi::CallbackInfo &info);
    void Setsize(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPushConstantRange instance = {};

};

/** ## END VkPushConstantRange ## **/

/** ## BEGIN VkPipelineCacheCreateInfo ## **/

class _VkPipelineCacheCreateInfo : public Napi::ObjectWrap<_VkPipelineCacheCreateInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPipelineCacheCreateInfo(const Napi::CallbackInfo &info);
    ~_VkPipelineCacheCreateInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetinitialDataSize(const Napi::CallbackInfo &info);
    void SetinitialDataSize(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pInitialData;
    Napi::Value GetpInitialData(const Napi::CallbackInfo &info);
    void SetpInitialData(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPipelineCacheCreateInfo instance = {};

};

/** ## END VkPipelineCacheCreateInfo ## **/

/** ## BEGIN VkGraphicsPipelineCreateInfo ## **/

class _VkGraphicsPipelineCreateInfo : public Napi::ObjectWrap<_VkGraphicsPipelineCreateInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkGraphicsPipelineCreateInfo(const Napi::CallbackInfo &info);
    ~_VkGraphicsPipelineCreateInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetstageCount(const Napi::CallbackInfo &info);
    void SetstageCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkPipelineShaderStageCreateInfo>* vpStages;
    Napi::ObjectReference pStages;
    Napi::Value GetpStages(const Napi::CallbackInfo &info);
    void SetpStages(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pVertexInputState;
    Napi::Value GetpVertexInputState(const Napi::CallbackInfo &info);
    void SetpVertexInputState(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pInputAssemblyState;
    Napi::Value GetpInputAssemblyState(const Napi::CallbackInfo &info);
    void SetpInputAssemblyState(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pTessellationState;
    Napi::Value GetpTessellationState(const Napi::CallbackInfo &info);
    void SetpTessellationState(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pViewportState;
    Napi::Value GetpViewportState(const Napi::CallbackInfo &info);
    void SetpViewportState(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pRasterizationState;
    Napi::Value GetpRasterizationState(const Napi::CallbackInfo &info);
    void SetpRasterizationState(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pMultisampleState;
    Napi::Value GetpMultisampleState(const Napi::CallbackInfo &info);
    void SetpMultisampleState(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pDepthStencilState;
    Napi::Value GetpDepthStencilState(const Napi::CallbackInfo &info);
    void SetpDepthStencilState(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pColorBlendState;
    Napi::Value GetpColorBlendState(const Napi::CallbackInfo &info);
    void SetpColorBlendState(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pDynamicState;
    Napi::Value GetpDynamicState(const Napi::CallbackInfo &info);
    void SetpDynamicState(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference layout;
    Napi::Value Getlayout(const Napi::CallbackInfo &info);
    void Setlayout(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference renderPass;
    Napi::Value GetrenderPass(const Napi::CallbackInfo &info);
    void SetrenderPass(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getsubpass(const Napi::CallbackInfo &info);
    void Setsubpass(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference basePipelineHandle;
    Napi::Value GetbasePipelineHandle(const Napi::CallbackInfo &info);
    void SetbasePipelineHandle(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetbasePipelineIndex(const Napi::CallbackInfo &info);
    void SetbasePipelineIndex(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkGraphicsPipelineCreateInfo instance = {};

};

/** ## END VkGraphicsPipelineCreateInfo ## **/

/** ## BEGIN VkPipelineDepthStencilStateCreateInfo ## **/

class _VkPipelineDepthStencilStateCreateInfo : public Napi::ObjectWrap<_VkPipelineDepthStencilStateCreateInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPipelineDepthStencilStateCreateInfo(const Napi::CallbackInfo &info);
    ~_VkPipelineDepthStencilStateCreateInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdepthTestEnable(const Napi::CallbackInfo &info);
    void SetdepthTestEnable(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdepthWriteEnable(const Napi::CallbackInfo &info);
    void SetdepthWriteEnable(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdepthCompareOp(const Napi::CallbackInfo &info);
    void SetdepthCompareOp(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdepthBoundsTestEnable(const Napi::CallbackInfo &info);
    void SetdepthBoundsTestEnable(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetstencilTestEnable(const Napi::CallbackInfo &info);
    void SetstencilTestEnable(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference front;
    Napi::Value Getfront(const Napi::CallbackInfo &info);
    void Setfront(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference back;
    Napi::Value Getback(const Napi::CallbackInfo &info);
    void Setback(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetminDepthBounds(const Napi::CallbackInfo &info);
    void SetminDepthBounds(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmaxDepthBounds(const Napi::CallbackInfo &info);
    void SetmaxDepthBounds(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPipelineDepthStencilStateCreateInfo instance = {};

};

/** ## END VkPipelineDepthStencilStateCreateInfo ## **/

/** ## BEGIN VkStencilOpState ## **/

class _VkStencilOpState : public Napi::ObjectWrap<_VkStencilOpState> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkStencilOpState(const Napi::CallbackInfo &info);
    ~_VkStencilOpState();

    // #accessors
    Napi::Value GetfailOp(const Napi::CallbackInfo &info);
    void SetfailOp(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetpassOp(const Napi::CallbackInfo &info);
    void SetpassOp(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdepthFailOp(const Napi::CallbackInfo &info);
    void SetdepthFailOp(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetcompareOp(const Napi::CallbackInfo &info);
    void SetcompareOp(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetcompareMask(const Napi::CallbackInfo &info);
    void SetcompareMask(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetwriteMask(const Napi::CallbackInfo &info);
    void SetwriteMask(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getreference(const Napi::CallbackInfo &info);
    void Setreference(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkStencilOpState instance = {};

};

/** ## END VkStencilOpState ## **/

/** ## BEGIN VkPipelineDynamicStateCreateInfo ## **/

class _VkPipelineDynamicStateCreateInfo : public Napi::ObjectWrap<_VkPipelineDynamicStateCreateInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPipelineDynamicStateCreateInfo(const Napi::CallbackInfo &info);
    ~_VkPipelineDynamicStateCreateInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdynamicStateCount(const Napi::CallbackInfo &info);
    void SetdynamicStateCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pDynamicStates;
    Napi::Value GetpDynamicStates(const Napi::CallbackInfo &info);
    void SetpDynamicStates(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPipelineDynamicStateCreateInfo instance = {};

};

/** ## END VkPipelineDynamicStateCreateInfo ## **/

/** ## BEGIN VkPipelineColorBlendStateCreateInfo ## **/

class _VkPipelineColorBlendStateCreateInfo : public Napi::ObjectWrap<_VkPipelineColorBlendStateCreateInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPipelineColorBlendStateCreateInfo(const Napi::CallbackInfo &info);
    ~_VkPipelineColorBlendStateCreateInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetlogicOpEnable(const Napi::CallbackInfo &info);
    void SetlogicOpEnable(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetlogicOp(const Napi::CallbackInfo &info);
    void SetlogicOp(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetattachmentCount(const Napi::CallbackInfo &info);
    void SetattachmentCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkPipelineColorBlendAttachmentState>* vpAttachments;
    Napi::ObjectReference pAttachments;
    Napi::Value GetpAttachments(const Napi::CallbackInfo &info);
    void SetpAttachments(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<float>* vblendConstants;
    Napi::ObjectReference blendConstants;
    Napi::Value GetblendConstants(const Napi::CallbackInfo &info);
    void SetblendConstants(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPipelineColorBlendStateCreateInfo instance = {};

};

/** ## END VkPipelineColorBlendStateCreateInfo ## **/

/** ## BEGIN VkPipelineColorBlendAttachmentState ## **/

class _VkPipelineColorBlendAttachmentState : public Napi::ObjectWrap<_VkPipelineColorBlendAttachmentState> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPipelineColorBlendAttachmentState(const Napi::CallbackInfo &info);
    ~_VkPipelineColorBlendAttachmentState();

    // #accessors
    Napi::Value GetblendEnable(const Napi::CallbackInfo &info);
    void SetblendEnable(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetsrcColorBlendFactor(const Napi::CallbackInfo &info);
    void SetsrcColorBlendFactor(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdstColorBlendFactor(const Napi::CallbackInfo &info);
    void SetdstColorBlendFactor(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetcolorBlendOp(const Napi::CallbackInfo &info);
    void SetcolorBlendOp(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetsrcAlphaBlendFactor(const Napi::CallbackInfo &info);
    void SetsrcAlphaBlendFactor(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdstAlphaBlendFactor(const Napi::CallbackInfo &info);
    void SetdstAlphaBlendFactor(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetalphaBlendOp(const Napi::CallbackInfo &info);
    void SetalphaBlendOp(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetcolorWriteMask(const Napi::CallbackInfo &info);
    void SetcolorWriteMask(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPipelineColorBlendAttachmentState instance = {};

};

/** ## END VkPipelineColorBlendAttachmentState ## **/

/** ## BEGIN VkPipelineMultisampleStateCreateInfo ## **/

class _VkPipelineMultisampleStateCreateInfo : public Napi::ObjectWrap<_VkPipelineMultisampleStateCreateInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPipelineMultisampleStateCreateInfo(const Napi::CallbackInfo &info);
    ~_VkPipelineMultisampleStateCreateInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetrasterizationSamples(const Napi::CallbackInfo &info);
    void SetrasterizationSamples(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetsampleShadingEnable(const Napi::CallbackInfo &info);
    void SetsampleShadingEnable(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetminSampleShading(const Napi::CallbackInfo &info);
    void SetminSampleShading(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pSampleMask;
    Napi::Value GetpSampleMask(const Napi::CallbackInfo &info);
    void SetpSampleMask(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetalphaToCoverageEnable(const Napi::CallbackInfo &info);
    void SetalphaToCoverageEnable(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetalphaToOneEnable(const Napi::CallbackInfo &info);
    void SetalphaToOneEnable(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPipelineMultisampleStateCreateInfo instance = {};

};

/** ## END VkPipelineMultisampleStateCreateInfo ## **/

/** ## BEGIN VkPipelineRasterizationStateCreateInfo ## **/

class _VkPipelineRasterizationStateCreateInfo : public Napi::ObjectWrap<_VkPipelineRasterizationStateCreateInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPipelineRasterizationStateCreateInfo(const Napi::CallbackInfo &info);
    ~_VkPipelineRasterizationStateCreateInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdepthClampEnable(const Napi::CallbackInfo &info);
    void SetdepthClampEnable(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetrasterizerDiscardEnable(const Napi::CallbackInfo &info);
    void SetrasterizerDiscardEnable(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetpolygonMode(const Napi::CallbackInfo &info);
    void SetpolygonMode(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetcullMode(const Napi::CallbackInfo &info);
    void SetcullMode(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetfrontFace(const Napi::CallbackInfo &info);
    void SetfrontFace(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdepthBiasEnable(const Napi::CallbackInfo &info);
    void SetdepthBiasEnable(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdepthBiasConstantFactor(const Napi::CallbackInfo &info);
    void SetdepthBiasConstantFactor(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdepthBiasClamp(const Napi::CallbackInfo &info);
    void SetdepthBiasClamp(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdepthBiasSlopeFactor(const Napi::CallbackInfo &info);
    void SetdepthBiasSlopeFactor(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetlineWidth(const Napi::CallbackInfo &info);
    void SetlineWidth(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPipelineRasterizationStateCreateInfo instance = {};

};

/** ## END VkPipelineRasterizationStateCreateInfo ## **/

/** ## BEGIN VkPipelineViewportStateCreateInfo ## **/

class _VkPipelineViewportStateCreateInfo : public Napi::ObjectWrap<_VkPipelineViewportStateCreateInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPipelineViewportStateCreateInfo(const Napi::CallbackInfo &info);
    ~_VkPipelineViewportStateCreateInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetviewportCount(const Napi::CallbackInfo &info);
    void SetviewportCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkViewport>* vpViewports;
    Napi::ObjectReference pViewports;
    Napi::Value GetpViewports(const Napi::CallbackInfo &info);
    void SetpViewports(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetscissorCount(const Napi::CallbackInfo &info);
    void SetscissorCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkRect2D>* vpScissors;
    Napi::ObjectReference pScissors;
    Napi::Value GetpScissors(const Napi::CallbackInfo &info);
    void SetpScissors(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPipelineViewportStateCreateInfo instance = {};

};

/** ## END VkPipelineViewportStateCreateInfo ## **/

/** ## BEGIN VkPipelineTessellationStateCreateInfo ## **/

class _VkPipelineTessellationStateCreateInfo : public Napi::ObjectWrap<_VkPipelineTessellationStateCreateInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPipelineTessellationStateCreateInfo(const Napi::CallbackInfo &info);
    ~_VkPipelineTessellationStateCreateInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetpatchControlPoints(const Napi::CallbackInfo &info);
    void SetpatchControlPoints(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPipelineTessellationStateCreateInfo instance = {};

};

/** ## END VkPipelineTessellationStateCreateInfo ## **/

/** ## BEGIN VkPipelineInputAssemblyStateCreateInfo ## **/

class _VkPipelineInputAssemblyStateCreateInfo : public Napi::ObjectWrap<_VkPipelineInputAssemblyStateCreateInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPipelineInputAssemblyStateCreateInfo(const Napi::CallbackInfo &info);
    ~_VkPipelineInputAssemblyStateCreateInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Gettopology(const Napi::CallbackInfo &info);
    void Settopology(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetprimitiveRestartEnable(const Napi::CallbackInfo &info);
    void SetprimitiveRestartEnable(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPipelineInputAssemblyStateCreateInfo instance = {};

};

/** ## END VkPipelineInputAssemblyStateCreateInfo ## **/

/** ## BEGIN VkPipelineVertexInputStateCreateInfo ## **/

class _VkPipelineVertexInputStateCreateInfo : public Napi::ObjectWrap<_VkPipelineVertexInputStateCreateInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPipelineVertexInputStateCreateInfo(const Napi::CallbackInfo &info);
    ~_VkPipelineVertexInputStateCreateInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetvertexBindingDescriptionCount(const Napi::CallbackInfo &info);
    void SetvertexBindingDescriptionCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkVertexInputBindingDescription>* vpVertexBindingDescriptions;
    Napi::ObjectReference pVertexBindingDescriptions;
    Napi::Value GetpVertexBindingDescriptions(const Napi::CallbackInfo &info);
    void SetpVertexBindingDescriptions(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetvertexAttributeDescriptionCount(const Napi::CallbackInfo &info);
    void SetvertexAttributeDescriptionCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkVertexInputAttributeDescription>* vpVertexAttributeDescriptions;
    Napi::ObjectReference pVertexAttributeDescriptions;
    Napi::Value GetpVertexAttributeDescriptions(const Napi::CallbackInfo &info);
    void SetpVertexAttributeDescriptions(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPipelineVertexInputStateCreateInfo instance = {};

};

/** ## END VkPipelineVertexInputStateCreateInfo ## **/

/** ## BEGIN VkVertexInputAttributeDescription ## **/

class _VkVertexInputAttributeDescription : public Napi::ObjectWrap<_VkVertexInputAttributeDescription> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkVertexInputAttributeDescription(const Napi::CallbackInfo &info);
    ~_VkVertexInputAttributeDescription();

    // #accessors
    Napi::Value Getlocation(const Napi::CallbackInfo &info);
    void Setlocation(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getbinding(const Napi::CallbackInfo &info);
    void Setbinding(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getformat(const Napi::CallbackInfo &info);
    void Setformat(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getoffset(const Napi::CallbackInfo &info);
    void Setoffset(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkVertexInputAttributeDescription instance = {};

};

/** ## END VkVertexInputAttributeDescription ## **/

/** ## BEGIN VkVertexInputBindingDescription ## **/

class _VkVertexInputBindingDescription : public Napi::ObjectWrap<_VkVertexInputBindingDescription> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkVertexInputBindingDescription(const Napi::CallbackInfo &info);
    ~_VkVertexInputBindingDescription();

    // #accessors
    Napi::Value Getbinding(const Napi::CallbackInfo &info);
    void Setbinding(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getstride(const Napi::CallbackInfo &info);
    void Setstride(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetinputRate(const Napi::CallbackInfo &info);
    void SetinputRate(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkVertexInputBindingDescription instance = {};

};

/** ## END VkVertexInputBindingDescription ## **/

/** ## BEGIN VkComputePipelineCreateInfo ## **/

class _VkComputePipelineCreateInfo : public Napi::ObjectWrap<_VkComputePipelineCreateInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkComputePipelineCreateInfo(const Napi::CallbackInfo &info);
    ~_VkComputePipelineCreateInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference stage;
    Napi::Value Getstage(const Napi::CallbackInfo &info);
    void Setstage(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference layout;
    Napi::Value Getlayout(const Napi::CallbackInfo &info);
    void Setlayout(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference basePipelineHandle;
    Napi::Value GetbasePipelineHandle(const Napi::CallbackInfo &info);
    void SetbasePipelineHandle(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetbasePipelineIndex(const Napi::CallbackInfo &info);
    void SetbasePipelineIndex(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkComputePipelineCreateInfo instance = {};

};

/** ## END VkComputePipelineCreateInfo ## **/

/** ## BEGIN VkPipelineShaderStageCreateInfo ## **/

class _VkPipelineShaderStageCreateInfo : public Napi::ObjectWrap<_VkPipelineShaderStageCreateInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPipelineShaderStageCreateInfo(const Napi::CallbackInfo &info);
    ~_VkPipelineShaderStageCreateInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getstage(const Napi::CallbackInfo &info);
    void Setstage(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference module;
    Napi::Value Getmodule(const Napi::CallbackInfo &info);
    void Setmodule(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pName;
    Napi::Value GetpName(const Napi::CallbackInfo &info);
    void SetpName(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pSpecializationInfo;
    Napi::Value GetpSpecializationInfo(const Napi::CallbackInfo &info);
    void SetpSpecializationInfo(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPipelineShaderStageCreateInfo instance = {};

};

/** ## END VkPipelineShaderStageCreateInfo ## **/

/** ## BEGIN VkSpecializationInfo ## **/

class _VkSpecializationInfo : public Napi::ObjectWrap<_VkSpecializationInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkSpecializationInfo(const Napi::CallbackInfo &info);
    ~_VkSpecializationInfo();

    // #accessors
    Napi::Value GetmapEntryCount(const Napi::CallbackInfo &info);
    void SetmapEntryCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkSpecializationMapEntry>* vpMapEntries;
    Napi::ObjectReference pMapEntries;
    Napi::Value GetpMapEntries(const Napi::CallbackInfo &info);
    void SetpMapEntries(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdataSize(const Napi::CallbackInfo &info);
    void SetdataSize(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pData;
    Napi::Value GetpData(const Napi::CallbackInfo &info);
    void SetpData(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkSpecializationInfo instance = {};

};

/** ## END VkSpecializationInfo ## **/

/** ## BEGIN VkSpecializationMapEntry ## **/

class _VkSpecializationMapEntry : public Napi::ObjectWrap<_VkSpecializationMapEntry> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkSpecializationMapEntry(const Napi::CallbackInfo &info);
    ~_VkSpecializationMapEntry();

    // #accessors
    Napi::Value GetconstantID(const Napi::CallbackInfo &info);
    void SetconstantID(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getoffset(const Napi::CallbackInfo &info);
    void Setoffset(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getsize(const Napi::CallbackInfo &info);
    void Setsize(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkSpecializationMapEntry instance = {};

};

/** ## END VkSpecializationMapEntry ## **/

/** ## BEGIN VkDescriptorSetAllocateInfo ## **/

class _VkDescriptorSetAllocateInfo : public Napi::ObjectWrap<_VkDescriptorSetAllocateInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDescriptorSetAllocateInfo(const Napi::CallbackInfo &info);
    ~_VkDescriptorSetAllocateInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference descriptorPool;
    Napi::Value GetdescriptorPool(const Napi::CallbackInfo &info);
    void SetdescriptorPool(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdescriptorSetCount(const Napi::CallbackInfo &info);
    void SetdescriptorSetCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkDescriptorSetLayout>* vpSetLayouts;
    Napi::ObjectReference pSetLayouts;
    Napi::Value GetpSetLayouts(const Napi::CallbackInfo &info);
    void SetpSetLayouts(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDescriptorSetAllocateInfo instance = {};

};

/** ## END VkDescriptorSetAllocateInfo ## **/

/** ## BEGIN VkDescriptorPoolCreateInfo ## **/

class _VkDescriptorPoolCreateInfo : public Napi::ObjectWrap<_VkDescriptorPoolCreateInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDescriptorPoolCreateInfo(const Napi::CallbackInfo &info);
    ~_VkDescriptorPoolCreateInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmaxSets(const Napi::CallbackInfo &info);
    void SetmaxSets(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetpoolSizeCount(const Napi::CallbackInfo &info);
    void SetpoolSizeCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkDescriptorPoolSize>* vpPoolSizes;
    Napi::ObjectReference pPoolSizes;
    Napi::Value GetpPoolSizes(const Napi::CallbackInfo &info);
    void SetpPoolSizes(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDescriptorPoolCreateInfo instance = {};

};

/** ## END VkDescriptorPoolCreateInfo ## **/

/** ## BEGIN VkDescriptorPoolSize ## **/

class _VkDescriptorPoolSize : public Napi::ObjectWrap<_VkDescriptorPoolSize> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDescriptorPoolSize(const Napi::CallbackInfo &info);
    ~_VkDescriptorPoolSize();

    // #accessors
    Napi::Value Gettype(const Napi::CallbackInfo &info);
    void Settype(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdescriptorCount(const Napi::CallbackInfo &info);
    void SetdescriptorCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDescriptorPoolSize instance = {};

};

/** ## END VkDescriptorPoolSize ## **/

/** ## BEGIN VkDescriptorSetLayoutCreateInfo ## **/

class _VkDescriptorSetLayoutCreateInfo : public Napi::ObjectWrap<_VkDescriptorSetLayoutCreateInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDescriptorSetLayoutCreateInfo(const Napi::CallbackInfo &info);
    ~_VkDescriptorSetLayoutCreateInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetbindingCount(const Napi::CallbackInfo &info);
    void SetbindingCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkDescriptorSetLayoutBinding>* vpBindings;
    Napi::ObjectReference pBindings;
    Napi::Value GetpBindings(const Napi::CallbackInfo &info);
    void SetpBindings(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDescriptorSetLayoutCreateInfo instance = {};

};

/** ## END VkDescriptorSetLayoutCreateInfo ## **/

/** ## BEGIN VkDescriptorSetLayoutBinding ## **/

class _VkDescriptorSetLayoutBinding : public Napi::ObjectWrap<_VkDescriptorSetLayoutBinding> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDescriptorSetLayoutBinding(const Napi::CallbackInfo &info);
    ~_VkDescriptorSetLayoutBinding();

    // #accessors
    Napi::Value Getbinding(const Napi::CallbackInfo &info);
    void Setbinding(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdescriptorType(const Napi::CallbackInfo &info);
    void SetdescriptorType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdescriptorCount(const Napi::CallbackInfo &info);
    void SetdescriptorCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetstageFlags(const Napi::CallbackInfo &info);
    void SetstageFlags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkSampler>* vpImmutableSamplers;
    Napi::ObjectReference pImmutableSamplers;
    Napi::Value GetpImmutableSamplers(const Napi::CallbackInfo &info);
    void SetpImmutableSamplers(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDescriptorSetLayoutBinding instance = {};

};

/** ## END VkDescriptorSetLayoutBinding ## **/

/** ## BEGIN VkShaderModuleCreateInfo ## **/

class _VkShaderModuleCreateInfo : public Napi::ObjectWrap<_VkShaderModuleCreateInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkShaderModuleCreateInfo(const Napi::CallbackInfo &info);
    ~_VkShaderModuleCreateInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetcodeSize(const Napi::CallbackInfo &info);
    void SetcodeSize(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pCode;
    Napi::Value GetpCode(const Napi::CallbackInfo &info);
    void SetpCode(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkShaderModuleCreateInfo instance = {};

};

/** ## END VkShaderModuleCreateInfo ## **/

/** ## BEGIN VkImageResolve ## **/

class _VkImageResolve : public Napi::ObjectWrap<_VkImageResolve> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkImageResolve(const Napi::CallbackInfo &info);
    ~_VkImageResolve();

    // #accessors
    Napi::ObjectReference srcSubresource;
    Napi::Value GetsrcSubresource(const Napi::CallbackInfo &info);
    void SetsrcSubresource(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference srcOffset;
    Napi::Value GetsrcOffset(const Napi::CallbackInfo &info);
    void SetsrcOffset(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference dstSubresource;
    Napi::Value GetdstSubresource(const Napi::CallbackInfo &info);
    void SetdstSubresource(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference dstOffset;
    Napi::Value GetdstOffset(const Napi::CallbackInfo &info);
    void SetdstOffset(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference extent;
    Napi::Value Getextent(const Napi::CallbackInfo &info);
    void Setextent(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkImageResolve instance = {};

};

/** ## END VkImageResolve ## **/

/** ## BEGIN VkBufferImageCopy ## **/

class _VkBufferImageCopy : public Napi::ObjectWrap<_VkBufferImageCopy> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkBufferImageCopy(const Napi::CallbackInfo &info);
    ~_VkBufferImageCopy();

    // #accessors
    Napi::Value GetbufferOffset(const Napi::CallbackInfo &info);
    void SetbufferOffset(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetbufferRowLength(const Napi::CallbackInfo &info);
    void SetbufferRowLength(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetbufferImageHeight(const Napi::CallbackInfo &info);
    void SetbufferImageHeight(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference imageSubresource;
    Napi::Value GetimageSubresource(const Napi::CallbackInfo &info);
    void SetimageSubresource(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference imageOffset;
    Napi::Value GetimageOffset(const Napi::CallbackInfo &info);
    void SetimageOffset(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference imageExtent;
    Napi::Value GetimageExtent(const Napi::CallbackInfo &info);
    void SetimageExtent(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkBufferImageCopy instance = {};

};

/** ## END VkBufferImageCopy ## **/

/** ## BEGIN VkImageBlit ## **/

class _VkImageBlit : public Napi::ObjectWrap<_VkImageBlit> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkImageBlit(const Napi::CallbackInfo &info);
    ~_VkImageBlit();

    // #accessors
    Napi::ObjectReference srcSubresource;
    Napi::Value GetsrcSubresource(const Napi::CallbackInfo &info);
    void SetsrcSubresource(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkOffset3D>* vsrcOffsets;
    Napi::ObjectReference srcOffsets;
    Napi::Value GetsrcOffsets(const Napi::CallbackInfo &info);
    void SetsrcOffsets(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference dstSubresource;
    Napi::Value GetdstSubresource(const Napi::CallbackInfo &info);
    void SetdstSubresource(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkOffset3D>* vdstOffsets;
    Napi::ObjectReference dstOffsets;
    Napi::Value GetdstOffsets(const Napi::CallbackInfo &info);
    void SetdstOffsets(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkImageBlit instance = {};

};

/** ## END VkImageBlit ## **/

/** ## BEGIN VkImageCopy ## **/

class _VkImageCopy : public Napi::ObjectWrap<_VkImageCopy> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkImageCopy(const Napi::CallbackInfo &info);
    ~_VkImageCopy();

    // #accessors
    Napi::ObjectReference srcSubresource;
    Napi::Value GetsrcSubresource(const Napi::CallbackInfo &info);
    void SetsrcSubresource(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference srcOffset;
    Napi::Value GetsrcOffset(const Napi::CallbackInfo &info);
    void SetsrcOffset(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference dstSubresource;
    Napi::Value GetdstSubresource(const Napi::CallbackInfo &info);
    void SetdstSubresource(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference dstOffset;
    Napi::Value GetdstOffset(const Napi::CallbackInfo &info);
    void SetdstOffset(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference extent;
    Napi::Value Getextent(const Napi::CallbackInfo &info);
    void Setextent(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkImageCopy instance = {};

};

/** ## END VkImageCopy ## **/

/** ## BEGIN VkBindSparseInfo ## **/

class _VkBindSparseInfo : public Napi::ObjectWrap<_VkBindSparseInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkBindSparseInfo(const Napi::CallbackInfo &info);
    ~_VkBindSparseInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetwaitSemaphoreCount(const Napi::CallbackInfo &info);
    void SetwaitSemaphoreCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkSemaphore>* vpWaitSemaphores;
    Napi::ObjectReference pWaitSemaphores;
    Napi::Value GetpWaitSemaphores(const Napi::CallbackInfo &info);
    void SetpWaitSemaphores(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetbufferBindCount(const Napi::CallbackInfo &info);
    void SetbufferBindCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkSparseBufferMemoryBindInfo>* vpBufferBinds;
    Napi::ObjectReference pBufferBinds;
    Napi::Value GetpBufferBinds(const Napi::CallbackInfo &info);
    void SetpBufferBinds(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetimageOpaqueBindCount(const Napi::CallbackInfo &info);
    void SetimageOpaqueBindCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkSparseImageOpaqueMemoryBindInfo>* vpImageOpaqueBinds;
    Napi::ObjectReference pImageOpaqueBinds;
    Napi::Value GetpImageOpaqueBinds(const Napi::CallbackInfo &info);
    void SetpImageOpaqueBinds(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetimageBindCount(const Napi::CallbackInfo &info);
    void SetimageBindCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkSparseImageMemoryBindInfo>* vpImageBinds;
    Napi::ObjectReference pImageBinds;
    Napi::Value GetpImageBinds(const Napi::CallbackInfo &info);
    void SetpImageBinds(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetsignalSemaphoreCount(const Napi::CallbackInfo &info);
    void SetsignalSemaphoreCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkSemaphore>* vpSignalSemaphores;
    Napi::ObjectReference pSignalSemaphores;
    Napi::Value GetpSignalSemaphores(const Napi::CallbackInfo &info);
    void SetpSignalSemaphores(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkBindSparseInfo instance = {};

};

/** ## END VkBindSparseInfo ## **/

/** ## BEGIN VkSparseImageMemoryBindInfo ## **/

class _VkSparseImageMemoryBindInfo : public Napi::ObjectWrap<_VkSparseImageMemoryBindInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkSparseImageMemoryBindInfo(const Napi::CallbackInfo &info);
    ~_VkSparseImageMemoryBindInfo();

    // #accessors
    Napi::ObjectReference image;
    Napi::Value Getimage(const Napi::CallbackInfo &info);
    void Setimage(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetbindCount(const Napi::CallbackInfo &info);
    void SetbindCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkSparseImageMemoryBind>* vpBinds;
    Napi::ObjectReference pBinds;
    Napi::Value GetpBinds(const Napi::CallbackInfo &info);
    void SetpBinds(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkSparseImageMemoryBindInfo instance = {};

};

/** ## END VkSparseImageMemoryBindInfo ## **/

/** ## BEGIN VkSparseImageOpaqueMemoryBindInfo ## **/

class _VkSparseImageOpaqueMemoryBindInfo : public Napi::ObjectWrap<_VkSparseImageOpaqueMemoryBindInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkSparseImageOpaqueMemoryBindInfo(const Napi::CallbackInfo &info);
    ~_VkSparseImageOpaqueMemoryBindInfo();

    // #accessors
    Napi::ObjectReference image;
    Napi::Value Getimage(const Napi::CallbackInfo &info);
    void Setimage(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetbindCount(const Napi::CallbackInfo &info);
    void SetbindCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkSparseMemoryBind>* vpBinds;
    Napi::ObjectReference pBinds;
    Napi::Value GetpBinds(const Napi::CallbackInfo &info);
    void SetpBinds(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkSparseImageOpaqueMemoryBindInfo instance = {};

};

/** ## END VkSparseImageOpaqueMemoryBindInfo ## **/

/** ## BEGIN VkSparseBufferMemoryBindInfo ## **/

class _VkSparseBufferMemoryBindInfo : public Napi::ObjectWrap<_VkSparseBufferMemoryBindInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkSparseBufferMemoryBindInfo(const Napi::CallbackInfo &info);
    ~_VkSparseBufferMemoryBindInfo();

    // #accessors
    Napi::ObjectReference buffer;
    Napi::Value Getbuffer(const Napi::CallbackInfo &info);
    void Setbuffer(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetbindCount(const Napi::CallbackInfo &info);
    void SetbindCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkSparseMemoryBind>* vpBinds;
    Napi::ObjectReference pBinds;
    Napi::Value GetpBinds(const Napi::CallbackInfo &info);
    void SetpBinds(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkSparseBufferMemoryBindInfo instance = {};

};

/** ## END VkSparseBufferMemoryBindInfo ## **/

/** ## BEGIN VkSparseImageMemoryBind ## **/

class _VkSparseImageMemoryBind : public Napi::ObjectWrap<_VkSparseImageMemoryBind> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkSparseImageMemoryBind(const Napi::CallbackInfo &info);
    ~_VkSparseImageMemoryBind();

    // #accessors
    Napi::ObjectReference subresource;
    Napi::Value Getsubresource(const Napi::CallbackInfo &info);
    void Setsubresource(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference offset;
    Napi::Value Getoffset(const Napi::CallbackInfo &info);
    void Setoffset(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference extent;
    Napi::Value Getextent(const Napi::CallbackInfo &info);
    void Setextent(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference memory;
    Napi::Value Getmemory(const Napi::CallbackInfo &info);
    void Setmemory(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmemoryOffset(const Napi::CallbackInfo &info);
    void SetmemoryOffset(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkSparseImageMemoryBind instance = {};

};

/** ## END VkSparseImageMemoryBind ## **/

/** ## BEGIN VkSparseMemoryBind ## **/

class _VkSparseMemoryBind : public Napi::ObjectWrap<_VkSparseMemoryBind> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkSparseMemoryBind(const Napi::CallbackInfo &info);
    ~_VkSparseMemoryBind();

    // #accessors
    Napi::Value GetresourceOffset(const Napi::CallbackInfo &info);
    void SetresourceOffset(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getsize(const Napi::CallbackInfo &info);
    void Setsize(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference memory;
    Napi::Value Getmemory(const Napi::CallbackInfo &info);
    void Setmemory(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmemoryOffset(const Napi::CallbackInfo &info);
    void SetmemoryOffset(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkSparseMemoryBind instance = {};

};

/** ## END VkSparseMemoryBind ## **/

/** ## BEGIN VkBufferCopy ## **/

class _VkBufferCopy : public Napi::ObjectWrap<_VkBufferCopy> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkBufferCopy(const Napi::CallbackInfo &info);
    ~_VkBufferCopy();

    // #accessors
    Napi::Value GetsrcOffset(const Napi::CallbackInfo &info);
    void SetsrcOffset(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdstOffset(const Napi::CallbackInfo &info);
    void SetdstOffset(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getsize(const Napi::CallbackInfo &info);
    void Setsize(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkBufferCopy instance = {};

};

/** ## END VkBufferCopy ## **/

/** ## BEGIN VkImageViewCreateInfo ## **/

class _VkImageViewCreateInfo : public Napi::ObjectWrap<_VkImageViewCreateInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkImageViewCreateInfo(const Napi::CallbackInfo &info);
    ~_VkImageViewCreateInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference image;
    Napi::Value Getimage(const Napi::CallbackInfo &info);
    void Setimage(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetviewType(const Napi::CallbackInfo &info);
    void SetviewType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getformat(const Napi::CallbackInfo &info);
    void Setformat(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference components;
    Napi::Value Getcomponents(const Napi::CallbackInfo &info);
    void Setcomponents(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference subresourceRange;
    Napi::Value GetsubresourceRange(const Napi::CallbackInfo &info);
    void SetsubresourceRange(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkImageViewCreateInfo instance = {};

};

/** ## END VkImageViewCreateInfo ## **/

/** ## BEGIN VkSubresourceLayout ## **/

class _VkSubresourceLayout : public Napi::ObjectWrap<_VkSubresourceLayout> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkSubresourceLayout(const Napi::CallbackInfo &info);
    ~_VkSubresourceLayout();

    // #accessors
    Napi::Value Getoffset(const Napi::CallbackInfo &info);
    Napi::Value Getsize(const Napi::CallbackInfo &info);
    Napi::Value GetrowPitch(const Napi::CallbackInfo &info);
    Napi::Value GetarrayPitch(const Napi::CallbackInfo &info);
    Napi::Value GetdepthPitch(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkSubresourceLayout instance = {};

};

/** ## END VkSubresourceLayout ## **/

/** ## BEGIN VkImageCreateInfo ## **/

class _VkImageCreateInfo : public Napi::ObjectWrap<_VkImageCreateInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkImageCreateInfo(const Napi::CallbackInfo &info);
    ~_VkImageCreateInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetimageType(const Napi::CallbackInfo &info);
    void SetimageType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getformat(const Napi::CallbackInfo &info);
    void Setformat(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference extent;
    Napi::Value Getextent(const Napi::CallbackInfo &info);
    void Setextent(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmipLevels(const Napi::CallbackInfo &info);
    void SetmipLevels(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetarrayLayers(const Napi::CallbackInfo &info);
    void SetarrayLayers(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getsamples(const Napi::CallbackInfo &info);
    void Setsamples(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Gettiling(const Napi::CallbackInfo &info);
    void Settiling(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getusage(const Napi::CallbackInfo &info);
    void Setusage(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetsharingMode(const Napi::CallbackInfo &info);
    void SetsharingMode(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetqueueFamilyIndexCount(const Napi::CallbackInfo &info);
    void SetqueueFamilyIndexCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pQueueFamilyIndices;
    Napi::Value GetpQueueFamilyIndices(const Napi::CallbackInfo &info);
    void SetpQueueFamilyIndices(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetinitialLayout(const Napi::CallbackInfo &info);
    void SetinitialLayout(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkImageCreateInfo instance = {};

};

/** ## END VkImageCreateInfo ## **/

/** ## BEGIN VkImageMemoryBarrier ## **/

class _VkImageMemoryBarrier : public Napi::ObjectWrap<_VkImageMemoryBarrier> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkImageMemoryBarrier(const Napi::CallbackInfo &info);
    ~_VkImageMemoryBarrier();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetsrcAccessMask(const Napi::CallbackInfo &info);
    void SetsrcAccessMask(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdstAccessMask(const Napi::CallbackInfo &info);
    void SetdstAccessMask(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetoldLayout(const Napi::CallbackInfo &info);
    void SetoldLayout(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetnewLayout(const Napi::CallbackInfo &info);
    void SetnewLayout(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetsrcQueueFamilyIndex(const Napi::CallbackInfo &info);
    void SetsrcQueueFamilyIndex(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdstQueueFamilyIndex(const Napi::CallbackInfo &info);
    void SetdstQueueFamilyIndex(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference image;
    Napi::Value Getimage(const Napi::CallbackInfo &info);
    void Setimage(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference subresourceRange;
    Napi::Value GetsubresourceRange(const Napi::CallbackInfo &info);
    void SetsubresourceRange(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkImageMemoryBarrier instance = {};

};

/** ## END VkImageMemoryBarrier ## **/

/** ## BEGIN VkBufferMemoryBarrier ## **/

class _VkBufferMemoryBarrier : public Napi::ObjectWrap<_VkBufferMemoryBarrier> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkBufferMemoryBarrier(const Napi::CallbackInfo &info);
    ~_VkBufferMemoryBarrier();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetsrcAccessMask(const Napi::CallbackInfo &info);
    void SetsrcAccessMask(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdstAccessMask(const Napi::CallbackInfo &info);
    void SetdstAccessMask(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetsrcQueueFamilyIndex(const Napi::CallbackInfo &info);
    void SetsrcQueueFamilyIndex(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdstQueueFamilyIndex(const Napi::CallbackInfo &info);
    void SetdstQueueFamilyIndex(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference buffer;
    Napi::Value Getbuffer(const Napi::CallbackInfo &info);
    void Setbuffer(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getoffset(const Napi::CallbackInfo &info);
    void Setoffset(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getsize(const Napi::CallbackInfo &info);
    void Setsize(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkBufferMemoryBarrier instance = {};

};

/** ## END VkBufferMemoryBarrier ## **/

/** ## BEGIN VkMemoryBarrier ## **/

class _VkMemoryBarrier : public Napi::ObjectWrap<_VkMemoryBarrier> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkMemoryBarrier(const Napi::CallbackInfo &info);
    ~_VkMemoryBarrier();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetsrcAccessMask(const Napi::CallbackInfo &info);
    void SetsrcAccessMask(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdstAccessMask(const Napi::CallbackInfo &info);
    void SetdstAccessMask(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkMemoryBarrier instance = {};

};

/** ## END VkMemoryBarrier ## **/

/** ## BEGIN VkImageSubresourceRange ## **/

class _VkImageSubresourceRange : public Napi::ObjectWrap<_VkImageSubresourceRange> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkImageSubresourceRange(const Napi::CallbackInfo &info);
    ~_VkImageSubresourceRange();

    // #accessors
    Napi::Value GetaspectMask(const Napi::CallbackInfo &info);
    void SetaspectMask(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetbaseMipLevel(const Napi::CallbackInfo &info);
    void SetbaseMipLevel(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetlevelCount(const Napi::CallbackInfo &info);
    void SetlevelCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetbaseArrayLayer(const Napi::CallbackInfo &info);
    void SetbaseArrayLayer(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetlayerCount(const Napi::CallbackInfo &info);
    void SetlayerCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkImageSubresourceRange instance = {};

};

/** ## END VkImageSubresourceRange ## **/

/** ## BEGIN VkImageSubresourceLayers ## **/

class _VkImageSubresourceLayers : public Napi::ObjectWrap<_VkImageSubresourceLayers> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkImageSubresourceLayers(const Napi::CallbackInfo &info);
    ~_VkImageSubresourceLayers();

    // #accessors
    Napi::Value GetaspectMask(const Napi::CallbackInfo &info);
    void SetaspectMask(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmipLevel(const Napi::CallbackInfo &info);
    void SetmipLevel(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetbaseArrayLayer(const Napi::CallbackInfo &info);
    void SetbaseArrayLayer(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetlayerCount(const Napi::CallbackInfo &info);
    void SetlayerCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkImageSubresourceLayers instance = {};

};

/** ## END VkImageSubresourceLayers ## **/

/** ## BEGIN VkImageSubresource ## **/

class _VkImageSubresource : public Napi::ObjectWrap<_VkImageSubresource> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkImageSubresource(const Napi::CallbackInfo &info);
    ~_VkImageSubresource();

    // #accessors
    Napi::Value GetaspectMask(const Napi::CallbackInfo &info);
    void SetaspectMask(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmipLevel(const Napi::CallbackInfo &info);
    void SetmipLevel(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetarrayLayer(const Napi::CallbackInfo &info);
    void SetarrayLayer(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkImageSubresource instance = {};

};

/** ## END VkImageSubresource ## **/

/** ## BEGIN VkBufferViewCreateInfo ## **/

class _VkBufferViewCreateInfo : public Napi::ObjectWrap<_VkBufferViewCreateInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkBufferViewCreateInfo(const Napi::CallbackInfo &info);
    ~_VkBufferViewCreateInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference buffer;
    Napi::Value Getbuffer(const Napi::CallbackInfo &info);
    void Setbuffer(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getformat(const Napi::CallbackInfo &info);
    void Setformat(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getoffset(const Napi::CallbackInfo &info);
    void Setoffset(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getrange(const Napi::CallbackInfo &info);
    void Setrange(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkBufferViewCreateInfo instance = {};

};

/** ## END VkBufferViewCreateInfo ## **/

/** ## BEGIN VkBufferCreateInfo ## **/

class _VkBufferCreateInfo : public Napi::ObjectWrap<_VkBufferCreateInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkBufferCreateInfo(const Napi::CallbackInfo &info);
    ~_VkBufferCreateInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getsize(const Napi::CallbackInfo &info);
    void Setsize(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getusage(const Napi::CallbackInfo &info);
    void Setusage(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetsharingMode(const Napi::CallbackInfo &info);
    void SetsharingMode(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetqueueFamilyIndexCount(const Napi::CallbackInfo &info);
    void SetqueueFamilyIndexCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pQueueFamilyIndices;
    Napi::Value GetpQueueFamilyIndices(const Napi::CallbackInfo &info);
    void SetpQueueFamilyIndices(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkBufferCreateInfo instance = {};

};

/** ## END VkBufferCreateInfo ## **/

/** ## BEGIN VkCopyDescriptorSet ## **/

class _VkCopyDescriptorSet : public Napi::ObjectWrap<_VkCopyDescriptorSet> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkCopyDescriptorSet(const Napi::CallbackInfo &info);
    ~_VkCopyDescriptorSet();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference srcSet;
    Napi::Value GetsrcSet(const Napi::CallbackInfo &info);
    void SetsrcSet(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetsrcBinding(const Napi::CallbackInfo &info);
    void SetsrcBinding(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetsrcArrayElement(const Napi::CallbackInfo &info);
    void SetsrcArrayElement(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference dstSet;
    Napi::Value GetdstSet(const Napi::CallbackInfo &info);
    void SetdstSet(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdstBinding(const Napi::CallbackInfo &info);
    void SetdstBinding(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdstArrayElement(const Napi::CallbackInfo &info);
    void SetdstArrayElement(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdescriptorCount(const Napi::CallbackInfo &info);
    void SetdescriptorCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkCopyDescriptorSet instance = {};

};

/** ## END VkCopyDescriptorSet ## **/

/** ## BEGIN VkWriteDescriptorSet ## **/

class _VkWriteDescriptorSet : public Napi::ObjectWrap<_VkWriteDescriptorSet> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkWriteDescriptorSet(const Napi::CallbackInfo &info);
    ~_VkWriteDescriptorSet();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference dstSet;
    Napi::Value GetdstSet(const Napi::CallbackInfo &info);
    void SetdstSet(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdstBinding(const Napi::CallbackInfo &info);
    void SetdstBinding(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdstArrayElement(const Napi::CallbackInfo &info);
    void SetdstArrayElement(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdescriptorCount(const Napi::CallbackInfo &info);
    void SetdescriptorCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetdescriptorType(const Napi::CallbackInfo &info);
    void SetdescriptorType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkDescriptorImageInfo>* vpImageInfo;
    Napi::ObjectReference pImageInfo;
    Napi::Value GetpImageInfo(const Napi::CallbackInfo &info);
    void SetpImageInfo(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkDescriptorBufferInfo>* vpBufferInfo;
    Napi::ObjectReference pBufferInfo;
    Napi::Value GetpBufferInfo(const Napi::CallbackInfo &info);
    void SetpBufferInfo(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkBufferView>* vpTexelBufferView;
    Napi::ObjectReference pTexelBufferView;
    Napi::Value GetpTexelBufferView(const Napi::CallbackInfo &info);
    void SetpTexelBufferView(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkWriteDescriptorSet instance = {};

};

/** ## END VkWriteDescriptorSet ## **/

/** ## BEGIN VkDescriptorImageInfo ## **/

class _VkDescriptorImageInfo : public Napi::ObjectWrap<_VkDescriptorImageInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDescriptorImageInfo(const Napi::CallbackInfo &info);
    ~_VkDescriptorImageInfo();

    // #accessors
    Napi::ObjectReference sampler;
    Napi::Value Getsampler(const Napi::CallbackInfo &info);
    void Setsampler(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference imageView;
    Napi::Value GetimageView(const Napi::CallbackInfo &info);
    void SetimageView(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetimageLayout(const Napi::CallbackInfo &info);
    void SetimageLayout(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDescriptorImageInfo instance = {};

};

/** ## END VkDescriptorImageInfo ## **/

/** ## BEGIN VkDescriptorBufferInfo ## **/

class _VkDescriptorBufferInfo : public Napi::ObjectWrap<_VkDescriptorBufferInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDescriptorBufferInfo(const Napi::CallbackInfo &info);
    ~_VkDescriptorBufferInfo();

    // #accessors
    Napi::ObjectReference buffer;
    Napi::Value Getbuffer(const Napi::CallbackInfo &info);
    void Setbuffer(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getoffset(const Napi::CallbackInfo &info);
    void Setoffset(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getrange(const Napi::CallbackInfo &info);
    void Setrange(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDescriptorBufferInfo instance = {};

};

/** ## END VkDescriptorBufferInfo ## **/

/** ## BEGIN VkImageFormatProperties ## **/

class _VkImageFormatProperties : public Napi::ObjectWrap<_VkImageFormatProperties> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkImageFormatProperties(const Napi::CallbackInfo &info);
    ~_VkImageFormatProperties();

    // #accessors
    Napi::ObjectReference maxExtent;
    Napi::Value GetmaxExtent(const Napi::CallbackInfo &info);
    Napi::Value GetmaxMipLevels(const Napi::CallbackInfo &info);
    Napi::Value GetmaxArrayLayers(const Napi::CallbackInfo &info);
    Napi::Value GetsampleCounts(const Napi::CallbackInfo &info);
    Napi::Value GetmaxResourceSize(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkImageFormatProperties instance = {};

};

/** ## END VkImageFormatProperties ## **/

/** ## BEGIN VkFormatProperties ## **/

class _VkFormatProperties : public Napi::ObjectWrap<_VkFormatProperties> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkFormatProperties(const Napi::CallbackInfo &info);
    ~_VkFormatProperties();

    // #accessors
    Napi::Value GetlinearTilingFeatures(const Napi::CallbackInfo &info);
    Napi::Value GetoptimalTilingFeatures(const Napi::CallbackInfo &info);
    Napi::Value GetbufferFeatures(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkFormatProperties instance = {};

};

/** ## END VkFormatProperties ## **/

/** ## BEGIN VkMappedMemoryRange ## **/

class _VkMappedMemoryRange : public Napi::ObjectWrap<_VkMappedMemoryRange> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkMappedMemoryRange(const Napi::CallbackInfo &info);
    ~_VkMappedMemoryRange();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference memory;
    Napi::Value Getmemory(const Napi::CallbackInfo &info);
    void Setmemory(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getoffset(const Napi::CallbackInfo &info);
    void Setoffset(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getsize(const Napi::CallbackInfo &info);
    void Setsize(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkMappedMemoryRange instance = {};

};

/** ## END VkMappedMemoryRange ## **/

/** ## BEGIN VkMemoryHeap ## **/

class _VkMemoryHeap : public Napi::ObjectWrap<_VkMemoryHeap> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkMemoryHeap(const Napi::CallbackInfo &info);
    ~_VkMemoryHeap();

    // #accessors
    Napi::Value Getsize(const Napi::CallbackInfo &info);
    Napi::Value Getflags(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkMemoryHeap instance = {};

};

/** ## END VkMemoryHeap ## **/

/** ## BEGIN VkMemoryType ## **/

class _VkMemoryType : public Napi::ObjectWrap<_VkMemoryType> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkMemoryType(const Napi::CallbackInfo &info);
    ~_VkMemoryType();

    // #accessors
    Napi::Value GetpropertyFlags(const Napi::CallbackInfo &info);
    Napi::Value GetheapIndex(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkMemoryType instance = {};

};

/** ## END VkMemoryType ## **/

/** ## BEGIN VkSparseImageMemoryRequirements ## **/

class _VkSparseImageMemoryRequirements : public Napi::ObjectWrap<_VkSparseImageMemoryRequirements> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkSparseImageMemoryRequirements(const Napi::CallbackInfo &info);
    ~_VkSparseImageMemoryRequirements();

    // #accessors
    Napi::ObjectReference formatProperties;
    Napi::Value GetformatProperties(const Napi::CallbackInfo &info);
    Napi::Value GetimageMipTailFirstLod(const Napi::CallbackInfo &info);
    Napi::Value GetimageMipTailSize(const Napi::CallbackInfo &info);
    Napi::Value GetimageMipTailOffset(const Napi::CallbackInfo &info);
    Napi::Value GetimageMipTailStride(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkSparseImageMemoryRequirements instance = {};

};

/** ## END VkSparseImageMemoryRequirements ## **/

/** ## BEGIN VkSparseImageFormatProperties ## **/

class _VkSparseImageFormatProperties : public Napi::ObjectWrap<_VkSparseImageFormatProperties> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkSparseImageFormatProperties(const Napi::CallbackInfo &info);
    ~_VkSparseImageFormatProperties();

    // #accessors
    Napi::Value GetaspectMask(const Napi::CallbackInfo &info);
    Napi::ObjectReference imageGranularity;
    Napi::Value GetimageGranularity(const Napi::CallbackInfo &info);
    Napi::Value Getflags(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkSparseImageFormatProperties instance = {};

};

/** ## END VkSparseImageFormatProperties ## **/

/** ## BEGIN VkMemoryRequirements ## **/

class _VkMemoryRequirements : public Napi::ObjectWrap<_VkMemoryRequirements> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkMemoryRequirements(const Napi::CallbackInfo &info);
    ~_VkMemoryRequirements();

    // #accessors
    Napi::Value Getsize(const Napi::CallbackInfo &info);
    Napi::Value Getalignment(const Napi::CallbackInfo &info);
    Napi::Value GetmemoryTypeBits(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkMemoryRequirements instance = {};

};

/** ## END VkMemoryRequirements ## **/

/** ## BEGIN VkMemoryAllocateInfo ## **/

class _VkMemoryAllocateInfo : public Napi::ObjectWrap<_VkMemoryAllocateInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkMemoryAllocateInfo(const Napi::CallbackInfo &info);
    ~_VkMemoryAllocateInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetallocationSize(const Napi::CallbackInfo &info);
    void SetallocationSize(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmemoryTypeIndex(const Napi::CallbackInfo &info);
    void SetmemoryTypeIndex(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkMemoryAllocateInfo instance = {};

};

/** ## END VkMemoryAllocateInfo ## **/

/** ## BEGIN VkPhysicalDeviceMemoryProperties ## **/

class _VkPhysicalDeviceMemoryProperties : public Napi::ObjectWrap<_VkPhysicalDeviceMemoryProperties> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceMemoryProperties(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceMemoryProperties();

    // #accessors
    Napi::Value GetmemoryTypeCount(const Napi::CallbackInfo &info);
    std::vector<VkMemoryType>* vmemoryTypes;
    Napi::ObjectReference memoryTypes;
    Napi::Value GetmemoryTypes(const Napi::CallbackInfo &info);
    Napi::Value GetmemoryHeapCount(const Napi::CallbackInfo &info);
    std::vector<VkMemoryHeap>* vmemoryHeaps;
    Napi::ObjectReference memoryHeaps;
    Napi::Value GetmemoryHeaps(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceMemoryProperties instance = {};

};

/** ## END VkPhysicalDeviceMemoryProperties ## **/

/** ## BEGIN VkQueueFamilyProperties ## **/

class _VkQueueFamilyProperties : public Napi::ObjectWrap<_VkQueueFamilyProperties> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkQueueFamilyProperties(const Napi::CallbackInfo &info);
    ~_VkQueueFamilyProperties();

    // #accessors
    Napi::Value GetqueueFlags(const Napi::CallbackInfo &info);
    Napi::Value GetqueueCount(const Napi::CallbackInfo &info);
    Napi::Value GettimestampValidBits(const Napi::CallbackInfo &info);
    Napi::ObjectReference minImageTransferGranularity;
    Napi::Value GetminImageTransferGranularity(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkQueueFamilyProperties instance = {};

};

/** ## END VkQueueFamilyProperties ## **/

/** ## BEGIN VkInstanceCreateInfo ## **/

class _VkInstanceCreateInfo : public Napi::ObjectWrap<_VkInstanceCreateInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkInstanceCreateInfo(const Napi::CallbackInfo &info);
    ~_VkInstanceCreateInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pApplicationInfo;
    Napi::Value GetpApplicationInfo(const Napi::CallbackInfo &info);
    void SetpApplicationInfo(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetenabledLayerCount(const Napi::CallbackInfo &info);
    void SetenabledLayerCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<char *>* vppEnabledLayerNames;
    Napi::ObjectReference ppEnabledLayerNames;
    Napi::Value GetppEnabledLayerNames(const Napi::CallbackInfo &info);
    void SetppEnabledLayerNames(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetenabledExtensionCount(const Napi::CallbackInfo &info);
    void SetenabledExtensionCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<char *>* vppEnabledExtensionNames;
    Napi::ObjectReference ppEnabledExtensionNames;
    Napi::Value GetppEnabledExtensionNames(const Napi::CallbackInfo &info);
    void SetppEnabledExtensionNames(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkInstanceCreateInfo instance = {};

};

/** ## END VkInstanceCreateInfo ## **/

/** ## BEGIN VkDeviceCreateInfo ## **/

class _VkDeviceCreateInfo : public Napi::ObjectWrap<_VkDeviceCreateInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDeviceCreateInfo(const Napi::CallbackInfo &info);
    ~_VkDeviceCreateInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetqueueCreateInfoCount(const Napi::CallbackInfo &info);
    void SetqueueCreateInfoCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<VkDeviceQueueCreateInfo>* vpQueueCreateInfos;
    Napi::ObjectReference pQueueCreateInfos;
    Napi::Value GetpQueueCreateInfos(const Napi::CallbackInfo &info);
    void SetpQueueCreateInfos(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetenabledLayerCount(const Napi::CallbackInfo &info);
    void SetenabledLayerCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<char *>* vppEnabledLayerNames;
    Napi::ObjectReference ppEnabledLayerNames;
    Napi::Value GetppEnabledLayerNames(const Napi::CallbackInfo &info);
    void SetppEnabledLayerNames(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetenabledExtensionCount(const Napi::CallbackInfo &info);
    void SetenabledExtensionCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    std::vector<char *>* vppEnabledExtensionNames;
    Napi::ObjectReference ppEnabledExtensionNames;
    Napi::Value GetppEnabledExtensionNames(const Napi::CallbackInfo &info);
    void SetppEnabledExtensionNames(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pEnabledFeatures;
    Napi::Value GetpEnabledFeatures(const Napi::CallbackInfo &info);
    void SetpEnabledFeatures(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDeviceCreateInfo instance = {};

};

/** ## END VkDeviceCreateInfo ## **/

/** ## BEGIN VkDeviceQueueCreateInfo ## **/

class _VkDeviceQueueCreateInfo : public Napi::ObjectWrap<_VkDeviceQueueCreateInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkDeviceQueueCreateInfo(const Napi::CallbackInfo &info);
    ~_VkDeviceQueueCreateInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getflags(const Napi::CallbackInfo &info);
    void Setflags(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetqueueFamilyIndex(const Napi::CallbackInfo &info);
    void SetqueueFamilyIndex(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetqueueCount(const Napi::CallbackInfo &info);
    void SetqueueCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pQueuePriorities;
    Napi::Value GetpQueuePriorities(const Napi::CallbackInfo &info);
    void SetpQueuePriorities(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkDeviceQueueCreateInfo instance = {};

};

/** ## END VkDeviceQueueCreateInfo ## **/

/** ## BEGIN VkAllocationCallbacks ## **/

class _VkAllocationCallbacks : public Napi::ObjectWrap<_VkAllocationCallbacks> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkAllocationCallbacks(const Napi::CallbackInfo &info);
    ~_VkAllocationCallbacks();

    // #accessors
    Napi::ObjectReference pUserData;
    Napi::Value GetpUserData(const Napi::CallbackInfo &info);
    void SetpUserData(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkAllocationCallbacks instance = {};

};

/** ## END VkAllocationCallbacks ## **/

/** ## BEGIN VkApplicationInfo ## **/

class _VkApplicationInfo : public Napi::ObjectWrap<_VkApplicationInfo> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkApplicationInfo(const Napi::CallbackInfo &info);
    ~_VkApplicationInfo();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pApplicationName;
    Napi::Value GetpApplicationName(const Napi::CallbackInfo &info);
    void SetpApplicationName(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetapplicationVersion(const Napi::CallbackInfo &info);
    void SetapplicationVersion(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pEngineName;
    Napi::Value GetpEngineName(const Napi::CallbackInfo &info);
    void SetpEngineName(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetengineVersion(const Napi::CallbackInfo &info);
    void SetengineVersion(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetapiVersion(const Napi::CallbackInfo &info);
    void SetapiVersion(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkApplicationInfo instance = {};

};

/** ## END VkApplicationInfo ## **/

/** ## BEGIN VkLayerProperties ## **/

class _VkLayerProperties : public Napi::ObjectWrap<_VkLayerProperties> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkLayerProperties(const Napi::CallbackInfo &info);
    ~_VkLayerProperties();

    // #accessors
    Napi::ObjectReference layerName;
    Napi::Value GetlayerName(const Napi::CallbackInfo &info);
    Napi::Value GetspecVersion(const Napi::CallbackInfo &info);
    Napi::Value GetimplementationVersion(const Napi::CallbackInfo &info);
    Napi::ObjectReference description;
    Napi::Value Getdescription(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkLayerProperties instance = {};

};

/** ## END VkLayerProperties ## **/

/** ## BEGIN VkExtensionProperties ## **/

class _VkExtensionProperties : public Napi::ObjectWrap<_VkExtensionProperties> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkExtensionProperties(const Napi::CallbackInfo &info);
    ~_VkExtensionProperties();

    // #accessors
    Napi::ObjectReference extensionName;
    Napi::Value GetextensionName(const Napi::CallbackInfo &info);
    Napi::Value GetspecVersion(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkExtensionProperties instance = {};

};

/** ## END VkExtensionProperties ## **/

/** ## BEGIN VkPhysicalDeviceProperties ## **/

class _VkPhysicalDeviceProperties : public Napi::ObjectWrap<_VkPhysicalDeviceProperties> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkPhysicalDeviceProperties(const Napi::CallbackInfo &info);
    ~_VkPhysicalDeviceProperties();

    // #accessors
    Napi::Value GetapiVersion(const Napi::CallbackInfo &info);
    Napi::Value GetdriverVersion(const Napi::CallbackInfo &info);
    Napi::Value GetvendorID(const Napi::CallbackInfo &info);
    Napi::Value GetdeviceID(const Napi::CallbackInfo &info);
    Napi::Value GetdeviceType(const Napi::CallbackInfo &info);
    Napi::ObjectReference deviceName;
    Napi::Value GetdeviceName(const Napi::CallbackInfo &info);
    std::vector<uint8_t>* vpipelineCacheUUID;
    Napi::ObjectReference pipelineCacheUUID;
    Napi::Value GetpipelineCacheUUID(const Napi::CallbackInfo &info);
    Napi::ObjectReference limits;
    Napi::Value Getlimits(const Napi::CallbackInfo &info);
    Napi::ObjectReference sparseProperties;
    Napi::Value GetsparseProperties(const Napi::CallbackInfo &info);

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkPhysicalDeviceProperties instance = {};

};

/** ## END VkPhysicalDeviceProperties ## **/

/** ## BEGIN VkComponentMapping ## **/

class _VkComponentMapping : public Napi::ObjectWrap<_VkComponentMapping> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkComponentMapping(const Napi::CallbackInfo &info);
    ~_VkComponentMapping();

    // #accessors
    Napi::Value Getr(const Napi::CallbackInfo &info);
    void Setr(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getg(const Napi::CallbackInfo &info);
    void Setg(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getb(const Napi::CallbackInfo &info);
    void Setb(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Geta(const Napi::CallbackInfo &info);
    void Seta(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkComponentMapping instance = {};

};

/** ## END VkComponentMapping ## **/

/** ## BEGIN VkClearRect ## **/

class _VkClearRect : public Napi::ObjectWrap<_VkClearRect> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkClearRect(const Napi::CallbackInfo &info);
    ~_VkClearRect();

    // #accessors
    Napi::ObjectReference rect;
    Napi::Value Getrect(const Napi::CallbackInfo &info);
    void Setrect(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetbaseArrayLayer(const Napi::CallbackInfo &info);
    void SetbaseArrayLayer(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetlayerCount(const Napi::CallbackInfo &info);
    void SetlayerCount(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkClearRect instance = {};

};

/** ## END VkClearRect ## **/

/** ## BEGIN VkRect2D ## **/

class _VkRect2D : public Napi::ObjectWrap<_VkRect2D> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkRect2D(const Napi::CallbackInfo &info);
    ~_VkRect2D();

    // #accessors
    Napi::ObjectReference offset;
    Napi::Value Getoffset(const Napi::CallbackInfo &info);
    void Setoffset(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference extent;
    Napi::Value Getextent(const Napi::CallbackInfo &info);
    void Setextent(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkRect2D instance = {};

};

/** ## END VkRect2D ## **/

/** ## BEGIN VkViewport ## **/

class _VkViewport : public Napi::ObjectWrap<_VkViewport> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkViewport(const Napi::CallbackInfo &info);
    ~_VkViewport();

    // #accessors
    Napi::Value Getx(const Napi::CallbackInfo &info);
    void Setx(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Gety(const Napi::CallbackInfo &info);
    void Sety(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getwidth(const Napi::CallbackInfo &info);
    void Setwidth(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getheight(const Napi::CallbackInfo &info);
    void Setheight(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetminDepth(const Napi::CallbackInfo &info);
    void SetminDepth(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value GetmaxDepth(const Napi::CallbackInfo &info);
    void SetmaxDepth(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkViewport instance = {};

};

/** ## END VkViewport ## **/

/** ## BEGIN VkExtent3D ## **/

class _VkExtent3D : public Napi::ObjectWrap<_VkExtent3D> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkExtent3D(const Napi::CallbackInfo &info);
    ~_VkExtent3D();

    // #accessors
    Napi::Value Getwidth(const Napi::CallbackInfo &info);
    void Setwidth(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getheight(const Napi::CallbackInfo &info);
    void Setheight(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getdepth(const Napi::CallbackInfo &info);
    void Setdepth(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkExtent3D instance = {};

};

/** ## END VkExtent3D ## **/

/** ## BEGIN VkExtent2D ## **/

class _VkExtent2D : public Napi::ObjectWrap<_VkExtent2D> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkExtent2D(const Napi::CallbackInfo &info);
    ~_VkExtent2D();

    // #accessors
    Napi::Value Getwidth(const Napi::CallbackInfo &info);
    void Setwidth(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getheight(const Napi::CallbackInfo &info);
    void Setheight(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkExtent2D instance = {};

};

/** ## END VkExtent2D ## **/

/** ## BEGIN VkOffset3D ## **/

class _VkOffset3D : public Napi::ObjectWrap<_VkOffset3D> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkOffset3D(const Napi::CallbackInfo &info);
    ~_VkOffset3D();

    // #accessors
    Napi::Value Getx(const Napi::CallbackInfo &info);
    void Setx(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Gety(const Napi::CallbackInfo &info);
    void Sety(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Getz(const Napi::CallbackInfo &info);
    void Setz(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkOffset3D instance = {};

};

/** ## END VkOffset3D ## **/

/** ## BEGIN VkOffset2D ## **/

class _VkOffset2D : public Napi::ObjectWrap<_VkOffset2D> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkOffset2D(const Napi::CallbackInfo &info);
    ~_VkOffset2D();

    // #accessors
    Napi::Value Getx(const Napi::CallbackInfo &info);
    void Setx(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::Value Gety(const Napi::CallbackInfo &info);
    void Sety(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkOffset2D instance = {};

};

/** ## END VkOffset2D ## **/

/** ## BEGIN VkBaseInStructure ## **/

class _VkBaseInStructure : public Napi::ObjectWrap<_VkBaseInStructure> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkBaseInStructure(const Napi::CallbackInfo &info);
    ~_VkBaseInStructure();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkBaseInStructure instance = {};

};

/** ## END VkBaseInStructure ## **/

/** ## BEGIN VkBaseOutStructure ## **/

class _VkBaseOutStructure : public Napi::ObjectWrap<_VkBaseOutStructure> {

  public:

    static Napi::Object Initialize(Napi::Env env, Napi::Object exports);
    static Napi::FunctionReference constructor;

    _VkBaseOutStructure(const Napi::CallbackInfo &info);
    ~_VkBaseOutStructure();

    // #accessors
    Napi::Value GetsType(const Napi::CallbackInfo &info);
    void SetsType(const Napi::CallbackInfo &info, const Napi::Value& value);
    
    Napi::ObjectReference pNext;
    Napi::Value GetpNext(const Napi::CallbackInfo &info);
    void SetpNext(const Napi::CallbackInfo &info, const Napi::Value& value);
    

    // #default properties
    Napi::Value GetmemoryBuffer(const Napi::CallbackInfo &info);
    static Napi::Value GetmemoryLayout(const Napi::CallbackInfo &info);

    bool flush(void);

    // real instance
    VkBaseOutStructure instance = {};

};

/** ## END VkBaseOutStructure ## **/

#endif