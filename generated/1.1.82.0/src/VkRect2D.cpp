/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY node-vulkan v0.0.1
 * I CANT STOP SCREAMING
 */
#include "utils.h"
#include "index.h"
#include "VkRect2D.h"

Nan::Persistent<v8::FunctionTemplate> _VkRect2D::constructor;

_VkRect2D::_VkRect2D() {
}

_VkRect2D::~_VkRect2D() { }

void _VkRect2D::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkRect2D::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkRect2D").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("offset").ToLocalChecked(), Getoffset, Setoffset, ctor);
  SetPrototypeAccessor(proto, Nan::New("extent").ToLocalChecked(), Getextent, Setextent, ctor);
  Nan::Set(target, Nan::New("VkRect2D").ToLocalChecked(), ctor->GetFunction());
}

NAN_METHOD(_VkRect2D::New) {
  _VkRect2D* self = new _VkRect2D();
  self->Wrap(info.Holder());
  info.GetReturnValue().Set(info.Holder());
};

// offset
NAN_GETTER(_VkRect2D::Getoffset) {
  _VkRect2D *self = Nan::ObjectWrap::Unwrap<_VkRect2D>(info.This());
  v8::Local<v8::Object> obj = Nan::New(self->offset);
  info.GetReturnValue().Set(obj);
}NAN_SETTER(_VkRect2D::Setoffset) {
  _VkRect2D *self = Nan::ObjectWrap::Unwrap<_VkRect2D>(info.This());
  // js
  {
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> obj(value->ToObject());
    self->offset = obj;
  }
  // vulkan
  {
    _VkOffset2D* obj = Nan::ObjectWrap::Unwrap<_VkOffset2D>(value->ToObject());
    self->instance.offset = obj->instance;
  }
}// extent
NAN_GETTER(_VkRect2D::Getextent) {
  _VkRect2D *self = Nan::ObjectWrap::Unwrap<_VkRect2D>(info.This());
  v8::Local<v8::Object> obj = Nan::New(self->extent);
  info.GetReturnValue().Set(obj);
}NAN_SETTER(_VkRect2D::Setextent) {
  _VkRect2D *self = Nan::ObjectWrap::Unwrap<_VkRect2D>(info.This());
  // js
  {
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> obj(value->ToObject());
    self->extent = obj;
  }
  // vulkan
  {
    _VkExtent2D* obj = Nan::ObjectWrap::Unwrap<_VkExtent2D>(value->ToObject());
    self->instance.extent = obj->instance;
  }
}