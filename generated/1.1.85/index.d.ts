/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY node-vulkan v0.0.8
 */

/** ## VkDebugUtilsMessengerEXT ## */
interface VkDebugUtilsMessengerEXT {}

declare var VkDebugUtilsMessengerEXT: {
  prototype: VkDebugUtilsMessengerEXT;
  new(): VkDebugUtilsMessengerEXT;
}

export interface VkDebugUtilsMessengerEXT {}

/** ## VkDebugReportCallbackEXT ## */
interface VkDebugReportCallbackEXT {}

declare var VkDebugReportCallbackEXT: {
  prototype: VkDebugReportCallbackEXT;
  new(): VkDebugReportCallbackEXT;
}

export interface VkDebugReportCallbackEXT {}

/** ## VkSwapchainKHR ## */
interface VkSwapchainKHR {}

declare var VkSwapchainKHR: {
  prototype: VkSwapchainKHR;
  new(): VkSwapchainKHR;
}

export interface VkSwapchainKHR {}

/** ## VkSurfaceKHR ## */
interface VkSurfaceKHR {}

declare var VkSurfaceKHR: {
  prototype: VkSurfaceKHR;
  new(): VkSurfaceKHR;
}

export interface VkSurfaceKHR {}

/** ## VkDisplayModeKHR ## */
interface VkDisplayModeKHR {}

declare var VkDisplayModeKHR: {
  prototype: VkDisplayModeKHR;
  new(): VkDisplayModeKHR;
}

export interface VkDisplayModeKHR {}

/** ## VkDisplayKHR ## */
interface VkDisplayKHR {}

declare var VkDisplayKHR: {
  prototype: VkDisplayKHR;
  new(): VkDisplayKHR;
}

export interface VkDisplayKHR {}

/** ## VkValidationCacheEXT ## */
interface VkValidationCacheEXT {}

declare var VkValidationCacheEXT: {
  prototype: VkValidationCacheEXT;
  new(): VkValidationCacheEXT;
}

export interface VkValidationCacheEXT {}

/** ## VkSamplerYcbcrConversion ## */
interface VkSamplerYcbcrConversion {}

declare var VkSamplerYcbcrConversion: {
  prototype: VkSamplerYcbcrConversion;
  new(): VkSamplerYcbcrConversion;
}

export interface VkSamplerYcbcrConversion {}

/** ## VkDescriptorUpdateTemplate ## */
interface VkDescriptorUpdateTemplate {}

declare var VkDescriptorUpdateTemplate: {
  prototype: VkDescriptorUpdateTemplate;
  new(): VkDescriptorUpdateTemplate;
}

export interface VkDescriptorUpdateTemplate {}

/** ## VkIndirectCommandsLayoutNVX ## */
interface VkIndirectCommandsLayoutNVX {}

declare var VkIndirectCommandsLayoutNVX: {
  prototype: VkIndirectCommandsLayoutNVX;
  new(): VkIndirectCommandsLayoutNVX;
}

export interface VkIndirectCommandsLayoutNVX {}

/** ## VkObjectTableNVX ## */
interface VkObjectTableNVX {}

declare var VkObjectTableNVX: {
  prototype: VkObjectTableNVX;
  new(): VkObjectTableNVX;
}

export interface VkObjectTableNVX {}

/** ## VkPipelineCache ## */
interface VkPipelineCache {}

declare var VkPipelineCache: {
  prototype: VkPipelineCache;
  new(): VkPipelineCache;
}

export interface VkPipelineCache {}

/** ## VkRenderPass ## */
interface VkRenderPass {}

declare var VkRenderPass: {
  prototype: VkRenderPass;
  new(): VkRenderPass;
}

export interface VkRenderPass {}

/** ## VkFramebuffer ## */
interface VkFramebuffer {}

declare var VkFramebuffer: {
  prototype: VkFramebuffer;
  new(): VkFramebuffer;
}

export interface VkFramebuffer {}

/** ## VkQueryPool ## */
interface VkQueryPool {}

declare var VkQueryPool: {
  prototype: VkQueryPool;
  new(): VkQueryPool;
}

export interface VkQueryPool {}

/** ## VkEvent ## */
interface VkEvent {}

declare var VkEvent: {
  prototype: VkEvent;
  new(): VkEvent;
}

export interface VkEvent {}

/** ## VkSemaphore ## */
interface VkSemaphore {}

declare var VkSemaphore: {
  prototype: VkSemaphore;
  new(): VkSemaphore;
}

export interface VkSemaphore {}

/** ## VkFence ## */
interface VkFence {}

declare var VkFence: {
  prototype: VkFence;
  new(): VkFence;
}

export interface VkFence {}

/** ## VkDescriptorPool ## */
interface VkDescriptorPool {}

declare var VkDescriptorPool: {
  prototype: VkDescriptorPool;
  new(): VkDescriptorPool;
}

export interface VkDescriptorPool {}

/** ## VkDescriptorSetLayout ## */
interface VkDescriptorSetLayout {}

declare var VkDescriptorSetLayout: {
  prototype: VkDescriptorSetLayout;
  new(): VkDescriptorSetLayout;
}

export interface VkDescriptorSetLayout {}

/** ## VkDescriptorSet ## */
interface VkDescriptorSet {}

declare var VkDescriptorSet: {
  prototype: VkDescriptorSet;
  new(): VkDescriptorSet;
}

export interface VkDescriptorSet {}

/** ## VkSampler ## */
interface VkSampler {}

declare var VkSampler: {
  prototype: VkSampler;
  new(): VkSampler;
}

export interface VkSampler {}

/** ## VkPipelineLayout ## */
interface VkPipelineLayout {}

declare var VkPipelineLayout: {
  prototype: VkPipelineLayout;
  new(): VkPipelineLayout;
}

export interface VkPipelineLayout {}

/** ## VkPipeline ## */
interface VkPipeline {}

declare var VkPipeline: {
  prototype: VkPipeline;
  new(): VkPipeline;
}

export interface VkPipeline {}

/** ## VkShaderModule ## */
interface VkShaderModule {}

declare var VkShaderModule: {
  prototype: VkShaderModule;
  new(): VkShaderModule;
}

export interface VkShaderModule {}

/** ## VkImageView ## */
interface VkImageView {}

declare var VkImageView: {
  prototype: VkImageView;
  new(): VkImageView;
}

export interface VkImageView {}

/** ## VkImage ## */
interface VkImage {}

declare var VkImage: {
  prototype: VkImage;
  new(): VkImage;
}

export interface VkImage {}

/** ## VkBufferView ## */
interface VkBufferView {}

declare var VkBufferView: {
  prototype: VkBufferView;
  new(): VkBufferView;
}

export interface VkBufferView {}

/** ## VkBuffer ## */
interface VkBuffer {}

declare var VkBuffer: {
  prototype: VkBuffer;
  new(): VkBuffer;
}

export interface VkBuffer {}

/** ## VkCommandPool ## */
interface VkCommandPool {}

declare var VkCommandPool: {
  prototype: VkCommandPool;
  new(): VkCommandPool;
}

export interface VkCommandPool {}

/** ## VkDeviceMemory ## */
interface VkDeviceMemory {}

declare var VkDeviceMemory: {
  prototype: VkDeviceMemory;
  new(): VkDeviceMemory;
}

export interface VkDeviceMemory {}

/** ## VkCommandBuffer ## */
interface VkCommandBuffer {}

declare var VkCommandBuffer: {
  prototype: VkCommandBuffer;
  new(): VkCommandBuffer;
}

export interface VkCommandBuffer {}

/** ## VkQueue ## */
interface VkQueue {}

declare var VkQueue: {
  prototype: VkQueue;
  new(): VkQueue;
}

export interface VkQueue {}

/** ## VkDevice ## */
interface VkDevice {}

declare var VkDevice: {
  prototype: VkDevice;
  new(): VkDevice;
}

export interface VkDevice {}

/** ## VkPhysicalDevice ## */
interface VkPhysicalDevice {}

declare var VkPhysicalDevice: {
  prototype: VkPhysicalDevice;
  new(): VkPhysicalDevice;
}

export interface VkPhysicalDevice {}

/** ## VkInstance ## */
interface VkInstance {}

declare var VkInstance: {
  prototype: VkInstance;
  new(): VkInstance;
}

export interface VkInstance {}



/** ## VkClearColorValue ## */
interface VkClearColorValueInitializer {
  float32?: number[] | null;
  int32?: number[] | null;
  uint32?: number[] | null;
}

declare var VkClearColorValue: {
  prototype: VkClearColorValue;
  new(param?: VkClearColorValueInitializer | null): VkClearColorValue;
  float32: number[] | null;
  int32: number[] | null;
  uint32: number[] | null;
}

export interface VkClearColorValue {
  float32: number[] | null;
  int32: number[] | null;
  uint32: number[] | null;
}

/** ## VkBindImagePlaneMemoryInfo ## */
interface VkBindImagePlaneMemoryInfoInitializer {
  sType?: number;
  pNext?: null;
  planeAspect?: number;
}

declare var VkBindImagePlaneMemoryInfo: {
  prototype: VkBindImagePlaneMemoryInfo;
  new(param?: VkBindImagePlaneMemoryInfoInitializer | null): VkBindImagePlaneMemoryInfo;
  sType: number;
  pNext: null;
  planeAspect: number;
}

export interface VkBindImagePlaneMemoryInfo {
  sType: number;
  pNext: null;
  planeAspect: number;
}

/** ## VkPresentInfoKHR ## */
interface VkPresentInfoKHRInitializer {
  sType?: number;
  pNext?: null;
  waitSemaphoreCount?: number;
  pWaitSemaphores?: VkSemaphore[] | null;
  swapchainCount?: number;
  pSwapchains?: VkSwapchainKHR[] | null;
  pImageIndices?: Uint32Array | null;
  pResults?: Int32Array | null;
}

declare var VkPresentInfoKHR: {
  prototype: VkPresentInfoKHR;
  new(param?: VkPresentInfoKHRInitializer | null): VkPresentInfoKHR;
  sType: number;
  pNext: null;
  waitSemaphoreCount: number;
  pWaitSemaphores: VkSemaphore[] | null;
  swapchainCount: number;
  pSwapchains: VkSwapchainKHR[] | null;
  pImageIndices: Uint32Array | null;
  pResults: Int32Array | null;
}

export interface VkPresentInfoKHR {
  sType: number;
  pNext: null;
  waitSemaphoreCount: number;
  pWaitSemaphores: VkSemaphore[] | null;
  swapchainCount: number;
  pSwapchains: VkSwapchainKHR[] | null;
  pImageIndices: Uint32Array | null;
  pResults: Int32Array | null;
}

/** ## VkExtent2D ## */
interface VkExtent2DInitializer {
  width?: number;
  height?: number;
}

declare var VkExtent2D: {
  prototype: VkExtent2D;
  new(param?: VkExtent2DInitializer | null): VkExtent2D;
  width: number;
  height: number;
}

export interface VkExtent2D {
  width: number;
  height: number;
}

/** ## VkSwapchainCreateInfoKHR ## */
interface VkSwapchainCreateInfoKHRInitializer {
  sType?: number;
  pNext?: null;
  flags?: number;
  surface?: VkSurfaceKHR | null;
  minImageCount?: number;
  imageFormat?: number;
  imageColorSpace?: number;
  imageExtent?: VkExtent2D | null;
  imageArrayLayers?: number;
  imageUsage?: number;
  imageSharingMode?: number;
  queueFamilyIndexCount?: number;
  pQueueFamilyIndices?: Uint32Array | null;
  preTransform?: number;
  compositeAlpha?: number;
  presentMode?: number;
  clipped?: number;
  oldSwapchain?: VkSwapchainKHR | null;
}

declare var VkSwapchainCreateInfoKHR: {
  prototype: VkSwapchainCreateInfoKHR;
  new(param?: VkSwapchainCreateInfoKHRInitializer | null): VkSwapchainCreateInfoKHR;
  sType: number;
  pNext: null;
  flags: number;
  surface: VkSurfaceKHR | null;
  minImageCount: number;
  imageFormat: number;
  imageColorSpace: number;
  imageExtent: VkExtent2D | null;
  imageArrayLayers: number;
  imageUsage: number;
  imageSharingMode: number;
  queueFamilyIndexCount: number;
  pQueueFamilyIndices: Uint32Array | null;
  preTransform: number;
  compositeAlpha: number;
  presentMode: number;
  clipped: number;
  oldSwapchain: VkSwapchainKHR | null;
}

export interface VkSwapchainCreateInfoKHR {
  sType: number;
  pNext: null;
  flags: number;
  surface: VkSurfaceKHR | null;
  minImageCount: number;
  imageFormat: number;
  imageColorSpace: number;
  imageExtent: VkExtent2D | null;
  imageArrayLayers: number;
  imageUsage: number;
  imageSharingMode: number;
  queueFamilyIndexCount: number;
  pQueueFamilyIndices: Uint32Array | null;
  preTransform: number;
  compositeAlpha: number;
  presentMode: number;
  clipped: number;
  oldSwapchain: VkSwapchainKHR | null;
}

/** ## VkSurfaceFormatKHR ## */
interface VkSurfaceFormatKHRInitializer {
  readonly format?: number;
  readonly colorSpace?: number;
}

declare var VkSurfaceFormatKHR: {
  prototype: VkSurfaceFormatKHR;
  new(param?: VkSurfaceFormatKHRInitializer | null): VkSurfaceFormatKHR;
  readonly format: number;
  readonly colorSpace: number;
}

export interface VkSurfaceFormatKHR {
  readonly format: number;
  readonly colorSpace: number;
}

/** ## VkSurfaceCapabilitiesKHR ## */
interface VkSurfaceCapabilitiesKHRInitializer {
  readonly minImageCount?: number;
  readonly maxImageCount?: number;
  readonly currentExtent?: VkExtent2D | null;
  readonly minImageExtent?: VkExtent2D | null;
  readonly maxImageExtent?: VkExtent2D | null;
  readonly maxImageArrayLayers?: number;
  readonly supportedTransforms?: number;
  readonly currentTransform?: number;
  readonly supportedCompositeAlpha?: number;
  readonly supportedUsageFlags?: number;
}

declare var VkSurfaceCapabilitiesKHR: {
  prototype: VkSurfaceCapabilitiesKHR;
  new(param?: VkSurfaceCapabilitiesKHRInitializer | null): VkSurfaceCapabilitiesKHR;
  readonly minImageCount: number;
  readonly maxImageCount: number;
  readonly currentExtent: VkExtent2D | null;
  readonly minImageExtent: VkExtent2D | null;
  readonly maxImageExtent: VkExtent2D | null;
  readonly maxImageArrayLayers: number;
  readonly supportedTransforms: number;
  readonly currentTransform: number;
  readonly supportedCompositeAlpha: number;
  readonly supportedUsageFlags: number;
}

export interface VkSurfaceCapabilitiesKHR {
  readonly minImageCount: number;
  readonly maxImageCount: number;
  readonly currentExtent: VkExtent2D | null;
  readonly minImageExtent: VkExtent2D | null;
  readonly maxImageExtent: VkExtent2D | null;
  readonly maxImageArrayLayers: number;
  readonly supportedTransforms: number;
  readonly currentTransform: number;
  readonly supportedCompositeAlpha: number;
  readonly supportedUsageFlags: number;
}

/** ## VkSubmitInfo ## */
interface VkSubmitInfoInitializer {
  sType?: number;
  pNext?: null;
  waitSemaphoreCount?: number;
  pWaitSemaphores?: VkSemaphore[] | null;
  pWaitDstStageMask?: Int32Array | null;
  commandBufferCount?: number;
  pCommandBuffers?: VkCommandBuffer[] | null;
  signalSemaphoreCount?: number;
  pSignalSemaphores?: VkSemaphore[] | null;
}

declare var VkSubmitInfo: {
  prototype: VkSubmitInfo;
  new(param?: VkSubmitInfoInitializer | null): VkSubmitInfo;
  sType: number;
  pNext: null;
  waitSemaphoreCount: number;
  pWaitSemaphores: VkSemaphore[] | null;
  pWaitDstStageMask: Int32Array | null;
  commandBufferCount: number;
  pCommandBuffers: VkCommandBuffer[] | null;
  signalSemaphoreCount: number;
  pSignalSemaphores: VkSemaphore[] | null;
}

export interface VkSubmitInfo {
  sType: number;
  pNext: null;
  waitSemaphoreCount: number;
  pWaitSemaphores: VkSemaphore[] | null;
  pWaitDstStageMask: Int32Array | null;
  commandBufferCount: number;
  pCommandBuffers: VkCommandBuffer[] | null;
  signalSemaphoreCount: number;
  pSignalSemaphores: VkSemaphore[] | null;
}

/** ## VkFramebufferCreateInfo ## */
interface VkFramebufferCreateInfoInitializer {
  sType?: number;
  pNext?: null;
  flags?: number;
  renderPass?: VkRenderPass | null;
  attachmentCount?: number;
  pAttachments?: VkImageView[] | null;
  width?: number;
  height?: number;
  layers?: number;
}

declare var VkFramebufferCreateInfo: {
  prototype: VkFramebufferCreateInfo;
  new(param?: VkFramebufferCreateInfoInitializer | null): VkFramebufferCreateInfo;
  sType: number;
  pNext: null;
  flags: number;
  renderPass: VkRenderPass | null;
  attachmentCount: number;
  pAttachments: VkImageView[] | null;
  width: number;
  height: number;
  layers: number;
}

export interface VkFramebufferCreateInfo {
  sType: number;
  pNext: null;
  flags: number;
  renderPass: VkRenderPass | null;
  attachmentCount: number;
  pAttachments: VkImageView[] | null;
  width: number;
  height: number;
  layers: number;
}

/** ## VkSemaphoreCreateInfo ## */
interface VkSemaphoreCreateInfoInitializer {
  sType?: number;
  pNext?: null;
  flags?: number;
}

declare var VkSemaphoreCreateInfo: {
  prototype: VkSemaphoreCreateInfo;
  new(param?: VkSemaphoreCreateInfoInitializer | null): VkSemaphoreCreateInfo;
  sType: number;
  pNext: null;
  flags: number;
}

export interface VkSemaphoreCreateInfo {
  sType: number;
  pNext: null;
  flags: number;
}

/** ## VkSubpassDependency ## */
interface VkSubpassDependencyInitializer {
  srcSubpass?: number;
  dstSubpass?: number;
  srcStageMask?: number;
  dstStageMask?: number;
  srcAccessMask?: number;
  dstAccessMask?: number;
  dependencyFlags?: number;
}

declare var VkSubpassDependency: {
  prototype: VkSubpassDependency;
  new(param?: VkSubpassDependencyInitializer | null): VkSubpassDependency;
  srcSubpass: number;
  dstSubpass: number;
  srcStageMask: number;
  dstStageMask: number;
  srcAccessMask: number;
  dstAccessMask: number;
  dependencyFlags: number;
}

export interface VkSubpassDependency {
  srcSubpass: number;
  dstSubpass: number;
  srcStageMask: number;
  dstStageMask: number;
  srcAccessMask: number;
  dstAccessMask: number;
  dependencyFlags: number;
}

/** ## VkAttachmentReference ## */
interface VkAttachmentReferenceInitializer {
  attachment?: number;
  layout?: number;
}

declare var VkAttachmentReference: {
  prototype: VkAttachmentReference;
  new(param?: VkAttachmentReferenceInitializer | null): VkAttachmentReference;
  attachment: number;
  layout: number;
}

export interface VkAttachmentReference {
  attachment: number;
  layout: number;
}

/** ## VkSubpassDescription ## */
interface VkSubpassDescriptionInitializer {
  flags?: number;
  pipelineBindPoint?: number;
  inputAttachmentCount?: number;
  pInputAttachments?: VkAttachmentReference[] | null;
  colorAttachmentCount?: number;
  pColorAttachments?: VkAttachmentReference[] | null;
  pResolveAttachments?: VkAttachmentReference[] | null;
  pDepthStencilAttachment?: VkAttachmentReference | null;
  preserveAttachmentCount?: number;
  pPreserveAttachments?: Uint32Array | null;
}

declare var VkSubpassDescription: {
  prototype: VkSubpassDescription;
  new(param?: VkSubpassDescriptionInitializer | null): VkSubpassDescription;
  flags: number;
  pipelineBindPoint: number;
  inputAttachmentCount: number;
  pInputAttachments: VkAttachmentReference[] | null;
  colorAttachmentCount: number;
  pColorAttachments: VkAttachmentReference[] | null;
  pResolveAttachments: VkAttachmentReference[] | null;
  pDepthStencilAttachment: VkAttachmentReference | null;
  preserveAttachmentCount: number;
  pPreserveAttachments: Uint32Array | null;
}

export interface VkSubpassDescription {
  flags: number;
  pipelineBindPoint: number;
  inputAttachmentCount: number;
  pInputAttachments: VkAttachmentReference[] | null;
  colorAttachmentCount: number;
  pColorAttachments: VkAttachmentReference[] | null;
  pResolveAttachments: VkAttachmentReference[] | null;
  pDepthStencilAttachment: VkAttachmentReference | null;
  preserveAttachmentCount: number;
  pPreserveAttachments: Uint32Array | null;
}

/** ## VkAttachmentDescription ## */
interface VkAttachmentDescriptionInitializer {
  flags?: number;
  format?: number;
  samples?: number;
  loadOp?: number;
  storeOp?: number;
  stencilLoadOp?: number;
  stencilStoreOp?: number;
  initialLayout?: number;
  finalLayout?: number;
}

declare var VkAttachmentDescription: {
  prototype: VkAttachmentDescription;
  new(param?: VkAttachmentDescriptionInitializer | null): VkAttachmentDescription;
  flags: number;
  format: number;
  samples: number;
  loadOp: number;
  storeOp: number;
  stencilLoadOp: number;
  stencilStoreOp: number;
  initialLayout: number;
  finalLayout: number;
}

export interface VkAttachmentDescription {
  flags: number;
  format: number;
  samples: number;
  loadOp: number;
  storeOp: number;
  stencilLoadOp: number;
  stencilStoreOp: number;
  initialLayout: number;
  finalLayout: number;
}

/** ## VkRenderPassCreateInfo ## */
interface VkRenderPassCreateInfoInitializer {
  sType?: number;
  pNext?: null;
  flags?: number;
  attachmentCount?: number;
  pAttachments?: VkAttachmentDescription[] | null;
  subpassCount?: number;
  pSubpasses?: VkSubpassDescription[] | null;
  dependencyCount?: number;
  pDependencies?: VkSubpassDependency[] | null;
}

declare var VkRenderPassCreateInfo: {
  prototype: VkRenderPassCreateInfo;
  new(param?: VkRenderPassCreateInfoInitializer | null): VkRenderPassCreateInfo;
  sType: number;
  pNext: null;
  flags: number;
  attachmentCount: number;
  pAttachments: VkAttachmentDescription[] | null;
  subpassCount: number;
  pSubpasses: VkSubpassDescription[] | null;
  dependencyCount: number;
  pDependencies: VkSubpassDependency[] | null;
}

export interface VkRenderPassCreateInfo {
  sType: number;
  pNext: null;
  flags: number;
  attachmentCount: number;
  pAttachments: VkAttachmentDescription[] | null;
  subpassCount: number;
  pSubpasses: VkSubpassDescription[] | null;
  dependencyCount: number;
  pDependencies: VkSubpassDependency[] | null;
}

/** ## VkClearDepthStencilValue ## */
interface VkClearDepthStencilValueInitializer {
  depth?: number;
  stencil?: number;
}

declare var VkClearDepthStencilValue: {
  prototype: VkClearDepthStencilValue;
  new(param?: VkClearDepthStencilValueInitializer | null): VkClearDepthStencilValue;
  depth: number;
  stencil: number;
}

export interface VkClearDepthStencilValue {
  depth: number;
  stencil: number;
}

/** ## VkClearValue ## */
interface VkClearValueInitializer {
  color?: VkClearColorValue | null;
  depthStencil?: VkClearDepthStencilValue | null;
}

declare var VkClearValue: {
  prototype: VkClearValue;
  new(param?: VkClearValueInitializer | null): VkClearValue;
  color: VkClearColorValue | null;
  depthStencil: VkClearDepthStencilValue | null;
}

export interface VkClearValue {
  color: VkClearColorValue | null;
  depthStencil: VkClearDepthStencilValue | null;
}

/** ## VkOffset2D ## */
interface VkOffset2DInitializer {
  x?: number;
  y?: number;
}

declare var VkOffset2D: {
  prototype: VkOffset2D;
  new(param?: VkOffset2DInitializer | null): VkOffset2D;
  x: number;
  y: number;
}

export interface VkOffset2D {
  x: number;
  y: number;
}

/** ## VkRect2D ## */
interface VkRect2DInitializer {
  offset?: VkOffset2D | null;
  extent?: VkExtent2D | null;
}

declare var VkRect2D: {
  prototype: VkRect2D;
  new(param?: VkRect2DInitializer | null): VkRect2D;
  offset: VkOffset2D | null;
  extent: VkExtent2D | null;
}

export interface VkRect2D {
  offset: VkOffset2D | null;
  extent: VkExtent2D | null;
}

/** ## VkRenderPassBeginInfo ## */
interface VkRenderPassBeginInfoInitializer {
  sType?: number;
  pNext?: null;
  renderPass?: VkRenderPass | null;
  framebuffer?: VkFramebuffer | null;
  renderArea?: VkRect2D | null;
  clearValueCount?: number;
  pClearValues?: VkClearValue[] | null;
}

declare var VkRenderPassBeginInfo: {
  prototype: VkRenderPassBeginInfo;
  new(param?: VkRenderPassBeginInfoInitializer | null): VkRenderPassBeginInfo;
  sType: number;
  pNext: null;
  renderPass: VkRenderPass | null;
  framebuffer: VkFramebuffer | null;
  renderArea: VkRect2D | null;
  clearValueCount: number;
  pClearValues: VkClearValue[] | null;
}

export interface VkRenderPassBeginInfo {
  sType: number;
  pNext: null;
  renderPass: VkRenderPass | null;
  framebuffer: VkFramebuffer | null;
  renderArea: VkRect2D | null;
  clearValueCount: number;
  pClearValues: VkClearValue[] | null;
}

/** ## VkCommandBufferInheritanceInfo ## */
interface VkCommandBufferInheritanceInfoInitializer {
  sType?: number;
  pNext?: null;
  renderPass?: VkRenderPass | null;
  subpass?: number;
  framebuffer?: VkFramebuffer | null;
  occlusionQueryEnable?: number;
  queryFlags?: number;
  pipelineStatistics?: number;
}

declare var VkCommandBufferInheritanceInfo: {
  prototype: VkCommandBufferInheritanceInfo;
  new(param?: VkCommandBufferInheritanceInfoInitializer | null): VkCommandBufferInheritanceInfo;
  sType: number;
  pNext: null;
  renderPass: VkRenderPass | null;
  subpass: number;
  framebuffer: VkFramebuffer | null;
  occlusionQueryEnable: number;
  queryFlags: number;
  pipelineStatistics: number;
}

export interface VkCommandBufferInheritanceInfo {
  sType: number;
  pNext: null;
  renderPass: VkRenderPass | null;
  subpass: number;
  framebuffer: VkFramebuffer | null;
  occlusionQueryEnable: number;
  queryFlags: number;
  pipelineStatistics: number;
}

/** ## VkCommandBufferBeginInfo ## */
interface VkCommandBufferBeginInfoInitializer {
  sType?: number;
  pNext?: null;
  flags?: number;
  pInheritanceInfo?: VkCommandBufferInheritanceInfo | null;
}

declare var VkCommandBufferBeginInfo: {
  prototype: VkCommandBufferBeginInfo;
  new(param?: VkCommandBufferBeginInfoInitializer | null): VkCommandBufferBeginInfo;
  sType: number;
  pNext: null;
  flags: number;
  pInheritanceInfo: VkCommandBufferInheritanceInfo | null;
}

export interface VkCommandBufferBeginInfo {
  sType: number;
  pNext: null;
  flags: number;
  pInheritanceInfo: VkCommandBufferInheritanceInfo | null;
}

/** ## VkCommandBufferAllocateInfo ## */
interface VkCommandBufferAllocateInfoInitializer {
  sType?: number;
  pNext?: null;
  commandPool?: VkCommandPool | null;
  level?: number;
  commandBufferCount?: number;
}

declare var VkCommandBufferAllocateInfo: {
  prototype: VkCommandBufferAllocateInfo;
  new(param?: VkCommandBufferAllocateInfoInitializer | null): VkCommandBufferAllocateInfo;
  sType: number;
  pNext: null;
  commandPool: VkCommandPool | null;
  level: number;
  commandBufferCount: number;
}

export interface VkCommandBufferAllocateInfo {
  sType: number;
  pNext: null;
  commandPool: VkCommandPool | null;
  level: number;
  commandBufferCount: number;
}

/** ## VkCommandPoolCreateInfo ## */
interface VkCommandPoolCreateInfoInitializer {
  sType?: number;
  pNext?: null;
  flags?: number;
  queueFamilyIndex?: number;
}

declare var VkCommandPoolCreateInfo: {
  prototype: VkCommandPoolCreateInfo;
  new(param?: VkCommandPoolCreateInfoInitializer | null): VkCommandPoolCreateInfo;
  sType: number;
  pNext: null;
  flags: number;
  queueFamilyIndex: number;
}

export interface VkCommandPoolCreateInfo {
  sType: number;
  pNext: null;
  flags: number;
  queueFamilyIndex: number;
}

/** ## VkSamplerCreateInfo ## */
interface VkSamplerCreateInfoInitializer {
  sType?: number;
  pNext?: null;
  flags?: number;
  magFilter?: number;
  minFilter?: number;
  mipmapMode?: number;
  addressModeU?: number;
  addressModeV?: number;
  addressModeW?: number;
  mipLodBias?: number;
  anisotropyEnable?: number;
  maxAnisotropy?: number;
  compareEnable?: number;
  compareOp?: number;
  minLod?: number;
  maxLod?: number;
  borderColor?: number;
  unnormalizedCoordinates?: number;
}

declare var VkSamplerCreateInfo: {
  prototype: VkSamplerCreateInfo;
  new(param?: VkSamplerCreateInfoInitializer | null): VkSamplerCreateInfo;
  sType: number;
  pNext: null;
  flags: number;
  magFilter: number;
  minFilter: number;
  mipmapMode: number;
  addressModeU: number;
  addressModeV: number;
  addressModeW: number;
  mipLodBias: number;
  anisotropyEnable: number;
  maxAnisotropy: number;
  compareEnable: number;
  compareOp: number;
  minLod: number;
  maxLod: number;
  borderColor: number;
  unnormalizedCoordinates: number;
}

export interface VkSamplerCreateInfo {
  sType: number;
  pNext: null;
  flags: number;
  magFilter: number;
  minFilter: number;
  mipmapMode: number;
  addressModeU: number;
  addressModeV: number;
  addressModeW: number;
  mipLodBias: number;
  anisotropyEnable: number;
  maxAnisotropy: number;
  compareEnable: number;
  compareOp: number;
  minLod: number;
  maxLod: number;
  borderColor: number;
  unnormalizedCoordinates: number;
}

/** ## VkPushConstantRange ## */
interface VkPushConstantRangeInitializer {
  stageFlags?: number;
  offset?: number;
  size?: number;
}

declare var VkPushConstantRange: {
  prototype: VkPushConstantRange;
  new(param?: VkPushConstantRangeInitializer | null): VkPushConstantRange;
  stageFlags: number;
  offset: number;
  size: number;
}

export interface VkPushConstantRange {
  stageFlags: number;
  offset: number;
  size: number;
}

/** ## VkPipelineLayoutCreateInfo ## */
interface VkPipelineLayoutCreateInfoInitializer {
  sType?: number;
  pNext?: null;
  flags?: number;
  setLayoutCount?: number;
  pSetLayouts?: VkDescriptorSetLayout[] | null;
  pushConstantRangeCount?: number;
  pPushConstantRanges?: VkPushConstantRange[] | null;
}

declare var VkPipelineLayoutCreateInfo: {
  prototype: VkPipelineLayoutCreateInfo;
  new(param?: VkPipelineLayoutCreateInfoInitializer | null): VkPipelineLayoutCreateInfo;
  sType: number;
  pNext: null;
  flags: number;
  setLayoutCount: number;
  pSetLayouts: VkDescriptorSetLayout[] | null;
  pushConstantRangeCount: number;
  pPushConstantRanges: VkPushConstantRange[] | null;
}

export interface VkPipelineLayoutCreateInfo {
  sType: number;
  pNext: null;
  flags: number;
  setLayoutCount: number;
  pSetLayouts: VkDescriptorSetLayout[] | null;
  pushConstantRangeCount: number;
  pPushConstantRanges: VkPushConstantRange[] | null;
}

/** ## VkPipelineDynamicStateCreateInfo ## */
interface VkPipelineDynamicStateCreateInfoInitializer {
  sType?: number;
  pNext?: null;
  flags?: number;
  dynamicStateCount?: number;
  pDynamicStates?: Int32Array | null;
}

declare var VkPipelineDynamicStateCreateInfo: {
  prototype: VkPipelineDynamicStateCreateInfo;
  new(param?: VkPipelineDynamicStateCreateInfoInitializer | null): VkPipelineDynamicStateCreateInfo;
  sType: number;
  pNext: null;
  flags: number;
  dynamicStateCount: number;
  pDynamicStates: Int32Array | null;
}

export interface VkPipelineDynamicStateCreateInfo {
  sType: number;
  pNext: null;
  flags: number;
  dynamicStateCount: number;
  pDynamicStates: Int32Array | null;
}

/** ## VkPipelineColorBlendAttachmentState ## */
interface VkPipelineColorBlendAttachmentStateInitializer {
  blendEnable?: number;
  srcColorBlendFactor?: number;
  dstColorBlendFactor?: number;
  colorBlendOp?: number;
  srcAlphaBlendFactor?: number;
  dstAlphaBlendFactor?: number;
  alphaBlendOp?: number;
  colorWriteMask?: number;
}

declare var VkPipelineColorBlendAttachmentState: {
  prototype: VkPipelineColorBlendAttachmentState;
  new(param?: VkPipelineColorBlendAttachmentStateInitializer | null): VkPipelineColorBlendAttachmentState;
  blendEnable: number;
  srcColorBlendFactor: number;
  dstColorBlendFactor: number;
  colorBlendOp: number;
  srcAlphaBlendFactor: number;
  dstAlphaBlendFactor: number;
  alphaBlendOp: number;
  colorWriteMask: number;
}

export interface VkPipelineColorBlendAttachmentState {
  blendEnable: number;
  srcColorBlendFactor: number;
  dstColorBlendFactor: number;
  colorBlendOp: number;
  srcAlphaBlendFactor: number;
  dstAlphaBlendFactor: number;
  alphaBlendOp: number;
  colorWriteMask: number;
}

/** ## VkPipelineColorBlendStateCreateInfo ## */
interface VkPipelineColorBlendStateCreateInfoInitializer {
  sType?: number;
  pNext?: null;
  flags?: number;
  logicOpEnable?: number;
  logicOp?: number;
  attachmentCount?: number;
  pAttachments?: VkPipelineColorBlendAttachmentState[] | null;
  blendConstants?: number[] | null;
}

declare var VkPipelineColorBlendStateCreateInfo: {
  prototype: VkPipelineColorBlendStateCreateInfo;
  new(param?: VkPipelineColorBlendStateCreateInfoInitializer | null): VkPipelineColorBlendStateCreateInfo;
  sType: number;
  pNext: null;
  flags: number;
  logicOpEnable: number;
  logicOp: number;
  attachmentCount: number;
  pAttachments: VkPipelineColorBlendAttachmentState[] | null;
  blendConstants: number[] | null;
}

export interface VkPipelineColorBlendStateCreateInfo {
  sType: number;
  pNext: null;
  flags: number;
  logicOpEnable: number;
  logicOp: number;
  attachmentCount: number;
  pAttachments: VkPipelineColorBlendAttachmentState[] | null;
  blendConstants: number[] | null;
}

/** ## VkStencilOpState ## */
interface VkStencilOpStateInitializer {
  failOp?: number;
  passOp?: number;
  depthFailOp?: number;
  compareOp?: number;
  compareMask?: number;
  writeMask?: number;
  reference?: number;
}

declare var VkStencilOpState: {
  prototype: VkStencilOpState;
  new(param?: VkStencilOpStateInitializer | null): VkStencilOpState;
  failOp: number;
  passOp: number;
  depthFailOp: number;
  compareOp: number;
  compareMask: number;
  writeMask: number;
  reference: number;
}

export interface VkStencilOpState {
  failOp: number;
  passOp: number;
  depthFailOp: number;
  compareOp: number;
  compareMask: number;
  writeMask: number;
  reference: number;
}

/** ## VkPipelineDepthStencilStateCreateInfo ## */
interface VkPipelineDepthStencilStateCreateInfoInitializer {
  sType?: number;
  pNext?: null;
  flags?: number;
  depthTestEnable?: number;
  depthWriteEnable?: number;
  depthCompareOp?: number;
  depthBoundsTestEnable?: number;
  stencilTestEnable?: number;
  front?: VkStencilOpState | null;
  back?: VkStencilOpState | null;
  minDepthBounds?: number;
  maxDepthBounds?: number;
}

declare var VkPipelineDepthStencilStateCreateInfo: {
  prototype: VkPipelineDepthStencilStateCreateInfo;
  new(param?: VkPipelineDepthStencilStateCreateInfoInitializer | null): VkPipelineDepthStencilStateCreateInfo;
  sType: number;
  pNext: null;
  flags: number;
  depthTestEnable: number;
  depthWriteEnable: number;
  depthCompareOp: number;
  depthBoundsTestEnable: number;
  stencilTestEnable: number;
  front: VkStencilOpState | null;
  back: VkStencilOpState | null;
  minDepthBounds: number;
  maxDepthBounds: number;
}

export interface VkPipelineDepthStencilStateCreateInfo {
  sType: number;
  pNext: null;
  flags: number;
  depthTestEnable: number;
  depthWriteEnable: number;
  depthCompareOp: number;
  depthBoundsTestEnable: number;
  stencilTestEnable: number;
  front: VkStencilOpState | null;
  back: VkStencilOpState | null;
  minDepthBounds: number;
  maxDepthBounds: number;
}

/** ## VkPipelineMultisampleStateCreateInfo ## */
interface VkPipelineMultisampleStateCreateInfoInitializer {
  sType?: number;
  pNext?: null;
  flags?: number;
  rasterizationSamples?: number;
  sampleShadingEnable?: number;
  minSampleShading?: number;
  pSampleMask?: Uint32Array | null;
  alphaToCoverageEnable?: number;
  alphaToOneEnable?: number;
}

declare var VkPipelineMultisampleStateCreateInfo: {
  prototype: VkPipelineMultisampleStateCreateInfo;
  new(param?: VkPipelineMultisampleStateCreateInfoInitializer | null): VkPipelineMultisampleStateCreateInfo;
  sType: number;
  pNext: null;
  flags: number;
  rasterizationSamples: number;
  sampleShadingEnable: number;
  minSampleShading: number;
  pSampleMask: Uint32Array | null;
  alphaToCoverageEnable: number;
  alphaToOneEnable: number;
}

export interface VkPipelineMultisampleStateCreateInfo {
  sType: number;
  pNext: null;
  flags: number;
  rasterizationSamples: number;
  sampleShadingEnable: number;
  minSampleShading: number;
  pSampleMask: Uint32Array | null;
  alphaToCoverageEnable: number;
  alphaToOneEnable: number;
}

/** ## VkPipelineRasterizationStateCreateInfo ## */
interface VkPipelineRasterizationStateCreateInfoInitializer {
  sType?: number;
  pNext?: null;
  flags?: number;
  depthClampEnable?: number;
  rasterizerDiscardEnable?: number;
  polygonMode?: number;
  cullMode?: number;
  frontFace?: number;
  depthBiasEnable?: number;
  depthBiasConstantFactor?: number;
  depthBiasClamp?: number;
  depthBiasSlopeFactor?: number;
  lineWidth?: number;
}

declare var VkPipelineRasterizationStateCreateInfo: {
  prototype: VkPipelineRasterizationStateCreateInfo;
  new(param?: VkPipelineRasterizationStateCreateInfoInitializer | null): VkPipelineRasterizationStateCreateInfo;
  sType: number;
  pNext: null;
  flags: number;
  depthClampEnable: number;
  rasterizerDiscardEnable: number;
  polygonMode: number;
  cullMode: number;
  frontFace: number;
  depthBiasEnable: number;
  depthBiasConstantFactor: number;
  depthBiasClamp: number;
  depthBiasSlopeFactor: number;
  lineWidth: number;
}

export interface VkPipelineRasterizationStateCreateInfo {
  sType: number;
  pNext: null;
  flags: number;
  depthClampEnable: number;
  rasterizerDiscardEnable: number;
  polygonMode: number;
  cullMode: number;
  frontFace: number;
  depthBiasEnable: number;
  depthBiasConstantFactor: number;
  depthBiasClamp: number;
  depthBiasSlopeFactor: number;
  lineWidth: number;
}

/** ## VkViewport ## */
interface VkViewportInitializer {
  x?: number;
  y?: number;
  width?: number;
  height?: number;
  minDepth?: number;
  maxDepth?: number;
}

declare var VkViewport: {
  prototype: VkViewport;
  new(param?: VkViewportInitializer | null): VkViewport;
  x: number;
  y: number;
  width: number;
  height: number;
  minDepth: number;
  maxDepth: number;
}

export interface VkViewport {
  x: number;
  y: number;
  width: number;
  height: number;
  minDepth: number;
  maxDepth: number;
}

/** ## VkPipelineViewportStateCreateInfo ## */
interface VkPipelineViewportStateCreateInfoInitializer {
  sType?: number;
  pNext?: null;
  flags?: number;
  viewportCount?: number;
  pViewports?: VkViewport[] | null;
  scissorCount?: number;
  pScissors?: VkRect2D[] | null;
}

declare var VkPipelineViewportStateCreateInfo: {
  prototype: VkPipelineViewportStateCreateInfo;
  new(param?: VkPipelineViewportStateCreateInfoInitializer | null): VkPipelineViewportStateCreateInfo;
  sType: number;
  pNext: null;
  flags: number;
  viewportCount: number;
  pViewports: VkViewport[] | null;
  scissorCount: number;
  pScissors: VkRect2D[] | null;
}

export interface VkPipelineViewportStateCreateInfo {
  sType: number;
  pNext: null;
  flags: number;
  viewportCount: number;
  pViewports: VkViewport[] | null;
  scissorCount: number;
  pScissors: VkRect2D[] | null;
}

/** ## VkPipelineTessellationStateCreateInfo ## */
interface VkPipelineTessellationStateCreateInfoInitializer {
  sType?: number;
  pNext?: null;
  flags?: number;
  patchControlPoints?: number;
}

declare var VkPipelineTessellationStateCreateInfo: {
  prototype: VkPipelineTessellationStateCreateInfo;
  new(param?: VkPipelineTessellationStateCreateInfoInitializer | null): VkPipelineTessellationStateCreateInfo;
  sType: number;
  pNext: null;
  flags: number;
  patchControlPoints: number;
}

export interface VkPipelineTessellationStateCreateInfo {
  sType: number;
  pNext: null;
  flags: number;
  patchControlPoints: number;
}

/** ## VkPipelineInputAssemblyStateCreateInfo ## */
interface VkPipelineInputAssemblyStateCreateInfoInitializer {
  sType?: number;
  pNext?: null;
  flags?: number;
  topology?: number;
  primitiveRestartEnable?: number;
}

declare var VkPipelineInputAssemblyStateCreateInfo: {
  prototype: VkPipelineInputAssemblyStateCreateInfo;
  new(param?: VkPipelineInputAssemblyStateCreateInfoInitializer | null): VkPipelineInputAssemblyStateCreateInfo;
  sType: number;
  pNext: null;
  flags: number;
  topology: number;
  primitiveRestartEnable: number;
}

export interface VkPipelineInputAssemblyStateCreateInfo {
  sType: number;
  pNext: null;
  flags: number;
  topology: number;
  primitiveRestartEnable: number;
}

/** ## VkVertexInputAttributeDescription ## */
interface VkVertexInputAttributeDescriptionInitializer {
  location?: number;
  binding?: number;
  format?: number;
  offset?: number;
}

declare var VkVertexInputAttributeDescription: {
  prototype: VkVertexInputAttributeDescription;
  new(param?: VkVertexInputAttributeDescriptionInitializer | null): VkVertexInputAttributeDescription;
  location: number;
  binding: number;
  format: number;
  offset: number;
}

export interface VkVertexInputAttributeDescription {
  location: number;
  binding: number;
  format: number;
  offset: number;
}

/** ## VkVertexInputBindingDescription ## */
interface VkVertexInputBindingDescriptionInitializer {
  binding?: number;
  stride?: number;
  inputRate?: number;
}

declare var VkVertexInputBindingDescription: {
  prototype: VkVertexInputBindingDescription;
  new(param?: VkVertexInputBindingDescriptionInitializer | null): VkVertexInputBindingDescription;
  binding: number;
  stride: number;
  inputRate: number;
}

export interface VkVertexInputBindingDescription {
  binding: number;
  stride: number;
  inputRate: number;
}

/** ## VkPipelineVertexInputStateCreateInfo ## */
interface VkPipelineVertexInputStateCreateInfoInitializer {
  sType?: number;
  pNext?: null;
  flags?: number;
  vertexBindingDescriptionCount?: number;
  pVertexBindingDescriptions?: VkVertexInputBindingDescription[] | null;
  vertexAttributeDescriptionCount?: number;
  pVertexAttributeDescriptions?: VkVertexInputAttributeDescription[] | null;
}

declare var VkPipelineVertexInputStateCreateInfo: {
  prototype: VkPipelineVertexInputStateCreateInfo;
  new(param?: VkPipelineVertexInputStateCreateInfoInitializer | null): VkPipelineVertexInputStateCreateInfo;
  sType: number;
  pNext: null;
  flags: number;
  vertexBindingDescriptionCount: number;
  pVertexBindingDescriptions: VkVertexInputBindingDescription[] | null;
  vertexAttributeDescriptionCount: number;
  pVertexAttributeDescriptions: VkVertexInputAttributeDescription[] | null;
}

export interface VkPipelineVertexInputStateCreateInfo {
  sType: number;
  pNext: null;
  flags: number;
  vertexBindingDescriptionCount: number;
  pVertexBindingDescriptions: VkVertexInputBindingDescription[] | null;
  vertexAttributeDescriptionCount: number;
  pVertexAttributeDescriptions: VkVertexInputAttributeDescription[] | null;
}

/** ## VkSpecializationMapEntry ## */
interface VkSpecializationMapEntryInitializer {
  constantID?: number;
  offset?: number;
  size?: number;
}

declare var VkSpecializationMapEntry: {
  prototype: VkSpecializationMapEntry;
  new(param?: VkSpecializationMapEntryInitializer | null): VkSpecializationMapEntry;
  constantID: number;
  offset: number;
  size: number;
}

export interface VkSpecializationMapEntry {
  constantID: number;
  offset: number;
  size: number;
}

/** ## VkSpecializationInfo ## */
interface VkSpecializationInfoInitializer {
  mapEntryCount?: number;
  pMapEntries?: VkSpecializationMapEntry[] | null;
  dataSize?: number;
  pData?: null;
}

declare var VkSpecializationInfo: {
  prototype: VkSpecializationInfo;
  new(param?: VkSpecializationInfoInitializer | null): VkSpecializationInfo;
  mapEntryCount: number;
  pMapEntries: VkSpecializationMapEntry[] | null;
  dataSize: number;
  pData: null;
}

export interface VkSpecializationInfo {
  mapEntryCount: number;
  pMapEntries: VkSpecializationMapEntry[] | null;
  dataSize: number;
  pData: null;
}

/** ## VkPipelineShaderStageCreateInfo ## */
interface VkPipelineShaderStageCreateInfoInitializer {
  sType?: number;
  pNext?: null;
  flags?: number;
  stage?: number;
  module?: VkShaderModule | null;
  pName?: string | null;
  pSpecializationInfo?: VkSpecializationInfo | null;
}

declare var VkPipelineShaderStageCreateInfo: {
  prototype: VkPipelineShaderStageCreateInfo;
  new(param?: VkPipelineShaderStageCreateInfoInitializer | null): VkPipelineShaderStageCreateInfo;
  sType: number;
  pNext: null;
  flags: number;
  stage: number;
  module: VkShaderModule | null;
  pName: string | null;
  pSpecializationInfo: VkSpecializationInfo | null;
}

export interface VkPipelineShaderStageCreateInfo {
  sType: number;
  pNext: null;
  flags: number;
  stage: number;
  module: VkShaderModule | null;
  pName: string | null;
  pSpecializationInfo: VkSpecializationInfo | null;
}

/** ## VkGraphicsPipelineCreateInfo ## */
interface VkGraphicsPipelineCreateInfoInitializer {
  sType?: number;
  pNext?: null;
  flags?: number;
  stageCount?: number;
  pStages?: VkPipelineShaderStageCreateInfo[] | null;
  pVertexInputState?: VkPipelineVertexInputStateCreateInfo | null;
  pInputAssemblyState?: VkPipelineInputAssemblyStateCreateInfo | null;
  pTessellationState?: VkPipelineTessellationStateCreateInfo | null;
  pViewportState?: VkPipelineViewportStateCreateInfo | null;
  pRasterizationState?: VkPipelineRasterizationStateCreateInfo | null;
  pMultisampleState?: VkPipelineMultisampleStateCreateInfo | null;
  pDepthStencilState?: VkPipelineDepthStencilStateCreateInfo | null;
  pColorBlendState?: VkPipelineColorBlendStateCreateInfo | null;
  pDynamicState?: VkPipelineDynamicStateCreateInfo | null;
  layout?: VkPipelineLayout | null;
  renderPass?: VkRenderPass | null;
  subpass?: number;
  basePipelineHandle?: VkPipeline | null;
  basePipelineIndex?: number;
}

declare var VkGraphicsPipelineCreateInfo: {
  prototype: VkGraphicsPipelineCreateInfo;
  new(param?: VkGraphicsPipelineCreateInfoInitializer | null): VkGraphicsPipelineCreateInfo;
  sType: number;
  pNext: null;
  flags: number;
  stageCount: number;
  pStages: VkPipelineShaderStageCreateInfo[] | null;
  pVertexInputState: VkPipelineVertexInputStateCreateInfo | null;
  pInputAssemblyState: VkPipelineInputAssemblyStateCreateInfo | null;
  pTessellationState: VkPipelineTessellationStateCreateInfo | null;
  pViewportState: VkPipelineViewportStateCreateInfo | null;
  pRasterizationState: VkPipelineRasterizationStateCreateInfo | null;
  pMultisampleState: VkPipelineMultisampleStateCreateInfo | null;
  pDepthStencilState: VkPipelineDepthStencilStateCreateInfo | null;
  pColorBlendState: VkPipelineColorBlendStateCreateInfo | null;
  pDynamicState: VkPipelineDynamicStateCreateInfo | null;
  layout: VkPipelineLayout | null;
  renderPass: VkRenderPass | null;
  subpass: number;
  basePipelineHandle: VkPipeline | null;
  basePipelineIndex: number;
}

export interface VkGraphicsPipelineCreateInfo {
  sType: number;
  pNext: null;
  flags: number;
  stageCount: number;
  pStages: VkPipelineShaderStageCreateInfo[] | null;
  pVertexInputState: VkPipelineVertexInputStateCreateInfo | null;
  pInputAssemblyState: VkPipelineInputAssemblyStateCreateInfo | null;
  pTessellationState: VkPipelineTessellationStateCreateInfo | null;
  pViewportState: VkPipelineViewportStateCreateInfo | null;
  pRasterizationState: VkPipelineRasterizationStateCreateInfo | null;
  pMultisampleState: VkPipelineMultisampleStateCreateInfo | null;
  pDepthStencilState: VkPipelineDepthStencilStateCreateInfo | null;
  pColorBlendState: VkPipelineColorBlendStateCreateInfo | null;
  pDynamicState: VkPipelineDynamicStateCreateInfo | null;
  layout: VkPipelineLayout | null;
  renderPass: VkRenderPass | null;
  subpass: number;
  basePipelineHandle: VkPipeline | null;
  basePipelineIndex: number;
}

/** ## VkDescriptorSetAllocateInfo ## */
interface VkDescriptorSetAllocateInfoInitializer {
  sType?: number;
  pNext?: null;
  descriptorPool?: VkDescriptorPool | null;
  descriptorSetCount?: number;
  pSetLayouts?: VkDescriptorSetLayout[] | null;
}

declare var VkDescriptorSetAllocateInfo: {
  prototype: VkDescriptorSetAllocateInfo;
  new(param?: VkDescriptorSetAllocateInfoInitializer | null): VkDescriptorSetAllocateInfo;
  sType: number;
  pNext: null;
  descriptorPool: VkDescriptorPool | null;
  descriptorSetCount: number;
  pSetLayouts: VkDescriptorSetLayout[] | null;
}

export interface VkDescriptorSetAllocateInfo {
  sType: number;
  pNext: null;
  descriptorPool: VkDescriptorPool | null;
  descriptorSetCount: number;
  pSetLayouts: VkDescriptorSetLayout[] | null;
}

/** ## VkDescriptorPoolSize ## */
interface VkDescriptorPoolSizeInitializer {
  type?: number;
  descriptorCount?: number;
}

declare var VkDescriptorPoolSize: {
  prototype: VkDescriptorPoolSize;
  new(param?: VkDescriptorPoolSizeInitializer | null): VkDescriptorPoolSize;
  type: number;
  descriptorCount: number;
}

export interface VkDescriptorPoolSize {
  type: number;
  descriptorCount: number;
}

/** ## VkDescriptorPoolCreateInfo ## */
interface VkDescriptorPoolCreateInfoInitializer {
  sType?: number;
  pNext?: null;
  flags?: number;
  maxSets?: number;
  poolSizeCount?: number;
  pPoolSizes?: VkDescriptorPoolSize[] | null;
}

declare var VkDescriptorPoolCreateInfo: {
  prototype: VkDescriptorPoolCreateInfo;
  new(param?: VkDescriptorPoolCreateInfoInitializer | null): VkDescriptorPoolCreateInfo;
  sType: number;
  pNext: null;
  flags: number;
  maxSets: number;
  poolSizeCount: number;
  pPoolSizes: VkDescriptorPoolSize[] | null;
}

export interface VkDescriptorPoolCreateInfo {
  sType: number;
  pNext: null;
  flags: number;
  maxSets: number;
  poolSizeCount: number;
  pPoolSizes: VkDescriptorPoolSize[] | null;
}

/** ## VkDescriptorSetLayoutBinding ## */
interface VkDescriptorSetLayoutBindingInitializer {
  binding?: number;
  descriptorType?: number;
  descriptorCount?: number;
  stageFlags?: number;
  pImmutableSamplers?: VkSampler[] | null;
}

declare var VkDescriptorSetLayoutBinding: {
  prototype: VkDescriptorSetLayoutBinding;
  new(param?: VkDescriptorSetLayoutBindingInitializer | null): VkDescriptorSetLayoutBinding;
  binding: number;
  descriptorType: number;
  descriptorCount: number;
  stageFlags: number;
  pImmutableSamplers: VkSampler[] | null;
}

export interface VkDescriptorSetLayoutBinding {
  binding: number;
  descriptorType: number;
  descriptorCount: number;
  stageFlags: number;
  pImmutableSamplers: VkSampler[] | null;
}

/** ## VkDescriptorSetLayoutCreateInfo ## */
interface VkDescriptorSetLayoutCreateInfoInitializer {
  sType?: number;
  pNext?: null;
  flags?: number;
  bindingCount?: number;
  pBindings?: VkDescriptorSetLayoutBinding[] | null;
}

declare var VkDescriptorSetLayoutCreateInfo: {
  prototype: VkDescriptorSetLayoutCreateInfo;
  new(param?: VkDescriptorSetLayoutCreateInfoInitializer | null): VkDescriptorSetLayoutCreateInfo;
  sType: number;
  pNext: null;
  flags: number;
  bindingCount: number;
  pBindings: VkDescriptorSetLayoutBinding[] | null;
}

export interface VkDescriptorSetLayoutCreateInfo {
  sType: number;
  pNext: null;
  flags: number;
  bindingCount: number;
  pBindings: VkDescriptorSetLayoutBinding[] | null;
}

/** ## VkShaderModuleCreateInfo ## */
interface VkShaderModuleCreateInfoInitializer {
  sType?: number;
  pNext?: null;
  flags?: number;
  codeSize?: number;
  pCode?: Uint8Array | null;
}

declare var VkShaderModuleCreateInfo: {
  prototype: VkShaderModuleCreateInfo;
  new(param?: VkShaderModuleCreateInfoInitializer | null): VkShaderModuleCreateInfo;
  sType: number;
  pNext: null;
  flags: number;
  codeSize: number;
  pCode: Uint8Array | null;
}

export interface VkShaderModuleCreateInfo {
  sType: number;
  pNext: null;
  flags: number;
  codeSize: number;
  pCode: Uint8Array | null;
}

/** ## VkExtent3D ## */
interface VkExtent3DInitializer {
  width?: number;
  height?: number;
  depth?: number;
}

declare var VkExtent3D: {
  prototype: VkExtent3D;
  new(param?: VkExtent3DInitializer | null): VkExtent3D;
  width: number;
  height: number;
  depth: number;
}

export interface VkExtent3D {
  width: number;
  height: number;
  depth: number;
}

/** ## VkOffset3D ## */
interface VkOffset3DInitializer {
  x?: number;
  y?: number;
  z?: number;
}

declare var VkOffset3D: {
  prototype: VkOffset3D;
  new(param?: VkOffset3DInitializer | null): VkOffset3D;
  x: number;
  y: number;
  z: number;
}

export interface VkOffset3D {
  x: number;
  y: number;
  z: number;
}

/** ## VkImageSubresourceLayers ## */
interface VkImageSubresourceLayersInitializer {
  aspectMask?: number;
  mipLevel?: number;
  baseArrayLayer?: number;
  layerCount?: number;
}

declare var VkImageSubresourceLayers: {
  prototype: VkImageSubresourceLayers;
  new(param?: VkImageSubresourceLayersInitializer | null): VkImageSubresourceLayers;
  aspectMask: number;
  mipLevel: number;
  baseArrayLayer: number;
  layerCount: number;
}

export interface VkImageSubresourceLayers {
  aspectMask: number;
  mipLevel: number;
  baseArrayLayer: number;
  layerCount: number;
}

/** ## VkBufferImageCopy ## */
interface VkBufferImageCopyInitializer {
  bufferOffset?: number;
  bufferRowLength?: number;
  bufferImageHeight?: number;
  imageSubresource?: VkImageSubresourceLayers | null;
  imageOffset?: VkOffset3D | null;
  imageExtent?: VkExtent3D | null;
}

declare var VkBufferImageCopy: {
  prototype: VkBufferImageCopy;
  new(param?: VkBufferImageCopyInitializer | null): VkBufferImageCopy;
  bufferOffset: number;
  bufferRowLength: number;
  bufferImageHeight: number;
  imageSubresource: VkImageSubresourceLayers | null;
  imageOffset: VkOffset3D | null;
  imageExtent: VkExtent3D | null;
}

export interface VkBufferImageCopy {
  bufferOffset: number;
  bufferRowLength: number;
  bufferImageHeight: number;
  imageSubresource: VkImageSubresourceLayers | null;
  imageOffset: VkOffset3D | null;
  imageExtent: VkExtent3D | null;
}

/** ## VkBufferCopy ## */
interface VkBufferCopyInitializer {
  srcOffset?: number;
  dstOffset?: number;
  size?: number;
}

declare var VkBufferCopy: {
  prototype: VkBufferCopy;
  new(param?: VkBufferCopyInitializer | null): VkBufferCopy;
  srcOffset: number;
  dstOffset: number;
  size: number;
}

export interface VkBufferCopy {
  srcOffset: number;
  dstOffset: number;
  size: number;
}

/** ## VkImageSubresourceRange ## */
interface VkImageSubresourceRangeInitializer {
  aspectMask?: number;
  baseMipLevel?: number;
  levelCount?: number;
  baseArrayLayer?: number;
  layerCount?: number;
}

declare var VkImageSubresourceRange: {
  prototype: VkImageSubresourceRange;
  new(param?: VkImageSubresourceRangeInitializer | null): VkImageSubresourceRange;
  aspectMask: number;
  baseMipLevel: number;
  levelCount: number;
  baseArrayLayer: number;
  layerCount: number;
}

export interface VkImageSubresourceRange {
  aspectMask: number;
  baseMipLevel: number;
  levelCount: number;
  baseArrayLayer: number;
  layerCount: number;
}

/** ## VkComponentMapping ## */
interface VkComponentMappingInitializer {
  r?: number;
  g?: number;
  b?: number;
  a?: number;
}

declare var VkComponentMapping: {
  prototype: VkComponentMapping;
  new(param?: VkComponentMappingInitializer | null): VkComponentMapping;
  r: number;
  g: number;
  b: number;
  a: number;
}

export interface VkComponentMapping {
  r: number;
  g: number;
  b: number;
  a: number;
}

/** ## VkImageViewCreateInfo ## */
interface VkImageViewCreateInfoInitializer {
  sType?: number;
  pNext?: null;
  flags?: number;
  image?: VkImage | null;
  viewType?: number;
  format?: number;
  components?: VkComponentMapping | null;
  subresourceRange?: VkImageSubresourceRange | null;
}

declare var VkImageViewCreateInfo: {
  prototype: VkImageViewCreateInfo;
  new(param?: VkImageViewCreateInfoInitializer | null): VkImageViewCreateInfo;
  sType: number;
  pNext: null;
  flags: number;
  image: VkImage | null;
  viewType: number;
  format: number;
  components: VkComponentMapping | null;
  subresourceRange: VkImageSubresourceRange | null;
}

export interface VkImageViewCreateInfo {
  sType: number;
  pNext: null;
  flags: number;
  image: VkImage | null;
  viewType: number;
  format: number;
  components: VkComponentMapping | null;
  subresourceRange: VkImageSubresourceRange | null;
}

/** ## VkSubresourceLayout ## */
interface VkSubresourceLayoutInitializer {
  readonly offset?: number;
  readonly size?: number;
  readonly rowPitch?: number;
  readonly arrayPitch?: number;
  readonly depthPitch?: number;
}

declare var VkSubresourceLayout: {
  prototype: VkSubresourceLayout;
  new(param?: VkSubresourceLayoutInitializer | null): VkSubresourceLayout;
  readonly offset: number;
  readonly size: number;
  readonly rowPitch: number;
  readonly arrayPitch: number;
  readonly depthPitch: number;
}

export interface VkSubresourceLayout {
  readonly offset: number;
  readonly size: number;
  readonly rowPitch: number;
  readonly arrayPitch: number;
  readonly depthPitch: number;
}

/** ## VkImageCreateInfo ## */
interface VkImageCreateInfoInitializer {
  sType?: number;
  pNext?: null;
  flags?: number;
  imageType?: number;
  format?: number;
  extent?: VkExtent3D | null;
  mipLevels?: number;
  arrayLayers?: number;
  samples?: number;
  tiling?: number;
  usage?: number;
  sharingMode?: number;
  queueFamilyIndexCount?: number;
  pQueueFamilyIndices?: Uint32Array | null;
  initialLayout?: number;
}

declare var VkImageCreateInfo: {
  prototype: VkImageCreateInfo;
  new(param?: VkImageCreateInfoInitializer | null): VkImageCreateInfo;
  sType: number;
  pNext: null;
  flags: number;
  imageType: number;
  format: number;
  extent: VkExtent3D | null;
  mipLevels: number;
  arrayLayers: number;
  samples: number;
  tiling: number;
  usage: number;
  sharingMode: number;
  queueFamilyIndexCount: number;
  pQueueFamilyIndices: Uint32Array | null;
  initialLayout: number;
}

export interface VkImageCreateInfo {
  sType: number;
  pNext: null;
  flags: number;
  imageType: number;
  format: number;
  extent: VkExtent3D | null;
  mipLevels: number;
  arrayLayers: number;
  samples: number;
  tiling: number;
  usage: number;
  sharingMode: number;
  queueFamilyIndexCount: number;
  pQueueFamilyIndices: Uint32Array | null;
  initialLayout: number;
}

/** ## VkImageMemoryBarrier ## */
interface VkImageMemoryBarrierInitializer {
  sType?: number;
  pNext?: null;
  srcAccessMask?: number;
  dstAccessMask?: number;
  oldLayout?: number;
  newLayout?: number;
  srcQueueFamilyIndex?: number;
  dstQueueFamilyIndex?: number;
  image?: VkImage | null;
  subresourceRange?: VkImageSubresourceRange | null;
}

declare var VkImageMemoryBarrier: {
  prototype: VkImageMemoryBarrier;
  new(param?: VkImageMemoryBarrierInitializer | null): VkImageMemoryBarrier;
  sType: number;
  pNext: null;
  srcAccessMask: number;
  dstAccessMask: number;
  oldLayout: number;
  newLayout: number;
  srcQueueFamilyIndex: number;
  dstQueueFamilyIndex: number;
  image: VkImage | null;
  subresourceRange: VkImageSubresourceRange | null;
}

export interface VkImageMemoryBarrier {
  sType: number;
  pNext: null;
  srcAccessMask: number;
  dstAccessMask: number;
  oldLayout: number;
  newLayout: number;
  srcQueueFamilyIndex: number;
  dstQueueFamilyIndex: number;
  image: VkImage | null;
  subresourceRange: VkImageSubresourceRange | null;
}

/** ## VkBufferMemoryBarrier ## */
interface VkBufferMemoryBarrierInitializer {
  sType?: number;
  pNext?: null;
  srcAccessMask?: number;
  dstAccessMask?: number;
  srcQueueFamilyIndex?: number;
  dstQueueFamilyIndex?: number;
  buffer?: VkBuffer | null;
  offset?: number;
  size?: number;
}

declare var VkBufferMemoryBarrier: {
  prototype: VkBufferMemoryBarrier;
  new(param?: VkBufferMemoryBarrierInitializer | null): VkBufferMemoryBarrier;
  sType: number;
  pNext: null;
  srcAccessMask: number;
  dstAccessMask: number;
  srcQueueFamilyIndex: number;
  dstQueueFamilyIndex: number;
  buffer: VkBuffer | null;
  offset: number;
  size: number;
}

export interface VkBufferMemoryBarrier {
  sType: number;
  pNext: null;
  srcAccessMask: number;
  dstAccessMask: number;
  srcQueueFamilyIndex: number;
  dstQueueFamilyIndex: number;
  buffer: VkBuffer | null;
  offset: number;
  size: number;
}

/** ## VkMemoryBarrier ## */
interface VkMemoryBarrierInitializer {
  sType?: number;
  pNext?: null;
  srcAccessMask?: number;
  dstAccessMask?: number;
}

declare var VkMemoryBarrier: {
  prototype: VkMemoryBarrier;
  new(param?: VkMemoryBarrierInitializer | null): VkMemoryBarrier;
  sType: number;
  pNext: null;
  srcAccessMask: number;
  dstAccessMask: number;
}

export interface VkMemoryBarrier {
  sType: number;
  pNext: null;
  srcAccessMask: number;
  dstAccessMask: number;
}

/** ## VkImageSubresource ## */
interface VkImageSubresourceInitializer {
  aspectMask?: number;
  mipLevel?: number;
  arrayLayer?: number;
}

declare var VkImageSubresource: {
  prototype: VkImageSubresource;
  new(param?: VkImageSubresourceInitializer | null): VkImageSubresource;
  aspectMask: number;
  mipLevel: number;
  arrayLayer: number;
}

export interface VkImageSubresource {
  aspectMask: number;
  mipLevel: number;
  arrayLayer: number;
}

/** ## VkBufferCreateInfo ## */
interface VkBufferCreateInfoInitializer {
  sType?: number;
  pNext?: null;
  flags?: number;
  size?: number;
  usage?: number;
  sharingMode?: number;
  queueFamilyIndexCount?: number;
  pQueueFamilyIndices?: Uint32Array | null;
}

declare var VkBufferCreateInfo: {
  prototype: VkBufferCreateInfo;
  new(param?: VkBufferCreateInfoInitializer | null): VkBufferCreateInfo;
  sType: number;
  pNext: null;
  flags: number;
  size: number;
  usage: number;
  sharingMode: number;
  queueFamilyIndexCount: number;
  pQueueFamilyIndices: Uint32Array | null;
}

export interface VkBufferCreateInfo {
  sType: number;
  pNext: null;
  flags: number;
  size: number;
  usage: number;
  sharingMode: number;
  queueFamilyIndexCount: number;
  pQueueFamilyIndices: Uint32Array | null;
}

/** ## VkCopyDescriptorSet ## */
interface VkCopyDescriptorSetInitializer {
  sType?: number;
  pNext?: null;
  srcSet?: VkDescriptorSet | null;
  srcBinding?: number;
  srcArrayElement?: number;
  dstSet?: VkDescriptorSet | null;
  dstBinding?: number;
  dstArrayElement?: number;
  descriptorCount?: number;
}

declare var VkCopyDescriptorSet: {
  prototype: VkCopyDescriptorSet;
  new(param?: VkCopyDescriptorSetInitializer | null): VkCopyDescriptorSet;
  sType: number;
  pNext: null;
  srcSet: VkDescriptorSet | null;
  srcBinding: number;
  srcArrayElement: number;
  dstSet: VkDescriptorSet | null;
  dstBinding: number;
  dstArrayElement: number;
  descriptorCount: number;
}

export interface VkCopyDescriptorSet {
  sType: number;
  pNext: null;
  srcSet: VkDescriptorSet | null;
  srcBinding: number;
  srcArrayElement: number;
  dstSet: VkDescriptorSet | null;
  dstBinding: number;
  dstArrayElement: number;
  descriptorCount: number;
}

/** ## VkDescriptorBufferInfo ## */
interface VkDescriptorBufferInfoInitializer {
  buffer?: VkBuffer | null;
  offset?: number;
  range?: number;
}

declare var VkDescriptorBufferInfo: {
  prototype: VkDescriptorBufferInfo;
  new(param?: VkDescriptorBufferInfoInitializer | null): VkDescriptorBufferInfo;
  buffer: VkBuffer | null;
  offset: number;
  range: number;
}

export interface VkDescriptorBufferInfo {
  buffer: VkBuffer | null;
  offset: number;
  range: number;
}

/** ## VkDescriptorImageInfo ## */
interface VkDescriptorImageInfoInitializer {
  sampler?: VkSampler | null;
  imageView?: VkImageView | null;
  imageLayout?: number;
}

declare var VkDescriptorImageInfo: {
  prototype: VkDescriptorImageInfo;
  new(param?: VkDescriptorImageInfoInitializer | null): VkDescriptorImageInfo;
  sampler: VkSampler | null;
  imageView: VkImageView | null;
  imageLayout: number;
}

export interface VkDescriptorImageInfo {
  sampler: VkSampler | null;
  imageView: VkImageView | null;
  imageLayout: number;
}

/** ## VkWriteDescriptorSet ## */
interface VkWriteDescriptorSetInitializer {
  sType?: number;
  pNext?: null;
  dstSet?: VkDescriptorSet | null;
  dstBinding?: number;
  dstArrayElement?: number;
  descriptorCount?: number;
  descriptorType?: number;
  pImageInfo?: VkDescriptorImageInfo[] | null;
  pBufferInfo?: VkDescriptorBufferInfo[] | null;
  pTexelBufferView?: VkBufferView[] | null;
}

declare var VkWriteDescriptorSet: {
  prototype: VkWriteDescriptorSet;
  new(param?: VkWriteDescriptorSetInitializer | null): VkWriteDescriptorSet;
  sType: number;
  pNext: null;
  dstSet: VkDescriptorSet | null;
  dstBinding: number;
  dstArrayElement: number;
  descriptorCount: number;
  descriptorType: number;
  pImageInfo: VkDescriptorImageInfo[] | null;
  pBufferInfo: VkDescriptorBufferInfo[] | null;
  pTexelBufferView: VkBufferView[] | null;
}

export interface VkWriteDescriptorSet {
  sType: number;
  pNext: null;
  dstSet: VkDescriptorSet | null;
  dstBinding: number;
  dstArrayElement: number;
  descriptorCount: number;
  descriptorType: number;
  pImageInfo: VkDescriptorImageInfo[] | null;
  pBufferInfo: VkDescriptorBufferInfo[] | null;
  pTexelBufferView: VkBufferView[] | null;
}

/** ## VkMemoryRequirements ## */
interface VkMemoryRequirementsInitializer {
  readonly size?: number;
  readonly alignment?: number;
  readonly memoryTypeBits?: number;
}

declare var VkMemoryRequirements: {
  prototype: VkMemoryRequirements;
  new(param?: VkMemoryRequirementsInitializer | null): VkMemoryRequirements;
  readonly size: number;
  readonly alignment: number;
  readonly memoryTypeBits: number;
}

export interface VkMemoryRequirements {
  readonly size: number;
  readonly alignment: number;
  readonly memoryTypeBits: number;
}

/** ## VkMemoryAllocateInfo ## */
interface VkMemoryAllocateInfoInitializer {
  sType?: number;
  pNext?: null;
  allocationSize?: number;
  memoryTypeIndex?: number;
}

declare var VkMemoryAllocateInfo: {
  prototype: VkMemoryAllocateInfo;
  new(param?: VkMemoryAllocateInfoInitializer | null): VkMemoryAllocateInfo;
  sType: number;
  pNext: null;
  allocationSize: number;
  memoryTypeIndex: number;
}

export interface VkMemoryAllocateInfo {
  sType: number;
  pNext: null;
  allocationSize: number;
  memoryTypeIndex: number;
}

/** ## VkMemoryHeap ## */
interface VkMemoryHeapInitializer {
  readonly size?: number;
  readonly flags?: number;
}

declare var VkMemoryHeap: {
  prototype: VkMemoryHeap;
  new(param?: VkMemoryHeapInitializer | null): VkMemoryHeap;
  readonly size: number;
  readonly flags: number;
}

export interface VkMemoryHeap {
  readonly size: number;
  readonly flags: number;
}

/** ## VkMemoryType ## */
interface VkMemoryTypeInitializer {
  readonly propertyFlags?: number;
  readonly heapIndex?: number;
}

declare var VkMemoryType: {
  prototype: VkMemoryType;
  new(param?: VkMemoryTypeInitializer | null): VkMemoryType;
  readonly propertyFlags: number;
  readonly heapIndex: number;
}

export interface VkMemoryType {
  readonly propertyFlags: number;
  readonly heapIndex: number;
}

/** ## VkPhysicalDeviceMemoryProperties ## */
interface VkPhysicalDeviceMemoryPropertiesInitializer {
  readonly memoryTypeCount?: number;
  readonly memoryTypes?: number[] | null;
  readonly memoryHeapCount?: number;
  readonly memoryHeaps?: number[] | null;
}

declare var VkPhysicalDeviceMemoryProperties: {
  prototype: VkPhysicalDeviceMemoryProperties;
  new(param?: VkPhysicalDeviceMemoryPropertiesInitializer | null): VkPhysicalDeviceMemoryProperties;
  readonly memoryTypeCount: number;
  readonly memoryTypes: number[] | null;
  readonly memoryHeapCount: number;
  readonly memoryHeaps: number[] | null;
}

export interface VkPhysicalDeviceMemoryProperties {
  readonly memoryTypeCount: number;
  readonly memoryTypes: number[] | null;
  readonly memoryHeapCount: number;
  readonly memoryHeaps: number[] | null;
}

/** ## VkQueueFamilyProperties ## */
interface VkQueueFamilyPropertiesInitializer {
  readonly queueFlags?: number;
  readonly queueCount?: number;
  readonly timestampValidBits?: number;
  readonly minImageTransferGranularity?: VkExtent3D | null;
}

declare var VkQueueFamilyProperties: {
  prototype: VkQueueFamilyProperties;
  new(param?: VkQueueFamilyPropertiesInitializer | null): VkQueueFamilyProperties;
  readonly queueFlags: number;
  readonly queueCount: number;
  readonly timestampValidBits: number;
  readonly minImageTransferGranularity: VkExtent3D | null;
}

export interface VkQueueFamilyProperties {
  readonly queueFlags: number;
  readonly queueCount: number;
  readonly timestampValidBits: number;
  readonly minImageTransferGranularity: VkExtent3D | null;
}

/** ## VkApplicationInfo ## */
interface VkApplicationInfoInitializer {
  sType?: number;
  pNext?: null;
  pApplicationName?: string | null;
  applicationVersion?: number;
  pEngineName?: string | null;
  engineVersion?: number;
  apiVersion?: number;
}

declare var VkApplicationInfo: {
  prototype: VkApplicationInfo;
  new(param?: VkApplicationInfoInitializer | null): VkApplicationInfo;
  sType: number;
  pNext: null;
  pApplicationName: string | null;
  applicationVersion: number;
  pEngineName: string | null;
  engineVersion: number;
  apiVersion: number;
}

export interface VkApplicationInfo {
  sType: number;
  pNext: null;
  pApplicationName: string | null;
  applicationVersion: number;
  pEngineName: string | null;
  engineVersion: number;
  apiVersion: number;
}

/** ## VkInstanceCreateInfo ## */
interface VkInstanceCreateInfoInitializer {
  sType?: number;
  pNext?: null;
  flags?: number;
  pApplicationInfo?: VkApplicationInfo | null;
  enabledLayerCount?: number;
  ppEnabledLayerNames?: string[] | null;
  enabledExtensionCount?: number;
  ppEnabledExtensionNames?: string[] | null;
}

declare var VkInstanceCreateInfo: {
  prototype: VkInstanceCreateInfo;
  new(param?: VkInstanceCreateInfoInitializer | null): VkInstanceCreateInfo;
  sType: number;
  pNext: null;
  flags: number;
  pApplicationInfo: VkApplicationInfo | null;
  enabledLayerCount: number;
  ppEnabledLayerNames: string[] | null;
  enabledExtensionCount: number;
  ppEnabledExtensionNames: string[] | null;
}

export interface VkInstanceCreateInfo {
  sType: number;
  pNext: null;
  flags: number;
  pApplicationInfo: VkApplicationInfo | null;
  enabledLayerCount: number;
  ppEnabledLayerNames: string[] | null;
  enabledExtensionCount: number;
  ppEnabledExtensionNames: string[] | null;
}

/** ## VkPhysicalDeviceFeatures ## */
interface VkPhysicalDeviceFeaturesInitializer {
  robustBufferAccess?: number;
  fullDrawIndexUint32?: number;
  imageCubeArray?: number;
  independentBlend?: number;
  geometryShader?: number;
  tessellationShader?: number;
  sampleRateShading?: number;
  dualSrcBlend?: number;
  logicOp?: number;
  multiDrawIndirect?: number;
  drawIndirectFirstInstance?: number;
  depthClamp?: number;
  depthBiasClamp?: number;
  fillModeNonSolid?: number;
  depthBounds?: number;
  wideLines?: number;
  largePoints?: number;
  alphaToOne?: number;
  multiViewport?: number;
  samplerAnisotropy?: number;
  textureCompressionETC2?: number;
  textureCompressionASTC_LDR?: number;
  textureCompressionBC?: number;
  occlusionQueryPrecise?: number;
  pipelineStatisticsQuery?: number;
  vertexPipelineStoresAndAtomics?: number;
  fragmentStoresAndAtomics?: number;
  shaderTessellationAndGeometryPointSize?: number;
  shaderImageGatherExtended?: number;
  shaderStorageImageExtendedFormats?: number;
  shaderStorageImageMultisample?: number;
  shaderStorageImageReadWithoutFormat?: number;
  shaderStorageImageWriteWithoutFormat?: number;
  shaderUniformBufferArrayDynamicIndexing?: number;
  shaderSampledImageArrayDynamicIndexing?: number;
  shaderStorageBufferArrayDynamicIndexing?: number;
  shaderStorageImageArrayDynamicIndexing?: number;
  shaderClipDistance?: number;
  shaderCullDistance?: number;
  shaderFloat64?: number;
  shaderInt64?: number;
  shaderInt16?: number;
  shaderResourceResidency?: number;
  shaderResourceMinLod?: number;
  sparseBinding?: number;
  sparseResidencyBuffer?: number;
  sparseResidencyImage2D?: number;
  sparseResidencyImage3D?: number;
  sparseResidency2Samples?: number;
  sparseResidency4Samples?: number;
  sparseResidency8Samples?: number;
  sparseResidency16Samples?: number;
  sparseResidencyAliased?: number;
  variableMultisampleRate?: number;
  inheritedQueries?: number;
}

declare var VkPhysicalDeviceFeatures: {
  prototype: VkPhysicalDeviceFeatures;
  new(param?: VkPhysicalDeviceFeaturesInitializer | null): VkPhysicalDeviceFeatures;
  robustBufferAccess: number;
  fullDrawIndexUint32: number;
  imageCubeArray: number;
  independentBlend: number;
  geometryShader: number;
  tessellationShader: number;
  sampleRateShading: number;
  dualSrcBlend: number;
  logicOp: number;
  multiDrawIndirect: number;
  drawIndirectFirstInstance: number;
  depthClamp: number;
  depthBiasClamp: number;
  fillModeNonSolid: number;
  depthBounds: number;
  wideLines: number;
  largePoints: number;
  alphaToOne: number;
  multiViewport: number;
  samplerAnisotropy: number;
  textureCompressionETC2: number;
  textureCompressionASTC_LDR: number;
  textureCompressionBC: number;
  occlusionQueryPrecise: number;
  pipelineStatisticsQuery: number;
  vertexPipelineStoresAndAtomics: number;
  fragmentStoresAndAtomics: number;
  shaderTessellationAndGeometryPointSize: number;
  shaderImageGatherExtended: number;
  shaderStorageImageExtendedFormats: number;
  shaderStorageImageMultisample: number;
  shaderStorageImageReadWithoutFormat: number;
  shaderStorageImageWriteWithoutFormat: number;
  shaderUniformBufferArrayDynamicIndexing: number;
  shaderSampledImageArrayDynamicIndexing: number;
  shaderStorageBufferArrayDynamicIndexing: number;
  shaderStorageImageArrayDynamicIndexing: number;
  shaderClipDistance: number;
  shaderCullDistance: number;
  shaderFloat64: number;
  shaderInt64: number;
  shaderInt16: number;
  shaderResourceResidency: number;
  shaderResourceMinLod: number;
  sparseBinding: number;
  sparseResidencyBuffer: number;
  sparseResidencyImage2D: number;
  sparseResidencyImage3D: number;
  sparseResidency2Samples: number;
  sparseResidency4Samples: number;
  sparseResidency8Samples: number;
  sparseResidency16Samples: number;
  sparseResidencyAliased: number;
  variableMultisampleRate: number;
  inheritedQueries: number;
}

export interface VkPhysicalDeviceFeatures {
  robustBufferAccess: number;
  fullDrawIndexUint32: number;
  imageCubeArray: number;
  independentBlend: number;
  geometryShader: number;
  tessellationShader: number;
  sampleRateShading: number;
  dualSrcBlend: number;
  logicOp: number;
  multiDrawIndirect: number;
  drawIndirectFirstInstance: number;
  depthClamp: number;
  depthBiasClamp: number;
  fillModeNonSolid: number;
  depthBounds: number;
  wideLines: number;
  largePoints: number;
  alphaToOne: number;
  multiViewport: number;
  samplerAnisotropy: number;
  textureCompressionETC2: number;
  textureCompressionASTC_LDR: number;
  textureCompressionBC: number;
  occlusionQueryPrecise: number;
  pipelineStatisticsQuery: number;
  vertexPipelineStoresAndAtomics: number;
  fragmentStoresAndAtomics: number;
  shaderTessellationAndGeometryPointSize: number;
  shaderImageGatherExtended: number;
  shaderStorageImageExtendedFormats: number;
  shaderStorageImageMultisample: number;
  shaderStorageImageReadWithoutFormat: number;
  shaderStorageImageWriteWithoutFormat: number;
  shaderUniformBufferArrayDynamicIndexing: number;
  shaderSampledImageArrayDynamicIndexing: number;
  shaderStorageBufferArrayDynamicIndexing: number;
  shaderStorageImageArrayDynamicIndexing: number;
  shaderClipDistance: number;
  shaderCullDistance: number;
  shaderFloat64: number;
  shaderInt64: number;
  shaderInt16: number;
  shaderResourceResidency: number;
  shaderResourceMinLod: number;
  sparseBinding: number;
  sparseResidencyBuffer: number;
  sparseResidencyImage2D: number;
  sparseResidencyImage3D: number;
  sparseResidency2Samples: number;
  sparseResidency4Samples: number;
  sparseResidency8Samples: number;
  sparseResidency16Samples: number;
  sparseResidencyAliased: number;
  variableMultisampleRate: number;
  inheritedQueries: number;
}

/** ## VkDeviceQueueCreateInfo ## */
interface VkDeviceQueueCreateInfoInitializer {
  sType?: number;
  pNext?: null;
  flags?: number;
  queueFamilyIndex?: number;
  queueCount?: number;
  pQueuePriorities?: Float32Array | null;
}

declare var VkDeviceQueueCreateInfo: {
  prototype: VkDeviceQueueCreateInfo;
  new(param?: VkDeviceQueueCreateInfoInitializer | null): VkDeviceQueueCreateInfo;
  sType: number;
  pNext: null;
  flags: number;
  queueFamilyIndex: number;
  queueCount: number;
  pQueuePriorities: Float32Array | null;
}

export interface VkDeviceQueueCreateInfo {
  sType: number;
  pNext: null;
  flags: number;
  queueFamilyIndex: number;
  queueCount: number;
  pQueuePriorities: Float32Array | null;
}

/** ## VkDeviceCreateInfo ## */
interface VkDeviceCreateInfoInitializer {
  sType?: number;
  pNext?: null;
  flags?: number;
  queueCreateInfoCount?: number;
  pQueueCreateInfos?: VkDeviceQueueCreateInfo[] | null;
  enabledLayerCount?: number;
  ppEnabledLayerNames?: string[] | null;
  enabledExtensionCount?: number;
  ppEnabledExtensionNames?: string[] | null;
  pEnabledFeatures?: VkPhysicalDeviceFeatures | null;
}

declare var VkDeviceCreateInfo: {
  prototype: VkDeviceCreateInfo;
  new(param?: VkDeviceCreateInfoInitializer | null): VkDeviceCreateInfo;
  sType: number;
  pNext: null;
  flags: number;
  queueCreateInfoCount: number;
  pQueueCreateInfos: VkDeviceQueueCreateInfo[] | null;
  enabledLayerCount: number;
  ppEnabledLayerNames: string[] | null;
  enabledExtensionCount: number;
  ppEnabledExtensionNames: string[] | null;
  pEnabledFeatures: VkPhysicalDeviceFeatures | null;
}

export interface VkDeviceCreateInfo {
  sType: number;
  pNext: null;
  flags: number;
  queueCreateInfoCount: number;
  pQueueCreateInfos: VkDeviceQueueCreateInfo[] | null;
  enabledLayerCount: number;
  ppEnabledLayerNames: string[] | null;
  enabledExtensionCount: number;
  ppEnabledExtensionNames: string[] | null;
  pEnabledFeatures: VkPhysicalDeviceFeatures | null;
}

/** ## VkLayerProperties ## */
interface VkLayerPropertiesInitializer {
  readonly layerName?: string | null;
  readonly specVersion?: number;
  readonly implementationVersion?: number;
  readonly description?: string | null;
}

declare var VkLayerProperties: {
  prototype: VkLayerProperties;
  new(param?: VkLayerPropertiesInitializer | null): VkLayerProperties;
  readonly layerName: string | null;
  readonly specVersion: number;
  readonly implementationVersion: number;
  readonly description: string | null;
}

export interface VkLayerProperties {
  readonly layerName: string | null;
  readonly specVersion: number;
  readonly implementationVersion: number;
  readonly description: string | null;
}

/** ## VkPhysicalDeviceSparseProperties ## */
interface VkPhysicalDeviceSparsePropertiesInitializer {
  readonly residencyStandard2DBlockShape?: number;
  readonly residencyStandard2DMultisampleBlockShape?: number;
  readonly residencyStandard3DBlockShape?: number;
  readonly residencyAlignedMipSize?: number;
  readonly residencyNonResidentStrict?: number;
}

declare var VkPhysicalDeviceSparseProperties: {
  prototype: VkPhysicalDeviceSparseProperties;
  new(param?: VkPhysicalDeviceSparsePropertiesInitializer | null): VkPhysicalDeviceSparseProperties;
  readonly residencyStandard2DBlockShape: number;
  readonly residencyStandard2DMultisampleBlockShape: number;
  readonly residencyStandard3DBlockShape: number;
  readonly residencyAlignedMipSize: number;
  readonly residencyNonResidentStrict: number;
}

export interface VkPhysicalDeviceSparseProperties {
  readonly residencyStandard2DBlockShape: number;
  readonly residencyStandard2DMultisampleBlockShape: number;
  readonly residencyStandard3DBlockShape: number;
  readonly residencyAlignedMipSize: number;
  readonly residencyNonResidentStrict: number;
}

/** ## VkPhysicalDeviceLimits ## */
interface VkPhysicalDeviceLimitsInitializer {
  readonly maxImageDimension1D?: number;
  readonly maxImageDimension2D?: number;
  readonly maxImageDimension3D?: number;
  readonly maxImageDimensionCube?: number;
  readonly maxImageArrayLayers?: number;
  readonly maxTexelBufferElements?: number;
  readonly maxUniformBufferRange?: number;
  readonly maxStorageBufferRange?: number;
  readonly maxPushConstantsSize?: number;
  readonly maxMemoryAllocationCount?: number;
  readonly maxSamplerAllocationCount?: number;
  readonly bufferImageGranularity?: number;
  readonly sparseAddressSpaceSize?: number;
  readonly maxBoundDescriptorSets?: number;
  readonly maxPerStageDescriptorSamplers?: number;
  readonly maxPerStageDescriptorUniformBuffers?: number;
  readonly maxPerStageDescriptorStorageBuffers?: number;
  readonly maxPerStageDescriptorSampledImages?: number;
  readonly maxPerStageDescriptorStorageImages?: number;
  readonly maxPerStageDescriptorInputAttachments?: number;
  readonly maxPerStageResources?: number;
  readonly maxDescriptorSetSamplers?: number;
  readonly maxDescriptorSetUniformBuffers?: number;
  readonly maxDescriptorSetUniformBuffersDynamic?: number;
  readonly maxDescriptorSetStorageBuffers?: number;
  readonly maxDescriptorSetStorageBuffersDynamic?: number;
  readonly maxDescriptorSetSampledImages?: number;
  readonly maxDescriptorSetStorageImages?: number;
  readonly maxDescriptorSetInputAttachments?: number;
  readonly maxVertexInputAttributes?: number;
  readonly maxVertexInputBindings?: number;
  readonly maxVertexInputAttributeOffset?: number;
  readonly maxVertexInputBindingStride?: number;
  readonly maxVertexOutputComponents?: number;
  readonly maxTessellationGenerationLevel?: number;
  readonly maxTessellationPatchSize?: number;
  readonly maxTessellationControlPerVertexInputComponents?: number;
  readonly maxTessellationControlPerVertexOutputComponents?: number;
  readonly maxTessellationControlPerPatchOutputComponents?: number;
  readonly maxTessellationControlTotalOutputComponents?: number;
  readonly maxTessellationEvaluationInputComponents?: number;
  readonly maxTessellationEvaluationOutputComponents?: number;
  readonly maxGeometryShaderInvocations?: number;
  readonly maxGeometryInputComponents?: number;
  readonly maxGeometryOutputComponents?: number;
  readonly maxGeometryOutputVertices?: number;
  readonly maxGeometryTotalOutputComponents?: number;
  readonly maxFragmentInputComponents?: number;
  readonly maxFragmentOutputAttachments?: number;
  readonly maxFragmentDualSrcAttachments?: number;
  readonly maxFragmentCombinedOutputResources?: number;
  readonly maxComputeSharedMemorySize?: number;
  readonly maxComputeWorkGroupCount?: number[] | null;
  readonly maxComputeWorkGroupInvocations?: number;
  readonly maxComputeWorkGroupSize?: number[] | null;
  readonly subPixelPrecisionBits?: number;
  readonly subTexelPrecisionBits?: number;
  readonly mipmapPrecisionBits?: number;
  readonly maxDrawIndexedIndexValue?: number;
  readonly maxDrawIndirectCount?: number;
  readonly maxSamplerLodBias?: number;
  readonly maxSamplerAnisotropy?: number;
  readonly maxViewports?: number;
  readonly maxViewportDimensions?: number[] | null;
  readonly viewportBoundsRange?: number[] | null;
  readonly viewportSubPixelBits?: number;
  readonly minMemoryMapAlignment?: number;
  readonly minTexelBufferOffsetAlignment?: number;
  readonly minUniformBufferOffsetAlignment?: number;
  readonly minStorageBufferOffsetAlignment?: number;
  readonly minTexelOffset?: number;
  readonly maxTexelOffset?: number;
  readonly minTexelGatherOffset?: number;
  readonly maxTexelGatherOffset?: number;
  readonly minInterpolationOffset?: number;
  readonly maxInterpolationOffset?: number;
  readonly subPixelInterpolationOffsetBits?: number;
  readonly maxFramebufferWidth?: number;
  readonly maxFramebufferHeight?: number;
  readonly maxFramebufferLayers?: number;
  readonly framebufferColorSampleCounts?: number;
  readonly framebufferDepthSampleCounts?: number;
  readonly framebufferStencilSampleCounts?: number;
  readonly framebufferNoAttachmentsSampleCounts?: number;
  readonly maxColorAttachments?: number;
  readonly sampledImageColorSampleCounts?: number;
  readonly sampledImageIntegerSampleCounts?: number;
  readonly sampledImageDepthSampleCounts?: number;
  readonly sampledImageStencilSampleCounts?: number;
  readonly storageImageSampleCounts?: number;
  readonly maxSampleMaskWords?: number;
  readonly timestampComputeAndGraphics?: number;
  readonly timestampPeriod?: number;
  readonly maxClipDistances?: number;
  readonly maxCullDistances?: number;
  readonly maxCombinedClipAndCullDistances?: number;
  readonly discreteQueuePriorities?: number;
  readonly pointSizeRange?: number[] | null;
  readonly lineWidthRange?: number[] | null;
  readonly pointSizeGranularity?: number;
  readonly lineWidthGranularity?: number;
  readonly strictLines?: number;
  readonly standardSampleLocations?: number;
  readonly optimalBufferCopyOffsetAlignment?: number;
  readonly optimalBufferCopyRowPitchAlignment?: number;
  readonly nonCoherentAtomSize?: number;
}

declare var VkPhysicalDeviceLimits: {
  prototype: VkPhysicalDeviceLimits;
  new(param?: VkPhysicalDeviceLimitsInitializer | null): VkPhysicalDeviceLimits;
  readonly maxImageDimension1D: number;
  readonly maxImageDimension2D: number;
  readonly maxImageDimension3D: number;
  readonly maxImageDimensionCube: number;
  readonly maxImageArrayLayers: number;
  readonly maxTexelBufferElements: number;
  readonly maxUniformBufferRange: number;
  readonly maxStorageBufferRange: number;
  readonly maxPushConstantsSize: number;
  readonly maxMemoryAllocationCount: number;
  readonly maxSamplerAllocationCount: number;
  readonly bufferImageGranularity: number;
  readonly sparseAddressSpaceSize: number;
  readonly maxBoundDescriptorSets: number;
  readonly maxPerStageDescriptorSamplers: number;
  readonly maxPerStageDescriptorUniformBuffers: number;
  readonly maxPerStageDescriptorStorageBuffers: number;
  readonly maxPerStageDescriptorSampledImages: number;
  readonly maxPerStageDescriptorStorageImages: number;
  readonly maxPerStageDescriptorInputAttachments: number;
  readonly maxPerStageResources: number;
  readonly maxDescriptorSetSamplers: number;
  readonly maxDescriptorSetUniformBuffers: number;
  readonly maxDescriptorSetUniformBuffersDynamic: number;
  readonly maxDescriptorSetStorageBuffers: number;
  readonly maxDescriptorSetStorageBuffersDynamic: number;
  readonly maxDescriptorSetSampledImages: number;
  readonly maxDescriptorSetStorageImages: number;
  readonly maxDescriptorSetInputAttachments: number;
  readonly maxVertexInputAttributes: number;
  readonly maxVertexInputBindings: number;
  readonly maxVertexInputAttributeOffset: number;
  readonly maxVertexInputBindingStride: number;
  readonly maxVertexOutputComponents: number;
  readonly maxTessellationGenerationLevel: number;
  readonly maxTessellationPatchSize: number;
  readonly maxTessellationControlPerVertexInputComponents: number;
  readonly maxTessellationControlPerVertexOutputComponents: number;
  readonly maxTessellationControlPerPatchOutputComponents: number;
  readonly maxTessellationControlTotalOutputComponents: number;
  readonly maxTessellationEvaluationInputComponents: number;
  readonly maxTessellationEvaluationOutputComponents: number;
  readonly maxGeometryShaderInvocations: number;
  readonly maxGeometryInputComponents: number;
  readonly maxGeometryOutputComponents: number;
  readonly maxGeometryOutputVertices: number;
  readonly maxGeometryTotalOutputComponents: number;
  readonly maxFragmentInputComponents: number;
  readonly maxFragmentOutputAttachments: number;
  readonly maxFragmentDualSrcAttachments: number;
  readonly maxFragmentCombinedOutputResources: number;
  readonly maxComputeSharedMemorySize: number;
  readonly maxComputeWorkGroupCount: number[] | null;
  readonly maxComputeWorkGroupInvocations: number;
  readonly maxComputeWorkGroupSize: number[] | null;
  readonly subPixelPrecisionBits: number;
  readonly subTexelPrecisionBits: number;
  readonly mipmapPrecisionBits: number;
  readonly maxDrawIndexedIndexValue: number;
  readonly maxDrawIndirectCount: number;
  readonly maxSamplerLodBias: number;
  readonly maxSamplerAnisotropy: number;
  readonly maxViewports: number;
  readonly maxViewportDimensions: number[] | null;
  readonly viewportBoundsRange: number[] | null;
  readonly viewportSubPixelBits: number;
  readonly minMemoryMapAlignment: number;
  readonly minTexelBufferOffsetAlignment: number;
  readonly minUniformBufferOffsetAlignment: number;
  readonly minStorageBufferOffsetAlignment: number;
  readonly minTexelOffset: number;
  readonly maxTexelOffset: number;
  readonly minTexelGatherOffset: number;
  readonly maxTexelGatherOffset: number;
  readonly minInterpolationOffset: number;
  readonly maxInterpolationOffset: number;
  readonly subPixelInterpolationOffsetBits: number;
  readonly maxFramebufferWidth: number;
  readonly maxFramebufferHeight: number;
  readonly maxFramebufferLayers: number;
  readonly framebufferColorSampleCounts: number;
  readonly framebufferDepthSampleCounts: number;
  readonly framebufferStencilSampleCounts: number;
  readonly framebufferNoAttachmentsSampleCounts: number;
  readonly maxColorAttachments: number;
  readonly sampledImageColorSampleCounts: number;
  readonly sampledImageIntegerSampleCounts: number;
  readonly sampledImageDepthSampleCounts: number;
  readonly sampledImageStencilSampleCounts: number;
  readonly storageImageSampleCounts: number;
  readonly maxSampleMaskWords: number;
  readonly timestampComputeAndGraphics: number;
  readonly timestampPeriod: number;
  readonly maxClipDistances: number;
  readonly maxCullDistances: number;
  readonly maxCombinedClipAndCullDistances: number;
  readonly discreteQueuePriorities: number;
  readonly pointSizeRange: number[] | null;
  readonly lineWidthRange: number[] | null;
  readonly pointSizeGranularity: number;
  readonly lineWidthGranularity: number;
  readonly strictLines: number;
  readonly standardSampleLocations: number;
  readonly optimalBufferCopyOffsetAlignment: number;
  readonly optimalBufferCopyRowPitchAlignment: number;
  readonly nonCoherentAtomSize: number;
}

export interface VkPhysicalDeviceLimits {
  readonly maxImageDimension1D: number;
  readonly maxImageDimension2D: number;
  readonly maxImageDimension3D: number;
  readonly maxImageDimensionCube: number;
  readonly maxImageArrayLayers: number;
  readonly maxTexelBufferElements: number;
  readonly maxUniformBufferRange: number;
  readonly maxStorageBufferRange: number;
  readonly maxPushConstantsSize: number;
  readonly maxMemoryAllocationCount: number;
  readonly maxSamplerAllocationCount: number;
  readonly bufferImageGranularity: number;
  readonly sparseAddressSpaceSize: number;
  readonly maxBoundDescriptorSets: number;
  readonly maxPerStageDescriptorSamplers: number;
  readonly maxPerStageDescriptorUniformBuffers: number;
  readonly maxPerStageDescriptorStorageBuffers: number;
  readonly maxPerStageDescriptorSampledImages: number;
  readonly maxPerStageDescriptorStorageImages: number;
  readonly maxPerStageDescriptorInputAttachments: number;
  readonly maxPerStageResources: number;
  readonly maxDescriptorSetSamplers: number;
  readonly maxDescriptorSetUniformBuffers: number;
  readonly maxDescriptorSetUniformBuffersDynamic: number;
  readonly maxDescriptorSetStorageBuffers: number;
  readonly maxDescriptorSetStorageBuffersDynamic: number;
  readonly maxDescriptorSetSampledImages: number;
  readonly maxDescriptorSetStorageImages: number;
  readonly maxDescriptorSetInputAttachments: number;
  readonly maxVertexInputAttributes: number;
  readonly maxVertexInputBindings: number;
  readonly maxVertexInputAttributeOffset: number;
  readonly maxVertexInputBindingStride: number;
  readonly maxVertexOutputComponents: number;
  readonly maxTessellationGenerationLevel: number;
  readonly maxTessellationPatchSize: number;
  readonly maxTessellationControlPerVertexInputComponents: number;
  readonly maxTessellationControlPerVertexOutputComponents: number;
  readonly maxTessellationControlPerPatchOutputComponents: number;
  readonly maxTessellationControlTotalOutputComponents: number;
  readonly maxTessellationEvaluationInputComponents: number;
  readonly maxTessellationEvaluationOutputComponents: number;
  readonly maxGeometryShaderInvocations: number;
  readonly maxGeometryInputComponents: number;
  readonly maxGeometryOutputComponents: number;
  readonly maxGeometryOutputVertices: number;
  readonly maxGeometryTotalOutputComponents: number;
  readonly maxFragmentInputComponents: number;
  readonly maxFragmentOutputAttachments: number;
  readonly maxFragmentDualSrcAttachments: number;
  readonly maxFragmentCombinedOutputResources: number;
  readonly maxComputeSharedMemorySize: number;
  readonly maxComputeWorkGroupCount: number[] | null;
  readonly maxComputeWorkGroupInvocations: number;
  readonly maxComputeWorkGroupSize: number[] | null;
  readonly subPixelPrecisionBits: number;
  readonly subTexelPrecisionBits: number;
  readonly mipmapPrecisionBits: number;
  readonly maxDrawIndexedIndexValue: number;
  readonly maxDrawIndirectCount: number;
  readonly maxSamplerLodBias: number;
  readonly maxSamplerAnisotropy: number;
  readonly maxViewports: number;
  readonly maxViewportDimensions: number[] | null;
  readonly viewportBoundsRange: number[] | null;
  readonly viewportSubPixelBits: number;
  readonly minMemoryMapAlignment: number;
  readonly minTexelBufferOffsetAlignment: number;
  readonly minUniformBufferOffsetAlignment: number;
  readonly minStorageBufferOffsetAlignment: number;
  readonly minTexelOffset: number;
  readonly maxTexelOffset: number;
  readonly minTexelGatherOffset: number;
  readonly maxTexelGatherOffset: number;
  readonly minInterpolationOffset: number;
  readonly maxInterpolationOffset: number;
  readonly subPixelInterpolationOffsetBits: number;
  readonly maxFramebufferWidth: number;
  readonly maxFramebufferHeight: number;
  readonly maxFramebufferLayers: number;
  readonly framebufferColorSampleCounts: number;
  readonly framebufferDepthSampleCounts: number;
  readonly framebufferStencilSampleCounts: number;
  readonly framebufferNoAttachmentsSampleCounts: number;
  readonly maxColorAttachments: number;
  readonly sampledImageColorSampleCounts: number;
  readonly sampledImageIntegerSampleCounts: number;
  readonly sampledImageDepthSampleCounts: number;
  readonly sampledImageStencilSampleCounts: number;
  readonly storageImageSampleCounts: number;
  readonly maxSampleMaskWords: number;
  readonly timestampComputeAndGraphics: number;
  readonly timestampPeriod: number;
  readonly maxClipDistances: number;
  readonly maxCullDistances: number;
  readonly maxCombinedClipAndCullDistances: number;
  readonly discreteQueuePriorities: number;
  readonly pointSizeRange: number[] | null;
  readonly lineWidthRange: number[] | null;
  readonly pointSizeGranularity: number;
  readonly lineWidthGranularity: number;
  readonly strictLines: number;
  readonly standardSampleLocations: number;
  readonly optimalBufferCopyOffsetAlignment: number;
  readonly optimalBufferCopyRowPitchAlignment: number;
  readonly nonCoherentAtomSize: number;
}

/** ## VkPhysicalDeviceProperties ## */
interface VkPhysicalDevicePropertiesInitializer {
  readonly apiVersion?: number;
  readonly driverVersion?: number;
  readonly vendorID?: number;
  readonly deviceID?: number;
  readonly deviceType?: number;
  readonly deviceName?: string | null;
  readonly pipelineCacheUUID?: number[] | null;
  readonly limits?: VkPhysicalDeviceLimits | null;
  readonly sparseProperties?: VkPhysicalDeviceSparseProperties | null;
}

declare var VkPhysicalDeviceProperties: {
  prototype: VkPhysicalDeviceProperties;
  new(param?: VkPhysicalDevicePropertiesInitializer | null): VkPhysicalDeviceProperties;
  readonly apiVersion: number;
  readonly driverVersion: number;
  readonly vendorID: number;
  readonly deviceID: number;
  readonly deviceType: number;
  readonly deviceName: string | null;
  readonly pipelineCacheUUID: number[] | null;
  readonly limits: VkPhysicalDeviceLimits | null;
  readonly sparseProperties: VkPhysicalDeviceSparseProperties | null;
}

export interface VkPhysicalDeviceProperties {
  readonly apiVersion: number;
  readonly driverVersion: number;
  readonly vendorID: number;
  readonly deviceID: number;
  readonly deviceType: number;
  readonly deviceName: string | null;
  readonly pipelineCacheUUID: number[] | null;
  readonly limits: VkPhysicalDeviceLimits | null;
  readonly sparseProperties: VkPhysicalDeviceSparseProperties | null;
}

/** ## VkClearRect ## */
interface VkClearRectInitializer {
  rect?: VkRect2D | null;
  baseArrayLayer?: number;
  layerCount?: number;
}

declare var VkClearRect: {
  prototype: VkClearRect;
  new(param?: VkClearRectInitializer | null): VkClearRect;
  rect: VkRect2D | null;
  baseArrayLayer: number;
  layerCount: number;
}

export interface VkClearRect {
  rect: VkRect2D | null;
  baseArrayLayer: number;
  layerCount: number;
}


