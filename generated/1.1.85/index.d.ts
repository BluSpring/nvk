/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY node-vulkan v0.0.8
 */
// temporary esnext.bigint fix
type BigInt = number
declare const BigInt: typeof Number

type BigUint64Array = Float32Array
declare const BigUint64Array: typeof Float32Array

declare var VkInout: { $: number; }
export interface VkInout { $: number; }

declare var VkInoutAddress: { $: BigInt; }
export interface VkInoutAddress { $: BigInt; }

/** #### ENUMS #### **/

/** ## API_Extensions_Strings ## */
export enum API_Extensions_Strings {
  VK_KHR_SURFACE_EXTENSION_NAME,
  VK_KHR_SWAPCHAIN_EXTENSION_NAME,
  VK_KHR_DISPLAY_EXTENSION_NAME,
  VK_KHR_DISPLAY_SWAPCHAIN_EXTENSION_NAME,
  VK_KHR_XLIB_SURFACE_EXTENSION_NAME,
  VK_KHR_XCB_SURFACE_EXTENSION_NAME,
  VK_KHR_WAYLAND_SURFACE_EXTENSION_NAME,
  VK_KHR_MIR_SURFACE_EXTENSION_NAME,
  VK_KHR_ANDROID_SURFACE_EXTENSION_NAME,
  VK_KHR_WIN32_SURFACE_EXTENSION_NAME,
  VK_ANDROID_NATIVE_BUFFER_NAME,
  VK_EXT_DEBUG_REPORT_EXTENSION_NAME,
  VK_NV_GLSL_SHADER_EXTENSION_NAME,
  VK_EXT_DEPTH_RANGE_UNRESTRICTED_EXTENSION_NAME,
  VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_EXTENSION_NAME,
  VK_IMG_FILTER_CUBIC_EXTENSION_NAME,
  VK_AMD_EXTENSION_17_EXTENSION_NAME,
  VK_AMD_EXTENSION_18_EXTENSION_NAME,
  VK_AMD_RASTERIZATION_ORDER_EXTENSION_NAME,
  VK_AMD_EXTENSION_20_EXTENSION_NAME,
  VK_AMD_SHADER_TRINARY_MINMAX_EXTENSION_NAME,
  VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_EXTENSION_NAME,
  VK_EXT_DEBUG_MARKER_EXTENSION_NAME,
  VK_AMD_EXTENSION_24_EXTENSION_NAME,
  VK_AMD_EXTENSION_25_EXTENSION_NAME,
  VK_AMD_GCN_SHADER_EXTENSION_NAME,
  VK_NV_DEDICATED_ALLOCATION_EXTENSION_NAME,
  VK_EXT_EXTENSION_28_EXTENSION_NAME,
  VK_NVX_EXTENSION_29_EXTENSION_NAME,
  VK_NVX_EXTENSION_30_EXTENSION_NAME,
  VK_NVX_EXTENSION_31_EXTENSION_NAME,
  VK_AMD_EXTENSION_32_EXTENSION_NAME,
  VK_AMD_EXTENSION_33_EXTENSION_NAME,
  VK_AMD_DRAW_INDIRECT_COUNT_EXTENSION_NAME,
  VK_AMD_EXTENSION_35_EXTENSION_NAME,
  VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_EXTENSION_NAME,
  VK_AMD_GPU_SHADER_HALF_FLOAT_EXTENSION_NAME,
  VK_AMD_SHADER_BALLOT_EXTENSION_NAME,
  VK_AMD_EXTENSION_39_EXTENSION_NAME,
  VK_AMD_EXTENSION_40_EXTENSION_NAME,
  VK_AMD_EXTENSION_41_EXTENSION_NAME,
  VK_AMD_TEXTURE_GATHER_BIAS_LOD_EXTENSION_NAME,
  VK_AMD_SHADER_INFO_EXTENSION_NAME,
  VK_AMD_EXTENSION_44_EXTENSION_NAME,
  VK_AMD_EXTENSION_45_EXTENSION_NAME,
  VK_AMD_EXTENSION_46_EXTENSION_NAME,
  VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_EXTENSION_NAME,
  VK_NVX_EXTENSION_48_EXTENSION_NAME,
  VK_GOOGLE_EXTENSION_49_EXTENSION_NAME,
  VK_GOOGLE_EXTENSION_50_EXTENSION_NAME,
  VK_NV_CORNER_SAMPLED_IMAGE_EXTENSION_NAME,
  VK_NVX_EXTENSION_52_EXTENSION_NAME,
  VK_NV_EXTENSION_53_EXTENSION_NAME,
  VK_KHR_MULTIVIEW_EXTENSION_NAME,
  VK_IMG_FORMAT_PVRTC_EXTENSION_NAME,
  VK_NV_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME,
  VK_NV_EXTERNAL_MEMORY_EXTENSION_NAME,
  VK_NV_EXTERNAL_MEMORY_WIN32_EXTENSION_NAME,
  VK_NV_WIN32_KEYED_MUTEX_EXTENSION_NAME,
  VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME,
  VK_KHR_DEVICE_GROUP_EXTENSION_NAME,
  VK_EXT_VALIDATION_FLAGS_EXTENSION_NAME,
  VK_NN_VI_SURFACE_EXTENSION_NAME,
  VK_KHR_SHADER_DRAW_PARAMETERS_EXTENSION_NAME,
  VK_EXT_SHADER_SUBGROUP_BALLOT_EXTENSION_NAME,
  VK_EXT_SHADER_SUBGROUP_VOTE_EXTENSION_NAME,
  VK_ARM_EXTENSION_01_EXTENSION_NAME,
  VK_EXT_ASTC_DECODE_MODE_EXTENSION_NAME,
  VK_IMG_EXTENSION_69_EXTENSION_NAME,
  VK_KHR_MAINTENANCE1_EXTENSION_NAME,
  VK_KHR_DEVICE_GROUP_CREATION_EXTENSION_NAME,
  VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME,
  VK_KHR_EXTERNAL_MEMORY_EXTENSION_NAME,
  VK_KHR_EXTERNAL_MEMORY_WIN32_EXTENSION_NAME,
  VK_KHR_EXTERNAL_MEMORY_FD_EXTENSION_NAME,
  VK_KHR_WIN32_KEYED_MUTEX_EXTENSION_NAME,
  VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_EXTENSION_NAME,
  VK_KHR_EXTERNAL_SEMAPHORE_EXTENSION_NAME,
  VK_KHR_EXTERNAL_SEMAPHORE_WIN32_EXTENSION_NAME,
  VK_KHR_EXTERNAL_SEMAPHORE_FD_EXTENSION_NAME,
  VK_KHR_PUSH_DESCRIPTOR_EXTENSION_NAME,
  VK_EXT_CONDITIONAL_RENDERING_EXTENSION_NAME,
  VK_KHR_EXTENSION_83_EXTENSION_NAME,
  VK_KHR_16BIT_STORAGE_EXTENSION_NAME,
  VK_KHR_INCREMENTAL_PRESENT_EXTENSION_NAME,
  VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_EXTENSION_NAME,
  VK_NVX_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME,
  VK_NV_CLIP_SPACE_W_SCALING_EXTENSION_NAME,
  VK_EXT_DIRECT_MODE_DISPLAY_EXTENSION_NAME,
  VK_EXT_ACQUIRE_XLIB_DISPLAY_EXTENSION_NAME,
  VK_EXT_DISPLAY_SURFACE_COUNTER_EXTENSION_NAME,
  VK_EXT_DISPLAY_CONTROL_EXTENSION_NAME,
  VK_GOOGLE_DISPLAY_TIMING_EXTENSION_NAME,
  VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_EXTENSION_NAME,
  VK_NV_GEOMETRY_SHADER_PASSTHROUGH_EXTENSION_NAME,
  VK_NV_VIEWPORT_ARRAY2_EXTENSION_NAME,
  VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_EXTENSION_NAME,
  VK_NV_VIEWPORT_SWIZZLE_EXTENSION_NAME,
  VK_EXT_DISCARD_RECTANGLES_EXTENSION_NAME,
  VK_NV_EXTENSION_101_EXTENSION_NAME,
  VK_EXT_CONSERVATIVE_RASTERIZATION_EXTENSION_NAME,
  VK_NV_EXTENSION_103_EXTENSION_NAME,
  VK_NV_EXTENSION_104_EXTENSION_NAME,
  VK_EXT_SWAPCHAIN_COLOR_SPACE_EXTENSION_NAME,
  VK_EXT_HDR_METADATA_EXTENSION_NAME,
  VK_IMG_EXTENSION_107_EXTENSION_NAME,
  VK_IMG_EXTENSION_108_EXTENSION_NAME,
  VK_IMG_EXTENSION_109_EXTENSION_NAME,
  VK_KHR_CREATE_RENDERPASS_2_EXTENSION_NAME,
  VK_IMG_EXTENSION_111_EXTENSION_NAME,
  VK_KHR_SHARED_PRESENTABLE_IMAGE_EXTENSION_NAME,
  VK_KHR_EXTERNAL_FENCE_CAPABILITIES_EXTENSION_NAME,
  VK_KHR_EXTERNAL_FENCE_EXTENSION_NAME,
  VK_KHR_EXTERNAL_FENCE_WIN32_EXTENSION_NAME,
  VK_KHR_EXTERNAL_FENCE_FD_EXTENSION_NAME,
  VK_KHR_EXTENSION_117_EXTENSION_NAME,
  VK_KHR_MAINTENANCE2_EXTENSION_NAME,
  VK_KHR_EXTENSION_119_EXTENSION_NAME,
  VK_KHR_GET_SURFACE_CAPABILITIES_2_EXTENSION_NAME,
  VK_KHR_VARIABLE_POINTERS_EXTENSION_NAME,
  VK_KHR_GET_DISPLAY_PROPERTIES_2_EXTENSION_NAME,
  VK_MVK_IOS_SURFACE_EXTENSION_NAME,
  VK_MVK_MACOS_SURFACE_EXTENSION_NAME,
  VK_MVK_MOLTENVK_EXTENSION_NAME,
  VK_EXT_EXTERNAL_MEMORY_DMA_BUF_EXTENSION_NAME,
  VK_EXT_QUEUE_FAMILY_FOREIGN_EXTENSION_NAME,
  VK_KHR_DEDICATED_ALLOCATION_EXTENSION_NAME,
  VK_EXT_DEBUG_UTILS_EXTENSION_NAME,
  VK_ANDROID_EXTERNAL_MEMORY_ANDROID_HARDWARE_BUFFER_EXTENSION_NAME,
  VK_EXT_SAMPLER_FILTER_MINMAX_EXTENSION_NAME,
  VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_EXTENSION_NAME,
  VK_AMD_GPU_SHADER_INT16_EXTENSION_NAME,
  VK_AMD_EXTENSION_134_EXTENSION_NAME,
  VK_AMD_EXTENSION_135_EXTENSION_NAME,
  VK_AMD_EXTENSION_136_EXTENSION_NAME,
  VK_AMD_MIXED_ATTACHMENT_SAMPLES_EXTENSION_NAME,
  VK_AMD_SHADER_FRAGMENT_MASK_EXTENSION_NAME,
  VK_EXT_INLINE_UNIFORM_BLOCK_EXTENSION_NAME,
  VK_AMD_EXTENSION_140_EXTENSION_NAME,
  VK_EXT_SHADER_STENCIL_EXPORT_EXTENSION_NAME,
  VK_AMD_EXTENSION_142_EXTENSION_NAME,
  VK_AMD_EXTENSION_143_EXTENSION_NAME,
  VK_EXT_SAMPLE_LOCATIONS_EXTENSION_NAME,
  VK_KHR_RELAXED_BLOCK_LAYOUT_EXTENSION_NAME,
  VK_KHR_GET_MEMORY_REQUIREMENTS_2_EXTENSION_NAME,
  VK_KHR_IMAGE_FORMAT_LIST_EXTENSION_NAME,
  VK_EXT_BLEND_OPERATION_ADVANCED_EXTENSION_NAME,
  VK_NV_FRAGMENT_COVERAGE_TO_COLOR_EXTENSION_NAME,
  VK_NV_EXTENSION_151_EXTENSION_NAME,
  VK_NV_EXTENSION_152_EXTENSION_NAME,
  VK_NV_FRAMEBUFFER_MIXED_SAMPLES_EXTENSION_NAME,
  VK_NV_FILL_RECTANGLE_EXTENSION_NAME,
  VK_NV_EXTENSION_155_EXTENSION_NAME,
  VK_EXT_POST_DEPTH_COVERAGE_EXTENSION_NAME,
  VK_KHR_SAMPLER_YCBCR_CONVERSION_EXTENSION_NAME,
  VK_KHR_BIND_MEMORY_2_EXTENSION_NAME,
  VK_EXT_EXTENSION_159_EXTENSION_NAME,
  VK_EXT_EXTENSION_160_EXTENSION_NAME,
  VK_EXT_VALIDATION_CACHE_EXTENSION_NAME,
  VK_EXT_DESCRIPTOR_INDEXING_EXTENSION_NAME,
  VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_EXTENSION_NAME,
  VK_EXT_EXTENSION_164_EXTENSION_NAME,
  VK_NV_SHADING_RATE_IMAGE_EXTENSION_NAME,
  VK_NVX_RAYTRACING_EXTENSION_NAME,
  VK_NV_REPRESENTATIVE_FRAGMENT_TEST_EXTENSION_NAME,
  VK_EXT_EXTENSION_168_EXTENSION_NAME,
  VK_KHR_MAINTENANCE3_EXTENSION_NAME,
  VK_KHR_DRAW_INDIRECT_COUNT_EXTENSION_NAME,
  VK_QCOM_extension_171_EXTENSION_NAME,
  VK_QCOM_extension_172_EXTENSION_NAME,
  VK_QCOM_extension_173_EXTENSION_NAME,
  VK_QCOM_extension_174_EXTENSION_NAME,
  VK_EXT_GLOBAL_PRIORITY_EXTENSION_NAME,
  VK_KHR_EXTENSION_176_EXTENSION_NAME,
  VK_KHR_EXTENSION_177_EXTENSION_NAME,
  VK_KHR_8BIT_STORAGE_EXTENSION_NAME,
  VK_EXT_EXTERNAL_MEMORY_HOST_EXTENSION_NAME,
  VK_AMD_BUFFER_MARKER_EXTENSION_NAME,
  VK_KHR_EXTENSION_181_EXTENSION_NAME,
  VK_KHR_EXTENSION_182_EXTENSION_NAME,
  VK_KHR_EXTENSION_183_EXTENSION_NAME,
  VK_KHR_EXTENSION_184_EXTENSION_NAME,
  VK_KHR_EXTENSION_185_EXTENSION_NAME,
  VK_AMD_SHADER_CORE_PROPERTIES_EXTENSION_NAME,
  VK_KHR_EXTENSION_187_EXTENSION_NAME,
  VK_KHR_EXTENSION_188_EXTENSION_NAME,
  VK_KHR_EXTENSION_189_EXTENSION_NAME,
  VK_KHR_EXTENSION_190_EXTENSION_NAME,
  VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME,
  VK_GOOGLE_EXTENSION_192_EXTENSION_NAME,
  VK_GOOGLE_EXTENSION_193_EXTENSION_NAME,
  VK_GOOGLE_EXTENSION_194_EXTENSION_NAME,
  VK_GOOGLE_EXTENSION_195_EXTENSION_NAME,
  VK_GOOGLE_EXTENSION_196_EXTENSION_NAME,
  VK_EXT_EXTENSION_197_EXTENSION_NAME,
  VK_ARM_EXTENSION_198_EXTENSION_NAME,
  VK_NV_SHADER_SUBGROUP_PARTITIONED_EXTENSION_NAME,
  VK_KHR_EXTENSION_200_EXTENSION_NAME,
  VK_KHR_EXTENSION_201_EXTENSION_NAME,
  VK_NV_COMPUTE_SHADER_DERIVATIVES_EXTENSION_NAME,
  VK_NV_MESH_SHADER_EXTENSION_NAME,
  VK_NV_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME,
  VK_NV_SHADER_IMAGE_FOOTPRINT_EXTENSION_NAME,
  VK_NV_SCISSOR_EXCLUSIVE_EXTENSION_NAME,
  VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_EXTENSION_NAME,
  VK_KHR_EXTENSION_208_EXTENSION_NAME,
  VK_KHR_EXTENSION_209_EXTENSION_NAME,
  VK_KHR_EXTENSION_210_EXTENSION_NAME,
  VK_KHR_EXTENSION_211_EXTENSION_NAME,
  VK_KHR_VULKAN_MEMORY_MODEL_EXTENSION_NAME,
  VK_KHR_EXTENSION_213_EXTENSION_NAME,
  VK_KHR_EXTENSION_214_EXTENSION_NAME,
  VK_KHR_EXTENSION_215_EXTENSION_NAME,
  VK_KHR_EXTENSION_216_EXTENSION_NAME,
  VK_KHR_EXTENSION_217_EXTENSION_NAME,
  VK_EXT_MACOS_IOS_WINDOW_EXTENSION_NAME,
  VK_EXT_EXTENSION_219_EXTENSION_NAME,
  VK_EXT_EXTENSION_220_EXTENSION_NAME,
  
}

/** ## API_Extensions ## */
export enum API_Extensions {
  VK_KHR_SURFACE_SPEC_VERSION,
  VK_KHR_SWAPCHAIN_SPEC_VERSION,
  VK_KHR_DISPLAY_SPEC_VERSION,
  VK_KHR_DISPLAY_SWAPCHAIN_SPEC_VERSION,
  VK_KHR_XLIB_SURFACE_SPEC_VERSION,
  VK_KHR_XCB_SURFACE_SPEC_VERSION,
  VK_KHR_WAYLAND_SURFACE_SPEC_VERSION,
  VK_KHR_MIR_SURFACE_SPEC_VERSION,
  VK_KHR_ANDROID_SURFACE_SPEC_VERSION,
  VK_KHR_WIN32_SURFACE_SPEC_VERSION,
  VK_ANDROID_NATIVE_BUFFER_SPEC_VERSION,
  VK_ANDROID_NATIVE_BUFFER_NUMBER,
  VK_EXT_DEBUG_REPORT_SPEC_VERSION,
  VK_NV_GLSL_SHADER_SPEC_VERSION,
  VK_EXT_DEPTH_RANGE_UNRESTRICTED_SPEC_VERSION,
  VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_SPEC_VERSION,
  VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE,
  VK_IMG_FILTER_CUBIC_SPEC_VERSION,
  VK_AMD_EXTENSION_17_SPEC_VERSION,
  VK_AMD_EXTENSION_18_SPEC_VERSION,
  VK_AMD_RASTERIZATION_ORDER_SPEC_VERSION,
  VK_AMD_EXTENSION_20_SPEC_VERSION,
  VK_AMD_SHADER_TRINARY_MINMAX_SPEC_VERSION,
  VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_SPEC_VERSION,
  VK_EXT_DEBUG_MARKER_SPEC_VERSION,
  VK_AMD_EXTENSION_24_SPEC_VERSION,
  VK_AMD_EXTENSION_25_SPEC_VERSION,
  VK_AMD_GCN_SHADER_SPEC_VERSION,
  VK_NV_DEDICATED_ALLOCATION_SPEC_VERSION,
  VK_EXT_EXTENSION_28_SPEC_VERSION,
  VK_NVX_EXTENSION_29_SPEC_VERSION,
  VK_NVX_EXTENSION_30_SPEC_VERSION,
  VK_NVX_EXTENSION_31_SPEC_VERSION,
  VK_AMD_EXTENSION_32_SPEC_VERSION,
  VK_AMD_EXTENSION_33_SPEC_VERSION,
  VK_AMD_DRAW_INDIRECT_COUNT_SPEC_VERSION,
  VK_AMD_EXTENSION_35_SPEC_VERSION,
  VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_SPEC_VERSION,
  VK_AMD_GPU_SHADER_HALF_FLOAT_SPEC_VERSION,
  VK_AMD_SHADER_BALLOT_SPEC_VERSION,
  VK_AMD_EXTENSION_39_SPEC_VERSION,
  VK_AMD_EXTENSION_40_SPEC_VERSION,
  VK_AMD_EXTENSION_41_SPEC_VERSION,
  VK_AMD_TEXTURE_GATHER_BIAS_LOD_SPEC_VERSION,
  VK_AMD_SHADER_INFO_SPEC_VERSION,
  VK_AMD_EXTENSION_44_SPEC_VERSION,
  VK_AMD_EXTENSION_45_SPEC_VERSION,
  VK_AMD_EXTENSION_46_SPEC_VERSION,
  VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_SPEC_VERSION,
  VK_NVX_EXTENSION_48_SPEC_VERSION,
  VK_GOOGLE_EXTENSION_49_SPEC_VERSION,
  VK_GOOGLE_EXTENSION_50_SPEC_VERSION,
  VK_NV_CORNER_SAMPLED_IMAGE_SPEC_VERSION,
  VK_NVX_EXTENSION_52_SPEC_VERSION,
  VK_NV_EXTENSION_53_SPEC_VERSION,
  VK_KHR_MULTIVIEW_SPEC_VERSION,
  VK_IMG_FORMAT_PVRTC_SPEC_VERSION,
  VK_NV_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION,
  VK_NV_EXTERNAL_MEMORY_SPEC_VERSION,
  VK_NV_EXTERNAL_MEMORY_WIN32_SPEC_VERSION,
  VK_NV_WIN32_KEYED_MUTEX_SPEC_VERSION,
  VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_SPEC_VERSION,
  VK_KHR_DEVICE_GROUP_SPEC_VERSION,
  VK_EXT_VALIDATION_FLAGS_SPEC_VERSION,
  VK_NN_VI_SURFACE_SPEC_VERSION,
  VK_KHR_SHADER_DRAW_PARAMETERS_SPEC_VERSION,
  VK_EXT_SHADER_SUBGROUP_BALLOT_SPEC_VERSION,
  VK_EXT_SHADER_SUBGROUP_VOTE_SPEC_VERSION,
  VK_ARM_EXTENSION_01_SPEC_VERSION,
  VK_EXT_ASTC_DECODE_MODE_SPEC_VERSION,
  VK_IMG_EXTENSION_69_SPEC_VERSION,
  VK_KHR_MAINTENANCE1_SPEC_VERSION,
  VK_KHR_DEVICE_GROUP_CREATION_SPEC_VERSION,
  VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION,
  VK_KHR_EXTERNAL_MEMORY_SPEC_VERSION,
  VK_KHR_EXTERNAL_MEMORY_WIN32_SPEC_VERSION,
  VK_KHR_EXTERNAL_MEMORY_FD_SPEC_VERSION,
  VK_KHR_WIN32_KEYED_MUTEX_SPEC_VERSION,
  VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_SPEC_VERSION,
  VK_KHR_EXTERNAL_SEMAPHORE_SPEC_VERSION,
  VK_KHR_EXTERNAL_SEMAPHORE_WIN32_SPEC_VERSION,
  VK_KHR_EXTERNAL_SEMAPHORE_FD_SPEC_VERSION,
  VK_KHR_PUSH_DESCRIPTOR_SPEC_VERSION,
  VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR,
  VK_EXT_CONDITIONAL_RENDERING_SPEC_VERSION,
  VK_KHR_EXTENSION_83_SPEC_VERSION,
  VK_KHR_16BIT_STORAGE_SPEC_VERSION,
  VK_KHR_INCREMENTAL_PRESENT_SPEC_VERSION,
  VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_SPEC_VERSION,
  VK_NVX_DEVICE_GENERATED_COMMANDS_SPEC_VERSION,
  VK_NV_CLIP_SPACE_W_SCALING_SPEC_VERSION,
  VK_EXT_DIRECT_MODE_DISPLAY_SPEC_VERSION,
  VK_EXT_ACQUIRE_XLIB_DISPLAY_SPEC_VERSION,
  VK_EXT_DISPLAY_SURFACE_COUNTER_SPEC_VERSION,
  VK_EXT_DISPLAY_CONTROL_SPEC_VERSION,
  VK_GOOGLE_DISPLAY_TIMING_SPEC_VERSION,
  VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_SPEC_VERSION,
  VK_NV_GEOMETRY_SHADER_PASSTHROUGH_SPEC_VERSION,
  VK_NV_VIEWPORT_ARRAY2_SPEC_VERSION,
  VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_SPEC_VERSION,
  VK_NV_VIEWPORT_SWIZZLE_SPEC_VERSION,
  VK_EXT_DISCARD_RECTANGLES_SPEC_VERSION,
  VK_NV_EXTENSION_101_SPEC_VERSION,
  VK_EXT_CONSERVATIVE_RASTERIZATION_SPEC_VERSION,
  VK_NV_EXTENSION_103_SPEC_VERSION,
  VK_NV_EXTENSION_104_SPEC_VERSION,
  VK_EXT_SWAPCHAIN_COLOR_SPACE_SPEC_VERSION,
  VK_EXT_HDR_METADATA_SPEC_VERSION,
  VK_IMG_EXTENSION_107_SPEC_VERSION,
  VK_IMG_EXTENSION_108_SPEC_VERSION,
  VK_IMG_EXTENSION_109_SPEC_VERSION,
  VK_KHR_CREATE_RENDERPASS_2_SPEC_VERSION,
  VK_IMG_EXTENSION_111_SPEC_VERSION,
  VK_KHR_SHARED_PRESENTABLE_IMAGE_SPEC_VERSION,
  VK_KHR_EXTERNAL_FENCE_CAPABILITIES_SPEC_VERSION,
  VK_KHR_EXTERNAL_FENCE_SPEC_VERSION,
  VK_KHR_EXTERNAL_FENCE_WIN32_SPEC_VERSION,
  VK_KHR_EXTERNAL_FENCE_FD_SPEC_VERSION,
  VK_KHR_EXTENSION_117_SPEC_VERSION,
  VK_KHR_MAINTENANCE2_SPEC_VERSION,
  VK_KHR_EXTENSION_119_SPEC_VERSION,
  VK_KHR_GET_SURFACE_CAPABILITIES_2_SPEC_VERSION,
  VK_KHR_VARIABLE_POINTERS_SPEC_VERSION,
  VK_KHR_GET_DISPLAY_PROPERTIES_2_SPEC_VERSION,
  VK_MVK_IOS_SURFACE_SPEC_VERSION,
  VK_MVK_MACOS_SURFACE_SPEC_VERSION,
  VK_MVK_MOLTENVK_SPEC_VERSION,
  VK_EXT_EXTERNAL_MEMORY_DMA_BUF_SPEC_VERSION,
  VK_EXT_QUEUE_FAMILY_FOREIGN_SPEC_VERSION,
  VK_KHR_DEDICATED_ALLOCATION_SPEC_VERSION,
  VK_EXT_DEBUG_UTILS_SPEC_VERSION,
  VK_ANDROID_EXTERNAL_MEMORY_ANDROID_HARDWARE_BUFFER_SPEC_VERSION,
  VK_EXT_SAMPLER_FILTER_MINMAX_SPEC_VERSION,
  VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_SPEC_VERSION,
  VK_AMD_GPU_SHADER_INT16_SPEC_VERSION,
  VK_AMD_EXTENSION_134_SPEC_VERSION,
  VK_AMD_EXTENSION_135_SPEC_VERSION,
  VK_AMD_EXTENSION_136_SPEC_VERSION,
  VK_AMD_MIXED_ATTACHMENT_SAMPLES_SPEC_VERSION,
  VK_AMD_SHADER_FRAGMENT_MASK_SPEC_VERSION,
  VK_EXT_INLINE_UNIFORM_BLOCK_SPEC_VERSION,
  VK_AMD_EXTENSION_140_SPEC_VERSION,
  VK_EXT_SHADER_STENCIL_EXPORT_SPEC_VERSION,
  VK_AMD_EXTENSION_142_SPEC_VERSION,
  VK_AMD_EXTENSION_143_SPEC_VERSION,
  VK_EXT_SAMPLE_LOCATIONS_SPEC_VERSION,
  VK_KHR_RELAXED_BLOCK_LAYOUT_SPEC_VERSION,
  VK_KHR_GET_MEMORY_REQUIREMENTS_2_SPEC_VERSION,
  VK_KHR_IMAGE_FORMAT_LIST_SPEC_VERSION,
  VK_EXT_BLEND_OPERATION_ADVANCED_SPEC_VERSION,
  VK_NV_FRAGMENT_COVERAGE_TO_COLOR_SPEC_VERSION,
  VK_NV_EXTENSION_151_SPEC_VERSION,
  VK_NV_EXTENSION_152_SPEC_VERSION,
  VK_NV_FRAMEBUFFER_MIXED_SAMPLES_SPEC_VERSION,
  VK_NV_FILL_RECTANGLE_SPEC_VERSION,
  VK_NV_EXTENSION_155_SPEC_VERSION,
  VK_EXT_POST_DEPTH_COVERAGE_SPEC_VERSION,
  VK_KHR_SAMPLER_YCBCR_CONVERSION_SPEC_VERSION,
  VK_KHR_BIND_MEMORY_2_SPEC_VERSION,
  VK_EXT_EXTENSION_159_SPEC_VERSION,
  VK_EXT_EXTENSION_160_SPEC_VERSION,
  VK_EXT_VALIDATION_CACHE_SPEC_VERSION,
  VK_EXT_DESCRIPTOR_INDEXING_SPEC_VERSION,
  VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_SPEC_VERSION,
  VK_EXT_EXTENSION_164_SPEC_VERSION,
  VK_NV_SHADING_RATE_IMAGE_SPEC_VERSION,
  VK_NVX_RAYTRACING_SPEC_VERSION,
  VK_NV_REPRESENTATIVE_FRAGMENT_TEST_SPEC_VERSION,
  VK_EXT_EXTENSION_168_SPEC_VERSION,
  VK_KHR_MAINTENANCE3_SPEC_VERSION,
  VK_KHR_DRAW_INDIRECT_COUNT_SPEC_VERSION,
  VK_QCOM_extension_171_SPEC_VERSION,
  VK_QCOM_extension_172_SPEC_VERSION,
  VK_QCOM_extension_173_SPEC_VERSION,
  VK_QCOM_extension_174_SPEC_VERSION,
  VK_EXT_GLOBAL_PRIORITY_SPEC_VERSION,
  VK_KHR_EXTENSION_176_SPEC_VERSION,
  VK_KHR_EXTENSION_177_SPEC_VERSION,
  VK_KHR_8BIT_STORAGE_SPEC_VERSION,
  VK_EXT_EXTERNAL_MEMORY_HOST_SPEC_VERSION,
  VK_AMD_BUFFER_MARKER_SPEC_VERSION,
  VK_KHR_EXTENSION_181_SPEC_VERSION,
  VK_KHR_EXTENSION_182_SPEC_VERSION,
  VK_KHR_EXTENSION_183_SPEC_VERSION,
  VK_KHR_EXTENSION_184_SPEC_VERSION,
  VK_KHR_EXTENSION_185_SPEC_VERSION,
  VK_AMD_SHADER_CORE_PROPERTIES_SPEC_VERSION,
  VK_KHR_EXTENSION_187_SPEC_VERSION,
  VK_KHR_EXTENSION_188_SPEC_VERSION,
  VK_KHR_EXTENSION_189_SPEC_VERSION,
  VK_KHR_EXTENSION_190_SPEC_VERSION,
  VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_SPEC_VERSION,
  VK_GOOGLE_EXTENSION_192_SPEC_VERSION,
  VK_GOOGLE_EXTENSION_193_SPEC_VERSION,
  VK_GOOGLE_EXTENSION_194_SPEC_VERSION,
  VK_GOOGLE_EXTENSION_195_SPEC_VERSION,
  VK_GOOGLE_EXTENSION_196_SPEC_VERSION,
  VK_EXT_EXTENSION_197_SPEC_VERSION,
  VK_ARM_EXTENSION_198_SPEC_VERSION,
  VK_NV_SHADER_SUBGROUP_PARTITIONED_SPEC_VERSION,
  VK_KHR_EXTENSION_200_SPEC_VERSION,
  VK_KHR_EXTENSION_201_SPEC_VERSION,
  VK_NV_COMPUTE_SHADER_DERIVATIVES_SPEC_VERSION,
  VK_NV_MESH_SHADER_SPEC_VERSION,
  VK_NV_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION,
  VK_NV_SHADER_IMAGE_FOOTPRINT_SPEC_VERSION,
  VK_NV_SCISSOR_EXCLUSIVE_SPEC_VERSION,
  VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_SPEC_VERSION,
  VK_KHR_EXTENSION_208_SPEC_VERSION,
  VK_KHR_EXTENSION_209_SPEC_VERSION,
  VK_KHR_EXTENSION_210_SPEC_VERSION,
  VK_KHR_EXTENSION_211_SPEC_VERSION,
  VK_KHR_VULKAN_MEMORY_MODEL_SPEC_VERSION,
  VK_KHR_EXTENSION_213_SPEC_VERSION,
  VK_KHR_EXTENSION_214_SPEC_VERSION,
  VK_KHR_EXTENSION_215_SPEC_VERSION,
  VK_KHR_EXTENSION_216_SPEC_VERSION,
  VK_KHR_EXTENSION_217_SPEC_VERSION,
  VK_EXT_MACOS_IOS_WINDOW_SPEC_VERSION,
  VK_EXT_EXTENSION_219_SPEC_VERSION,
  VK_EXT_EXTENSION_220_SPEC_VERSION,
  
}

/** ## API_Constants ## */
export enum API_Constants {
  VK_MAX_PHYSICAL_DEVICE_NAME_SIZE,
  VK_UUID_SIZE,
  VK_LUID_SIZE,
  VK_LUID_SIZE_KHR,
  VK_MAX_EXTENSION_NAME_SIZE,
  VK_MAX_DESCRIPTION_SIZE,
  VK_MAX_MEMORY_TYPES,
  VK_MAX_MEMORY_HEAPS,
  VK_LOD_CLAMP_NONE,
  VK_REMAINING_MIP_LEVELS,
  VK_REMAINING_ARRAY_LAYERS,
  VK_WHOLE_SIZE,
  VK_ATTACHMENT_UNUSED,
  VK_TRUE,
  VK_FALSE,
  VK_QUEUE_FAMILY_IGNORED,
  VK_QUEUE_FAMILY_EXTERNAL,
  VK_QUEUE_FAMILY_EXTERNAL_KHR,
  VK_QUEUE_FAMILY_FOREIGN_EXT,
  VK_SUBPASS_EXTERNAL,
  VK_MAX_DEVICE_GROUP_SIZE,
  VK_MAX_DEVICE_GROUP_SIZE_KHR,
  VK_NULL_HANDLE,
  
}

/** ## VkImageLayout ## */
export enum VkImageLayout {
  VK_IMAGE_LAYOUT_UNDEFINED,
  VK_IMAGE_LAYOUT_GENERAL,
  VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL,
  VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL,
  VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL,
  VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL,
  VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL,
  VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL,
  VK_IMAGE_LAYOUT_PREINITIALIZED,
  VK_IMAGE_LAYOUT_PRESENT_SRC_KHR,
  VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR,
  VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR,
  VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR,
  VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV,
  
}

/** ## VkAttachmentLoadOp ## */
export enum VkAttachmentLoadOp {
  VK_ATTACHMENT_LOAD_OP_LOAD,
  VK_ATTACHMENT_LOAD_OP_CLEAR,
  VK_ATTACHMENT_LOAD_OP_DONT_CARE,
  
}

/** ## VkAttachmentStoreOp ## */
export enum VkAttachmentStoreOp {
  VK_ATTACHMENT_STORE_OP_STORE,
  VK_ATTACHMENT_STORE_OP_DONT_CARE,
  
}

/** ## VkImageType ## */
export enum VkImageType {
  VK_IMAGE_TYPE_1D,
  VK_IMAGE_TYPE_2D,
  VK_IMAGE_TYPE_3D,
  
}

/** ## VkImageTiling ## */
export enum VkImageTiling {
  VK_IMAGE_TILING_OPTIMAL,
  VK_IMAGE_TILING_LINEAR,
  
}

/** ## VkImageViewType ## */
export enum VkImageViewType {
  VK_IMAGE_VIEW_TYPE_1D,
  VK_IMAGE_VIEW_TYPE_2D,
  VK_IMAGE_VIEW_TYPE_3D,
  VK_IMAGE_VIEW_TYPE_CUBE,
  VK_IMAGE_VIEW_TYPE_1D_ARRAY,
  VK_IMAGE_VIEW_TYPE_2D_ARRAY,
  VK_IMAGE_VIEW_TYPE_CUBE_ARRAY,
  
}

/** ## VkCommandBufferLevel ## */
export enum VkCommandBufferLevel {
  VK_COMMAND_BUFFER_LEVEL_PRIMARY,
  VK_COMMAND_BUFFER_LEVEL_SECONDARY,
  
}

/** ## VkComponentSwizzle ## */
export enum VkComponentSwizzle {
  VK_COMPONENT_SWIZZLE_IDENTITY,
  VK_COMPONENT_SWIZZLE_ZERO,
  VK_COMPONENT_SWIZZLE_ONE,
  VK_COMPONENT_SWIZZLE_R,
  VK_COMPONENT_SWIZZLE_G,
  VK_COMPONENT_SWIZZLE_B,
  VK_COMPONENT_SWIZZLE_A,
  
}

/** ## VkDescriptorType ## */
export enum VkDescriptorType {
  VK_DESCRIPTOR_TYPE_SAMPLER,
  VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER,
  VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE,
  VK_DESCRIPTOR_TYPE_STORAGE_IMAGE,
  VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER,
  VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER,
  VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER,
  VK_DESCRIPTOR_TYPE_STORAGE_BUFFER,
  VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC,
  VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC,
  VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT,
  VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT,
  VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NVX,
  
}

/** ## VkQueryType ## */
export enum VkQueryType {
  VK_QUERY_TYPE_OCCLUSION,
  VK_QUERY_TYPE_PIPELINE_STATISTICS,
  VK_QUERY_TYPE_TIMESTAMP,
  VK_QUERY_TYPE_COMPACTED_SIZE_NVX,
  
}

/** ## VkBorderColor ## */
export enum VkBorderColor {
  VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK,
  VK_BORDER_COLOR_INT_TRANSPARENT_BLACK,
  VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK,
  VK_BORDER_COLOR_INT_OPAQUE_BLACK,
  VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE,
  VK_BORDER_COLOR_INT_OPAQUE_WHITE,
  
}

/** ## VkPipelineBindPoint ## */
export enum VkPipelineBindPoint {
  VK_PIPELINE_BIND_POINT_GRAPHICS,
  VK_PIPELINE_BIND_POINT_COMPUTE,
  VK_PIPELINE_BIND_POINT_RAYTRACING_NVX,
  
}

/** ## VkPipelineCacheHeaderVersion ## */
export enum VkPipelineCacheHeaderVersion {
  VK_PIPELINE_CACHE_HEADER_VERSION_ONE,
  
}

/** ## VkPrimitiveTopology ## */
export enum VkPrimitiveTopology {
  VK_PRIMITIVE_TOPOLOGY_POINT_LIST,
  VK_PRIMITIVE_TOPOLOGY_LINE_LIST,
  VK_PRIMITIVE_TOPOLOGY_LINE_STRIP,
  VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST,
  VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP,
  VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN,
  VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY,
  VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY,
  VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY,
  VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY,
  VK_PRIMITIVE_TOPOLOGY_PATCH_LIST,
  
}

/** ## VkSharingMode ## */
export enum VkSharingMode {
  VK_SHARING_MODE_EXCLUSIVE,
  VK_SHARING_MODE_CONCURRENT,
  
}

/** ## VkIndexType ## */
export enum VkIndexType {
  VK_INDEX_TYPE_UINT16,
  VK_INDEX_TYPE_UINT32,
  
}

/** ## VkFilter ## */
export enum VkFilter {
  VK_FILTER_NEAREST,
  VK_FILTER_LINEAR,
  VK_FILTER_CUBIC_IMG,
  
}

/** ## VkSamplerMipmapMode ## */
export enum VkSamplerMipmapMode {
  VK_SAMPLER_MIPMAP_MODE_NEAREST,
  VK_SAMPLER_MIPMAP_MODE_LINEAR,
  
}

/** ## VkSamplerAddressMode ## */
export enum VkSamplerAddressMode {
  VK_SAMPLER_ADDRESS_MODE_REPEAT,
  VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT,
  VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE,
  VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER,
  
}

/** ## VkCompareOp ## */
export enum VkCompareOp {
  VK_COMPARE_OP_NEVER,
  VK_COMPARE_OP_LESS,
  VK_COMPARE_OP_EQUAL,
  VK_COMPARE_OP_LESS_OR_EQUAL,
  VK_COMPARE_OP_GREATER,
  VK_COMPARE_OP_NOT_EQUAL,
  VK_COMPARE_OP_GREATER_OR_EQUAL,
  VK_COMPARE_OP_ALWAYS,
  
}

/** ## VkPolygonMode ## */
export enum VkPolygonMode {
  VK_POLYGON_MODE_FILL,
  VK_POLYGON_MODE_LINE,
  VK_POLYGON_MODE_POINT,
  VK_POLYGON_MODE_FILL_RECTANGLE_NV,
  
}

/** ## VkFrontFace ## */
export enum VkFrontFace {
  VK_FRONT_FACE_COUNTER_CLOCKWISE,
  VK_FRONT_FACE_CLOCKWISE,
  
}

/** ## VkBlendFactor ## */
export enum VkBlendFactor {
  VK_BLEND_FACTOR_ZERO,
  VK_BLEND_FACTOR_ONE,
  VK_BLEND_FACTOR_SRC_COLOR,
  VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR,
  VK_BLEND_FACTOR_DST_COLOR,
  VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR,
  VK_BLEND_FACTOR_SRC_ALPHA,
  VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA,
  VK_BLEND_FACTOR_DST_ALPHA,
  VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA,
  VK_BLEND_FACTOR_CONSTANT_COLOR,
  VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR,
  VK_BLEND_FACTOR_CONSTANT_ALPHA,
  VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA,
  VK_BLEND_FACTOR_SRC_ALPHA_SATURATE,
  VK_BLEND_FACTOR_SRC1_COLOR,
  VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR,
  VK_BLEND_FACTOR_SRC1_ALPHA,
  VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA,
  
}

/** ## VkBlendOp ## */
export enum VkBlendOp {
  VK_BLEND_OP_ADD,
  VK_BLEND_OP_SUBTRACT,
  VK_BLEND_OP_REVERSE_SUBTRACT,
  VK_BLEND_OP_MIN,
  VK_BLEND_OP_MAX,
  VK_BLEND_OP_ZERO_EXT,
  VK_BLEND_OP_SRC_EXT,
  VK_BLEND_OP_DST_EXT,
  VK_BLEND_OP_SRC_OVER_EXT,
  VK_BLEND_OP_DST_OVER_EXT,
  VK_BLEND_OP_SRC_IN_EXT,
  VK_BLEND_OP_DST_IN_EXT,
  VK_BLEND_OP_SRC_OUT_EXT,
  VK_BLEND_OP_DST_OUT_EXT,
  VK_BLEND_OP_SRC_ATOP_EXT,
  VK_BLEND_OP_DST_ATOP_EXT,
  VK_BLEND_OP_XOR_EXT,
  VK_BLEND_OP_MULTIPLY_EXT,
  VK_BLEND_OP_SCREEN_EXT,
  VK_BLEND_OP_OVERLAY_EXT,
  VK_BLEND_OP_DARKEN_EXT,
  VK_BLEND_OP_LIGHTEN_EXT,
  VK_BLEND_OP_COLORDODGE_EXT,
  VK_BLEND_OP_COLORBURN_EXT,
  VK_BLEND_OP_HARDLIGHT_EXT,
  VK_BLEND_OP_SOFTLIGHT_EXT,
  VK_BLEND_OP_DIFFERENCE_EXT,
  VK_BLEND_OP_EXCLUSION_EXT,
  VK_BLEND_OP_INVERT_EXT,
  VK_BLEND_OP_INVERT_RGB_EXT,
  VK_BLEND_OP_LINEARDODGE_EXT,
  VK_BLEND_OP_LINEARBURN_EXT,
  VK_BLEND_OP_VIVIDLIGHT_EXT,
  VK_BLEND_OP_LINEARLIGHT_EXT,
  VK_BLEND_OP_PINLIGHT_EXT,
  VK_BLEND_OP_HARDMIX_EXT,
  VK_BLEND_OP_HSL_HUE_EXT,
  VK_BLEND_OP_HSL_SATURATION_EXT,
  VK_BLEND_OP_HSL_COLOR_EXT,
  VK_BLEND_OP_HSL_LUMINOSITY_EXT,
  VK_BLEND_OP_PLUS_EXT,
  VK_BLEND_OP_PLUS_CLAMPED_EXT,
  VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT,
  VK_BLEND_OP_PLUS_DARKER_EXT,
  VK_BLEND_OP_MINUS_EXT,
  VK_BLEND_OP_MINUS_CLAMPED_EXT,
  VK_BLEND_OP_CONTRAST_EXT,
  VK_BLEND_OP_INVERT_OVG_EXT,
  VK_BLEND_OP_RED_EXT,
  VK_BLEND_OP_GREEN_EXT,
  VK_BLEND_OP_BLUE_EXT,
  
}

/** ## VkStencilOp ## */
export enum VkStencilOp {
  VK_STENCIL_OP_KEEP,
  VK_STENCIL_OP_ZERO,
  VK_STENCIL_OP_REPLACE,
  VK_STENCIL_OP_INCREMENT_AND_CLAMP,
  VK_STENCIL_OP_DECREMENT_AND_CLAMP,
  VK_STENCIL_OP_INVERT,
  VK_STENCIL_OP_INCREMENT_AND_WRAP,
  VK_STENCIL_OP_DECREMENT_AND_WRAP,
  
}

/** ## VkLogicOp ## */
export enum VkLogicOp {
  VK_LOGIC_OP_CLEAR,
  VK_LOGIC_OP_AND,
  VK_LOGIC_OP_AND_REVERSE,
  VK_LOGIC_OP_COPY,
  VK_LOGIC_OP_AND_INVERTED,
  VK_LOGIC_OP_NO_OP,
  VK_LOGIC_OP_XOR,
  VK_LOGIC_OP_OR,
  VK_LOGIC_OP_NOR,
  VK_LOGIC_OP_EQUIVALENT,
  VK_LOGIC_OP_INVERT,
  VK_LOGIC_OP_OR_REVERSE,
  VK_LOGIC_OP_COPY_INVERTED,
  VK_LOGIC_OP_OR_INVERTED,
  VK_LOGIC_OP_NAND,
  VK_LOGIC_OP_SET,
  
}

/** ## VkInternalAllocationType ## */
export enum VkInternalAllocationType {
  VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE,
  
}

/** ## VkSystemAllocationScope ## */
export enum VkSystemAllocationScope {
  VK_SYSTEM_ALLOCATION_SCOPE_COMMAND,
  VK_SYSTEM_ALLOCATION_SCOPE_OBJECT,
  VK_SYSTEM_ALLOCATION_SCOPE_CACHE,
  VK_SYSTEM_ALLOCATION_SCOPE_DEVICE,
  VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE,
  
}

/** ## VkPhysicalDeviceType ## */
export enum VkPhysicalDeviceType {
  VK_PHYSICAL_DEVICE_TYPE_OTHER,
  VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU,
  VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU,
  VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU,
  VK_PHYSICAL_DEVICE_TYPE_CPU,
  
}

/** ## VkVertexInputRate ## */
export enum VkVertexInputRate {
  VK_VERTEX_INPUT_RATE_VERTEX,
  VK_VERTEX_INPUT_RATE_INSTANCE,
  
}

/** ## VkFormat ## */
export enum VkFormat {
  VK_FORMAT_UNDEFINED,
  VK_FORMAT_R4G4_UNORM_PACK8,
  VK_FORMAT_R4G4B4A4_UNORM_PACK16,
  VK_FORMAT_B4G4R4A4_UNORM_PACK16,
  VK_FORMAT_R5G6B5_UNORM_PACK16,
  VK_FORMAT_B5G6R5_UNORM_PACK16,
  VK_FORMAT_R5G5B5A1_UNORM_PACK16,
  VK_FORMAT_B5G5R5A1_UNORM_PACK16,
  VK_FORMAT_A1R5G5B5_UNORM_PACK16,
  VK_FORMAT_R8_UNORM,
  VK_FORMAT_R8_SNORM,
  VK_FORMAT_R8_USCALED,
  VK_FORMAT_R8_SSCALED,
  VK_FORMAT_R8_UINT,
  VK_FORMAT_R8_SINT,
  VK_FORMAT_R8_SRGB,
  VK_FORMAT_R8G8_UNORM,
  VK_FORMAT_R8G8_SNORM,
  VK_FORMAT_R8G8_USCALED,
  VK_FORMAT_R8G8_SSCALED,
  VK_FORMAT_R8G8_UINT,
  VK_FORMAT_R8G8_SINT,
  VK_FORMAT_R8G8_SRGB,
  VK_FORMAT_R8G8B8_UNORM,
  VK_FORMAT_R8G8B8_SNORM,
  VK_FORMAT_R8G8B8_USCALED,
  VK_FORMAT_R8G8B8_SSCALED,
  VK_FORMAT_R8G8B8_UINT,
  VK_FORMAT_R8G8B8_SINT,
  VK_FORMAT_R8G8B8_SRGB,
  VK_FORMAT_B8G8R8_UNORM,
  VK_FORMAT_B8G8R8_SNORM,
  VK_FORMAT_B8G8R8_USCALED,
  VK_FORMAT_B8G8R8_SSCALED,
  VK_FORMAT_B8G8R8_UINT,
  VK_FORMAT_B8G8R8_SINT,
  VK_FORMAT_B8G8R8_SRGB,
  VK_FORMAT_R8G8B8A8_UNORM,
  VK_FORMAT_R8G8B8A8_SNORM,
  VK_FORMAT_R8G8B8A8_USCALED,
  VK_FORMAT_R8G8B8A8_SSCALED,
  VK_FORMAT_R8G8B8A8_UINT,
  VK_FORMAT_R8G8B8A8_SINT,
  VK_FORMAT_R8G8B8A8_SRGB,
  VK_FORMAT_B8G8R8A8_UNORM,
  VK_FORMAT_B8G8R8A8_SNORM,
  VK_FORMAT_B8G8R8A8_USCALED,
  VK_FORMAT_B8G8R8A8_SSCALED,
  VK_FORMAT_B8G8R8A8_UINT,
  VK_FORMAT_B8G8R8A8_SINT,
  VK_FORMAT_B8G8R8A8_SRGB,
  VK_FORMAT_A8B8G8R8_UNORM_PACK32,
  VK_FORMAT_A8B8G8R8_SNORM_PACK32,
  VK_FORMAT_A8B8G8R8_USCALED_PACK32,
  VK_FORMAT_A8B8G8R8_SSCALED_PACK32,
  VK_FORMAT_A8B8G8R8_UINT_PACK32,
  VK_FORMAT_A8B8G8R8_SINT_PACK32,
  VK_FORMAT_A8B8G8R8_SRGB_PACK32,
  VK_FORMAT_A2R10G10B10_UNORM_PACK32,
  VK_FORMAT_A2R10G10B10_SNORM_PACK32,
  VK_FORMAT_A2R10G10B10_USCALED_PACK32,
  VK_FORMAT_A2R10G10B10_SSCALED_PACK32,
  VK_FORMAT_A2R10G10B10_UINT_PACK32,
  VK_FORMAT_A2R10G10B10_SINT_PACK32,
  VK_FORMAT_A2B10G10R10_UNORM_PACK32,
  VK_FORMAT_A2B10G10R10_SNORM_PACK32,
  VK_FORMAT_A2B10G10R10_USCALED_PACK32,
  VK_FORMAT_A2B10G10R10_SSCALED_PACK32,
  VK_FORMAT_A2B10G10R10_UINT_PACK32,
  VK_FORMAT_A2B10G10R10_SINT_PACK32,
  VK_FORMAT_R16_UNORM,
  VK_FORMAT_R16_SNORM,
  VK_FORMAT_R16_USCALED,
  VK_FORMAT_R16_SSCALED,
  VK_FORMAT_R16_UINT,
  VK_FORMAT_R16_SINT,
  VK_FORMAT_R16_SFLOAT,
  VK_FORMAT_R16G16_UNORM,
  VK_FORMAT_R16G16_SNORM,
  VK_FORMAT_R16G16_USCALED,
  VK_FORMAT_R16G16_SSCALED,
  VK_FORMAT_R16G16_UINT,
  VK_FORMAT_R16G16_SINT,
  VK_FORMAT_R16G16_SFLOAT,
  VK_FORMAT_R16G16B16_UNORM,
  VK_FORMAT_R16G16B16_SNORM,
  VK_FORMAT_R16G16B16_USCALED,
  VK_FORMAT_R16G16B16_SSCALED,
  VK_FORMAT_R16G16B16_UINT,
  VK_FORMAT_R16G16B16_SINT,
  VK_FORMAT_R16G16B16_SFLOAT,
  VK_FORMAT_R16G16B16A16_UNORM,
  VK_FORMAT_R16G16B16A16_SNORM,
  VK_FORMAT_R16G16B16A16_USCALED,
  VK_FORMAT_R16G16B16A16_SSCALED,
  VK_FORMAT_R16G16B16A16_UINT,
  VK_FORMAT_R16G16B16A16_SINT,
  VK_FORMAT_R16G16B16A16_SFLOAT,
  VK_FORMAT_R32_UINT,
  VK_FORMAT_R32_SINT,
  VK_FORMAT_R32_SFLOAT,
  VK_FORMAT_R32G32_UINT,
  VK_FORMAT_R32G32_SINT,
  VK_FORMAT_R32G32_SFLOAT,
  VK_FORMAT_R32G32B32_UINT,
  VK_FORMAT_R32G32B32_SINT,
  VK_FORMAT_R32G32B32_SFLOAT,
  VK_FORMAT_R32G32B32A32_UINT,
  VK_FORMAT_R32G32B32A32_SINT,
  VK_FORMAT_R32G32B32A32_SFLOAT,
  VK_FORMAT_R64_UINT,
  VK_FORMAT_R64_SINT,
  VK_FORMAT_R64_SFLOAT,
  VK_FORMAT_R64G64_UINT,
  VK_FORMAT_R64G64_SINT,
  VK_FORMAT_R64G64_SFLOAT,
  VK_FORMAT_R64G64B64_UINT,
  VK_FORMAT_R64G64B64_SINT,
  VK_FORMAT_R64G64B64_SFLOAT,
  VK_FORMAT_R64G64B64A64_UINT,
  VK_FORMAT_R64G64B64A64_SINT,
  VK_FORMAT_R64G64B64A64_SFLOAT,
  VK_FORMAT_B10G11R11_UFLOAT_PACK32,
  VK_FORMAT_E5B9G9R9_UFLOAT_PACK32,
  VK_FORMAT_D16_UNORM,
  VK_FORMAT_X8_D24_UNORM_PACK32,
  VK_FORMAT_D32_SFLOAT,
  VK_FORMAT_S8_UINT,
  VK_FORMAT_D16_UNORM_S8_UINT,
  VK_FORMAT_D24_UNORM_S8_UINT,
  VK_FORMAT_D32_SFLOAT_S8_UINT,
  VK_FORMAT_BC1_RGB_UNORM_BLOCK,
  VK_FORMAT_BC1_RGB_SRGB_BLOCK,
  VK_FORMAT_BC1_RGBA_UNORM_BLOCK,
  VK_FORMAT_BC1_RGBA_SRGB_BLOCK,
  VK_FORMAT_BC2_UNORM_BLOCK,
  VK_FORMAT_BC2_SRGB_BLOCK,
  VK_FORMAT_BC3_UNORM_BLOCK,
  VK_FORMAT_BC3_SRGB_BLOCK,
  VK_FORMAT_BC4_UNORM_BLOCK,
  VK_FORMAT_BC4_SNORM_BLOCK,
  VK_FORMAT_BC5_UNORM_BLOCK,
  VK_FORMAT_BC5_SNORM_BLOCK,
  VK_FORMAT_BC6H_UFLOAT_BLOCK,
  VK_FORMAT_BC6H_SFLOAT_BLOCK,
  VK_FORMAT_BC7_UNORM_BLOCK,
  VK_FORMAT_BC7_SRGB_BLOCK,
  VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK,
  VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK,
  VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK,
  VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK,
  VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK,
  VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK,
  VK_FORMAT_EAC_R11_UNORM_BLOCK,
  VK_FORMAT_EAC_R11_SNORM_BLOCK,
  VK_FORMAT_EAC_R11G11_UNORM_BLOCK,
  VK_FORMAT_EAC_R11G11_SNORM_BLOCK,
  VK_FORMAT_ASTC_4x4_UNORM_BLOCK,
  VK_FORMAT_ASTC_4x4_SRGB_BLOCK,
  VK_FORMAT_ASTC_5x4_UNORM_BLOCK,
  VK_FORMAT_ASTC_5x4_SRGB_BLOCK,
  VK_FORMAT_ASTC_5x5_UNORM_BLOCK,
  VK_FORMAT_ASTC_5x5_SRGB_BLOCK,
  VK_FORMAT_ASTC_6x5_UNORM_BLOCK,
  VK_FORMAT_ASTC_6x5_SRGB_BLOCK,
  VK_FORMAT_ASTC_6x6_UNORM_BLOCK,
  VK_FORMAT_ASTC_6x6_SRGB_BLOCK,
  VK_FORMAT_ASTC_8x5_UNORM_BLOCK,
  VK_FORMAT_ASTC_8x5_SRGB_BLOCK,
  VK_FORMAT_ASTC_8x6_UNORM_BLOCK,
  VK_FORMAT_ASTC_8x6_SRGB_BLOCK,
  VK_FORMAT_ASTC_8x8_UNORM_BLOCK,
  VK_FORMAT_ASTC_8x8_SRGB_BLOCK,
  VK_FORMAT_ASTC_10x5_UNORM_BLOCK,
  VK_FORMAT_ASTC_10x5_SRGB_BLOCK,
  VK_FORMAT_ASTC_10x6_UNORM_BLOCK,
  VK_FORMAT_ASTC_10x6_SRGB_BLOCK,
  VK_FORMAT_ASTC_10x8_UNORM_BLOCK,
  VK_FORMAT_ASTC_10x8_SRGB_BLOCK,
  VK_FORMAT_ASTC_10x10_UNORM_BLOCK,
  VK_FORMAT_ASTC_10x10_SRGB_BLOCK,
  VK_FORMAT_ASTC_12x10_UNORM_BLOCK,
  VK_FORMAT_ASTC_12x10_SRGB_BLOCK,
  VK_FORMAT_ASTC_12x12_UNORM_BLOCK,
  VK_FORMAT_ASTC_12x12_SRGB_BLOCK,
  VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG,
  VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG,
  VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG,
  VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG,
  VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG,
  VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG,
  VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG,
  VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG,
  VK_FORMAT_G8B8G8R8_422_UNORM_KHR,
  VK_FORMAT_B8G8R8G8_422_UNORM_KHR,
  VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR,
  VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR,
  VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR,
  VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR,
  VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR,
  VK_FORMAT_R10X6_UNORM_PACK16_KHR,
  VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR,
  VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR,
  VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR,
  VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR,
  VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR,
  VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR,
  VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR,
  VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR,
  VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR,
  VK_FORMAT_R12X4_UNORM_PACK16_KHR,
  VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR,
  VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR,
  VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR,
  VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR,
  VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR,
  VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR,
  VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR,
  VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR,
  VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR,
  VK_FORMAT_G16B16G16R16_422_UNORM_KHR,
  VK_FORMAT_B16G16R16G16_422_UNORM_KHR,
  VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR,
  VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR,
  VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR,
  VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR,
  VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR,
  
}

/** ## VkStructureType ## */
export enum VkStructureType {
  VK_STRUCTURE_TYPE_APPLICATION_INFO,
  VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO,
  VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO,
  VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO,
  VK_STRUCTURE_TYPE_SUBMIT_INFO,
  VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO,
  VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE,
  VK_STRUCTURE_TYPE_BIND_SPARSE_INFO,
  VK_STRUCTURE_TYPE_FENCE_CREATE_INFO,
  VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO,
  VK_STRUCTURE_TYPE_EVENT_CREATE_INFO,
  VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO,
  VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO,
  VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO,
  VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO,
  VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO,
  VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO,
  VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO,
  VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO,
  VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO,
  VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO,
  VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO,
  VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO,
  VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO,
  VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO,
  VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO,
  VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO,
  VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO,
  VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO,
  VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO,
  VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO,
  VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO,
  VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO,
  VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO,
  VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO,
  VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET,
  VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET,
  VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO,
  VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO,
  VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO,
  VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO,
  VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO,
  VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO,
  VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO,
  VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER,
  VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER,
  VK_STRUCTURE_TYPE_MEMORY_BARRIER,
  VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO,
  VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO,
  VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_PRESENT_INFO_KHR,
  VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR,
  VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR,
  VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR,
  VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR,
  VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR,
  VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_MIR_SURFACE_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_NATIVE_BUFFER_ANDROID,
  VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD,
  VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT,
  VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT,
  VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT,
  VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV,
  VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV,
  VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV,
  VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV,
  VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR,
  VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV,
  VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV,
  VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV,
  VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV,
  VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR,
  VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR,
  VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR,
  VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR,
  VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR,
  VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR,
  VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR,
  VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR,
  VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR,
  VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR,
  VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR,
  VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR,
  VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT,
  VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN,
  VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR,
  VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR,
  VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR,
  VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR,
  VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR,
  VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR,
  VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR,
  VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR,
  VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR,
  VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR,
  VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR,
  VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR,
  VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR,
  VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR,
  VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR,
  VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR,
  VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR,
  VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR,
  VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR,
  VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR,
  VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT,
  VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR,
  VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR,
  VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_OBJECT_TABLE_CREATE_INFO_NVX,
  VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NVX,
  VK_STRUCTURE_TYPE_CMD_PROCESS_COMMANDS_INFO_NVX,
  VK_STRUCTURE_TYPE_CMD_RESERVE_SPACE_FOR_COMMANDS_INFO_NVX,
  VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_LIMITS_NVX,
  VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_FEATURES_NVX,
  VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV,
  VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT,
  VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT,
  VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT,
  VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT,
  VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT,
  VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX,
  VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT,
  VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT,
  VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_HDR_METADATA_EXT,
  VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR,
  VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR,
  VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR,
  VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR,
  VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR,
  VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR,
  VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR,
  VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR,
  VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR,
  VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR,
  VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR,
  VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR,
  VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR,
  VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR,
  VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR,
  VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR,
  VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR,
  VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR,
  VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR,
  VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR,
  VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR,
  VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR,
  VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK,
  VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK,
  VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR,
  VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR,
  VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT,
  VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT,
  VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT,
  VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT,
  VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID,
  VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID,
  VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID,
  VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID,
  VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID,
  VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT,
  VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT,
  VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT,
  VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT,
  VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT,
  VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT,
  VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT,
  VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR,
  VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR,
  VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR,
  VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR,
  VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR,
  VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT,
  VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV,
  VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV,
  VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR,
  VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR,
  VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR,
  VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR,
  VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR,
  VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR,
  VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT,
  VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT,
  VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT,
  VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV,
  VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV,
  VK_STRUCTURE_TYPE_RAYTRACING_PIPELINE_CREATE_INFO_NVX,
  VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NVX,
  VK_STRUCTURE_TYPE_GEOMETRY_INSTANCE_NVX,
  VK_STRUCTURE_TYPE_GEOMETRY_NVX,
  VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NVX,
  VK_STRUCTURE_TYPE_GEOMETRY_AABB_NVX,
  VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NVX,
  VK_STRUCTURE_TYPE_DESCRIPTOR_ACCELERATION_STRUCTURE_INFO_NVX,
  VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NVX,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAYTRACING_PROPERTIES_NVX,
  VK_STRUCTURE_TYPE_HIT_SHADER_MODULE_CREATE_INFO_NVX,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV,
  VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR,
  VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR,
  VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR,
  VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT,
  VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT,
  VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV,
  VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV,
  VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV,
  VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR,
  
}

/** ## VkSubpassContents ## */
export enum VkSubpassContents {
  VK_SUBPASS_CONTENTS_INLINE,
  VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS,
  
}

/** ## VkResult ## */
export enum VkResult {
  VK_SUCCESS,
  VK_NOT_READY,
  VK_TIMEOUT,
  VK_EVENT_SET,
  VK_EVENT_RESET,
  VK_INCOMPLETE,
  VK_ERROR_OUT_OF_HOST_MEMORY,
  VK_ERROR_OUT_OF_DEVICE_MEMORY,
  VK_ERROR_INITIALIZATION_FAILED,
  VK_ERROR_DEVICE_LOST,
  VK_ERROR_MEMORY_MAP_FAILED,
  VK_ERROR_LAYER_NOT_PRESENT,
  VK_ERROR_EXTENSION_NOT_PRESENT,
  VK_ERROR_FEATURE_NOT_PRESENT,
  VK_ERROR_INCOMPATIBLE_DRIVER,
  VK_ERROR_TOO_MANY_OBJECTS,
  VK_ERROR_FORMAT_NOT_SUPPORTED,
  VK_ERROR_FRAGMENTED_POOL,
  VK_ERROR_SURFACE_LOST_KHR,
  VK_ERROR_NATIVE_WINDOW_IN_USE_KHR,
  VK_SUBOPTIMAL_KHR,
  VK_ERROR_OUT_OF_DATE_KHR,
  VK_ERROR_INCOMPATIBLE_DISPLAY_KHR,
  VK_ERROR_VALIDATION_FAILED_EXT,
  VK_ERROR_INVALID_SHADER_NV,
  VK_ERROR_OUT_OF_POOL_MEMORY_KHR,
  VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR,
  VK_ERROR_FRAGMENTATION_EXT,
  VK_ERROR_NOT_PERMITTED_EXT,
  
}

/** ## VkDynamicState ## */
export enum VkDynamicState {
  VK_DYNAMIC_STATE_VIEWPORT,
  VK_DYNAMIC_STATE_SCISSOR,
  VK_DYNAMIC_STATE_LINE_WIDTH,
  VK_DYNAMIC_STATE_DEPTH_BIAS,
  VK_DYNAMIC_STATE_BLEND_CONSTANTS,
  VK_DYNAMIC_STATE_DEPTH_BOUNDS,
  VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK,
  VK_DYNAMIC_STATE_STENCIL_WRITE_MASK,
  VK_DYNAMIC_STATE_STENCIL_REFERENCE,
  VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV,
  VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT,
  VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT,
  VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV,
  VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV,
  VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV,
  
}

/** ## VkDescriptorUpdateTemplateType ## */
export enum VkDescriptorUpdateTemplateType {
  VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET,
  VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR,
  
}

/** ## VkObjectType ## */
export enum VkObjectType {
  VK_OBJECT_TYPE_UNKNOWN,
  VK_OBJECT_TYPE_INSTANCE,
  VK_OBJECT_TYPE_PHYSICAL_DEVICE,
  VK_OBJECT_TYPE_DEVICE,
  VK_OBJECT_TYPE_QUEUE,
  VK_OBJECT_TYPE_SEMAPHORE,
  VK_OBJECT_TYPE_COMMAND_BUFFER,
  VK_OBJECT_TYPE_FENCE,
  VK_OBJECT_TYPE_DEVICE_MEMORY,
  VK_OBJECT_TYPE_BUFFER,
  VK_OBJECT_TYPE_IMAGE,
  VK_OBJECT_TYPE_EVENT,
  VK_OBJECT_TYPE_QUERY_POOL,
  VK_OBJECT_TYPE_BUFFER_VIEW,
  VK_OBJECT_TYPE_IMAGE_VIEW,
  VK_OBJECT_TYPE_SHADER_MODULE,
  VK_OBJECT_TYPE_PIPELINE_CACHE,
  VK_OBJECT_TYPE_PIPELINE_LAYOUT,
  VK_OBJECT_TYPE_RENDER_PASS,
  VK_OBJECT_TYPE_PIPELINE,
  VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT,
  VK_OBJECT_TYPE_SAMPLER,
  VK_OBJECT_TYPE_DESCRIPTOR_POOL,
  VK_OBJECT_TYPE_DESCRIPTOR_SET,
  VK_OBJECT_TYPE_FRAMEBUFFER,
  VK_OBJECT_TYPE_COMMAND_POOL,
  VK_OBJECT_TYPE_SURFACE_KHR,
  VK_OBJECT_TYPE_SWAPCHAIN_KHR,
  VK_OBJECT_TYPE_DISPLAY_KHR,
  VK_OBJECT_TYPE_DISPLAY_MODE_KHR,
  VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT,
  VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR,
  VK_OBJECT_TYPE_OBJECT_TABLE_NVX,
  VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NVX,
  VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT,
  VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR,
  VK_OBJECT_TYPE_VALIDATION_CACHE_EXT,
  VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NVX,
  
}

/** ## VkPresentModeKHR ## */
export enum VkPresentModeKHR {
  VK_PRESENT_MODE_IMMEDIATE_KHR,
  VK_PRESENT_MODE_MAILBOX_KHR,
  VK_PRESENT_MODE_FIFO_KHR,
  VK_PRESENT_MODE_FIFO_RELAXED_KHR,
  VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR,
  VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR,
  
}

/** ## VkColorSpaceKHR ## */
export enum VkColorSpaceKHR {
  VK_COLOR_SPACE_SRGB_NONLINEAR_KHR,
  VK_COLORSPACE_SRGB_NONLINEAR_KHR,
  VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT,
  VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT,
  VK_COLOR_SPACE_DCI_P3_LINEAR_EXT,
  VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT,
  VK_COLOR_SPACE_BT709_LINEAR_EXT,
  VK_COLOR_SPACE_BT709_NONLINEAR_EXT,
  VK_COLOR_SPACE_BT2020_LINEAR_EXT,
  VK_COLOR_SPACE_HDR10_ST2084_EXT,
  VK_COLOR_SPACE_DOLBYVISION_EXT,
  VK_COLOR_SPACE_HDR10_HLG_EXT,
  VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT,
  VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT,
  VK_COLOR_SPACE_PASS_THROUGH_EXT,
  VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT,
  
}

/** ## VkDebugReportObjectTypeEXT ## */
export enum VkDebugReportObjectTypeEXT {
  VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_OBJECT_TABLE_NVX_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NVX_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NVX_EXT,
  
}

/** ## VkRasterizationOrderAMD ## */
export enum VkRasterizationOrderAMD {
  VK_RASTERIZATION_ORDER_STRICT_AMD,
  VK_RASTERIZATION_ORDER_RELAXED_AMD,
  
}

/** ## VkValidationCheckEXT ## */
export enum VkValidationCheckEXT {
  VK_VALIDATION_CHECK_ALL_EXT,
  VK_VALIDATION_CHECK_SHADERS_EXT,
  
}

/** ## VkIndirectCommandsTokenTypeNVX ## */
export enum VkIndirectCommandsTokenTypeNVX {
  VK_INDIRECT_COMMANDS_TOKEN_TYPE_PIPELINE_NVX,
  VK_INDIRECT_COMMANDS_TOKEN_TYPE_DESCRIPTOR_SET_NVX,
  VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NVX,
  VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NVX,
  VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NVX,
  VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NVX,
  VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NVX,
  VK_INDIRECT_COMMANDS_TOKEN_TYPE_DISPATCH_NVX,
  
}

/** ## VkObjectEntryTypeNVX ## */
export enum VkObjectEntryTypeNVX {
  VK_OBJECT_ENTRY_TYPE_DESCRIPTOR_SET_NVX,
  VK_OBJECT_ENTRY_TYPE_PIPELINE_NVX,
  VK_OBJECT_ENTRY_TYPE_INDEX_BUFFER_NVX,
  VK_OBJECT_ENTRY_TYPE_VERTEX_BUFFER_NVX,
  VK_OBJECT_ENTRY_TYPE_PUSH_CONSTANT_NVX,
  
}

/** ## VkDisplayPowerStateEXT ## */
export enum VkDisplayPowerStateEXT {
  VK_DISPLAY_POWER_STATE_OFF_EXT,
  VK_DISPLAY_POWER_STATE_SUSPEND_EXT,
  VK_DISPLAY_POWER_STATE_ON_EXT,
  
}

/** ## VkDeviceEventTypeEXT ## */
export enum VkDeviceEventTypeEXT {
  VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT,
  
}

/** ## VkDisplayEventTypeEXT ## */
export enum VkDisplayEventTypeEXT {
  VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT,
  
}

/** ## VkViewportCoordinateSwizzleNV ## */
export enum VkViewportCoordinateSwizzleNV {
  VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV,
  VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV,
  VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV,
  VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV,
  VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV,
  VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV,
  VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV,
  VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV,
  
}

/** ## VkDiscardRectangleModeEXT ## */
export enum VkDiscardRectangleModeEXT {
  VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT,
  VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT,
  
}

/** ## VkPointClippingBehavior ## */
export enum VkPointClippingBehavior {
  VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES,
  VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY,
  VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR,
  VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR,
  
}

/** ## VkSamplerReductionModeEXT ## */
export enum VkSamplerReductionModeEXT {
  VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT,
  VK_SAMPLER_REDUCTION_MODE_MIN_EXT,
  VK_SAMPLER_REDUCTION_MODE_MAX_EXT,
  
}

/** ## VkTessellationDomainOrigin ## */
export enum VkTessellationDomainOrigin {
  VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT,
  VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT,
  VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR,
  VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR,
  
}

/** ## VkSamplerYcbcrModelConversion ## */
export enum VkSamplerYcbcrModelConversion {
  VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY,
  VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY,
  VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709,
  VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601,
  VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020,
  VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR,
  VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR,
  VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR,
  VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR,
  VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR,
  
}

/** ## VkSamplerYcbcrRange ## */
export enum VkSamplerYcbcrRange {
  VK_SAMPLER_YCBCR_RANGE_ITU_FULL,
  VK_SAMPLER_YCBCR_RANGE_ITU_NARROW,
  VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR,
  VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR,
  
}

/** ## VkChromaLocation ## */
export enum VkChromaLocation {
  VK_CHROMA_LOCATION_COSITED_EVEN,
  VK_CHROMA_LOCATION_MIDPOINT,
  VK_CHROMA_LOCATION_COSITED_EVEN_KHR,
  VK_CHROMA_LOCATION_MIDPOINT_KHR,
  
}

/** ## VkBlendOverlapEXT ## */
export enum VkBlendOverlapEXT {
  VK_BLEND_OVERLAP_UNCORRELATED_EXT,
  VK_BLEND_OVERLAP_DISJOINT_EXT,
  VK_BLEND_OVERLAP_CONJOINT_EXT,
  
}

/** ## VkCoverageModulationModeNV ## */
export enum VkCoverageModulationModeNV {
  VK_COVERAGE_MODULATION_MODE_NONE_NV,
  VK_COVERAGE_MODULATION_MODE_RGB_NV,
  VK_COVERAGE_MODULATION_MODE_ALPHA_NV,
  VK_COVERAGE_MODULATION_MODE_RGBA_NV,
  
}

/** ## VkValidationCacheHeaderVersionEXT ## */
export enum VkValidationCacheHeaderVersionEXT {
  VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT,
  
}

/** ## VkShaderInfoTypeAMD ## */
export enum VkShaderInfoTypeAMD {
  VK_SHADER_INFO_TYPE_STATISTICS_AMD,
  VK_SHADER_INFO_TYPE_BINARY_AMD,
  VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD,
  
}

/** ## VkQueueGlobalPriorityEXT ## */
export enum VkQueueGlobalPriorityEXT {
  VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT,
  VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT,
  VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT,
  VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT,
  
}

/** ## VkConservativeRasterizationModeEXT ## */
export enum VkConservativeRasterizationModeEXT {
  VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT,
  VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT,
  VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT,
  
}

/** ## VkVendorId ## */
export enum VkVendorId {
  VK_VENDOR_ID_VIV,
  VK_VENDOR_ID_VSI,
  VK_VENDOR_ID_KAZAN,
  
}

/** ## VkShadingRatePaletteEntryNV ## */
export enum VkShadingRatePaletteEntryNV {
  VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV,
  VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV,
  VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV,
  VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV,
  VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV,
  VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV,
  VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV,
  VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV,
  VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV,
  VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV,
  VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV,
  VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV,
  
}

/** ## VkCoarseSampleOrderTypeNV ## */
export enum VkCoarseSampleOrderTypeNV {
  VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV,
  VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV,
  VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV,
  VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV,
  
}

/** ## VkCopyAccelerationStructureModeNVX ## */
export enum VkCopyAccelerationStructureModeNVX {
  VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NVX,
  VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NVX,
  
}

/** ## VkAccelerationStructureTypeNVX ## */
export enum VkAccelerationStructureTypeNVX {
  VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NVX,
  VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NVX,
  
}

/** ## VkGeometryTypeNVX ## */
export enum VkGeometryTypeNVX {
  VK_GEOMETRY_TYPE_TRIANGLES_NVX,
  VK_GEOMETRY_TYPE_AABBS_NVX,
  
}

/** ## VkCullModeFlagBits ## */
export enum VkCullModeFlagBits {
  VK_CULL_MODE_NONE,
  VK_CULL_MODE_FRONT_BIT,
  VK_CULL_MODE_BACK_BIT,
  VK_CULL_MODE_FRONT_AND_BACK,
  
}

/** ## VkQueueFlagBits ## */
export enum VkQueueFlagBits {
  VK_QUEUE_GRAPHICS_BIT,
  VK_QUEUE_COMPUTE_BIT,
  VK_QUEUE_TRANSFER_BIT,
  VK_QUEUE_SPARSE_BINDING_BIT,
  
}

/** ## VkDeviceQueueCreateFlagBits ## */
export enum VkDeviceQueueCreateFlagBits {
  
}

/** ## VkMemoryPropertyFlagBits ## */
export enum VkMemoryPropertyFlagBits {
  VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT,
  VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT,
  VK_MEMORY_PROPERTY_HOST_COHERENT_BIT,
  VK_MEMORY_PROPERTY_HOST_CACHED_BIT,
  VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT,
  
}

/** ## VkMemoryHeapFlagBits ## */
export enum VkMemoryHeapFlagBits {
  VK_MEMORY_HEAP_DEVICE_LOCAL_BIT,
  VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR,
  
}

/** ## VkAccessFlagBits ## */
export enum VkAccessFlagBits {
  VK_ACCESS_INDIRECT_COMMAND_READ_BIT,
  VK_ACCESS_INDEX_READ_BIT,
  VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT,
  VK_ACCESS_UNIFORM_READ_BIT,
  VK_ACCESS_INPUT_ATTACHMENT_READ_BIT,
  VK_ACCESS_SHADER_READ_BIT,
  VK_ACCESS_SHADER_WRITE_BIT,
  VK_ACCESS_COLOR_ATTACHMENT_READ_BIT,
  VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT,
  VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT,
  VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT,
  VK_ACCESS_TRANSFER_READ_BIT,
  VK_ACCESS_TRANSFER_WRITE_BIT,
  VK_ACCESS_HOST_READ_BIT,
  VK_ACCESS_HOST_WRITE_BIT,
  VK_ACCESS_MEMORY_READ_BIT,
  VK_ACCESS_MEMORY_WRITE_BIT,
  VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT,
  VK_ACCESS_COMMAND_PROCESS_READ_BIT_NVX,
  VK_ACCESS_COMMAND_PROCESS_WRITE_BIT_NVX,
  VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT,
  VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV,
  VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NVX,
  VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NVX,
  VK_ACCESS_RESERVED_24_BIT_EXT,
  
}

/** ## VkBufferUsageFlagBits ## */
export enum VkBufferUsageFlagBits {
  VK_BUFFER_USAGE_TRANSFER_SRC_BIT,
  VK_BUFFER_USAGE_TRANSFER_DST_BIT,
  VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT,
  VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT,
  VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT,
  VK_BUFFER_USAGE_STORAGE_BUFFER_BIT,
  VK_BUFFER_USAGE_INDEX_BUFFER_BIT,
  VK_BUFFER_USAGE_VERTEX_BUFFER_BIT,
  VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT,
  VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT,
  VK_BUFFER_USAGE_RAYTRACING_BIT_NVX,
  
}

/** ## VkBufferCreateFlagBits ## */
export enum VkBufferCreateFlagBits {
  VK_BUFFER_CREATE_SPARSE_BINDING_BIT,
  VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT,
  VK_BUFFER_CREATE_SPARSE_ALIASED_BIT,
  
}

/** ## VkShaderStageFlagBits ## */
export enum VkShaderStageFlagBits {
  VK_SHADER_STAGE_VERTEX_BIT,
  VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT,
  VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT,
  VK_SHADER_STAGE_GEOMETRY_BIT,
  VK_SHADER_STAGE_FRAGMENT_BIT,
  VK_SHADER_STAGE_COMPUTE_BIT,
  VK_SHADER_STAGE_ALL_GRAPHICS,
  VK_SHADER_STAGE_ALL,
  VK_SHADER_STAGE_RAYGEN_BIT_NVX,
  VK_SHADER_STAGE_ANY_HIT_BIT_NVX,
  VK_SHADER_STAGE_CLOSEST_HIT_BIT_NVX,
  VK_SHADER_STAGE_MISS_BIT_NVX,
  VK_SHADER_STAGE_INTERSECTION_BIT_NVX,
  VK_SHADER_STAGE_CALLABLE_BIT_NVX,
  VK_SHADER_STAGE_TASK_BIT_NV,
  VK_SHADER_STAGE_MESH_BIT_NV,
  
}

/** ## VkImageUsageFlagBits ## */
export enum VkImageUsageFlagBits {
  VK_IMAGE_USAGE_TRANSFER_SRC_BIT,
  VK_IMAGE_USAGE_TRANSFER_DST_BIT,
  VK_IMAGE_USAGE_SAMPLED_BIT,
  VK_IMAGE_USAGE_STORAGE_BIT,
  VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT,
  VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT,
  VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT,
  VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT,
  VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV,
  VK_IMAGE_USAGE_RESERVED_9_BIT_EXT,
  
}

/** ## VkImageCreateFlagBits ## */
export enum VkImageCreateFlagBits {
  VK_IMAGE_CREATE_SPARSE_BINDING_BIT,
  VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT,
  VK_IMAGE_CREATE_SPARSE_ALIASED_BIT,
  VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT,
  VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT,
  VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV,
  VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR,
  VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR,
  VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR,
  VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR,
  VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT,
  VK_IMAGE_CREATE_DISJOINT_BIT_KHR,
  VK_IMAGE_CREATE_ALIAS_BIT_KHR,
  VK_IMAGE_CREATE_RESERVED_14_BIT_EXT,
  
}

/** ## VkPipelineCreateFlagBits ## */
export enum VkPipelineCreateFlagBits {
  VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT,
  VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT,
  VK_PIPELINE_CREATE_DERIVATIVE_BIT,
  VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR,
  VK_PIPELINE_CREATE_DISPATCH_BASE_KHR,
  VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NVX,
  
}

/** ## VkColorComponentFlagBits ## */
export enum VkColorComponentFlagBits {
  VK_COLOR_COMPONENT_R_BIT,
  VK_COLOR_COMPONENT_G_BIT,
  VK_COLOR_COMPONENT_B_BIT,
  VK_COLOR_COMPONENT_A_BIT,
  
}

/** ## VkFenceCreateFlagBits ## */
export enum VkFenceCreateFlagBits {
  VK_FENCE_CREATE_SIGNALED_BIT,
  
}

/** ## VkFormatFeatureFlagBits ## */
export enum VkFormatFeatureFlagBits {
  VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT,
  VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT,
  VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT,
  VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT,
  VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT,
  VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT,
  VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT,
  VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT,
  VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT,
  VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT,
  VK_FORMAT_FEATURE_BLIT_SRC_BIT,
  VK_FORMAT_FEATURE_BLIT_DST_BIT,
  VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT,
  VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG,
  VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR,
  VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR,
  VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT,
  VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR,
  VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR,
  VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR,
  VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR,
  VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR,
  VK_FORMAT_FEATURE_DISJOINT_BIT_KHR,
  VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR,
  VK_FORMAT_FEATURE_RESERVED_24_BIT_EXT,
  
}

/** ## VkQueryControlFlagBits ## */
export enum VkQueryControlFlagBits {
  VK_QUERY_CONTROL_PRECISE_BIT,
  
}

/** ## VkQueryResultFlagBits ## */
export enum VkQueryResultFlagBits {
  VK_QUERY_RESULT_64_BIT,
  VK_QUERY_RESULT_WAIT_BIT,
  VK_QUERY_RESULT_WITH_AVAILABILITY_BIT,
  VK_QUERY_RESULT_PARTIAL_BIT,
  
}

/** ## VkCommandBufferUsageFlagBits ## */
export enum VkCommandBufferUsageFlagBits {
  VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT,
  VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT,
  VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT,
  
}

/** ## VkQueryPipelineStatisticFlagBits ## */
export enum VkQueryPipelineStatisticFlagBits {
  VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT,
  VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT,
  VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT,
  VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT,
  VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT,
  VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT,
  VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT,
  VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT,
  VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT,
  VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT,
  VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT,
  
}

/** ## VkImageAspectFlagBits ## */
export enum VkImageAspectFlagBits {
  VK_IMAGE_ASPECT_COLOR_BIT,
  VK_IMAGE_ASPECT_DEPTH_BIT,
  VK_IMAGE_ASPECT_STENCIL_BIT,
  VK_IMAGE_ASPECT_METADATA_BIT,
  VK_IMAGE_ASPECT_PLANE_0_BIT_KHR,
  VK_IMAGE_ASPECT_PLANE_1_BIT_KHR,
  VK_IMAGE_ASPECT_PLANE_2_BIT_KHR,
  
}

/** ## VkSparseImageFormatFlagBits ## */
export enum VkSparseImageFormatFlagBits {
  VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT,
  VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT,
  VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT,
  
}

/** ## VkSparseMemoryBindFlagBits ## */
export enum VkSparseMemoryBindFlagBits {
  VK_SPARSE_MEMORY_BIND_METADATA_BIT,
  
}

/** ## VkPipelineStageFlagBits ## */
export enum VkPipelineStageFlagBits {
  VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT,
  VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT,
  VK_PIPELINE_STAGE_VERTEX_INPUT_BIT,
  VK_PIPELINE_STAGE_VERTEX_SHADER_BIT,
  VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT,
  VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT,
  VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT,
  VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT,
  VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT,
  VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT,
  VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT,
  VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT,
  VK_PIPELINE_STAGE_TRANSFER_BIT,
  VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT,
  VK_PIPELINE_STAGE_HOST_BIT,
  VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT,
  VK_PIPELINE_STAGE_ALL_COMMANDS_BIT,
  VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT,
  VK_PIPELINE_STAGE_COMMAND_PROCESS_BIT_NVX,
  VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV,
  VK_PIPELINE_STAGE_RAYTRACING_BIT_NVX,
  VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV,
  VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV,
  VK_PIPELINE_STAGE_RESERVED_23_BIT_EXT,
  
}

/** ## VkCommandPoolCreateFlagBits ## */
export enum VkCommandPoolCreateFlagBits {
  VK_COMMAND_POOL_CREATE_TRANSIENT_BIT,
  VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT,
  
}

/** ## VkCommandPoolResetFlagBits ## */
export enum VkCommandPoolResetFlagBits {
  VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT,
  
}

/** ## VkCommandBufferResetFlagBits ## */
export enum VkCommandBufferResetFlagBits {
  VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT,
  
}

/** ## VkSampleCountFlagBits ## */
export enum VkSampleCountFlagBits {
  VK_SAMPLE_COUNT_1_BIT,
  VK_SAMPLE_COUNT_2_BIT,
  VK_SAMPLE_COUNT_4_BIT,
  VK_SAMPLE_COUNT_8_BIT,
  VK_SAMPLE_COUNT_16_BIT,
  VK_SAMPLE_COUNT_32_BIT,
  VK_SAMPLE_COUNT_64_BIT,
  
}

/** ## VkAttachmentDescriptionFlagBits ## */
export enum VkAttachmentDescriptionFlagBits {
  VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT,
  
}

/** ## VkStencilFaceFlagBits ## */
export enum VkStencilFaceFlagBits {
  VK_STENCIL_FACE_FRONT_BIT,
  VK_STENCIL_FACE_BACK_BIT,
  VK_STENCIL_FRONT_AND_BACK,
  
}

/** ## VkDescriptorPoolCreateFlagBits ## */
export enum VkDescriptorPoolCreateFlagBits {
  VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT,
  VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT,
  
}

/** ## VkDependencyFlagBits ## */
export enum VkDependencyFlagBits {
  VK_DEPENDENCY_BY_REGION_BIT,
  VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR,
  VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR,
  
}

/** ## VkDisplayPlaneAlphaFlagBitsKHR ## */
export enum VkDisplayPlaneAlphaFlagBitsKHR {
  VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR,
  VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR,
  VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR,
  VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR,
  
}

/** ## VkCompositeAlphaFlagBitsKHR ## */
export enum VkCompositeAlphaFlagBitsKHR {
  VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR,
  VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR,
  VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR,
  VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR,
  
}

/** ## VkSurfaceTransformFlagBitsKHR ## */
export enum VkSurfaceTransformFlagBitsKHR {
  VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR,
  VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR,
  VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR,
  VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR,
  VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR,
  VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR,
  VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR,
  VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR,
  VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR,
  
}

/** ## VkDebugReportFlagBitsEXT ## */
export enum VkDebugReportFlagBitsEXT {
  VK_DEBUG_REPORT_INFORMATION_BIT_EXT,
  VK_DEBUG_REPORT_WARNING_BIT_EXT,
  VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT,
  VK_DEBUG_REPORT_ERROR_BIT_EXT,
  VK_DEBUG_REPORT_DEBUG_BIT_EXT,
  
}

/** ## VkExternalMemoryHandleTypeFlagBitsNV ## */
export enum VkExternalMemoryHandleTypeFlagBitsNV {
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV,
  
}

/** ## VkExternalMemoryFeatureFlagBitsNV ## */
export enum VkExternalMemoryFeatureFlagBitsNV {
  VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV,
  VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV,
  VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV,
  
}

/** ## VkSubgroupFeatureFlagBits ## */
export enum VkSubgroupFeatureFlagBits {
  VK_SUBGROUP_FEATURE_BASIC_BIT,
  VK_SUBGROUP_FEATURE_VOTE_BIT,
  VK_SUBGROUP_FEATURE_ARITHMETIC_BIT,
  VK_SUBGROUP_FEATURE_BALLOT_BIT,
  VK_SUBGROUP_FEATURE_SHUFFLE_BIT,
  VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT,
  VK_SUBGROUP_FEATURE_CLUSTERED_BIT,
  VK_SUBGROUP_FEATURE_QUAD_BIT,
  VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV,
  
}

/** ## VkIndirectCommandsLayoutUsageFlagBitsNVX ## */
export enum VkIndirectCommandsLayoutUsageFlagBitsNVX {
  VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NVX,
  VK_INDIRECT_COMMANDS_LAYOUT_USAGE_SPARSE_SEQUENCES_BIT_NVX,
  VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EMPTY_EXECUTIONS_BIT_NVX,
  VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NVX,
  
}

/** ## VkObjectEntryUsageFlagBitsNVX ## */
export enum VkObjectEntryUsageFlagBitsNVX {
  VK_OBJECT_ENTRY_USAGE_GRAPHICS_BIT_NVX,
  VK_OBJECT_ENTRY_USAGE_COMPUTE_BIT_NVX,
  
}

/** ## VkDescriptorSetLayoutCreateFlagBits ## */
export enum VkDescriptorSetLayoutCreateFlagBits {
  VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR,
  VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT,
  
}

/** ## VkExternalMemoryHandleTypeFlagBits ## */
export enum VkExternalMemoryHandleTypeFlagBits {
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT,
  
}

/** ## VkExternalMemoryFeatureFlagBits ## */
export enum VkExternalMemoryFeatureFlagBits {
  VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT,
  VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT,
  VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT,
  VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR,
  VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR,
  VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR,
  
}

/** ## VkExternalSemaphoreHandleTypeFlagBits ## */
export enum VkExternalSemaphoreHandleTypeFlagBits {
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT,
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT,
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT,
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT,
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT,
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR,
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR,
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR,
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR,
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR,
  
}

/** ## VkExternalSemaphoreFeatureFlagBits ## */
export enum VkExternalSemaphoreFeatureFlagBits {
  VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT,
  VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT,
  VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR,
  VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR,
  
}

/** ## VkSemaphoreImportFlagBits ## */
export enum VkSemaphoreImportFlagBits {
  VK_SEMAPHORE_IMPORT_TEMPORARY_BIT,
  VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR,
  
}

/** ## VkExternalFenceHandleTypeFlagBits ## */
export enum VkExternalFenceHandleTypeFlagBits {
  VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT,
  VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT,
  VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT,
  VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT,
  VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR,
  VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR,
  VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR,
  VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR,
  
}

/** ## VkExternalFenceFeatureFlagBits ## */
export enum VkExternalFenceFeatureFlagBits {
  VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT,
  VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT,
  VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR,
  VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR,
  
}

/** ## VkFenceImportFlagBits ## */
export enum VkFenceImportFlagBits {
  VK_FENCE_IMPORT_TEMPORARY_BIT,
  VK_FENCE_IMPORT_TEMPORARY_BIT_KHR,
  
}

/** ## VkSurfaceCounterFlagBitsEXT ## */
export enum VkSurfaceCounterFlagBitsEXT {
  VK_SURFACE_COUNTER_VBLANK_EXT,
  
}

/** ## VkPeerMemoryFeatureFlagBits ## */
export enum VkPeerMemoryFeatureFlagBits {
  VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT,
  VK_PEER_MEMORY_FEATURE_COPY_DST_BIT,
  VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT,
  VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT,
  VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR,
  VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR,
  VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR,
  VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR,
  
}

/** ## VkMemoryAllocateFlagBits ## */
export enum VkMemoryAllocateFlagBits {
  VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT,
  VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR,
  
}

/** ## VkDeviceGroupPresentModeFlagBitsKHR ## */
export enum VkDeviceGroupPresentModeFlagBitsKHR {
  VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR,
  VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR,
  VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR,
  VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR,
  
}

/** ## VkSwapchainCreateFlagBitsKHR ## */
export enum VkSwapchainCreateFlagBitsKHR {
  VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR,
  VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR,
  
}

/** ## VkSubpassDescriptionFlagBits ## */
export enum VkSubpassDescriptionFlagBits {
  VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX,
  VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX,
  
}

/** ## VkDebugUtilsMessageSeverityFlagBitsEXT ## */
export enum VkDebugUtilsMessageSeverityFlagBitsEXT {
  VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT,
  VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT,
  VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT,
  VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT,
  
}

/** ## VkDebugUtilsMessageTypeFlagBitsEXT ## */
export enum VkDebugUtilsMessageTypeFlagBitsEXT {
  VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT,
  VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT,
  VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT,
  
}

/** ## VkDescriptorBindingFlagBitsEXT ## */
export enum VkDescriptorBindingFlagBitsEXT {
  VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT,
  VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT,
  VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT,
  VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT,
  
}

/** ## VkConditionalRenderingFlagBitsEXT ## */
export enum VkConditionalRenderingFlagBitsEXT {
  VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT,
  
}

/** ## VkGeometryInstanceFlagBitsNVX ## */
export enum VkGeometryInstanceFlagBitsNVX {
  VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NVX,
  VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_FLIP_WINDING_BIT_NVX,
  VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NVX,
  VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NVX,
  
}

/** ## VkGeometryFlagBitsNVX ## */
export enum VkGeometryFlagBitsNVX {
  VK_GEOMETRY_OPAQUE_BIT_NVX,
  VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NVX,
  
}

/** ## VkBuildAccelerationStructureFlagBitsNVX ## */
export enum VkBuildAccelerationStructureFlagBitsNVX {
  VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NVX,
  VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NVX,
  VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NVX,
  VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NVX,
  VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NVX,
  
}


/** #### HANDLES #### **/
/** ## VkDebugUtilsMessengerEXT ## */
interface VkDebugUtilsMessengerEXT {}

declare var VkDebugUtilsMessengerEXT: {
  prototype: VkDebugUtilsMessengerEXT;
  new(): VkDebugUtilsMessengerEXT;
}

export interface VkDebugUtilsMessengerEXT {}

/** ## VkDebugReportCallbackEXT ## */
interface VkDebugReportCallbackEXT {}

declare var VkDebugReportCallbackEXT: {
  prototype: VkDebugReportCallbackEXT;
  new(): VkDebugReportCallbackEXT;
}

export interface VkDebugReportCallbackEXT {}

/** ## VkSwapchainKHR ## */
interface VkSwapchainKHR {}

declare var VkSwapchainKHR: {
  prototype: VkSwapchainKHR;
  new(): VkSwapchainKHR;
}

export interface VkSwapchainKHR {}

/** ## VkSurfaceKHR ## */
interface VkSurfaceKHR {}

declare var VkSurfaceKHR: {
  prototype: VkSurfaceKHR;
  new(): VkSurfaceKHR;
}

export interface VkSurfaceKHR {}

/** ## VkDisplayModeKHR ## */
interface VkDisplayModeKHR {}

declare var VkDisplayModeKHR: {
  prototype: VkDisplayModeKHR;
  new(): VkDisplayModeKHR;
}

export interface VkDisplayModeKHR {}

/** ## VkDisplayKHR ## */
interface VkDisplayKHR {}

declare var VkDisplayKHR: {
  prototype: VkDisplayKHR;
  new(): VkDisplayKHR;
}

export interface VkDisplayKHR {}

/** ## VkValidationCacheEXT ## */
interface VkValidationCacheEXT {}

declare var VkValidationCacheEXT: {
  prototype: VkValidationCacheEXT;
  new(): VkValidationCacheEXT;
}

export interface VkValidationCacheEXT {}

/** ## VkSamplerYcbcrConversion ## */
interface VkSamplerYcbcrConversion {}

declare var VkSamplerYcbcrConversion: {
  prototype: VkSamplerYcbcrConversion;
  new(): VkSamplerYcbcrConversion;
}

export interface VkSamplerYcbcrConversion {}

/** ## VkDescriptorUpdateTemplate ## */
interface VkDescriptorUpdateTemplate {}

declare var VkDescriptorUpdateTemplate: {
  prototype: VkDescriptorUpdateTemplate;
  new(): VkDescriptorUpdateTemplate;
}

export interface VkDescriptorUpdateTemplate {}

/** ## VkIndirectCommandsLayoutNVX ## */
interface VkIndirectCommandsLayoutNVX {}

declare var VkIndirectCommandsLayoutNVX: {
  prototype: VkIndirectCommandsLayoutNVX;
  new(): VkIndirectCommandsLayoutNVX;
}

export interface VkIndirectCommandsLayoutNVX {}

/** ## VkObjectTableNVX ## */
interface VkObjectTableNVX {}

declare var VkObjectTableNVX: {
  prototype: VkObjectTableNVX;
  new(): VkObjectTableNVX;
}

export interface VkObjectTableNVX {}

/** ## VkPipelineCache ## */
interface VkPipelineCache {}

declare var VkPipelineCache: {
  prototype: VkPipelineCache;
  new(): VkPipelineCache;
}

export interface VkPipelineCache {}

/** ## VkRenderPass ## */
interface VkRenderPass {}

declare var VkRenderPass: {
  prototype: VkRenderPass;
  new(): VkRenderPass;
}

export interface VkRenderPass {}

/** ## VkFramebuffer ## */
interface VkFramebuffer {}

declare var VkFramebuffer: {
  prototype: VkFramebuffer;
  new(): VkFramebuffer;
}

export interface VkFramebuffer {}

/** ## VkQueryPool ## */
interface VkQueryPool {}

declare var VkQueryPool: {
  prototype: VkQueryPool;
  new(): VkQueryPool;
}

export interface VkQueryPool {}

/** ## VkEvent ## */
interface VkEvent {}

declare var VkEvent: {
  prototype: VkEvent;
  new(): VkEvent;
}

export interface VkEvent {}

/** ## VkSemaphore ## */
interface VkSemaphore {}

declare var VkSemaphore: {
  prototype: VkSemaphore;
  new(): VkSemaphore;
}

export interface VkSemaphore {}

/** ## VkFence ## */
interface VkFence {}

declare var VkFence: {
  prototype: VkFence;
  new(): VkFence;
}

export interface VkFence {}

/** ## VkDescriptorPool ## */
interface VkDescriptorPool {}

declare var VkDescriptorPool: {
  prototype: VkDescriptorPool;
  new(): VkDescriptorPool;
}

export interface VkDescriptorPool {}

/** ## VkDescriptorSetLayout ## */
interface VkDescriptorSetLayout {}

declare var VkDescriptorSetLayout: {
  prototype: VkDescriptorSetLayout;
  new(): VkDescriptorSetLayout;
}

export interface VkDescriptorSetLayout {}

/** ## VkDescriptorSet ## */
interface VkDescriptorSet {}

declare var VkDescriptorSet: {
  prototype: VkDescriptorSet;
  new(): VkDescriptorSet;
}

export interface VkDescriptorSet {}

/** ## VkSampler ## */
interface VkSampler {}

declare var VkSampler: {
  prototype: VkSampler;
  new(): VkSampler;
}

export interface VkSampler {}

/** ## VkPipelineLayout ## */
interface VkPipelineLayout {}

declare var VkPipelineLayout: {
  prototype: VkPipelineLayout;
  new(): VkPipelineLayout;
}

export interface VkPipelineLayout {}

/** ## VkPipeline ## */
interface VkPipeline {}

declare var VkPipeline: {
  prototype: VkPipeline;
  new(): VkPipeline;
}

export interface VkPipeline {}

/** ## VkShaderModule ## */
interface VkShaderModule {}

declare var VkShaderModule: {
  prototype: VkShaderModule;
  new(): VkShaderModule;
}

export interface VkShaderModule {}

/** ## VkImageView ## */
interface VkImageView {}

declare var VkImageView: {
  prototype: VkImageView;
  new(): VkImageView;
}

export interface VkImageView {}

/** ## VkImage ## */
interface VkImage {}

declare var VkImage: {
  prototype: VkImage;
  new(): VkImage;
}

export interface VkImage {}

/** ## VkBufferView ## */
interface VkBufferView {}

declare var VkBufferView: {
  prototype: VkBufferView;
  new(): VkBufferView;
}

export interface VkBufferView {}

/** ## VkBuffer ## */
interface VkBuffer {}

declare var VkBuffer: {
  prototype: VkBuffer;
  new(): VkBuffer;
}

export interface VkBuffer {}

/** ## VkCommandPool ## */
interface VkCommandPool {}

declare var VkCommandPool: {
  prototype: VkCommandPool;
  new(): VkCommandPool;
}

export interface VkCommandPool {}

/** ## VkDeviceMemory ## */
interface VkDeviceMemory {}

declare var VkDeviceMemory: {
  prototype: VkDeviceMemory;
  new(): VkDeviceMemory;
}

export interface VkDeviceMemory {}

/** ## VkCommandBuffer ## */
interface VkCommandBuffer {}

declare var VkCommandBuffer: {
  prototype: VkCommandBuffer;
  new(): VkCommandBuffer;
}

export interface VkCommandBuffer {}

/** ## VkQueue ## */
interface VkQueue {}

declare var VkQueue: {
  prototype: VkQueue;
  new(): VkQueue;
}

export interface VkQueue {}

/** ## VkDevice ## */
interface VkDevice {}

declare var VkDevice: {
  prototype: VkDevice;
  new(): VkDevice;
}

export interface VkDevice {}

/** ## VkPhysicalDevice ## */
interface VkPhysicalDevice {}

declare var VkPhysicalDevice: {
  prototype: VkPhysicalDevice;
  new(): VkPhysicalDevice;
}

export interface VkPhysicalDevice {}

/** ## VkInstance ## */
interface VkInstance {}

declare var VkInstance: {
  prototype: VkInstance;
  new(): VkInstance;
}

export interface VkInstance {}



/** #### STRUCTS #### **/





































/** ## VkClearColorValue ## */
interface VkClearColorValueInitializer {
  float32?: number[] | null;
  int32?: number[] | null;
  uint32?: number[] | null;
}

declare var VkClearColorValue: {
  prototype: VkClearColorValue;
  new(param?: VkClearColorValueInitializer | null): VkClearColorValue;
  float32: number[] | null;
  int32: number[] | null;
  uint32: number[] | null;
}

export interface VkClearColorValue {
  float32: number[] | null;
  int32: number[] | null;
  uint32: number[] | null;
}


/** ## VkBindImagePlaneMemoryInfo ## */
interface VkBindImagePlaneMemoryInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  planeAspect?: VkImageAspectFlags;
}

declare var VkBindImagePlaneMemoryInfo: {
  prototype: VkBindImagePlaneMemoryInfo;
  new(param?: VkBindImagePlaneMemoryInfoInitializer | null): VkBindImagePlaneMemoryInfo;
  sType: VkStructureType;
  pNext: null;
  planeAspect: VkImageAspectFlags;
}

export interface VkBindImagePlaneMemoryInfo {
  sType: VkStructureType;
  pNext: null;
  planeAspect: VkImageAspectFlags;
}


/** ## VkPresentInfoKHR ## */
interface VkPresentInfoKHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  waitSemaphoreCount?: number;
  pWaitSemaphores?: VkSemaphore[] | null;
  swapchainCount?: number;
  pSwapchains?: VkSwapchainKHR[] | null;
  pImageIndices?: Uint32Array | null;
  pResults?: Int32Array | null;
}

declare var VkPresentInfoKHR: {
  prototype: VkPresentInfoKHR;
  new(param?: VkPresentInfoKHRInitializer | null): VkPresentInfoKHR;
  sType: VkStructureType;
  pNext: null;
  waitSemaphoreCount: number;
  pWaitSemaphores: VkSemaphore[] | null;
  swapchainCount: number;
  pSwapchains: VkSwapchainKHR[] | null;
  pImageIndices: Uint32Array | null;
  pResults: Int32Array | null;
}

export interface VkPresentInfoKHR {
  sType: VkStructureType;
  pNext: null;
  waitSemaphoreCount: number;
  pWaitSemaphores: VkSemaphore[] | null;
  swapchainCount: number;
  pSwapchains: VkSwapchainKHR[] | null;
  pImageIndices: Uint32Array | null;
  pResults: Int32Array | null;
}


/** ## VkExtent2D ## */
interface VkExtent2DInitializer {
  width?: number;
  height?: number;
}

declare var VkExtent2D: {
  prototype: VkExtent2D;
  new(param?: VkExtent2DInitializer | null): VkExtent2D;
  width: number;
  height: number;
}

export interface VkExtent2D {
  width: number;
  height: number;
}


/** ## VkSwapchainCreateInfoKHR ## */
interface VkSwapchainCreateInfoKHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: VkSwapchainCreateFlagBitsKHR;
  surface?: VkSurfaceKHR | null;
  minImageCount?: number;
  imageFormat?: VkFormat;
  imageColorSpace?: VkColorSpaceKHR;
  imageExtent?: VkExtent2D | null;
  imageArrayLayers?: number;
  imageUsage?: VkImageUsageFlagBits;
  imageSharingMode?: VkSharingMode;
  queueFamilyIndexCount?: number;
  pQueueFamilyIndices?: Uint32Array | null;
  preTransform?: VkSurfaceTransformFlagsKHR;
  compositeAlpha?: VkCompositeAlphaFlagsKHR;
  presentMode?: VkPresentModeKHR;
  clipped?: number;
  oldSwapchain?: VkSwapchainKHR | null;
}

declare var VkSwapchainCreateInfoKHR: {
  prototype: VkSwapchainCreateInfoKHR;
  new(param?: VkSwapchainCreateInfoKHRInitializer | null): VkSwapchainCreateInfoKHR;
  sType: VkStructureType;
  pNext: null;
  flags: VkSwapchainCreateFlagBitsKHR;
  surface: VkSurfaceKHR | null;
  minImageCount: number;
  imageFormat: VkFormat;
  imageColorSpace: VkColorSpaceKHR;
  imageExtent: VkExtent2D | null;
  imageArrayLayers: number;
  imageUsage: VkImageUsageFlagBits;
  imageSharingMode: VkSharingMode;
  queueFamilyIndexCount: number;
  pQueueFamilyIndices: Uint32Array | null;
  preTransform: VkSurfaceTransformFlagsKHR;
  compositeAlpha: VkCompositeAlphaFlagsKHR;
  presentMode: VkPresentModeKHR;
  clipped: number;
  oldSwapchain: VkSwapchainKHR | null;
}

export interface VkSwapchainCreateInfoKHR {
  sType: VkStructureType;
  pNext: null;
  flags: VkSwapchainCreateFlagBitsKHR;
  surface: VkSurfaceKHR | null;
  minImageCount: number;
  imageFormat: VkFormat;
  imageColorSpace: VkColorSpaceKHR;
  imageExtent: VkExtent2D | null;
  imageArrayLayers: number;
  imageUsage: VkImageUsageFlagBits;
  imageSharingMode: VkSharingMode;
  queueFamilyIndexCount: number;
  pQueueFamilyIndices: Uint32Array | null;
  preTransform: VkSurfaceTransformFlagsKHR;
  compositeAlpha: VkCompositeAlphaFlagsKHR;
  presentMode: VkPresentModeKHR;
  clipped: number;
  oldSwapchain: VkSwapchainKHR | null;
}


/** ## VkSurfaceFormatKHR ## */
interface VkSurfaceFormatKHRInitializer {
  readonly format?: VkFormat;
  readonly colorSpace?: VkColorSpaceKHR;
}

declare var VkSurfaceFormatKHR: {
  prototype: VkSurfaceFormatKHR;
  new(param?: VkSurfaceFormatKHRInitializer | null): VkSurfaceFormatKHR;
  readonly format: VkFormat;
  readonly colorSpace: VkColorSpaceKHR;
}

export interface VkSurfaceFormatKHR {
  readonly format: VkFormat;
  readonly colorSpace: VkColorSpaceKHR;
}


/** ## VkSurfaceCapabilitiesKHR ## */
interface VkSurfaceCapabilitiesKHRInitializer {
  readonly minImageCount?: number;
  readonly maxImageCount?: number;
  readonly currentExtent?: VkExtent2D | null;
  readonly minImageExtent?: VkExtent2D | null;
  readonly maxImageExtent?: VkExtent2D | null;
  readonly maxImageArrayLayers?: number;
  readonly supportedTransforms?: VkSurfaceTransformFlagBitsKHR;
  readonly currentTransform?: VkSurfaceTransformFlagsKHR;
  readonly supportedCompositeAlpha?: VkCompositeAlphaFlagBitsKHR;
  readonly supportedUsageFlags?: VkImageUsageFlagBits;
}

declare var VkSurfaceCapabilitiesKHR: {
  prototype: VkSurfaceCapabilitiesKHR;
  new(param?: VkSurfaceCapabilitiesKHRInitializer | null): VkSurfaceCapabilitiesKHR;
  readonly minImageCount: number;
  readonly maxImageCount: number;
  readonly currentExtent: VkExtent2D | null;
  readonly minImageExtent: VkExtent2D | null;
  readonly maxImageExtent: VkExtent2D | null;
  readonly maxImageArrayLayers: number;
  readonly supportedTransforms: VkSurfaceTransformFlagBitsKHR;
  readonly currentTransform: VkSurfaceTransformFlagsKHR;
  readonly supportedCompositeAlpha: VkCompositeAlphaFlagBitsKHR;
  readonly supportedUsageFlags: VkImageUsageFlagBits;
}

export interface VkSurfaceCapabilitiesKHR {
  readonly minImageCount: number;
  readonly maxImageCount: number;
  readonly currentExtent: VkExtent2D | null;
  readonly minImageExtent: VkExtent2D | null;
  readonly maxImageExtent: VkExtent2D | null;
  readonly maxImageArrayLayers: number;
  readonly supportedTransforms: VkSurfaceTransformFlagBitsKHR;
  readonly currentTransform: VkSurfaceTransformFlagsKHR;
  readonly supportedCompositeAlpha: VkCompositeAlphaFlagBitsKHR;
  readonly supportedUsageFlags: VkImageUsageFlagBits;
}


/** ## VkSubmitInfo ## */
interface VkSubmitInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  waitSemaphoreCount?: number;
  pWaitSemaphores?: VkSemaphore[] | null;
  pWaitDstStageMask?: Int32Array | null;
  commandBufferCount?: number;
  pCommandBuffers?: VkCommandBuffer[] | null;
  signalSemaphoreCount?: number;
  pSignalSemaphores?: VkSemaphore[] | null;
}

declare var VkSubmitInfo: {
  prototype: VkSubmitInfo;
  new(param?: VkSubmitInfoInitializer | null): VkSubmitInfo;
  sType: VkStructureType;
  pNext: null;
  waitSemaphoreCount: number;
  pWaitSemaphores: VkSemaphore[] | null;
  pWaitDstStageMask: Int32Array | null;
  commandBufferCount: number;
  pCommandBuffers: VkCommandBuffer[] | null;
  signalSemaphoreCount: number;
  pSignalSemaphores: VkSemaphore[] | null;
}

export interface VkSubmitInfo {
  sType: VkStructureType;
  pNext: null;
  waitSemaphoreCount: number;
  pWaitSemaphores: VkSemaphore[] | null;
  pWaitDstStageMask: Int32Array | null;
  commandBufferCount: number;
  pCommandBuffers: VkCommandBuffer[] | null;
  signalSemaphoreCount: number;
  pSignalSemaphores: VkSemaphore[] | null;
}


/** ## VkFramebufferCreateInfo ## */
interface VkFramebufferCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: VkFramebufferCreateFlags;
  renderPass?: VkRenderPass | null;
  attachmentCount?: number;
  pAttachments?: VkImageView[] | null;
  width?: number;
  height?: number;
  layers?: number;
}

declare var VkFramebufferCreateInfo: {
  prototype: VkFramebufferCreateInfo;
  new(param?: VkFramebufferCreateInfoInitializer | null): VkFramebufferCreateInfo;
  sType: VkStructureType;
  pNext: null;
  flags: VkFramebufferCreateFlags;
  renderPass: VkRenderPass | null;
  attachmentCount: number;
  pAttachments: VkImageView[] | null;
  width: number;
  height: number;
  layers: number;
}

export interface VkFramebufferCreateInfo {
  sType: VkStructureType;
  pNext: null;
  flags: VkFramebufferCreateFlags;
  renderPass: VkRenderPass | null;
  attachmentCount: number;
  pAttachments: VkImageView[] | null;
  width: number;
  height: number;
  layers: number;
}


/** ## VkSemaphoreCreateInfo ## */
interface VkSemaphoreCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: VkSemaphoreCreateFlags;
}

declare var VkSemaphoreCreateInfo: {
  prototype: VkSemaphoreCreateInfo;
  new(param?: VkSemaphoreCreateInfoInitializer | null): VkSemaphoreCreateInfo;
  sType: VkStructureType;
  pNext: null;
  flags: VkSemaphoreCreateFlags;
}

export interface VkSemaphoreCreateInfo {
  sType: VkStructureType;
  pNext: null;
  flags: VkSemaphoreCreateFlags;
}


/** ## VkSubpassDependency ## */
interface VkSubpassDependencyInitializer {
  srcSubpass?: number;
  dstSubpass?: number;
  srcStageMask?: VkPipelineStageFlagBits;
  dstStageMask?: VkPipelineStageFlagBits;
  srcAccessMask?: VkAccessFlagBits;
  dstAccessMask?: VkAccessFlagBits;
  dependencyFlags?: VkDependencyFlagBits;
}

declare var VkSubpassDependency: {
  prototype: VkSubpassDependency;
  new(param?: VkSubpassDependencyInitializer | null): VkSubpassDependency;
  srcSubpass: number;
  dstSubpass: number;
  srcStageMask: VkPipelineStageFlagBits;
  dstStageMask: VkPipelineStageFlagBits;
  srcAccessMask: VkAccessFlagBits;
  dstAccessMask: VkAccessFlagBits;
  dependencyFlags: VkDependencyFlagBits;
}

export interface VkSubpassDependency {
  srcSubpass: number;
  dstSubpass: number;
  srcStageMask: VkPipelineStageFlagBits;
  dstStageMask: VkPipelineStageFlagBits;
  srcAccessMask: VkAccessFlagBits;
  dstAccessMask: VkAccessFlagBits;
  dependencyFlags: VkDependencyFlagBits;
}


/** ## VkAttachmentReference ## */
interface VkAttachmentReferenceInitializer {
  attachment?: number;
  layout?: VkImageLayout;
}

declare var VkAttachmentReference: {
  prototype: VkAttachmentReference;
  new(param?: VkAttachmentReferenceInitializer | null): VkAttachmentReference;
  attachment: number;
  layout: VkImageLayout;
}

export interface VkAttachmentReference {
  attachment: number;
  layout: VkImageLayout;
}


/** ## VkSubpassDescription ## */
interface VkSubpassDescriptionInitializer {
  flags?: VkSubpassDescriptionFlagBits;
  pipelineBindPoint?: VkPipelineBindPoint;
  inputAttachmentCount?: number;
  pInputAttachments?: VkAttachmentReference[] | null;
  colorAttachmentCount?: number;
  pColorAttachments?: VkAttachmentReference[] | null;
  pResolveAttachments?: VkAttachmentReference[] | null;
  pDepthStencilAttachment?: VkAttachmentReference | null;
  preserveAttachmentCount?: number;
  pPreserveAttachments?: Uint32Array | null;
}

declare var VkSubpassDescription: {
  prototype: VkSubpassDescription;
  new(param?: VkSubpassDescriptionInitializer | null): VkSubpassDescription;
  flags: VkSubpassDescriptionFlagBits;
  pipelineBindPoint: VkPipelineBindPoint;
  inputAttachmentCount: number;
  pInputAttachments: VkAttachmentReference[] | null;
  colorAttachmentCount: number;
  pColorAttachments: VkAttachmentReference[] | null;
  pResolveAttachments: VkAttachmentReference[] | null;
  pDepthStencilAttachment: VkAttachmentReference | null;
  preserveAttachmentCount: number;
  pPreserveAttachments: Uint32Array | null;
}

export interface VkSubpassDescription {
  flags: VkSubpassDescriptionFlagBits;
  pipelineBindPoint: VkPipelineBindPoint;
  inputAttachmentCount: number;
  pInputAttachments: VkAttachmentReference[] | null;
  colorAttachmentCount: number;
  pColorAttachments: VkAttachmentReference[] | null;
  pResolveAttachments: VkAttachmentReference[] | null;
  pDepthStencilAttachment: VkAttachmentReference | null;
  preserveAttachmentCount: number;
  pPreserveAttachments: Uint32Array | null;
}


/** ## VkAttachmentDescription ## */
interface VkAttachmentDescriptionInitializer {
  flags?: VkAttachmentDescriptionFlagBits;
  format?: VkFormat;
  samples?: VkSampleCountFlags;
  loadOp?: VkAttachmentLoadOp;
  storeOp?: VkAttachmentStoreOp;
  stencilLoadOp?: VkAttachmentLoadOp;
  stencilStoreOp?: VkAttachmentStoreOp;
  initialLayout?: VkImageLayout;
  finalLayout?: VkImageLayout;
}

declare var VkAttachmentDescription: {
  prototype: VkAttachmentDescription;
  new(param?: VkAttachmentDescriptionInitializer | null): VkAttachmentDescription;
  flags: VkAttachmentDescriptionFlagBits;
  format: VkFormat;
  samples: VkSampleCountFlags;
  loadOp: VkAttachmentLoadOp;
  storeOp: VkAttachmentStoreOp;
  stencilLoadOp: VkAttachmentLoadOp;
  stencilStoreOp: VkAttachmentStoreOp;
  initialLayout: VkImageLayout;
  finalLayout: VkImageLayout;
}

export interface VkAttachmentDescription {
  flags: VkAttachmentDescriptionFlagBits;
  format: VkFormat;
  samples: VkSampleCountFlags;
  loadOp: VkAttachmentLoadOp;
  storeOp: VkAttachmentStoreOp;
  stencilLoadOp: VkAttachmentLoadOp;
  stencilStoreOp: VkAttachmentStoreOp;
  initialLayout: VkImageLayout;
  finalLayout: VkImageLayout;
}


/** ## VkRenderPassCreateInfo ## */
interface VkRenderPassCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: VkRenderPassCreateFlags;
  attachmentCount?: number;
  pAttachments?: VkAttachmentDescription[] | null;
  subpassCount?: number;
  pSubpasses?: VkSubpassDescription[] | null;
  dependencyCount?: number;
  pDependencies?: VkSubpassDependency[] | null;
}

declare var VkRenderPassCreateInfo: {
  prototype: VkRenderPassCreateInfo;
  new(param?: VkRenderPassCreateInfoInitializer | null): VkRenderPassCreateInfo;
  sType: VkStructureType;
  pNext: null;
  flags: VkRenderPassCreateFlags;
  attachmentCount: number;
  pAttachments: VkAttachmentDescription[] | null;
  subpassCount: number;
  pSubpasses: VkSubpassDescription[] | null;
  dependencyCount: number;
  pDependencies: VkSubpassDependency[] | null;
}

export interface VkRenderPassCreateInfo {
  sType: VkStructureType;
  pNext: null;
  flags: VkRenderPassCreateFlags;
  attachmentCount: number;
  pAttachments: VkAttachmentDescription[] | null;
  subpassCount: number;
  pSubpasses: VkSubpassDescription[] | null;
  dependencyCount: number;
  pDependencies: VkSubpassDependency[] | null;
}


/** ## VkClearDepthStencilValue ## */
interface VkClearDepthStencilValueInitializer {
  depth?: number;
  stencil?: number;
}

declare var VkClearDepthStencilValue: {
  prototype: VkClearDepthStencilValue;
  new(param?: VkClearDepthStencilValueInitializer | null): VkClearDepthStencilValue;
  depth: number;
  stencil: number;
}

export interface VkClearDepthStencilValue {
  depth: number;
  stencil: number;
}


/** ## VkClearValue ## */
interface VkClearValueInitializer {
  color?: VkClearColorValue | null;
  depthStencil?: VkClearDepthStencilValue | null;
}

declare var VkClearValue: {
  prototype: VkClearValue;
  new(param?: VkClearValueInitializer | null): VkClearValue;
  color: VkClearColorValue | null;
  depthStencil: VkClearDepthStencilValue | null;
}

export interface VkClearValue {
  color: VkClearColorValue | null;
  depthStencil: VkClearDepthStencilValue | null;
}


/** ## VkOffset2D ## */
interface VkOffset2DInitializer {
  x?: number;
  y?: number;
}

declare var VkOffset2D: {
  prototype: VkOffset2D;
  new(param?: VkOffset2DInitializer | null): VkOffset2D;
  x: number;
  y: number;
}

export interface VkOffset2D {
  x: number;
  y: number;
}


/** ## VkRect2D ## */
interface VkRect2DInitializer {
  offset?: VkOffset2D | null;
  extent?: VkExtent2D | null;
}

declare var VkRect2D: {
  prototype: VkRect2D;
  new(param?: VkRect2DInitializer | null): VkRect2D;
  offset: VkOffset2D | null;
  extent: VkExtent2D | null;
}

export interface VkRect2D {
  offset: VkOffset2D | null;
  extent: VkExtent2D | null;
}


/** ## VkRenderPassBeginInfo ## */
interface VkRenderPassBeginInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  renderPass?: VkRenderPass | null;
  framebuffer?: VkFramebuffer | null;
  renderArea?: VkRect2D | null;
  clearValueCount?: number;
  pClearValues?: VkClearValue[] | null;
}

declare var VkRenderPassBeginInfo: {
  prototype: VkRenderPassBeginInfo;
  new(param?: VkRenderPassBeginInfoInitializer | null): VkRenderPassBeginInfo;
  sType: VkStructureType;
  pNext: null;
  renderPass: VkRenderPass | null;
  framebuffer: VkFramebuffer | null;
  renderArea: VkRect2D | null;
  clearValueCount: number;
  pClearValues: VkClearValue[] | null;
}

export interface VkRenderPassBeginInfo {
  sType: VkStructureType;
  pNext: null;
  renderPass: VkRenderPass | null;
  framebuffer: VkFramebuffer | null;
  renderArea: VkRect2D | null;
  clearValueCount: number;
  pClearValues: VkClearValue[] | null;
}


/** ## VkCommandBufferInheritanceInfo ## */
interface VkCommandBufferInheritanceInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  renderPass?: VkRenderPass | null;
  subpass?: number;
  framebuffer?: VkFramebuffer | null;
  occlusionQueryEnable?: number;
  queryFlags?: VkQueryControlFlagBits;
  pipelineStatistics?: VkQueryPipelineStatisticFlagBits;
}

declare var VkCommandBufferInheritanceInfo: {
  prototype: VkCommandBufferInheritanceInfo;
  new(param?: VkCommandBufferInheritanceInfoInitializer | null): VkCommandBufferInheritanceInfo;
  sType: VkStructureType;
  pNext: null;
  renderPass: VkRenderPass | null;
  subpass: number;
  framebuffer: VkFramebuffer | null;
  occlusionQueryEnable: number;
  queryFlags: VkQueryControlFlagBits;
  pipelineStatistics: VkQueryPipelineStatisticFlagBits;
}

export interface VkCommandBufferInheritanceInfo {
  sType: VkStructureType;
  pNext: null;
  renderPass: VkRenderPass | null;
  subpass: number;
  framebuffer: VkFramebuffer | null;
  occlusionQueryEnable: number;
  queryFlags: VkQueryControlFlagBits;
  pipelineStatistics: VkQueryPipelineStatisticFlagBits;
}


/** ## VkCommandBufferBeginInfo ## */
interface VkCommandBufferBeginInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: VkCommandBufferUsageFlagBits;
  pInheritanceInfo?: VkCommandBufferInheritanceInfo | null;
}

declare var VkCommandBufferBeginInfo: {
  prototype: VkCommandBufferBeginInfo;
  new(param?: VkCommandBufferBeginInfoInitializer | null): VkCommandBufferBeginInfo;
  sType: VkStructureType;
  pNext: null;
  flags: VkCommandBufferUsageFlagBits;
  pInheritanceInfo: VkCommandBufferInheritanceInfo | null;
}

export interface VkCommandBufferBeginInfo {
  sType: VkStructureType;
  pNext: null;
  flags: VkCommandBufferUsageFlagBits;
  pInheritanceInfo: VkCommandBufferInheritanceInfo | null;
}


/** ## VkCommandBufferAllocateInfo ## */
interface VkCommandBufferAllocateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  commandPool?: VkCommandPool | null;
  level?: VkCommandBufferLevel;
  commandBufferCount?: number;
}

declare var VkCommandBufferAllocateInfo: {
  prototype: VkCommandBufferAllocateInfo;
  new(param?: VkCommandBufferAllocateInfoInitializer | null): VkCommandBufferAllocateInfo;
  sType: VkStructureType;
  pNext: null;
  commandPool: VkCommandPool | null;
  level: VkCommandBufferLevel;
  commandBufferCount: number;
}

export interface VkCommandBufferAllocateInfo {
  sType: VkStructureType;
  pNext: null;
  commandPool: VkCommandPool | null;
  level: VkCommandBufferLevel;
  commandBufferCount: number;
}


/** ## VkCommandPoolCreateInfo ## */
interface VkCommandPoolCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: VkCommandPoolCreateFlagBits;
  queueFamilyIndex?: number;
}

declare var VkCommandPoolCreateInfo: {
  prototype: VkCommandPoolCreateInfo;
  new(param?: VkCommandPoolCreateInfoInitializer | null): VkCommandPoolCreateInfo;
  sType: VkStructureType;
  pNext: null;
  flags: VkCommandPoolCreateFlagBits;
  queueFamilyIndex: number;
}

export interface VkCommandPoolCreateInfo {
  sType: VkStructureType;
  pNext: null;
  flags: VkCommandPoolCreateFlagBits;
  queueFamilyIndex: number;
}


/** ## VkSamplerCreateInfo ## */
interface VkSamplerCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: VkSamplerCreateFlags;
  magFilter?: VkFilter;
  minFilter?: VkFilter;
  mipmapMode?: VkSamplerMipmapMode;
  addressModeU?: VkSamplerAddressMode;
  addressModeV?: VkSamplerAddressMode;
  addressModeW?: VkSamplerAddressMode;
  mipLodBias?: number;
  anisotropyEnable?: number;
  maxAnisotropy?: number;
  compareEnable?: number;
  compareOp?: VkCompareOp;
  minLod?: number;
  maxLod?: number;
  borderColor?: VkBorderColor;
  unnormalizedCoordinates?: number;
}

declare var VkSamplerCreateInfo: {
  prototype: VkSamplerCreateInfo;
  new(param?: VkSamplerCreateInfoInitializer | null): VkSamplerCreateInfo;
  sType: VkStructureType;
  pNext: null;
  flags: VkSamplerCreateFlags;
  magFilter: VkFilter;
  minFilter: VkFilter;
  mipmapMode: VkSamplerMipmapMode;
  addressModeU: VkSamplerAddressMode;
  addressModeV: VkSamplerAddressMode;
  addressModeW: VkSamplerAddressMode;
  mipLodBias: number;
  anisotropyEnable: number;
  maxAnisotropy: number;
  compareEnable: number;
  compareOp: VkCompareOp;
  minLod: number;
  maxLod: number;
  borderColor: VkBorderColor;
  unnormalizedCoordinates: number;
}

export interface VkSamplerCreateInfo {
  sType: VkStructureType;
  pNext: null;
  flags: VkSamplerCreateFlags;
  magFilter: VkFilter;
  minFilter: VkFilter;
  mipmapMode: VkSamplerMipmapMode;
  addressModeU: VkSamplerAddressMode;
  addressModeV: VkSamplerAddressMode;
  addressModeW: VkSamplerAddressMode;
  mipLodBias: number;
  anisotropyEnable: number;
  maxAnisotropy: number;
  compareEnable: number;
  compareOp: VkCompareOp;
  minLod: number;
  maxLod: number;
  borderColor: VkBorderColor;
  unnormalizedCoordinates: number;
}


/** ## VkPushConstantRange ## */
interface VkPushConstantRangeInitializer {
  stageFlags?: VkShaderStageFlagBits;
  offset?: number;
  size?: number;
}

declare var VkPushConstantRange: {
  prototype: VkPushConstantRange;
  new(param?: VkPushConstantRangeInitializer | null): VkPushConstantRange;
  stageFlags: VkShaderStageFlagBits;
  offset: number;
  size: number;
}

export interface VkPushConstantRange {
  stageFlags: VkShaderStageFlagBits;
  offset: number;
  size: number;
}


/** ## VkPipelineLayoutCreateInfo ## */
interface VkPipelineLayoutCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: VkPipelineLayoutCreateFlags;
  setLayoutCount?: number;
  pSetLayouts?: VkDescriptorSetLayout[] | null;
  pushConstantRangeCount?: number;
  pPushConstantRanges?: VkPushConstantRange[] | null;
}

declare var VkPipelineLayoutCreateInfo: {
  prototype: VkPipelineLayoutCreateInfo;
  new(param?: VkPipelineLayoutCreateInfoInitializer | null): VkPipelineLayoutCreateInfo;
  sType: VkStructureType;
  pNext: null;
  flags: VkPipelineLayoutCreateFlags;
  setLayoutCount: number;
  pSetLayouts: VkDescriptorSetLayout[] | null;
  pushConstantRangeCount: number;
  pPushConstantRanges: VkPushConstantRange[] | null;
}

export interface VkPipelineLayoutCreateInfo {
  sType: VkStructureType;
  pNext: null;
  flags: VkPipelineLayoutCreateFlags;
  setLayoutCount: number;
  pSetLayouts: VkDescriptorSetLayout[] | null;
  pushConstantRangeCount: number;
  pPushConstantRanges: VkPushConstantRange[] | null;
}


/** ## VkPipelineDynamicStateCreateInfo ## */
interface VkPipelineDynamicStateCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: VkPipelineDynamicStateCreateFlags;
  dynamicStateCount?: number;
  pDynamicStates?: Int32Array | null;
}

declare var VkPipelineDynamicStateCreateInfo: {
  prototype: VkPipelineDynamicStateCreateInfo;
  new(param?: VkPipelineDynamicStateCreateInfoInitializer | null): VkPipelineDynamicStateCreateInfo;
  sType: VkStructureType;
  pNext: null;
  flags: VkPipelineDynamicStateCreateFlags;
  dynamicStateCount: number;
  pDynamicStates: Int32Array | null;
}

export interface VkPipelineDynamicStateCreateInfo {
  sType: VkStructureType;
  pNext: null;
  flags: VkPipelineDynamicStateCreateFlags;
  dynamicStateCount: number;
  pDynamicStates: Int32Array | null;
}


/** ## VkPipelineColorBlendAttachmentState ## */
interface VkPipelineColorBlendAttachmentStateInitializer {
  blendEnable?: number;
  srcColorBlendFactor?: VkBlendFactor;
  dstColorBlendFactor?: VkBlendFactor;
  colorBlendOp?: VkBlendOp;
  srcAlphaBlendFactor?: VkBlendFactor;
  dstAlphaBlendFactor?: VkBlendFactor;
  alphaBlendOp?: VkBlendOp;
  colorWriteMask?: VkColorComponentFlagBits;
}

declare var VkPipelineColorBlendAttachmentState: {
  prototype: VkPipelineColorBlendAttachmentState;
  new(param?: VkPipelineColorBlendAttachmentStateInitializer | null): VkPipelineColorBlendAttachmentState;
  blendEnable: number;
  srcColorBlendFactor: VkBlendFactor;
  dstColorBlendFactor: VkBlendFactor;
  colorBlendOp: VkBlendOp;
  srcAlphaBlendFactor: VkBlendFactor;
  dstAlphaBlendFactor: VkBlendFactor;
  alphaBlendOp: VkBlendOp;
  colorWriteMask: VkColorComponentFlagBits;
}

export interface VkPipelineColorBlendAttachmentState {
  blendEnable: number;
  srcColorBlendFactor: VkBlendFactor;
  dstColorBlendFactor: VkBlendFactor;
  colorBlendOp: VkBlendOp;
  srcAlphaBlendFactor: VkBlendFactor;
  dstAlphaBlendFactor: VkBlendFactor;
  alphaBlendOp: VkBlendOp;
  colorWriteMask: VkColorComponentFlagBits;
}


/** ## VkPipelineColorBlendStateCreateInfo ## */
interface VkPipelineColorBlendStateCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: VkPipelineColorBlendStateCreateFlags;
  logicOpEnable?: number;
  logicOp?: VkLogicOp;
  attachmentCount?: number;
  pAttachments?: VkPipelineColorBlendAttachmentState[] | null;
  blendConstants?: number[] | null;
}

declare var VkPipelineColorBlendStateCreateInfo: {
  prototype: VkPipelineColorBlendStateCreateInfo;
  new(param?: VkPipelineColorBlendStateCreateInfoInitializer | null): VkPipelineColorBlendStateCreateInfo;
  sType: VkStructureType;
  pNext: null;
  flags: VkPipelineColorBlendStateCreateFlags;
  logicOpEnable: number;
  logicOp: VkLogicOp;
  attachmentCount: number;
  pAttachments: VkPipelineColorBlendAttachmentState[] | null;
  blendConstants: number[] | null;
}

export interface VkPipelineColorBlendStateCreateInfo {
  sType: VkStructureType;
  pNext: null;
  flags: VkPipelineColorBlendStateCreateFlags;
  logicOpEnable: number;
  logicOp: VkLogicOp;
  attachmentCount: number;
  pAttachments: VkPipelineColorBlendAttachmentState[] | null;
  blendConstants: number[] | null;
}


/** ## VkStencilOpState ## */
interface VkStencilOpStateInitializer {
  failOp?: VkStencilOp;
  passOp?: VkStencilOp;
  depthFailOp?: VkStencilOp;
  compareOp?: VkCompareOp;
  compareMask?: number;
  writeMask?: number;
  reference?: number;
}

declare var VkStencilOpState: {
  prototype: VkStencilOpState;
  new(param?: VkStencilOpStateInitializer | null): VkStencilOpState;
  failOp: VkStencilOp;
  passOp: VkStencilOp;
  depthFailOp: VkStencilOp;
  compareOp: VkCompareOp;
  compareMask: number;
  writeMask: number;
  reference: number;
}

export interface VkStencilOpState {
  failOp: VkStencilOp;
  passOp: VkStencilOp;
  depthFailOp: VkStencilOp;
  compareOp: VkCompareOp;
  compareMask: number;
  writeMask: number;
  reference: number;
}


/** ## VkPipelineDepthStencilStateCreateInfo ## */
interface VkPipelineDepthStencilStateCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: VkPipelineDepthStencilStateCreateFlags;
  depthTestEnable?: number;
  depthWriteEnable?: number;
  depthCompareOp?: VkCompareOp;
  depthBoundsTestEnable?: number;
  stencilTestEnable?: number;
  front?: VkStencilOpState | null;
  back?: VkStencilOpState | null;
  minDepthBounds?: number;
  maxDepthBounds?: number;
}

declare var VkPipelineDepthStencilStateCreateInfo: {
  prototype: VkPipelineDepthStencilStateCreateInfo;
  new(param?: VkPipelineDepthStencilStateCreateInfoInitializer | null): VkPipelineDepthStencilStateCreateInfo;
  sType: VkStructureType;
  pNext: null;
  flags: VkPipelineDepthStencilStateCreateFlags;
  depthTestEnable: number;
  depthWriteEnable: number;
  depthCompareOp: VkCompareOp;
  depthBoundsTestEnable: number;
  stencilTestEnable: number;
  front: VkStencilOpState | null;
  back: VkStencilOpState | null;
  minDepthBounds: number;
  maxDepthBounds: number;
}

export interface VkPipelineDepthStencilStateCreateInfo {
  sType: VkStructureType;
  pNext: null;
  flags: VkPipelineDepthStencilStateCreateFlags;
  depthTestEnable: number;
  depthWriteEnable: number;
  depthCompareOp: VkCompareOp;
  depthBoundsTestEnable: number;
  stencilTestEnable: number;
  front: VkStencilOpState | null;
  back: VkStencilOpState | null;
  minDepthBounds: number;
  maxDepthBounds: number;
}


/** ## VkPipelineMultisampleStateCreateInfo ## */
interface VkPipelineMultisampleStateCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: VkPipelineMultisampleStateCreateFlags;
  rasterizationSamples?: VkSampleCountFlags;
  sampleShadingEnable?: number;
  minSampleShading?: number;
  pSampleMask?: Uint32Array | null;
  alphaToCoverageEnable?: number;
  alphaToOneEnable?: number;
}

declare var VkPipelineMultisampleStateCreateInfo: {
  prototype: VkPipelineMultisampleStateCreateInfo;
  new(param?: VkPipelineMultisampleStateCreateInfoInitializer | null): VkPipelineMultisampleStateCreateInfo;
  sType: VkStructureType;
  pNext: null;
  flags: VkPipelineMultisampleStateCreateFlags;
  rasterizationSamples: VkSampleCountFlags;
  sampleShadingEnable: number;
  minSampleShading: number;
  pSampleMask: Uint32Array | null;
  alphaToCoverageEnable: number;
  alphaToOneEnable: number;
}

export interface VkPipelineMultisampleStateCreateInfo {
  sType: VkStructureType;
  pNext: null;
  flags: VkPipelineMultisampleStateCreateFlags;
  rasterizationSamples: VkSampleCountFlags;
  sampleShadingEnable: number;
  minSampleShading: number;
  pSampleMask: Uint32Array | null;
  alphaToCoverageEnable: number;
  alphaToOneEnable: number;
}


/** ## VkPipelineRasterizationStateCreateInfo ## */
interface VkPipelineRasterizationStateCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: VkPipelineRasterizationStateCreateFlags;
  depthClampEnable?: number;
  rasterizerDiscardEnable?: number;
  polygonMode?: VkPolygonMode;
  cullMode?: VkCullModeFlagBits;
  frontFace?: VkFrontFace;
  depthBiasEnable?: number;
  depthBiasConstantFactor?: number;
  depthBiasClamp?: number;
  depthBiasSlopeFactor?: number;
  lineWidth?: number;
}

declare var VkPipelineRasterizationStateCreateInfo: {
  prototype: VkPipelineRasterizationStateCreateInfo;
  new(param?: VkPipelineRasterizationStateCreateInfoInitializer | null): VkPipelineRasterizationStateCreateInfo;
  sType: VkStructureType;
  pNext: null;
  flags: VkPipelineRasterizationStateCreateFlags;
  depthClampEnable: number;
  rasterizerDiscardEnable: number;
  polygonMode: VkPolygonMode;
  cullMode: VkCullModeFlagBits;
  frontFace: VkFrontFace;
  depthBiasEnable: number;
  depthBiasConstantFactor: number;
  depthBiasClamp: number;
  depthBiasSlopeFactor: number;
  lineWidth: number;
}

export interface VkPipelineRasterizationStateCreateInfo {
  sType: VkStructureType;
  pNext: null;
  flags: VkPipelineRasterizationStateCreateFlags;
  depthClampEnable: number;
  rasterizerDiscardEnable: number;
  polygonMode: VkPolygonMode;
  cullMode: VkCullModeFlagBits;
  frontFace: VkFrontFace;
  depthBiasEnable: number;
  depthBiasConstantFactor: number;
  depthBiasClamp: number;
  depthBiasSlopeFactor: number;
  lineWidth: number;
}


/** ## VkViewport ## */
interface VkViewportInitializer {
  x?: number;
  y?: number;
  width?: number;
  height?: number;
  minDepth?: number;
  maxDepth?: number;
}

declare var VkViewport: {
  prototype: VkViewport;
  new(param?: VkViewportInitializer | null): VkViewport;
  x: number;
  y: number;
  width: number;
  height: number;
  minDepth: number;
  maxDepth: number;
}

export interface VkViewport {
  x: number;
  y: number;
  width: number;
  height: number;
  minDepth: number;
  maxDepth: number;
}


/** ## VkPipelineViewportStateCreateInfo ## */
interface VkPipelineViewportStateCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: VkPipelineViewportStateCreateFlags;
  viewportCount?: number;
  pViewports?: VkViewport[] | null;
  scissorCount?: number;
  pScissors?: VkRect2D[] | null;
}

declare var VkPipelineViewportStateCreateInfo: {
  prototype: VkPipelineViewportStateCreateInfo;
  new(param?: VkPipelineViewportStateCreateInfoInitializer | null): VkPipelineViewportStateCreateInfo;
  sType: VkStructureType;
  pNext: null;
  flags: VkPipelineViewportStateCreateFlags;
  viewportCount: number;
  pViewports: VkViewport[] | null;
  scissorCount: number;
  pScissors: VkRect2D[] | null;
}

export interface VkPipelineViewportStateCreateInfo {
  sType: VkStructureType;
  pNext: null;
  flags: VkPipelineViewportStateCreateFlags;
  viewportCount: number;
  pViewports: VkViewport[] | null;
  scissorCount: number;
  pScissors: VkRect2D[] | null;
}


/** ## VkPipelineTessellationStateCreateInfo ## */
interface VkPipelineTessellationStateCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: VkPipelineTessellationStateCreateFlags;
  patchControlPoints?: number;
}

declare var VkPipelineTessellationStateCreateInfo: {
  prototype: VkPipelineTessellationStateCreateInfo;
  new(param?: VkPipelineTessellationStateCreateInfoInitializer | null): VkPipelineTessellationStateCreateInfo;
  sType: VkStructureType;
  pNext: null;
  flags: VkPipelineTessellationStateCreateFlags;
  patchControlPoints: number;
}

export interface VkPipelineTessellationStateCreateInfo {
  sType: VkStructureType;
  pNext: null;
  flags: VkPipelineTessellationStateCreateFlags;
  patchControlPoints: number;
}


/** ## VkPipelineInputAssemblyStateCreateInfo ## */
interface VkPipelineInputAssemblyStateCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: VkPipelineInputAssemblyStateCreateFlags;
  topology?: VkPrimitiveTopology;
  primitiveRestartEnable?: number;
}

declare var VkPipelineInputAssemblyStateCreateInfo: {
  prototype: VkPipelineInputAssemblyStateCreateInfo;
  new(param?: VkPipelineInputAssemblyStateCreateInfoInitializer | null): VkPipelineInputAssemblyStateCreateInfo;
  sType: VkStructureType;
  pNext: null;
  flags: VkPipelineInputAssemblyStateCreateFlags;
  topology: VkPrimitiveTopology;
  primitiveRestartEnable: number;
}

export interface VkPipelineInputAssemblyStateCreateInfo {
  sType: VkStructureType;
  pNext: null;
  flags: VkPipelineInputAssemblyStateCreateFlags;
  topology: VkPrimitiveTopology;
  primitiveRestartEnable: number;
}


/** ## VkVertexInputAttributeDescription ## */
interface VkVertexInputAttributeDescriptionInitializer {
  location?: number;
  binding?: number;
  format?: VkFormat;
  offset?: number;
}

declare var VkVertexInputAttributeDescription: {
  prototype: VkVertexInputAttributeDescription;
  new(param?: VkVertexInputAttributeDescriptionInitializer | null): VkVertexInputAttributeDescription;
  location: number;
  binding: number;
  format: VkFormat;
  offset: number;
}

export interface VkVertexInputAttributeDescription {
  location: number;
  binding: number;
  format: VkFormat;
  offset: number;
}


/** ## VkVertexInputBindingDescription ## */
interface VkVertexInputBindingDescriptionInitializer {
  binding?: number;
  stride?: number;
  inputRate?: VkVertexInputRate;
}

declare var VkVertexInputBindingDescription: {
  prototype: VkVertexInputBindingDescription;
  new(param?: VkVertexInputBindingDescriptionInitializer | null): VkVertexInputBindingDescription;
  binding: number;
  stride: number;
  inputRate: VkVertexInputRate;
}

export interface VkVertexInputBindingDescription {
  binding: number;
  stride: number;
  inputRate: VkVertexInputRate;
}


/** ## VkPipelineVertexInputStateCreateInfo ## */
interface VkPipelineVertexInputStateCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: VkPipelineVertexInputStateCreateFlags;
  vertexBindingDescriptionCount?: number;
  pVertexBindingDescriptions?: VkVertexInputBindingDescription[] | null;
  vertexAttributeDescriptionCount?: number;
  pVertexAttributeDescriptions?: VkVertexInputAttributeDescription[] | null;
}

declare var VkPipelineVertexInputStateCreateInfo: {
  prototype: VkPipelineVertexInputStateCreateInfo;
  new(param?: VkPipelineVertexInputStateCreateInfoInitializer | null): VkPipelineVertexInputStateCreateInfo;
  sType: VkStructureType;
  pNext: null;
  flags: VkPipelineVertexInputStateCreateFlags;
  vertexBindingDescriptionCount: number;
  pVertexBindingDescriptions: VkVertexInputBindingDescription[] | null;
  vertexAttributeDescriptionCount: number;
  pVertexAttributeDescriptions: VkVertexInputAttributeDescription[] | null;
}

export interface VkPipelineVertexInputStateCreateInfo {
  sType: VkStructureType;
  pNext: null;
  flags: VkPipelineVertexInputStateCreateFlags;
  vertexBindingDescriptionCount: number;
  pVertexBindingDescriptions: VkVertexInputBindingDescription[] | null;
  vertexAttributeDescriptionCount: number;
  pVertexAttributeDescriptions: VkVertexInputAttributeDescription[] | null;
}


/** ## VkSpecializationMapEntry ## */
interface VkSpecializationMapEntryInitializer {
  constantID?: number;
  offset?: number;
  size?: number;
}

declare var VkSpecializationMapEntry: {
  prototype: VkSpecializationMapEntry;
  new(param?: VkSpecializationMapEntryInitializer | null): VkSpecializationMapEntry;
  constantID: number;
  offset: number;
  size: number;
}

export interface VkSpecializationMapEntry {
  constantID: number;
  offset: number;
  size: number;
}


/** ## VkSpecializationInfo ## */
interface VkSpecializationInfoInitializer {
  mapEntryCount?: number;
  pMapEntries?: VkSpecializationMapEntry[] | null;
  dataSize?: number;
  pData?: null;
}

declare var VkSpecializationInfo: {
  prototype: VkSpecializationInfo;
  new(param?: VkSpecializationInfoInitializer | null): VkSpecializationInfo;
  mapEntryCount: number;
  pMapEntries: VkSpecializationMapEntry[] | null;
  dataSize: number;
  pData: null;
}

export interface VkSpecializationInfo {
  mapEntryCount: number;
  pMapEntries: VkSpecializationMapEntry[] | null;
  dataSize: number;
  pData: null;
}


/** ## VkPipelineShaderStageCreateInfo ## */
interface VkPipelineShaderStageCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: VkPipelineShaderStageCreateFlags;
  stage?: VkShaderStageFlags;
  module?: VkShaderModule | null;
  pName?: string | null;
  pSpecializationInfo?: VkSpecializationInfo | null;
}

declare var VkPipelineShaderStageCreateInfo: {
  prototype: VkPipelineShaderStageCreateInfo;
  new(param?: VkPipelineShaderStageCreateInfoInitializer | null): VkPipelineShaderStageCreateInfo;
  sType: VkStructureType;
  pNext: null;
  flags: VkPipelineShaderStageCreateFlags;
  stage: VkShaderStageFlags;
  module: VkShaderModule | null;
  pName: string | null;
  pSpecializationInfo: VkSpecializationInfo | null;
}

export interface VkPipelineShaderStageCreateInfo {
  sType: VkStructureType;
  pNext: null;
  flags: VkPipelineShaderStageCreateFlags;
  stage: VkShaderStageFlags;
  module: VkShaderModule | null;
  pName: string | null;
  pSpecializationInfo: VkSpecializationInfo | null;
}


/** ## VkGraphicsPipelineCreateInfo ## */
interface VkGraphicsPipelineCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: VkPipelineCreateFlagBits;
  stageCount?: number;
  pStages?: VkPipelineShaderStageCreateInfo[] | null;
  pVertexInputState?: VkPipelineVertexInputStateCreateInfo | null;
  pInputAssemblyState?: VkPipelineInputAssemblyStateCreateInfo | null;
  pTessellationState?: VkPipelineTessellationStateCreateInfo | null;
  pViewportState?: VkPipelineViewportStateCreateInfo | null;
  pRasterizationState?: VkPipelineRasterizationStateCreateInfo | null;
  pMultisampleState?: VkPipelineMultisampleStateCreateInfo | null;
  pDepthStencilState?: VkPipelineDepthStencilStateCreateInfo | null;
  pColorBlendState?: VkPipelineColorBlendStateCreateInfo | null;
  pDynamicState?: VkPipelineDynamicStateCreateInfo | null;
  layout?: VkPipelineLayout | null;
  renderPass?: VkRenderPass | null;
  subpass?: number;
  basePipelineHandle?: VkPipeline | null;
  basePipelineIndex?: number;
}

declare var VkGraphicsPipelineCreateInfo: {
  prototype: VkGraphicsPipelineCreateInfo;
  new(param?: VkGraphicsPipelineCreateInfoInitializer | null): VkGraphicsPipelineCreateInfo;
  sType: VkStructureType;
  pNext: null;
  flags: VkPipelineCreateFlagBits;
  stageCount: number;
  pStages: VkPipelineShaderStageCreateInfo[] | null;
  pVertexInputState: VkPipelineVertexInputStateCreateInfo | null;
  pInputAssemblyState: VkPipelineInputAssemblyStateCreateInfo | null;
  pTessellationState: VkPipelineTessellationStateCreateInfo | null;
  pViewportState: VkPipelineViewportStateCreateInfo | null;
  pRasterizationState: VkPipelineRasterizationStateCreateInfo | null;
  pMultisampleState: VkPipelineMultisampleStateCreateInfo | null;
  pDepthStencilState: VkPipelineDepthStencilStateCreateInfo | null;
  pColorBlendState: VkPipelineColorBlendStateCreateInfo | null;
  pDynamicState: VkPipelineDynamicStateCreateInfo | null;
  layout: VkPipelineLayout | null;
  renderPass: VkRenderPass | null;
  subpass: number;
  basePipelineHandle: VkPipeline | null;
  basePipelineIndex: number;
}

export interface VkGraphicsPipelineCreateInfo {
  sType: VkStructureType;
  pNext: null;
  flags: VkPipelineCreateFlagBits;
  stageCount: number;
  pStages: VkPipelineShaderStageCreateInfo[] | null;
  pVertexInputState: VkPipelineVertexInputStateCreateInfo | null;
  pInputAssemblyState: VkPipelineInputAssemblyStateCreateInfo | null;
  pTessellationState: VkPipelineTessellationStateCreateInfo | null;
  pViewportState: VkPipelineViewportStateCreateInfo | null;
  pRasterizationState: VkPipelineRasterizationStateCreateInfo | null;
  pMultisampleState: VkPipelineMultisampleStateCreateInfo | null;
  pDepthStencilState: VkPipelineDepthStencilStateCreateInfo | null;
  pColorBlendState: VkPipelineColorBlendStateCreateInfo | null;
  pDynamicState: VkPipelineDynamicStateCreateInfo | null;
  layout: VkPipelineLayout | null;
  renderPass: VkRenderPass | null;
  subpass: number;
  basePipelineHandle: VkPipeline | null;
  basePipelineIndex: number;
}


/** ## VkDescriptorSetAllocateInfo ## */
interface VkDescriptorSetAllocateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  descriptorPool?: VkDescriptorPool | null;
  descriptorSetCount?: number;
  pSetLayouts?: VkDescriptorSetLayout[] | null;
}

declare var VkDescriptorSetAllocateInfo: {
  prototype: VkDescriptorSetAllocateInfo;
  new(param?: VkDescriptorSetAllocateInfoInitializer | null): VkDescriptorSetAllocateInfo;
  sType: VkStructureType;
  pNext: null;
  descriptorPool: VkDescriptorPool | null;
  descriptorSetCount: number;
  pSetLayouts: VkDescriptorSetLayout[] | null;
}

export interface VkDescriptorSetAllocateInfo {
  sType: VkStructureType;
  pNext: null;
  descriptorPool: VkDescriptorPool | null;
  descriptorSetCount: number;
  pSetLayouts: VkDescriptorSetLayout[] | null;
}


/** ## VkDescriptorPoolSize ## */
interface VkDescriptorPoolSizeInitializer {
  type?: VkDescriptorType;
  descriptorCount?: number;
}

declare var VkDescriptorPoolSize: {
  prototype: VkDescriptorPoolSize;
  new(param?: VkDescriptorPoolSizeInitializer | null): VkDescriptorPoolSize;
  type: VkDescriptorType;
  descriptorCount: number;
}

export interface VkDescriptorPoolSize {
  type: VkDescriptorType;
  descriptorCount: number;
}


/** ## VkDescriptorPoolCreateInfo ## */
interface VkDescriptorPoolCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: VkDescriptorPoolCreateFlagBits;
  maxSets?: number;
  poolSizeCount?: number;
  pPoolSizes?: VkDescriptorPoolSize[] | null;
}

declare var VkDescriptorPoolCreateInfo: {
  prototype: VkDescriptorPoolCreateInfo;
  new(param?: VkDescriptorPoolCreateInfoInitializer | null): VkDescriptorPoolCreateInfo;
  sType: VkStructureType;
  pNext: null;
  flags: VkDescriptorPoolCreateFlagBits;
  maxSets: number;
  poolSizeCount: number;
  pPoolSizes: VkDescriptorPoolSize[] | null;
}

export interface VkDescriptorPoolCreateInfo {
  sType: VkStructureType;
  pNext: null;
  flags: VkDescriptorPoolCreateFlagBits;
  maxSets: number;
  poolSizeCount: number;
  pPoolSizes: VkDescriptorPoolSize[] | null;
}


/** ## VkDescriptorSetLayoutBinding ## */
interface VkDescriptorSetLayoutBindingInitializer {
  binding?: number;
  descriptorType?: VkDescriptorType;
  descriptorCount?: number;
  stageFlags?: VkShaderStageFlagBits;
  pImmutableSamplers?: VkSampler[] | null;
}

declare var VkDescriptorSetLayoutBinding: {
  prototype: VkDescriptorSetLayoutBinding;
  new(param?: VkDescriptorSetLayoutBindingInitializer | null): VkDescriptorSetLayoutBinding;
  binding: number;
  descriptorType: VkDescriptorType;
  descriptorCount: number;
  stageFlags: VkShaderStageFlagBits;
  pImmutableSamplers: VkSampler[] | null;
}

export interface VkDescriptorSetLayoutBinding {
  binding: number;
  descriptorType: VkDescriptorType;
  descriptorCount: number;
  stageFlags: VkShaderStageFlagBits;
  pImmutableSamplers: VkSampler[] | null;
}


/** ## VkDescriptorSetLayoutCreateInfo ## */
interface VkDescriptorSetLayoutCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: VkDescriptorSetLayoutCreateFlagBits;
  bindingCount?: number;
  pBindings?: VkDescriptorSetLayoutBinding[] | null;
}

declare var VkDescriptorSetLayoutCreateInfo: {
  prototype: VkDescriptorSetLayoutCreateInfo;
  new(param?: VkDescriptorSetLayoutCreateInfoInitializer | null): VkDescriptorSetLayoutCreateInfo;
  sType: VkStructureType;
  pNext: null;
  flags: VkDescriptorSetLayoutCreateFlagBits;
  bindingCount: number;
  pBindings: VkDescriptorSetLayoutBinding[] | null;
}

export interface VkDescriptorSetLayoutCreateInfo {
  sType: VkStructureType;
  pNext: null;
  flags: VkDescriptorSetLayoutCreateFlagBits;
  bindingCount: number;
  pBindings: VkDescriptorSetLayoutBinding[] | null;
}


/** ## VkShaderModuleCreateInfo ## */
interface VkShaderModuleCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: VkShaderModuleCreateFlags;
  codeSize?: number;
  pCode?: Uint8Array | null;
}

declare var VkShaderModuleCreateInfo: {
  prototype: VkShaderModuleCreateInfo;
  new(param?: VkShaderModuleCreateInfoInitializer | null): VkShaderModuleCreateInfo;
  sType: VkStructureType;
  pNext: null;
  flags: VkShaderModuleCreateFlags;
  codeSize: number;
  pCode: Uint8Array | null;
}

export interface VkShaderModuleCreateInfo {
  sType: VkStructureType;
  pNext: null;
  flags: VkShaderModuleCreateFlags;
  codeSize: number;
  pCode: Uint8Array | null;
}


/** ## VkExtent3D ## */
interface VkExtent3DInitializer {
  width?: number;
  height?: number;
  depth?: number;
}

declare var VkExtent3D: {
  prototype: VkExtent3D;
  new(param?: VkExtent3DInitializer | null): VkExtent3D;
  width: number;
  height: number;
  depth: number;
}

export interface VkExtent3D {
  width: number;
  height: number;
  depth: number;
}


/** ## VkOffset3D ## */
interface VkOffset3DInitializer {
  x?: number;
  y?: number;
  z?: number;
}

declare var VkOffset3D: {
  prototype: VkOffset3D;
  new(param?: VkOffset3DInitializer | null): VkOffset3D;
  x: number;
  y: number;
  z: number;
}

export interface VkOffset3D {
  x: number;
  y: number;
  z: number;
}


/** ## VkImageSubresourceLayers ## */
interface VkImageSubresourceLayersInitializer {
  aspectMask?: VkImageAspectFlagBits;
  mipLevel?: number;
  baseArrayLayer?: number;
  layerCount?: number;
}

declare var VkImageSubresourceLayers: {
  prototype: VkImageSubresourceLayers;
  new(param?: VkImageSubresourceLayersInitializer | null): VkImageSubresourceLayers;
  aspectMask: VkImageAspectFlagBits;
  mipLevel: number;
  baseArrayLayer: number;
  layerCount: number;
}

export interface VkImageSubresourceLayers {
  aspectMask: VkImageAspectFlagBits;
  mipLevel: number;
  baseArrayLayer: number;
  layerCount: number;
}


/** ## VkBufferImageCopy ## */
interface VkBufferImageCopyInitializer {
  bufferOffset?: number;
  bufferRowLength?: number;
  bufferImageHeight?: number;
  imageSubresource?: VkImageSubresourceLayers | null;
  imageOffset?: VkOffset3D | null;
  imageExtent?: VkExtent3D | null;
}

declare var VkBufferImageCopy: {
  prototype: VkBufferImageCopy;
  new(param?: VkBufferImageCopyInitializer | null): VkBufferImageCopy;
  bufferOffset: number;
  bufferRowLength: number;
  bufferImageHeight: number;
  imageSubresource: VkImageSubresourceLayers | null;
  imageOffset: VkOffset3D | null;
  imageExtent: VkExtent3D | null;
}

export interface VkBufferImageCopy {
  bufferOffset: number;
  bufferRowLength: number;
  bufferImageHeight: number;
  imageSubresource: VkImageSubresourceLayers | null;
  imageOffset: VkOffset3D | null;
  imageExtent: VkExtent3D | null;
}


/** ## VkBufferCopy ## */
interface VkBufferCopyInitializer {
  srcOffset?: number;
  dstOffset?: number;
  size?: number;
}

declare var VkBufferCopy: {
  prototype: VkBufferCopy;
  new(param?: VkBufferCopyInitializer | null): VkBufferCopy;
  srcOffset: number;
  dstOffset: number;
  size: number;
}

export interface VkBufferCopy {
  srcOffset: number;
  dstOffset: number;
  size: number;
}


/** ## VkImageSubresourceRange ## */
interface VkImageSubresourceRangeInitializer {
  aspectMask?: VkImageAspectFlagBits;
  baseMipLevel?: number;
  levelCount?: number;
  baseArrayLayer?: number;
  layerCount?: number;
}

declare var VkImageSubresourceRange: {
  prototype: VkImageSubresourceRange;
  new(param?: VkImageSubresourceRangeInitializer | null): VkImageSubresourceRange;
  aspectMask: VkImageAspectFlagBits;
  baseMipLevel: number;
  levelCount: number;
  baseArrayLayer: number;
  layerCount: number;
}

export interface VkImageSubresourceRange {
  aspectMask: VkImageAspectFlagBits;
  baseMipLevel: number;
  levelCount: number;
  baseArrayLayer: number;
  layerCount: number;
}


/** ## VkComponentMapping ## */
interface VkComponentMappingInitializer {
  r?: VkComponentSwizzle;
  g?: VkComponentSwizzle;
  b?: VkComponentSwizzle;
  a?: VkComponentSwizzle;
}

declare var VkComponentMapping: {
  prototype: VkComponentMapping;
  new(param?: VkComponentMappingInitializer | null): VkComponentMapping;
  r: VkComponentSwizzle;
  g: VkComponentSwizzle;
  b: VkComponentSwizzle;
  a: VkComponentSwizzle;
}

export interface VkComponentMapping {
  r: VkComponentSwizzle;
  g: VkComponentSwizzle;
  b: VkComponentSwizzle;
  a: VkComponentSwizzle;
}


/** ## VkImageViewCreateInfo ## */
interface VkImageViewCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: VkImageViewCreateFlags;
  image?: VkImage | null;
  viewType?: VkImageViewType;
  format?: VkFormat;
  components?: VkComponentMapping | null;
  subresourceRange?: VkImageSubresourceRange | null;
}

declare var VkImageViewCreateInfo: {
  prototype: VkImageViewCreateInfo;
  new(param?: VkImageViewCreateInfoInitializer | null): VkImageViewCreateInfo;
  sType: VkStructureType;
  pNext: null;
  flags: VkImageViewCreateFlags;
  image: VkImage | null;
  viewType: VkImageViewType;
  format: VkFormat;
  components: VkComponentMapping | null;
  subresourceRange: VkImageSubresourceRange | null;
}

export interface VkImageViewCreateInfo {
  sType: VkStructureType;
  pNext: null;
  flags: VkImageViewCreateFlags;
  image: VkImage | null;
  viewType: VkImageViewType;
  format: VkFormat;
  components: VkComponentMapping | null;
  subresourceRange: VkImageSubresourceRange | null;
}


/** ## VkSubresourceLayout ## */
interface VkSubresourceLayoutInitializer {
  readonly offset?: number;
  readonly size?: number;
  readonly rowPitch?: number;
  readonly arrayPitch?: number;
  readonly depthPitch?: number;
}

declare var VkSubresourceLayout: {
  prototype: VkSubresourceLayout;
  new(param?: VkSubresourceLayoutInitializer | null): VkSubresourceLayout;
  readonly offset: number;
  readonly size: number;
  readonly rowPitch: number;
  readonly arrayPitch: number;
  readonly depthPitch: number;
}

export interface VkSubresourceLayout {
  readonly offset: number;
  readonly size: number;
  readonly rowPitch: number;
  readonly arrayPitch: number;
  readonly depthPitch: number;
}


/** ## VkImageCreateInfo ## */
interface VkImageCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: VkImageCreateFlagBits;
  imageType?: VkImageType;
  format?: VkFormat;
  extent?: VkExtent3D | null;
  mipLevels?: number;
  arrayLayers?: number;
  samples?: VkSampleCountFlags;
  tiling?: VkImageTiling;
  usage?: VkImageUsageFlagBits;
  sharingMode?: VkSharingMode;
  queueFamilyIndexCount?: number;
  pQueueFamilyIndices?: Uint32Array | null;
  initialLayout?: VkImageLayout;
}

declare var VkImageCreateInfo: {
  prototype: VkImageCreateInfo;
  new(param?: VkImageCreateInfoInitializer | null): VkImageCreateInfo;
  sType: VkStructureType;
  pNext: null;
  flags: VkImageCreateFlagBits;
  imageType: VkImageType;
  format: VkFormat;
  extent: VkExtent3D | null;
  mipLevels: number;
  arrayLayers: number;
  samples: VkSampleCountFlags;
  tiling: VkImageTiling;
  usage: VkImageUsageFlagBits;
  sharingMode: VkSharingMode;
  queueFamilyIndexCount: number;
  pQueueFamilyIndices: Uint32Array | null;
  initialLayout: VkImageLayout;
}

export interface VkImageCreateInfo {
  sType: VkStructureType;
  pNext: null;
  flags: VkImageCreateFlagBits;
  imageType: VkImageType;
  format: VkFormat;
  extent: VkExtent3D | null;
  mipLevels: number;
  arrayLayers: number;
  samples: VkSampleCountFlags;
  tiling: VkImageTiling;
  usage: VkImageUsageFlagBits;
  sharingMode: VkSharingMode;
  queueFamilyIndexCount: number;
  pQueueFamilyIndices: Uint32Array | null;
  initialLayout: VkImageLayout;
}


/** ## VkImageMemoryBarrier ## */
interface VkImageMemoryBarrierInitializer {
  sType?: VkStructureType;
  pNext?: null;
  srcAccessMask?: VkAccessFlagBits;
  dstAccessMask?: VkAccessFlagBits;
  oldLayout?: VkImageLayout;
  newLayout?: VkImageLayout;
  srcQueueFamilyIndex?: number;
  dstQueueFamilyIndex?: number;
  image?: VkImage | null;
  subresourceRange?: VkImageSubresourceRange | null;
}

declare var VkImageMemoryBarrier: {
  prototype: VkImageMemoryBarrier;
  new(param?: VkImageMemoryBarrierInitializer | null): VkImageMemoryBarrier;
  sType: VkStructureType;
  pNext: null;
  srcAccessMask: VkAccessFlagBits;
  dstAccessMask: VkAccessFlagBits;
  oldLayout: VkImageLayout;
  newLayout: VkImageLayout;
  srcQueueFamilyIndex: number;
  dstQueueFamilyIndex: number;
  image: VkImage | null;
  subresourceRange: VkImageSubresourceRange | null;
}

export interface VkImageMemoryBarrier {
  sType: VkStructureType;
  pNext: null;
  srcAccessMask: VkAccessFlagBits;
  dstAccessMask: VkAccessFlagBits;
  oldLayout: VkImageLayout;
  newLayout: VkImageLayout;
  srcQueueFamilyIndex: number;
  dstQueueFamilyIndex: number;
  image: VkImage | null;
  subresourceRange: VkImageSubresourceRange | null;
}


/** ## VkBufferMemoryBarrier ## */
interface VkBufferMemoryBarrierInitializer {
  sType?: VkStructureType;
  pNext?: null;
  srcAccessMask?: VkAccessFlagBits;
  dstAccessMask?: VkAccessFlagBits;
  srcQueueFamilyIndex?: number;
  dstQueueFamilyIndex?: number;
  buffer?: VkBuffer | null;
  offset?: number;
  size?: number;
}

declare var VkBufferMemoryBarrier: {
  prototype: VkBufferMemoryBarrier;
  new(param?: VkBufferMemoryBarrierInitializer | null): VkBufferMemoryBarrier;
  sType: VkStructureType;
  pNext: null;
  srcAccessMask: VkAccessFlagBits;
  dstAccessMask: VkAccessFlagBits;
  srcQueueFamilyIndex: number;
  dstQueueFamilyIndex: number;
  buffer: VkBuffer | null;
  offset: number;
  size: number;
}

export interface VkBufferMemoryBarrier {
  sType: VkStructureType;
  pNext: null;
  srcAccessMask: VkAccessFlagBits;
  dstAccessMask: VkAccessFlagBits;
  srcQueueFamilyIndex: number;
  dstQueueFamilyIndex: number;
  buffer: VkBuffer | null;
  offset: number;
  size: number;
}


/** ## VkMemoryBarrier ## */
interface VkMemoryBarrierInitializer {
  sType?: VkStructureType;
  pNext?: null;
  srcAccessMask?: VkAccessFlagBits;
  dstAccessMask?: VkAccessFlagBits;
}

declare var VkMemoryBarrier: {
  prototype: VkMemoryBarrier;
  new(param?: VkMemoryBarrierInitializer | null): VkMemoryBarrier;
  sType: VkStructureType;
  pNext: null;
  srcAccessMask: VkAccessFlagBits;
  dstAccessMask: VkAccessFlagBits;
}

export interface VkMemoryBarrier {
  sType: VkStructureType;
  pNext: null;
  srcAccessMask: VkAccessFlagBits;
  dstAccessMask: VkAccessFlagBits;
}


/** ## VkImageSubresource ## */
interface VkImageSubresourceInitializer {
  aspectMask?: VkImageAspectFlagBits;
  mipLevel?: number;
  arrayLayer?: number;
}

declare var VkImageSubresource: {
  prototype: VkImageSubresource;
  new(param?: VkImageSubresourceInitializer | null): VkImageSubresource;
  aspectMask: VkImageAspectFlagBits;
  mipLevel: number;
  arrayLayer: number;
}

export interface VkImageSubresource {
  aspectMask: VkImageAspectFlagBits;
  mipLevel: number;
  arrayLayer: number;
}


/** ## VkBufferCreateInfo ## */
interface VkBufferCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: VkBufferCreateFlagBits;
  size?: number;
  usage?: VkBufferUsageFlagBits;
  sharingMode?: VkSharingMode;
  queueFamilyIndexCount?: number;
  pQueueFamilyIndices?: Uint32Array | null;
}

declare var VkBufferCreateInfo: {
  prototype: VkBufferCreateInfo;
  new(param?: VkBufferCreateInfoInitializer | null): VkBufferCreateInfo;
  sType: VkStructureType;
  pNext: null;
  flags: VkBufferCreateFlagBits;
  size: number;
  usage: VkBufferUsageFlagBits;
  sharingMode: VkSharingMode;
  queueFamilyIndexCount: number;
  pQueueFamilyIndices: Uint32Array | null;
}

export interface VkBufferCreateInfo {
  sType: VkStructureType;
  pNext: null;
  flags: VkBufferCreateFlagBits;
  size: number;
  usage: VkBufferUsageFlagBits;
  sharingMode: VkSharingMode;
  queueFamilyIndexCount: number;
  pQueueFamilyIndices: Uint32Array | null;
}


/** ## VkCopyDescriptorSet ## */
interface VkCopyDescriptorSetInitializer {
  sType?: VkStructureType;
  pNext?: null;
  srcSet?: VkDescriptorSet | null;
  srcBinding?: number;
  srcArrayElement?: number;
  dstSet?: VkDescriptorSet | null;
  dstBinding?: number;
  dstArrayElement?: number;
  descriptorCount?: number;
}

declare var VkCopyDescriptorSet: {
  prototype: VkCopyDescriptorSet;
  new(param?: VkCopyDescriptorSetInitializer | null): VkCopyDescriptorSet;
  sType: VkStructureType;
  pNext: null;
  srcSet: VkDescriptorSet | null;
  srcBinding: number;
  srcArrayElement: number;
  dstSet: VkDescriptorSet | null;
  dstBinding: number;
  dstArrayElement: number;
  descriptorCount: number;
}

export interface VkCopyDescriptorSet {
  sType: VkStructureType;
  pNext: null;
  srcSet: VkDescriptorSet | null;
  srcBinding: number;
  srcArrayElement: number;
  dstSet: VkDescriptorSet | null;
  dstBinding: number;
  dstArrayElement: number;
  descriptorCount: number;
}


/** ## VkDescriptorBufferInfo ## */
interface VkDescriptorBufferInfoInitializer {
  buffer?: VkBuffer | null;
  offset?: number;
  range?: number;
}

declare var VkDescriptorBufferInfo: {
  prototype: VkDescriptorBufferInfo;
  new(param?: VkDescriptorBufferInfoInitializer | null): VkDescriptorBufferInfo;
  buffer: VkBuffer | null;
  offset: number;
  range: number;
}

export interface VkDescriptorBufferInfo {
  buffer: VkBuffer | null;
  offset: number;
  range: number;
}


/** ## VkDescriptorImageInfo ## */
interface VkDescriptorImageInfoInitializer {
  sampler?: VkSampler | null;
  imageView?: VkImageView | null;
  imageLayout?: VkImageLayout;
}

declare var VkDescriptorImageInfo: {
  prototype: VkDescriptorImageInfo;
  new(param?: VkDescriptorImageInfoInitializer | null): VkDescriptorImageInfo;
  sampler: VkSampler | null;
  imageView: VkImageView | null;
  imageLayout: VkImageLayout;
}

export interface VkDescriptorImageInfo {
  sampler: VkSampler | null;
  imageView: VkImageView | null;
  imageLayout: VkImageLayout;
}


/** ## VkWriteDescriptorSet ## */
interface VkWriteDescriptorSetInitializer {
  sType?: VkStructureType;
  pNext?: null;
  dstSet?: VkDescriptorSet | null;
  dstBinding?: number;
  dstArrayElement?: number;
  descriptorCount?: number;
  descriptorType?: VkDescriptorType;
  pImageInfo?: VkDescriptorImageInfo[] | null;
  pBufferInfo?: VkDescriptorBufferInfo[] | null;
  pTexelBufferView?: VkBufferView[] | null;
}

declare var VkWriteDescriptorSet: {
  prototype: VkWriteDescriptorSet;
  new(param?: VkWriteDescriptorSetInitializer | null): VkWriteDescriptorSet;
  sType: VkStructureType;
  pNext: null;
  dstSet: VkDescriptorSet | null;
  dstBinding: number;
  dstArrayElement: number;
  descriptorCount: number;
  descriptorType: VkDescriptorType;
  pImageInfo: VkDescriptorImageInfo[] | null;
  pBufferInfo: VkDescriptorBufferInfo[] | null;
  pTexelBufferView: VkBufferView[] | null;
}

export interface VkWriteDescriptorSet {
  sType: VkStructureType;
  pNext: null;
  dstSet: VkDescriptorSet | null;
  dstBinding: number;
  dstArrayElement: number;
  descriptorCount: number;
  descriptorType: VkDescriptorType;
  pImageInfo: VkDescriptorImageInfo[] | null;
  pBufferInfo: VkDescriptorBufferInfo[] | null;
  pTexelBufferView: VkBufferView[] | null;
}


/** ## VkMemoryRequirements ## */
interface VkMemoryRequirementsInitializer {
  readonly size?: number;
  readonly alignment?: number;
  readonly memoryTypeBits?: number;
}

declare var VkMemoryRequirements: {
  prototype: VkMemoryRequirements;
  new(param?: VkMemoryRequirementsInitializer | null): VkMemoryRequirements;
  readonly size: number;
  readonly alignment: number;
  readonly memoryTypeBits: number;
}

export interface VkMemoryRequirements {
  readonly size: number;
  readonly alignment: number;
  readonly memoryTypeBits: number;
}


/** ## VkMemoryAllocateInfo ## */
interface VkMemoryAllocateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  allocationSize?: number;
  memoryTypeIndex?: number;
}

declare var VkMemoryAllocateInfo: {
  prototype: VkMemoryAllocateInfo;
  new(param?: VkMemoryAllocateInfoInitializer | null): VkMemoryAllocateInfo;
  sType: VkStructureType;
  pNext: null;
  allocationSize: number;
  memoryTypeIndex: number;
}

export interface VkMemoryAllocateInfo {
  sType: VkStructureType;
  pNext: null;
  allocationSize: number;
  memoryTypeIndex: number;
}


/** ## VkMemoryHeap ## */
interface VkMemoryHeapInitializer {
  readonly size?: number;
  readonly flags?: VkMemoryHeapFlagBits;
}

declare var VkMemoryHeap: {
  prototype: VkMemoryHeap;
  new(param?: VkMemoryHeapInitializer | null): VkMemoryHeap;
  readonly size: number;
  readonly flags: VkMemoryHeapFlagBits;
}

export interface VkMemoryHeap {
  readonly size: number;
  readonly flags: VkMemoryHeapFlagBits;
}


/** ## VkMemoryType ## */
interface VkMemoryTypeInitializer {
  readonly propertyFlags?: VkMemoryPropertyFlagBits;
  readonly heapIndex?: number;
}

declare var VkMemoryType: {
  prototype: VkMemoryType;
  new(param?: VkMemoryTypeInitializer | null): VkMemoryType;
  readonly propertyFlags: VkMemoryPropertyFlagBits;
  readonly heapIndex: number;
}

export interface VkMemoryType {
  readonly propertyFlags: VkMemoryPropertyFlagBits;
  readonly heapIndex: number;
}


/** ## VkPhysicalDeviceMemoryProperties ## */
interface VkPhysicalDeviceMemoryPropertiesInitializer {
  readonly memoryTypeCount?: number;
  readonly memoryTypes?: number[] | null;
  readonly memoryHeapCount?: number;
  readonly memoryHeaps?: number[] | null;
}

declare var VkPhysicalDeviceMemoryProperties: {
  prototype: VkPhysicalDeviceMemoryProperties;
  new(param?: VkPhysicalDeviceMemoryPropertiesInitializer | null): VkPhysicalDeviceMemoryProperties;
  readonly memoryTypeCount: number;
  readonly memoryTypes: number[] | null;
  readonly memoryHeapCount: number;
  readonly memoryHeaps: number[] | null;
}

export interface VkPhysicalDeviceMemoryProperties {
  readonly memoryTypeCount: number;
  readonly memoryTypes: number[] | null;
  readonly memoryHeapCount: number;
  readonly memoryHeaps: number[] | null;
}


/** ## VkQueueFamilyProperties ## */
interface VkQueueFamilyPropertiesInitializer {
  readonly queueFlags?: VkQueueFlagBits;
  readonly queueCount?: number;
  readonly timestampValidBits?: number;
  readonly minImageTransferGranularity?: VkExtent3D | null;
}

declare var VkQueueFamilyProperties: {
  prototype: VkQueueFamilyProperties;
  new(param?: VkQueueFamilyPropertiesInitializer | null): VkQueueFamilyProperties;
  readonly queueFlags: VkQueueFlagBits;
  readonly queueCount: number;
  readonly timestampValidBits: number;
  readonly minImageTransferGranularity: VkExtent3D | null;
}

export interface VkQueueFamilyProperties {
  readonly queueFlags: VkQueueFlagBits;
  readonly queueCount: number;
  readonly timestampValidBits: number;
  readonly minImageTransferGranularity: VkExtent3D | null;
}


/** ## VkApplicationInfo ## */
interface VkApplicationInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  pApplicationName?: string | null;
  applicationVersion?: number;
  pEngineName?: string | null;
  engineVersion?: number;
  apiVersion?: number;
}

declare var VkApplicationInfo: {
  prototype: VkApplicationInfo;
  new(param?: VkApplicationInfoInitializer | null): VkApplicationInfo;
  sType: VkStructureType;
  pNext: null;
  pApplicationName: string | null;
  applicationVersion: number;
  pEngineName: string | null;
  engineVersion: number;
  apiVersion: number;
}

export interface VkApplicationInfo {
  sType: VkStructureType;
  pNext: null;
  pApplicationName: string | null;
  applicationVersion: number;
  pEngineName: string | null;
  engineVersion: number;
  apiVersion: number;
}


/** ## VkInstanceCreateInfo ## */
interface VkInstanceCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: VkInstanceCreateFlags;
  pApplicationInfo?: VkApplicationInfo | null;
  enabledLayerCount?: number;
  ppEnabledLayerNames?: string[] | null;
  enabledExtensionCount?: number;
  ppEnabledExtensionNames?: string[] | null;
}

declare var VkInstanceCreateInfo: {
  prototype: VkInstanceCreateInfo;
  new(param?: VkInstanceCreateInfoInitializer | null): VkInstanceCreateInfo;
  sType: VkStructureType;
  pNext: null;
  flags: VkInstanceCreateFlags;
  pApplicationInfo: VkApplicationInfo | null;
  enabledLayerCount: number;
  ppEnabledLayerNames: string[] | null;
  enabledExtensionCount: number;
  ppEnabledExtensionNames: string[] | null;
}

export interface VkInstanceCreateInfo {
  sType: VkStructureType;
  pNext: null;
  flags: VkInstanceCreateFlags;
  pApplicationInfo: VkApplicationInfo | null;
  enabledLayerCount: number;
  ppEnabledLayerNames: string[] | null;
  enabledExtensionCount: number;
  ppEnabledExtensionNames: string[] | null;
}


/** ## VkPhysicalDeviceFeatures ## */
interface VkPhysicalDeviceFeaturesInitializer {
  robustBufferAccess?: number;
  fullDrawIndexUint32?: number;
  imageCubeArray?: number;
  independentBlend?: number;
  geometryShader?: number;
  tessellationShader?: number;
  sampleRateShading?: number;
  dualSrcBlend?: number;
  logicOp?: number;
  multiDrawIndirect?: number;
  drawIndirectFirstInstance?: number;
  depthClamp?: number;
  depthBiasClamp?: number;
  fillModeNonSolid?: number;
  depthBounds?: number;
  wideLines?: number;
  largePoints?: number;
  alphaToOne?: number;
  multiViewport?: number;
  samplerAnisotropy?: number;
  textureCompressionETC2?: number;
  textureCompressionASTC_LDR?: number;
  textureCompressionBC?: number;
  occlusionQueryPrecise?: number;
  pipelineStatisticsQuery?: number;
  vertexPipelineStoresAndAtomics?: number;
  fragmentStoresAndAtomics?: number;
  shaderTessellationAndGeometryPointSize?: number;
  shaderImageGatherExtended?: number;
  shaderStorageImageExtendedFormats?: number;
  shaderStorageImageMultisample?: number;
  shaderStorageImageReadWithoutFormat?: number;
  shaderStorageImageWriteWithoutFormat?: number;
  shaderUniformBufferArrayDynamicIndexing?: number;
  shaderSampledImageArrayDynamicIndexing?: number;
  shaderStorageBufferArrayDynamicIndexing?: number;
  shaderStorageImageArrayDynamicIndexing?: number;
  shaderClipDistance?: number;
  shaderCullDistance?: number;
  shaderFloat64?: number;
  shaderInt64?: number;
  shaderInt16?: number;
  shaderResourceResidency?: number;
  shaderResourceMinLod?: number;
  sparseBinding?: number;
  sparseResidencyBuffer?: number;
  sparseResidencyImage2D?: number;
  sparseResidencyImage3D?: number;
  sparseResidency2Samples?: number;
  sparseResidency4Samples?: number;
  sparseResidency8Samples?: number;
  sparseResidency16Samples?: number;
  sparseResidencyAliased?: number;
  variableMultisampleRate?: number;
  inheritedQueries?: number;
}

declare var VkPhysicalDeviceFeatures: {
  prototype: VkPhysicalDeviceFeatures;
  new(param?: VkPhysicalDeviceFeaturesInitializer | null): VkPhysicalDeviceFeatures;
  robustBufferAccess: number;
  fullDrawIndexUint32: number;
  imageCubeArray: number;
  independentBlend: number;
  geometryShader: number;
  tessellationShader: number;
  sampleRateShading: number;
  dualSrcBlend: number;
  logicOp: number;
  multiDrawIndirect: number;
  drawIndirectFirstInstance: number;
  depthClamp: number;
  depthBiasClamp: number;
  fillModeNonSolid: number;
  depthBounds: number;
  wideLines: number;
  largePoints: number;
  alphaToOne: number;
  multiViewport: number;
  samplerAnisotropy: number;
  textureCompressionETC2: number;
  textureCompressionASTC_LDR: number;
  textureCompressionBC: number;
  occlusionQueryPrecise: number;
  pipelineStatisticsQuery: number;
  vertexPipelineStoresAndAtomics: number;
  fragmentStoresAndAtomics: number;
  shaderTessellationAndGeometryPointSize: number;
  shaderImageGatherExtended: number;
  shaderStorageImageExtendedFormats: number;
  shaderStorageImageMultisample: number;
  shaderStorageImageReadWithoutFormat: number;
  shaderStorageImageWriteWithoutFormat: number;
  shaderUniformBufferArrayDynamicIndexing: number;
  shaderSampledImageArrayDynamicIndexing: number;
  shaderStorageBufferArrayDynamicIndexing: number;
  shaderStorageImageArrayDynamicIndexing: number;
  shaderClipDistance: number;
  shaderCullDistance: number;
  shaderFloat64: number;
  shaderInt64: number;
  shaderInt16: number;
  shaderResourceResidency: number;
  shaderResourceMinLod: number;
  sparseBinding: number;
  sparseResidencyBuffer: number;
  sparseResidencyImage2D: number;
  sparseResidencyImage3D: number;
  sparseResidency2Samples: number;
  sparseResidency4Samples: number;
  sparseResidency8Samples: number;
  sparseResidency16Samples: number;
  sparseResidencyAliased: number;
  variableMultisampleRate: number;
  inheritedQueries: number;
}

export interface VkPhysicalDeviceFeatures {
  robustBufferAccess: number;
  fullDrawIndexUint32: number;
  imageCubeArray: number;
  independentBlend: number;
  geometryShader: number;
  tessellationShader: number;
  sampleRateShading: number;
  dualSrcBlend: number;
  logicOp: number;
  multiDrawIndirect: number;
  drawIndirectFirstInstance: number;
  depthClamp: number;
  depthBiasClamp: number;
  fillModeNonSolid: number;
  depthBounds: number;
  wideLines: number;
  largePoints: number;
  alphaToOne: number;
  multiViewport: number;
  samplerAnisotropy: number;
  textureCompressionETC2: number;
  textureCompressionASTC_LDR: number;
  textureCompressionBC: number;
  occlusionQueryPrecise: number;
  pipelineStatisticsQuery: number;
  vertexPipelineStoresAndAtomics: number;
  fragmentStoresAndAtomics: number;
  shaderTessellationAndGeometryPointSize: number;
  shaderImageGatherExtended: number;
  shaderStorageImageExtendedFormats: number;
  shaderStorageImageMultisample: number;
  shaderStorageImageReadWithoutFormat: number;
  shaderStorageImageWriteWithoutFormat: number;
  shaderUniformBufferArrayDynamicIndexing: number;
  shaderSampledImageArrayDynamicIndexing: number;
  shaderStorageBufferArrayDynamicIndexing: number;
  shaderStorageImageArrayDynamicIndexing: number;
  shaderClipDistance: number;
  shaderCullDistance: number;
  shaderFloat64: number;
  shaderInt64: number;
  shaderInt16: number;
  shaderResourceResidency: number;
  shaderResourceMinLod: number;
  sparseBinding: number;
  sparseResidencyBuffer: number;
  sparseResidencyImage2D: number;
  sparseResidencyImage3D: number;
  sparseResidency2Samples: number;
  sparseResidency4Samples: number;
  sparseResidency8Samples: number;
  sparseResidency16Samples: number;
  sparseResidencyAliased: number;
  variableMultisampleRate: number;
  inheritedQueries: number;
}


/** ## VkDeviceQueueCreateInfo ## */
interface VkDeviceQueueCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: VkDeviceQueueCreateFlagBits;
  queueFamilyIndex?: number;
  queueCount?: number;
  pQueuePriorities?: Float32Array | null;
}

declare var VkDeviceQueueCreateInfo: {
  prototype: VkDeviceQueueCreateInfo;
  new(param?: VkDeviceQueueCreateInfoInitializer | null): VkDeviceQueueCreateInfo;
  sType: VkStructureType;
  pNext: null;
  flags: VkDeviceQueueCreateFlagBits;
  queueFamilyIndex: number;
  queueCount: number;
  pQueuePriorities: Float32Array | null;
}

export interface VkDeviceQueueCreateInfo {
  sType: VkStructureType;
  pNext: null;
  flags: VkDeviceQueueCreateFlagBits;
  queueFamilyIndex: number;
  queueCount: number;
  pQueuePriorities: Float32Array | null;
}


/** ## VkDeviceCreateInfo ## */
interface VkDeviceCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: VkDeviceCreateFlags;
  queueCreateInfoCount?: number;
  pQueueCreateInfos?: VkDeviceQueueCreateInfo[] | null;
  enabledLayerCount?: number;
  ppEnabledLayerNames?: string[] | null;
  enabledExtensionCount?: number;
  ppEnabledExtensionNames?: string[] | null;
  pEnabledFeatures?: VkPhysicalDeviceFeatures | null;
}

declare var VkDeviceCreateInfo: {
  prototype: VkDeviceCreateInfo;
  new(param?: VkDeviceCreateInfoInitializer | null): VkDeviceCreateInfo;
  sType: VkStructureType;
  pNext: null;
  flags: VkDeviceCreateFlags;
  queueCreateInfoCount: number;
  pQueueCreateInfos: VkDeviceQueueCreateInfo[] | null;
  enabledLayerCount: number;
  ppEnabledLayerNames: string[] | null;
  enabledExtensionCount: number;
  ppEnabledExtensionNames: string[] | null;
  pEnabledFeatures: VkPhysicalDeviceFeatures | null;
}

export interface VkDeviceCreateInfo {
  sType: VkStructureType;
  pNext: null;
  flags: VkDeviceCreateFlags;
  queueCreateInfoCount: number;
  pQueueCreateInfos: VkDeviceQueueCreateInfo[] | null;
  enabledLayerCount: number;
  ppEnabledLayerNames: string[] | null;
  enabledExtensionCount: number;
  ppEnabledExtensionNames: string[] | null;
  pEnabledFeatures: VkPhysicalDeviceFeatures | null;
}


/** ## VkLayerProperties ## */
interface VkLayerPropertiesInitializer {
  readonly layerName?: string | null;
  readonly specVersion?: number;
  readonly implementationVersion?: number;
  readonly description?: string | null;
}

declare var VkLayerProperties: {
  prototype: VkLayerProperties;
  new(param?: VkLayerPropertiesInitializer | null): VkLayerProperties;
  readonly layerName: string | null;
  readonly specVersion: number;
  readonly implementationVersion: number;
  readonly description: string | null;
}

export interface VkLayerProperties {
  readonly layerName: string | null;
  readonly specVersion: number;
  readonly implementationVersion: number;
  readonly description: string | null;
}


/** ## VkPhysicalDeviceSparseProperties ## */
interface VkPhysicalDeviceSparsePropertiesInitializer {
  readonly residencyStandard2DBlockShape?: number;
  readonly residencyStandard2DMultisampleBlockShape?: number;
  readonly residencyStandard3DBlockShape?: number;
  readonly residencyAlignedMipSize?: number;
  readonly residencyNonResidentStrict?: number;
}

declare var VkPhysicalDeviceSparseProperties: {
  prototype: VkPhysicalDeviceSparseProperties;
  new(param?: VkPhysicalDeviceSparsePropertiesInitializer | null): VkPhysicalDeviceSparseProperties;
  readonly residencyStandard2DBlockShape: number;
  readonly residencyStandard2DMultisampleBlockShape: number;
  readonly residencyStandard3DBlockShape: number;
  readonly residencyAlignedMipSize: number;
  readonly residencyNonResidentStrict: number;
}

export interface VkPhysicalDeviceSparseProperties {
  readonly residencyStandard2DBlockShape: number;
  readonly residencyStandard2DMultisampleBlockShape: number;
  readonly residencyStandard3DBlockShape: number;
  readonly residencyAlignedMipSize: number;
  readonly residencyNonResidentStrict: number;
}


/** ## VkPhysicalDeviceLimits ## */
interface VkPhysicalDeviceLimitsInitializer {
  readonly maxImageDimension1D?: number;
  readonly maxImageDimension2D?: number;
  readonly maxImageDimension3D?: number;
  readonly maxImageDimensionCube?: number;
  readonly maxImageArrayLayers?: number;
  readonly maxTexelBufferElements?: number;
  readonly maxUniformBufferRange?: number;
  readonly maxStorageBufferRange?: number;
  readonly maxPushConstantsSize?: number;
  readonly maxMemoryAllocationCount?: number;
  readonly maxSamplerAllocationCount?: number;
  readonly bufferImageGranularity?: number;
  readonly sparseAddressSpaceSize?: number;
  readonly maxBoundDescriptorSets?: number;
  readonly maxPerStageDescriptorSamplers?: number;
  readonly maxPerStageDescriptorUniformBuffers?: number;
  readonly maxPerStageDescriptorStorageBuffers?: number;
  readonly maxPerStageDescriptorSampledImages?: number;
  readonly maxPerStageDescriptorStorageImages?: number;
  readonly maxPerStageDescriptorInputAttachments?: number;
  readonly maxPerStageResources?: number;
  readonly maxDescriptorSetSamplers?: number;
  readonly maxDescriptorSetUniformBuffers?: number;
  readonly maxDescriptorSetUniformBuffersDynamic?: number;
  readonly maxDescriptorSetStorageBuffers?: number;
  readonly maxDescriptorSetStorageBuffersDynamic?: number;
  readonly maxDescriptorSetSampledImages?: number;
  readonly maxDescriptorSetStorageImages?: number;
  readonly maxDescriptorSetInputAttachments?: number;
  readonly maxVertexInputAttributes?: number;
  readonly maxVertexInputBindings?: number;
  readonly maxVertexInputAttributeOffset?: number;
  readonly maxVertexInputBindingStride?: number;
  readonly maxVertexOutputComponents?: number;
  readonly maxTessellationGenerationLevel?: number;
  readonly maxTessellationPatchSize?: number;
  readonly maxTessellationControlPerVertexInputComponents?: number;
  readonly maxTessellationControlPerVertexOutputComponents?: number;
  readonly maxTessellationControlPerPatchOutputComponents?: number;
  readonly maxTessellationControlTotalOutputComponents?: number;
  readonly maxTessellationEvaluationInputComponents?: number;
  readonly maxTessellationEvaluationOutputComponents?: number;
  readonly maxGeometryShaderInvocations?: number;
  readonly maxGeometryInputComponents?: number;
  readonly maxGeometryOutputComponents?: number;
  readonly maxGeometryOutputVertices?: number;
  readonly maxGeometryTotalOutputComponents?: number;
  readonly maxFragmentInputComponents?: number;
  readonly maxFragmentOutputAttachments?: number;
  readonly maxFragmentDualSrcAttachments?: number;
  readonly maxFragmentCombinedOutputResources?: number;
  readonly maxComputeSharedMemorySize?: number;
  readonly maxComputeWorkGroupCount?: number[] | null;
  readonly maxComputeWorkGroupInvocations?: number;
  readonly maxComputeWorkGroupSize?: number[] | null;
  readonly subPixelPrecisionBits?: number;
  readonly subTexelPrecisionBits?: number;
  readonly mipmapPrecisionBits?: number;
  readonly maxDrawIndexedIndexValue?: number;
  readonly maxDrawIndirectCount?: number;
  readonly maxSamplerLodBias?: number;
  readonly maxSamplerAnisotropy?: number;
  readonly maxViewports?: number;
  readonly maxViewportDimensions?: number[] | null;
  readonly viewportBoundsRange?: number[] | null;
  readonly viewportSubPixelBits?: number;
  readonly minMemoryMapAlignment?: number;
  readonly minTexelBufferOffsetAlignment?: number;
  readonly minUniformBufferOffsetAlignment?: number;
  readonly minStorageBufferOffsetAlignment?: number;
  readonly minTexelOffset?: number;
  readonly maxTexelOffset?: number;
  readonly minTexelGatherOffset?: number;
  readonly maxTexelGatherOffset?: number;
  readonly minInterpolationOffset?: number;
  readonly maxInterpolationOffset?: number;
  readonly subPixelInterpolationOffsetBits?: number;
  readonly maxFramebufferWidth?: number;
  readonly maxFramebufferHeight?: number;
  readonly maxFramebufferLayers?: number;
  readonly framebufferColorSampleCounts?: VkSampleCountFlagBits;
  readonly framebufferDepthSampleCounts?: VkSampleCountFlagBits;
  readonly framebufferStencilSampleCounts?: VkSampleCountFlagBits;
  readonly framebufferNoAttachmentsSampleCounts?: VkSampleCountFlagBits;
  readonly maxColorAttachments?: number;
  readonly sampledImageColorSampleCounts?: VkSampleCountFlagBits;
  readonly sampledImageIntegerSampleCounts?: VkSampleCountFlagBits;
  readonly sampledImageDepthSampleCounts?: VkSampleCountFlagBits;
  readonly sampledImageStencilSampleCounts?: VkSampleCountFlagBits;
  readonly storageImageSampleCounts?: VkSampleCountFlagBits;
  readonly maxSampleMaskWords?: number;
  readonly timestampComputeAndGraphics?: number;
  readonly timestampPeriod?: number;
  readonly maxClipDistances?: number;
  readonly maxCullDistances?: number;
  readonly maxCombinedClipAndCullDistances?: number;
  readonly discreteQueuePriorities?: number;
  readonly pointSizeRange?: number[] | null;
  readonly lineWidthRange?: number[] | null;
  readonly pointSizeGranularity?: number;
  readonly lineWidthGranularity?: number;
  readonly strictLines?: number;
  readonly standardSampleLocations?: number;
  readonly optimalBufferCopyOffsetAlignment?: number;
  readonly optimalBufferCopyRowPitchAlignment?: number;
  readonly nonCoherentAtomSize?: number;
}

declare var VkPhysicalDeviceLimits: {
  prototype: VkPhysicalDeviceLimits;
  new(param?: VkPhysicalDeviceLimitsInitializer | null): VkPhysicalDeviceLimits;
  readonly maxImageDimension1D: number;
  readonly maxImageDimension2D: number;
  readonly maxImageDimension3D: number;
  readonly maxImageDimensionCube: number;
  readonly maxImageArrayLayers: number;
  readonly maxTexelBufferElements: number;
  readonly maxUniformBufferRange: number;
  readonly maxStorageBufferRange: number;
  readonly maxPushConstantsSize: number;
  readonly maxMemoryAllocationCount: number;
  readonly maxSamplerAllocationCount: number;
  readonly bufferImageGranularity: number;
  readonly sparseAddressSpaceSize: number;
  readonly maxBoundDescriptorSets: number;
  readonly maxPerStageDescriptorSamplers: number;
  readonly maxPerStageDescriptorUniformBuffers: number;
  readonly maxPerStageDescriptorStorageBuffers: number;
  readonly maxPerStageDescriptorSampledImages: number;
  readonly maxPerStageDescriptorStorageImages: number;
  readonly maxPerStageDescriptorInputAttachments: number;
  readonly maxPerStageResources: number;
  readonly maxDescriptorSetSamplers: number;
  readonly maxDescriptorSetUniformBuffers: number;
  readonly maxDescriptorSetUniformBuffersDynamic: number;
  readonly maxDescriptorSetStorageBuffers: number;
  readonly maxDescriptorSetStorageBuffersDynamic: number;
  readonly maxDescriptorSetSampledImages: number;
  readonly maxDescriptorSetStorageImages: number;
  readonly maxDescriptorSetInputAttachments: number;
  readonly maxVertexInputAttributes: number;
  readonly maxVertexInputBindings: number;
  readonly maxVertexInputAttributeOffset: number;
  readonly maxVertexInputBindingStride: number;
  readonly maxVertexOutputComponents: number;
  readonly maxTessellationGenerationLevel: number;
  readonly maxTessellationPatchSize: number;
  readonly maxTessellationControlPerVertexInputComponents: number;
  readonly maxTessellationControlPerVertexOutputComponents: number;
  readonly maxTessellationControlPerPatchOutputComponents: number;
  readonly maxTessellationControlTotalOutputComponents: number;
  readonly maxTessellationEvaluationInputComponents: number;
  readonly maxTessellationEvaluationOutputComponents: number;
  readonly maxGeometryShaderInvocations: number;
  readonly maxGeometryInputComponents: number;
  readonly maxGeometryOutputComponents: number;
  readonly maxGeometryOutputVertices: number;
  readonly maxGeometryTotalOutputComponents: number;
  readonly maxFragmentInputComponents: number;
  readonly maxFragmentOutputAttachments: number;
  readonly maxFragmentDualSrcAttachments: number;
  readonly maxFragmentCombinedOutputResources: number;
  readonly maxComputeSharedMemorySize: number;
  readonly maxComputeWorkGroupCount: number[] | null;
  readonly maxComputeWorkGroupInvocations: number;
  readonly maxComputeWorkGroupSize: number[] | null;
  readonly subPixelPrecisionBits: number;
  readonly subTexelPrecisionBits: number;
  readonly mipmapPrecisionBits: number;
  readonly maxDrawIndexedIndexValue: number;
  readonly maxDrawIndirectCount: number;
  readonly maxSamplerLodBias: number;
  readonly maxSamplerAnisotropy: number;
  readonly maxViewports: number;
  readonly maxViewportDimensions: number[] | null;
  readonly viewportBoundsRange: number[] | null;
  readonly viewportSubPixelBits: number;
  readonly minMemoryMapAlignment: number;
  readonly minTexelBufferOffsetAlignment: number;
  readonly minUniformBufferOffsetAlignment: number;
  readonly minStorageBufferOffsetAlignment: number;
  readonly minTexelOffset: number;
  readonly maxTexelOffset: number;
  readonly minTexelGatherOffset: number;
  readonly maxTexelGatherOffset: number;
  readonly minInterpolationOffset: number;
  readonly maxInterpolationOffset: number;
  readonly subPixelInterpolationOffsetBits: number;
  readonly maxFramebufferWidth: number;
  readonly maxFramebufferHeight: number;
  readonly maxFramebufferLayers: number;
  readonly framebufferColorSampleCounts: VkSampleCountFlagBits;
  readonly framebufferDepthSampleCounts: VkSampleCountFlagBits;
  readonly framebufferStencilSampleCounts: VkSampleCountFlagBits;
  readonly framebufferNoAttachmentsSampleCounts: VkSampleCountFlagBits;
  readonly maxColorAttachments: number;
  readonly sampledImageColorSampleCounts: VkSampleCountFlagBits;
  readonly sampledImageIntegerSampleCounts: VkSampleCountFlagBits;
  readonly sampledImageDepthSampleCounts: VkSampleCountFlagBits;
  readonly sampledImageStencilSampleCounts: VkSampleCountFlagBits;
  readonly storageImageSampleCounts: VkSampleCountFlagBits;
  readonly maxSampleMaskWords: number;
  readonly timestampComputeAndGraphics: number;
  readonly timestampPeriod: number;
  readonly maxClipDistances: number;
  readonly maxCullDistances: number;
  readonly maxCombinedClipAndCullDistances: number;
  readonly discreteQueuePriorities: number;
  readonly pointSizeRange: number[] | null;
  readonly lineWidthRange: number[] | null;
  readonly pointSizeGranularity: number;
  readonly lineWidthGranularity: number;
  readonly strictLines: number;
  readonly standardSampleLocations: number;
  readonly optimalBufferCopyOffsetAlignment: number;
  readonly optimalBufferCopyRowPitchAlignment: number;
  readonly nonCoherentAtomSize: number;
}

export interface VkPhysicalDeviceLimits {
  readonly maxImageDimension1D: number;
  readonly maxImageDimension2D: number;
  readonly maxImageDimension3D: number;
  readonly maxImageDimensionCube: number;
  readonly maxImageArrayLayers: number;
  readonly maxTexelBufferElements: number;
  readonly maxUniformBufferRange: number;
  readonly maxStorageBufferRange: number;
  readonly maxPushConstantsSize: number;
  readonly maxMemoryAllocationCount: number;
  readonly maxSamplerAllocationCount: number;
  readonly bufferImageGranularity: number;
  readonly sparseAddressSpaceSize: number;
  readonly maxBoundDescriptorSets: number;
  readonly maxPerStageDescriptorSamplers: number;
  readonly maxPerStageDescriptorUniformBuffers: number;
  readonly maxPerStageDescriptorStorageBuffers: number;
  readonly maxPerStageDescriptorSampledImages: number;
  readonly maxPerStageDescriptorStorageImages: number;
  readonly maxPerStageDescriptorInputAttachments: number;
  readonly maxPerStageResources: number;
  readonly maxDescriptorSetSamplers: number;
  readonly maxDescriptorSetUniformBuffers: number;
  readonly maxDescriptorSetUniformBuffersDynamic: number;
  readonly maxDescriptorSetStorageBuffers: number;
  readonly maxDescriptorSetStorageBuffersDynamic: number;
  readonly maxDescriptorSetSampledImages: number;
  readonly maxDescriptorSetStorageImages: number;
  readonly maxDescriptorSetInputAttachments: number;
  readonly maxVertexInputAttributes: number;
  readonly maxVertexInputBindings: number;
  readonly maxVertexInputAttributeOffset: number;
  readonly maxVertexInputBindingStride: number;
  readonly maxVertexOutputComponents: number;
  readonly maxTessellationGenerationLevel: number;
  readonly maxTessellationPatchSize: number;
  readonly maxTessellationControlPerVertexInputComponents: number;
  readonly maxTessellationControlPerVertexOutputComponents: number;
  readonly maxTessellationControlPerPatchOutputComponents: number;
  readonly maxTessellationControlTotalOutputComponents: number;
  readonly maxTessellationEvaluationInputComponents: number;
  readonly maxTessellationEvaluationOutputComponents: number;
  readonly maxGeometryShaderInvocations: number;
  readonly maxGeometryInputComponents: number;
  readonly maxGeometryOutputComponents: number;
  readonly maxGeometryOutputVertices: number;
  readonly maxGeometryTotalOutputComponents: number;
  readonly maxFragmentInputComponents: number;
  readonly maxFragmentOutputAttachments: number;
  readonly maxFragmentDualSrcAttachments: number;
  readonly maxFragmentCombinedOutputResources: number;
  readonly maxComputeSharedMemorySize: number;
  readonly maxComputeWorkGroupCount: number[] | null;
  readonly maxComputeWorkGroupInvocations: number;
  readonly maxComputeWorkGroupSize: number[] | null;
  readonly subPixelPrecisionBits: number;
  readonly subTexelPrecisionBits: number;
  readonly mipmapPrecisionBits: number;
  readonly maxDrawIndexedIndexValue: number;
  readonly maxDrawIndirectCount: number;
  readonly maxSamplerLodBias: number;
  readonly maxSamplerAnisotropy: number;
  readonly maxViewports: number;
  readonly maxViewportDimensions: number[] | null;
  readonly viewportBoundsRange: number[] | null;
  readonly viewportSubPixelBits: number;
  readonly minMemoryMapAlignment: number;
  readonly minTexelBufferOffsetAlignment: number;
  readonly minUniformBufferOffsetAlignment: number;
  readonly minStorageBufferOffsetAlignment: number;
  readonly minTexelOffset: number;
  readonly maxTexelOffset: number;
  readonly minTexelGatherOffset: number;
  readonly maxTexelGatherOffset: number;
  readonly minInterpolationOffset: number;
  readonly maxInterpolationOffset: number;
  readonly subPixelInterpolationOffsetBits: number;
  readonly maxFramebufferWidth: number;
  readonly maxFramebufferHeight: number;
  readonly maxFramebufferLayers: number;
  readonly framebufferColorSampleCounts: VkSampleCountFlagBits;
  readonly framebufferDepthSampleCounts: VkSampleCountFlagBits;
  readonly framebufferStencilSampleCounts: VkSampleCountFlagBits;
  readonly framebufferNoAttachmentsSampleCounts: VkSampleCountFlagBits;
  readonly maxColorAttachments: number;
  readonly sampledImageColorSampleCounts: VkSampleCountFlagBits;
  readonly sampledImageIntegerSampleCounts: VkSampleCountFlagBits;
  readonly sampledImageDepthSampleCounts: VkSampleCountFlagBits;
  readonly sampledImageStencilSampleCounts: VkSampleCountFlagBits;
  readonly storageImageSampleCounts: VkSampleCountFlagBits;
  readonly maxSampleMaskWords: number;
  readonly timestampComputeAndGraphics: number;
  readonly timestampPeriod: number;
  readonly maxClipDistances: number;
  readonly maxCullDistances: number;
  readonly maxCombinedClipAndCullDistances: number;
  readonly discreteQueuePriorities: number;
  readonly pointSizeRange: number[] | null;
  readonly lineWidthRange: number[] | null;
  readonly pointSizeGranularity: number;
  readonly lineWidthGranularity: number;
  readonly strictLines: number;
  readonly standardSampleLocations: number;
  readonly optimalBufferCopyOffsetAlignment: number;
  readonly optimalBufferCopyRowPitchAlignment: number;
  readonly nonCoherentAtomSize: number;
}


/** ## VkPhysicalDeviceProperties ## */
interface VkPhysicalDevicePropertiesInitializer {
  readonly apiVersion?: number;
  readonly driverVersion?: number;
  readonly vendorID?: number;
  readonly deviceID?: number;
  readonly deviceType?: VkPhysicalDeviceType;
  readonly deviceName?: string | null;
  readonly pipelineCacheUUID?: number[] | null;
  readonly limits?: VkPhysicalDeviceLimits | null;
  readonly sparseProperties?: VkPhysicalDeviceSparseProperties | null;
}

declare var VkPhysicalDeviceProperties: {
  prototype: VkPhysicalDeviceProperties;
  new(param?: VkPhysicalDevicePropertiesInitializer | null): VkPhysicalDeviceProperties;
  readonly apiVersion: number;
  readonly driverVersion: number;
  readonly vendorID: number;
  readonly deviceID: number;
  readonly deviceType: VkPhysicalDeviceType;
  readonly deviceName: string | null;
  readonly pipelineCacheUUID: number[] | null;
  readonly limits: VkPhysicalDeviceLimits | null;
  readonly sparseProperties: VkPhysicalDeviceSparseProperties | null;
}

export interface VkPhysicalDeviceProperties {
  readonly apiVersion: number;
  readonly driverVersion: number;
  readonly vendorID: number;
  readonly deviceID: number;
  readonly deviceType: VkPhysicalDeviceType;
  readonly deviceName: string | null;
  readonly pipelineCacheUUID: number[] | null;
  readonly limits: VkPhysicalDeviceLimits | null;
  readonly sparseProperties: VkPhysicalDeviceSparseProperties | null;
}


/** ## VkClearRect ## */
interface VkClearRectInitializer {
  rect?: VkRect2D | null;
  baseArrayLayer?: number;
  layerCount?: number;
}

declare var VkClearRect: {
  prototype: VkClearRect;
  new(param?: VkClearRectInitializer | null): VkClearRect;
  rect: VkRect2D | null;
  baseArrayLayer: number;
  layerCount: number;
}

export interface VkClearRect {
  rect: VkRect2D | null;
  baseArrayLayer: number;
  layerCount: number;
}




/** #### CALLS #### **/
declare function vkCreateInstance(pCreateInfo: VkInstanceCreateInfo | null, pAllocator: null, pInstance: VkInstance | null): number;
declare function vkEnumeratePhysicalDevices(instance: VkInstance | null, pPhysicalDeviceCount: VkInout, pPhysicalDevices: VkPhysicalDevice[] | null): number;
declare function vkGetPhysicalDeviceProperties(physicalDevice: VkPhysicalDevice | null, pProperties: VkPhysicalDeviceProperties | null): void;
declare function vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice: VkPhysicalDevice | null, pQueueFamilyPropertyCount: VkInout, pQueueFamilyProperties: VkQueueFamilyProperties[] | null): void;
declare function vkGetPhysicalDeviceMemoryProperties(physicalDevice: VkPhysicalDevice | null, pMemoryProperties: VkPhysicalDeviceMemoryProperties | null): void;
declare function vkGetPhysicalDeviceFeatures(physicalDevice: VkPhysicalDevice | null, pFeatures: VkPhysicalDeviceFeatures | null): void;
declare function vkCreateDevice(physicalDevice: VkPhysicalDevice | null, pCreateInfo: VkDeviceCreateInfo | null, pAllocator: null, pDevice: VkDevice | null): number;
declare function vkEnumerateInstanceLayerProperties(pPropertyCount: VkInout, pProperties: VkLayerProperties[] | null): number;
declare function vkGetDeviceQueue(device: VkDevice | null, queueFamilyIndex: number, queueIndex: number, pQueue: VkQueue | null): void;
declare function vkQueueSubmit(queue: VkQueue | null, submitCount: number, pSubmits: VkSubmitInfo[] | null, fence: VkFence | null): number;
declare function vkQueueWaitIdle(queue: VkQueue | null): number;
declare function vkDeviceWaitIdle(device: VkDevice | null): number;
declare function vkAllocateMemory(device: VkDevice | null, pAllocateInfo: VkMemoryAllocateInfo | null, pAllocator: null, pMemory: VkDeviceMemory | null): number;
declare function vkMapMemory(device: VkDevice | null, memory: VkDeviceMemory | null, offset: number, size: number, flags: VkMemoryMapFlags, ppData: VkInoutAddress): number;
declare function vkUnmapMemory(device: VkDevice | null, memory: VkDeviceMemory | null): void;
declare function vkGetBufferMemoryRequirements(device: VkDevice | null, buffer: VkBuffer | null, pMemoryRequirements: VkMemoryRequirements | null): void;
declare function vkBindBufferMemory(device: VkDevice | null, buffer: VkBuffer | null, memory: VkDeviceMemory | null, memoryOffset: number): number;
declare function vkGetImageMemoryRequirements(device: VkDevice | null, image: VkImage | null, pMemoryRequirements: VkMemoryRequirements | null): void;
declare function vkBindImageMemory(device: VkDevice | null, image: VkImage | null, memory: VkDeviceMemory | null, memoryOffset: number): number;
declare function vkCreateSemaphore(device: VkDevice | null, pCreateInfo: VkSemaphoreCreateInfo | null, pAllocator: null, pSemaphore: VkSemaphore | null): number;
declare function vkCreateBuffer(device: VkDevice | null, pCreateInfo: VkBufferCreateInfo | null, pAllocator: null, pBuffer: VkBuffer | null): number;
declare function vkCreateImage(device: VkDevice | null, pCreateInfo: VkImageCreateInfo | null, pAllocator: null, pImage: VkImage | null): number;
declare function vkGetImageSubresourceLayout(device: VkDevice | null, image: VkImage | null, pSubresource: VkImageSubresource | null, pLayout: VkSubresourceLayout | null): void;
declare function vkCreateImageView(device: VkDevice | null, pCreateInfo: VkImageViewCreateInfo | null, pAllocator: null, pView: VkImageView | null): number;
declare function vkDestroyImageView(device: VkDevice | null, imageView: VkImageView | null, pAllocator: null): void;
declare function vkCreateShaderModule(device: VkDevice | null, pCreateInfo: VkShaderModuleCreateInfo | null, pAllocator: null, pShaderModule: VkShaderModule | null): number;
declare function vkDestroyShaderModule(device: VkDevice | null, shaderModule: VkShaderModule | null, pAllocator: null): void;
declare function vkCreateGraphicsPipelines(device: VkDevice | null, pipelineCache: VkPipelineCache | null, createInfoCount: number, pCreateInfos: VkGraphicsPipelineCreateInfo[] | null, pAllocator: null, pPipelines: VkPipeline[] | null): number;
declare function vkDestroyPipeline(device: VkDevice | null, pipeline: VkPipeline | null, pAllocator: null): void;
declare function vkCreatePipelineLayout(device: VkDevice | null, pCreateInfo: VkPipelineLayoutCreateInfo | null, pAllocator: null, pPipelineLayout: VkPipelineLayout | null): number;
declare function vkDestroyPipelineLayout(device: VkDevice | null, pipelineLayout: VkPipelineLayout | null, pAllocator: null): void;
declare function vkCreateSampler(device: VkDevice | null, pCreateInfo: VkSamplerCreateInfo | null, pAllocator: null, pSampler: VkSampler | null): number;
declare function vkCreateDescriptorSetLayout(device: VkDevice | null, pCreateInfo: VkDescriptorSetLayoutCreateInfo | null, pAllocator: null, pSetLayout: VkDescriptorSetLayout | null): number;
declare function vkCreateDescriptorPool(device: VkDevice | null, pCreateInfo: VkDescriptorPoolCreateInfo | null, pAllocator: null, pDescriptorPool: VkDescriptorPool | null): number;
declare function vkAllocateDescriptorSets(device: VkDevice | null, pAllocateInfo: VkDescriptorSetAllocateInfo | null, pDescriptorSets: VkDescriptorSet[] | null): number;
declare function vkUpdateDescriptorSets(device: VkDevice | null, descriptorWriteCount: number, pDescriptorWrites: VkWriteDescriptorSet[] | null, descriptorCopyCount: number, pDescriptorCopies: VkCopyDescriptorSet[] | null): void;
declare function vkCreateFramebuffer(device: VkDevice | null, pCreateInfo: VkFramebufferCreateInfo | null, pAllocator: null, pFramebuffer: VkFramebuffer | null): number;
declare function vkDestroyFramebuffer(device: VkDevice | null, framebuffer: VkFramebuffer | null, pAllocator: null): void;
declare function vkCreateRenderPass(device: VkDevice | null, pCreateInfo: VkRenderPassCreateInfo | null, pAllocator: null, pRenderPass: VkRenderPass | null): number;
declare function vkDestroyRenderPass(device: VkDevice | null, renderPass: VkRenderPass | null, pAllocator: null): void;
declare function vkCreateCommandPool(device: VkDevice | null, pCreateInfo: VkCommandPoolCreateInfo | null, pAllocator: null, pCommandPool: VkCommandPool | null): number;
declare function vkDestroyCommandPool(device: VkDevice | null, commandPool: VkCommandPool | null, pAllocator: null): void;
declare function vkAllocateCommandBuffers(device: VkDevice | null, pAllocateInfo: VkCommandBufferAllocateInfo | null, pCommandBuffers: VkCommandBuffer[] | null): number;
declare function vkFreeCommandBuffers(device: VkDevice | null, commandPool: VkCommandPool | null, commandBufferCount: number, pCommandBuffers: VkCommandBuffer[] | null): void;
declare function vkBeginCommandBuffer(commandBuffer: VkCommandBuffer | null, pBeginInfo: VkCommandBufferBeginInfo | null): number;
declare function vkEndCommandBuffer(commandBuffer: VkCommandBuffer | null): number;
declare function vkCmdBindPipeline(commandBuffer: VkCommandBuffer | null, pipelineBindPoint: VkPipelineBindPoint, pipeline: VkPipeline | null): void;
declare function vkCmdSetViewport(commandBuffer: VkCommandBuffer | null, firstViewport: number, viewportCount: number, pViewports: VkViewport[] | null): void;
declare function vkCmdSetScissor(commandBuffer: VkCommandBuffer | null, firstScissor: number, scissorCount: number, pScissors: VkRect2D[] | null): void;
declare function vkCmdBindDescriptorSets(commandBuffer: VkCommandBuffer | null, pipelineBindPoint: VkPipelineBindPoint, layout: VkPipelineLayout | null, firstSet: number, descriptorSetCount: number, pDescriptorSets: VkDescriptorSet[] | null, dynamicOffsetCount: number, pDynamicOffsets: VkInout): void;
declare function vkCmdBindIndexBuffer(commandBuffer: VkCommandBuffer | null, buffer: VkBuffer | null, offset: number, indexType: VkIndexType): void;
declare function vkCmdBindVertexBuffers(commandBuffer: VkCommandBuffer | null, firstBinding: number, bindingCount: number, pBuffers: VkBuffer[] | null, pOffsets: VkInout): void;
declare function vkCmdDraw(commandBuffer: VkCommandBuffer | null, vertexCount: number, instanceCount: number, firstVertex: number, firstInstance: number): void;
declare function vkCmdDrawIndexed(commandBuffer: VkCommandBuffer | null, indexCount: number, instanceCount: number, firstIndex: number, vertexOffset: number, firstInstance: number): void;
declare function vkCmdCopyBuffer(commandBuffer: VkCommandBuffer | null, srcBuffer: VkBuffer | null, dstBuffer: VkBuffer | null, regionCount: number, pRegions: VkBufferCopy[] | null): void;
declare function vkCmdCopyBufferToImage(commandBuffer: VkCommandBuffer | null, srcBuffer: VkBuffer | null, dstImage: VkImage | null, dstImageLayout: VkImageLayout, regionCount: number, pRegions: VkBufferImageCopy[] | null): void;
declare function vkCmdPipelineBarrier(commandBuffer: VkCommandBuffer | null, srcStageMask: VkPipelineStageFlagBits, dstStageMask: VkPipelineStageFlagBits, dependencyFlags: VkDependencyFlagBits, memoryBarrierCount: number, pMemoryBarriers: VkMemoryBarrier[] | null, bufferMemoryBarrierCount: number, pBufferMemoryBarriers: VkBufferMemoryBarrier[] | null, imageMemoryBarrierCount: number, pImageMemoryBarriers: VkImageMemoryBarrier[] | null): void;
declare function vkCmdBeginRenderPass(commandBuffer: VkCommandBuffer | null, pRenderPassBegin: VkRenderPassBeginInfo | null, contents: VkSubpassContents): void;
declare function vkCmdEndRenderPass(commandBuffer: VkCommandBuffer | null): void;
declare function vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice: VkPhysicalDevice | null, queueFamilyIndex: number, surface: VkSurfaceKHR | null, pSupported: VkInout): number;
declare function vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice: VkPhysicalDevice | null, surface: VkSurfaceKHR | null, pSurfaceCapabilities: VkSurfaceCapabilitiesKHR | null): number;
declare function vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice: VkPhysicalDevice | null, surface: VkSurfaceKHR | null, pSurfaceFormatCount: VkInout, pSurfaceFormats: VkSurfaceFormatKHR[] | null): number;
declare function vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice: VkPhysicalDevice | null, surface: VkSurfaceKHR | null, pPresentModeCount: VkInout, pPresentModes: VkInout): number;
declare function vkCreateSwapchainKHR(device: VkDevice | null, pCreateInfo: VkSwapchainCreateInfoKHR | null, pAllocator: null, pSwapchain: VkSwapchainKHR | null): number;
declare function vkDestroySwapchainKHR(device: VkDevice | null, swapchain: VkSwapchainKHR | null, pAllocator: null): void;
declare function vkGetSwapchainImagesKHR(device: VkDevice | null, swapchain: VkSwapchainKHR | null, pSwapchainImageCount: VkInout, pSwapchainImages: VkImage[] | null): number;
declare function vkAcquireNextImageKHR(device: VkDevice | null, swapchain: VkSwapchainKHR | null, timeout: number, semaphore: VkSemaphore | null, fence: VkFence | null, pImageIndex: VkInout): number;
declare function vkQueuePresentKHR(queue: VkQueue | null, pPresentInfo: VkPresentInfoKHR | null): number;


/** #### HARDCODED #### **/
declare function createV8ArrayBufferFromMemory(
  addr: BigInt,
  size: number
): ArrayBuffer;

declare function VK_MAKE_VERSION(
  major: number,
  minor: number,
  patch: number
): number;

declare function VK_VERSION_MAJOR(
  major: number
): number;

declare function VK_VERSION_MINOR(
  minor: number
): number;

declare function VK_VERSION_PATCH(
  patch: number
): number;

declare var VK_API_VERSION_1_0: number;
