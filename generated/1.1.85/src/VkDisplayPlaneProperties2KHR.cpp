/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY node-vulkan v0.0.9
 */
#include "utils.h"
#include "index.h"
#include "VkDisplayPlaneProperties2KHR.h"

Nan::Persistent<v8::FunctionTemplate> _VkDisplayPlaneProperties2KHR::constructor;

_VkDisplayPlaneProperties2KHR::_VkDisplayPlaneProperties2KHR() {
  instance.sType = VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR;
  
}

_VkDisplayPlaneProperties2KHR::~_VkDisplayPlaneProperties2KHR() {
  //printf("VkDisplayPlaneProperties2KHR deconstructed!!\n");
  
  
  
}

void _VkDisplayPlaneProperties2KHR::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkDisplayPlaneProperties2KHR::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkDisplayPlaneProperties2KHR").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("sType").ToLocalChecked(), GetsType, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("displayPlaneProperties").ToLocalChecked(), GetdisplayPlaneProperties, nullptr, ctor);
  Nan::Set(target, Nan::New("VkDisplayPlaneProperties2KHR").ToLocalChecked(), ctor->GetFunction());
}

bool _VkDisplayPlaneProperties2KHR::flush() {
  _VkDisplayPlaneProperties2KHR *self = this;
  if (!(self->displayPlaneProperties.IsEmpty())) {
    v8::Local<v8::Value> value = Nan::New(self->displayPlaneProperties);
    
  }
  return true;
}

NAN_METHOD(_VkDisplayPlaneProperties2KHR::New) {
  if (info.IsConstructCall()) {
    _VkDisplayPlaneProperties2KHR* self = new _VkDisplayPlaneProperties2KHR();
    self->Wrap(info.Holder());
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkDisplayPlaneProperties2KHR constructor cannot be invoked without 'new'");
  }
};

// sType
NAN_GETTER(_VkDisplayPlaneProperties2KHR::GetsType) {
  _VkDisplayPlaneProperties2KHR *self = Nan::ObjectWrap::Unwrap<_VkDisplayPlaneProperties2KHR>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sType));
}// displayPlaneProperties
NAN_GETTER(_VkDisplayPlaneProperties2KHR::GetdisplayPlaneProperties) {
  _VkDisplayPlaneProperties2KHR *self = Nan::ObjectWrap::Unwrap<_VkDisplayPlaneProperties2KHR>(info.This());
  if (self->displayPlaneProperties.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->displayPlaneProperties);
    info.GetReturnValue().Set(obj);
  }
}