/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY node-vulkan v0.0.6
 */
#include "utils.h"
#include "index.h"
#include "VkRenderPassBeginInfo.h"

Nan::Persistent<v8::FunctionTemplate> _VkRenderPassBeginInfo::constructor;

_VkRenderPassBeginInfo::_VkRenderPassBeginInfo() {
  instance.sType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO;
}

_VkRenderPassBeginInfo::~_VkRenderPassBeginInfo() {
  //printf("VkRenderPassBeginInfo deconstructed!!\n");
}

void _VkRenderPassBeginInfo::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkRenderPassBeginInfo::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkRenderPassBeginInfo").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("sType").ToLocalChecked(), GetsType, SetsType, ctor);
  SetPrototypeAccessor(proto, Nan::New("pNext").ToLocalChecked(), GetpNext, SetpNext, ctor);
  SetPrototypeAccessor(proto, Nan::New("renderPass").ToLocalChecked(), GetrenderPass, SetrenderPass, ctor);
  SetPrototypeAccessor(proto, Nan::New("framebuffer").ToLocalChecked(), Getframebuffer, Setframebuffer, ctor);
  SetPrototypeAccessor(proto, Nan::New("renderArea").ToLocalChecked(), GetrenderArea, SetrenderArea, ctor);
  SetPrototypeAccessor(proto, Nan::New("clearValueCount").ToLocalChecked(), GetclearValueCount, SetclearValueCount, ctor);
  SetPrototypeAccessor(proto, Nan::New("pClearValues").ToLocalChecked(), GetpClearValues, SetpClearValues, ctor);
  Nan::Set(target, Nan::New("VkRenderPassBeginInfo").ToLocalChecked(), ctor->GetFunction());
}

NAN_METHOD(_VkRenderPassBeginInfo::New) {
  if (info.IsConstructCall()) {
    _VkRenderPassBeginInfo* self = new _VkRenderPassBeginInfo();
    self->Wrap(info.Holder());
    
    if (info[0]->IsObject()) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(info[0]).ToLocalChecked();
      v8::Local<v8::String> sAccess0 = Nan::New("sType").ToLocalChecked();
      v8::Local<v8::String> sAccess1 = Nan::New("pNext").ToLocalChecked();
      v8::Local<v8::String> sAccess2 = Nan::New("renderPass").ToLocalChecked();
      v8::Local<v8::String> sAccess3 = Nan::New("framebuffer").ToLocalChecked();
      v8::Local<v8::String> sAccess4 = Nan::New("renderArea").ToLocalChecked();
      v8::Local<v8::String> sAccess5 = Nan::New("clearValueCount").ToLocalChecked();
      v8::Local<v8::String> sAccess6 = Nan::New("pClearValues").ToLocalChecked();
      if (obj->Has(sAccess0)) info.This()->Set(sAccess0, obj->Get(sAccess0));
      if (obj->Has(sAccess1)) info.This()->Set(sAccess1, obj->Get(sAccess1));
      if (obj->Has(sAccess2)) info.This()->Set(sAccess2, obj->Get(sAccess2));
      if (obj->Has(sAccess3)) info.This()->Set(sAccess3, obj->Get(sAccess3));
      if (obj->Has(sAccess4)) info.This()->Set(sAccess4, obj->Get(sAccess4));
      if (obj->Has(sAccess5)) info.This()->Set(sAccess5, obj->Get(sAccess5));
      if (obj->Has(sAccess6)) info.This()->Set(sAccess6, obj->Get(sAccess6));
      
    }
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkRenderPassBeginInfo constructor cannot be invoked without 'new'");
  }
};

// sType
NAN_GETTER(_VkRenderPassBeginInfo::GetsType) {
  _VkRenderPassBeginInfo *self = Nan::ObjectWrap::Unwrap<_VkRenderPassBeginInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sType));
}NAN_SETTER(_VkRenderPassBeginInfo::SetsType) {
  _VkRenderPassBeginInfo *self = Nan::ObjectWrap::Unwrap<_VkRenderPassBeginInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.sType = static_cast<VkStructureType>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowError("Value of member 'sType' has invalid type");
  }
}// pNext
NAN_GETTER(_VkRenderPassBeginInfo::GetpNext) {
  _VkRenderPassBeginInfo *self = Nan::ObjectWrap::Unwrap<_VkRenderPassBeginInfo>(info.This());
}NAN_SETTER(_VkRenderPassBeginInfo::SetpNext) {
  _VkRenderPassBeginInfo *self = Nan::ObjectWrap::Unwrap<_VkRenderPassBeginInfo>(info.This());
}// renderPass
NAN_GETTER(_VkRenderPassBeginInfo::GetrenderPass) {
  _VkRenderPassBeginInfo *self = Nan::ObjectWrap::Unwrap<_VkRenderPassBeginInfo>(info.This());
  if (self->renderPass.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->renderPass);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkRenderPassBeginInfo::SetrenderPass) {
  _VkRenderPassBeginInfo *self = Nan::ObjectWrap::Unwrap<_VkRenderPassBeginInfo>(info.This());
  // js
  if (!(value->IsNull())) {
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> obj(Nan::To<v8::Object>(value).ToLocalChecked());
    self->renderPass = obj;
  } else {
    //self->renderPass = Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>>(Nan::Null());
  }
  // vulkan
  if (!(value->IsNull())) {
    _VkRenderPass* obj = Nan::ObjectWrap::Unwrap<_VkRenderPass>(Nan::To<v8::Object>(value).ToLocalChecked());
    self->instance.renderPass = obj->instance;
  } else {
    self->instance.renderPass = VK_NULL_HANDLE;
  }
}// framebuffer
NAN_GETTER(_VkRenderPassBeginInfo::Getframebuffer) {
  _VkRenderPassBeginInfo *self = Nan::ObjectWrap::Unwrap<_VkRenderPassBeginInfo>(info.This());
  if (self->framebuffer.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->framebuffer);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkRenderPassBeginInfo::Setframebuffer) {
  _VkRenderPassBeginInfo *self = Nan::ObjectWrap::Unwrap<_VkRenderPassBeginInfo>(info.This());
  // js
  if (!(value->IsNull())) {
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> obj(Nan::To<v8::Object>(value).ToLocalChecked());
    self->framebuffer = obj;
  } else {
    //self->framebuffer = Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>>(Nan::Null());
  }
  // vulkan
  if (!(value->IsNull())) {
    _VkFramebuffer* obj = Nan::ObjectWrap::Unwrap<_VkFramebuffer>(Nan::To<v8::Object>(value).ToLocalChecked());
    self->instance.framebuffer = obj->instance;
  } else {
    self->instance.framebuffer = VK_NULL_HANDLE;
  }
}// renderArea
NAN_GETTER(_VkRenderPassBeginInfo::GetrenderArea) {
  _VkRenderPassBeginInfo *self = Nan::ObjectWrap::Unwrap<_VkRenderPassBeginInfo>(info.This());
  if (self->renderArea.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->renderArea);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkRenderPassBeginInfo::SetrenderArea) {
  _VkRenderPassBeginInfo *self = Nan::ObjectWrap::Unwrap<_VkRenderPassBeginInfo>(info.This());
  // js
  if (!(value->IsNull())) {
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> obj(Nan::To<v8::Object>(value).ToLocalChecked());
    self->renderArea = obj;
  } else {
    //self->renderArea = Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>>(Nan::Null());
  }
  // vulkan
  if (!(value->IsNull())) {
    _VkRect2D* obj = Nan::ObjectWrap::Unwrap<_VkRect2D>(Nan::To<v8::Object>(value).ToLocalChecked());
    self->instance.renderArea = obj->instance;
  } else {
    memset(&self->instance.renderArea, 0, sizeof(VkRect2D));
  }
}// clearValueCount
NAN_GETTER(_VkRenderPassBeginInfo::GetclearValueCount) {
  _VkRenderPassBeginInfo *self = Nan::ObjectWrap::Unwrap<_VkRenderPassBeginInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.clearValueCount));
}NAN_SETTER(_VkRenderPassBeginInfo::SetclearValueCount) {
  _VkRenderPassBeginInfo *self = Nan::ObjectWrap::Unwrap<_VkRenderPassBeginInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.clearValueCount = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowError("Value of member 'clearValueCount' has invalid type");
  }
}// pClearValues
NAN_GETTER(_VkRenderPassBeginInfo::GetpClearValues) {
  _VkRenderPassBeginInfo *self = Nan::ObjectWrap::Unwrap<_VkRenderPassBeginInfo>(info.This());
  if (self->pClearValues.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->pClearValues);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkRenderPassBeginInfo::SetpClearValues) {
  _VkRenderPassBeginInfo *self = Nan::ObjectWrap::Unwrap<_VkRenderPassBeginInfo>(info.This());
  
    // js
    if (value->IsArray()) {
      self->pClearValues.Reset<v8::Array>(value.As<v8::Array>());
    } else if (value->IsNull()) {
      self->pClearValues.Reset();
    } else {
      return Nan::ThrowError("Value of member 'pClearValues' has invalid type");
    }
  
  // vulkan
  if (!(value->IsNull())) {
    self->instance.pClearValues = copyArrayOfV8Objects<VkClearValue, _VkClearValue>(value);
  } else {
    self->instance.pClearValues = nullptr;
  }
}