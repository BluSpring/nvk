/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY node-vulkan v0.0.7
 */
#include "utils.h"
#include "index.h"
#include "VkPipelineDynamicStateCreateInfo.h"

Nan::Persistent<v8::FunctionTemplate> _VkPipelineDynamicStateCreateInfo::constructor;

_VkPipelineDynamicStateCreateInfo::_VkPipelineDynamicStateCreateInfo() {
  instance.sType = VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO;
}

_VkPipelineDynamicStateCreateInfo::~_VkPipelineDynamicStateCreateInfo() {
  //printf("VkPipelineDynamicStateCreateInfo deconstructed!!\n");
}

void _VkPipelineDynamicStateCreateInfo::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkPipelineDynamicStateCreateInfo::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkPipelineDynamicStateCreateInfo").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  Nan::SetPrototypeMethod(ctor, "flush", flush);
  
  SetPrototypeAccessor(proto, Nan::New("sType").ToLocalChecked(), GetsType, SetsType, ctor);
  SetPrototypeAccessor(proto, Nan::New("pNext").ToLocalChecked(), GetpNext, SetpNext, ctor);
  SetPrototypeAccessor(proto, Nan::New("flags").ToLocalChecked(), Getflags, Setflags, ctor);
  SetPrototypeAccessor(proto, Nan::New("dynamicStateCount").ToLocalChecked(), GetdynamicStateCount, SetdynamicStateCount, ctor);
  SetPrototypeAccessor(proto, Nan::New("pDynamicStates").ToLocalChecked(), GetpDynamicStates, SetpDynamicStates, ctor);
  Nan::Set(target, Nan::New("VkPipelineDynamicStateCreateInfo").ToLocalChecked(), ctor->GetFunction());
}

NAN_METHOD(_VkPipelineDynamicStateCreateInfo::New) {
  if (info.IsConstructCall()) {
    _VkPipelineDynamicStateCreateInfo* self = new _VkPipelineDynamicStateCreateInfo();
    self->Wrap(info.Holder());
    
    if (info[0]->IsObject()) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(info[0]).ToLocalChecked();
      if (obj->Has(self->sAccess0)) info.This()->Set(self->sAccess0, obj->Get(self->sAccess0));
      if (obj->Has(self->sAccess1)) info.This()->Set(self->sAccess1, obj->Get(self->sAccess1));
      if (obj->Has(self->sAccess2)) info.This()->Set(self->sAccess2, obj->Get(self->sAccess2));
      if (obj->Has(self->sAccess3)) info.This()->Set(self->sAccess3, obj->Get(self->sAccess3));
      if (obj->Has(self->sAccess4)) info.This()->Set(self->sAccess4, obj->Get(self->sAccess4));
      
    }
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkPipelineDynamicStateCreateInfo constructor cannot be invoked without 'new'");
  }
};

NAN_METHOD(_VkPipelineDynamicStateCreateInfo::flush) {
  _VkPipelineDynamicStateCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkPipelineDynamicStateCreateInfo>(info.This());
  
}

// sType
NAN_GETTER(_VkPipelineDynamicStateCreateInfo::GetsType) {
  _VkPipelineDynamicStateCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkPipelineDynamicStateCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sType));
}NAN_SETTER(_VkPipelineDynamicStateCreateInfo::SetsType) {
  _VkPipelineDynamicStateCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkPipelineDynamicStateCreateInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.sType = static_cast<VkStructureType>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkPipelineDynamicStateCreateInfo.sType'");
  }
}// pNext
NAN_GETTER(_VkPipelineDynamicStateCreateInfo::GetpNext) {
  _VkPipelineDynamicStateCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkPipelineDynamicStateCreateInfo>(info.This());
}NAN_SETTER(_VkPipelineDynamicStateCreateInfo::SetpNext) {
  _VkPipelineDynamicStateCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkPipelineDynamicStateCreateInfo>(info.This());
}// flags
NAN_GETTER(_VkPipelineDynamicStateCreateInfo::Getflags) {
  _VkPipelineDynamicStateCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkPipelineDynamicStateCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.flags));
}NAN_SETTER(_VkPipelineDynamicStateCreateInfo::Setflags) {
  _VkPipelineDynamicStateCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkPipelineDynamicStateCreateInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.flags = static_cast<VkPipelineDynamicStateCreateFlags>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkPipelineDynamicStateCreateInfo.flags'");
  }
}// dynamicStateCount
NAN_GETTER(_VkPipelineDynamicStateCreateInfo::GetdynamicStateCount) {
  _VkPipelineDynamicStateCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkPipelineDynamicStateCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.dynamicStateCount));
}NAN_SETTER(_VkPipelineDynamicStateCreateInfo::SetdynamicStateCount) {
  _VkPipelineDynamicStateCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkPipelineDynamicStateCreateInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.dynamicStateCount = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkPipelineDynamicStateCreateInfo.dynamicStateCount'");
  }
}// pDynamicStates
NAN_GETTER(_VkPipelineDynamicStateCreateInfo::GetpDynamicStates) {
  _VkPipelineDynamicStateCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkPipelineDynamicStateCreateInfo>(info.This());
  if (self->pDynamicStates.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->pDynamicStates);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkPipelineDynamicStateCreateInfo::SetpDynamicStates) {
  _VkPipelineDynamicStateCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkPipelineDynamicStateCreateInfo>(info.This());
  
    // js
    if (value->IsArrayBufferView()) {
      if (value->IsInt32Array()) {
        self->pDynamicStates.Reset<v8::Array>(value.As<v8::Array>());
      } else {
        return Nan::ThrowTypeError("Expected 'Int32Array' for 'VkPipelineDynamicStateCreateInfo.pDynamicStates'");
      }
    } else if (value->IsNull()) {
      self->pDynamicStates.Reset();
    } else {
      return Nan::ThrowTypeError("Expected 'Int32Array' for 'VkPipelineDynamicStateCreateInfo.pDynamicStates'");
    }
  
  
  // vulkan
  if (value->IsArrayBufferView()) {
    self->instance.pDynamicStates = reinterpret_cast<const VkDynamicState *>(getTypedArrayData<int32_t>(Nan::To<v8::Object>(value).ToLocalChecked(), nullptr));
  } else {
    self->instance.pDynamicStates = nullptr;
  }
}