/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY node-vulkan v0.0.7
 */
#include "utils.h"
#include "index.h"
#include "VkPipelineTessellationStateCreateInfo.h"

Nan::Persistent<v8::FunctionTemplate> _VkPipelineTessellationStateCreateInfo::constructor;

_VkPipelineTessellationStateCreateInfo::_VkPipelineTessellationStateCreateInfo() {
  instance.sType = VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO;
}

_VkPipelineTessellationStateCreateInfo::~_VkPipelineTessellationStateCreateInfo() {
  //printf("VkPipelineTessellationStateCreateInfo deconstructed!!\n");
}

void _VkPipelineTessellationStateCreateInfo::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkPipelineTessellationStateCreateInfo::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkPipelineTessellationStateCreateInfo").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  Nan::SetPrototypeMethod(ctor, "flush", flush);
  
  SetPrototypeAccessor(proto, Nan::New("sType").ToLocalChecked(), GetsType, SetsType, ctor);
  SetPrototypeAccessor(proto, Nan::New("pNext").ToLocalChecked(), GetpNext, SetpNext, ctor);
  SetPrototypeAccessor(proto, Nan::New("flags").ToLocalChecked(), Getflags, Setflags, ctor);
  SetPrototypeAccessor(proto, Nan::New("patchControlPoints").ToLocalChecked(), GetpatchControlPoints, SetpatchControlPoints, ctor);
  Nan::Set(target, Nan::New("VkPipelineTessellationStateCreateInfo").ToLocalChecked(), ctor->GetFunction());
}

NAN_METHOD(_VkPipelineTessellationStateCreateInfo::New) {
  if (info.IsConstructCall()) {
    _VkPipelineTessellationStateCreateInfo* self = new _VkPipelineTessellationStateCreateInfo();
    self->Wrap(info.Holder());
    
    if (info[0]->IsObject()) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(info[0]).ToLocalChecked();
      if (obj->Has(self->sAccess0)) info.This()->Set(self->sAccess0, obj->Get(self->sAccess0));
      if (obj->Has(self->sAccess1)) info.This()->Set(self->sAccess1, obj->Get(self->sAccess1));
      if (obj->Has(self->sAccess2)) info.This()->Set(self->sAccess2, obj->Get(self->sAccess2));
      if (obj->Has(self->sAccess3)) info.This()->Set(self->sAccess3, obj->Get(self->sAccess3));
      
    }
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkPipelineTessellationStateCreateInfo constructor cannot be invoked without 'new'");
  }
};

NAN_METHOD(_VkPipelineTessellationStateCreateInfo::flush) {
  _VkPipelineTessellationStateCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkPipelineTessellationStateCreateInfo>(info.This());
  
}

// sType
NAN_GETTER(_VkPipelineTessellationStateCreateInfo::GetsType) {
  _VkPipelineTessellationStateCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkPipelineTessellationStateCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sType));
}NAN_SETTER(_VkPipelineTessellationStateCreateInfo::SetsType) {
  _VkPipelineTessellationStateCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkPipelineTessellationStateCreateInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.sType = static_cast<VkStructureType>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkPipelineTessellationStateCreateInfo.sType'");
  }
}// pNext
NAN_GETTER(_VkPipelineTessellationStateCreateInfo::GetpNext) {
  _VkPipelineTessellationStateCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkPipelineTessellationStateCreateInfo>(info.This());
}NAN_SETTER(_VkPipelineTessellationStateCreateInfo::SetpNext) {
  _VkPipelineTessellationStateCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkPipelineTessellationStateCreateInfo>(info.This());
}// flags
NAN_GETTER(_VkPipelineTessellationStateCreateInfo::Getflags) {
  _VkPipelineTessellationStateCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkPipelineTessellationStateCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.flags));
}NAN_SETTER(_VkPipelineTessellationStateCreateInfo::Setflags) {
  _VkPipelineTessellationStateCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkPipelineTessellationStateCreateInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.flags = static_cast<VkPipelineTessellationStateCreateFlags>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkPipelineTessellationStateCreateInfo.flags'");
  }
}// patchControlPoints
NAN_GETTER(_VkPipelineTessellationStateCreateInfo::GetpatchControlPoints) {
  _VkPipelineTessellationStateCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkPipelineTessellationStateCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.patchControlPoints));
}NAN_SETTER(_VkPipelineTessellationStateCreateInfo::SetpatchControlPoints) {
  _VkPipelineTessellationStateCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkPipelineTessellationStateCreateInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.patchControlPoints = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkPipelineTessellationStateCreateInfo.patchControlPoints'");
  }
}