/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY node-vulkan v0.0.9
 */
#include "utils.h"
#include <string.h>
#include "index.h"
#include "VkShaderStatisticsInfoAMD.h"

Nan::Persistent<v8::FunctionTemplate> _VkShaderStatisticsInfoAMD::constructor;

_VkShaderStatisticsInfoAMD::_VkShaderStatisticsInfoAMD() {
  
  vcomputeWorkGroupSize = new std::vector<uint32_t>;
  
}

_VkShaderStatisticsInfoAMD::~_VkShaderStatisticsInfoAMD() {
  //printf("VkShaderStatisticsInfoAMD deconstructed!!\n");
  
  
  
  
  
  
  
  vcomputeWorkGroupSize->clear();
  delete vcomputeWorkGroupSize;
  
  
}

void _VkShaderStatisticsInfoAMD::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkShaderStatisticsInfoAMD::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkShaderStatisticsInfoAMD").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("shaderStageMask").ToLocalChecked(), GetshaderStageMask, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("resourceUsage").ToLocalChecked(), GetresourceUsage, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("numPhysicalVgprs").ToLocalChecked(), GetnumPhysicalVgprs, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("numPhysicalSgprs").ToLocalChecked(), GetnumPhysicalSgprs, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("numAvailableVgprs").ToLocalChecked(), GetnumAvailableVgprs, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("numAvailableSgprs").ToLocalChecked(), GetnumAvailableSgprs, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("computeWorkGroupSize").ToLocalChecked(), GetcomputeWorkGroupSize, nullptr, ctor);
  Nan::Set(target, Nan::New("VkShaderStatisticsInfoAMD").ToLocalChecked(), ctor->GetFunction());
}

bool _VkShaderStatisticsInfoAMD::flush() {
  _VkShaderStatisticsInfoAMD *self = this;
  if (!(self->resourceUsage.IsEmpty())) {
    v8::Local<v8::Value> value = Nan::New(self->resourceUsage);
    
  }if (!(self->computeWorkGroupSize.IsEmpty())) {
    v8::Local<v8::Value> value = Nan::New(self->computeWorkGroupSize);
    
  }
  return true;
}

NAN_METHOD(_VkShaderStatisticsInfoAMD::New) {
  if (info.IsConstructCall()) {
    _VkShaderStatisticsInfoAMD* self = new _VkShaderStatisticsInfoAMD();
    self->Wrap(info.Holder());
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkShaderStatisticsInfoAMD constructor cannot be invoked without 'new'");
  }
};

// shaderStageMask
NAN_GETTER(_VkShaderStatisticsInfoAMD::GetshaderStageMask) {
  _VkShaderStatisticsInfoAMD *self = Nan::ObjectWrap::Unwrap<_VkShaderStatisticsInfoAMD>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.shaderStageMask));
}// resourceUsage
NAN_GETTER(_VkShaderStatisticsInfoAMD::GetresourceUsage) {
  _VkShaderStatisticsInfoAMD *self = Nan::ObjectWrap::Unwrap<_VkShaderStatisticsInfoAMD>(info.This());
  if (self->resourceUsage.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->resourceUsage);
    info.GetReturnValue().Set(obj);
  }
}// numPhysicalVgprs
NAN_GETTER(_VkShaderStatisticsInfoAMD::GetnumPhysicalVgprs) {
  _VkShaderStatisticsInfoAMD *self = Nan::ObjectWrap::Unwrap<_VkShaderStatisticsInfoAMD>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.numPhysicalVgprs));
}// numPhysicalSgprs
NAN_GETTER(_VkShaderStatisticsInfoAMD::GetnumPhysicalSgprs) {
  _VkShaderStatisticsInfoAMD *self = Nan::ObjectWrap::Unwrap<_VkShaderStatisticsInfoAMD>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.numPhysicalSgprs));
}// numAvailableVgprs
NAN_GETTER(_VkShaderStatisticsInfoAMD::GetnumAvailableVgprs) {
  _VkShaderStatisticsInfoAMD *self = Nan::ObjectWrap::Unwrap<_VkShaderStatisticsInfoAMD>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.numAvailableVgprs));
}// numAvailableSgprs
NAN_GETTER(_VkShaderStatisticsInfoAMD::GetnumAvailableSgprs) {
  _VkShaderStatisticsInfoAMD *self = Nan::ObjectWrap::Unwrap<_VkShaderStatisticsInfoAMD>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.numAvailableSgprs));
}// computeWorkGroupSize
NAN_GETTER(_VkShaderStatisticsInfoAMD::GetcomputeWorkGroupSize) {
  _VkShaderStatisticsInfoAMD *self = Nan::ObjectWrap::Unwrap<_VkShaderStatisticsInfoAMD>(info.This());
  if (self->computeWorkGroupSize.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    info.GetReturnValue().Set(Nan::New(self->computeWorkGroupSize));
  }
}