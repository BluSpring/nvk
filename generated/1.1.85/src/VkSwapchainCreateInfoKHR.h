/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY node-vulkan v0.0.7
 */
#ifndef __VK_VKSWAPCHAINCREATEINFOKHR_H__
#define __VK_VKSWAPCHAINCREATEINFOKHR_H__

#include <nan.h>

#include <vulkan/vulkan_win32.h>
#define GLFW_INCLUDE_VULKAN
#include <GLFW/glfw3.h>

class _VkSwapchainCreateInfoKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_METHOD(flush);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> surface;
      static NAN_GETTER(Getsurface);
    static NAN_SETTER(Setsurface);
    
    static NAN_GETTER(GetminImageCount);
    static NAN_SETTER(SetminImageCount);
    
    static NAN_GETTER(GetimageFormat);
    static NAN_SETTER(SetimageFormat);
    
    static NAN_GETTER(GetimageColorSpace);
    static NAN_SETTER(SetimageColorSpace);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> imageExtent;
      static NAN_GETTER(GetimageExtent);
    static NAN_SETTER(SetimageExtent);
    
    static NAN_GETTER(GetimageArrayLayers);
    static NAN_SETTER(SetimageArrayLayers);
    
    static NAN_GETTER(GetimageUsage);
    static NAN_SETTER(SetimageUsage);
    
    static NAN_GETTER(GetimageSharingMode);
    static NAN_SETTER(SetimageSharingMode);
    
    static NAN_GETTER(GetqueueFamilyIndexCount);
    static NAN_SETTER(SetqueueFamilyIndexCount);
    
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pQueueFamilyIndices;
    static NAN_GETTER(GetpQueueFamilyIndices);
    static NAN_SETTER(SetpQueueFamilyIndices);
    
    static NAN_GETTER(GetpreTransform);
    static NAN_SETTER(SetpreTransform);
    
    static NAN_GETTER(GetcompositeAlpha);
    static NAN_SETTER(SetcompositeAlpha);
    
    static NAN_GETTER(GetpresentMode);
    static NAN_SETTER(SetpresentMode);
    
    static NAN_GETTER(Getclipped);
    static NAN_SETTER(Setclipped);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> oldSwapchain;
      static NAN_GETTER(GetoldSwapchain);
    static NAN_SETTER(SetoldSwapchain);
    

    // real instance
    VkSwapchainCreateInfoKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);

  private:
    v8::Local<v8::String> sAccess0 = Nan::New("sType").ToLocalChecked();
    v8::Local<v8::String> sAccess1 = Nan::New("pNext").ToLocalChecked();
    v8::Local<v8::String> sAccess2 = Nan::New("flags").ToLocalChecked();
    v8::Local<v8::String> sAccess3 = Nan::New("surface").ToLocalChecked();
    v8::Local<v8::String> sAccess4 = Nan::New("minImageCount").ToLocalChecked();
    v8::Local<v8::String> sAccess5 = Nan::New("imageFormat").ToLocalChecked();
    v8::Local<v8::String> sAccess6 = Nan::New("imageColorSpace").ToLocalChecked();
    v8::Local<v8::String> sAccess7 = Nan::New("imageExtent").ToLocalChecked();
    v8::Local<v8::String> sAccess8 = Nan::New("imageArrayLayers").ToLocalChecked();
    v8::Local<v8::String> sAccess9 = Nan::New("imageUsage").ToLocalChecked();
    v8::Local<v8::String> sAccess10 = Nan::New("imageSharingMode").ToLocalChecked();
    v8::Local<v8::String> sAccess11 = Nan::New("queueFamilyIndexCount").ToLocalChecked();
    v8::Local<v8::String> sAccess12 = Nan::New("pQueueFamilyIndices").ToLocalChecked();
    v8::Local<v8::String> sAccess13 = Nan::New("preTransform").ToLocalChecked();
    v8::Local<v8::String> sAccess14 = Nan::New("compositeAlpha").ToLocalChecked();
    v8::Local<v8::String> sAccess15 = Nan::New("presentMode").ToLocalChecked();
    v8::Local<v8::String> sAccess16 = Nan::New("clipped").ToLocalChecked();
    v8::Local<v8::String> sAccess17 = Nan::New("oldSwapchain").ToLocalChecked();

    _VkSwapchainCreateInfoKHR();
    ~_VkSwapchainCreateInfoKHR();

};

#endif