/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY node-vulkan v0.0.9
 */
#include "utils.h"
#include "index.h"
#include "VkDisplayPlaneCapabilitiesKHR.h"

Nan::Persistent<v8::FunctionTemplate> _VkDisplayPlaneCapabilitiesKHR::constructor;

_VkDisplayPlaneCapabilitiesKHR::_VkDisplayPlaneCapabilitiesKHR() {
  
  
}

_VkDisplayPlaneCapabilitiesKHR::~_VkDisplayPlaneCapabilitiesKHR() {
  //printf("VkDisplayPlaneCapabilitiesKHR deconstructed!!\n");
  
  
  
  
  
  
  
  
  
  
}

void _VkDisplayPlaneCapabilitiesKHR::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkDisplayPlaneCapabilitiesKHR::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkDisplayPlaneCapabilitiesKHR").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("supportedAlpha").ToLocalChecked(), GetsupportedAlpha, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("minSrcPosition").ToLocalChecked(), GetminSrcPosition, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxSrcPosition").ToLocalChecked(), GetmaxSrcPosition, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("minSrcExtent").ToLocalChecked(), GetminSrcExtent, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxSrcExtent").ToLocalChecked(), GetmaxSrcExtent, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("minDstPosition").ToLocalChecked(), GetminDstPosition, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxDstPosition").ToLocalChecked(), GetmaxDstPosition, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("minDstExtent").ToLocalChecked(), GetminDstExtent, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxDstExtent").ToLocalChecked(), GetmaxDstExtent, nullptr, ctor);
  Nan::Set(target, Nan::New("VkDisplayPlaneCapabilitiesKHR").ToLocalChecked(), ctor->GetFunction());
}

bool _VkDisplayPlaneCapabilitiesKHR::flush() {
  _VkDisplayPlaneCapabilitiesKHR *self = this;
  if (!(self->minSrcPosition.IsEmpty())) {
    v8::Local<v8::Value> value = Nan::New(self->minSrcPosition);
    
  }if (!(self->maxSrcPosition.IsEmpty())) {
    v8::Local<v8::Value> value = Nan::New(self->maxSrcPosition);
    
  }if (!(self->minSrcExtent.IsEmpty())) {
    v8::Local<v8::Value> value = Nan::New(self->minSrcExtent);
    
  }if (!(self->maxSrcExtent.IsEmpty())) {
    v8::Local<v8::Value> value = Nan::New(self->maxSrcExtent);
    
  }if (!(self->minDstPosition.IsEmpty())) {
    v8::Local<v8::Value> value = Nan::New(self->minDstPosition);
    
  }if (!(self->maxDstPosition.IsEmpty())) {
    v8::Local<v8::Value> value = Nan::New(self->maxDstPosition);
    
  }if (!(self->minDstExtent.IsEmpty())) {
    v8::Local<v8::Value> value = Nan::New(self->minDstExtent);
    
  }if (!(self->maxDstExtent.IsEmpty())) {
    v8::Local<v8::Value> value = Nan::New(self->maxDstExtent);
    
  }
  return true;
}

NAN_METHOD(_VkDisplayPlaneCapabilitiesKHR::New) {
  if (info.IsConstructCall()) {
    _VkDisplayPlaneCapabilitiesKHR* self = new _VkDisplayPlaneCapabilitiesKHR();
    self->Wrap(info.Holder());
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkDisplayPlaneCapabilitiesKHR constructor cannot be invoked without 'new'");
  }
};

// supportedAlpha
NAN_GETTER(_VkDisplayPlaneCapabilitiesKHR::GetsupportedAlpha) {
  _VkDisplayPlaneCapabilitiesKHR *self = Nan::ObjectWrap::Unwrap<_VkDisplayPlaneCapabilitiesKHR>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.supportedAlpha));
}// minSrcPosition
NAN_GETTER(_VkDisplayPlaneCapabilitiesKHR::GetminSrcPosition) {
  _VkDisplayPlaneCapabilitiesKHR *self = Nan::ObjectWrap::Unwrap<_VkDisplayPlaneCapabilitiesKHR>(info.This());
  if (self->minSrcPosition.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->minSrcPosition);
    info.GetReturnValue().Set(obj);
  }
}// maxSrcPosition
NAN_GETTER(_VkDisplayPlaneCapabilitiesKHR::GetmaxSrcPosition) {
  _VkDisplayPlaneCapabilitiesKHR *self = Nan::ObjectWrap::Unwrap<_VkDisplayPlaneCapabilitiesKHR>(info.This());
  if (self->maxSrcPosition.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->maxSrcPosition);
    info.GetReturnValue().Set(obj);
  }
}// minSrcExtent
NAN_GETTER(_VkDisplayPlaneCapabilitiesKHR::GetminSrcExtent) {
  _VkDisplayPlaneCapabilitiesKHR *self = Nan::ObjectWrap::Unwrap<_VkDisplayPlaneCapabilitiesKHR>(info.This());
  if (self->minSrcExtent.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->minSrcExtent);
    info.GetReturnValue().Set(obj);
  }
}// maxSrcExtent
NAN_GETTER(_VkDisplayPlaneCapabilitiesKHR::GetmaxSrcExtent) {
  _VkDisplayPlaneCapabilitiesKHR *self = Nan::ObjectWrap::Unwrap<_VkDisplayPlaneCapabilitiesKHR>(info.This());
  if (self->maxSrcExtent.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->maxSrcExtent);
    info.GetReturnValue().Set(obj);
  }
}// minDstPosition
NAN_GETTER(_VkDisplayPlaneCapabilitiesKHR::GetminDstPosition) {
  _VkDisplayPlaneCapabilitiesKHR *self = Nan::ObjectWrap::Unwrap<_VkDisplayPlaneCapabilitiesKHR>(info.This());
  if (self->minDstPosition.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->minDstPosition);
    info.GetReturnValue().Set(obj);
  }
}// maxDstPosition
NAN_GETTER(_VkDisplayPlaneCapabilitiesKHR::GetmaxDstPosition) {
  _VkDisplayPlaneCapabilitiesKHR *self = Nan::ObjectWrap::Unwrap<_VkDisplayPlaneCapabilitiesKHR>(info.This());
  if (self->maxDstPosition.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->maxDstPosition);
    info.GetReturnValue().Set(obj);
  }
}// minDstExtent
NAN_GETTER(_VkDisplayPlaneCapabilitiesKHR::GetminDstExtent) {
  _VkDisplayPlaneCapabilitiesKHR *self = Nan::ObjectWrap::Unwrap<_VkDisplayPlaneCapabilitiesKHR>(info.This());
  if (self->minDstExtent.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->minDstExtent);
    info.GetReturnValue().Set(obj);
  }
}// maxDstExtent
NAN_GETTER(_VkDisplayPlaneCapabilitiesKHR::GetmaxDstExtent) {
  _VkDisplayPlaneCapabilitiesKHR *self = Nan::ObjectWrap::Unwrap<_VkDisplayPlaneCapabilitiesKHR>(info.This());
  if (self->maxDstExtent.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->maxDstExtent);
    info.GetReturnValue().Set(obj);
  }
}