/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY node-vulkan v0.0.6
 */
#ifndef __VK_VKPHYSICALDEVICELIMITS_H__
#define __VK_VKPHYSICALDEVICELIMITS_H__

#include <nan.h>

#include <vulkan/vulkan_win32.h>
#define GLFW_INCLUDE_VULKAN
#include <GLFW/glfw3.h>

class _VkPhysicalDeviceLimits: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_METHOD(flush);
    // #accessors
    static NAN_GETTER(GetmaxImageDimension1D);
    static NAN_GETTER(GetmaxImageDimension2D);
    static NAN_GETTER(GetmaxImageDimension3D);
    static NAN_GETTER(GetmaxImageDimensionCube);
    static NAN_GETTER(GetmaxImageArrayLayers);
    static NAN_GETTER(GetmaxTexelBufferElements);
    static NAN_GETTER(GetmaxUniformBufferRange);
    static NAN_GETTER(GetmaxStorageBufferRange);
    static NAN_GETTER(GetmaxPushConstantsSize);
    static NAN_GETTER(GetmaxMemoryAllocationCount);
    static NAN_GETTER(GetmaxSamplerAllocationCount);
    static NAN_GETTER(GetbufferImageGranularity);
    static NAN_GETTER(GetsparseAddressSpaceSize);
    static NAN_GETTER(GetmaxBoundDescriptorSets);
    static NAN_GETTER(GetmaxPerStageDescriptorSamplers);
    static NAN_GETTER(GetmaxPerStageDescriptorUniformBuffers);
    static NAN_GETTER(GetmaxPerStageDescriptorStorageBuffers);
    static NAN_GETTER(GetmaxPerStageDescriptorSampledImages);
    static NAN_GETTER(GetmaxPerStageDescriptorStorageImages);
    static NAN_GETTER(GetmaxPerStageDescriptorInputAttachments);
    static NAN_GETTER(GetmaxPerStageResources);
    static NAN_GETTER(GetmaxDescriptorSetSamplers);
    static NAN_GETTER(GetmaxDescriptorSetUniformBuffers);
    static NAN_GETTER(GetmaxDescriptorSetUniformBuffersDynamic);
    static NAN_GETTER(GetmaxDescriptorSetStorageBuffers);
    static NAN_GETTER(GetmaxDescriptorSetStorageBuffersDynamic);
    static NAN_GETTER(GetmaxDescriptorSetSampledImages);
    static NAN_GETTER(GetmaxDescriptorSetStorageImages);
    static NAN_GETTER(GetmaxDescriptorSetInputAttachments);
    static NAN_GETTER(GetmaxVertexInputAttributes);
    static NAN_GETTER(GetmaxVertexInputBindings);
    static NAN_GETTER(GetmaxVertexInputAttributeOffset);
    static NAN_GETTER(GetmaxVertexInputBindingStride);
    static NAN_GETTER(GetmaxVertexOutputComponents);
    static NAN_GETTER(GetmaxTessellationGenerationLevel);
    static NAN_GETTER(GetmaxTessellationPatchSize);
    static NAN_GETTER(GetmaxTessellationControlPerVertexInputComponents);
    static NAN_GETTER(GetmaxTessellationControlPerVertexOutputComponents);
    static NAN_GETTER(GetmaxTessellationControlPerPatchOutputComponents);
    static NAN_GETTER(GetmaxTessellationControlTotalOutputComponents);
    static NAN_GETTER(GetmaxTessellationEvaluationInputComponents);
    static NAN_GETTER(GetmaxTessellationEvaluationOutputComponents);
    static NAN_GETTER(GetmaxGeometryShaderInvocations);
    static NAN_GETTER(GetmaxGeometryInputComponents);
    static NAN_GETTER(GetmaxGeometryOutputComponents);
    static NAN_GETTER(GetmaxGeometryOutputVertices);
    static NAN_GETTER(GetmaxGeometryTotalOutputComponents);
    static NAN_GETTER(GetmaxFragmentInputComponents);
    static NAN_GETTER(GetmaxFragmentOutputAttachments);
    static NAN_GETTER(GetmaxFragmentDualSrcAttachments);
    static NAN_GETTER(GetmaxFragmentCombinedOutputResources);
    static NAN_GETTER(GetmaxComputeSharedMemorySize);
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> maxComputeWorkGroupCount;
    static NAN_GETTER(GetmaxComputeWorkGroupCount);
    static NAN_GETTER(GetmaxComputeWorkGroupInvocations);
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> maxComputeWorkGroupSize;
    static NAN_GETTER(GetmaxComputeWorkGroupSize);
    static NAN_GETTER(GetsubPixelPrecisionBits);
    static NAN_GETTER(GetsubTexelPrecisionBits);
    static NAN_GETTER(GetmipmapPrecisionBits);
    static NAN_GETTER(GetmaxDrawIndexedIndexValue);
    static NAN_GETTER(GetmaxDrawIndirectCount);
    static NAN_GETTER(GetmaxSamplerLodBias);
    static NAN_GETTER(GetmaxSamplerAnisotropy);
    static NAN_GETTER(GetmaxViewports);
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> maxViewportDimensions;
    static NAN_GETTER(GetmaxViewportDimensions);
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> viewportBoundsRange;
    static NAN_GETTER(GetviewportBoundsRange);
    static NAN_GETTER(GetviewportSubPixelBits);
    static NAN_GETTER(GetminMemoryMapAlignment);
    static NAN_GETTER(GetminTexelBufferOffsetAlignment);
    static NAN_GETTER(GetminUniformBufferOffsetAlignment);
    static NAN_GETTER(GetminStorageBufferOffsetAlignment);
    static NAN_GETTER(GetminTexelOffset);
    static NAN_GETTER(GetmaxTexelOffset);
    static NAN_GETTER(GetminTexelGatherOffset);
    static NAN_GETTER(GetmaxTexelGatherOffset);
    static NAN_GETTER(GetminInterpolationOffset);
    static NAN_GETTER(GetmaxInterpolationOffset);
    static NAN_GETTER(GetsubPixelInterpolationOffsetBits);
    static NAN_GETTER(GetmaxFramebufferWidth);
    static NAN_GETTER(GetmaxFramebufferHeight);
    static NAN_GETTER(GetmaxFramebufferLayers);
    static NAN_GETTER(GetframebufferColorSampleCounts);
    static NAN_GETTER(GetframebufferDepthSampleCounts);
    static NAN_GETTER(GetframebufferStencilSampleCounts);
    static NAN_GETTER(GetframebufferNoAttachmentsSampleCounts);
    static NAN_GETTER(GetmaxColorAttachments);
    static NAN_GETTER(GetsampledImageColorSampleCounts);
    static NAN_GETTER(GetsampledImageIntegerSampleCounts);
    static NAN_GETTER(GetsampledImageDepthSampleCounts);
    static NAN_GETTER(GetsampledImageStencilSampleCounts);
    static NAN_GETTER(GetstorageImageSampleCounts);
    static NAN_GETTER(GetmaxSampleMaskWords);
    static NAN_GETTER(GettimestampComputeAndGraphics);
    static NAN_GETTER(GettimestampPeriod);
    static NAN_GETTER(GetmaxClipDistances);
    static NAN_GETTER(GetmaxCullDistances);
    static NAN_GETTER(GetmaxCombinedClipAndCullDistances);
    static NAN_GETTER(GetdiscreteQueuePriorities);
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pointSizeRange;
    static NAN_GETTER(GetpointSizeRange);
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> lineWidthRange;
    static NAN_GETTER(GetlineWidthRange);
    static NAN_GETTER(GetpointSizeGranularity);
    static NAN_GETTER(GetlineWidthGranularity);
    static NAN_GETTER(GetstrictLines);
    static NAN_GETTER(GetstandardSampleLocations);
    static NAN_GETTER(GetoptimalBufferCopyOffsetAlignment);
    static NAN_GETTER(GetoptimalBufferCopyRowPitchAlignment);
    static NAN_GETTER(GetnonCoherentAtomSize);

    // real instance
    VkPhysicalDeviceLimits instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);

  private:
    v8::Local<v8::String> sAccess0 = Nan::New("maxImageDimension1D").ToLocalChecked();
    v8::Local<v8::String> sAccess1 = Nan::New("maxImageDimension2D").ToLocalChecked();
    v8::Local<v8::String> sAccess2 = Nan::New("maxImageDimension3D").ToLocalChecked();
    v8::Local<v8::String> sAccess3 = Nan::New("maxImageDimensionCube").ToLocalChecked();
    v8::Local<v8::String> sAccess4 = Nan::New("maxImageArrayLayers").ToLocalChecked();
    v8::Local<v8::String> sAccess5 = Nan::New("maxTexelBufferElements").ToLocalChecked();
    v8::Local<v8::String> sAccess6 = Nan::New("maxUniformBufferRange").ToLocalChecked();
    v8::Local<v8::String> sAccess7 = Nan::New("maxStorageBufferRange").ToLocalChecked();
    v8::Local<v8::String> sAccess8 = Nan::New("maxPushConstantsSize").ToLocalChecked();
    v8::Local<v8::String> sAccess9 = Nan::New("maxMemoryAllocationCount").ToLocalChecked();
    v8::Local<v8::String> sAccess10 = Nan::New("maxSamplerAllocationCount").ToLocalChecked();
    v8::Local<v8::String> sAccess11 = Nan::New("bufferImageGranularity").ToLocalChecked();
    v8::Local<v8::String> sAccess12 = Nan::New("sparseAddressSpaceSize").ToLocalChecked();
    v8::Local<v8::String> sAccess13 = Nan::New("maxBoundDescriptorSets").ToLocalChecked();
    v8::Local<v8::String> sAccess14 = Nan::New("maxPerStageDescriptorSamplers").ToLocalChecked();
    v8::Local<v8::String> sAccess15 = Nan::New("maxPerStageDescriptorUniformBuffers").ToLocalChecked();
    v8::Local<v8::String> sAccess16 = Nan::New("maxPerStageDescriptorStorageBuffers").ToLocalChecked();
    v8::Local<v8::String> sAccess17 = Nan::New("maxPerStageDescriptorSampledImages").ToLocalChecked();
    v8::Local<v8::String> sAccess18 = Nan::New("maxPerStageDescriptorStorageImages").ToLocalChecked();
    v8::Local<v8::String> sAccess19 = Nan::New("maxPerStageDescriptorInputAttachments").ToLocalChecked();
    v8::Local<v8::String> sAccess20 = Nan::New("maxPerStageResources").ToLocalChecked();
    v8::Local<v8::String> sAccess21 = Nan::New("maxDescriptorSetSamplers").ToLocalChecked();
    v8::Local<v8::String> sAccess22 = Nan::New("maxDescriptorSetUniformBuffers").ToLocalChecked();
    v8::Local<v8::String> sAccess23 = Nan::New("maxDescriptorSetUniformBuffersDynamic").ToLocalChecked();
    v8::Local<v8::String> sAccess24 = Nan::New("maxDescriptorSetStorageBuffers").ToLocalChecked();
    v8::Local<v8::String> sAccess25 = Nan::New("maxDescriptorSetStorageBuffersDynamic").ToLocalChecked();
    v8::Local<v8::String> sAccess26 = Nan::New("maxDescriptorSetSampledImages").ToLocalChecked();
    v8::Local<v8::String> sAccess27 = Nan::New("maxDescriptorSetStorageImages").ToLocalChecked();
    v8::Local<v8::String> sAccess28 = Nan::New("maxDescriptorSetInputAttachments").ToLocalChecked();
    v8::Local<v8::String> sAccess29 = Nan::New("maxVertexInputAttributes").ToLocalChecked();
    v8::Local<v8::String> sAccess30 = Nan::New("maxVertexInputBindings").ToLocalChecked();
    v8::Local<v8::String> sAccess31 = Nan::New("maxVertexInputAttributeOffset").ToLocalChecked();
    v8::Local<v8::String> sAccess32 = Nan::New("maxVertexInputBindingStride").ToLocalChecked();
    v8::Local<v8::String> sAccess33 = Nan::New("maxVertexOutputComponents").ToLocalChecked();
    v8::Local<v8::String> sAccess34 = Nan::New("maxTessellationGenerationLevel").ToLocalChecked();
    v8::Local<v8::String> sAccess35 = Nan::New("maxTessellationPatchSize").ToLocalChecked();
    v8::Local<v8::String> sAccess36 = Nan::New("maxTessellationControlPerVertexInputComponents").ToLocalChecked();
    v8::Local<v8::String> sAccess37 = Nan::New("maxTessellationControlPerVertexOutputComponents").ToLocalChecked();
    v8::Local<v8::String> sAccess38 = Nan::New("maxTessellationControlPerPatchOutputComponents").ToLocalChecked();
    v8::Local<v8::String> sAccess39 = Nan::New("maxTessellationControlTotalOutputComponents").ToLocalChecked();
    v8::Local<v8::String> sAccess40 = Nan::New("maxTessellationEvaluationInputComponents").ToLocalChecked();
    v8::Local<v8::String> sAccess41 = Nan::New("maxTessellationEvaluationOutputComponents").ToLocalChecked();
    v8::Local<v8::String> sAccess42 = Nan::New("maxGeometryShaderInvocations").ToLocalChecked();
    v8::Local<v8::String> sAccess43 = Nan::New("maxGeometryInputComponents").ToLocalChecked();
    v8::Local<v8::String> sAccess44 = Nan::New("maxGeometryOutputComponents").ToLocalChecked();
    v8::Local<v8::String> sAccess45 = Nan::New("maxGeometryOutputVertices").ToLocalChecked();
    v8::Local<v8::String> sAccess46 = Nan::New("maxGeometryTotalOutputComponents").ToLocalChecked();
    v8::Local<v8::String> sAccess47 = Nan::New("maxFragmentInputComponents").ToLocalChecked();
    v8::Local<v8::String> sAccess48 = Nan::New("maxFragmentOutputAttachments").ToLocalChecked();
    v8::Local<v8::String> sAccess49 = Nan::New("maxFragmentDualSrcAttachments").ToLocalChecked();
    v8::Local<v8::String> sAccess50 = Nan::New("maxFragmentCombinedOutputResources").ToLocalChecked();
    v8::Local<v8::String> sAccess51 = Nan::New("maxComputeSharedMemorySize").ToLocalChecked();
    v8::Local<v8::String> sAccess52 = Nan::New("maxComputeWorkGroupCount").ToLocalChecked();
    v8::Local<v8::String> sAccess53 = Nan::New("maxComputeWorkGroupInvocations").ToLocalChecked();
    v8::Local<v8::String> sAccess54 = Nan::New("maxComputeWorkGroupSize").ToLocalChecked();
    v8::Local<v8::String> sAccess55 = Nan::New("subPixelPrecisionBits").ToLocalChecked();
    v8::Local<v8::String> sAccess56 = Nan::New("subTexelPrecisionBits").ToLocalChecked();
    v8::Local<v8::String> sAccess57 = Nan::New("mipmapPrecisionBits").ToLocalChecked();
    v8::Local<v8::String> sAccess58 = Nan::New("maxDrawIndexedIndexValue").ToLocalChecked();
    v8::Local<v8::String> sAccess59 = Nan::New("maxDrawIndirectCount").ToLocalChecked();
    v8::Local<v8::String> sAccess60 = Nan::New("maxSamplerLodBias").ToLocalChecked();
    v8::Local<v8::String> sAccess61 = Nan::New("maxSamplerAnisotropy").ToLocalChecked();
    v8::Local<v8::String> sAccess62 = Nan::New("maxViewports").ToLocalChecked();
    v8::Local<v8::String> sAccess63 = Nan::New("maxViewportDimensions").ToLocalChecked();
    v8::Local<v8::String> sAccess64 = Nan::New("viewportBoundsRange").ToLocalChecked();
    v8::Local<v8::String> sAccess65 = Nan::New("viewportSubPixelBits").ToLocalChecked();
    v8::Local<v8::String> sAccess66 = Nan::New("minMemoryMapAlignment").ToLocalChecked();
    v8::Local<v8::String> sAccess67 = Nan::New("minTexelBufferOffsetAlignment").ToLocalChecked();
    v8::Local<v8::String> sAccess68 = Nan::New("minUniformBufferOffsetAlignment").ToLocalChecked();
    v8::Local<v8::String> sAccess69 = Nan::New("minStorageBufferOffsetAlignment").ToLocalChecked();
    v8::Local<v8::String> sAccess70 = Nan::New("minTexelOffset").ToLocalChecked();
    v8::Local<v8::String> sAccess71 = Nan::New("maxTexelOffset").ToLocalChecked();
    v8::Local<v8::String> sAccess72 = Nan::New("minTexelGatherOffset").ToLocalChecked();
    v8::Local<v8::String> sAccess73 = Nan::New("maxTexelGatherOffset").ToLocalChecked();
    v8::Local<v8::String> sAccess74 = Nan::New("minInterpolationOffset").ToLocalChecked();
    v8::Local<v8::String> sAccess75 = Nan::New("maxInterpolationOffset").ToLocalChecked();
    v8::Local<v8::String> sAccess76 = Nan::New("subPixelInterpolationOffsetBits").ToLocalChecked();
    v8::Local<v8::String> sAccess77 = Nan::New("maxFramebufferWidth").ToLocalChecked();
    v8::Local<v8::String> sAccess78 = Nan::New("maxFramebufferHeight").ToLocalChecked();
    v8::Local<v8::String> sAccess79 = Nan::New("maxFramebufferLayers").ToLocalChecked();
    v8::Local<v8::String> sAccess80 = Nan::New("framebufferColorSampleCounts").ToLocalChecked();
    v8::Local<v8::String> sAccess81 = Nan::New("framebufferDepthSampleCounts").ToLocalChecked();
    v8::Local<v8::String> sAccess82 = Nan::New("framebufferStencilSampleCounts").ToLocalChecked();
    v8::Local<v8::String> sAccess83 = Nan::New("framebufferNoAttachmentsSampleCounts").ToLocalChecked();
    v8::Local<v8::String> sAccess84 = Nan::New("maxColorAttachments").ToLocalChecked();
    v8::Local<v8::String> sAccess85 = Nan::New("sampledImageColorSampleCounts").ToLocalChecked();
    v8::Local<v8::String> sAccess86 = Nan::New("sampledImageIntegerSampleCounts").ToLocalChecked();
    v8::Local<v8::String> sAccess87 = Nan::New("sampledImageDepthSampleCounts").ToLocalChecked();
    v8::Local<v8::String> sAccess88 = Nan::New("sampledImageStencilSampleCounts").ToLocalChecked();
    v8::Local<v8::String> sAccess89 = Nan::New("storageImageSampleCounts").ToLocalChecked();
    v8::Local<v8::String> sAccess90 = Nan::New("maxSampleMaskWords").ToLocalChecked();
    v8::Local<v8::String> sAccess91 = Nan::New("timestampComputeAndGraphics").ToLocalChecked();
    v8::Local<v8::String> sAccess92 = Nan::New("timestampPeriod").ToLocalChecked();
    v8::Local<v8::String> sAccess93 = Nan::New("maxClipDistances").ToLocalChecked();
    v8::Local<v8::String> sAccess94 = Nan::New("maxCullDistances").ToLocalChecked();
    v8::Local<v8::String> sAccess95 = Nan::New("maxCombinedClipAndCullDistances").ToLocalChecked();
    v8::Local<v8::String> sAccess96 = Nan::New("discreteQueuePriorities").ToLocalChecked();
    v8::Local<v8::String> sAccess97 = Nan::New("pointSizeRange").ToLocalChecked();
    v8::Local<v8::String> sAccess98 = Nan::New("lineWidthRange").ToLocalChecked();
    v8::Local<v8::String> sAccess99 = Nan::New("pointSizeGranularity").ToLocalChecked();
    v8::Local<v8::String> sAccess100 = Nan::New("lineWidthGranularity").ToLocalChecked();
    v8::Local<v8::String> sAccess101 = Nan::New("strictLines").ToLocalChecked();
    v8::Local<v8::String> sAccess102 = Nan::New("standardSampleLocations").ToLocalChecked();
    v8::Local<v8::String> sAccess103 = Nan::New("optimalBufferCopyOffsetAlignment").ToLocalChecked();
    v8::Local<v8::String> sAccess104 = Nan::New("optimalBufferCopyRowPitchAlignment").ToLocalChecked();
    v8::Local<v8::String> sAccess105 = Nan::New("nonCoherentAtomSize").ToLocalChecked();

    _VkPhysicalDeviceLimits();
    ~_VkPhysicalDeviceLimits();

};

#endif