/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY node-vulkan v0.0.8
 */
#include "utils.h"
#include <string.h>
#include "index.h"
#include "VkClearColorValue.h"

Nan::Persistent<v8::FunctionTemplate> _VkClearColorValue::constructor;

_VkClearColorValue::_VkClearColorValue() {
  
  vfloat32 = new std::vector<float>;
  vint32 = new std::vector<int32_t>;
  vuint32 = new std::vector<uint32_t>;
  
}

_VkClearColorValue::~_VkClearColorValue() {
  //printf("VkClearColorValue deconstructed!!\n");
  
  vfloat32->clear();
  delete vfloat32;
  
  
  vint32->clear();
  delete vint32;
  
  
  vuint32->clear();
  delete vuint32;
  
  
}

void _VkClearColorValue::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkClearColorValue::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkClearColorValue").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("float32").ToLocalChecked(), Getfloat32, Setfloat32, ctor);
  SetPrototypeAccessor(proto, Nan::New("int32").ToLocalChecked(), Getint32, Setint32, ctor);
  SetPrototypeAccessor(proto, Nan::New("uint32").ToLocalChecked(), Getuint32, Setuint32, ctor);
  Nan::Set(target, Nan::New("VkClearColorValue").ToLocalChecked(), ctor->GetFunction());
}

bool _VkClearColorValue::flush() {
  _VkClearColorValue *self = this;
  if (!(self->float32.IsEmpty())) {
    v8::Local<v8::Value> value = Nan::New(self->float32);
    
    if (value->IsArray()) {
      // validate length
      if (v8::Local<v8::Array>::Cast(value)->Length() != 4) {
        Nan::ThrowRangeError("Invalid array length, expected array length of '4' for 'VkClearColorValue.float32'");
        return false;
      }
      std::vector<float> arr = createArrayOfV8Numbers<float>(value);
      memcpy(self->instance.float32, arr.data(), sizeof(float) * 4);
    } else if (value->IsNull()) {
      memset(&self->instance.float32, 0, sizeof(float));
    } else {
      Nan::ThrowTypeError("Expected 'Array' for 'VkClearColorValue.float32'");
      return false;
    }
  }if (!(self->int32.IsEmpty())) {
    v8::Local<v8::Value> value = Nan::New(self->int32);
    
    if (value->IsArray()) {
      // validate length
      if (v8::Local<v8::Array>::Cast(value)->Length() != 4) {
        Nan::ThrowRangeError("Invalid array length, expected array length of '4' for 'VkClearColorValue.int32'");
        return false;
      }
      std::vector<int32_t> arr = createArrayOfV8Numbers<int32_t>(value);
      memcpy(self->instance.int32, arr.data(), sizeof(int32_t) * 4);
    } else if (value->IsNull()) {
      memset(&self->instance.int32, 0, sizeof(int32_t));
    } else {
      Nan::ThrowTypeError("Expected 'Array' for 'VkClearColorValue.int32'");
      return false;
    }
  }if (!(self->uint32.IsEmpty())) {
    v8::Local<v8::Value> value = Nan::New(self->uint32);
    
    if (value->IsArray()) {
      // validate length
      if (v8::Local<v8::Array>::Cast(value)->Length() != 4) {
        Nan::ThrowRangeError("Invalid array length, expected array length of '4' for 'VkClearColorValue.uint32'");
        return false;
      }
      std::vector<uint32_t> arr = createArrayOfV8Numbers<uint32_t>(value);
      memcpy(self->instance.uint32, arr.data(), sizeof(uint32_t) * 4);
    } else if (value->IsNull()) {
      memset(&self->instance.uint32, 0, sizeof(uint32_t));
    } else {
      Nan::ThrowTypeError("Expected 'Array' for 'VkClearColorValue.uint32'");
      return false;
    }
  }
  return true;
}

NAN_METHOD(_VkClearColorValue::New) {
  if (info.IsConstructCall()) {
    _VkClearColorValue* self = new _VkClearColorValue();
    self->Wrap(info.Holder());
    
    if (info[0]->IsObject()) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(info[0]).ToLocalChecked();
      v8::Local<v8::String> sAccess0 = Nan::New("float32").ToLocalChecked();
      v8::Local<v8::String> sAccess1 = Nan::New("int32").ToLocalChecked();
      v8::Local<v8::String> sAccess2 = Nan::New("uint32").ToLocalChecked();
      if (obj->Has(sAccess0)) info.This()->Set(sAccess0, obj->Get(sAccess0));
      if (obj->Has(sAccess1)) info.This()->Set(sAccess1, obj->Get(sAccess1));
      if (obj->Has(sAccess2)) info.This()->Set(sAccess2, obj->Get(sAccess2));
      
    }
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkClearColorValue constructor cannot be invoked without 'new'");
  }
};

// float32
NAN_GETTER(_VkClearColorValue::Getfloat32) {
  _VkClearColorValue *self = Nan::ObjectWrap::Unwrap<_VkClearColorValue>(info.This());
  if (self->float32.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    info.GetReturnValue().Set(Nan::New(self->float32));
  }
}NAN_SETTER(_VkClearColorValue::Setfloat32) {
  _VkClearColorValue *self = Nan::ObjectWrap::Unwrap<_VkClearColorValue>(info.This());
    // js
    if (value->IsArray()) {
      self->float32.Reset<v8::Array>(value.As<v8::Array>());
    } else if (value->IsNull()) {
      self->float32.Reset();
    } else {
      return Nan::ThrowTypeError("Expected 'Array' for 'VkClearColorValue.float32'");
    }
  
}// int32
NAN_GETTER(_VkClearColorValue::Getint32) {
  _VkClearColorValue *self = Nan::ObjectWrap::Unwrap<_VkClearColorValue>(info.This());
  if (self->int32.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    info.GetReturnValue().Set(Nan::New(self->int32));
  }
}NAN_SETTER(_VkClearColorValue::Setint32) {
  _VkClearColorValue *self = Nan::ObjectWrap::Unwrap<_VkClearColorValue>(info.This());
    // js
    if (value->IsArray()) {
      self->int32.Reset<v8::Array>(value.As<v8::Array>());
    } else if (value->IsNull()) {
      self->int32.Reset();
    } else {
      return Nan::ThrowTypeError("Expected 'Array' for 'VkClearColorValue.int32'");
    }
  
}// uint32
NAN_GETTER(_VkClearColorValue::Getuint32) {
  _VkClearColorValue *self = Nan::ObjectWrap::Unwrap<_VkClearColorValue>(info.This());
  if (self->uint32.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    info.GetReturnValue().Set(Nan::New(self->uint32));
  }
}NAN_SETTER(_VkClearColorValue::Setuint32) {
  _VkClearColorValue *self = Nan::ObjectWrap::Unwrap<_VkClearColorValue>(info.This());
    // js
    if (value->IsArray()) {
      self->uint32.Reset<v8::Array>(value.As<v8::Array>());
    } else if (value->IsNull()) {
      self->uint32.Reset();
    } else {
      return Nan::ThrowTypeError("Expected 'Array' for 'VkClearColorValue.uint32'");
    }
  
}