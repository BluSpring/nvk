/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY node-vulkan v0.0.6
 */
#include "utils.h"
#include <string.h>
#include "index.h"
#include "VkClearColorValue.h"

Nan::Persistent<v8::FunctionTemplate> _VkClearColorValue::constructor;

_VkClearColorValue::_VkClearColorValue() {
  
}

_VkClearColorValue::~_VkClearColorValue() {
  //printf("VkClearColorValue deconstructed!!\n");
}

void _VkClearColorValue::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkClearColorValue::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkClearColorValue").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  Nan::SetPrototypeMethod(ctor, "flush", flush);
  
  SetPrototypeAccessor(proto, Nan::New("float32").ToLocalChecked(), Getfloat32, Setfloat32, ctor);
  SetPrototypeAccessor(proto, Nan::New("int32").ToLocalChecked(), Getint32, Setint32, ctor);
  SetPrototypeAccessor(proto, Nan::New("uint32").ToLocalChecked(), Getuint32, Setuint32, ctor);
  Nan::Set(target, Nan::New("VkClearColorValue").ToLocalChecked(), ctor->GetFunction());
}

NAN_METHOD(_VkClearColorValue::New) {
  if (info.IsConstructCall()) {
    _VkClearColorValue* self = new _VkClearColorValue();
    self->Wrap(info.Holder());
    
    if (info[0]->IsObject()) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(info[0]).ToLocalChecked();
      if (obj->Has(self->sAccess0)) info.This()->Set(self->sAccess0, obj->Get(self->sAccess0));
      if (obj->Has(self->sAccess1)) info.This()->Set(self->sAccess1, obj->Get(self->sAccess1));
      if (obj->Has(self->sAccess2)) info.This()->Set(self->sAccess2, obj->Get(self->sAccess2));
      
    }
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkClearColorValue constructor cannot be invoked without 'new'");
  }
};

NAN_METHOD(_VkClearColorValue::flush) {
  _VkClearColorValue *self = Nan::ObjectWrap::Unwrap<_VkClearColorValue>(info.This());
  
  info.This()->Set(self->sAccess0, info.This()->Get(self->sAccess0));
  info.This()->Set(self->sAccess1, info.This()->Get(self->sAccess1));
  info.This()->Set(self->sAccess2, info.This()->Get(self->sAccess2));
}

// float32
NAN_GETTER(_VkClearColorValue::Getfloat32) {
  _VkClearColorValue *self = Nan::ObjectWrap::Unwrap<_VkClearColorValue>(info.This());
  if (self->float32.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    info.GetReturnValue().Set(Nan::New(self->float32));
  }
}NAN_SETTER(_VkClearColorValue::Setfloat32) {
  _VkClearColorValue *self = Nan::ObjectWrap::Unwrap<_VkClearColorValue>(info.This());
  
    // js
    if (value->IsArray()) {
      self->float32.Reset<v8::Array>(value.As<v8::Array>());
    } else if (value->IsNull()) {
      self->float32.Reset();
    } else {
      return Nan::ThrowTypeError("Expected 'Array' for 'VkClearColorValue.float32'");
    }
  
  // vulkan
  if (value->IsArray()) {
    std::vector<float> arr = createArrayOfV8Numbers<float>(value);
    memcpy(self->instance.float32, arr.data(), sizeof(float) * 4);
  } else if (value->IsNull()) {
    memset(&self->instance.float32, 0, sizeof(float));
  } else {
    return Nan::ThrowTypeError("Expected 'Array' for 'VkClearColorValue.float32'");
  }
}// int32
NAN_GETTER(_VkClearColorValue::Getint32) {
  _VkClearColorValue *self = Nan::ObjectWrap::Unwrap<_VkClearColorValue>(info.This());
  if (self->int32.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    info.GetReturnValue().Set(Nan::New(self->int32));
  }
}NAN_SETTER(_VkClearColorValue::Setint32) {
  _VkClearColorValue *self = Nan::ObjectWrap::Unwrap<_VkClearColorValue>(info.This());
  
    // js
    if (value->IsArray()) {
      self->int32.Reset<v8::Array>(value.As<v8::Array>());
    } else if (value->IsNull()) {
      self->int32.Reset();
    } else {
      return Nan::ThrowTypeError("Expected 'Array' for 'VkClearColorValue.int32'");
    }
  
  // vulkan
  if (value->IsArray()) {
    std::vector<int32_t> arr = createArrayOfV8Numbers<int32_t>(value);
    memcpy(self->instance.int32, arr.data(), sizeof(int32_t) * 4);
  } else if (value->IsNull()) {
    memset(&self->instance.int32, 0, sizeof(int32_t));
  } else {
    return Nan::ThrowTypeError("Expected 'Array' for 'VkClearColorValue.int32'");
  }
}// uint32
NAN_GETTER(_VkClearColorValue::Getuint32) {
  _VkClearColorValue *self = Nan::ObjectWrap::Unwrap<_VkClearColorValue>(info.This());
  if (self->uint32.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    info.GetReturnValue().Set(Nan::New(self->uint32));
  }
}NAN_SETTER(_VkClearColorValue::Setuint32) {
  _VkClearColorValue *self = Nan::ObjectWrap::Unwrap<_VkClearColorValue>(info.This());
  
    // js
    if (value->IsArray()) {
      self->uint32.Reset<v8::Array>(value.As<v8::Array>());
    } else if (value->IsNull()) {
      self->uint32.Reset();
    } else {
      return Nan::ThrowTypeError("Expected 'Array' for 'VkClearColorValue.uint32'");
    }
  
  // vulkan
  if (value->IsArray()) {
    std::vector<uint32_t> arr = createArrayOfV8Numbers<uint32_t>(value);
    memcpy(self->instance.uint32, arr.data(), sizeof(uint32_t) * 4);
  } else if (value->IsNull()) {
    memset(&self->instance.uint32, 0, sizeof(uint32_t));
  } else {
    return Nan::ThrowTypeError("Expected 'Array' for 'VkClearColorValue.uint32'");
  }
}