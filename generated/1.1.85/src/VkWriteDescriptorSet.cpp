/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY node-vulkan v0.0.6
 */
#include "utils.h"
#include "index.h"
#include "VkWriteDescriptorSet.h"

Nan::Persistent<v8::FunctionTemplate> _VkWriteDescriptorSet::constructor;

_VkWriteDescriptorSet::_VkWriteDescriptorSet() {
  instance.sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;
}

_VkWriteDescriptorSet::~_VkWriteDescriptorSet() {
  //printf("VkWriteDescriptorSet deconstructed!!\n");
}

void _VkWriteDescriptorSet::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkWriteDescriptorSet::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkWriteDescriptorSet").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  Nan::SetPrototypeMethod(ctor, "flush", flush);
  
  SetPrototypeAccessor(proto, Nan::New("sType").ToLocalChecked(), GetsType, SetsType, ctor);
  SetPrototypeAccessor(proto, Nan::New("pNext").ToLocalChecked(), GetpNext, SetpNext, ctor);
  SetPrototypeAccessor(proto, Nan::New("dstSet").ToLocalChecked(), GetdstSet, SetdstSet, ctor);
  SetPrototypeAccessor(proto, Nan::New("dstBinding").ToLocalChecked(), GetdstBinding, SetdstBinding, ctor);
  SetPrototypeAccessor(proto, Nan::New("dstArrayElement").ToLocalChecked(), GetdstArrayElement, SetdstArrayElement, ctor);
  SetPrototypeAccessor(proto, Nan::New("descriptorCount").ToLocalChecked(), GetdescriptorCount, SetdescriptorCount, ctor);
  SetPrototypeAccessor(proto, Nan::New("descriptorType").ToLocalChecked(), GetdescriptorType, SetdescriptorType, ctor);
  SetPrototypeAccessor(proto, Nan::New("pImageInfo").ToLocalChecked(), GetpImageInfo, SetpImageInfo, ctor);
  SetPrototypeAccessor(proto, Nan::New("pBufferInfo").ToLocalChecked(), GetpBufferInfo, SetpBufferInfo, ctor);
  SetPrototypeAccessor(proto, Nan::New("pTexelBufferView").ToLocalChecked(), GetpTexelBufferView, SetpTexelBufferView, ctor);
  Nan::Set(target, Nan::New("VkWriteDescriptorSet").ToLocalChecked(), ctor->GetFunction());
}

NAN_METHOD(_VkWriteDescriptorSet::New) {
  if (info.IsConstructCall()) {
    _VkWriteDescriptorSet* self = new _VkWriteDescriptorSet();
    self->Wrap(info.Holder());
    
    if (info[0]->IsObject()) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(info[0]).ToLocalChecked();
      if (obj->Has(self->sAccess0)) info.This()->Set(self->sAccess0, obj->Get(self->sAccess0));
      if (obj->Has(self->sAccess1)) info.This()->Set(self->sAccess1, obj->Get(self->sAccess1));
      if (obj->Has(self->sAccess2)) info.This()->Set(self->sAccess2, obj->Get(self->sAccess2));
      if (obj->Has(self->sAccess3)) info.This()->Set(self->sAccess3, obj->Get(self->sAccess3));
      if (obj->Has(self->sAccess4)) info.This()->Set(self->sAccess4, obj->Get(self->sAccess4));
      if (obj->Has(self->sAccess5)) info.This()->Set(self->sAccess5, obj->Get(self->sAccess5));
      if (obj->Has(self->sAccess6)) info.This()->Set(self->sAccess6, obj->Get(self->sAccess6));
      if (obj->Has(self->sAccess7)) info.This()->Set(self->sAccess7, obj->Get(self->sAccess7));
      if (obj->Has(self->sAccess8)) info.This()->Set(self->sAccess8, obj->Get(self->sAccess8));
      if (obj->Has(self->sAccess9)) info.This()->Set(self->sAccess9, obj->Get(self->sAccess9));
      
    }
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkWriteDescriptorSet constructor cannot be invoked without 'new'");
  }
};

NAN_METHOD(_VkWriteDescriptorSet::flush) {
  _VkWriteDescriptorSet *self = Nan::ObjectWrap::Unwrap<_VkWriteDescriptorSet>(info.This());
  
  info.This()->Set(self->sAccess2, info.This()->Get(self->sAccess2));
  info.This()->Set(self->sAccess7, info.This()->Get(self->sAccess7));
  info.This()->Set(self->sAccess8, info.This()->Get(self->sAccess8));
  info.This()->Set(self->sAccess9, info.This()->Get(self->sAccess9));
}

// sType
NAN_GETTER(_VkWriteDescriptorSet::GetsType) {
  _VkWriteDescriptorSet *self = Nan::ObjectWrap::Unwrap<_VkWriteDescriptorSet>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sType));
}NAN_SETTER(_VkWriteDescriptorSet::SetsType) {
  _VkWriteDescriptorSet *self = Nan::ObjectWrap::Unwrap<_VkWriteDescriptorSet>(info.This());
  if (value->IsNumber()) {
    self->instance.sType = static_cast<VkStructureType>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkWriteDescriptorSet.sType'");
  }
}// pNext
NAN_GETTER(_VkWriteDescriptorSet::GetpNext) {
  _VkWriteDescriptorSet *self = Nan::ObjectWrap::Unwrap<_VkWriteDescriptorSet>(info.This());
}NAN_SETTER(_VkWriteDescriptorSet::SetpNext) {
  _VkWriteDescriptorSet *self = Nan::ObjectWrap::Unwrap<_VkWriteDescriptorSet>(info.This());
}// dstSet
NAN_GETTER(_VkWriteDescriptorSet::GetdstSet) {
  _VkWriteDescriptorSet *self = Nan::ObjectWrap::Unwrap<_VkWriteDescriptorSet>(info.This());
  if (self->dstSet.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->dstSet);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkWriteDescriptorSet::SetdstSet) {
  _VkWriteDescriptorSet *self = Nan::ObjectWrap::Unwrap<_VkWriteDescriptorSet>(info.This());
  // js
  if (!value->IsNull()) {
    v8::Local<v8::Object> obj = Nan::To<v8::Object>(value).ToLocalChecked();
    if (Nan::New(_VkDescriptorSet::constructor)->HasInstance(obj)) {
      self->dstSet.Reset<v8::Object>(value.As<v8::Object>());
      _VkDescriptorSet* inst = Nan::ObjectWrap::Unwrap<_VkDescriptorSet>(obj);
      self->instance.dstSet = inst->instance;
    } else {
      return Nan::ThrowTypeError("Expected 'Object [VkDescriptorSet]' for 'VkWriteDescriptorSet.dstSet'");
    }
  } else if (value->IsNull()) {
    self->dstSet.Reset();
    self->instance.dstSet = VK_NULL_HANDLE;
  } else {
    return Nan::ThrowTypeError("Expected 'Object [VkDescriptorSet]' for 'VkWriteDescriptorSet.dstSet'");
  }
}// dstBinding
NAN_GETTER(_VkWriteDescriptorSet::GetdstBinding) {
  _VkWriteDescriptorSet *self = Nan::ObjectWrap::Unwrap<_VkWriteDescriptorSet>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.dstBinding));
}NAN_SETTER(_VkWriteDescriptorSet::SetdstBinding) {
  _VkWriteDescriptorSet *self = Nan::ObjectWrap::Unwrap<_VkWriteDescriptorSet>(info.This());
  if (value->IsNumber()) {
    self->instance.dstBinding = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkWriteDescriptorSet.dstBinding'");
  }
}// dstArrayElement
NAN_GETTER(_VkWriteDescriptorSet::GetdstArrayElement) {
  _VkWriteDescriptorSet *self = Nan::ObjectWrap::Unwrap<_VkWriteDescriptorSet>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.dstArrayElement));
}NAN_SETTER(_VkWriteDescriptorSet::SetdstArrayElement) {
  _VkWriteDescriptorSet *self = Nan::ObjectWrap::Unwrap<_VkWriteDescriptorSet>(info.This());
  if (value->IsNumber()) {
    self->instance.dstArrayElement = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkWriteDescriptorSet.dstArrayElement'");
  }
}// descriptorCount
NAN_GETTER(_VkWriteDescriptorSet::GetdescriptorCount) {
  _VkWriteDescriptorSet *self = Nan::ObjectWrap::Unwrap<_VkWriteDescriptorSet>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.descriptorCount));
}NAN_SETTER(_VkWriteDescriptorSet::SetdescriptorCount) {
  _VkWriteDescriptorSet *self = Nan::ObjectWrap::Unwrap<_VkWriteDescriptorSet>(info.This());
  if (value->IsNumber()) {
    self->instance.descriptorCount = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkWriteDescriptorSet.descriptorCount'");
  }
}// descriptorType
NAN_GETTER(_VkWriteDescriptorSet::GetdescriptorType) {
  _VkWriteDescriptorSet *self = Nan::ObjectWrap::Unwrap<_VkWriteDescriptorSet>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.descriptorType));
}NAN_SETTER(_VkWriteDescriptorSet::SetdescriptorType) {
  _VkWriteDescriptorSet *self = Nan::ObjectWrap::Unwrap<_VkWriteDescriptorSet>(info.This());
  if (value->IsNumber()) {
    self->instance.descriptorType = static_cast<VkDescriptorType>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkWriteDescriptorSet.descriptorType'");
  }
}// pImageInfo
NAN_GETTER(_VkWriteDescriptorSet::GetpImageInfo) {
  _VkWriteDescriptorSet *self = Nan::ObjectWrap::Unwrap<_VkWriteDescriptorSet>(info.This());
  if (self->pImageInfo.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->pImageInfo);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkWriteDescriptorSet::SetpImageInfo) {
  _VkWriteDescriptorSet *self = Nan::ObjectWrap::Unwrap<_VkWriteDescriptorSet>(info.This());
  
    // js
    if (value->IsArray()) {
      self->pImageInfo.Reset<v8::Array>(value.As<v8::Array>());
    } else if (value->IsNull()) {
      self->pImageInfo.Reset();
    } else {
      return Nan::ThrowTypeError("Expected 'Object [VkDescriptorImageInfo]' for 'VkWriteDescriptorSet.pImageInfo'");
    }
  
  // vulkan
  if (value->IsArray()) {
    self->instance.pImageInfo = copyArrayOfV8Objects<VkDescriptorImageInfo, _VkDescriptorImageInfo>(value);
  } else if (value->IsNull()) {
    self->instance.pImageInfo = nullptr;
  } else {
    return Nan::ThrowTypeError("Expected 'Object [VkDescriptorImageInfo]' for 'VkWriteDescriptorSet.pImageInfo'");
  }
}// pBufferInfo
NAN_GETTER(_VkWriteDescriptorSet::GetpBufferInfo) {
  _VkWriteDescriptorSet *self = Nan::ObjectWrap::Unwrap<_VkWriteDescriptorSet>(info.This());
  if (self->pBufferInfo.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->pBufferInfo);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkWriteDescriptorSet::SetpBufferInfo) {
  _VkWriteDescriptorSet *self = Nan::ObjectWrap::Unwrap<_VkWriteDescriptorSet>(info.This());
  
    // js
    if (value->IsArray()) {
      self->pBufferInfo.Reset<v8::Array>(value.As<v8::Array>());
    } else if (value->IsNull()) {
      self->pBufferInfo.Reset();
    } else {
      return Nan::ThrowTypeError("Expected 'Object [VkDescriptorBufferInfo]' for 'VkWriteDescriptorSet.pBufferInfo'");
    }
  
  // vulkan
  if (value->IsArray()) {
    self->instance.pBufferInfo = copyArrayOfV8Objects<VkDescriptorBufferInfo, _VkDescriptorBufferInfo>(value);
  } else if (value->IsNull()) {
    self->instance.pBufferInfo = nullptr;
  } else {
    return Nan::ThrowTypeError("Expected 'Object [VkDescriptorBufferInfo]' for 'VkWriteDescriptorSet.pBufferInfo'");
  }
}// pTexelBufferView
NAN_GETTER(_VkWriteDescriptorSet::GetpTexelBufferView) {
  _VkWriteDescriptorSet *self = Nan::ObjectWrap::Unwrap<_VkWriteDescriptorSet>(info.This());
  if (self->pTexelBufferView.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->pTexelBufferView);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkWriteDescriptorSet::SetpTexelBufferView) {
  _VkWriteDescriptorSet *self = Nan::ObjectWrap::Unwrap<_VkWriteDescriptorSet>(info.This());
  
    // js
    if (value->IsArray()) {
      self->pTexelBufferView.Reset<v8::Array>(value.As<v8::Array>());
    } else if (value->IsNull()) {
      self->pTexelBufferView.Reset();
    } else {
      return Nan::ThrowTypeError("Expected 'Object [VkBufferView]' for 'VkWriteDescriptorSet.pTexelBufferView'");
    }
  
  // vulkan
  if (value->IsArray()) {
    self->instance.pTexelBufferView = copyArrayOfV8Objects<VkBufferView, _VkBufferView>(value);
  } else if (value->IsNull()) {
    self->instance.pTexelBufferView = VK_NULL_HANDLE;
  } else {
    return Nan::ThrowTypeError("Expected 'Object [VkBufferView]' for 'VkWriteDescriptorSet.pTexelBufferView'");
  }
}