/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY node-vulkan v0.0.9
 */
#include "utils.h"
#include "index.h"
#include "VkDisplayProperties2KHR.h"

Nan::Persistent<v8::FunctionTemplate> _VkDisplayProperties2KHR::constructor;

_VkDisplayProperties2KHR::_VkDisplayProperties2KHR() {
  instance.sType = VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR;
  
}

_VkDisplayProperties2KHR::~_VkDisplayProperties2KHR() {
  //printf("VkDisplayProperties2KHR deconstructed!!\n");
  
  
  
}

void _VkDisplayProperties2KHR::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkDisplayProperties2KHR::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkDisplayProperties2KHR").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("sType").ToLocalChecked(), GetsType, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("displayProperties").ToLocalChecked(), GetdisplayProperties, nullptr, ctor);
  Nan::Set(target, Nan::New("VkDisplayProperties2KHR").ToLocalChecked(), ctor->GetFunction());
}

bool _VkDisplayProperties2KHR::flush() {
  _VkDisplayProperties2KHR *self = this;
  if (!(self->displayProperties.IsEmpty())) {
    v8::Local<v8::Value> value = Nan::New(self->displayProperties);
    
  }
  return true;
}

NAN_METHOD(_VkDisplayProperties2KHR::New) {
  if (info.IsConstructCall()) {
    _VkDisplayProperties2KHR* self = new _VkDisplayProperties2KHR();
    self->Wrap(info.Holder());
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkDisplayProperties2KHR constructor cannot be invoked without 'new'");
  }
};

// sType
NAN_GETTER(_VkDisplayProperties2KHR::GetsType) {
  _VkDisplayProperties2KHR *self = Nan::ObjectWrap::Unwrap<_VkDisplayProperties2KHR>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sType));
}// displayProperties
NAN_GETTER(_VkDisplayProperties2KHR::GetdisplayProperties) {
  _VkDisplayProperties2KHR *self = Nan::ObjectWrap::Unwrap<_VkDisplayProperties2KHR>(info.This());
  if (self->displayProperties.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->displayProperties);
    info.GetReturnValue().Set(obj);
  }
}