/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY node-vulkan v0.0.6
 */
#ifndef __VK_VKSURFACECAPABILITIESKHR_H__
#define __VK_VKSURFACECAPABILITIESKHR_H__

#include <nan.h>

#include <vulkan/vulkan_win32.h>
#define GLFW_INCLUDE_VULKAN
#include <GLFW/glfw3.h>

class _VkSurfaceCapabilitiesKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_METHOD(flush);
    // #accessors
    static NAN_GETTER(GetminImageCount);
    static NAN_GETTER(GetmaxImageCount);
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> currentExtent;
      static NAN_GETTER(GetcurrentExtent);
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> minImageExtent;
      static NAN_GETTER(GetminImageExtent);
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> maxImageExtent;
      static NAN_GETTER(GetmaxImageExtent);
    static NAN_GETTER(GetmaxImageArrayLayers);
    static NAN_GETTER(GetsupportedTransforms);
    static NAN_GETTER(GetcurrentTransform);
    static NAN_GETTER(GetsupportedCompositeAlpha);
    static NAN_GETTER(GetsupportedUsageFlags);

    // real instance
    VkSurfaceCapabilitiesKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);

  private:
    v8::Local<v8::String> sAccess0 = Nan::New("minImageCount").ToLocalChecked();
    v8::Local<v8::String> sAccess1 = Nan::New("maxImageCount").ToLocalChecked();
    v8::Local<v8::String> sAccess2 = Nan::New("currentExtent").ToLocalChecked();
    v8::Local<v8::String> sAccess3 = Nan::New("minImageExtent").ToLocalChecked();
    v8::Local<v8::String> sAccess4 = Nan::New("maxImageExtent").ToLocalChecked();
    v8::Local<v8::String> sAccess5 = Nan::New("maxImageArrayLayers").ToLocalChecked();
    v8::Local<v8::String> sAccess6 = Nan::New("supportedTransforms").ToLocalChecked();
    v8::Local<v8::String> sAccess7 = Nan::New("currentTransform").ToLocalChecked();
    v8::Local<v8::String> sAccess8 = Nan::New("supportedCompositeAlpha").ToLocalChecked();
    v8::Local<v8::String> sAccess9 = Nan::New("supportedUsageFlags").ToLocalChecked();

    _VkSurfaceCapabilitiesKHR();
    ~_VkSurfaceCapabilitiesKHR();

};

#endif