/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY nvk v0.1.2
 */
#include "utils.h"
#include "index.h"
#include "VkSubpassSampleLocationsEXT.h"

Nan::Persistent<v8::FunctionTemplate> _VkSubpassSampleLocationsEXT::constructor;

_VkSubpassSampleLocationsEXT::_VkSubpassSampleLocationsEXT() {
  
  
}

_VkSubpassSampleLocationsEXT::~_VkSubpassSampleLocationsEXT() {
  //printf("VkSubpassSampleLocationsEXT deconstructed!!\n");
  
  
  
}

void _VkSubpassSampleLocationsEXT::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkSubpassSampleLocationsEXT::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkSubpassSampleLocationsEXT").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("subpassIndex").ToLocalChecked(), GetsubpassIndex, SetsubpassIndex, ctor);
  SetPrototypeAccessor(proto, Nan::New("sampleLocationsInfo").ToLocalChecked(), GetsampleLocationsInfo, SetsampleLocationsInfo, ctor);
  Nan::Set(target, Nan::New("VkSubpassSampleLocationsEXT").ToLocalChecked(), ctor->GetFunction());
}

bool _VkSubpassSampleLocationsEXT::flush() {
  _VkSubpassSampleLocationsEXT *self = this;
  if (!(self->sampleLocationsInfo.IsEmpty())) {
    v8::Local<v8::Value> value = Nan::New(self->sampleLocationsInfo);
    
    _VkSampleLocationsInfoEXT* result = Nan::ObjectWrap::Unwrap<_VkSampleLocationsInfoEXT>(Nan::To<v8::Object>(value).ToLocalChecked());
    if (!result->flush()) return false;
    self->instance.sampleLocationsInfo = result->instance;
  }
  return true;
}

NAN_METHOD(_VkSubpassSampleLocationsEXT::New) {
  if (info.IsConstructCall()) {
    _VkSubpassSampleLocationsEXT* self = new _VkSubpassSampleLocationsEXT();
    self->Wrap(info.Holder());
    
    if (info[0]->IsObject()) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(info[0]).ToLocalChecked();
      v8::Local<v8::String> sAccess0 = Nan::New("subpassIndex").ToLocalChecked();
      v8::Local<v8::String> sAccess1 = Nan::New("sampleLocationsInfo").ToLocalChecked();
      if (obj->Has(sAccess0)) info.This()->Set(sAccess0, obj->Get(sAccess0));
      if (obj->Has(sAccess1)) info.This()->Set(sAccess1, obj->Get(sAccess1));
      
    }
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkSubpassSampleLocationsEXT constructor cannot be invoked without 'new'");
  }
};

// subpassIndex
NAN_GETTER(_VkSubpassSampleLocationsEXT::GetsubpassIndex) {
  _VkSubpassSampleLocationsEXT *self = Nan::ObjectWrap::Unwrap<_VkSubpassSampleLocationsEXT>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.subpassIndex));
}NAN_SETTER(_VkSubpassSampleLocationsEXT::SetsubpassIndex) {
  _VkSubpassSampleLocationsEXT *self = Nan::ObjectWrap::Unwrap<_VkSubpassSampleLocationsEXT>(info.This());
  if (value->IsNumber()) {
    self->instance.subpassIndex = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkSubpassSampleLocationsEXT.subpassIndex' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// sampleLocationsInfo
NAN_GETTER(_VkSubpassSampleLocationsEXT::GetsampleLocationsInfo) {
  _VkSubpassSampleLocationsEXT *self = Nan::ObjectWrap::Unwrap<_VkSubpassSampleLocationsEXT>(info.This());
  if (self->sampleLocationsInfo.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->sampleLocationsInfo);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkSubpassSampleLocationsEXT::SetsampleLocationsInfo) {
  _VkSubpassSampleLocationsEXT *self = Nan::ObjectWrap::Unwrap<_VkSubpassSampleLocationsEXT>(info.This());
  // js
  if (!value->IsNull()) {
    v8::Local<v8::Object> obj = Nan::To<v8::Object>(value).ToLocalChecked();
    if (Nan::New(_VkSampleLocationsInfoEXT::constructor)->HasInstance(obj)) {
      self->sampleLocationsInfo.Reset<v8::Object>(value.As<v8::Object>());
      _VkSampleLocationsInfoEXT* inst = Nan::ObjectWrap::Unwrap<_VkSampleLocationsInfoEXT>(obj);
      inst->flush();
      self->instance.sampleLocationsInfo = inst->instance;
    } else {
      
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkSampleLocationsInfoEXT]' for 'VkSubpassSampleLocationsEXT.sampleLocationsInfo' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
      return;
    }
  } else if (value->IsNull()) {
    self->sampleLocationsInfo.Reset();
    memset(&self->instance.sampleLocationsInfo, 0, sizeof(VkSampleLocationsInfoEXT));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkSampleLocationsInfoEXT]' for 'VkSubpassSampleLocationsEXT.sampleLocationsInfo' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}