/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY node-vulkan v0.0.9
 */
#include "utils.h"
#include "index.h"
#include "VkRenderPassMultiviewCreateInfo.h"

Nan::Persistent<v8::FunctionTemplate> _VkRenderPassMultiviewCreateInfo::constructor;

_VkRenderPassMultiviewCreateInfo::_VkRenderPassMultiviewCreateInfo() {
  instance.sType = VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO;
  
}

_VkRenderPassMultiviewCreateInfo::~_VkRenderPassMultiviewCreateInfo() {
  //printf("VkRenderPassMultiviewCreateInfo deconstructed!!\n");
  
  
  
  pViewMasks.Reset();
  
  
  pViewOffsets.Reset();
  
  
  pCorrelationMasks.Reset();
  
}

void _VkRenderPassMultiviewCreateInfo::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkRenderPassMultiviewCreateInfo::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkRenderPassMultiviewCreateInfo").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("sType").ToLocalChecked(), GetsType, SetsType, ctor);
  SetPrototypeAccessor(proto, Nan::New("subpassCount").ToLocalChecked(), GetsubpassCount, SetsubpassCount, ctor);
  SetPrototypeAccessor(proto, Nan::New("pViewMasks").ToLocalChecked(), GetpViewMasks, SetpViewMasks, ctor);
  SetPrototypeAccessor(proto, Nan::New("dependencyCount").ToLocalChecked(), GetdependencyCount, SetdependencyCount, ctor);
  SetPrototypeAccessor(proto, Nan::New("pViewOffsets").ToLocalChecked(), GetpViewOffsets, SetpViewOffsets, ctor);
  SetPrototypeAccessor(proto, Nan::New("correlationMaskCount").ToLocalChecked(), GetcorrelationMaskCount, SetcorrelationMaskCount, ctor);
  SetPrototypeAccessor(proto, Nan::New("pCorrelationMasks").ToLocalChecked(), GetpCorrelationMasks, SetpCorrelationMasks, ctor);
  Nan::Set(target, Nan::New("VkRenderPassMultiviewCreateInfo").ToLocalChecked(), ctor->GetFunction());
}

bool _VkRenderPassMultiviewCreateInfo::flush() {
  _VkRenderPassMultiviewCreateInfo *self = this;
  
  return true;
}

NAN_METHOD(_VkRenderPassMultiviewCreateInfo::New) {
  if (info.IsConstructCall()) {
    _VkRenderPassMultiviewCreateInfo* self = new _VkRenderPassMultiviewCreateInfo();
    self->Wrap(info.Holder());
    
    if (info[0]->IsObject()) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(info[0]).ToLocalChecked();
      v8::Local<v8::String> sAccess0 = Nan::New("sType").ToLocalChecked();
      v8::Local<v8::String> sAccess2 = Nan::New("subpassCount").ToLocalChecked();
      v8::Local<v8::String> sAccess3 = Nan::New("pViewMasks").ToLocalChecked();
      v8::Local<v8::String> sAccess4 = Nan::New("dependencyCount").ToLocalChecked();
      v8::Local<v8::String> sAccess5 = Nan::New("pViewOffsets").ToLocalChecked();
      v8::Local<v8::String> sAccess6 = Nan::New("correlationMaskCount").ToLocalChecked();
      v8::Local<v8::String> sAccess7 = Nan::New("pCorrelationMasks").ToLocalChecked();
      if (obj->Has(sAccess0)) info.This()->Set(sAccess0, obj->Get(sAccess0));
      if (obj->Has(sAccess2)) info.This()->Set(sAccess2, obj->Get(sAccess2));
      if (obj->Has(sAccess3)) info.This()->Set(sAccess3, obj->Get(sAccess3));
      if (obj->Has(sAccess4)) info.This()->Set(sAccess4, obj->Get(sAccess4));
      if (obj->Has(sAccess5)) info.This()->Set(sAccess5, obj->Get(sAccess5));
      if (obj->Has(sAccess6)) info.This()->Set(sAccess6, obj->Get(sAccess6));
      if (obj->Has(sAccess7)) info.This()->Set(sAccess7, obj->Get(sAccess7));
      
    }
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkRenderPassMultiviewCreateInfo constructor cannot be invoked without 'new'");
  }
};

// sType
NAN_GETTER(_VkRenderPassMultiviewCreateInfo::GetsType) {
  _VkRenderPassMultiviewCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkRenderPassMultiviewCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sType));
}NAN_SETTER(_VkRenderPassMultiviewCreateInfo::SetsType) {
  _VkRenderPassMultiviewCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkRenderPassMultiviewCreateInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.sType = static_cast<VkStructureType>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkRenderPassMultiviewCreateInfo.sType' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// subpassCount
NAN_GETTER(_VkRenderPassMultiviewCreateInfo::GetsubpassCount) {
  _VkRenderPassMultiviewCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkRenderPassMultiviewCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.subpassCount));
}NAN_SETTER(_VkRenderPassMultiviewCreateInfo::SetsubpassCount) {
  _VkRenderPassMultiviewCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkRenderPassMultiviewCreateInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.subpassCount = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkRenderPassMultiviewCreateInfo.subpassCount' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// pViewMasks
NAN_GETTER(_VkRenderPassMultiviewCreateInfo::GetpViewMasks) {
  _VkRenderPassMultiviewCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkRenderPassMultiviewCreateInfo>(info.This());
  if (self->pViewMasks.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->pViewMasks);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkRenderPassMultiviewCreateInfo::SetpViewMasks) {
  _VkRenderPassMultiviewCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkRenderPassMultiviewCreateInfo>(info.This());
  
    // js
    if (value->IsArrayBufferView()) {
      if (value->IsUint32Array()) {
        self->pViewMasks.Reset<v8::Array>(value.As<v8::Array>());
      } else {
        
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Uint32Array' for 'VkRenderPassMultiviewCreateInfo.pViewMasks' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
        return;
      }
    } else if (value->IsNull()) {
      self->pViewMasks.Reset();
    } else {
      
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Uint32Array' for 'VkRenderPassMultiviewCreateInfo.pViewMasks' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
      return;
    }
  
  
  // vulkan
  if (value->IsArrayBufferView()) {
    self->instance.pViewMasks = getTypedArrayData<uint32_t>(Nan::To<v8::Object>(value).ToLocalChecked(), nullptr);
  } else {
    self->instance.pViewMasks = nullptr;
  }
}// dependencyCount
NAN_GETTER(_VkRenderPassMultiviewCreateInfo::GetdependencyCount) {
  _VkRenderPassMultiviewCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkRenderPassMultiviewCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.dependencyCount));
}NAN_SETTER(_VkRenderPassMultiviewCreateInfo::SetdependencyCount) {
  _VkRenderPassMultiviewCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkRenderPassMultiviewCreateInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.dependencyCount = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkRenderPassMultiviewCreateInfo.dependencyCount' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// pViewOffsets
NAN_GETTER(_VkRenderPassMultiviewCreateInfo::GetpViewOffsets) {
  _VkRenderPassMultiviewCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkRenderPassMultiviewCreateInfo>(info.This());
  if (self->pViewOffsets.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->pViewOffsets);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkRenderPassMultiviewCreateInfo::SetpViewOffsets) {
  _VkRenderPassMultiviewCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkRenderPassMultiviewCreateInfo>(info.This());
  
    // js
    if (value->IsArrayBufferView()) {
      if (value->IsInt32Array()) {
        self->pViewOffsets.Reset<v8::Array>(value.As<v8::Array>());
      } else {
        
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Int32Array' for 'VkRenderPassMultiviewCreateInfo.pViewOffsets' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
        return;
      }
    } else if (value->IsNull()) {
      self->pViewOffsets.Reset();
    } else {
      
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Int32Array' for 'VkRenderPassMultiviewCreateInfo.pViewOffsets' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
      return;
    }
  
  
  // vulkan
  if (value->IsArrayBufferView()) {
    self->instance.pViewOffsets = getTypedArrayData<int32_t>(Nan::To<v8::Object>(value).ToLocalChecked(), nullptr);
  } else {
    self->instance.pViewOffsets = nullptr;
  }
}// correlationMaskCount
NAN_GETTER(_VkRenderPassMultiviewCreateInfo::GetcorrelationMaskCount) {
  _VkRenderPassMultiviewCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkRenderPassMultiviewCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.correlationMaskCount));
}NAN_SETTER(_VkRenderPassMultiviewCreateInfo::SetcorrelationMaskCount) {
  _VkRenderPassMultiviewCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkRenderPassMultiviewCreateInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.correlationMaskCount = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkRenderPassMultiviewCreateInfo.correlationMaskCount' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// pCorrelationMasks
NAN_GETTER(_VkRenderPassMultiviewCreateInfo::GetpCorrelationMasks) {
  _VkRenderPassMultiviewCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkRenderPassMultiviewCreateInfo>(info.This());
  if (self->pCorrelationMasks.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->pCorrelationMasks);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkRenderPassMultiviewCreateInfo::SetpCorrelationMasks) {
  _VkRenderPassMultiviewCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkRenderPassMultiviewCreateInfo>(info.This());
  
    // js
    if (value->IsArrayBufferView()) {
      if (value->IsUint32Array()) {
        self->pCorrelationMasks.Reset<v8::Array>(value.As<v8::Array>());
      } else {
        
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Uint32Array' for 'VkRenderPassMultiviewCreateInfo.pCorrelationMasks' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
        return;
      }
    } else if (value->IsNull()) {
      self->pCorrelationMasks.Reset();
    } else {
      
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Uint32Array' for 'VkRenderPassMultiviewCreateInfo.pCorrelationMasks' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
      return;
    }
  
  
  // vulkan
  if (value->IsArrayBufferView()) {
    self->instance.pCorrelationMasks = getTypedArrayData<uint32_t>(Nan::To<v8::Object>(value).ToLocalChecked(), nullptr);
  } else {
    self->instance.pCorrelationMasks = nullptr;
  }
}