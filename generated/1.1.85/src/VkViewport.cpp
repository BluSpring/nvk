/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY node-vulkan v0.0.6
 */
#include "utils.h"
#include "index.h"
#include "VkViewport.h"

Nan::Persistent<v8::FunctionTemplate> _VkViewport::constructor;

_VkViewport::_VkViewport() {
  
}

_VkViewport::~_VkViewport() {
  //printf("VkViewport deconstructed!!\n");
}

void _VkViewport::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkViewport::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkViewport").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  Nan::SetPrototypeMethod(ctor, "flush", flush);
  
  SetPrototypeAccessor(proto, Nan::New("x").ToLocalChecked(), Getx, Setx, ctor);
  SetPrototypeAccessor(proto, Nan::New("y").ToLocalChecked(), Gety, Sety, ctor);
  SetPrototypeAccessor(proto, Nan::New("width").ToLocalChecked(), Getwidth, Setwidth, ctor);
  SetPrototypeAccessor(proto, Nan::New("height").ToLocalChecked(), Getheight, Setheight, ctor);
  SetPrototypeAccessor(proto, Nan::New("minDepth").ToLocalChecked(), GetminDepth, SetminDepth, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxDepth").ToLocalChecked(), GetmaxDepth, SetmaxDepth, ctor);
  Nan::Set(target, Nan::New("VkViewport").ToLocalChecked(), ctor->GetFunction());
}

NAN_METHOD(_VkViewport::New) {
  if (info.IsConstructCall()) {
    _VkViewport* self = new _VkViewport();
    self->Wrap(info.Holder());
    
    if (info[0]->IsObject()) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(info[0]).ToLocalChecked();
      if (obj->Has(self->sAccess0)) info.This()->Set(self->sAccess0, obj->Get(self->sAccess0));
      if (obj->Has(self->sAccess1)) info.This()->Set(self->sAccess1, obj->Get(self->sAccess1));
      if (obj->Has(self->sAccess2)) info.This()->Set(self->sAccess2, obj->Get(self->sAccess2));
      if (obj->Has(self->sAccess3)) info.This()->Set(self->sAccess3, obj->Get(self->sAccess3));
      if (obj->Has(self->sAccess4)) info.This()->Set(self->sAccess4, obj->Get(self->sAccess4));
      if (obj->Has(self->sAccess5)) info.This()->Set(self->sAccess5, obj->Get(self->sAccess5));
      
    }
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkViewport constructor cannot be invoked without 'new'");
  }
};

NAN_METHOD(_VkViewport::flush) {
  _VkViewport *self = Nan::ObjectWrap::Unwrap<_VkViewport>(info.This());
  
}

// x
NAN_GETTER(_VkViewport::Getx) {
  _VkViewport *self = Nan::ObjectWrap::Unwrap<_VkViewport>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.x));
}NAN_SETTER(_VkViewport::Setx) {
  _VkViewport *self = Nan::ObjectWrap::Unwrap<_VkViewport>(info.This());
  if (value->IsNumber()) {
    self->instance.x = static_cast<float>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkViewport.x'");
  }
}// y
NAN_GETTER(_VkViewport::Gety) {
  _VkViewport *self = Nan::ObjectWrap::Unwrap<_VkViewport>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.y));
}NAN_SETTER(_VkViewport::Sety) {
  _VkViewport *self = Nan::ObjectWrap::Unwrap<_VkViewport>(info.This());
  if (value->IsNumber()) {
    self->instance.y = static_cast<float>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkViewport.y'");
  }
}// width
NAN_GETTER(_VkViewport::Getwidth) {
  _VkViewport *self = Nan::ObjectWrap::Unwrap<_VkViewport>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.width));
}NAN_SETTER(_VkViewport::Setwidth) {
  _VkViewport *self = Nan::ObjectWrap::Unwrap<_VkViewport>(info.This());
  if (value->IsNumber()) {
    self->instance.width = static_cast<float>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkViewport.width'");
  }
}// height
NAN_GETTER(_VkViewport::Getheight) {
  _VkViewport *self = Nan::ObjectWrap::Unwrap<_VkViewport>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.height));
}NAN_SETTER(_VkViewport::Setheight) {
  _VkViewport *self = Nan::ObjectWrap::Unwrap<_VkViewport>(info.This());
  if (value->IsNumber()) {
    self->instance.height = static_cast<float>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkViewport.height'");
  }
}// minDepth
NAN_GETTER(_VkViewport::GetminDepth) {
  _VkViewport *self = Nan::ObjectWrap::Unwrap<_VkViewport>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.minDepth));
}NAN_SETTER(_VkViewport::SetminDepth) {
  _VkViewport *self = Nan::ObjectWrap::Unwrap<_VkViewport>(info.This());
  if (value->IsNumber()) {
    self->instance.minDepth = static_cast<float>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkViewport.minDepth'");
  }
}// maxDepth
NAN_GETTER(_VkViewport::GetmaxDepth) {
  _VkViewport *self = Nan::ObjectWrap::Unwrap<_VkViewport>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxDepth));
}NAN_SETTER(_VkViewport::SetmaxDepth) {
  _VkViewport *self = Nan::ObjectWrap::Unwrap<_VkViewport>(info.This());
  if (value->IsNumber()) {
    self->instance.maxDepth = static_cast<float>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkViewport.maxDepth'");
  }
}