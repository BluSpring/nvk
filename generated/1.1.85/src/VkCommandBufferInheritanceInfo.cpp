/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY node-vulkan v0.0.7
 */
#include "utils.h"
#include "index.h"
#include "VkCommandBufferInheritanceInfo.h"

Nan::Persistent<v8::FunctionTemplate> _VkCommandBufferInheritanceInfo::constructor;

_VkCommandBufferInheritanceInfo::_VkCommandBufferInheritanceInfo() {
  instance.sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO;
}

_VkCommandBufferInheritanceInfo::~_VkCommandBufferInheritanceInfo() {
  //printf("VkCommandBufferInheritanceInfo deconstructed!!\n");
}

void _VkCommandBufferInheritanceInfo::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkCommandBufferInheritanceInfo::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkCommandBufferInheritanceInfo").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  Nan::SetPrototypeMethod(ctor, "flush", flush);
  
  SetPrototypeAccessor(proto, Nan::New("sType").ToLocalChecked(), GetsType, SetsType, ctor);
  SetPrototypeAccessor(proto, Nan::New("pNext").ToLocalChecked(), GetpNext, SetpNext, ctor);
  SetPrototypeAccessor(proto, Nan::New("renderPass").ToLocalChecked(), GetrenderPass, SetrenderPass, ctor);
  SetPrototypeAccessor(proto, Nan::New("subpass").ToLocalChecked(), Getsubpass, Setsubpass, ctor);
  SetPrototypeAccessor(proto, Nan::New("framebuffer").ToLocalChecked(), Getframebuffer, Setframebuffer, ctor);
  SetPrototypeAccessor(proto, Nan::New("occlusionQueryEnable").ToLocalChecked(), GetocclusionQueryEnable, SetocclusionQueryEnable, ctor);
  SetPrototypeAccessor(proto, Nan::New("queryFlags").ToLocalChecked(), GetqueryFlags, SetqueryFlags, ctor);
  SetPrototypeAccessor(proto, Nan::New("pipelineStatistics").ToLocalChecked(), GetpipelineStatistics, SetpipelineStatistics, ctor);
  Nan::Set(target, Nan::New("VkCommandBufferInheritanceInfo").ToLocalChecked(), ctor->GetFunction());
}

NAN_METHOD(_VkCommandBufferInheritanceInfo::New) {
  if (info.IsConstructCall()) {
    _VkCommandBufferInheritanceInfo* self = new _VkCommandBufferInheritanceInfo();
    self->Wrap(info.Holder());
    
    if (info[0]->IsObject()) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(info[0]).ToLocalChecked();
      if (obj->Has(self->sAccess0)) info.This()->Set(self->sAccess0, obj->Get(self->sAccess0));
      if (obj->Has(self->sAccess1)) info.This()->Set(self->sAccess1, obj->Get(self->sAccess1));
      if (obj->Has(self->sAccess2)) info.This()->Set(self->sAccess2, obj->Get(self->sAccess2));
      if (obj->Has(self->sAccess3)) info.This()->Set(self->sAccess3, obj->Get(self->sAccess3));
      if (obj->Has(self->sAccess4)) info.This()->Set(self->sAccess4, obj->Get(self->sAccess4));
      if (obj->Has(self->sAccess5)) info.This()->Set(self->sAccess5, obj->Get(self->sAccess5));
      if (obj->Has(self->sAccess6)) info.This()->Set(self->sAccess6, obj->Get(self->sAccess6));
      if (obj->Has(self->sAccess7)) info.This()->Set(self->sAccess7, obj->Get(self->sAccess7));
      
    }
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkCommandBufferInheritanceInfo constructor cannot be invoked without 'new'");
  }
};

NAN_METHOD(_VkCommandBufferInheritanceInfo::flush) {
  _VkCommandBufferInheritanceInfo *self = Nan::ObjectWrap::Unwrap<_VkCommandBufferInheritanceInfo>(info.This());
  
  info.This()->Set(self->sAccess2, info.This()->Get(self->sAccess2));
  info.This()->Set(self->sAccess4, info.This()->Get(self->sAccess4));
}

// sType
NAN_GETTER(_VkCommandBufferInheritanceInfo::GetsType) {
  _VkCommandBufferInheritanceInfo *self = Nan::ObjectWrap::Unwrap<_VkCommandBufferInheritanceInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sType));
}NAN_SETTER(_VkCommandBufferInheritanceInfo::SetsType) {
  _VkCommandBufferInheritanceInfo *self = Nan::ObjectWrap::Unwrap<_VkCommandBufferInheritanceInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.sType = static_cast<VkStructureType>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkCommandBufferInheritanceInfo.sType'");
  }
}// pNext
NAN_GETTER(_VkCommandBufferInheritanceInfo::GetpNext) {
  _VkCommandBufferInheritanceInfo *self = Nan::ObjectWrap::Unwrap<_VkCommandBufferInheritanceInfo>(info.This());
}NAN_SETTER(_VkCommandBufferInheritanceInfo::SetpNext) {
  _VkCommandBufferInheritanceInfo *self = Nan::ObjectWrap::Unwrap<_VkCommandBufferInheritanceInfo>(info.This());
}// renderPass
NAN_GETTER(_VkCommandBufferInheritanceInfo::GetrenderPass) {
  _VkCommandBufferInheritanceInfo *self = Nan::ObjectWrap::Unwrap<_VkCommandBufferInheritanceInfo>(info.This());
  if (self->renderPass.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->renderPass);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkCommandBufferInheritanceInfo::SetrenderPass) {
  _VkCommandBufferInheritanceInfo *self = Nan::ObjectWrap::Unwrap<_VkCommandBufferInheritanceInfo>(info.This());
  // js
  if (!value->IsNull()) {
    v8::Local<v8::Object> obj = Nan::To<v8::Object>(value).ToLocalChecked();
    if (Nan::New(_VkRenderPass::constructor)->HasInstance(obj)) {
      self->renderPass.Reset<v8::Object>(value.As<v8::Object>());
      _VkRenderPass* inst = Nan::ObjectWrap::Unwrap<_VkRenderPass>(obj);
      self->instance.renderPass = inst->instance;
    } else {
      return Nan::ThrowTypeError("Expected 'Object [VkRenderPass]' for 'VkCommandBufferInheritanceInfo.renderPass'");
    }
  } else if (value->IsNull()) {
    self->renderPass.Reset();
    self->instance.renderPass = VK_NULL_HANDLE;
  } else {
    return Nan::ThrowTypeError("Expected 'Object [VkRenderPass]' for 'VkCommandBufferInheritanceInfo.renderPass'");
  }
}// subpass
NAN_GETTER(_VkCommandBufferInheritanceInfo::Getsubpass) {
  _VkCommandBufferInheritanceInfo *self = Nan::ObjectWrap::Unwrap<_VkCommandBufferInheritanceInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.subpass));
}NAN_SETTER(_VkCommandBufferInheritanceInfo::Setsubpass) {
  _VkCommandBufferInheritanceInfo *self = Nan::ObjectWrap::Unwrap<_VkCommandBufferInheritanceInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.subpass = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkCommandBufferInheritanceInfo.subpass'");
  }
}// framebuffer
NAN_GETTER(_VkCommandBufferInheritanceInfo::Getframebuffer) {
  _VkCommandBufferInheritanceInfo *self = Nan::ObjectWrap::Unwrap<_VkCommandBufferInheritanceInfo>(info.This());
  if (self->framebuffer.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->framebuffer);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkCommandBufferInheritanceInfo::Setframebuffer) {
  _VkCommandBufferInheritanceInfo *self = Nan::ObjectWrap::Unwrap<_VkCommandBufferInheritanceInfo>(info.This());
  // js
  if (!value->IsNull()) {
    v8::Local<v8::Object> obj = Nan::To<v8::Object>(value).ToLocalChecked();
    if (Nan::New(_VkFramebuffer::constructor)->HasInstance(obj)) {
      self->framebuffer.Reset<v8::Object>(value.As<v8::Object>());
      _VkFramebuffer* inst = Nan::ObjectWrap::Unwrap<_VkFramebuffer>(obj);
      self->instance.framebuffer = inst->instance;
    } else {
      return Nan::ThrowTypeError("Expected 'Object [VkFramebuffer]' for 'VkCommandBufferInheritanceInfo.framebuffer'");
    }
  } else if (value->IsNull()) {
    self->framebuffer.Reset();
    self->instance.framebuffer = VK_NULL_HANDLE;
  } else {
    return Nan::ThrowTypeError("Expected 'Object [VkFramebuffer]' for 'VkCommandBufferInheritanceInfo.framebuffer'");
  }
}// occlusionQueryEnable
NAN_GETTER(_VkCommandBufferInheritanceInfo::GetocclusionQueryEnable) {
  _VkCommandBufferInheritanceInfo *self = Nan::ObjectWrap::Unwrap<_VkCommandBufferInheritanceInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.occlusionQueryEnable));
}NAN_SETTER(_VkCommandBufferInheritanceInfo::SetocclusionQueryEnable) {
  _VkCommandBufferInheritanceInfo *self = Nan::ObjectWrap::Unwrap<_VkCommandBufferInheritanceInfo>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.occlusionQueryEnable = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkCommandBufferInheritanceInfo.occlusionQueryEnable'");
  }
}// queryFlags
NAN_GETTER(_VkCommandBufferInheritanceInfo::GetqueryFlags) {
  _VkCommandBufferInheritanceInfo *self = Nan::ObjectWrap::Unwrap<_VkCommandBufferInheritanceInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.queryFlags));
}NAN_SETTER(_VkCommandBufferInheritanceInfo::SetqueryFlags) {
  _VkCommandBufferInheritanceInfo *self = Nan::ObjectWrap::Unwrap<_VkCommandBufferInheritanceInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.queryFlags = static_cast<VkQueryControlFlags>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkCommandBufferInheritanceInfo.queryFlags'");
  }
}// pipelineStatistics
NAN_GETTER(_VkCommandBufferInheritanceInfo::GetpipelineStatistics) {
  _VkCommandBufferInheritanceInfo *self = Nan::ObjectWrap::Unwrap<_VkCommandBufferInheritanceInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.pipelineStatistics));
}NAN_SETTER(_VkCommandBufferInheritanceInfo::SetpipelineStatistics) {
  _VkCommandBufferInheritanceInfo *self = Nan::ObjectWrap::Unwrap<_VkCommandBufferInheritanceInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.pipelineStatistics = static_cast<VkQueryPipelineStatisticFlags>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkCommandBufferInheritanceInfo.pipelineStatistics'");
  }
}