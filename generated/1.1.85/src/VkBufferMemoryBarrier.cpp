/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY node-vulkan v0.0.9
 */
#include "utils.h"
#include "index.h"
#include "VkBufferMemoryBarrier.h"

Nan::Persistent<v8::FunctionTemplate> _VkBufferMemoryBarrier::constructor;

_VkBufferMemoryBarrier::_VkBufferMemoryBarrier() {
  instance.sType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER;
  
}

_VkBufferMemoryBarrier::~_VkBufferMemoryBarrier() {
  //printf("VkBufferMemoryBarrier deconstructed!!\n");
  
  
  
  
  
  
  
  
  
}

void _VkBufferMemoryBarrier::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkBufferMemoryBarrier::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkBufferMemoryBarrier").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("sType").ToLocalChecked(), GetsType, SetsType, ctor);
  SetPrototypeAccessor(proto, Nan::New("srcAccessMask").ToLocalChecked(), GetsrcAccessMask, SetsrcAccessMask, ctor);
  SetPrototypeAccessor(proto, Nan::New("dstAccessMask").ToLocalChecked(), GetdstAccessMask, SetdstAccessMask, ctor);
  SetPrototypeAccessor(proto, Nan::New("srcQueueFamilyIndex").ToLocalChecked(), GetsrcQueueFamilyIndex, SetsrcQueueFamilyIndex, ctor);
  SetPrototypeAccessor(proto, Nan::New("dstQueueFamilyIndex").ToLocalChecked(), GetdstQueueFamilyIndex, SetdstQueueFamilyIndex, ctor);
  SetPrototypeAccessor(proto, Nan::New("buffer").ToLocalChecked(), Getbuffer, Setbuffer, ctor);
  SetPrototypeAccessor(proto, Nan::New("offset").ToLocalChecked(), Getoffset, Setoffset, ctor);
  SetPrototypeAccessor(proto, Nan::New("size").ToLocalChecked(), Getsize, Setsize, ctor);
  Nan::Set(target, Nan::New("VkBufferMemoryBarrier").ToLocalChecked(), ctor->GetFunction());
}

bool _VkBufferMemoryBarrier::flush() {
  _VkBufferMemoryBarrier *self = this;
  
  return true;
}

NAN_METHOD(_VkBufferMemoryBarrier::New) {
  if (info.IsConstructCall()) {
    _VkBufferMemoryBarrier* self = new _VkBufferMemoryBarrier();
    self->Wrap(info.Holder());
    
    if (info[0]->IsObject()) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(info[0]).ToLocalChecked();
      v8::Local<v8::String> sAccess0 = Nan::New("sType").ToLocalChecked();
      v8::Local<v8::String> sAccess2 = Nan::New("srcAccessMask").ToLocalChecked();
      v8::Local<v8::String> sAccess3 = Nan::New("dstAccessMask").ToLocalChecked();
      v8::Local<v8::String> sAccess4 = Nan::New("srcQueueFamilyIndex").ToLocalChecked();
      v8::Local<v8::String> sAccess5 = Nan::New("dstQueueFamilyIndex").ToLocalChecked();
      v8::Local<v8::String> sAccess6 = Nan::New("buffer").ToLocalChecked();
      v8::Local<v8::String> sAccess7 = Nan::New("offset").ToLocalChecked();
      v8::Local<v8::String> sAccess8 = Nan::New("size").ToLocalChecked();
      if (obj->Has(sAccess0)) info.This()->Set(sAccess0, obj->Get(sAccess0));
      if (obj->Has(sAccess2)) info.This()->Set(sAccess2, obj->Get(sAccess2));
      if (obj->Has(sAccess3)) info.This()->Set(sAccess3, obj->Get(sAccess3));
      if (obj->Has(sAccess4)) info.This()->Set(sAccess4, obj->Get(sAccess4));
      if (obj->Has(sAccess5)) info.This()->Set(sAccess5, obj->Get(sAccess5));
      if (obj->Has(sAccess6)) info.This()->Set(sAccess6, obj->Get(sAccess6));
      if (obj->Has(sAccess7)) info.This()->Set(sAccess7, obj->Get(sAccess7));
      if (obj->Has(sAccess8)) info.This()->Set(sAccess8, obj->Get(sAccess8));
      
    }
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkBufferMemoryBarrier constructor cannot be invoked without 'new'");
  }
};

// sType
NAN_GETTER(_VkBufferMemoryBarrier::GetsType) {
  _VkBufferMemoryBarrier *self = Nan::ObjectWrap::Unwrap<_VkBufferMemoryBarrier>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sType));
}NAN_SETTER(_VkBufferMemoryBarrier::SetsType) {
  _VkBufferMemoryBarrier *self = Nan::ObjectWrap::Unwrap<_VkBufferMemoryBarrier>(info.This());
  if (value->IsNumber()) {
    self->instance.sType = static_cast<VkStructureType>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkBufferMemoryBarrier.sType' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// srcAccessMask
NAN_GETTER(_VkBufferMemoryBarrier::GetsrcAccessMask) {
  _VkBufferMemoryBarrier *self = Nan::ObjectWrap::Unwrap<_VkBufferMemoryBarrier>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.srcAccessMask));
}NAN_SETTER(_VkBufferMemoryBarrier::SetsrcAccessMask) {
  _VkBufferMemoryBarrier *self = Nan::ObjectWrap::Unwrap<_VkBufferMemoryBarrier>(info.This());
  if (value->IsNumber()) {
    self->instance.srcAccessMask = static_cast<VkAccessFlags>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkBufferMemoryBarrier.srcAccessMask' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// dstAccessMask
NAN_GETTER(_VkBufferMemoryBarrier::GetdstAccessMask) {
  _VkBufferMemoryBarrier *self = Nan::ObjectWrap::Unwrap<_VkBufferMemoryBarrier>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.dstAccessMask));
}NAN_SETTER(_VkBufferMemoryBarrier::SetdstAccessMask) {
  _VkBufferMemoryBarrier *self = Nan::ObjectWrap::Unwrap<_VkBufferMemoryBarrier>(info.This());
  if (value->IsNumber()) {
    self->instance.dstAccessMask = static_cast<VkAccessFlags>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkBufferMemoryBarrier.dstAccessMask' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// srcQueueFamilyIndex
NAN_GETTER(_VkBufferMemoryBarrier::GetsrcQueueFamilyIndex) {
  _VkBufferMemoryBarrier *self = Nan::ObjectWrap::Unwrap<_VkBufferMemoryBarrier>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.srcQueueFamilyIndex));
}NAN_SETTER(_VkBufferMemoryBarrier::SetsrcQueueFamilyIndex) {
  _VkBufferMemoryBarrier *self = Nan::ObjectWrap::Unwrap<_VkBufferMemoryBarrier>(info.This());
  if (value->IsNumber()) {
    self->instance.srcQueueFamilyIndex = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkBufferMemoryBarrier.srcQueueFamilyIndex' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// dstQueueFamilyIndex
NAN_GETTER(_VkBufferMemoryBarrier::GetdstQueueFamilyIndex) {
  _VkBufferMemoryBarrier *self = Nan::ObjectWrap::Unwrap<_VkBufferMemoryBarrier>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.dstQueueFamilyIndex));
}NAN_SETTER(_VkBufferMemoryBarrier::SetdstQueueFamilyIndex) {
  _VkBufferMemoryBarrier *self = Nan::ObjectWrap::Unwrap<_VkBufferMemoryBarrier>(info.This());
  if (value->IsNumber()) {
    self->instance.dstQueueFamilyIndex = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkBufferMemoryBarrier.dstQueueFamilyIndex' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// buffer
NAN_GETTER(_VkBufferMemoryBarrier::Getbuffer) {
  _VkBufferMemoryBarrier *self = Nan::ObjectWrap::Unwrap<_VkBufferMemoryBarrier>(info.This());
  if (self->buffer.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->buffer);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkBufferMemoryBarrier::Setbuffer) {
  _VkBufferMemoryBarrier *self = Nan::ObjectWrap::Unwrap<_VkBufferMemoryBarrier>(info.This());
  // js
  if (!value->IsNull()) {
    v8::Local<v8::Object> obj = Nan::To<v8::Object>(value).ToLocalChecked();
    if (Nan::New(_VkBuffer::constructor)->HasInstance(obj)) {
      self->buffer.Reset<v8::Object>(value.As<v8::Object>());
      _VkBuffer* inst = Nan::ObjectWrap::Unwrap<_VkBuffer>(obj);
      ;
      self->instance.buffer = inst->instance;
    } else {
      
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkBuffer]' for 'VkBufferMemoryBarrier.buffer' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
      return;
    }
  } else if (value->IsNull()) {
    self->buffer.Reset();
    self->instance.buffer = VK_NULL_HANDLE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkBuffer]' for 'VkBufferMemoryBarrier.buffer' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// offset
NAN_GETTER(_VkBufferMemoryBarrier::Getoffset) {
  _VkBufferMemoryBarrier *self = Nan::ObjectWrap::Unwrap<_VkBufferMemoryBarrier>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.offset));
}NAN_SETTER(_VkBufferMemoryBarrier::Setoffset) {
  _VkBufferMemoryBarrier *self = Nan::ObjectWrap::Unwrap<_VkBufferMemoryBarrier>(info.This());
  if (value->IsNumber()) {
    self->instance.offset = static_cast<uint64_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkBufferMemoryBarrier.offset' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// size
NAN_GETTER(_VkBufferMemoryBarrier::Getsize) {
  _VkBufferMemoryBarrier *self = Nan::ObjectWrap::Unwrap<_VkBufferMemoryBarrier>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.size));
}NAN_SETTER(_VkBufferMemoryBarrier::Setsize) {
  _VkBufferMemoryBarrier *self = Nan::ObjectWrap::Unwrap<_VkBufferMemoryBarrier>(info.This());
  if (value->IsNumber()) {
    self->instance.size = static_cast<uint64_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkBufferMemoryBarrier.size' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}