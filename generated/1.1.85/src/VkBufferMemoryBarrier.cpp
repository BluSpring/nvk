/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY node-vulkan v0.0.7
 */
#include "utils.h"
#include "index.h"
#include "VkBufferMemoryBarrier.h"

Nan::Persistent<v8::FunctionTemplate> _VkBufferMemoryBarrier::constructor;

_VkBufferMemoryBarrier::_VkBufferMemoryBarrier() {
  instance.sType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER;
}

_VkBufferMemoryBarrier::~_VkBufferMemoryBarrier() {
  //printf("VkBufferMemoryBarrier deconstructed!!\n");
}

void _VkBufferMemoryBarrier::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkBufferMemoryBarrier::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkBufferMemoryBarrier").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  Nan::SetPrototypeMethod(ctor, "flush", flush);
  
  SetPrototypeAccessor(proto, Nan::New("sType").ToLocalChecked(), GetsType, SetsType, ctor);
  SetPrototypeAccessor(proto, Nan::New("pNext").ToLocalChecked(), GetpNext, SetpNext, ctor);
  SetPrototypeAccessor(proto, Nan::New("srcAccessMask").ToLocalChecked(), GetsrcAccessMask, SetsrcAccessMask, ctor);
  SetPrototypeAccessor(proto, Nan::New("dstAccessMask").ToLocalChecked(), GetdstAccessMask, SetdstAccessMask, ctor);
  SetPrototypeAccessor(proto, Nan::New("srcQueueFamilyIndex").ToLocalChecked(), GetsrcQueueFamilyIndex, SetsrcQueueFamilyIndex, ctor);
  SetPrototypeAccessor(proto, Nan::New("dstQueueFamilyIndex").ToLocalChecked(), GetdstQueueFamilyIndex, SetdstQueueFamilyIndex, ctor);
  SetPrototypeAccessor(proto, Nan::New("buffer").ToLocalChecked(), Getbuffer, Setbuffer, ctor);
  SetPrototypeAccessor(proto, Nan::New("offset").ToLocalChecked(), Getoffset, Setoffset, ctor);
  SetPrototypeAccessor(proto, Nan::New("size").ToLocalChecked(), Getsize, Setsize, ctor);
  Nan::Set(target, Nan::New("VkBufferMemoryBarrier").ToLocalChecked(), ctor->GetFunction());
}

NAN_METHOD(_VkBufferMemoryBarrier::New) {
  if (info.IsConstructCall()) {
    _VkBufferMemoryBarrier* self = new _VkBufferMemoryBarrier();
    self->Wrap(info.Holder());
    
    if (info[0]->IsObject()) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(info[0]).ToLocalChecked();
      if (obj->Has(self->sAccess0)) info.This()->Set(self->sAccess0, obj->Get(self->sAccess0));
      if (obj->Has(self->sAccess1)) info.This()->Set(self->sAccess1, obj->Get(self->sAccess1));
      if (obj->Has(self->sAccess2)) info.This()->Set(self->sAccess2, obj->Get(self->sAccess2));
      if (obj->Has(self->sAccess3)) info.This()->Set(self->sAccess3, obj->Get(self->sAccess3));
      if (obj->Has(self->sAccess4)) info.This()->Set(self->sAccess4, obj->Get(self->sAccess4));
      if (obj->Has(self->sAccess5)) info.This()->Set(self->sAccess5, obj->Get(self->sAccess5));
      if (obj->Has(self->sAccess6)) info.This()->Set(self->sAccess6, obj->Get(self->sAccess6));
      if (obj->Has(self->sAccess7)) info.This()->Set(self->sAccess7, obj->Get(self->sAccess7));
      if (obj->Has(self->sAccess8)) info.This()->Set(self->sAccess8, obj->Get(self->sAccess8));
      
    }
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkBufferMemoryBarrier constructor cannot be invoked without 'new'");
  }
};

NAN_METHOD(_VkBufferMemoryBarrier::flush) {
  _VkBufferMemoryBarrier *self = Nan::ObjectWrap::Unwrap<_VkBufferMemoryBarrier>(info.This());
  
  info.This()->Set(self->sAccess6, info.This()->Get(self->sAccess6));
}

// sType
NAN_GETTER(_VkBufferMemoryBarrier::GetsType) {
  _VkBufferMemoryBarrier *self = Nan::ObjectWrap::Unwrap<_VkBufferMemoryBarrier>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sType));
}NAN_SETTER(_VkBufferMemoryBarrier::SetsType) {
  _VkBufferMemoryBarrier *self = Nan::ObjectWrap::Unwrap<_VkBufferMemoryBarrier>(info.This());
  if (value->IsNumber()) {
    self->instance.sType = static_cast<VkStructureType>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkBufferMemoryBarrier.sType'");
  }
}// pNext
NAN_GETTER(_VkBufferMemoryBarrier::GetpNext) {
  _VkBufferMemoryBarrier *self = Nan::ObjectWrap::Unwrap<_VkBufferMemoryBarrier>(info.This());
}NAN_SETTER(_VkBufferMemoryBarrier::SetpNext) {
  _VkBufferMemoryBarrier *self = Nan::ObjectWrap::Unwrap<_VkBufferMemoryBarrier>(info.This());
}// srcAccessMask
NAN_GETTER(_VkBufferMemoryBarrier::GetsrcAccessMask) {
  _VkBufferMemoryBarrier *self = Nan::ObjectWrap::Unwrap<_VkBufferMemoryBarrier>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.srcAccessMask));
}NAN_SETTER(_VkBufferMemoryBarrier::SetsrcAccessMask) {
  _VkBufferMemoryBarrier *self = Nan::ObjectWrap::Unwrap<_VkBufferMemoryBarrier>(info.This());
  if (value->IsNumber()) {
    self->instance.srcAccessMask = static_cast<VkAccessFlags>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkBufferMemoryBarrier.srcAccessMask'");
  }
}// dstAccessMask
NAN_GETTER(_VkBufferMemoryBarrier::GetdstAccessMask) {
  _VkBufferMemoryBarrier *self = Nan::ObjectWrap::Unwrap<_VkBufferMemoryBarrier>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.dstAccessMask));
}NAN_SETTER(_VkBufferMemoryBarrier::SetdstAccessMask) {
  _VkBufferMemoryBarrier *self = Nan::ObjectWrap::Unwrap<_VkBufferMemoryBarrier>(info.This());
  if (value->IsNumber()) {
    self->instance.dstAccessMask = static_cast<VkAccessFlags>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkBufferMemoryBarrier.dstAccessMask'");
  }
}// srcQueueFamilyIndex
NAN_GETTER(_VkBufferMemoryBarrier::GetsrcQueueFamilyIndex) {
  _VkBufferMemoryBarrier *self = Nan::ObjectWrap::Unwrap<_VkBufferMemoryBarrier>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.srcQueueFamilyIndex));
}NAN_SETTER(_VkBufferMemoryBarrier::SetsrcQueueFamilyIndex) {
  _VkBufferMemoryBarrier *self = Nan::ObjectWrap::Unwrap<_VkBufferMemoryBarrier>(info.This());
  if (value->IsNumber()) {
    self->instance.srcQueueFamilyIndex = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkBufferMemoryBarrier.srcQueueFamilyIndex'");
  }
}// dstQueueFamilyIndex
NAN_GETTER(_VkBufferMemoryBarrier::GetdstQueueFamilyIndex) {
  _VkBufferMemoryBarrier *self = Nan::ObjectWrap::Unwrap<_VkBufferMemoryBarrier>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.dstQueueFamilyIndex));
}NAN_SETTER(_VkBufferMemoryBarrier::SetdstQueueFamilyIndex) {
  _VkBufferMemoryBarrier *self = Nan::ObjectWrap::Unwrap<_VkBufferMemoryBarrier>(info.This());
  if (value->IsNumber()) {
    self->instance.dstQueueFamilyIndex = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkBufferMemoryBarrier.dstQueueFamilyIndex'");
  }
}// buffer
NAN_GETTER(_VkBufferMemoryBarrier::Getbuffer) {
  _VkBufferMemoryBarrier *self = Nan::ObjectWrap::Unwrap<_VkBufferMemoryBarrier>(info.This());
  if (self->buffer.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->buffer);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkBufferMemoryBarrier::Setbuffer) {
  _VkBufferMemoryBarrier *self = Nan::ObjectWrap::Unwrap<_VkBufferMemoryBarrier>(info.This());
  // js
  if (!value->IsNull()) {
    v8::Local<v8::Object> obj = Nan::To<v8::Object>(value).ToLocalChecked();
    if (Nan::New(_VkBuffer::constructor)->HasInstance(obj)) {
      self->buffer.Reset<v8::Object>(value.As<v8::Object>());
      _VkBuffer* inst = Nan::ObjectWrap::Unwrap<_VkBuffer>(obj);
      self->instance.buffer = inst->instance;
    } else {
      return Nan::ThrowTypeError("Expected 'Object [VkBuffer]' for 'VkBufferMemoryBarrier.buffer'");
    }
  } else if (value->IsNull()) {
    self->buffer.Reset();
    self->instance.buffer = VK_NULL_HANDLE;
  } else {
    return Nan::ThrowTypeError("Expected 'Object [VkBuffer]' for 'VkBufferMemoryBarrier.buffer'");
  }
}// offset
NAN_GETTER(_VkBufferMemoryBarrier::Getoffset) {
  _VkBufferMemoryBarrier *self = Nan::ObjectWrap::Unwrap<_VkBufferMemoryBarrier>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.offset));
}NAN_SETTER(_VkBufferMemoryBarrier::Setoffset) {
  _VkBufferMemoryBarrier *self = Nan::ObjectWrap::Unwrap<_VkBufferMemoryBarrier>(info.This());
  if (value->IsNumber()) {
    self->instance.offset = static_cast<uint64_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkBufferMemoryBarrier.offset'");
  }
}// size
NAN_GETTER(_VkBufferMemoryBarrier::Getsize) {
  _VkBufferMemoryBarrier *self = Nan::ObjectWrap::Unwrap<_VkBufferMemoryBarrier>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.size));
}NAN_SETTER(_VkBufferMemoryBarrier::Setsize) {
  _VkBufferMemoryBarrier *self = Nan::ObjectWrap::Unwrap<_VkBufferMemoryBarrier>(info.This());
  if (value->IsNumber()) {
    self->instance.size = static_cast<uint64_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkBufferMemoryBarrier.size'");
  }
}