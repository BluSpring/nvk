/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY node-vulkan v0.0.8
 */
#include "utils.h"
#include "index.h"
#include "VkBufferImageCopy.h"

Nan::Persistent<v8::FunctionTemplate> _VkBufferImageCopy::constructor;

_VkBufferImageCopy::_VkBufferImageCopy() {
  
  
}

_VkBufferImageCopy::~_VkBufferImageCopy() {
  //printf("VkBufferImageCopy deconstructed!!\n");
  
  
  
  
  
  
  
}

void _VkBufferImageCopy::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkBufferImageCopy::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkBufferImageCopy").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("bufferOffset").ToLocalChecked(), GetbufferOffset, SetbufferOffset, ctor);
  SetPrototypeAccessor(proto, Nan::New("bufferRowLength").ToLocalChecked(), GetbufferRowLength, SetbufferRowLength, ctor);
  SetPrototypeAccessor(proto, Nan::New("bufferImageHeight").ToLocalChecked(), GetbufferImageHeight, SetbufferImageHeight, ctor);
  SetPrototypeAccessor(proto, Nan::New("imageSubresource").ToLocalChecked(), GetimageSubresource, SetimageSubresource, ctor);
  SetPrototypeAccessor(proto, Nan::New("imageOffset").ToLocalChecked(), GetimageOffset, SetimageOffset, ctor);
  SetPrototypeAccessor(proto, Nan::New("imageExtent").ToLocalChecked(), GetimageExtent, SetimageExtent, ctor);
  Nan::Set(target, Nan::New("VkBufferImageCopy").ToLocalChecked(), ctor->GetFunction());
}

bool _VkBufferImageCopy::flush() {
  _VkBufferImageCopy *self = this;
  if (!(self->imageSubresource.IsEmpty())) {
    v8::Local<v8::Value> value = Nan::New(self->imageSubresource);
    
    _VkImageSubresourceLayers* result = Nan::ObjectWrap::Unwrap<_VkImageSubresourceLayers>(Nan::To<v8::Object>(value).ToLocalChecked());
    if (!result->flush()) return false;
    self->instance.imageSubresource = result->instance;
  }if (!(self->imageOffset.IsEmpty())) {
    v8::Local<v8::Value> value = Nan::New(self->imageOffset);
    
    _VkOffset3D* result = Nan::ObjectWrap::Unwrap<_VkOffset3D>(Nan::To<v8::Object>(value).ToLocalChecked());
    if (!result->flush()) return false;
    self->instance.imageOffset = result->instance;
  }if (!(self->imageExtent.IsEmpty())) {
    v8::Local<v8::Value> value = Nan::New(self->imageExtent);
    
    _VkExtent3D* result = Nan::ObjectWrap::Unwrap<_VkExtent3D>(Nan::To<v8::Object>(value).ToLocalChecked());
    if (!result->flush()) return false;
    self->instance.imageExtent = result->instance;
  }
  return true;
}

NAN_METHOD(_VkBufferImageCopy::New) {
  if (info.IsConstructCall()) {
    _VkBufferImageCopy* self = new _VkBufferImageCopy();
    self->Wrap(info.Holder());
    
    if (info[0]->IsObject()) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(info[0]).ToLocalChecked();
      v8::Local<v8::String> sAccess0 = Nan::New("bufferOffset").ToLocalChecked();
      v8::Local<v8::String> sAccess1 = Nan::New("bufferRowLength").ToLocalChecked();
      v8::Local<v8::String> sAccess2 = Nan::New("bufferImageHeight").ToLocalChecked();
      v8::Local<v8::String> sAccess3 = Nan::New("imageSubresource").ToLocalChecked();
      v8::Local<v8::String> sAccess4 = Nan::New("imageOffset").ToLocalChecked();
      v8::Local<v8::String> sAccess5 = Nan::New("imageExtent").ToLocalChecked();
      if (obj->Has(sAccess0)) info.This()->Set(sAccess0, obj->Get(sAccess0));
      if (obj->Has(sAccess1)) info.This()->Set(sAccess1, obj->Get(sAccess1));
      if (obj->Has(sAccess2)) info.This()->Set(sAccess2, obj->Get(sAccess2));
      if (obj->Has(sAccess3)) info.This()->Set(sAccess3, obj->Get(sAccess3));
      if (obj->Has(sAccess4)) info.This()->Set(sAccess4, obj->Get(sAccess4));
      if (obj->Has(sAccess5)) info.This()->Set(sAccess5, obj->Get(sAccess5));
      
    }
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkBufferImageCopy constructor cannot be invoked without 'new'");
  }
};

// bufferOffset
NAN_GETTER(_VkBufferImageCopy::GetbufferOffset) {
  _VkBufferImageCopy *self = Nan::ObjectWrap::Unwrap<_VkBufferImageCopy>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.bufferOffset));
}NAN_SETTER(_VkBufferImageCopy::SetbufferOffset) {
  _VkBufferImageCopy *self = Nan::ObjectWrap::Unwrap<_VkBufferImageCopy>(info.This());
  if (value->IsNumber()) {
    self->instance.bufferOffset = static_cast<uint64_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkBufferImageCopy.bufferOffset' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// bufferRowLength
NAN_GETTER(_VkBufferImageCopy::GetbufferRowLength) {
  _VkBufferImageCopy *self = Nan::ObjectWrap::Unwrap<_VkBufferImageCopy>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.bufferRowLength));
}NAN_SETTER(_VkBufferImageCopy::SetbufferRowLength) {
  _VkBufferImageCopy *self = Nan::ObjectWrap::Unwrap<_VkBufferImageCopy>(info.This());
  if (value->IsNumber()) {
    self->instance.bufferRowLength = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkBufferImageCopy.bufferRowLength' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// bufferImageHeight
NAN_GETTER(_VkBufferImageCopy::GetbufferImageHeight) {
  _VkBufferImageCopy *self = Nan::ObjectWrap::Unwrap<_VkBufferImageCopy>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.bufferImageHeight));
}NAN_SETTER(_VkBufferImageCopy::SetbufferImageHeight) {
  _VkBufferImageCopy *self = Nan::ObjectWrap::Unwrap<_VkBufferImageCopy>(info.This());
  if (value->IsNumber()) {
    self->instance.bufferImageHeight = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkBufferImageCopy.bufferImageHeight' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// imageSubresource
NAN_GETTER(_VkBufferImageCopy::GetimageSubresource) {
  _VkBufferImageCopy *self = Nan::ObjectWrap::Unwrap<_VkBufferImageCopy>(info.This());
  if (self->imageSubresource.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->imageSubresource);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkBufferImageCopy::SetimageSubresource) {
  _VkBufferImageCopy *self = Nan::ObjectWrap::Unwrap<_VkBufferImageCopy>(info.This());
  // js
  if (!value->IsNull()) {
    v8::Local<v8::Object> obj = Nan::To<v8::Object>(value).ToLocalChecked();
    if (Nan::New(_VkImageSubresourceLayers::constructor)->HasInstance(obj)) {
      self->imageSubresource.Reset<v8::Object>(value.As<v8::Object>());
      _VkImageSubresourceLayers* inst = Nan::ObjectWrap::Unwrap<_VkImageSubresourceLayers>(obj);
      inst->flush();
      self->instance.imageSubresource = inst->instance;
    } else {
      
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkImageSubresourceLayers]' for 'VkBufferImageCopy.imageSubresource' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
      return;
    }
  } else if (value->IsNull()) {
    self->imageSubresource.Reset();
    memset(&self->instance.imageSubresource, 0, sizeof(VkImageSubresourceLayers));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkImageSubresourceLayers]' for 'VkBufferImageCopy.imageSubresource' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// imageOffset
NAN_GETTER(_VkBufferImageCopy::GetimageOffset) {
  _VkBufferImageCopy *self = Nan::ObjectWrap::Unwrap<_VkBufferImageCopy>(info.This());
  if (self->imageOffset.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->imageOffset);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkBufferImageCopy::SetimageOffset) {
  _VkBufferImageCopy *self = Nan::ObjectWrap::Unwrap<_VkBufferImageCopy>(info.This());
  // js
  if (!value->IsNull()) {
    v8::Local<v8::Object> obj = Nan::To<v8::Object>(value).ToLocalChecked();
    if (Nan::New(_VkOffset3D::constructor)->HasInstance(obj)) {
      self->imageOffset.Reset<v8::Object>(value.As<v8::Object>());
      _VkOffset3D* inst = Nan::ObjectWrap::Unwrap<_VkOffset3D>(obj);
      inst->flush();
      self->instance.imageOffset = inst->instance;
    } else {
      
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkOffset3D]' for 'VkBufferImageCopy.imageOffset' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
      return;
    }
  } else if (value->IsNull()) {
    self->imageOffset.Reset();
    memset(&self->instance.imageOffset, 0, sizeof(VkOffset3D));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkOffset3D]' for 'VkBufferImageCopy.imageOffset' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// imageExtent
NAN_GETTER(_VkBufferImageCopy::GetimageExtent) {
  _VkBufferImageCopy *self = Nan::ObjectWrap::Unwrap<_VkBufferImageCopy>(info.This());
  if (self->imageExtent.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->imageExtent);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkBufferImageCopy::SetimageExtent) {
  _VkBufferImageCopy *self = Nan::ObjectWrap::Unwrap<_VkBufferImageCopy>(info.This());
  // js
  if (!value->IsNull()) {
    v8::Local<v8::Object> obj = Nan::To<v8::Object>(value).ToLocalChecked();
    if (Nan::New(_VkExtent3D::constructor)->HasInstance(obj)) {
      self->imageExtent.Reset<v8::Object>(value.As<v8::Object>());
      _VkExtent3D* inst = Nan::ObjectWrap::Unwrap<_VkExtent3D>(obj);
      inst->flush();
      self->instance.imageExtent = inst->instance;
    } else {
      
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkExtent3D]' for 'VkBufferImageCopy.imageExtent' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
      return;
    }
  } else if (value->IsNull()) {
    self->imageExtent.Reset();
    memset(&self->instance.imageExtent, 0, sizeof(VkExtent3D));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkExtent3D]' for 'VkBufferImageCopy.imageExtent' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}