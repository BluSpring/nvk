/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY nvk v0.1.2
 */
#include "utils.h"
#include "index.h"
#include "VkAccelerationStructureCreateInfoNVX.h"

Nan::Persistent<v8::FunctionTemplate> _VkAccelerationStructureCreateInfoNVX::constructor;

_VkAccelerationStructureCreateInfoNVX::_VkAccelerationStructureCreateInfoNVX() {
  instance.sType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NVX;
  vpGeometries = new std::vector<VkGeometryNVX>;
  
}

_VkAccelerationStructureCreateInfoNVX::~_VkAccelerationStructureCreateInfoNVX() {
  //printf("VkAccelerationStructureCreateInfoNVX deconstructed!!\n");
  
  
  
  
  
  
  
  vpGeometries->clear();
  delete vpGeometries;
  
  pGeometries.Reset();
  
}

void _VkAccelerationStructureCreateInfoNVX::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkAccelerationStructureCreateInfoNVX::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkAccelerationStructureCreateInfoNVX").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("sType").ToLocalChecked(), GetsType, SetsType, ctor);
  SetPrototypeAccessor(proto, Nan::New("type").ToLocalChecked(), Gettype, Settype, ctor);
  SetPrototypeAccessor(proto, Nan::New("flags").ToLocalChecked(), Getflags, Setflags, ctor);
  SetPrototypeAccessor(proto, Nan::New("compactedSize").ToLocalChecked(), GetcompactedSize, SetcompactedSize, ctor);
  SetPrototypeAccessor(proto, Nan::New("instanceCount").ToLocalChecked(), GetinstanceCount, SetinstanceCount, ctor);
  SetPrototypeAccessor(proto, Nan::New("geometryCount").ToLocalChecked(), GetgeometryCount, SetgeometryCount, ctor);
  SetPrototypeAccessor(proto, Nan::New("pGeometries").ToLocalChecked(), GetpGeometries, SetpGeometries, ctor);
  Nan::Set(target, Nan::New("VkAccelerationStructureCreateInfoNVX").ToLocalChecked(), ctor->GetFunction());
}

bool _VkAccelerationStructureCreateInfoNVX::flush() {
  _VkAccelerationStructureCreateInfoNVX *self = this;
  if (!(self->pGeometries.IsEmpty())) {
    v8::Local<v8::Value> value = Nan::New(self->pGeometries);
    
    v8::Local<v8::Array> array = v8::Local<v8::Array>::Cast(value);
    // validate length
    if (array->Length() != self->instance.geometryCount) {
      Nan::ThrowRangeError("Invalid array length, expected array length of 'geometryCount' for 'VkAccelerationStructureCreateInfoNVX.pGeometries'");
      return false;
    }
    std::vector<VkGeometryNVX>* data = self->vpGeometries;
    data->clear();
    for (unsigned int ii = 0; ii < array->Length(); ++ii) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(Nan::Get(array, ii).ToLocalChecked()).ToLocalChecked();
      if (!(Nan::New(_VkGeometryNVX::constructor)->HasInstance(obj))) {
        
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkGeometryNVX]' for 'VkAccelerationStructureCreateInfoNVX.pGeometries' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
        return false;
      }
      _VkGeometryNVX* result = Nan::ObjectWrap::Unwrap<_VkGeometryNVX>(obj);
      if (!result->flush()) return false;
      data->push_back(result->instance);
    };
    self->instance.pGeometries = data->data();
  }
  return true;
}

NAN_METHOD(_VkAccelerationStructureCreateInfoNVX::New) {
  if (info.IsConstructCall()) {
    _VkAccelerationStructureCreateInfoNVX* self = new _VkAccelerationStructureCreateInfoNVX();
    self->Wrap(info.Holder());
    
    if (info[0]->IsObject()) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(info[0]).ToLocalChecked();
      v8::Local<v8::String> sAccess0 = Nan::New("sType").ToLocalChecked();
      v8::Local<v8::String> sAccess2 = Nan::New("type").ToLocalChecked();
      v8::Local<v8::String> sAccess3 = Nan::New("flags").ToLocalChecked();
      v8::Local<v8::String> sAccess4 = Nan::New("compactedSize").ToLocalChecked();
      v8::Local<v8::String> sAccess5 = Nan::New("instanceCount").ToLocalChecked();
      v8::Local<v8::String> sAccess6 = Nan::New("geometryCount").ToLocalChecked();
      v8::Local<v8::String> sAccess7 = Nan::New("pGeometries").ToLocalChecked();
      if (obj->Has(sAccess0)) info.This()->Set(sAccess0, obj->Get(sAccess0));
      if (obj->Has(sAccess2)) info.This()->Set(sAccess2, obj->Get(sAccess2));
      if (obj->Has(sAccess3)) info.This()->Set(sAccess3, obj->Get(sAccess3));
      if (obj->Has(sAccess4)) info.This()->Set(sAccess4, obj->Get(sAccess4));
      if (obj->Has(sAccess5)) info.This()->Set(sAccess5, obj->Get(sAccess5));
      if (obj->Has(sAccess6)) info.This()->Set(sAccess6, obj->Get(sAccess6));
      if (obj->Has(sAccess7)) info.This()->Set(sAccess7, obj->Get(sAccess7));
      
    }
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkAccelerationStructureCreateInfoNVX constructor cannot be invoked without 'new'");
  }
};

// sType
NAN_GETTER(_VkAccelerationStructureCreateInfoNVX::GetsType) {
  _VkAccelerationStructureCreateInfoNVX *self = Nan::ObjectWrap::Unwrap<_VkAccelerationStructureCreateInfoNVX>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sType));
}NAN_SETTER(_VkAccelerationStructureCreateInfoNVX::SetsType) {
  _VkAccelerationStructureCreateInfoNVX *self = Nan::ObjectWrap::Unwrap<_VkAccelerationStructureCreateInfoNVX>(info.This());
  if (value->IsNumber()) {
    self->instance.sType = static_cast<VkStructureType>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkAccelerationStructureCreateInfoNVX.sType' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// type
NAN_GETTER(_VkAccelerationStructureCreateInfoNVX::Gettype) {
  _VkAccelerationStructureCreateInfoNVX *self = Nan::ObjectWrap::Unwrap<_VkAccelerationStructureCreateInfoNVX>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.type));
}NAN_SETTER(_VkAccelerationStructureCreateInfoNVX::Settype) {
  _VkAccelerationStructureCreateInfoNVX *self = Nan::ObjectWrap::Unwrap<_VkAccelerationStructureCreateInfoNVX>(info.This());
  if (value->IsNumber()) {
    self->instance.type = static_cast<VkAccelerationStructureTypeNVX>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkAccelerationStructureCreateInfoNVX.type' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// flags
NAN_GETTER(_VkAccelerationStructureCreateInfoNVX::Getflags) {
  _VkAccelerationStructureCreateInfoNVX *self = Nan::ObjectWrap::Unwrap<_VkAccelerationStructureCreateInfoNVX>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.flags));
}NAN_SETTER(_VkAccelerationStructureCreateInfoNVX::Setflags) {
  _VkAccelerationStructureCreateInfoNVX *self = Nan::ObjectWrap::Unwrap<_VkAccelerationStructureCreateInfoNVX>(info.This());
  if (value->IsNumber()) {
    self->instance.flags = static_cast<VkBuildAccelerationStructureFlagsNVX>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkAccelerationStructureCreateInfoNVX.flags' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// compactedSize
NAN_GETTER(_VkAccelerationStructureCreateInfoNVX::GetcompactedSize) {
  _VkAccelerationStructureCreateInfoNVX *self = Nan::ObjectWrap::Unwrap<_VkAccelerationStructureCreateInfoNVX>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.compactedSize));
}NAN_SETTER(_VkAccelerationStructureCreateInfoNVX::SetcompactedSize) {
  _VkAccelerationStructureCreateInfoNVX *self = Nan::ObjectWrap::Unwrap<_VkAccelerationStructureCreateInfoNVX>(info.This());
  if (value->IsNumber()) {
    self->instance.compactedSize = static_cast<uint64_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkAccelerationStructureCreateInfoNVX.compactedSize' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// instanceCount
NAN_GETTER(_VkAccelerationStructureCreateInfoNVX::GetinstanceCount) {
  _VkAccelerationStructureCreateInfoNVX *self = Nan::ObjectWrap::Unwrap<_VkAccelerationStructureCreateInfoNVX>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.instanceCount));
}NAN_SETTER(_VkAccelerationStructureCreateInfoNVX::SetinstanceCount) {
  _VkAccelerationStructureCreateInfoNVX *self = Nan::ObjectWrap::Unwrap<_VkAccelerationStructureCreateInfoNVX>(info.This());
  if (value->IsNumber()) {
    self->instance.instanceCount = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkAccelerationStructureCreateInfoNVX.instanceCount' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// geometryCount
NAN_GETTER(_VkAccelerationStructureCreateInfoNVX::GetgeometryCount) {
  _VkAccelerationStructureCreateInfoNVX *self = Nan::ObjectWrap::Unwrap<_VkAccelerationStructureCreateInfoNVX>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.geometryCount));
}NAN_SETTER(_VkAccelerationStructureCreateInfoNVX::SetgeometryCount) {
  _VkAccelerationStructureCreateInfoNVX *self = Nan::ObjectWrap::Unwrap<_VkAccelerationStructureCreateInfoNVX>(info.This());
  if (value->IsNumber()) {
    self->instance.geometryCount = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkAccelerationStructureCreateInfoNVX.geometryCount' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// pGeometries
NAN_GETTER(_VkAccelerationStructureCreateInfoNVX::GetpGeometries) {
  _VkAccelerationStructureCreateInfoNVX *self = Nan::ObjectWrap::Unwrap<_VkAccelerationStructureCreateInfoNVX>(info.This());
  if (self->pGeometries.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->pGeometries);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkAccelerationStructureCreateInfoNVX::SetpGeometries) {
  _VkAccelerationStructureCreateInfoNVX *self = Nan::ObjectWrap::Unwrap<_VkAccelerationStructureCreateInfoNVX>(info.This());
  
    // js
    if (value->IsArray()) {
      self->pGeometries.Reset<v8::Array>(value.As<v8::Array>());
    } else if (value->IsNull()) {
      self->pGeometries.Reset();
      self->instance.pGeometries = nullptr;
    } else {
      
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkGeometryNVX]' for 'VkAccelerationStructureCreateInfoNVX.pGeometries' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
      return;
    }
  
  // vulkan
  if (value->IsArray()) {
    
  } else if (value->IsNull()) {
    self->instance.pGeometries = nullptr;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkGeometryNVX]' for 'VkAccelerationStructureCreateInfoNVX.pGeometries' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}