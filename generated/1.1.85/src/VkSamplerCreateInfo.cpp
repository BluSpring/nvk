/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY node-vulkan v0.0.6
 */
#include "utils.h"
#include "index.h"
#include "VkSamplerCreateInfo.h"

Nan::Persistent<v8::FunctionTemplate> _VkSamplerCreateInfo::constructor;

_VkSamplerCreateInfo::_VkSamplerCreateInfo() {
  instance.sType = VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO;
}

_VkSamplerCreateInfo::~_VkSamplerCreateInfo() {
  //printf("VkSamplerCreateInfo deconstructed!!\n");
}

void _VkSamplerCreateInfo::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkSamplerCreateInfo::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkSamplerCreateInfo").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  Nan::SetPrototypeMethod(ctor, "flush", flush);
  
  SetPrototypeAccessor(proto, Nan::New("sType").ToLocalChecked(), GetsType, SetsType, ctor);
  SetPrototypeAccessor(proto, Nan::New("pNext").ToLocalChecked(), GetpNext, SetpNext, ctor);
  SetPrototypeAccessor(proto, Nan::New("flags").ToLocalChecked(), Getflags, Setflags, ctor);
  SetPrototypeAccessor(proto, Nan::New("magFilter").ToLocalChecked(), GetmagFilter, SetmagFilter, ctor);
  SetPrototypeAccessor(proto, Nan::New("minFilter").ToLocalChecked(), GetminFilter, SetminFilter, ctor);
  SetPrototypeAccessor(proto, Nan::New("mipmapMode").ToLocalChecked(), GetmipmapMode, SetmipmapMode, ctor);
  SetPrototypeAccessor(proto, Nan::New("addressModeU").ToLocalChecked(), GetaddressModeU, SetaddressModeU, ctor);
  SetPrototypeAccessor(proto, Nan::New("addressModeV").ToLocalChecked(), GetaddressModeV, SetaddressModeV, ctor);
  SetPrototypeAccessor(proto, Nan::New("addressModeW").ToLocalChecked(), GetaddressModeW, SetaddressModeW, ctor);
  SetPrototypeAccessor(proto, Nan::New("mipLodBias").ToLocalChecked(), GetmipLodBias, SetmipLodBias, ctor);
  SetPrototypeAccessor(proto, Nan::New("anisotropyEnable").ToLocalChecked(), GetanisotropyEnable, SetanisotropyEnable, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxAnisotropy").ToLocalChecked(), GetmaxAnisotropy, SetmaxAnisotropy, ctor);
  SetPrototypeAccessor(proto, Nan::New("compareEnable").ToLocalChecked(), GetcompareEnable, SetcompareEnable, ctor);
  SetPrototypeAccessor(proto, Nan::New("compareOp").ToLocalChecked(), GetcompareOp, SetcompareOp, ctor);
  SetPrototypeAccessor(proto, Nan::New("minLod").ToLocalChecked(), GetminLod, SetminLod, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxLod").ToLocalChecked(), GetmaxLod, SetmaxLod, ctor);
  SetPrototypeAccessor(proto, Nan::New("borderColor").ToLocalChecked(), GetborderColor, SetborderColor, ctor);
  SetPrototypeAccessor(proto, Nan::New("unnormalizedCoordinates").ToLocalChecked(), GetunnormalizedCoordinates, SetunnormalizedCoordinates, ctor);
  Nan::Set(target, Nan::New("VkSamplerCreateInfo").ToLocalChecked(), ctor->GetFunction());
}

NAN_METHOD(_VkSamplerCreateInfo::New) {
  if (info.IsConstructCall()) {
    _VkSamplerCreateInfo* self = new _VkSamplerCreateInfo();
    self->Wrap(info.Holder());
    
    if (info[0]->IsObject()) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(info[0]).ToLocalChecked();
      if (obj->Has(self->sAccess0)) info.This()->Set(self->sAccess0, obj->Get(self->sAccess0));
      if (obj->Has(self->sAccess1)) info.This()->Set(self->sAccess1, obj->Get(self->sAccess1));
      if (obj->Has(self->sAccess2)) info.This()->Set(self->sAccess2, obj->Get(self->sAccess2));
      if (obj->Has(self->sAccess3)) info.This()->Set(self->sAccess3, obj->Get(self->sAccess3));
      if (obj->Has(self->sAccess4)) info.This()->Set(self->sAccess4, obj->Get(self->sAccess4));
      if (obj->Has(self->sAccess5)) info.This()->Set(self->sAccess5, obj->Get(self->sAccess5));
      if (obj->Has(self->sAccess6)) info.This()->Set(self->sAccess6, obj->Get(self->sAccess6));
      if (obj->Has(self->sAccess7)) info.This()->Set(self->sAccess7, obj->Get(self->sAccess7));
      if (obj->Has(self->sAccess8)) info.This()->Set(self->sAccess8, obj->Get(self->sAccess8));
      if (obj->Has(self->sAccess9)) info.This()->Set(self->sAccess9, obj->Get(self->sAccess9));
      if (obj->Has(self->sAccess10)) info.This()->Set(self->sAccess10, obj->Get(self->sAccess10));
      if (obj->Has(self->sAccess11)) info.This()->Set(self->sAccess11, obj->Get(self->sAccess11));
      if (obj->Has(self->sAccess12)) info.This()->Set(self->sAccess12, obj->Get(self->sAccess12));
      if (obj->Has(self->sAccess13)) info.This()->Set(self->sAccess13, obj->Get(self->sAccess13));
      if (obj->Has(self->sAccess14)) info.This()->Set(self->sAccess14, obj->Get(self->sAccess14));
      if (obj->Has(self->sAccess15)) info.This()->Set(self->sAccess15, obj->Get(self->sAccess15));
      if (obj->Has(self->sAccess16)) info.This()->Set(self->sAccess16, obj->Get(self->sAccess16));
      if (obj->Has(self->sAccess17)) info.This()->Set(self->sAccess17, obj->Get(self->sAccess17));
      
    }
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkSamplerCreateInfo constructor cannot be invoked without 'new'");
  }
};

NAN_METHOD(_VkSamplerCreateInfo::flush) {
  _VkSamplerCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkSamplerCreateInfo>(info.This());
  
}

// sType
NAN_GETTER(_VkSamplerCreateInfo::GetsType) {
  _VkSamplerCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkSamplerCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sType));
}NAN_SETTER(_VkSamplerCreateInfo::SetsType) {
  _VkSamplerCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkSamplerCreateInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.sType = static_cast<VkStructureType>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkSamplerCreateInfo.sType'");
  }
}// pNext
NAN_GETTER(_VkSamplerCreateInfo::GetpNext) {
  _VkSamplerCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkSamplerCreateInfo>(info.This());
}NAN_SETTER(_VkSamplerCreateInfo::SetpNext) {
  _VkSamplerCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkSamplerCreateInfo>(info.This());
}// flags
NAN_GETTER(_VkSamplerCreateInfo::Getflags) {
  _VkSamplerCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkSamplerCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.flags));
}NAN_SETTER(_VkSamplerCreateInfo::Setflags) {
  _VkSamplerCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkSamplerCreateInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.flags = static_cast<VkSamplerCreateFlags>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkSamplerCreateInfo.flags'");
  }
}// magFilter
NAN_GETTER(_VkSamplerCreateInfo::GetmagFilter) {
  _VkSamplerCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkSamplerCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.magFilter));
}NAN_SETTER(_VkSamplerCreateInfo::SetmagFilter) {
  _VkSamplerCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkSamplerCreateInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.magFilter = static_cast<VkFilter>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkSamplerCreateInfo.magFilter'");
  }
}// minFilter
NAN_GETTER(_VkSamplerCreateInfo::GetminFilter) {
  _VkSamplerCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkSamplerCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.minFilter));
}NAN_SETTER(_VkSamplerCreateInfo::SetminFilter) {
  _VkSamplerCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkSamplerCreateInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.minFilter = static_cast<VkFilter>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkSamplerCreateInfo.minFilter'");
  }
}// mipmapMode
NAN_GETTER(_VkSamplerCreateInfo::GetmipmapMode) {
  _VkSamplerCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkSamplerCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.mipmapMode));
}NAN_SETTER(_VkSamplerCreateInfo::SetmipmapMode) {
  _VkSamplerCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkSamplerCreateInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.mipmapMode = static_cast<VkSamplerMipmapMode>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkSamplerCreateInfo.mipmapMode'");
  }
}// addressModeU
NAN_GETTER(_VkSamplerCreateInfo::GetaddressModeU) {
  _VkSamplerCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkSamplerCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.addressModeU));
}NAN_SETTER(_VkSamplerCreateInfo::SetaddressModeU) {
  _VkSamplerCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkSamplerCreateInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.addressModeU = static_cast<VkSamplerAddressMode>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkSamplerCreateInfo.addressModeU'");
  }
}// addressModeV
NAN_GETTER(_VkSamplerCreateInfo::GetaddressModeV) {
  _VkSamplerCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkSamplerCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.addressModeV));
}NAN_SETTER(_VkSamplerCreateInfo::SetaddressModeV) {
  _VkSamplerCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkSamplerCreateInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.addressModeV = static_cast<VkSamplerAddressMode>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkSamplerCreateInfo.addressModeV'");
  }
}// addressModeW
NAN_GETTER(_VkSamplerCreateInfo::GetaddressModeW) {
  _VkSamplerCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkSamplerCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.addressModeW));
}NAN_SETTER(_VkSamplerCreateInfo::SetaddressModeW) {
  _VkSamplerCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkSamplerCreateInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.addressModeW = static_cast<VkSamplerAddressMode>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkSamplerCreateInfo.addressModeW'");
  }
}// mipLodBias
NAN_GETTER(_VkSamplerCreateInfo::GetmipLodBias) {
  _VkSamplerCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkSamplerCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.mipLodBias));
}NAN_SETTER(_VkSamplerCreateInfo::SetmipLodBias) {
  _VkSamplerCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkSamplerCreateInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.mipLodBias = static_cast<float>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkSamplerCreateInfo.mipLodBias'");
  }
}// anisotropyEnable
NAN_GETTER(_VkSamplerCreateInfo::GetanisotropyEnable) {
  _VkSamplerCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkSamplerCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.anisotropyEnable));
}NAN_SETTER(_VkSamplerCreateInfo::SetanisotropyEnable) {
  _VkSamplerCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkSamplerCreateInfo>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.anisotropyEnable = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkSamplerCreateInfo.anisotropyEnable'");
  }
}// maxAnisotropy
NAN_GETTER(_VkSamplerCreateInfo::GetmaxAnisotropy) {
  _VkSamplerCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkSamplerCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxAnisotropy));
}NAN_SETTER(_VkSamplerCreateInfo::SetmaxAnisotropy) {
  _VkSamplerCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkSamplerCreateInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.maxAnisotropy = static_cast<float>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkSamplerCreateInfo.maxAnisotropy'");
  }
}// compareEnable
NAN_GETTER(_VkSamplerCreateInfo::GetcompareEnable) {
  _VkSamplerCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkSamplerCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.compareEnable));
}NAN_SETTER(_VkSamplerCreateInfo::SetcompareEnable) {
  _VkSamplerCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkSamplerCreateInfo>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.compareEnable = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkSamplerCreateInfo.compareEnable'");
  }
}// compareOp
NAN_GETTER(_VkSamplerCreateInfo::GetcompareOp) {
  _VkSamplerCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkSamplerCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.compareOp));
}NAN_SETTER(_VkSamplerCreateInfo::SetcompareOp) {
  _VkSamplerCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkSamplerCreateInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.compareOp = static_cast<VkCompareOp>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkSamplerCreateInfo.compareOp'");
  }
}// minLod
NAN_GETTER(_VkSamplerCreateInfo::GetminLod) {
  _VkSamplerCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkSamplerCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.minLod));
}NAN_SETTER(_VkSamplerCreateInfo::SetminLod) {
  _VkSamplerCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkSamplerCreateInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.minLod = static_cast<float>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkSamplerCreateInfo.minLod'");
  }
}// maxLod
NAN_GETTER(_VkSamplerCreateInfo::GetmaxLod) {
  _VkSamplerCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkSamplerCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxLod));
}NAN_SETTER(_VkSamplerCreateInfo::SetmaxLod) {
  _VkSamplerCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkSamplerCreateInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.maxLod = static_cast<float>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkSamplerCreateInfo.maxLod'");
  }
}// borderColor
NAN_GETTER(_VkSamplerCreateInfo::GetborderColor) {
  _VkSamplerCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkSamplerCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.borderColor));
}NAN_SETTER(_VkSamplerCreateInfo::SetborderColor) {
  _VkSamplerCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkSamplerCreateInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.borderColor = static_cast<VkBorderColor>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkSamplerCreateInfo.borderColor'");
  }
}// unnormalizedCoordinates
NAN_GETTER(_VkSamplerCreateInfo::GetunnormalizedCoordinates) {
  _VkSamplerCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkSamplerCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.unnormalizedCoordinates));
}NAN_SETTER(_VkSamplerCreateInfo::SetunnormalizedCoordinates) {
  _VkSamplerCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkSamplerCreateInfo>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.unnormalizedCoordinates = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkSamplerCreateInfo.unnormalizedCoordinates'");
  }
}