/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY node-vulkan v0.0.9
 */
#include "utils.h"
#include "index.h"
#include "VkShaderResourceUsageAMD.h"

Nan::Persistent<v8::FunctionTemplate> _VkShaderResourceUsageAMD::constructor;

_VkShaderResourceUsageAMD::_VkShaderResourceUsageAMD() {
  
  
}

_VkShaderResourceUsageAMD::~_VkShaderResourceUsageAMD() {
  //printf("VkShaderResourceUsageAMD deconstructed!!\n");
  
  
  
  
  
  
}

void _VkShaderResourceUsageAMD::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkShaderResourceUsageAMD::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkShaderResourceUsageAMD").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("numUsedVgprs").ToLocalChecked(), GetnumUsedVgprs, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("numUsedSgprs").ToLocalChecked(), GetnumUsedSgprs, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("ldsSizePerLocalWorkGroup").ToLocalChecked(), GetldsSizePerLocalWorkGroup, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("ldsUsageSizeInBytes").ToLocalChecked(), GetldsUsageSizeInBytes, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("scratchMemUsageInBytes").ToLocalChecked(), GetscratchMemUsageInBytes, nullptr, ctor);
  Nan::Set(target, Nan::New("VkShaderResourceUsageAMD").ToLocalChecked(), ctor->GetFunction());
}

bool _VkShaderResourceUsageAMD::flush() {
  _VkShaderResourceUsageAMD *self = this;
  
  return true;
}

NAN_METHOD(_VkShaderResourceUsageAMD::New) {
  if (info.IsConstructCall()) {
    _VkShaderResourceUsageAMD* self = new _VkShaderResourceUsageAMD();
    self->Wrap(info.Holder());
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkShaderResourceUsageAMD constructor cannot be invoked without 'new'");
  }
};

// numUsedVgprs
NAN_GETTER(_VkShaderResourceUsageAMD::GetnumUsedVgprs) {
  _VkShaderResourceUsageAMD *self = Nan::ObjectWrap::Unwrap<_VkShaderResourceUsageAMD>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.numUsedVgprs));
}// numUsedSgprs
NAN_GETTER(_VkShaderResourceUsageAMD::GetnumUsedSgprs) {
  _VkShaderResourceUsageAMD *self = Nan::ObjectWrap::Unwrap<_VkShaderResourceUsageAMD>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.numUsedSgprs));
}// ldsSizePerLocalWorkGroup
NAN_GETTER(_VkShaderResourceUsageAMD::GetldsSizePerLocalWorkGroup) {
  _VkShaderResourceUsageAMD *self = Nan::ObjectWrap::Unwrap<_VkShaderResourceUsageAMD>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.ldsSizePerLocalWorkGroup));
}// ldsUsageSizeInBytes
NAN_GETTER(_VkShaderResourceUsageAMD::GetldsUsageSizeInBytes) {
  _VkShaderResourceUsageAMD *self = Nan::ObjectWrap::Unwrap<_VkShaderResourceUsageAMD>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.ldsUsageSizeInBytes));
}// scratchMemUsageInBytes
NAN_GETTER(_VkShaderResourceUsageAMD::GetscratchMemUsageInBytes) {
  _VkShaderResourceUsageAMD *self = Nan::ObjectWrap::Unwrap<_VkShaderResourceUsageAMD>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.scratchMemUsageInBytes));
}