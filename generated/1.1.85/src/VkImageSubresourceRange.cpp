/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY node-vulkan v0.0.7
 */
#include "utils.h"
#include "index.h"
#include "VkImageSubresourceRange.h"

Nan::Persistent<v8::FunctionTemplate> _VkImageSubresourceRange::constructor;

_VkImageSubresourceRange::_VkImageSubresourceRange() {
  
}

_VkImageSubresourceRange::~_VkImageSubresourceRange() {
  //printf("VkImageSubresourceRange deconstructed!!\n");
}

void _VkImageSubresourceRange::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkImageSubresourceRange::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkImageSubresourceRange").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  Nan::SetPrototypeMethod(ctor, "flush", flush);
  
  SetPrototypeAccessor(proto, Nan::New("aspectMask").ToLocalChecked(), GetaspectMask, SetaspectMask, ctor);
  SetPrototypeAccessor(proto, Nan::New("baseMipLevel").ToLocalChecked(), GetbaseMipLevel, SetbaseMipLevel, ctor);
  SetPrototypeAccessor(proto, Nan::New("levelCount").ToLocalChecked(), GetlevelCount, SetlevelCount, ctor);
  SetPrototypeAccessor(proto, Nan::New("baseArrayLayer").ToLocalChecked(), GetbaseArrayLayer, SetbaseArrayLayer, ctor);
  SetPrototypeAccessor(proto, Nan::New("layerCount").ToLocalChecked(), GetlayerCount, SetlayerCount, ctor);
  Nan::Set(target, Nan::New("VkImageSubresourceRange").ToLocalChecked(), ctor->GetFunction());
}

NAN_METHOD(_VkImageSubresourceRange::New) {
  if (info.IsConstructCall()) {
    _VkImageSubresourceRange* self = new _VkImageSubresourceRange();
    self->Wrap(info.Holder());
    
    if (info[0]->IsObject()) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(info[0]).ToLocalChecked();
      if (obj->Has(self->sAccess0)) info.This()->Set(self->sAccess0, obj->Get(self->sAccess0));
      if (obj->Has(self->sAccess1)) info.This()->Set(self->sAccess1, obj->Get(self->sAccess1));
      if (obj->Has(self->sAccess2)) info.This()->Set(self->sAccess2, obj->Get(self->sAccess2));
      if (obj->Has(self->sAccess3)) info.This()->Set(self->sAccess3, obj->Get(self->sAccess3));
      if (obj->Has(self->sAccess4)) info.This()->Set(self->sAccess4, obj->Get(self->sAccess4));
      
    }
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkImageSubresourceRange constructor cannot be invoked without 'new'");
  }
};

NAN_METHOD(_VkImageSubresourceRange::flush) {
  _VkImageSubresourceRange *self = Nan::ObjectWrap::Unwrap<_VkImageSubresourceRange>(info.This());
  
}

// aspectMask
NAN_GETTER(_VkImageSubresourceRange::GetaspectMask) {
  _VkImageSubresourceRange *self = Nan::ObjectWrap::Unwrap<_VkImageSubresourceRange>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.aspectMask));
}NAN_SETTER(_VkImageSubresourceRange::SetaspectMask) {
  _VkImageSubresourceRange *self = Nan::ObjectWrap::Unwrap<_VkImageSubresourceRange>(info.This());
  if (value->IsNumber()) {
    self->instance.aspectMask = static_cast<VkImageAspectFlags>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkImageSubresourceRange.aspectMask'");
  }
}// baseMipLevel
NAN_GETTER(_VkImageSubresourceRange::GetbaseMipLevel) {
  _VkImageSubresourceRange *self = Nan::ObjectWrap::Unwrap<_VkImageSubresourceRange>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.baseMipLevel));
}NAN_SETTER(_VkImageSubresourceRange::SetbaseMipLevel) {
  _VkImageSubresourceRange *self = Nan::ObjectWrap::Unwrap<_VkImageSubresourceRange>(info.This());
  if (value->IsNumber()) {
    self->instance.baseMipLevel = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkImageSubresourceRange.baseMipLevel'");
  }
}// levelCount
NAN_GETTER(_VkImageSubresourceRange::GetlevelCount) {
  _VkImageSubresourceRange *self = Nan::ObjectWrap::Unwrap<_VkImageSubresourceRange>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.levelCount));
}NAN_SETTER(_VkImageSubresourceRange::SetlevelCount) {
  _VkImageSubresourceRange *self = Nan::ObjectWrap::Unwrap<_VkImageSubresourceRange>(info.This());
  if (value->IsNumber()) {
    self->instance.levelCount = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkImageSubresourceRange.levelCount'");
  }
}// baseArrayLayer
NAN_GETTER(_VkImageSubresourceRange::GetbaseArrayLayer) {
  _VkImageSubresourceRange *self = Nan::ObjectWrap::Unwrap<_VkImageSubresourceRange>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.baseArrayLayer));
}NAN_SETTER(_VkImageSubresourceRange::SetbaseArrayLayer) {
  _VkImageSubresourceRange *self = Nan::ObjectWrap::Unwrap<_VkImageSubresourceRange>(info.This());
  if (value->IsNumber()) {
    self->instance.baseArrayLayer = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkImageSubresourceRange.baseArrayLayer'");
  }
}// layerCount
NAN_GETTER(_VkImageSubresourceRange::GetlayerCount) {
  _VkImageSubresourceRange *self = Nan::ObjectWrap::Unwrap<_VkImageSubresourceRange>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.layerCount));
}NAN_SETTER(_VkImageSubresourceRange::SetlayerCount) {
  _VkImageSubresourceRange *self = Nan::ObjectWrap::Unwrap<_VkImageSubresourceRange>(info.This());
  if (value->IsNumber()) {
    self->instance.layerCount = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkImageSubresourceRange.layerCount'");
  }
}