/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY node-vulkan v0.0.9
 */
#include "utils.h"
#include "index.h"
#include "VkObjectTablePipelineEntryNVX.h"

Nan::Persistent<v8::FunctionTemplate> _VkObjectTablePipelineEntryNVX::constructor;

_VkObjectTablePipelineEntryNVX::_VkObjectTablePipelineEntryNVX() {
  
  
}

_VkObjectTablePipelineEntryNVX::~_VkObjectTablePipelineEntryNVX() {
  //printf("VkObjectTablePipelineEntryNVX deconstructed!!\n");
  
  
  
  
}

void _VkObjectTablePipelineEntryNVX::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkObjectTablePipelineEntryNVX::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkObjectTablePipelineEntryNVX").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("type").ToLocalChecked(), Gettype, Settype, ctor);
  SetPrototypeAccessor(proto, Nan::New("flags").ToLocalChecked(), Getflags, Setflags, ctor);
  SetPrototypeAccessor(proto, Nan::New("pipeline").ToLocalChecked(), Getpipeline, Setpipeline, ctor);
  Nan::Set(target, Nan::New("VkObjectTablePipelineEntryNVX").ToLocalChecked(), ctor->GetFunction());
}

bool _VkObjectTablePipelineEntryNVX::flush() {
  _VkObjectTablePipelineEntryNVX *self = this;
  
  return true;
}

NAN_METHOD(_VkObjectTablePipelineEntryNVX::New) {
  if (info.IsConstructCall()) {
    _VkObjectTablePipelineEntryNVX* self = new _VkObjectTablePipelineEntryNVX();
    self->Wrap(info.Holder());
    
    if (info[0]->IsObject()) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(info[0]).ToLocalChecked();
      v8::Local<v8::String> sAccess0 = Nan::New("type").ToLocalChecked();
      v8::Local<v8::String> sAccess1 = Nan::New("flags").ToLocalChecked();
      v8::Local<v8::String> sAccess2 = Nan::New("pipeline").ToLocalChecked();
      if (obj->Has(sAccess0)) info.This()->Set(sAccess0, obj->Get(sAccess0));
      if (obj->Has(sAccess1)) info.This()->Set(sAccess1, obj->Get(sAccess1));
      if (obj->Has(sAccess2)) info.This()->Set(sAccess2, obj->Get(sAccess2));
      
    }
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkObjectTablePipelineEntryNVX constructor cannot be invoked without 'new'");
  }
};

// type
NAN_GETTER(_VkObjectTablePipelineEntryNVX::Gettype) {
  _VkObjectTablePipelineEntryNVX *self = Nan::ObjectWrap::Unwrap<_VkObjectTablePipelineEntryNVX>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.type));
}NAN_SETTER(_VkObjectTablePipelineEntryNVX::Settype) {
  _VkObjectTablePipelineEntryNVX *self = Nan::ObjectWrap::Unwrap<_VkObjectTablePipelineEntryNVX>(info.This());
  if (value->IsNumber()) {
    self->instance.type = static_cast<VkObjectEntryTypeNVX>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkObjectTablePipelineEntryNVX.type' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// flags
NAN_GETTER(_VkObjectTablePipelineEntryNVX::Getflags) {
  _VkObjectTablePipelineEntryNVX *self = Nan::ObjectWrap::Unwrap<_VkObjectTablePipelineEntryNVX>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.flags));
}NAN_SETTER(_VkObjectTablePipelineEntryNVX::Setflags) {
  _VkObjectTablePipelineEntryNVX *self = Nan::ObjectWrap::Unwrap<_VkObjectTablePipelineEntryNVX>(info.This());
  if (value->IsNumber()) {
    self->instance.flags = static_cast<VkObjectEntryUsageFlagsNVX>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkObjectTablePipelineEntryNVX.flags' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// pipeline
NAN_GETTER(_VkObjectTablePipelineEntryNVX::Getpipeline) {
  _VkObjectTablePipelineEntryNVX *self = Nan::ObjectWrap::Unwrap<_VkObjectTablePipelineEntryNVX>(info.This());
  if (self->pipeline.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->pipeline);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkObjectTablePipelineEntryNVX::Setpipeline) {
  _VkObjectTablePipelineEntryNVX *self = Nan::ObjectWrap::Unwrap<_VkObjectTablePipelineEntryNVX>(info.This());
  // js
  if (!value->IsNull()) {
    v8::Local<v8::Object> obj = Nan::To<v8::Object>(value).ToLocalChecked();
    if (Nan::New(_VkPipeline::constructor)->HasInstance(obj)) {
      self->pipeline.Reset<v8::Object>(value.As<v8::Object>());
      _VkPipeline* inst = Nan::ObjectWrap::Unwrap<_VkPipeline>(obj);
      ;
      self->instance.pipeline = inst->instance;
    } else {
      
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkPipeline]' for 'VkObjectTablePipelineEntryNVX.pipeline' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
      return;
    }
  } else if (value->IsNull()) {
    self->pipeline.Reset();
    self->instance.pipeline = VK_NULL_HANDLE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkPipeline]' for 'VkObjectTablePipelineEntryNVX.pipeline' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}