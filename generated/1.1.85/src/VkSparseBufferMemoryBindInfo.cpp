/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY node-vulkan v0.0.9
 */
#include "utils.h"
#include "index.h"
#include "VkSparseBufferMemoryBindInfo.h"

Nan::Persistent<v8::FunctionTemplate> _VkSparseBufferMemoryBindInfo::constructor;

_VkSparseBufferMemoryBindInfo::_VkSparseBufferMemoryBindInfo() {
  
  vpBinds = new std::vector<VkSparseMemoryBind>;
  
}

_VkSparseBufferMemoryBindInfo::~_VkSparseBufferMemoryBindInfo() {
  //printf("VkSparseBufferMemoryBindInfo deconstructed!!\n");
  
  
  
  vpBinds->clear();
  delete vpBinds;
  
  pBinds.Reset();
  
}

void _VkSparseBufferMemoryBindInfo::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkSparseBufferMemoryBindInfo::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkSparseBufferMemoryBindInfo").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("buffer").ToLocalChecked(), Getbuffer, Setbuffer, ctor);
  SetPrototypeAccessor(proto, Nan::New("bindCount").ToLocalChecked(), GetbindCount, SetbindCount, ctor);
  SetPrototypeAccessor(proto, Nan::New("pBinds").ToLocalChecked(), GetpBinds, SetpBinds, ctor);
  Nan::Set(target, Nan::New("VkSparseBufferMemoryBindInfo").ToLocalChecked(), ctor->GetFunction());
}

bool _VkSparseBufferMemoryBindInfo::flush() {
  _VkSparseBufferMemoryBindInfo *self = this;
  if (!(self->pBinds.IsEmpty())) {
    v8::Local<v8::Value> value = Nan::New(self->pBinds);
    
    v8::Local<v8::Array> array = v8::Local<v8::Array>::Cast(value);
    // validate length
    if (array->Length() != self->instance.bindCount) {
      Nan::ThrowRangeError("Invalid array length, expected array length of 'bindCount' for 'VkSparseBufferMemoryBindInfo.pBinds'");
      return false;
    }
    std::vector<VkSparseMemoryBind>* data = self->vpBinds;
    data->clear();
    for (unsigned int ii = 0; ii < array->Length(); ++ii) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(Nan::Get(array, ii).ToLocalChecked()).ToLocalChecked();
      if (!(Nan::New(_VkSparseMemoryBind::constructor)->HasInstance(obj))) {
        
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkSparseMemoryBind]' for 'VkSparseBufferMemoryBindInfo.pBinds' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
        return false;
      }
      _VkSparseMemoryBind* result = Nan::ObjectWrap::Unwrap<_VkSparseMemoryBind>(obj);
      if (!result->flush()) return false;
      data->push_back(result->instance);
    };
    self->instance.pBinds = data->data();
  }
  return true;
}

NAN_METHOD(_VkSparseBufferMemoryBindInfo::New) {
  if (info.IsConstructCall()) {
    _VkSparseBufferMemoryBindInfo* self = new _VkSparseBufferMemoryBindInfo();
    self->Wrap(info.Holder());
    
    if (info[0]->IsObject()) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(info[0]).ToLocalChecked();
      v8::Local<v8::String> sAccess0 = Nan::New("buffer").ToLocalChecked();
      v8::Local<v8::String> sAccess1 = Nan::New("bindCount").ToLocalChecked();
      v8::Local<v8::String> sAccess2 = Nan::New("pBinds").ToLocalChecked();
      if (obj->Has(sAccess0)) info.This()->Set(sAccess0, obj->Get(sAccess0));
      if (obj->Has(sAccess1)) info.This()->Set(sAccess1, obj->Get(sAccess1));
      if (obj->Has(sAccess2)) info.This()->Set(sAccess2, obj->Get(sAccess2));
      
    }
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkSparseBufferMemoryBindInfo constructor cannot be invoked without 'new'");
  }
};

// buffer
NAN_GETTER(_VkSparseBufferMemoryBindInfo::Getbuffer) {
  _VkSparseBufferMemoryBindInfo *self = Nan::ObjectWrap::Unwrap<_VkSparseBufferMemoryBindInfo>(info.This());
  if (self->buffer.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->buffer);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkSparseBufferMemoryBindInfo::Setbuffer) {
  _VkSparseBufferMemoryBindInfo *self = Nan::ObjectWrap::Unwrap<_VkSparseBufferMemoryBindInfo>(info.This());
  // js
  if (!value->IsNull()) {
    v8::Local<v8::Object> obj = Nan::To<v8::Object>(value).ToLocalChecked();
    if (Nan::New(_VkBuffer::constructor)->HasInstance(obj)) {
      self->buffer.Reset<v8::Object>(value.As<v8::Object>());
      _VkBuffer* inst = Nan::ObjectWrap::Unwrap<_VkBuffer>(obj);
      ;
      self->instance.buffer = inst->instance;
    } else {
      
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkBuffer]' for 'VkSparseBufferMemoryBindInfo.buffer' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
      return;
    }
  } else if (value->IsNull()) {
    self->buffer.Reset();
    self->instance.buffer = VK_NULL_HANDLE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkBuffer]' for 'VkSparseBufferMemoryBindInfo.buffer' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// bindCount
NAN_GETTER(_VkSparseBufferMemoryBindInfo::GetbindCount) {
  _VkSparseBufferMemoryBindInfo *self = Nan::ObjectWrap::Unwrap<_VkSparseBufferMemoryBindInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.bindCount));
}NAN_SETTER(_VkSparseBufferMemoryBindInfo::SetbindCount) {
  _VkSparseBufferMemoryBindInfo *self = Nan::ObjectWrap::Unwrap<_VkSparseBufferMemoryBindInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.bindCount = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkSparseBufferMemoryBindInfo.bindCount' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// pBinds
NAN_GETTER(_VkSparseBufferMemoryBindInfo::GetpBinds) {
  _VkSparseBufferMemoryBindInfo *self = Nan::ObjectWrap::Unwrap<_VkSparseBufferMemoryBindInfo>(info.This());
  if (self->pBinds.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->pBinds);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkSparseBufferMemoryBindInfo::SetpBinds) {
  _VkSparseBufferMemoryBindInfo *self = Nan::ObjectWrap::Unwrap<_VkSparseBufferMemoryBindInfo>(info.This());
  
    // js
    if (value->IsArray()) {
      self->pBinds.Reset<v8::Array>(value.As<v8::Array>());
    } else if (value->IsNull()) {
      self->pBinds.Reset();
      self->instance.pBinds = nullptr;
    } else {
      
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkSparseMemoryBind]' for 'VkSparseBufferMemoryBindInfo.pBinds' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
      return;
    }
  
  // vulkan
  if (value->IsArray()) {
    
  } else if (value->IsNull()) {
    self->instance.pBinds = nullptr;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkSparseMemoryBind]' for 'VkSparseBufferMemoryBindInfo.pBinds' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}