/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY node-vulkan v0.0.9
 */
#include "utils.h"
#include "index.h"
#include "VkPastPresentationTimingGOOGLE.h"

Nan::Persistent<v8::FunctionTemplate> _VkPastPresentationTimingGOOGLE::constructor;

_VkPastPresentationTimingGOOGLE::_VkPastPresentationTimingGOOGLE() {
  
  
}

_VkPastPresentationTimingGOOGLE::~_VkPastPresentationTimingGOOGLE() {
  //printf("VkPastPresentationTimingGOOGLE deconstructed!!\n");
  
  
  
  
  
  
}

void _VkPastPresentationTimingGOOGLE::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkPastPresentationTimingGOOGLE::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkPastPresentationTimingGOOGLE").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("presentID").ToLocalChecked(), GetpresentID, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("desiredPresentTime").ToLocalChecked(), GetdesiredPresentTime, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("actualPresentTime").ToLocalChecked(), GetactualPresentTime, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("earliestPresentTime").ToLocalChecked(), GetearliestPresentTime, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("presentMargin").ToLocalChecked(), GetpresentMargin, nullptr, ctor);
  Nan::Set(target, Nan::New("VkPastPresentationTimingGOOGLE").ToLocalChecked(), ctor->GetFunction());
}

bool _VkPastPresentationTimingGOOGLE::flush() {
  _VkPastPresentationTimingGOOGLE *self = this;
  
  return true;
}

NAN_METHOD(_VkPastPresentationTimingGOOGLE::New) {
  if (info.IsConstructCall()) {
    _VkPastPresentationTimingGOOGLE* self = new _VkPastPresentationTimingGOOGLE();
    self->Wrap(info.Holder());
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkPastPresentationTimingGOOGLE constructor cannot be invoked without 'new'");
  }
};

// presentID
NAN_GETTER(_VkPastPresentationTimingGOOGLE::GetpresentID) {
  _VkPastPresentationTimingGOOGLE *self = Nan::ObjectWrap::Unwrap<_VkPastPresentationTimingGOOGLE>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.presentID));
}// desiredPresentTime
NAN_GETTER(_VkPastPresentationTimingGOOGLE::GetdesiredPresentTime) {
  _VkPastPresentationTimingGOOGLE *self = Nan::ObjectWrap::Unwrap<_VkPastPresentationTimingGOOGLE>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.desiredPresentTime));
}// actualPresentTime
NAN_GETTER(_VkPastPresentationTimingGOOGLE::GetactualPresentTime) {
  _VkPastPresentationTimingGOOGLE *self = Nan::ObjectWrap::Unwrap<_VkPastPresentationTimingGOOGLE>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.actualPresentTime));
}// earliestPresentTime
NAN_GETTER(_VkPastPresentationTimingGOOGLE::GetearliestPresentTime) {
  _VkPastPresentationTimingGOOGLE *self = Nan::ObjectWrap::Unwrap<_VkPastPresentationTimingGOOGLE>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.earliestPresentTime));
}// presentMargin
NAN_GETTER(_VkPastPresentationTimingGOOGLE::GetpresentMargin) {
  _VkPastPresentationTimingGOOGLE *self = Nan::ObjectWrap::Unwrap<_VkPastPresentationTimingGOOGLE>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.presentMargin));
}