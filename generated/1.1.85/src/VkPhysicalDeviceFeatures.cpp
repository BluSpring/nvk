/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY node-vulkan v0.0.7
 */
#include "utils.h"
#include "index.h"
#include "VkPhysicalDeviceFeatures.h"

Nan::Persistent<v8::FunctionTemplate> _VkPhysicalDeviceFeatures::constructor;

_VkPhysicalDeviceFeatures::_VkPhysicalDeviceFeatures() {
  
}

_VkPhysicalDeviceFeatures::~_VkPhysicalDeviceFeatures() {
  //printf("VkPhysicalDeviceFeatures deconstructed!!\n");
}

void _VkPhysicalDeviceFeatures::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkPhysicalDeviceFeatures::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkPhysicalDeviceFeatures").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  Nan::SetPrototypeMethod(ctor, "flush", flush);
  
  SetPrototypeAccessor(proto, Nan::New("robustBufferAccess").ToLocalChecked(), GetrobustBufferAccess, SetrobustBufferAccess, ctor);
  SetPrototypeAccessor(proto, Nan::New("fullDrawIndexUint32").ToLocalChecked(), GetfullDrawIndexUint32, SetfullDrawIndexUint32, ctor);
  SetPrototypeAccessor(proto, Nan::New("imageCubeArray").ToLocalChecked(), GetimageCubeArray, SetimageCubeArray, ctor);
  SetPrototypeAccessor(proto, Nan::New("independentBlend").ToLocalChecked(), GetindependentBlend, SetindependentBlend, ctor);
  SetPrototypeAccessor(proto, Nan::New("geometryShader").ToLocalChecked(), GetgeometryShader, SetgeometryShader, ctor);
  SetPrototypeAccessor(proto, Nan::New("tessellationShader").ToLocalChecked(), GettessellationShader, SettessellationShader, ctor);
  SetPrototypeAccessor(proto, Nan::New("sampleRateShading").ToLocalChecked(), GetsampleRateShading, SetsampleRateShading, ctor);
  SetPrototypeAccessor(proto, Nan::New("dualSrcBlend").ToLocalChecked(), GetdualSrcBlend, SetdualSrcBlend, ctor);
  SetPrototypeAccessor(proto, Nan::New("logicOp").ToLocalChecked(), GetlogicOp, SetlogicOp, ctor);
  SetPrototypeAccessor(proto, Nan::New("multiDrawIndirect").ToLocalChecked(), GetmultiDrawIndirect, SetmultiDrawIndirect, ctor);
  SetPrototypeAccessor(proto, Nan::New("drawIndirectFirstInstance").ToLocalChecked(), GetdrawIndirectFirstInstance, SetdrawIndirectFirstInstance, ctor);
  SetPrototypeAccessor(proto, Nan::New("depthClamp").ToLocalChecked(), GetdepthClamp, SetdepthClamp, ctor);
  SetPrototypeAccessor(proto, Nan::New("depthBiasClamp").ToLocalChecked(), GetdepthBiasClamp, SetdepthBiasClamp, ctor);
  SetPrototypeAccessor(proto, Nan::New("fillModeNonSolid").ToLocalChecked(), GetfillModeNonSolid, SetfillModeNonSolid, ctor);
  SetPrototypeAccessor(proto, Nan::New("depthBounds").ToLocalChecked(), GetdepthBounds, SetdepthBounds, ctor);
  SetPrototypeAccessor(proto, Nan::New("wideLines").ToLocalChecked(), GetwideLines, SetwideLines, ctor);
  SetPrototypeAccessor(proto, Nan::New("largePoints").ToLocalChecked(), GetlargePoints, SetlargePoints, ctor);
  SetPrototypeAccessor(proto, Nan::New("alphaToOne").ToLocalChecked(), GetalphaToOne, SetalphaToOne, ctor);
  SetPrototypeAccessor(proto, Nan::New("multiViewport").ToLocalChecked(), GetmultiViewport, SetmultiViewport, ctor);
  SetPrototypeAccessor(proto, Nan::New("samplerAnisotropy").ToLocalChecked(), GetsamplerAnisotropy, SetsamplerAnisotropy, ctor);
  SetPrototypeAccessor(proto, Nan::New("textureCompressionETC2").ToLocalChecked(), GettextureCompressionETC2, SettextureCompressionETC2, ctor);
  SetPrototypeAccessor(proto, Nan::New("textureCompressionASTC_LDR").ToLocalChecked(), GettextureCompressionASTC_LDR, SettextureCompressionASTC_LDR, ctor);
  SetPrototypeAccessor(proto, Nan::New("textureCompressionBC").ToLocalChecked(), GettextureCompressionBC, SettextureCompressionBC, ctor);
  SetPrototypeAccessor(proto, Nan::New("occlusionQueryPrecise").ToLocalChecked(), GetocclusionQueryPrecise, SetocclusionQueryPrecise, ctor);
  SetPrototypeAccessor(proto, Nan::New("pipelineStatisticsQuery").ToLocalChecked(), GetpipelineStatisticsQuery, SetpipelineStatisticsQuery, ctor);
  SetPrototypeAccessor(proto, Nan::New("vertexPipelineStoresAndAtomics").ToLocalChecked(), GetvertexPipelineStoresAndAtomics, SetvertexPipelineStoresAndAtomics, ctor);
  SetPrototypeAccessor(proto, Nan::New("fragmentStoresAndAtomics").ToLocalChecked(), GetfragmentStoresAndAtomics, SetfragmentStoresAndAtomics, ctor);
  SetPrototypeAccessor(proto, Nan::New("shaderTessellationAndGeometryPointSize").ToLocalChecked(), GetshaderTessellationAndGeometryPointSize, SetshaderTessellationAndGeometryPointSize, ctor);
  SetPrototypeAccessor(proto, Nan::New("shaderImageGatherExtended").ToLocalChecked(), GetshaderImageGatherExtended, SetshaderImageGatherExtended, ctor);
  SetPrototypeAccessor(proto, Nan::New("shaderStorageImageExtendedFormats").ToLocalChecked(), GetshaderStorageImageExtendedFormats, SetshaderStorageImageExtendedFormats, ctor);
  SetPrototypeAccessor(proto, Nan::New("shaderStorageImageMultisample").ToLocalChecked(), GetshaderStorageImageMultisample, SetshaderStorageImageMultisample, ctor);
  SetPrototypeAccessor(proto, Nan::New("shaderStorageImageReadWithoutFormat").ToLocalChecked(), GetshaderStorageImageReadWithoutFormat, SetshaderStorageImageReadWithoutFormat, ctor);
  SetPrototypeAccessor(proto, Nan::New("shaderStorageImageWriteWithoutFormat").ToLocalChecked(), GetshaderStorageImageWriteWithoutFormat, SetshaderStorageImageWriteWithoutFormat, ctor);
  SetPrototypeAccessor(proto, Nan::New("shaderUniformBufferArrayDynamicIndexing").ToLocalChecked(), GetshaderUniformBufferArrayDynamicIndexing, SetshaderUniformBufferArrayDynamicIndexing, ctor);
  SetPrototypeAccessor(proto, Nan::New("shaderSampledImageArrayDynamicIndexing").ToLocalChecked(), GetshaderSampledImageArrayDynamicIndexing, SetshaderSampledImageArrayDynamicIndexing, ctor);
  SetPrototypeAccessor(proto, Nan::New("shaderStorageBufferArrayDynamicIndexing").ToLocalChecked(), GetshaderStorageBufferArrayDynamicIndexing, SetshaderStorageBufferArrayDynamicIndexing, ctor);
  SetPrototypeAccessor(proto, Nan::New("shaderStorageImageArrayDynamicIndexing").ToLocalChecked(), GetshaderStorageImageArrayDynamicIndexing, SetshaderStorageImageArrayDynamicIndexing, ctor);
  SetPrototypeAccessor(proto, Nan::New("shaderClipDistance").ToLocalChecked(), GetshaderClipDistance, SetshaderClipDistance, ctor);
  SetPrototypeAccessor(proto, Nan::New("shaderCullDistance").ToLocalChecked(), GetshaderCullDistance, SetshaderCullDistance, ctor);
  SetPrototypeAccessor(proto, Nan::New("shaderFloat64").ToLocalChecked(), GetshaderFloat64, SetshaderFloat64, ctor);
  SetPrototypeAccessor(proto, Nan::New("shaderInt64").ToLocalChecked(), GetshaderInt64, SetshaderInt64, ctor);
  SetPrototypeAccessor(proto, Nan::New("shaderInt16").ToLocalChecked(), GetshaderInt16, SetshaderInt16, ctor);
  SetPrototypeAccessor(proto, Nan::New("shaderResourceResidency").ToLocalChecked(), GetshaderResourceResidency, SetshaderResourceResidency, ctor);
  SetPrototypeAccessor(proto, Nan::New("shaderResourceMinLod").ToLocalChecked(), GetshaderResourceMinLod, SetshaderResourceMinLod, ctor);
  SetPrototypeAccessor(proto, Nan::New("sparseBinding").ToLocalChecked(), GetsparseBinding, SetsparseBinding, ctor);
  SetPrototypeAccessor(proto, Nan::New("sparseResidencyBuffer").ToLocalChecked(), GetsparseResidencyBuffer, SetsparseResidencyBuffer, ctor);
  SetPrototypeAccessor(proto, Nan::New("sparseResidencyImage2D").ToLocalChecked(), GetsparseResidencyImage2D, SetsparseResidencyImage2D, ctor);
  SetPrototypeAccessor(proto, Nan::New("sparseResidencyImage3D").ToLocalChecked(), GetsparseResidencyImage3D, SetsparseResidencyImage3D, ctor);
  SetPrototypeAccessor(proto, Nan::New("sparseResidency2Samples").ToLocalChecked(), GetsparseResidency2Samples, SetsparseResidency2Samples, ctor);
  SetPrototypeAccessor(proto, Nan::New("sparseResidency4Samples").ToLocalChecked(), GetsparseResidency4Samples, SetsparseResidency4Samples, ctor);
  SetPrototypeAccessor(proto, Nan::New("sparseResidency8Samples").ToLocalChecked(), GetsparseResidency8Samples, SetsparseResidency8Samples, ctor);
  SetPrototypeAccessor(proto, Nan::New("sparseResidency16Samples").ToLocalChecked(), GetsparseResidency16Samples, SetsparseResidency16Samples, ctor);
  SetPrototypeAccessor(proto, Nan::New("sparseResidencyAliased").ToLocalChecked(), GetsparseResidencyAliased, SetsparseResidencyAliased, ctor);
  SetPrototypeAccessor(proto, Nan::New("variableMultisampleRate").ToLocalChecked(), GetvariableMultisampleRate, SetvariableMultisampleRate, ctor);
  SetPrototypeAccessor(proto, Nan::New("inheritedQueries").ToLocalChecked(), GetinheritedQueries, SetinheritedQueries, ctor);
  Nan::Set(target, Nan::New("VkPhysicalDeviceFeatures").ToLocalChecked(), ctor->GetFunction());
}

NAN_METHOD(_VkPhysicalDeviceFeatures::New) {
  if (info.IsConstructCall()) {
    _VkPhysicalDeviceFeatures* self = new _VkPhysicalDeviceFeatures();
    self->Wrap(info.Holder());
    
    if (info[0]->IsObject()) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(info[0]).ToLocalChecked();
      if (obj->Has(self->sAccess0)) info.This()->Set(self->sAccess0, obj->Get(self->sAccess0));
      if (obj->Has(self->sAccess1)) info.This()->Set(self->sAccess1, obj->Get(self->sAccess1));
      if (obj->Has(self->sAccess2)) info.This()->Set(self->sAccess2, obj->Get(self->sAccess2));
      if (obj->Has(self->sAccess3)) info.This()->Set(self->sAccess3, obj->Get(self->sAccess3));
      if (obj->Has(self->sAccess4)) info.This()->Set(self->sAccess4, obj->Get(self->sAccess4));
      if (obj->Has(self->sAccess5)) info.This()->Set(self->sAccess5, obj->Get(self->sAccess5));
      if (obj->Has(self->sAccess6)) info.This()->Set(self->sAccess6, obj->Get(self->sAccess6));
      if (obj->Has(self->sAccess7)) info.This()->Set(self->sAccess7, obj->Get(self->sAccess7));
      if (obj->Has(self->sAccess8)) info.This()->Set(self->sAccess8, obj->Get(self->sAccess8));
      if (obj->Has(self->sAccess9)) info.This()->Set(self->sAccess9, obj->Get(self->sAccess9));
      if (obj->Has(self->sAccess10)) info.This()->Set(self->sAccess10, obj->Get(self->sAccess10));
      if (obj->Has(self->sAccess11)) info.This()->Set(self->sAccess11, obj->Get(self->sAccess11));
      if (obj->Has(self->sAccess12)) info.This()->Set(self->sAccess12, obj->Get(self->sAccess12));
      if (obj->Has(self->sAccess13)) info.This()->Set(self->sAccess13, obj->Get(self->sAccess13));
      if (obj->Has(self->sAccess14)) info.This()->Set(self->sAccess14, obj->Get(self->sAccess14));
      if (obj->Has(self->sAccess15)) info.This()->Set(self->sAccess15, obj->Get(self->sAccess15));
      if (obj->Has(self->sAccess16)) info.This()->Set(self->sAccess16, obj->Get(self->sAccess16));
      if (obj->Has(self->sAccess17)) info.This()->Set(self->sAccess17, obj->Get(self->sAccess17));
      if (obj->Has(self->sAccess18)) info.This()->Set(self->sAccess18, obj->Get(self->sAccess18));
      if (obj->Has(self->sAccess19)) info.This()->Set(self->sAccess19, obj->Get(self->sAccess19));
      if (obj->Has(self->sAccess20)) info.This()->Set(self->sAccess20, obj->Get(self->sAccess20));
      if (obj->Has(self->sAccess21)) info.This()->Set(self->sAccess21, obj->Get(self->sAccess21));
      if (obj->Has(self->sAccess22)) info.This()->Set(self->sAccess22, obj->Get(self->sAccess22));
      if (obj->Has(self->sAccess23)) info.This()->Set(self->sAccess23, obj->Get(self->sAccess23));
      if (obj->Has(self->sAccess24)) info.This()->Set(self->sAccess24, obj->Get(self->sAccess24));
      if (obj->Has(self->sAccess25)) info.This()->Set(self->sAccess25, obj->Get(self->sAccess25));
      if (obj->Has(self->sAccess26)) info.This()->Set(self->sAccess26, obj->Get(self->sAccess26));
      if (obj->Has(self->sAccess27)) info.This()->Set(self->sAccess27, obj->Get(self->sAccess27));
      if (obj->Has(self->sAccess28)) info.This()->Set(self->sAccess28, obj->Get(self->sAccess28));
      if (obj->Has(self->sAccess29)) info.This()->Set(self->sAccess29, obj->Get(self->sAccess29));
      if (obj->Has(self->sAccess30)) info.This()->Set(self->sAccess30, obj->Get(self->sAccess30));
      if (obj->Has(self->sAccess31)) info.This()->Set(self->sAccess31, obj->Get(self->sAccess31));
      if (obj->Has(self->sAccess32)) info.This()->Set(self->sAccess32, obj->Get(self->sAccess32));
      if (obj->Has(self->sAccess33)) info.This()->Set(self->sAccess33, obj->Get(self->sAccess33));
      if (obj->Has(self->sAccess34)) info.This()->Set(self->sAccess34, obj->Get(self->sAccess34));
      if (obj->Has(self->sAccess35)) info.This()->Set(self->sAccess35, obj->Get(self->sAccess35));
      if (obj->Has(self->sAccess36)) info.This()->Set(self->sAccess36, obj->Get(self->sAccess36));
      if (obj->Has(self->sAccess37)) info.This()->Set(self->sAccess37, obj->Get(self->sAccess37));
      if (obj->Has(self->sAccess38)) info.This()->Set(self->sAccess38, obj->Get(self->sAccess38));
      if (obj->Has(self->sAccess39)) info.This()->Set(self->sAccess39, obj->Get(self->sAccess39));
      if (obj->Has(self->sAccess40)) info.This()->Set(self->sAccess40, obj->Get(self->sAccess40));
      if (obj->Has(self->sAccess41)) info.This()->Set(self->sAccess41, obj->Get(self->sAccess41));
      if (obj->Has(self->sAccess42)) info.This()->Set(self->sAccess42, obj->Get(self->sAccess42));
      if (obj->Has(self->sAccess43)) info.This()->Set(self->sAccess43, obj->Get(self->sAccess43));
      if (obj->Has(self->sAccess44)) info.This()->Set(self->sAccess44, obj->Get(self->sAccess44));
      if (obj->Has(self->sAccess45)) info.This()->Set(self->sAccess45, obj->Get(self->sAccess45));
      if (obj->Has(self->sAccess46)) info.This()->Set(self->sAccess46, obj->Get(self->sAccess46));
      if (obj->Has(self->sAccess47)) info.This()->Set(self->sAccess47, obj->Get(self->sAccess47));
      if (obj->Has(self->sAccess48)) info.This()->Set(self->sAccess48, obj->Get(self->sAccess48));
      if (obj->Has(self->sAccess49)) info.This()->Set(self->sAccess49, obj->Get(self->sAccess49));
      if (obj->Has(self->sAccess50)) info.This()->Set(self->sAccess50, obj->Get(self->sAccess50));
      if (obj->Has(self->sAccess51)) info.This()->Set(self->sAccess51, obj->Get(self->sAccess51));
      if (obj->Has(self->sAccess52)) info.This()->Set(self->sAccess52, obj->Get(self->sAccess52));
      if (obj->Has(self->sAccess53)) info.This()->Set(self->sAccess53, obj->Get(self->sAccess53));
      if (obj->Has(self->sAccess54)) info.This()->Set(self->sAccess54, obj->Get(self->sAccess54));
      
    }
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkPhysicalDeviceFeatures constructor cannot be invoked without 'new'");
  }
};

NAN_METHOD(_VkPhysicalDeviceFeatures::flush) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  
}

// robustBufferAccess
NAN_GETTER(_VkPhysicalDeviceFeatures::GetrobustBufferAccess) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.robustBufferAccess));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetrobustBufferAccess) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.robustBufferAccess = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkPhysicalDeviceFeatures.robustBufferAccess'");
  }
}// fullDrawIndexUint32
NAN_GETTER(_VkPhysicalDeviceFeatures::GetfullDrawIndexUint32) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.fullDrawIndexUint32));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetfullDrawIndexUint32) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.fullDrawIndexUint32 = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkPhysicalDeviceFeatures.fullDrawIndexUint32'");
  }
}// imageCubeArray
NAN_GETTER(_VkPhysicalDeviceFeatures::GetimageCubeArray) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.imageCubeArray));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetimageCubeArray) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.imageCubeArray = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkPhysicalDeviceFeatures.imageCubeArray'");
  }
}// independentBlend
NAN_GETTER(_VkPhysicalDeviceFeatures::GetindependentBlend) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.independentBlend));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetindependentBlend) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.independentBlend = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkPhysicalDeviceFeatures.independentBlend'");
  }
}// geometryShader
NAN_GETTER(_VkPhysicalDeviceFeatures::GetgeometryShader) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.geometryShader));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetgeometryShader) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.geometryShader = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkPhysicalDeviceFeatures.geometryShader'");
  }
}// tessellationShader
NAN_GETTER(_VkPhysicalDeviceFeatures::GettessellationShader) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.tessellationShader));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SettessellationShader) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.tessellationShader = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkPhysicalDeviceFeatures.tessellationShader'");
  }
}// sampleRateShading
NAN_GETTER(_VkPhysicalDeviceFeatures::GetsampleRateShading) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sampleRateShading));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetsampleRateShading) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.sampleRateShading = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkPhysicalDeviceFeatures.sampleRateShading'");
  }
}// dualSrcBlend
NAN_GETTER(_VkPhysicalDeviceFeatures::GetdualSrcBlend) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.dualSrcBlend));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetdualSrcBlend) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.dualSrcBlend = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkPhysicalDeviceFeatures.dualSrcBlend'");
  }
}// logicOp
NAN_GETTER(_VkPhysicalDeviceFeatures::GetlogicOp) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.logicOp));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetlogicOp) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.logicOp = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkPhysicalDeviceFeatures.logicOp'");
  }
}// multiDrawIndirect
NAN_GETTER(_VkPhysicalDeviceFeatures::GetmultiDrawIndirect) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.multiDrawIndirect));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetmultiDrawIndirect) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.multiDrawIndirect = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkPhysicalDeviceFeatures.multiDrawIndirect'");
  }
}// drawIndirectFirstInstance
NAN_GETTER(_VkPhysicalDeviceFeatures::GetdrawIndirectFirstInstance) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.drawIndirectFirstInstance));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetdrawIndirectFirstInstance) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.drawIndirectFirstInstance = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkPhysicalDeviceFeatures.drawIndirectFirstInstance'");
  }
}// depthClamp
NAN_GETTER(_VkPhysicalDeviceFeatures::GetdepthClamp) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.depthClamp));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetdepthClamp) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.depthClamp = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkPhysicalDeviceFeatures.depthClamp'");
  }
}// depthBiasClamp
NAN_GETTER(_VkPhysicalDeviceFeatures::GetdepthBiasClamp) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.depthBiasClamp));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetdepthBiasClamp) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.depthBiasClamp = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkPhysicalDeviceFeatures.depthBiasClamp'");
  }
}// fillModeNonSolid
NAN_GETTER(_VkPhysicalDeviceFeatures::GetfillModeNonSolid) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.fillModeNonSolid));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetfillModeNonSolid) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.fillModeNonSolid = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkPhysicalDeviceFeatures.fillModeNonSolid'");
  }
}// depthBounds
NAN_GETTER(_VkPhysicalDeviceFeatures::GetdepthBounds) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.depthBounds));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetdepthBounds) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.depthBounds = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkPhysicalDeviceFeatures.depthBounds'");
  }
}// wideLines
NAN_GETTER(_VkPhysicalDeviceFeatures::GetwideLines) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.wideLines));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetwideLines) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.wideLines = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkPhysicalDeviceFeatures.wideLines'");
  }
}// largePoints
NAN_GETTER(_VkPhysicalDeviceFeatures::GetlargePoints) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.largePoints));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetlargePoints) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.largePoints = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkPhysicalDeviceFeatures.largePoints'");
  }
}// alphaToOne
NAN_GETTER(_VkPhysicalDeviceFeatures::GetalphaToOne) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.alphaToOne));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetalphaToOne) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.alphaToOne = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkPhysicalDeviceFeatures.alphaToOne'");
  }
}// multiViewport
NAN_GETTER(_VkPhysicalDeviceFeatures::GetmultiViewport) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.multiViewport));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetmultiViewport) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.multiViewport = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkPhysicalDeviceFeatures.multiViewport'");
  }
}// samplerAnisotropy
NAN_GETTER(_VkPhysicalDeviceFeatures::GetsamplerAnisotropy) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.samplerAnisotropy));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetsamplerAnisotropy) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.samplerAnisotropy = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkPhysicalDeviceFeatures.samplerAnisotropy'");
  }
}// textureCompressionETC2
NAN_GETTER(_VkPhysicalDeviceFeatures::GettextureCompressionETC2) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.textureCompressionETC2));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SettextureCompressionETC2) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.textureCompressionETC2 = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkPhysicalDeviceFeatures.textureCompressionETC2'");
  }
}// textureCompressionASTC_LDR
NAN_GETTER(_VkPhysicalDeviceFeatures::GettextureCompressionASTC_LDR) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.textureCompressionASTC_LDR));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SettextureCompressionASTC_LDR) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.textureCompressionASTC_LDR = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkPhysicalDeviceFeatures.textureCompressionASTC_LDR'");
  }
}// textureCompressionBC
NAN_GETTER(_VkPhysicalDeviceFeatures::GettextureCompressionBC) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.textureCompressionBC));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SettextureCompressionBC) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.textureCompressionBC = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkPhysicalDeviceFeatures.textureCompressionBC'");
  }
}// occlusionQueryPrecise
NAN_GETTER(_VkPhysicalDeviceFeatures::GetocclusionQueryPrecise) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.occlusionQueryPrecise));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetocclusionQueryPrecise) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.occlusionQueryPrecise = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkPhysicalDeviceFeatures.occlusionQueryPrecise'");
  }
}// pipelineStatisticsQuery
NAN_GETTER(_VkPhysicalDeviceFeatures::GetpipelineStatisticsQuery) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.pipelineStatisticsQuery));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetpipelineStatisticsQuery) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.pipelineStatisticsQuery = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkPhysicalDeviceFeatures.pipelineStatisticsQuery'");
  }
}// vertexPipelineStoresAndAtomics
NAN_GETTER(_VkPhysicalDeviceFeatures::GetvertexPipelineStoresAndAtomics) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.vertexPipelineStoresAndAtomics));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetvertexPipelineStoresAndAtomics) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.vertexPipelineStoresAndAtomics = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkPhysicalDeviceFeatures.vertexPipelineStoresAndAtomics'");
  }
}// fragmentStoresAndAtomics
NAN_GETTER(_VkPhysicalDeviceFeatures::GetfragmentStoresAndAtomics) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.fragmentStoresAndAtomics));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetfragmentStoresAndAtomics) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.fragmentStoresAndAtomics = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkPhysicalDeviceFeatures.fragmentStoresAndAtomics'");
  }
}// shaderTessellationAndGeometryPointSize
NAN_GETTER(_VkPhysicalDeviceFeatures::GetshaderTessellationAndGeometryPointSize) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.shaderTessellationAndGeometryPointSize));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetshaderTessellationAndGeometryPointSize) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.shaderTessellationAndGeometryPointSize = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkPhysicalDeviceFeatures.shaderTessellationAndGeometryPointSize'");
  }
}// shaderImageGatherExtended
NAN_GETTER(_VkPhysicalDeviceFeatures::GetshaderImageGatherExtended) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.shaderImageGatherExtended));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetshaderImageGatherExtended) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.shaderImageGatherExtended = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkPhysicalDeviceFeatures.shaderImageGatherExtended'");
  }
}// shaderStorageImageExtendedFormats
NAN_GETTER(_VkPhysicalDeviceFeatures::GetshaderStorageImageExtendedFormats) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.shaderStorageImageExtendedFormats));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetshaderStorageImageExtendedFormats) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.shaderStorageImageExtendedFormats = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkPhysicalDeviceFeatures.shaderStorageImageExtendedFormats'");
  }
}// shaderStorageImageMultisample
NAN_GETTER(_VkPhysicalDeviceFeatures::GetshaderStorageImageMultisample) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.shaderStorageImageMultisample));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetshaderStorageImageMultisample) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.shaderStorageImageMultisample = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkPhysicalDeviceFeatures.shaderStorageImageMultisample'");
  }
}// shaderStorageImageReadWithoutFormat
NAN_GETTER(_VkPhysicalDeviceFeatures::GetshaderStorageImageReadWithoutFormat) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.shaderStorageImageReadWithoutFormat));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetshaderStorageImageReadWithoutFormat) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.shaderStorageImageReadWithoutFormat = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkPhysicalDeviceFeatures.shaderStorageImageReadWithoutFormat'");
  }
}// shaderStorageImageWriteWithoutFormat
NAN_GETTER(_VkPhysicalDeviceFeatures::GetshaderStorageImageWriteWithoutFormat) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.shaderStorageImageWriteWithoutFormat));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetshaderStorageImageWriteWithoutFormat) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.shaderStorageImageWriteWithoutFormat = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkPhysicalDeviceFeatures.shaderStorageImageWriteWithoutFormat'");
  }
}// shaderUniformBufferArrayDynamicIndexing
NAN_GETTER(_VkPhysicalDeviceFeatures::GetshaderUniformBufferArrayDynamicIndexing) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.shaderUniformBufferArrayDynamicIndexing));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetshaderUniformBufferArrayDynamicIndexing) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.shaderUniformBufferArrayDynamicIndexing = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkPhysicalDeviceFeatures.shaderUniformBufferArrayDynamicIndexing'");
  }
}// shaderSampledImageArrayDynamicIndexing
NAN_GETTER(_VkPhysicalDeviceFeatures::GetshaderSampledImageArrayDynamicIndexing) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.shaderSampledImageArrayDynamicIndexing));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetshaderSampledImageArrayDynamicIndexing) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.shaderSampledImageArrayDynamicIndexing = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkPhysicalDeviceFeatures.shaderSampledImageArrayDynamicIndexing'");
  }
}// shaderStorageBufferArrayDynamicIndexing
NAN_GETTER(_VkPhysicalDeviceFeatures::GetshaderStorageBufferArrayDynamicIndexing) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.shaderStorageBufferArrayDynamicIndexing));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetshaderStorageBufferArrayDynamicIndexing) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.shaderStorageBufferArrayDynamicIndexing = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkPhysicalDeviceFeatures.shaderStorageBufferArrayDynamicIndexing'");
  }
}// shaderStorageImageArrayDynamicIndexing
NAN_GETTER(_VkPhysicalDeviceFeatures::GetshaderStorageImageArrayDynamicIndexing) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.shaderStorageImageArrayDynamicIndexing));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetshaderStorageImageArrayDynamicIndexing) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.shaderStorageImageArrayDynamicIndexing = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkPhysicalDeviceFeatures.shaderStorageImageArrayDynamicIndexing'");
  }
}// shaderClipDistance
NAN_GETTER(_VkPhysicalDeviceFeatures::GetshaderClipDistance) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.shaderClipDistance));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetshaderClipDistance) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.shaderClipDistance = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkPhysicalDeviceFeatures.shaderClipDistance'");
  }
}// shaderCullDistance
NAN_GETTER(_VkPhysicalDeviceFeatures::GetshaderCullDistance) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.shaderCullDistance));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetshaderCullDistance) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.shaderCullDistance = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkPhysicalDeviceFeatures.shaderCullDistance'");
  }
}// shaderFloat64
NAN_GETTER(_VkPhysicalDeviceFeatures::GetshaderFloat64) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.shaderFloat64));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetshaderFloat64) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.shaderFloat64 = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkPhysicalDeviceFeatures.shaderFloat64'");
  }
}// shaderInt64
NAN_GETTER(_VkPhysicalDeviceFeatures::GetshaderInt64) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.shaderInt64));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetshaderInt64) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.shaderInt64 = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkPhysicalDeviceFeatures.shaderInt64'");
  }
}// shaderInt16
NAN_GETTER(_VkPhysicalDeviceFeatures::GetshaderInt16) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.shaderInt16));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetshaderInt16) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.shaderInt16 = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkPhysicalDeviceFeatures.shaderInt16'");
  }
}// shaderResourceResidency
NAN_GETTER(_VkPhysicalDeviceFeatures::GetshaderResourceResidency) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.shaderResourceResidency));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetshaderResourceResidency) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.shaderResourceResidency = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkPhysicalDeviceFeatures.shaderResourceResidency'");
  }
}// shaderResourceMinLod
NAN_GETTER(_VkPhysicalDeviceFeatures::GetshaderResourceMinLod) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.shaderResourceMinLod));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetshaderResourceMinLod) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.shaderResourceMinLod = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkPhysicalDeviceFeatures.shaderResourceMinLod'");
  }
}// sparseBinding
NAN_GETTER(_VkPhysicalDeviceFeatures::GetsparseBinding) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sparseBinding));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetsparseBinding) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.sparseBinding = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkPhysicalDeviceFeatures.sparseBinding'");
  }
}// sparseResidencyBuffer
NAN_GETTER(_VkPhysicalDeviceFeatures::GetsparseResidencyBuffer) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sparseResidencyBuffer));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetsparseResidencyBuffer) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.sparseResidencyBuffer = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkPhysicalDeviceFeatures.sparseResidencyBuffer'");
  }
}// sparseResidencyImage2D
NAN_GETTER(_VkPhysicalDeviceFeatures::GetsparseResidencyImage2D) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sparseResidencyImage2D));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetsparseResidencyImage2D) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.sparseResidencyImage2D = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkPhysicalDeviceFeatures.sparseResidencyImage2D'");
  }
}// sparseResidencyImage3D
NAN_GETTER(_VkPhysicalDeviceFeatures::GetsparseResidencyImage3D) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sparseResidencyImage3D));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetsparseResidencyImage3D) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.sparseResidencyImage3D = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkPhysicalDeviceFeatures.sparseResidencyImage3D'");
  }
}// sparseResidency2Samples
NAN_GETTER(_VkPhysicalDeviceFeatures::GetsparseResidency2Samples) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sparseResidency2Samples));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetsparseResidency2Samples) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.sparseResidency2Samples = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkPhysicalDeviceFeatures.sparseResidency2Samples'");
  }
}// sparseResidency4Samples
NAN_GETTER(_VkPhysicalDeviceFeatures::GetsparseResidency4Samples) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sparseResidency4Samples));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetsparseResidency4Samples) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.sparseResidency4Samples = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkPhysicalDeviceFeatures.sparseResidency4Samples'");
  }
}// sparseResidency8Samples
NAN_GETTER(_VkPhysicalDeviceFeatures::GetsparseResidency8Samples) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sparseResidency8Samples));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetsparseResidency8Samples) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.sparseResidency8Samples = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkPhysicalDeviceFeatures.sparseResidency8Samples'");
  }
}// sparseResidency16Samples
NAN_GETTER(_VkPhysicalDeviceFeatures::GetsparseResidency16Samples) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sparseResidency16Samples));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetsparseResidency16Samples) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.sparseResidency16Samples = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkPhysicalDeviceFeatures.sparseResidency16Samples'");
  }
}// sparseResidencyAliased
NAN_GETTER(_VkPhysicalDeviceFeatures::GetsparseResidencyAliased) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sparseResidencyAliased));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetsparseResidencyAliased) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.sparseResidencyAliased = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkPhysicalDeviceFeatures.sparseResidencyAliased'");
  }
}// variableMultisampleRate
NAN_GETTER(_VkPhysicalDeviceFeatures::GetvariableMultisampleRate) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.variableMultisampleRate));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetvariableMultisampleRate) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.variableMultisampleRate = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkPhysicalDeviceFeatures.variableMultisampleRate'");
  }
}// inheritedQueries
NAN_GETTER(_VkPhysicalDeviceFeatures::GetinheritedQueries) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.inheritedQueries));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetinheritedQueries) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.inheritedQueries = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkPhysicalDeviceFeatures.inheritedQueries'");
  }
}