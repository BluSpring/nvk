/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY node-vulkan v0.0.9
 */
#include "utils.h"
#include "index.h"
#include "VkPhysicalDeviceFeatures.h"

Nan::Persistent<v8::FunctionTemplate> _VkPhysicalDeviceFeatures::constructor;

_VkPhysicalDeviceFeatures::_VkPhysicalDeviceFeatures() {
  
  
}

_VkPhysicalDeviceFeatures::~_VkPhysicalDeviceFeatures() {
  //printf("VkPhysicalDeviceFeatures deconstructed!!\n");
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
}

void _VkPhysicalDeviceFeatures::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkPhysicalDeviceFeatures::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkPhysicalDeviceFeatures").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("robustBufferAccess").ToLocalChecked(), GetrobustBufferAccess, SetrobustBufferAccess, ctor);
  SetPrototypeAccessor(proto, Nan::New("fullDrawIndexUint32").ToLocalChecked(), GetfullDrawIndexUint32, SetfullDrawIndexUint32, ctor);
  SetPrototypeAccessor(proto, Nan::New("imageCubeArray").ToLocalChecked(), GetimageCubeArray, SetimageCubeArray, ctor);
  SetPrototypeAccessor(proto, Nan::New("independentBlend").ToLocalChecked(), GetindependentBlend, SetindependentBlend, ctor);
  SetPrototypeAccessor(proto, Nan::New("geometryShader").ToLocalChecked(), GetgeometryShader, SetgeometryShader, ctor);
  SetPrototypeAccessor(proto, Nan::New("tessellationShader").ToLocalChecked(), GettessellationShader, SettessellationShader, ctor);
  SetPrototypeAccessor(proto, Nan::New("sampleRateShading").ToLocalChecked(), GetsampleRateShading, SetsampleRateShading, ctor);
  SetPrototypeAccessor(proto, Nan::New("dualSrcBlend").ToLocalChecked(), GetdualSrcBlend, SetdualSrcBlend, ctor);
  SetPrototypeAccessor(proto, Nan::New("logicOp").ToLocalChecked(), GetlogicOp, SetlogicOp, ctor);
  SetPrototypeAccessor(proto, Nan::New("multiDrawIndirect").ToLocalChecked(), GetmultiDrawIndirect, SetmultiDrawIndirect, ctor);
  SetPrototypeAccessor(proto, Nan::New("drawIndirectFirstInstance").ToLocalChecked(), GetdrawIndirectFirstInstance, SetdrawIndirectFirstInstance, ctor);
  SetPrototypeAccessor(proto, Nan::New("depthClamp").ToLocalChecked(), GetdepthClamp, SetdepthClamp, ctor);
  SetPrototypeAccessor(proto, Nan::New("depthBiasClamp").ToLocalChecked(), GetdepthBiasClamp, SetdepthBiasClamp, ctor);
  SetPrototypeAccessor(proto, Nan::New("fillModeNonSolid").ToLocalChecked(), GetfillModeNonSolid, SetfillModeNonSolid, ctor);
  SetPrototypeAccessor(proto, Nan::New("depthBounds").ToLocalChecked(), GetdepthBounds, SetdepthBounds, ctor);
  SetPrototypeAccessor(proto, Nan::New("wideLines").ToLocalChecked(), GetwideLines, SetwideLines, ctor);
  SetPrototypeAccessor(proto, Nan::New("largePoints").ToLocalChecked(), GetlargePoints, SetlargePoints, ctor);
  SetPrototypeAccessor(proto, Nan::New("alphaToOne").ToLocalChecked(), GetalphaToOne, SetalphaToOne, ctor);
  SetPrototypeAccessor(proto, Nan::New("multiViewport").ToLocalChecked(), GetmultiViewport, SetmultiViewport, ctor);
  SetPrototypeAccessor(proto, Nan::New("samplerAnisotropy").ToLocalChecked(), GetsamplerAnisotropy, SetsamplerAnisotropy, ctor);
  SetPrototypeAccessor(proto, Nan::New("textureCompressionETC2").ToLocalChecked(), GettextureCompressionETC2, SettextureCompressionETC2, ctor);
  SetPrototypeAccessor(proto, Nan::New("textureCompressionASTC_LDR").ToLocalChecked(), GettextureCompressionASTC_LDR, SettextureCompressionASTC_LDR, ctor);
  SetPrototypeAccessor(proto, Nan::New("textureCompressionBC").ToLocalChecked(), GettextureCompressionBC, SettextureCompressionBC, ctor);
  SetPrototypeAccessor(proto, Nan::New("occlusionQueryPrecise").ToLocalChecked(), GetocclusionQueryPrecise, SetocclusionQueryPrecise, ctor);
  SetPrototypeAccessor(proto, Nan::New("pipelineStatisticsQuery").ToLocalChecked(), GetpipelineStatisticsQuery, SetpipelineStatisticsQuery, ctor);
  SetPrototypeAccessor(proto, Nan::New("vertexPipelineStoresAndAtomics").ToLocalChecked(), GetvertexPipelineStoresAndAtomics, SetvertexPipelineStoresAndAtomics, ctor);
  SetPrototypeAccessor(proto, Nan::New("fragmentStoresAndAtomics").ToLocalChecked(), GetfragmentStoresAndAtomics, SetfragmentStoresAndAtomics, ctor);
  SetPrototypeAccessor(proto, Nan::New("shaderTessellationAndGeometryPointSize").ToLocalChecked(), GetshaderTessellationAndGeometryPointSize, SetshaderTessellationAndGeometryPointSize, ctor);
  SetPrototypeAccessor(proto, Nan::New("shaderImageGatherExtended").ToLocalChecked(), GetshaderImageGatherExtended, SetshaderImageGatherExtended, ctor);
  SetPrototypeAccessor(proto, Nan::New("shaderStorageImageExtendedFormats").ToLocalChecked(), GetshaderStorageImageExtendedFormats, SetshaderStorageImageExtendedFormats, ctor);
  SetPrototypeAccessor(proto, Nan::New("shaderStorageImageMultisample").ToLocalChecked(), GetshaderStorageImageMultisample, SetshaderStorageImageMultisample, ctor);
  SetPrototypeAccessor(proto, Nan::New("shaderStorageImageReadWithoutFormat").ToLocalChecked(), GetshaderStorageImageReadWithoutFormat, SetshaderStorageImageReadWithoutFormat, ctor);
  SetPrototypeAccessor(proto, Nan::New("shaderStorageImageWriteWithoutFormat").ToLocalChecked(), GetshaderStorageImageWriteWithoutFormat, SetshaderStorageImageWriteWithoutFormat, ctor);
  SetPrototypeAccessor(proto, Nan::New("shaderUniformBufferArrayDynamicIndexing").ToLocalChecked(), GetshaderUniformBufferArrayDynamicIndexing, SetshaderUniformBufferArrayDynamicIndexing, ctor);
  SetPrototypeAccessor(proto, Nan::New("shaderSampledImageArrayDynamicIndexing").ToLocalChecked(), GetshaderSampledImageArrayDynamicIndexing, SetshaderSampledImageArrayDynamicIndexing, ctor);
  SetPrototypeAccessor(proto, Nan::New("shaderStorageBufferArrayDynamicIndexing").ToLocalChecked(), GetshaderStorageBufferArrayDynamicIndexing, SetshaderStorageBufferArrayDynamicIndexing, ctor);
  SetPrototypeAccessor(proto, Nan::New("shaderStorageImageArrayDynamicIndexing").ToLocalChecked(), GetshaderStorageImageArrayDynamicIndexing, SetshaderStorageImageArrayDynamicIndexing, ctor);
  SetPrototypeAccessor(proto, Nan::New("shaderClipDistance").ToLocalChecked(), GetshaderClipDistance, SetshaderClipDistance, ctor);
  SetPrototypeAccessor(proto, Nan::New("shaderCullDistance").ToLocalChecked(), GetshaderCullDistance, SetshaderCullDistance, ctor);
  SetPrototypeAccessor(proto, Nan::New("shaderFloat64").ToLocalChecked(), GetshaderFloat64, SetshaderFloat64, ctor);
  SetPrototypeAccessor(proto, Nan::New("shaderInt64").ToLocalChecked(), GetshaderInt64, SetshaderInt64, ctor);
  SetPrototypeAccessor(proto, Nan::New("shaderInt16").ToLocalChecked(), GetshaderInt16, SetshaderInt16, ctor);
  SetPrototypeAccessor(proto, Nan::New("shaderResourceResidency").ToLocalChecked(), GetshaderResourceResidency, SetshaderResourceResidency, ctor);
  SetPrototypeAccessor(proto, Nan::New("shaderResourceMinLod").ToLocalChecked(), GetshaderResourceMinLod, SetshaderResourceMinLod, ctor);
  SetPrototypeAccessor(proto, Nan::New("sparseBinding").ToLocalChecked(), GetsparseBinding, SetsparseBinding, ctor);
  SetPrototypeAccessor(proto, Nan::New("sparseResidencyBuffer").ToLocalChecked(), GetsparseResidencyBuffer, SetsparseResidencyBuffer, ctor);
  SetPrototypeAccessor(proto, Nan::New("sparseResidencyImage2D").ToLocalChecked(), GetsparseResidencyImage2D, SetsparseResidencyImage2D, ctor);
  SetPrototypeAccessor(proto, Nan::New("sparseResidencyImage3D").ToLocalChecked(), GetsparseResidencyImage3D, SetsparseResidencyImage3D, ctor);
  SetPrototypeAccessor(proto, Nan::New("sparseResidency2Samples").ToLocalChecked(), GetsparseResidency2Samples, SetsparseResidency2Samples, ctor);
  SetPrototypeAccessor(proto, Nan::New("sparseResidency4Samples").ToLocalChecked(), GetsparseResidency4Samples, SetsparseResidency4Samples, ctor);
  SetPrototypeAccessor(proto, Nan::New("sparseResidency8Samples").ToLocalChecked(), GetsparseResidency8Samples, SetsparseResidency8Samples, ctor);
  SetPrototypeAccessor(proto, Nan::New("sparseResidency16Samples").ToLocalChecked(), GetsparseResidency16Samples, SetsparseResidency16Samples, ctor);
  SetPrototypeAccessor(proto, Nan::New("sparseResidencyAliased").ToLocalChecked(), GetsparseResidencyAliased, SetsparseResidencyAliased, ctor);
  SetPrototypeAccessor(proto, Nan::New("variableMultisampleRate").ToLocalChecked(), GetvariableMultisampleRate, SetvariableMultisampleRate, ctor);
  SetPrototypeAccessor(proto, Nan::New("inheritedQueries").ToLocalChecked(), GetinheritedQueries, SetinheritedQueries, ctor);
  Nan::Set(target, Nan::New("VkPhysicalDeviceFeatures").ToLocalChecked(), ctor->GetFunction());
}

bool _VkPhysicalDeviceFeatures::flush() {
  _VkPhysicalDeviceFeatures *self = this;
  
  return true;
}

NAN_METHOD(_VkPhysicalDeviceFeatures::New) {
  if (info.IsConstructCall()) {
    _VkPhysicalDeviceFeatures* self = new _VkPhysicalDeviceFeatures();
    self->Wrap(info.Holder());
    
    if (info[0]->IsObject()) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(info[0]).ToLocalChecked();
      v8::Local<v8::String> sAccess0 = Nan::New("robustBufferAccess").ToLocalChecked();
      v8::Local<v8::String> sAccess1 = Nan::New("fullDrawIndexUint32").ToLocalChecked();
      v8::Local<v8::String> sAccess2 = Nan::New("imageCubeArray").ToLocalChecked();
      v8::Local<v8::String> sAccess3 = Nan::New("independentBlend").ToLocalChecked();
      v8::Local<v8::String> sAccess4 = Nan::New("geometryShader").ToLocalChecked();
      v8::Local<v8::String> sAccess5 = Nan::New("tessellationShader").ToLocalChecked();
      v8::Local<v8::String> sAccess6 = Nan::New("sampleRateShading").ToLocalChecked();
      v8::Local<v8::String> sAccess7 = Nan::New("dualSrcBlend").ToLocalChecked();
      v8::Local<v8::String> sAccess8 = Nan::New("logicOp").ToLocalChecked();
      v8::Local<v8::String> sAccess9 = Nan::New("multiDrawIndirect").ToLocalChecked();
      v8::Local<v8::String> sAccess10 = Nan::New("drawIndirectFirstInstance").ToLocalChecked();
      v8::Local<v8::String> sAccess11 = Nan::New("depthClamp").ToLocalChecked();
      v8::Local<v8::String> sAccess12 = Nan::New("depthBiasClamp").ToLocalChecked();
      v8::Local<v8::String> sAccess13 = Nan::New("fillModeNonSolid").ToLocalChecked();
      v8::Local<v8::String> sAccess14 = Nan::New("depthBounds").ToLocalChecked();
      v8::Local<v8::String> sAccess15 = Nan::New("wideLines").ToLocalChecked();
      v8::Local<v8::String> sAccess16 = Nan::New("largePoints").ToLocalChecked();
      v8::Local<v8::String> sAccess17 = Nan::New("alphaToOne").ToLocalChecked();
      v8::Local<v8::String> sAccess18 = Nan::New("multiViewport").ToLocalChecked();
      v8::Local<v8::String> sAccess19 = Nan::New("samplerAnisotropy").ToLocalChecked();
      v8::Local<v8::String> sAccess20 = Nan::New("textureCompressionETC2").ToLocalChecked();
      v8::Local<v8::String> sAccess21 = Nan::New("textureCompressionASTC_LDR").ToLocalChecked();
      v8::Local<v8::String> sAccess22 = Nan::New("textureCompressionBC").ToLocalChecked();
      v8::Local<v8::String> sAccess23 = Nan::New("occlusionQueryPrecise").ToLocalChecked();
      v8::Local<v8::String> sAccess24 = Nan::New("pipelineStatisticsQuery").ToLocalChecked();
      v8::Local<v8::String> sAccess25 = Nan::New("vertexPipelineStoresAndAtomics").ToLocalChecked();
      v8::Local<v8::String> sAccess26 = Nan::New("fragmentStoresAndAtomics").ToLocalChecked();
      v8::Local<v8::String> sAccess27 = Nan::New("shaderTessellationAndGeometryPointSize").ToLocalChecked();
      v8::Local<v8::String> sAccess28 = Nan::New("shaderImageGatherExtended").ToLocalChecked();
      v8::Local<v8::String> sAccess29 = Nan::New("shaderStorageImageExtendedFormats").ToLocalChecked();
      v8::Local<v8::String> sAccess30 = Nan::New("shaderStorageImageMultisample").ToLocalChecked();
      v8::Local<v8::String> sAccess31 = Nan::New("shaderStorageImageReadWithoutFormat").ToLocalChecked();
      v8::Local<v8::String> sAccess32 = Nan::New("shaderStorageImageWriteWithoutFormat").ToLocalChecked();
      v8::Local<v8::String> sAccess33 = Nan::New("shaderUniformBufferArrayDynamicIndexing").ToLocalChecked();
      v8::Local<v8::String> sAccess34 = Nan::New("shaderSampledImageArrayDynamicIndexing").ToLocalChecked();
      v8::Local<v8::String> sAccess35 = Nan::New("shaderStorageBufferArrayDynamicIndexing").ToLocalChecked();
      v8::Local<v8::String> sAccess36 = Nan::New("shaderStorageImageArrayDynamicIndexing").ToLocalChecked();
      v8::Local<v8::String> sAccess37 = Nan::New("shaderClipDistance").ToLocalChecked();
      v8::Local<v8::String> sAccess38 = Nan::New("shaderCullDistance").ToLocalChecked();
      v8::Local<v8::String> sAccess39 = Nan::New("shaderFloat64").ToLocalChecked();
      v8::Local<v8::String> sAccess40 = Nan::New("shaderInt64").ToLocalChecked();
      v8::Local<v8::String> sAccess41 = Nan::New("shaderInt16").ToLocalChecked();
      v8::Local<v8::String> sAccess42 = Nan::New("shaderResourceResidency").ToLocalChecked();
      v8::Local<v8::String> sAccess43 = Nan::New("shaderResourceMinLod").ToLocalChecked();
      v8::Local<v8::String> sAccess44 = Nan::New("sparseBinding").ToLocalChecked();
      v8::Local<v8::String> sAccess45 = Nan::New("sparseResidencyBuffer").ToLocalChecked();
      v8::Local<v8::String> sAccess46 = Nan::New("sparseResidencyImage2D").ToLocalChecked();
      v8::Local<v8::String> sAccess47 = Nan::New("sparseResidencyImage3D").ToLocalChecked();
      v8::Local<v8::String> sAccess48 = Nan::New("sparseResidency2Samples").ToLocalChecked();
      v8::Local<v8::String> sAccess49 = Nan::New("sparseResidency4Samples").ToLocalChecked();
      v8::Local<v8::String> sAccess50 = Nan::New("sparseResidency8Samples").ToLocalChecked();
      v8::Local<v8::String> sAccess51 = Nan::New("sparseResidency16Samples").ToLocalChecked();
      v8::Local<v8::String> sAccess52 = Nan::New("sparseResidencyAliased").ToLocalChecked();
      v8::Local<v8::String> sAccess53 = Nan::New("variableMultisampleRate").ToLocalChecked();
      v8::Local<v8::String> sAccess54 = Nan::New("inheritedQueries").ToLocalChecked();
      if (obj->Has(sAccess0)) info.This()->Set(sAccess0, obj->Get(sAccess0));
      if (obj->Has(sAccess1)) info.This()->Set(sAccess1, obj->Get(sAccess1));
      if (obj->Has(sAccess2)) info.This()->Set(sAccess2, obj->Get(sAccess2));
      if (obj->Has(sAccess3)) info.This()->Set(sAccess3, obj->Get(sAccess3));
      if (obj->Has(sAccess4)) info.This()->Set(sAccess4, obj->Get(sAccess4));
      if (obj->Has(sAccess5)) info.This()->Set(sAccess5, obj->Get(sAccess5));
      if (obj->Has(sAccess6)) info.This()->Set(sAccess6, obj->Get(sAccess6));
      if (obj->Has(sAccess7)) info.This()->Set(sAccess7, obj->Get(sAccess7));
      if (obj->Has(sAccess8)) info.This()->Set(sAccess8, obj->Get(sAccess8));
      if (obj->Has(sAccess9)) info.This()->Set(sAccess9, obj->Get(sAccess9));
      if (obj->Has(sAccess10)) info.This()->Set(sAccess10, obj->Get(sAccess10));
      if (obj->Has(sAccess11)) info.This()->Set(sAccess11, obj->Get(sAccess11));
      if (obj->Has(sAccess12)) info.This()->Set(sAccess12, obj->Get(sAccess12));
      if (obj->Has(sAccess13)) info.This()->Set(sAccess13, obj->Get(sAccess13));
      if (obj->Has(sAccess14)) info.This()->Set(sAccess14, obj->Get(sAccess14));
      if (obj->Has(sAccess15)) info.This()->Set(sAccess15, obj->Get(sAccess15));
      if (obj->Has(sAccess16)) info.This()->Set(sAccess16, obj->Get(sAccess16));
      if (obj->Has(sAccess17)) info.This()->Set(sAccess17, obj->Get(sAccess17));
      if (obj->Has(sAccess18)) info.This()->Set(sAccess18, obj->Get(sAccess18));
      if (obj->Has(sAccess19)) info.This()->Set(sAccess19, obj->Get(sAccess19));
      if (obj->Has(sAccess20)) info.This()->Set(sAccess20, obj->Get(sAccess20));
      if (obj->Has(sAccess21)) info.This()->Set(sAccess21, obj->Get(sAccess21));
      if (obj->Has(sAccess22)) info.This()->Set(sAccess22, obj->Get(sAccess22));
      if (obj->Has(sAccess23)) info.This()->Set(sAccess23, obj->Get(sAccess23));
      if (obj->Has(sAccess24)) info.This()->Set(sAccess24, obj->Get(sAccess24));
      if (obj->Has(sAccess25)) info.This()->Set(sAccess25, obj->Get(sAccess25));
      if (obj->Has(sAccess26)) info.This()->Set(sAccess26, obj->Get(sAccess26));
      if (obj->Has(sAccess27)) info.This()->Set(sAccess27, obj->Get(sAccess27));
      if (obj->Has(sAccess28)) info.This()->Set(sAccess28, obj->Get(sAccess28));
      if (obj->Has(sAccess29)) info.This()->Set(sAccess29, obj->Get(sAccess29));
      if (obj->Has(sAccess30)) info.This()->Set(sAccess30, obj->Get(sAccess30));
      if (obj->Has(sAccess31)) info.This()->Set(sAccess31, obj->Get(sAccess31));
      if (obj->Has(sAccess32)) info.This()->Set(sAccess32, obj->Get(sAccess32));
      if (obj->Has(sAccess33)) info.This()->Set(sAccess33, obj->Get(sAccess33));
      if (obj->Has(sAccess34)) info.This()->Set(sAccess34, obj->Get(sAccess34));
      if (obj->Has(sAccess35)) info.This()->Set(sAccess35, obj->Get(sAccess35));
      if (obj->Has(sAccess36)) info.This()->Set(sAccess36, obj->Get(sAccess36));
      if (obj->Has(sAccess37)) info.This()->Set(sAccess37, obj->Get(sAccess37));
      if (obj->Has(sAccess38)) info.This()->Set(sAccess38, obj->Get(sAccess38));
      if (obj->Has(sAccess39)) info.This()->Set(sAccess39, obj->Get(sAccess39));
      if (obj->Has(sAccess40)) info.This()->Set(sAccess40, obj->Get(sAccess40));
      if (obj->Has(sAccess41)) info.This()->Set(sAccess41, obj->Get(sAccess41));
      if (obj->Has(sAccess42)) info.This()->Set(sAccess42, obj->Get(sAccess42));
      if (obj->Has(sAccess43)) info.This()->Set(sAccess43, obj->Get(sAccess43));
      if (obj->Has(sAccess44)) info.This()->Set(sAccess44, obj->Get(sAccess44));
      if (obj->Has(sAccess45)) info.This()->Set(sAccess45, obj->Get(sAccess45));
      if (obj->Has(sAccess46)) info.This()->Set(sAccess46, obj->Get(sAccess46));
      if (obj->Has(sAccess47)) info.This()->Set(sAccess47, obj->Get(sAccess47));
      if (obj->Has(sAccess48)) info.This()->Set(sAccess48, obj->Get(sAccess48));
      if (obj->Has(sAccess49)) info.This()->Set(sAccess49, obj->Get(sAccess49));
      if (obj->Has(sAccess50)) info.This()->Set(sAccess50, obj->Get(sAccess50));
      if (obj->Has(sAccess51)) info.This()->Set(sAccess51, obj->Get(sAccess51));
      if (obj->Has(sAccess52)) info.This()->Set(sAccess52, obj->Get(sAccess52));
      if (obj->Has(sAccess53)) info.This()->Set(sAccess53, obj->Get(sAccess53));
      if (obj->Has(sAccess54)) info.This()->Set(sAccess54, obj->Get(sAccess54));
      
    }
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkPhysicalDeviceFeatures constructor cannot be invoked without 'new'");
  }
};

// robustBufferAccess
NAN_GETTER(_VkPhysicalDeviceFeatures::GetrobustBufferAccess) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.robustBufferAccess));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetrobustBufferAccess) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.robustBufferAccess = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFeatures.robustBufferAccess' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// fullDrawIndexUint32
NAN_GETTER(_VkPhysicalDeviceFeatures::GetfullDrawIndexUint32) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.fullDrawIndexUint32));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetfullDrawIndexUint32) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.fullDrawIndexUint32 = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFeatures.fullDrawIndexUint32' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// imageCubeArray
NAN_GETTER(_VkPhysicalDeviceFeatures::GetimageCubeArray) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.imageCubeArray));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetimageCubeArray) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.imageCubeArray = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFeatures.imageCubeArray' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// independentBlend
NAN_GETTER(_VkPhysicalDeviceFeatures::GetindependentBlend) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.independentBlend));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetindependentBlend) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.independentBlend = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFeatures.independentBlend' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// geometryShader
NAN_GETTER(_VkPhysicalDeviceFeatures::GetgeometryShader) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.geometryShader));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetgeometryShader) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.geometryShader = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFeatures.geometryShader' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// tessellationShader
NAN_GETTER(_VkPhysicalDeviceFeatures::GettessellationShader) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.tessellationShader));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SettessellationShader) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.tessellationShader = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFeatures.tessellationShader' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// sampleRateShading
NAN_GETTER(_VkPhysicalDeviceFeatures::GetsampleRateShading) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sampleRateShading));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetsampleRateShading) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.sampleRateShading = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFeatures.sampleRateShading' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// dualSrcBlend
NAN_GETTER(_VkPhysicalDeviceFeatures::GetdualSrcBlend) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.dualSrcBlend));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetdualSrcBlend) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.dualSrcBlend = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFeatures.dualSrcBlend' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// logicOp
NAN_GETTER(_VkPhysicalDeviceFeatures::GetlogicOp) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.logicOp));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetlogicOp) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.logicOp = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFeatures.logicOp' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// multiDrawIndirect
NAN_GETTER(_VkPhysicalDeviceFeatures::GetmultiDrawIndirect) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.multiDrawIndirect));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetmultiDrawIndirect) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.multiDrawIndirect = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFeatures.multiDrawIndirect' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// drawIndirectFirstInstance
NAN_GETTER(_VkPhysicalDeviceFeatures::GetdrawIndirectFirstInstance) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.drawIndirectFirstInstance));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetdrawIndirectFirstInstance) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.drawIndirectFirstInstance = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFeatures.drawIndirectFirstInstance' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// depthClamp
NAN_GETTER(_VkPhysicalDeviceFeatures::GetdepthClamp) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.depthClamp));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetdepthClamp) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.depthClamp = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFeatures.depthClamp' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// depthBiasClamp
NAN_GETTER(_VkPhysicalDeviceFeatures::GetdepthBiasClamp) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.depthBiasClamp));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetdepthBiasClamp) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.depthBiasClamp = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFeatures.depthBiasClamp' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// fillModeNonSolid
NAN_GETTER(_VkPhysicalDeviceFeatures::GetfillModeNonSolid) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.fillModeNonSolid));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetfillModeNonSolid) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.fillModeNonSolid = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFeatures.fillModeNonSolid' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// depthBounds
NAN_GETTER(_VkPhysicalDeviceFeatures::GetdepthBounds) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.depthBounds));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetdepthBounds) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.depthBounds = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFeatures.depthBounds' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// wideLines
NAN_GETTER(_VkPhysicalDeviceFeatures::GetwideLines) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.wideLines));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetwideLines) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.wideLines = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFeatures.wideLines' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// largePoints
NAN_GETTER(_VkPhysicalDeviceFeatures::GetlargePoints) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.largePoints));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetlargePoints) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.largePoints = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFeatures.largePoints' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// alphaToOne
NAN_GETTER(_VkPhysicalDeviceFeatures::GetalphaToOne) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.alphaToOne));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetalphaToOne) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.alphaToOne = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFeatures.alphaToOne' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// multiViewport
NAN_GETTER(_VkPhysicalDeviceFeatures::GetmultiViewport) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.multiViewport));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetmultiViewport) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.multiViewport = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFeatures.multiViewport' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// samplerAnisotropy
NAN_GETTER(_VkPhysicalDeviceFeatures::GetsamplerAnisotropy) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.samplerAnisotropy));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetsamplerAnisotropy) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.samplerAnisotropy = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFeatures.samplerAnisotropy' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// textureCompressionETC2
NAN_GETTER(_VkPhysicalDeviceFeatures::GettextureCompressionETC2) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.textureCompressionETC2));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SettextureCompressionETC2) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.textureCompressionETC2 = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFeatures.textureCompressionETC2' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// textureCompressionASTC_LDR
NAN_GETTER(_VkPhysicalDeviceFeatures::GettextureCompressionASTC_LDR) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.textureCompressionASTC_LDR));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SettextureCompressionASTC_LDR) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.textureCompressionASTC_LDR = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFeatures.textureCompressionASTC_LDR' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// textureCompressionBC
NAN_GETTER(_VkPhysicalDeviceFeatures::GettextureCompressionBC) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.textureCompressionBC));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SettextureCompressionBC) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.textureCompressionBC = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFeatures.textureCompressionBC' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// occlusionQueryPrecise
NAN_GETTER(_VkPhysicalDeviceFeatures::GetocclusionQueryPrecise) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.occlusionQueryPrecise));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetocclusionQueryPrecise) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.occlusionQueryPrecise = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFeatures.occlusionQueryPrecise' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// pipelineStatisticsQuery
NAN_GETTER(_VkPhysicalDeviceFeatures::GetpipelineStatisticsQuery) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.pipelineStatisticsQuery));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetpipelineStatisticsQuery) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.pipelineStatisticsQuery = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFeatures.pipelineStatisticsQuery' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// vertexPipelineStoresAndAtomics
NAN_GETTER(_VkPhysicalDeviceFeatures::GetvertexPipelineStoresAndAtomics) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.vertexPipelineStoresAndAtomics));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetvertexPipelineStoresAndAtomics) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.vertexPipelineStoresAndAtomics = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFeatures.vertexPipelineStoresAndAtomics' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// fragmentStoresAndAtomics
NAN_GETTER(_VkPhysicalDeviceFeatures::GetfragmentStoresAndAtomics) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.fragmentStoresAndAtomics));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetfragmentStoresAndAtomics) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.fragmentStoresAndAtomics = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFeatures.fragmentStoresAndAtomics' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// shaderTessellationAndGeometryPointSize
NAN_GETTER(_VkPhysicalDeviceFeatures::GetshaderTessellationAndGeometryPointSize) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.shaderTessellationAndGeometryPointSize));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetshaderTessellationAndGeometryPointSize) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.shaderTessellationAndGeometryPointSize = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFeatures.shaderTessellationAndGeometryPointSize' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// shaderImageGatherExtended
NAN_GETTER(_VkPhysicalDeviceFeatures::GetshaderImageGatherExtended) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.shaderImageGatherExtended));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetshaderImageGatherExtended) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.shaderImageGatherExtended = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFeatures.shaderImageGatherExtended' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// shaderStorageImageExtendedFormats
NAN_GETTER(_VkPhysicalDeviceFeatures::GetshaderStorageImageExtendedFormats) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.shaderStorageImageExtendedFormats));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetshaderStorageImageExtendedFormats) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.shaderStorageImageExtendedFormats = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFeatures.shaderStorageImageExtendedFormats' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// shaderStorageImageMultisample
NAN_GETTER(_VkPhysicalDeviceFeatures::GetshaderStorageImageMultisample) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.shaderStorageImageMultisample));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetshaderStorageImageMultisample) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.shaderStorageImageMultisample = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFeatures.shaderStorageImageMultisample' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// shaderStorageImageReadWithoutFormat
NAN_GETTER(_VkPhysicalDeviceFeatures::GetshaderStorageImageReadWithoutFormat) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.shaderStorageImageReadWithoutFormat));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetshaderStorageImageReadWithoutFormat) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.shaderStorageImageReadWithoutFormat = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFeatures.shaderStorageImageReadWithoutFormat' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// shaderStorageImageWriteWithoutFormat
NAN_GETTER(_VkPhysicalDeviceFeatures::GetshaderStorageImageWriteWithoutFormat) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.shaderStorageImageWriteWithoutFormat));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetshaderStorageImageWriteWithoutFormat) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.shaderStorageImageWriteWithoutFormat = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFeatures.shaderStorageImageWriteWithoutFormat' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// shaderUniformBufferArrayDynamicIndexing
NAN_GETTER(_VkPhysicalDeviceFeatures::GetshaderUniformBufferArrayDynamicIndexing) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.shaderUniformBufferArrayDynamicIndexing));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetshaderUniformBufferArrayDynamicIndexing) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.shaderUniformBufferArrayDynamicIndexing = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFeatures.shaderUniformBufferArrayDynamicIndexing' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// shaderSampledImageArrayDynamicIndexing
NAN_GETTER(_VkPhysicalDeviceFeatures::GetshaderSampledImageArrayDynamicIndexing) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.shaderSampledImageArrayDynamicIndexing));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetshaderSampledImageArrayDynamicIndexing) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.shaderSampledImageArrayDynamicIndexing = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFeatures.shaderSampledImageArrayDynamicIndexing' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// shaderStorageBufferArrayDynamicIndexing
NAN_GETTER(_VkPhysicalDeviceFeatures::GetshaderStorageBufferArrayDynamicIndexing) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.shaderStorageBufferArrayDynamicIndexing));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetshaderStorageBufferArrayDynamicIndexing) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.shaderStorageBufferArrayDynamicIndexing = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFeatures.shaderStorageBufferArrayDynamicIndexing' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// shaderStorageImageArrayDynamicIndexing
NAN_GETTER(_VkPhysicalDeviceFeatures::GetshaderStorageImageArrayDynamicIndexing) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.shaderStorageImageArrayDynamicIndexing));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetshaderStorageImageArrayDynamicIndexing) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.shaderStorageImageArrayDynamicIndexing = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFeatures.shaderStorageImageArrayDynamicIndexing' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// shaderClipDistance
NAN_GETTER(_VkPhysicalDeviceFeatures::GetshaderClipDistance) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.shaderClipDistance));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetshaderClipDistance) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.shaderClipDistance = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFeatures.shaderClipDistance' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// shaderCullDistance
NAN_GETTER(_VkPhysicalDeviceFeatures::GetshaderCullDistance) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.shaderCullDistance));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetshaderCullDistance) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.shaderCullDistance = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFeatures.shaderCullDistance' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// shaderFloat64
NAN_GETTER(_VkPhysicalDeviceFeatures::GetshaderFloat64) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.shaderFloat64));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetshaderFloat64) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.shaderFloat64 = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFeatures.shaderFloat64' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// shaderInt64
NAN_GETTER(_VkPhysicalDeviceFeatures::GetshaderInt64) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.shaderInt64));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetshaderInt64) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.shaderInt64 = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFeatures.shaderInt64' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// shaderInt16
NAN_GETTER(_VkPhysicalDeviceFeatures::GetshaderInt16) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.shaderInt16));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetshaderInt16) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.shaderInt16 = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFeatures.shaderInt16' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// shaderResourceResidency
NAN_GETTER(_VkPhysicalDeviceFeatures::GetshaderResourceResidency) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.shaderResourceResidency));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetshaderResourceResidency) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.shaderResourceResidency = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFeatures.shaderResourceResidency' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// shaderResourceMinLod
NAN_GETTER(_VkPhysicalDeviceFeatures::GetshaderResourceMinLod) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.shaderResourceMinLod));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetshaderResourceMinLod) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.shaderResourceMinLod = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFeatures.shaderResourceMinLod' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// sparseBinding
NAN_GETTER(_VkPhysicalDeviceFeatures::GetsparseBinding) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sparseBinding));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetsparseBinding) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.sparseBinding = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFeatures.sparseBinding' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// sparseResidencyBuffer
NAN_GETTER(_VkPhysicalDeviceFeatures::GetsparseResidencyBuffer) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sparseResidencyBuffer));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetsparseResidencyBuffer) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.sparseResidencyBuffer = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFeatures.sparseResidencyBuffer' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// sparseResidencyImage2D
NAN_GETTER(_VkPhysicalDeviceFeatures::GetsparseResidencyImage2D) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sparseResidencyImage2D));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetsparseResidencyImage2D) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.sparseResidencyImage2D = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFeatures.sparseResidencyImage2D' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// sparseResidencyImage3D
NAN_GETTER(_VkPhysicalDeviceFeatures::GetsparseResidencyImage3D) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sparseResidencyImage3D));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetsparseResidencyImage3D) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.sparseResidencyImage3D = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFeatures.sparseResidencyImage3D' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// sparseResidency2Samples
NAN_GETTER(_VkPhysicalDeviceFeatures::GetsparseResidency2Samples) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sparseResidency2Samples));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetsparseResidency2Samples) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.sparseResidency2Samples = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFeatures.sparseResidency2Samples' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// sparseResidency4Samples
NAN_GETTER(_VkPhysicalDeviceFeatures::GetsparseResidency4Samples) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sparseResidency4Samples));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetsparseResidency4Samples) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.sparseResidency4Samples = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFeatures.sparseResidency4Samples' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// sparseResidency8Samples
NAN_GETTER(_VkPhysicalDeviceFeatures::GetsparseResidency8Samples) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sparseResidency8Samples));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetsparseResidency8Samples) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.sparseResidency8Samples = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFeatures.sparseResidency8Samples' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// sparseResidency16Samples
NAN_GETTER(_VkPhysicalDeviceFeatures::GetsparseResidency16Samples) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sparseResidency16Samples));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetsparseResidency16Samples) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.sparseResidency16Samples = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFeatures.sparseResidency16Samples' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// sparseResidencyAliased
NAN_GETTER(_VkPhysicalDeviceFeatures::GetsparseResidencyAliased) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sparseResidencyAliased));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetsparseResidencyAliased) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.sparseResidencyAliased = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFeatures.sparseResidencyAliased' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// variableMultisampleRate
NAN_GETTER(_VkPhysicalDeviceFeatures::GetvariableMultisampleRate) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.variableMultisampleRate));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetvariableMultisampleRate) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.variableMultisampleRate = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFeatures.variableMultisampleRate' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// inheritedQueries
NAN_GETTER(_VkPhysicalDeviceFeatures::GetinheritedQueries) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.inheritedQueries));
}NAN_SETTER(_VkPhysicalDeviceFeatures::SetinheritedQueries) {
  _VkPhysicalDeviceFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.inheritedQueries = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceFeatures.inheritedQueries' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}