/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY node-vulkan v0.0.9
 */
#ifndef __VK_VKRENDERPASSCREATEINFO2KHR_H__
#define __VK_VKRENDERPASSCREATEINFO2KHR_H__

#include <nan.h>

#include <vulkan/vulkan_win32.h>
#define GLFW_INCLUDE_VULKAN
#include <GLFW/glfw3.h>

class _VkRenderPassCreateInfo2KHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    
    static NAN_GETTER(GetattachmentCount);
    static NAN_SETTER(SetattachmentCount);
    
    std::vector<VkAttachmentDescription2KHR>* vpAttachments;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pAttachments;
    static NAN_GETTER(GetpAttachments);
    static NAN_SETTER(SetpAttachments);
    
    static NAN_GETTER(GetsubpassCount);
    static NAN_SETTER(SetsubpassCount);
    
    std::vector<VkSubpassDescription2KHR>* vpSubpasses;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pSubpasses;
    static NAN_GETTER(GetpSubpasses);
    static NAN_SETTER(SetpSubpasses);
    
    static NAN_GETTER(GetdependencyCount);
    static NAN_SETTER(SetdependencyCount);
    
    std::vector<VkSubpassDependency2KHR>* vpDependencies;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pDependencies;
    static NAN_GETTER(GetpDependencies);
    static NAN_SETTER(SetpDependencies);
    
    static NAN_GETTER(GetcorrelatedViewMaskCount);
    static NAN_SETTER(SetcorrelatedViewMaskCount);
    
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pCorrelatedViewMasks;
    static NAN_GETTER(GetpCorrelatedViewMasks);
    static NAN_SETTER(SetpCorrelatedViewMasks);
    

    // real instance
    VkRenderPassCreateInfo2KHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkRenderPassCreateInfo2KHR();
    ~_VkRenderPassCreateInfo2KHR();

};

#endif