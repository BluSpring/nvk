/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY node-vulkan v0.0.9
 */
#include "utils.h"
#include "index.h"
#include "VkFramebufferCreateInfo.h"

Nan::Persistent<v8::FunctionTemplate> _VkFramebufferCreateInfo::constructor;

_VkFramebufferCreateInfo::_VkFramebufferCreateInfo() {
  instance.sType = VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO;
  vpAttachments = new std::vector<VkImageView>;
  
}

_VkFramebufferCreateInfo::~_VkFramebufferCreateInfo() {
  //printf("VkFramebufferCreateInfo deconstructed!!\n");
  
  
  pNext.Reset();
  
  
  
  
  vpAttachments->clear();
  delete vpAttachments;
  
  pAttachments.Reset();
  
  
  
  
}

void _VkFramebufferCreateInfo::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkFramebufferCreateInfo::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkFramebufferCreateInfo").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("sType").ToLocalChecked(), GetsType, SetsType, ctor);
  SetPrototypeAccessor(proto, Nan::New("pNext").ToLocalChecked(), GetpNext, SetpNext, ctor);
  SetPrototypeAccessor(proto, Nan::New("flags").ToLocalChecked(), Getflags, Setflags, ctor);
  SetPrototypeAccessor(proto, Nan::New("renderPass").ToLocalChecked(), GetrenderPass, SetrenderPass, ctor);
  SetPrototypeAccessor(proto, Nan::New("attachmentCount").ToLocalChecked(), GetattachmentCount, SetattachmentCount, ctor);
  SetPrototypeAccessor(proto, Nan::New("pAttachments").ToLocalChecked(), GetpAttachments, SetpAttachments, ctor);
  SetPrototypeAccessor(proto, Nan::New("width").ToLocalChecked(), Getwidth, Setwidth, ctor);
  SetPrototypeAccessor(proto, Nan::New("height").ToLocalChecked(), Getheight, Setheight, ctor);
  SetPrototypeAccessor(proto, Nan::New("layers").ToLocalChecked(), Getlayers, Setlayers, ctor);
  Nan::Set(target, Nan::New("VkFramebufferCreateInfo").ToLocalChecked(), ctor->GetFunction());
}

bool _VkFramebufferCreateInfo::flush() {
  _VkFramebufferCreateInfo *self = this;
  if (!(self->pAttachments.IsEmpty())) {
    v8::Local<v8::Value> value = Nan::New(self->pAttachments);
    
    v8::Local<v8::Array> array = v8::Local<v8::Array>::Cast(value);
    // validate length
    if (array->Length() != self->instance.attachmentCount) {
      Nan::ThrowRangeError("Invalid array length, expected array length of 'attachmentCount' for 'VkFramebufferCreateInfo.pAttachments'");
      return false;
    }
    std::vector<VkImageView>* data = self->vpAttachments;
    data->clear();
    for (unsigned int ii = 0; ii < array->Length(); ++ii) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(Nan::Get(array, ii).ToLocalChecked()).ToLocalChecked();
      if (!(Nan::New(_VkImageView::constructor)->HasInstance(obj))) {
        
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkImageView]' for 'VkFramebufferCreateInfo.pAttachments' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
        return false;
      }
      _VkImageView* result = Nan::ObjectWrap::Unwrap<_VkImageView>(obj);
      
      data->push_back(result->instance);
    };
    self->instance.pAttachments = data->data();
  }
  return true;
}

NAN_METHOD(_VkFramebufferCreateInfo::New) {
  if (info.IsConstructCall()) {
    _VkFramebufferCreateInfo* self = new _VkFramebufferCreateInfo();
    self->Wrap(info.Holder());
    
    if (info[0]->IsObject()) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(info[0]).ToLocalChecked();
      v8::Local<v8::String> sAccess0 = Nan::New("sType").ToLocalChecked();
      v8::Local<v8::String> sAccess1 = Nan::New("pNext").ToLocalChecked();
      v8::Local<v8::String> sAccess2 = Nan::New("flags").ToLocalChecked();
      v8::Local<v8::String> sAccess3 = Nan::New("renderPass").ToLocalChecked();
      v8::Local<v8::String> sAccess4 = Nan::New("attachmentCount").ToLocalChecked();
      v8::Local<v8::String> sAccess5 = Nan::New("pAttachments").ToLocalChecked();
      v8::Local<v8::String> sAccess6 = Nan::New("width").ToLocalChecked();
      v8::Local<v8::String> sAccess7 = Nan::New("height").ToLocalChecked();
      v8::Local<v8::String> sAccess8 = Nan::New("layers").ToLocalChecked();
      if (obj->Has(sAccess0)) info.This()->Set(sAccess0, obj->Get(sAccess0));
      if (obj->Has(sAccess1)) info.This()->Set(sAccess1, obj->Get(sAccess1));
      if (obj->Has(sAccess2)) info.This()->Set(sAccess2, obj->Get(sAccess2));
      if (obj->Has(sAccess3)) info.This()->Set(sAccess3, obj->Get(sAccess3));
      if (obj->Has(sAccess4)) info.This()->Set(sAccess4, obj->Get(sAccess4));
      if (obj->Has(sAccess5)) info.This()->Set(sAccess5, obj->Get(sAccess5));
      if (obj->Has(sAccess6)) info.This()->Set(sAccess6, obj->Get(sAccess6));
      if (obj->Has(sAccess7)) info.This()->Set(sAccess7, obj->Get(sAccess7));
      if (obj->Has(sAccess8)) info.This()->Set(sAccess8, obj->Get(sAccess8));
      
    }
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkFramebufferCreateInfo constructor cannot be invoked without 'new'");
  }
};

// sType
NAN_GETTER(_VkFramebufferCreateInfo::GetsType) {
  _VkFramebufferCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkFramebufferCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sType));
}NAN_SETTER(_VkFramebufferCreateInfo::SetsType) {
  _VkFramebufferCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkFramebufferCreateInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.sType = static_cast<VkStructureType>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkFramebufferCreateInfo.sType' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// pNext
NAN_GETTER(_VkFramebufferCreateInfo::GetpNext) {
  _VkFramebufferCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkFramebufferCreateInfo>(info.This());
}NAN_SETTER(_VkFramebufferCreateInfo::SetpNext) {
  _VkFramebufferCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkFramebufferCreateInfo>(info.This());
}// flags
NAN_GETTER(_VkFramebufferCreateInfo::Getflags) {
  _VkFramebufferCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkFramebufferCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.flags));
}NAN_SETTER(_VkFramebufferCreateInfo::Setflags) {
  _VkFramebufferCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkFramebufferCreateInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.flags = static_cast<VkFramebufferCreateFlags>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkFramebufferCreateInfo.flags' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// renderPass
NAN_GETTER(_VkFramebufferCreateInfo::GetrenderPass) {
  _VkFramebufferCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkFramebufferCreateInfo>(info.This());
  if (self->renderPass.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->renderPass);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkFramebufferCreateInfo::SetrenderPass) {
  _VkFramebufferCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkFramebufferCreateInfo>(info.This());
  // js
  if (!value->IsNull()) {
    v8::Local<v8::Object> obj = Nan::To<v8::Object>(value).ToLocalChecked();
    if (Nan::New(_VkRenderPass::constructor)->HasInstance(obj)) {
      self->renderPass.Reset<v8::Object>(value.As<v8::Object>());
      _VkRenderPass* inst = Nan::ObjectWrap::Unwrap<_VkRenderPass>(obj);
      ;
      self->instance.renderPass = inst->instance;
    } else {
      
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkRenderPass]' for 'VkFramebufferCreateInfo.renderPass' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
      return;
    }
  } else if (value->IsNull()) {
    self->renderPass.Reset();
    self->instance.renderPass = VK_NULL_HANDLE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkRenderPass]' for 'VkFramebufferCreateInfo.renderPass' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// attachmentCount
NAN_GETTER(_VkFramebufferCreateInfo::GetattachmentCount) {
  _VkFramebufferCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkFramebufferCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.attachmentCount));
}NAN_SETTER(_VkFramebufferCreateInfo::SetattachmentCount) {
  _VkFramebufferCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkFramebufferCreateInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.attachmentCount = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkFramebufferCreateInfo.attachmentCount' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// pAttachments
NAN_GETTER(_VkFramebufferCreateInfo::GetpAttachments) {
  _VkFramebufferCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkFramebufferCreateInfo>(info.This());
  if (self->pAttachments.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->pAttachments);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkFramebufferCreateInfo::SetpAttachments) {
  _VkFramebufferCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkFramebufferCreateInfo>(info.This());
  
    // js
    if (value->IsArray()) {
      self->pAttachments.Reset<v8::Array>(value.As<v8::Array>());
    } else if (value->IsNull()) {
      self->pAttachments.Reset();
      self->instance.pAttachments = nullptr;
    } else {
      
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkImageView]' for 'VkFramebufferCreateInfo.pAttachments' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
      return;
    }
  
  // vulkan
  if (value->IsArray()) {
    
  } else if (value->IsNull()) {
    self->instance.pAttachments = VK_NULL_HANDLE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkImageView]' for 'VkFramebufferCreateInfo.pAttachments' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// width
NAN_GETTER(_VkFramebufferCreateInfo::Getwidth) {
  _VkFramebufferCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkFramebufferCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.width));
}NAN_SETTER(_VkFramebufferCreateInfo::Setwidth) {
  _VkFramebufferCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkFramebufferCreateInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.width = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkFramebufferCreateInfo.width' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// height
NAN_GETTER(_VkFramebufferCreateInfo::Getheight) {
  _VkFramebufferCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkFramebufferCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.height));
}NAN_SETTER(_VkFramebufferCreateInfo::Setheight) {
  _VkFramebufferCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkFramebufferCreateInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.height = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkFramebufferCreateInfo.height' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// layers
NAN_GETTER(_VkFramebufferCreateInfo::Getlayers) {
  _VkFramebufferCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkFramebufferCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.layers));
}NAN_SETTER(_VkFramebufferCreateInfo::Setlayers) {
  _VkFramebufferCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkFramebufferCreateInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.layers = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkFramebufferCreateInfo.layers' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}