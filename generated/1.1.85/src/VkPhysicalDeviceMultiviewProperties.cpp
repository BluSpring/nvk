/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY nvk v0.1.2
 */
#include "utils.h"
#include "index.h"
#include "VkPhysicalDeviceMultiviewProperties.h"

Nan::Persistent<v8::FunctionTemplate> _VkPhysicalDeviceMultiviewProperties::constructor;

_VkPhysicalDeviceMultiviewProperties::_VkPhysicalDeviceMultiviewProperties() {
  instance.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES;
  
}

_VkPhysicalDeviceMultiviewProperties::~_VkPhysicalDeviceMultiviewProperties() {
  //printf("VkPhysicalDeviceMultiviewProperties deconstructed!!\n");
  
  
  
  
}

void _VkPhysicalDeviceMultiviewProperties::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkPhysicalDeviceMultiviewProperties::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkPhysicalDeviceMultiviewProperties").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("sType").ToLocalChecked(), GetsType, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxMultiviewViewCount").ToLocalChecked(), GetmaxMultiviewViewCount, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxMultiviewInstanceIndex").ToLocalChecked(), GetmaxMultiviewInstanceIndex, nullptr, ctor);
  Nan::Set(target, Nan::New("VkPhysicalDeviceMultiviewProperties").ToLocalChecked(), ctor->GetFunction());
}

bool _VkPhysicalDeviceMultiviewProperties::flush() {
  _VkPhysicalDeviceMultiviewProperties *self = this;
  
  return true;
}

NAN_METHOD(_VkPhysicalDeviceMultiviewProperties::New) {
  if (info.IsConstructCall()) {
    _VkPhysicalDeviceMultiviewProperties* self = new _VkPhysicalDeviceMultiviewProperties();
    self->Wrap(info.Holder());
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkPhysicalDeviceMultiviewProperties constructor cannot be invoked without 'new'");
  }
};

// sType
NAN_GETTER(_VkPhysicalDeviceMultiviewProperties::GetsType) {
  _VkPhysicalDeviceMultiviewProperties *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceMultiviewProperties>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sType));
}// maxMultiviewViewCount
NAN_GETTER(_VkPhysicalDeviceMultiviewProperties::GetmaxMultiviewViewCount) {
  _VkPhysicalDeviceMultiviewProperties *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceMultiviewProperties>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxMultiviewViewCount));
}// maxMultiviewInstanceIndex
NAN_GETTER(_VkPhysicalDeviceMultiviewProperties::GetmaxMultiviewInstanceIndex) {
  _VkPhysicalDeviceMultiviewProperties *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceMultiviewProperties>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxMultiviewInstanceIndex));
}