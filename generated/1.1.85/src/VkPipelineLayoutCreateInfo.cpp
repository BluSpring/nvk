/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY node-vulkan v0.0.7
 */
#include "utils.h"
#include "index.h"
#include "VkPipelineLayoutCreateInfo.h"

Nan::Persistent<v8::FunctionTemplate> _VkPipelineLayoutCreateInfo::constructor;

_VkPipelineLayoutCreateInfo::_VkPipelineLayoutCreateInfo() {
  instance.sType = VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO;
}

_VkPipelineLayoutCreateInfo::~_VkPipelineLayoutCreateInfo() {
  //printf("VkPipelineLayoutCreateInfo deconstructed!!\n");
}

void _VkPipelineLayoutCreateInfo::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkPipelineLayoutCreateInfo::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkPipelineLayoutCreateInfo").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  Nan::SetPrototypeMethod(ctor, "flush", flush);
  
  SetPrototypeAccessor(proto, Nan::New("sType").ToLocalChecked(), GetsType, SetsType, ctor);
  SetPrototypeAccessor(proto, Nan::New("pNext").ToLocalChecked(), GetpNext, SetpNext, ctor);
  SetPrototypeAccessor(proto, Nan::New("flags").ToLocalChecked(), Getflags, Setflags, ctor);
  SetPrototypeAccessor(proto, Nan::New("setLayoutCount").ToLocalChecked(), GetsetLayoutCount, SetsetLayoutCount, ctor);
  SetPrototypeAccessor(proto, Nan::New("pSetLayouts").ToLocalChecked(), GetpSetLayouts, SetpSetLayouts, ctor);
  SetPrototypeAccessor(proto, Nan::New("pushConstantRangeCount").ToLocalChecked(), GetpushConstantRangeCount, SetpushConstantRangeCount, ctor);
  SetPrototypeAccessor(proto, Nan::New("pPushConstantRanges").ToLocalChecked(), GetpPushConstantRanges, SetpPushConstantRanges, ctor);
  Nan::Set(target, Nan::New("VkPipelineLayoutCreateInfo").ToLocalChecked(), ctor->GetFunction());
}

NAN_METHOD(_VkPipelineLayoutCreateInfo::New) {
  if (info.IsConstructCall()) {
    _VkPipelineLayoutCreateInfo* self = new _VkPipelineLayoutCreateInfo();
    self->Wrap(info.Holder());
    
    if (info[0]->IsObject()) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(info[0]).ToLocalChecked();
      if (obj->Has(self->sAccess0)) info.This()->Set(self->sAccess0, obj->Get(self->sAccess0));
      if (obj->Has(self->sAccess1)) info.This()->Set(self->sAccess1, obj->Get(self->sAccess1));
      if (obj->Has(self->sAccess2)) info.This()->Set(self->sAccess2, obj->Get(self->sAccess2));
      if (obj->Has(self->sAccess3)) info.This()->Set(self->sAccess3, obj->Get(self->sAccess3));
      if (obj->Has(self->sAccess4)) info.This()->Set(self->sAccess4, obj->Get(self->sAccess4));
      if (obj->Has(self->sAccess5)) info.This()->Set(self->sAccess5, obj->Get(self->sAccess5));
      if (obj->Has(self->sAccess6)) info.This()->Set(self->sAccess6, obj->Get(self->sAccess6));
      
    }
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkPipelineLayoutCreateInfo constructor cannot be invoked without 'new'");
  }
};

NAN_METHOD(_VkPipelineLayoutCreateInfo::flush) {
  _VkPipelineLayoutCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkPipelineLayoutCreateInfo>(info.This());
  
  info.This()->Set(self->sAccess4, info.This()->Get(self->sAccess4));
  info.This()->Set(self->sAccess6, info.This()->Get(self->sAccess6));
}

// sType
NAN_GETTER(_VkPipelineLayoutCreateInfo::GetsType) {
  _VkPipelineLayoutCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkPipelineLayoutCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sType));
}NAN_SETTER(_VkPipelineLayoutCreateInfo::SetsType) {
  _VkPipelineLayoutCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkPipelineLayoutCreateInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.sType = static_cast<VkStructureType>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkPipelineLayoutCreateInfo.sType'");
  }
}// pNext
NAN_GETTER(_VkPipelineLayoutCreateInfo::GetpNext) {
  _VkPipelineLayoutCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkPipelineLayoutCreateInfo>(info.This());
}NAN_SETTER(_VkPipelineLayoutCreateInfo::SetpNext) {
  _VkPipelineLayoutCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkPipelineLayoutCreateInfo>(info.This());
}// flags
NAN_GETTER(_VkPipelineLayoutCreateInfo::Getflags) {
  _VkPipelineLayoutCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkPipelineLayoutCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.flags));
}NAN_SETTER(_VkPipelineLayoutCreateInfo::Setflags) {
  _VkPipelineLayoutCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkPipelineLayoutCreateInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.flags = static_cast<VkPipelineLayoutCreateFlags>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkPipelineLayoutCreateInfo.flags'");
  }
}// setLayoutCount
NAN_GETTER(_VkPipelineLayoutCreateInfo::GetsetLayoutCount) {
  _VkPipelineLayoutCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkPipelineLayoutCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.setLayoutCount));
}NAN_SETTER(_VkPipelineLayoutCreateInfo::SetsetLayoutCount) {
  _VkPipelineLayoutCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkPipelineLayoutCreateInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.setLayoutCount = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkPipelineLayoutCreateInfo.setLayoutCount'");
  }
}// pSetLayouts
NAN_GETTER(_VkPipelineLayoutCreateInfo::GetpSetLayouts) {
  _VkPipelineLayoutCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkPipelineLayoutCreateInfo>(info.This());
  if (self->pSetLayouts.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->pSetLayouts);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkPipelineLayoutCreateInfo::SetpSetLayouts) {
  _VkPipelineLayoutCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkPipelineLayoutCreateInfo>(info.This());
  
    // js
    if (value->IsArray()) {
      self->pSetLayouts.Reset<v8::Array>(value.As<v8::Array>());
    } else if (value->IsNull()) {
      self->pSetLayouts.Reset();
    } else {
      return Nan::ThrowTypeError("Expected 'Object [VkDescriptorSetLayout]' for 'VkPipelineLayoutCreateInfo.pSetLayouts'");
    }
  
  // vulkan
  if (value->IsArray()) {
    self->instance.pSetLayouts = copyArrayOfV8Objects<VkDescriptorSetLayout, _VkDescriptorSetLayout>(value);
  } else if (value->IsNull()) {
    self->instance.pSetLayouts = VK_NULL_HANDLE;
  } else {
    return Nan::ThrowTypeError("Expected 'Object [VkDescriptorSetLayout]' for 'VkPipelineLayoutCreateInfo.pSetLayouts'");
  }
}// pushConstantRangeCount
NAN_GETTER(_VkPipelineLayoutCreateInfo::GetpushConstantRangeCount) {
  _VkPipelineLayoutCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkPipelineLayoutCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.pushConstantRangeCount));
}NAN_SETTER(_VkPipelineLayoutCreateInfo::SetpushConstantRangeCount) {
  _VkPipelineLayoutCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkPipelineLayoutCreateInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.pushConstantRangeCount = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkPipelineLayoutCreateInfo.pushConstantRangeCount'");
  }
}// pPushConstantRanges
NAN_GETTER(_VkPipelineLayoutCreateInfo::GetpPushConstantRanges) {
  _VkPipelineLayoutCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkPipelineLayoutCreateInfo>(info.This());
  if (self->pPushConstantRanges.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->pPushConstantRanges);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkPipelineLayoutCreateInfo::SetpPushConstantRanges) {
  _VkPipelineLayoutCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkPipelineLayoutCreateInfo>(info.This());
  
    // js
    if (value->IsArray()) {
      self->pPushConstantRanges.Reset<v8::Array>(value.As<v8::Array>());
    } else if (value->IsNull()) {
      self->pPushConstantRanges.Reset();
    } else {
      return Nan::ThrowTypeError("Expected 'Object [VkPushConstantRange]' for 'VkPipelineLayoutCreateInfo.pPushConstantRanges'");
    }
  
  // vulkan
  if (value->IsArray()) {
    self->instance.pPushConstantRanges = copyArrayOfV8Objects<VkPushConstantRange, _VkPushConstantRange>(value);
  } else if (value->IsNull()) {
    self->instance.pPushConstantRanges = nullptr;
  } else {
    return Nan::ThrowTypeError("Expected 'Object [VkPushConstantRange]' for 'VkPipelineLayoutCreateInfo.pPushConstantRanges'");
  }
}