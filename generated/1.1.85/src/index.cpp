/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY node-vulkan v0.0.9
 */
#include <nan.h>

#define GLFW_INCLUDE_VULKAN
#include <GLFW/glfw3.h>

#define GLM_FORCE_RADIANS
#define GLM_FORCE_DEPTH_ZERO_TO_ONE

std::string dirname;

#include "index.h"
#include "calls.h"
#include "enums.h"
#include "window.h"

static void createV8ArrayBufferFromMemory(const Nan::FunctionCallbackInfo<v8::Value>& info) {
  if (!(info[0]->IsBigInt())) Nan::ThrowError("First argument must be a BigInt!");
  if (!(info[1]->IsNumber())) Nan::ThrowError("Second argument must be a number!");
  v8::Local<v8::BigInt> arg0 = v8::Local<v8::BigInt>::Cast(info[0]);
  int64_t addr = arg0->Int64Value();
  uint32_t size = Nan::To<uint32_t>(info[1]).FromMaybe(0);
  v8::Local<v8::ArrayBuffer> arr = v8::ArrayBuffer::New(
    v8::Isolate::GetCurrent(),
    reinterpret_cast<void *>(addr),
    size,
    v8::ArrayBufferCreationMode::kExternalized
  );
  info.GetReturnValue().Set(arr);
};

static void _VK_MAKE_VERSION(const Nan::FunctionCallbackInfo<v8::Value>& info) {
  uint32_t major = Nan::To<uint32_t>(info[0]).FromMaybe(0);
  uint32_t minor = Nan::To<uint32_t>(info[1]).FromMaybe(0);
  uint32_t patch = Nan::To<uint32_t>(info[2]).FromMaybe(0);
  info.GetReturnValue().Set(VK_MAKE_VERSION(major, minor, patch));
};

static void _VK_VERSION_MAJOR(const Nan::FunctionCallbackInfo<v8::Value>& info) {
  uint32_t version = Nan::To<uint32_t>(info[0]).FromMaybe(0);
  info.GetReturnValue().Set((uint32_t)(version) >> 22);
};

static void _VK_VERSION_MINOR(const Nan::FunctionCallbackInfo<v8::Value>& info) {
  uint32_t version = Nan::To<uint32_t>(info[0]).FromMaybe(0);;
  info.GetReturnValue().Set(((uint32_t)(version) >> 12) & 0x3ff);
};

static void _VK_VERSION_PATCH(const Nan::FunctionCallbackInfo<v8::Value>& info) {
  uint32_t version = Nan::To<uint32_t>(info[0]).FromMaybe(0);
  info.GetReturnValue().Set((uint32_t)(version) & 0xfff);
};

static std::string resolveModulePath(v8::Handle<v8::Object> module) {
  std::string addonPath = *v8::String::Utf8Value(
    v8::Isolate::GetCurrent(),
    module->Get(Nan::New("filename").ToLocalChecked()).As<v8::String>()
  );
  std::string path = addonPath.substr(0, addonPath.find_last_of("/\\"));
  return path;
};

static void init(v8::Handle<v8::Object> target, v8::Handle<v8::Object> module) {
  // path to addon
  dirname = resolveModulePath(module);
  // default initializers
  VulkanWindow::Initialize(target);
  // manual initializers
  target->Set(
    Nan::New("createV8ArrayBufferFromMemory").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(createV8ArrayBufferFromMemory)->GetFunction()
  );
  target->Set(
    Nan::New("getVulkanEnumerations").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(getVulkanEnumerations)->GetFunction()
  );
  // vulkan stubs
  target->Set(
    Nan::New("VK_MAKE_VERSION").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_VK_MAKE_VERSION)->GetFunction()
  );
  target->Set(
    Nan::New("VK_VERSION_MAJOR").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_VK_VERSION_MAJOR)->GetFunction()
  );
  target->Set(
    Nan::New("VK_VERSION_MINOR").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_VK_VERSION_MINOR)->GetFunction()
  );
  target->Set(
    Nan::New("VK_VERSION_PATCH").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_VK_VERSION_PATCH)->GetFunction()
  );
  target->Set(
    Nan::New("VK_API_VERSION_1_0").ToLocalChecked(),
    Nan::New(VK_MAKE_VERSION(1, 0, 0))
  );
  // generated initializers
  _VkDebugUtilsMessengerEXT::Initialize(target);
  _VkDebugReportCallbackEXT::Initialize(target);
  _VkSwapchainKHR::Initialize(target);
  _VkSurfaceKHR::Initialize(target);
  _VkDisplayModeKHR::Initialize(target);
  _VkDisplayKHR::Initialize(target);
  _VkAccelerationStructureNVX::Initialize(target);
  _VkValidationCacheEXT::Initialize(target);
  _VkSamplerYcbcrConversion::Initialize(target);
  _VkDescriptorUpdateTemplate::Initialize(target);
  _VkIndirectCommandsLayoutNVX::Initialize(target);
  _VkObjectTableNVX::Initialize(target);
  _VkPipelineCache::Initialize(target);
  _VkRenderPass::Initialize(target);
  _VkFramebuffer::Initialize(target);
  _VkQueryPool::Initialize(target);
  _VkEvent::Initialize(target);
  _VkSemaphore::Initialize(target);
  _VkFence::Initialize(target);
  _VkDescriptorPool::Initialize(target);
  _VkDescriptorSetLayout::Initialize(target);
  _VkDescriptorSet::Initialize(target);
  _VkSampler::Initialize(target);
  _VkPipelineLayout::Initialize(target);
  _VkPipeline::Initialize(target);
  _VkShaderModule::Initialize(target);
  _VkImageView::Initialize(target);
  _VkImage::Initialize(target);
  _VkBufferView::Initialize(target);
  _VkBuffer::Initialize(target);
  _VkCommandPool::Initialize(target);
  _VkDeviceMemory::Initialize(target);
  _VkCommandBuffer::Initialize(target);
  _VkQueue::Initialize(target);
  _VkDevice::Initialize(target);
  _VkPhysicalDevice::Initialize(target);
  _VkInstance::Initialize(target);
  _VkClearColorValue::Initialize(target);
  _VkPhysicalDeviceRaytracingPropertiesNVX::Initialize(target);
  _VkAccelerationStructureMemoryRequirementsInfoNVX::Initialize(target);
  _VkDescriptorAccelerationStructureInfoNVX::Initialize(target);
  _VkBindAccelerationStructureMemoryInfoNVX::Initialize(target);
  _VkGeometryAABBNVX::Initialize(target);
  _VkGeometryTrianglesNVX::Initialize(target);
  _VkGeometryDataNVX::Initialize(target);
  _VkGeometryNVX::Initialize(target);
  _VkAccelerationStructureCreateInfoNVX::Initialize(target);
  _VkSpecializationMapEntry::Initialize(target);
  _VkSpecializationInfo::Initialize(target);
  _VkPipelineShaderStageCreateInfo::Initialize(target);
  _VkRaytracingPipelineCreateInfoNVX::Initialize(target);
  _VkDrawMeshTasksIndirectCommandNV::Initialize(target);
  _VkPhysicalDeviceMeshShaderPropertiesNV::Initialize(target);
  _VkPhysicalDeviceMeshShaderFeaturesNV::Initialize(target);
  _VkCoarseSampleLocationNV::Initialize(target);
  _VkCoarseSampleOrderCustomNV::Initialize(target);
  _VkPipelineViewportCoarseSampleOrderStateCreateInfoNV::Initialize(target);
  _VkExtent2D::Initialize(target);
  _VkPhysicalDeviceShadingRateImagePropertiesNV::Initialize(target);
  _VkPhysicalDeviceShadingRateImageFeaturesNV::Initialize(target);
  _VkShadingRatePaletteNV::Initialize(target);
  _VkPipelineViewportShadingRateImageStateCreateInfoNV::Initialize(target);
  _VkPhysicalDeviceShaderImageFootprintFeaturesNV::Initialize(target);
  _VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV::Initialize(target);
  _VkPhysicalDeviceComputeShaderDerivativesFeaturesNV::Initialize(target);
  _VkPhysicalDeviceCornerSampledImageFeaturesNV::Initialize(target);
  _VkOffset2D::Initialize(target);
  _VkRect2D::Initialize(target);
  _VkPipelineViewportExclusiveScissorStateCreateInfoNV::Initialize(target);
  _VkPhysicalDeviceExclusiveScissorFeaturesNV::Initialize(target);
  _VkPipelineRepresentativeFragmentTestStateCreateInfoNV::Initialize(target);
  _VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV::Initialize(target);
  _VkPhysicalDeviceASTCDecodeFeaturesEXT::Initialize(target);
  _VkImageViewASTCDecodeModeEXT::Initialize(target);
  _VkCheckpointDataNV::Initialize(target);
  _VkQueueFamilyCheckpointPropertiesNV::Initialize(target);
  _VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT::Initialize(target);
  _VkPhysicalDeviceVulkanMemoryModelFeaturesKHR::Initialize(target);
  _VkPhysicalDeviceConditionalRenderingFeaturesEXT::Initialize(target);
  _VkPhysicalDevice8BitStorageFeaturesKHR::Initialize(target);
  _VkCommandBufferInheritanceConditionalRenderingInfoEXT::Initialize(target);
  _VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT::Initialize(target);
  _VkVertexInputBindingDivisorDescriptionEXT::Initialize(target);
  _VkPipelineVertexInputDivisorStateCreateInfoEXT::Initialize(target);
  _VkSubpassEndInfoKHR::Initialize(target);
  _VkSubpassBeginInfoKHR::Initialize(target);
  _VkSubpassDependency2KHR::Initialize(target);
  _VkAttachmentReference2KHR::Initialize(target);
  _VkSubpassDescription2KHR::Initialize(target);
  _VkAttachmentDescription2KHR::Initialize(target);
  _VkRenderPassCreateInfo2KHR::Initialize(target);
  _VkDescriptorSetVariableDescriptorCountLayoutSupportEXT::Initialize(target);
  _VkDescriptorSetVariableDescriptorCountAllocateInfoEXT::Initialize(target);
  _VkDescriptorSetLayoutBindingFlagsCreateInfoEXT::Initialize(target);
  _VkPhysicalDeviceDescriptorIndexingPropertiesEXT::Initialize(target);
  _VkPhysicalDeviceDescriptorIndexingFeaturesEXT::Initialize(target);
  _VkPipelineRasterizationConservativeStateCreateInfoEXT::Initialize(target);
  _VkPhysicalDeviceShaderCorePropertiesAMD::Initialize(target);
  _VkPhysicalDeviceConservativeRasterizationPropertiesEXT::Initialize(target);
  _VkPhysicalDeviceExternalMemoryHostPropertiesEXT::Initialize(target);
  _VkMemoryHostPointerPropertiesEXT::Initialize(target);
  _VkImportMemoryHostPointerInfoEXT::Initialize(target);
  _VkDebugUtilsObjectNameInfoEXT::Initialize(target);
  _VkDebugUtilsLabelEXT::Initialize(target);
  _VkDebugUtilsMessengerCallbackDataEXT::Initialize(target);
  _VkDebugUtilsMessengerCreateInfoEXT::Initialize(target);
  _VkDebugUtilsObjectTagInfoEXT::Initialize(target);
  _VkDeviceQueueGlobalPriorityCreateInfoEXT::Initialize(target);
  _VkShaderResourceUsageAMD::Initialize(target);
  _VkShaderStatisticsInfoAMD::Initialize(target);
  _VkPhysicalDeviceShaderDrawParameterFeatures::Initialize(target);
  _VkDescriptorSetLayoutSupportKHR::Initialize(target);
  _VkDescriptorSetLayoutSupport::Initialize(target);
  _VkPhysicalDeviceMaintenance3PropertiesKHR::Initialize(target);
  _VkPhysicalDeviceMaintenance3Properties::Initialize(target);
  _VkShaderModuleValidationCacheCreateInfoEXT::Initialize(target);
  _VkValidationCacheCreateInfoEXT::Initialize(target);
  _VkImageFormatListCreateInfoKHR::Initialize(target);
  _VkPipelineCoverageModulationStateCreateInfoNV::Initialize(target);
  _VkDescriptorPoolInlineUniformBlockCreateInfoEXT::Initialize(target);
  _VkWriteDescriptorSetInlineUniformBlockEXT::Initialize(target);
  _VkPhysicalDeviceInlineUniformBlockPropertiesEXT::Initialize(target);
  _VkPhysicalDeviceInlineUniformBlockFeaturesEXT::Initialize(target);
  _VkPipelineColorBlendAdvancedStateCreateInfoEXT::Initialize(target);
  _VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT::Initialize(target);
  _VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT::Initialize(target);
  _VkSamplerReductionModeCreateInfoEXT::Initialize(target);
  _VkMultisamplePropertiesEXT::Initialize(target);
  _VkPhysicalDeviceSampleLocationsPropertiesEXT::Initialize(target);
  _VkSampleLocationEXT::Initialize(target);
  _VkSampleLocationsInfoEXT::Initialize(target);
  _VkPipelineSampleLocationsStateCreateInfoEXT::Initialize(target);
  _VkSubpassSampleLocationsEXT::Initialize(target);
  _VkAttachmentSampleLocationsEXT::Initialize(target);
  _VkRenderPassSampleLocationsBeginInfoEXT::Initialize(target);
  _VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT::Initialize(target);
  _VkPipelineCoverageToColorStateCreateInfoNV::Initialize(target);
  _VkDeviceQueueInfo2::Initialize(target);
  _VkPhysicalDeviceProtectedMemoryProperties::Initialize(target);
  _VkPhysicalDeviceProtectedMemoryFeatures::Initialize(target);
  _VkProtectedSubmitInfo::Initialize(target);
  _VkConditionalRenderingBeginInfoEXT::Initialize(target);
  _VkTextureLODGatherFormatPropertiesAMD::Initialize(target);
  _VkSamplerYcbcrConversionImageFormatPropertiesKHR::Initialize(target);
  _VkSamplerYcbcrConversionImageFormatProperties::Initialize(target);
  _VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR::Initialize(target);
  _VkPhysicalDeviceSamplerYcbcrConversionFeatures::Initialize(target);
  _VkImagePlaneMemoryRequirementsInfoKHR::Initialize(target);
  _VkImagePlaneMemoryRequirementsInfo::Initialize(target);
  _VkBindImagePlaneMemoryInfoKHR::Initialize(target);
  _VkBindImagePlaneMemoryInfo::Initialize(target);
  _VkSamplerYcbcrConversionCreateInfoKHR::Initialize(target);
  _VkComponentMapping::Initialize(target);
  _VkSamplerYcbcrConversionCreateInfo::Initialize(target);
  _VkSamplerYcbcrConversionInfoKHR::Initialize(target);
  _VkSamplerYcbcrConversionInfo::Initialize(target);
  _VkPipelineTessellationDomainOriginStateCreateInfoKHR::Initialize(target);
  _VkPipelineTessellationDomainOriginStateCreateInfo::Initialize(target);
  _VkImageViewUsageCreateInfoKHR::Initialize(target);
  _VkImageViewUsageCreateInfo::Initialize(target);
  _VkMemoryDedicatedAllocateInfoKHR::Initialize(target);
  _VkMemoryDedicatedAllocateInfo::Initialize(target);
  _VkMemoryDedicatedRequirementsKHR::Initialize(target);
  _VkMemoryDedicatedRequirements::Initialize(target);
  _VkPhysicalDevicePointClippingPropertiesKHR::Initialize(target);
  _VkPhysicalDevicePointClippingProperties::Initialize(target);
  _VkSparseImageMemoryRequirements2KHR::Initialize(target);
  _VkExtent3D::Initialize(target);
  _VkSparseImageFormatProperties::Initialize(target);
  _VkSparseImageMemoryRequirements::Initialize(target);
  _VkSparseImageMemoryRequirements2::Initialize(target);
  _VkMemoryRequirements2KHR::Initialize(target);
  _VkMemoryRequirements::Initialize(target);
  _VkMemoryRequirements2::Initialize(target);
  _VkImageSparseMemoryRequirementsInfo2KHR::Initialize(target);
  _VkImageSparseMemoryRequirementsInfo2::Initialize(target);
  _VkImageMemoryRequirementsInfo2KHR::Initialize(target);
  _VkImageMemoryRequirementsInfo2::Initialize(target);
  _VkBufferMemoryRequirementsInfo2KHR::Initialize(target);
  _VkBufferMemoryRequirementsInfo2::Initialize(target);
  _VkPhysicalDeviceSubgroupProperties::Initialize(target);
  _VkPhysicalDevice16BitStorageFeaturesKHR::Initialize(target);
  _VkPhysicalDevice16BitStorageFeatures::Initialize(target);
  _VkSharedPresentSurfaceCapabilitiesKHR::Initialize(target);
  _VkDisplayPlaneCapabilitiesKHR::Initialize(target);
  _VkDisplayPlaneCapabilities2KHR::Initialize(target);
  _VkDisplayPlaneInfo2KHR::Initialize(target);
  _VkDisplayModeParametersKHR::Initialize(target);
  _VkDisplayModePropertiesKHR::Initialize(target);
  _VkDisplayModeProperties2KHR::Initialize(target);
  _VkDisplayPlanePropertiesKHR::Initialize(target);
  _VkDisplayPlaneProperties2KHR::Initialize(target);
  _VkDisplayPropertiesKHR::Initialize(target);
  _VkDisplayProperties2KHR::Initialize(target);
  _VkSurfaceFormatKHR::Initialize(target);
  _VkSurfaceFormat2KHR::Initialize(target);
  _VkSurfaceCapabilitiesKHR::Initialize(target);
  _VkSurfaceCapabilities2KHR::Initialize(target);
  _VkPhysicalDeviceSurfaceInfo2KHR::Initialize(target);
  _VkRenderPassInputAttachmentAspectCreateInfoKHR::Initialize(target);
  _VkInputAttachmentAspectReference::Initialize(target);
  _VkRenderPassInputAttachmentAspectCreateInfo::Initialize(target);
  _VkInputAttachmentAspectReferenceKHR::Initialize(target);
  _VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX::Initialize(target);
  _VkPipelineDiscardRectangleStateCreateInfoEXT::Initialize(target);
  _VkPhysicalDeviceDiscardRectanglePropertiesEXT::Initialize(target);
  _VkViewportSwizzleNV::Initialize(target);
  _VkPipelineViewportSwizzleStateCreateInfoNV::Initialize(target);
  _VkViewportWScalingNV::Initialize(target);
  _VkPipelineViewportWScalingStateCreateInfoNV::Initialize(target);
  _VkPresentTimeGOOGLE::Initialize(target);
  _VkPresentTimesInfoGOOGLE::Initialize(target);
  _VkPastPresentationTimingGOOGLE::Initialize(target);
  _VkRefreshCycleDurationGOOGLE::Initialize(target);
  _VkXYColorEXT::Initialize(target);
  _VkHdrMetadataEXT::Initialize(target);
  _VkDescriptorUpdateTemplateCreateInfoKHR::Initialize(target);
  _VkDescriptorUpdateTemplateEntry::Initialize(target);
  _VkDescriptorUpdateTemplateCreateInfo::Initialize(target);
  _VkDescriptorUpdateTemplateEntryKHR::Initialize(target);
  _VkDeviceGroupSwapchainCreateInfoKHR::Initialize(target);
  _VkDeviceGroupDeviceCreateInfoKHR::Initialize(target);
  _VkDeviceGroupDeviceCreateInfo::Initialize(target);
  _VkDeviceGroupPresentInfoKHR::Initialize(target);
  _VkAcquireNextImageInfoKHR::Initialize(target);
  _VkBindImageMemorySwapchainInfoKHR::Initialize(target);
  _VkImageSwapchainCreateInfoKHR::Initialize(target);
  _VkDeviceGroupPresentCapabilitiesKHR::Initialize(target);
  _VkDeviceGroupBindSparseInfoKHR::Initialize(target);
  _VkDeviceGroupBindSparseInfo::Initialize(target);
  _VkDeviceGroupSubmitInfoKHR::Initialize(target);
  _VkDeviceGroupSubmitInfo::Initialize(target);
  _VkDeviceGroupCommandBufferBeginInfoKHR::Initialize(target);
  _VkDeviceGroupCommandBufferBeginInfo::Initialize(target);
  _VkDeviceGroupRenderPassBeginInfoKHR::Initialize(target);
  _VkDeviceGroupRenderPassBeginInfo::Initialize(target);
  _VkBindImageMemoryDeviceGroupInfoKHR::Initialize(target);
  _VkBindImageMemoryDeviceGroupInfo::Initialize(target);
  _VkBindImageMemoryInfoKHR::Initialize(target);
  _VkBindImageMemoryInfo::Initialize(target);
  _VkBindBufferMemoryDeviceGroupInfoKHR::Initialize(target);
  _VkBindBufferMemoryDeviceGroupInfo::Initialize(target);
  _VkBindBufferMemoryInfoKHR::Initialize(target);
  _VkBindBufferMemoryInfo::Initialize(target);
  _VkMemoryAllocateFlagsInfoKHR::Initialize(target);
  _VkMemoryAllocateFlagsInfo::Initialize(target);
  _VkPhysicalDeviceGroupPropertiesKHR::Initialize(target);
  _VkPhysicalDeviceGroupProperties::Initialize(target);
  _VkSwapchainCounterCreateInfoEXT::Initialize(target);
  _VkDisplayEventInfoEXT::Initialize(target);
  _VkDeviceEventInfoEXT::Initialize(target);
  _VkDisplayPowerInfoEXT::Initialize(target);
  _VkSurfaceCapabilities2EXT::Initialize(target);
  _VkRenderPassMultiviewCreateInfoKHR::Initialize(target);
  _VkRenderPassMultiviewCreateInfo::Initialize(target);
  _VkPhysicalDeviceMultiviewPropertiesKHR::Initialize(target);
  _VkPhysicalDeviceMultiviewProperties::Initialize(target);
  _VkPhysicalDeviceMultiviewFeaturesKHR::Initialize(target);
  _VkPhysicalDeviceMultiviewFeatures::Initialize(target);
  _VkFenceGetFdInfoKHR::Initialize(target);
  _VkImportFenceFdInfoKHR::Initialize(target);
  _VkFenceGetWin32HandleInfoKHR::Initialize(target);
  _VkExportFenceWin32HandleInfoKHR::Initialize(target);
  _VkImportFenceWin32HandleInfoKHR::Initialize(target);
  _VkExportFenceCreateInfoKHR::Initialize(target);
  _VkExportFenceCreateInfo::Initialize(target);
  _VkExternalFencePropertiesKHR::Initialize(target);
  _VkExternalFenceProperties::Initialize(target);
  _VkPhysicalDeviceExternalFenceInfoKHR::Initialize(target);
  _VkPhysicalDeviceExternalFenceInfo::Initialize(target);
  _VkSemaphoreGetFdInfoKHR::Initialize(target);
  _VkImportSemaphoreFdInfoKHR::Initialize(target);
  _VkSemaphoreGetWin32HandleInfoKHR::Initialize(target);
  _VkD3D12FenceSubmitInfoKHR::Initialize(target);
  _VkExportSemaphoreWin32HandleInfoKHR::Initialize(target);
  _VkImportSemaphoreWin32HandleInfoKHR::Initialize(target);
  _VkExportSemaphoreCreateInfoKHR::Initialize(target);
  _VkExportSemaphoreCreateInfo::Initialize(target);
  _VkExternalSemaphorePropertiesKHR::Initialize(target);
  _VkExternalSemaphoreProperties::Initialize(target);
  _VkPhysicalDeviceExternalSemaphoreInfoKHR::Initialize(target);
  _VkPhysicalDeviceExternalSemaphoreInfo::Initialize(target);
  _VkWin32KeyedMutexAcquireReleaseInfoKHR::Initialize(target);
  _VkMemoryGetFdInfoKHR::Initialize(target);
  _VkMemoryFdPropertiesKHR::Initialize(target);
  _VkImportMemoryFdInfoKHR::Initialize(target);
  _VkMemoryGetWin32HandleInfoKHR::Initialize(target);
  _VkMemoryWin32HandlePropertiesKHR::Initialize(target);
  _VkExportMemoryWin32HandleInfoKHR::Initialize(target);
  _VkImportMemoryWin32HandleInfoKHR::Initialize(target);
  _VkExportMemoryAllocateInfoKHR::Initialize(target);
  _VkExportMemoryAllocateInfo::Initialize(target);
  _VkExternalMemoryBufferCreateInfoKHR::Initialize(target);
  _VkExternalMemoryBufferCreateInfo::Initialize(target);
  _VkExternalMemoryImageCreateInfoKHR::Initialize(target);
  _VkExternalMemoryImageCreateInfo::Initialize(target);
  _VkPhysicalDeviceIDPropertiesKHR::Initialize(target);
  _VkPhysicalDeviceIDProperties::Initialize(target);
  _VkExternalBufferPropertiesKHR::Initialize(target);
  _VkExternalMemoryProperties::Initialize(target);
  _VkExternalBufferProperties::Initialize(target);
  _VkPhysicalDeviceExternalBufferInfoKHR::Initialize(target);
  _VkPhysicalDeviceExternalBufferInfo::Initialize(target);
  _VkExternalImageFormatPropertiesKHR::Initialize(target);
  _VkExternalImageFormatProperties::Initialize(target);
  _VkPhysicalDeviceExternalImageFormatInfoKHR::Initialize(target);
  _VkPhysicalDeviceExternalImageFormatInfo::Initialize(target);
  _VkExternalMemoryPropertiesKHR::Initialize(target);
  _VkPhysicalDeviceVariablePointerFeaturesKHR::Initialize(target);
  _VkPhysicalDeviceVariablePointerFeatures::Initialize(target);
  _VkRectLayerKHR::Initialize(target);
  _VkPresentRegionKHR::Initialize(target);
  _VkPresentRegionsKHR::Initialize(target);
  _VkPhysicalDevicePushDescriptorPropertiesKHR::Initialize(target);
  _VkPhysicalDeviceSparseImageFormatInfo2KHR::Initialize(target);
  _VkPhysicalDeviceSparseImageFormatInfo2::Initialize(target);
  _VkSparseImageFormatProperties2KHR::Initialize(target);
  _VkSparseImageFormatProperties2::Initialize(target);
  _VkPhysicalDeviceMemoryProperties2KHR::Initialize(target);
  _VkMemoryHeap::Initialize(target);
  _VkMemoryType::Initialize(target);
  _VkPhysicalDeviceMemoryProperties::Initialize(target);
  _VkPhysicalDeviceMemoryProperties2::Initialize(target);
  _VkQueueFamilyProperties2KHR::Initialize(target);
  _VkQueueFamilyProperties::Initialize(target);
  _VkQueueFamilyProperties2::Initialize(target);
  _VkPhysicalDeviceImageFormatInfo2KHR::Initialize(target);
  _VkPhysicalDeviceImageFormatInfo2::Initialize(target);
  _VkImageFormatProperties2KHR::Initialize(target);
  _VkImageFormatProperties::Initialize(target);
  _VkImageFormatProperties2::Initialize(target);
  _VkFormatProperties2KHR::Initialize(target);
  _VkFormatProperties::Initialize(target);
  _VkFormatProperties2::Initialize(target);
  _VkPhysicalDeviceProperties2KHR::Initialize(target);
  _VkPhysicalDeviceSparseProperties::Initialize(target);
  _VkPhysicalDeviceLimits::Initialize(target);
  _VkPhysicalDeviceProperties::Initialize(target);
  _VkPhysicalDeviceProperties2::Initialize(target);
  _VkPhysicalDeviceFeatures2KHR::Initialize(target);
  _VkPhysicalDeviceFeatures::Initialize(target);
  _VkPhysicalDeviceFeatures2::Initialize(target);
  _VkObjectTablePushConstantEntryNVX::Initialize(target);
  _VkObjectTableIndexBufferEntryNVX::Initialize(target);
  _VkObjectTableVertexBufferEntryNVX::Initialize(target);
  _VkObjectTableDescriptorSetEntryNVX::Initialize(target);
  _VkObjectTablePipelineEntryNVX::Initialize(target);
  _VkObjectTableEntryNVX::Initialize(target);
  _VkObjectTableCreateInfoNVX::Initialize(target);
  _VkCmdReserveSpaceForCommandsInfoNVX::Initialize(target);
  _VkIndirectCommandsTokenNVX::Initialize(target);
  _VkCmdProcessCommandsInfoNVX::Initialize(target);
  _VkIndirectCommandsLayoutTokenNVX::Initialize(target);
  _VkIndirectCommandsLayoutCreateInfoNVX::Initialize(target);
  _VkDeviceGeneratedCommandsLimitsNVX::Initialize(target);
  _VkDeviceGeneratedCommandsFeaturesNVX::Initialize(target);
  _VkWin32KeyedMutexAcquireReleaseInfoNV::Initialize(target);
  _VkExportMemoryWin32HandleInfoNV::Initialize(target);
  _VkImportMemoryWin32HandleInfoNV::Initialize(target);
  _VkExportMemoryAllocateInfoNV::Initialize(target);
  _VkExternalMemoryImageCreateInfoNV::Initialize(target);
  _VkExternalImageFormatPropertiesNV::Initialize(target);
  _VkDedicatedAllocationMemoryAllocateInfoNV::Initialize(target);
  _VkDedicatedAllocationBufferCreateInfoNV::Initialize(target);
  _VkDedicatedAllocationImageCreateInfoNV::Initialize(target);
  _VkDebugMarkerMarkerInfoEXT::Initialize(target);
  _VkDebugMarkerObjectTagInfoEXT::Initialize(target);
  _VkDebugMarkerObjectNameInfoEXT::Initialize(target);
  _VkPipelineRasterizationStateRasterizationOrderAMD::Initialize(target);
  _VkValidationFlagsEXT::Initialize(target);
  _VkDebugReportCallbackCreateInfoEXT::Initialize(target);
  _VkPresentInfoKHR::Initialize(target);
  _VkSwapchainCreateInfoKHR::Initialize(target);
  _VkWin32SurfaceCreateInfoKHR::Initialize(target);
  _VkDisplayPresentInfoKHR::Initialize(target);
  _VkDisplaySurfaceCreateInfoKHR::Initialize(target);
  _VkDisplayModeCreateInfoKHR::Initialize(target);
  _VkSubmitInfo::Initialize(target);
  _VkDispatchIndirectCommand::Initialize(target);
  _VkDrawIndexedIndirectCommand::Initialize(target);
  _VkDrawIndirectCommand::Initialize(target);
  _VkFramebufferCreateInfo::Initialize(target);
  _VkQueryPoolCreateInfo::Initialize(target);
  _VkSemaphoreCreateInfo::Initialize(target);
  _VkFenceCreateInfo::Initialize(target);
  _VkEventCreateInfo::Initialize(target);
  _VkSubpassDependency::Initialize(target);
  _VkAttachmentReference::Initialize(target);
  _VkSubpassDescription::Initialize(target);
  _VkAttachmentDescription::Initialize(target);
  _VkRenderPassCreateInfo::Initialize(target);
  _VkClearDepthStencilValue::Initialize(target);
  _VkClearValue::Initialize(target);
  _VkClearAttachment::Initialize(target);
  _VkRenderPassBeginInfo::Initialize(target);
  _VkCommandBufferInheritanceInfo::Initialize(target);
  _VkCommandBufferBeginInfo::Initialize(target);
  _VkCommandBufferAllocateInfo::Initialize(target);
  _VkCommandPoolCreateInfo::Initialize(target);
  _VkSamplerCreateInfo::Initialize(target);
  _VkPushConstantRange::Initialize(target);
  _VkPipelineLayoutCreateInfo::Initialize(target);
  _VkPipelineCacheCreateInfo::Initialize(target);
  _VkPipelineDynamicStateCreateInfo::Initialize(target);
  _VkPipelineColorBlendAttachmentState::Initialize(target);
  _VkPipelineColorBlendStateCreateInfo::Initialize(target);
  _VkStencilOpState::Initialize(target);
  _VkPipelineDepthStencilStateCreateInfo::Initialize(target);
  _VkPipelineMultisampleStateCreateInfo::Initialize(target);
  _VkPipelineRasterizationStateCreateInfo::Initialize(target);
  _VkViewport::Initialize(target);
  _VkPipelineViewportStateCreateInfo::Initialize(target);
  _VkPipelineTessellationStateCreateInfo::Initialize(target);
  _VkPipelineInputAssemblyStateCreateInfo::Initialize(target);
  _VkVertexInputAttributeDescription::Initialize(target);
  _VkVertexInputBindingDescription::Initialize(target);
  _VkPipelineVertexInputStateCreateInfo::Initialize(target);
  _VkGraphicsPipelineCreateInfo::Initialize(target);
  _VkComputePipelineCreateInfo::Initialize(target);
  _VkDescriptorSetAllocateInfo::Initialize(target);
  _VkDescriptorPoolSize::Initialize(target);
  _VkDescriptorPoolCreateInfo::Initialize(target);
  _VkDescriptorSetLayoutBinding::Initialize(target);
  _VkDescriptorSetLayoutCreateInfo::Initialize(target);
  _VkShaderModuleCreateInfo::Initialize(target);
  _VkOffset3D::Initialize(target);
  _VkImageSubresourceLayers::Initialize(target);
  _VkImageResolve::Initialize(target);
  _VkBufferImageCopy::Initialize(target);
  _VkImageBlit::Initialize(target);
  _VkImageCopy::Initialize(target);
  _VkImageSubresource::Initialize(target);
  _VkSparseImageMemoryBind::Initialize(target);
  _VkSparseImageMemoryBindInfo::Initialize(target);
  _VkSparseMemoryBind::Initialize(target);
  _VkSparseImageOpaqueMemoryBindInfo::Initialize(target);
  _VkSparseBufferMemoryBindInfo::Initialize(target);
  _VkBindSparseInfo::Initialize(target);
  _VkBufferCopy::Initialize(target);
  _VkImageSubresourceRange::Initialize(target);
  _VkImageViewCreateInfo::Initialize(target);
  _VkSubresourceLayout::Initialize(target);
  _VkImageCreateInfo::Initialize(target);
  _VkImageMemoryBarrier::Initialize(target);
  _VkBufferMemoryBarrier::Initialize(target);
  _VkMemoryBarrier::Initialize(target);
  _VkBufferViewCreateInfo::Initialize(target);
  _VkBufferCreateInfo::Initialize(target);
  _VkCopyDescriptorSet::Initialize(target);
  _VkDescriptorBufferInfo::Initialize(target);
  _VkDescriptorImageInfo::Initialize(target);
  _VkWriteDescriptorSet::Initialize(target);
  _VkMappedMemoryRange::Initialize(target);
  _VkMemoryAllocateInfo::Initialize(target);
  _VkApplicationInfo::Initialize(target);
  _VkInstanceCreateInfo::Initialize(target);
  _VkDeviceQueueCreateInfo::Initialize(target);
  _VkDeviceCreateInfo::Initialize(target);
  _VkAllocationCallbacks::Initialize(target);
  _VkLayerProperties::Initialize(target);
  _VkExtensionProperties::Initialize(target);
  _VkClearRect::Initialize(target);
  _VkBaseInStructure::Initialize(target);
  _VkBaseOutStructure::Initialize(target);
  
  target->Set(
    Nan::New("vkCreateInstance").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkCreateInstance)->GetFunction()
  );
  target->Set(
    Nan::New("vkDestroyInstance").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkDestroyInstance)->GetFunction()
  );
  target->Set(
    Nan::New("vkEnumeratePhysicalDevices").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkEnumeratePhysicalDevices)->GetFunction()
  );
  target->Set(
    Nan::New("vkGetPhysicalDeviceProperties").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkGetPhysicalDeviceProperties)->GetFunction()
  );
  target->Set(
    Nan::New("vkGetPhysicalDeviceQueueFamilyProperties").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkGetPhysicalDeviceQueueFamilyProperties)->GetFunction()
  );
  target->Set(
    Nan::New("vkGetPhysicalDeviceMemoryProperties").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkGetPhysicalDeviceMemoryProperties)->GetFunction()
  );
  target->Set(
    Nan::New("vkGetPhysicalDeviceFeatures").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkGetPhysicalDeviceFeatures)->GetFunction()
  );
  target->Set(
    Nan::New("vkCreateDevice").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkCreateDevice)->GetFunction()
  );
  target->Set(
    Nan::New("vkDestroyDevice").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkDestroyDevice)->GetFunction()
  );
  target->Set(
    Nan::New("vkEnumerateInstanceLayerProperties").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkEnumerateInstanceLayerProperties)->GetFunction()
  );
  target->Set(
    Nan::New("vkGetDeviceQueue").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkGetDeviceQueue)->GetFunction()
  );
  target->Set(
    Nan::New("vkQueueSubmit").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkQueueSubmit)->GetFunction()
  );
  target->Set(
    Nan::New("vkQueueWaitIdle").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkQueueWaitIdle)->GetFunction()
  );
  target->Set(
    Nan::New("vkDeviceWaitIdle").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkDeviceWaitIdle)->GetFunction()
  );
  target->Set(
    Nan::New("vkAllocateMemory").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkAllocateMemory)->GetFunction()
  );
  target->Set(
    Nan::New("vkFreeMemory").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkFreeMemory)->GetFunction()
  );
  target->Set(
    Nan::New("vkMapMemory").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkMapMemory)->GetFunction()
  );
  target->Set(
    Nan::New("vkUnmapMemory").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkUnmapMemory)->GetFunction()
  );
  target->Set(
    Nan::New("vkGetBufferMemoryRequirements").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkGetBufferMemoryRequirements)->GetFunction()
  );
  target->Set(
    Nan::New("vkBindBufferMemory").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkBindBufferMemory)->GetFunction()
  );
  target->Set(
    Nan::New("vkGetImageMemoryRequirements").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkGetImageMemoryRequirements)->GetFunction()
  );
  target->Set(
    Nan::New("vkBindImageMemory").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkBindImageMemory)->GetFunction()
  );
  target->Set(
    Nan::New("vkDestroyFence").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkDestroyFence)->GetFunction()
  );
  target->Set(
    Nan::New("vkCreateSemaphore").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkCreateSemaphore)->GetFunction()
  );
  target->Set(
    Nan::New("vkDestroySemaphore").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkDestroySemaphore)->GetFunction()
  );
  target->Set(
    Nan::New("vkDestroyEvent").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkDestroyEvent)->GetFunction()
  );
  target->Set(
    Nan::New("vkDestroyQueryPool").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkDestroyQueryPool)->GetFunction()
  );
  target->Set(
    Nan::New("vkCreateBuffer").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkCreateBuffer)->GetFunction()
  );
  target->Set(
    Nan::New("vkDestroyBuffer").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkDestroyBuffer)->GetFunction()
  );
  target->Set(
    Nan::New("vkDestroyBufferView").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkDestroyBufferView)->GetFunction()
  );
  target->Set(
    Nan::New("vkCreateImage").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkCreateImage)->GetFunction()
  );
  target->Set(
    Nan::New("vkDestroyImage").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkDestroyImage)->GetFunction()
  );
  target->Set(
    Nan::New("vkGetImageSubresourceLayout").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkGetImageSubresourceLayout)->GetFunction()
  );
  target->Set(
    Nan::New("vkCreateImageView").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkCreateImageView)->GetFunction()
  );
  target->Set(
    Nan::New("vkDestroyImageView").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkDestroyImageView)->GetFunction()
  );
  target->Set(
    Nan::New("vkCreateShaderModule").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkCreateShaderModule)->GetFunction()
  );
  target->Set(
    Nan::New("vkDestroyShaderModule").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkDestroyShaderModule)->GetFunction()
  );
  target->Set(
    Nan::New("vkDestroyPipelineCache").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkDestroyPipelineCache)->GetFunction()
  );
  target->Set(
    Nan::New("vkCreateGraphicsPipelines").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkCreateGraphicsPipelines)->GetFunction()
  );
  target->Set(
    Nan::New("vkCreateComputePipelines").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkCreateComputePipelines)->GetFunction()
  );
  target->Set(
    Nan::New("vkDestroyPipeline").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkDestroyPipeline)->GetFunction()
  );
  target->Set(
    Nan::New("vkCreatePipelineLayout").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkCreatePipelineLayout)->GetFunction()
  );
  target->Set(
    Nan::New("vkDestroyPipelineLayout").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkDestroyPipelineLayout)->GetFunction()
  );
  target->Set(
    Nan::New("vkCreateSampler").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkCreateSampler)->GetFunction()
  );
  target->Set(
    Nan::New("vkDestroySampler").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkDestroySampler)->GetFunction()
  );
  target->Set(
    Nan::New("vkCreateDescriptorSetLayout").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkCreateDescriptorSetLayout)->GetFunction()
  );
  target->Set(
    Nan::New("vkDestroyDescriptorSetLayout").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkDestroyDescriptorSetLayout)->GetFunction()
  );
  target->Set(
    Nan::New("vkCreateDescriptorPool").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkCreateDescriptorPool)->GetFunction()
  );
  target->Set(
    Nan::New("vkDestroyDescriptorPool").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkDestroyDescriptorPool)->GetFunction()
  );
  target->Set(
    Nan::New("vkAllocateDescriptorSets").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkAllocateDescriptorSets)->GetFunction()
  );
  target->Set(
    Nan::New("vkUpdateDescriptorSets").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkUpdateDescriptorSets)->GetFunction()
  );
  target->Set(
    Nan::New("vkCreateFramebuffer").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkCreateFramebuffer)->GetFunction()
  );
  target->Set(
    Nan::New("vkDestroyFramebuffer").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkDestroyFramebuffer)->GetFunction()
  );
  target->Set(
    Nan::New("vkCreateRenderPass").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkCreateRenderPass)->GetFunction()
  );
  target->Set(
    Nan::New("vkDestroyRenderPass").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkDestroyRenderPass)->GetFunction()
  );
  target->Set(
    Nan::New("vkCreateCommandPool").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkCreateCommandPool)->GetFunction()
  );
  target->Set(
    Nan::New("vkDestroyCommandPool").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkDestroyCommandPool)->GetFunction()
  );
  target->Set(
    Nan::New("vkAllocateCommandBuffers").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkAllocateCommandBuffers)->GetFunction()
  );
  target->Set(
    Nan::New("vkFreeCommandBuffers").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkFreeCommandBuffers)->GetFunction()
  );
  target->Set(
    Nan::New("vkBeginCommandBuffer").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkBeginCommandBuffer)->GetFunction()
  );
  target->Set(
    Nan::New("vkEndCommandBuffer").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkEndCommandBuffer)->GetFunction()
  );
  target->Set(
    Nan::New("vkCmdBindPipeline").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkCmdBindPipeline)->GetFunction()
  );
  target->Set(
    Nan::New("vkCmdSetViewport").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkCmdSetViewport)->GetFunction()
  );
  target->Set(
    Nan::New("vkCmdSetScissor").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkCmdSetScissor)->GetFunction()
  );
  target->Set(
    Nan::New("vkCmdBindDescriptorSets").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkCmdBindDescriptorSets)->GetFunction()
  );
  target->Set(
    Nan::New("vkCmdBindIndexBuffer").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkCmdBindIndexBuffer)->GetFunction()
  );
  target->Set(
    Nan::New("vkCmdBindVertexBuffers").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkCmdBindVertexBuffers)->GetFunction()
  );
  target->Set(
    Nan::New("vkCmdDraw").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkCmdDraw)->GetFunction()
  );
  target->Set(
    Nan::New("vkCmdDrawIndexed").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkCmdDrawIndexed)->GetFunction()
  );
  target->Set(
    Nan::New("vkCmdDispatch").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkCmdDispatch)->GetFunction()
  );
  target->Set(
    Nan::New("vkCmdCopyBuffer").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkCmdCopyBuffer)->GetFunction()
  );
  target->Set(
    Nan::New("vkCmdCopyBufferToImage").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkCmdCopyBufferToImage)->GetFunction()
  );
  target->Set(
    Nan::New("vkCmdPipelineBarrier").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkCmdPipelineBarrier)->GetFunction()
  );
  target->Set(
    Nan::New("vkCmdBeginRenderPass").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkCmdBeginRenderPass)->GetFunction()
  );
  target->Set(
    Nan::New("vkCmdEndRenderPass").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkCmdEndRenderPass)->GetFunction()
  );
  target->Set(
    Nan::New("vkDestroySurfaceKHR").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkDestroySurfaceKHR)->GetFunction()
  );
  target->Set(
    Nan::New("vkGetPhysicalDeviceSurfaceSupportKHR").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkGetPhysicalDeviceSurfaceSupportKHR)->GetFunction()
  );
  target->Set(
    Nan::New("vkGetPhysicalDeviceSurfaceCapabilitiesKHR").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkGetPhysicalDeviceSurfaceCapabilitiesKHR)->GetFunction()
  );
  target->Set(
    Nan::New("vkGetPhysicalDeviceSurfaceFormatsKHR").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkGetPhysicalDeviceSurfaceFormatsKHR)->GetFunction()
  );
  target->Set(
    Nan::New("vkGetPhysicalDeviceSurfacePresentModesKHR").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkGetPhysicalDeviceSurfacePresentModesKHR)->GetFunction()
  );
  target->Set(
    Nan::New("vkCreateSwapchainKHR").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkCreateSwapchainKHR)->GetFunction()
  );
  target->Set(
    Nan::New("vkDestroySwapchainKHR").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkDestroySwapchainKHR)->GetFunction()
  );
  target->Set(
    Nan::New("vkGetSwapchainImagesKHR").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkGetSwapchainImagesKHR)->GetFunction()
  );
  target->Set(
    Nan::New("vkAcquireNextImageKHR").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkAcquireNextImageKHR)->GetFunction()
  );
  target->Set(
    Nan::New("vkQueuePresentKHR").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkQueuePresentKHR)->GetFunction()
  );
  target->Set(
    Nan::New("vkDestroyDescriptorUpdateTemplate").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkDestroyDescriptorUpdateTemplate)->GetFunction()
  );
  target->Set(
    Nan::New("vkDestroySamplerYcbcrConversion").ToLocalChecked(),
    Nan::New<v8::FunctionTemplate>(_vkDestroySamplerYcbcrConversion)->GetFunction()
  );
  
}

NODE_MODULE(myModule, init);
