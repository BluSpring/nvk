/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY node-vulkan v0.0.7
 */
#include "utils.h"
#include "index.h"
#include "VkImageCreateInfo.h"

Nan::Persistent<v8::FunctionTemplate> _VkImageCreateInfo::constructor;

_VkImageCreateInfo::_VkImageCreateInfo() {
  instance.sType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO;
}

_VkImageCreateInfo::~_VkImageCreateInfo() {
  //printf("VkImageCreateInfo deconstructed!!\n");
}

void _VkImageCreateInfo::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkImageCreateInfo::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkImageCreateInfo").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  Nan::SetPrototypeMethod(ctor, "flush", flush);
  
  SetPrototypeAccessor(proto, Nan::New("sType").ToLocalChecked(), GetsType, SetsType, ctor);
  SetPrototypeAccessor(proto, Nan::New("pNext").ToLocalChecked(), GetpNext, SetpNext, ctor);
  SetPrototypeAccessor(proto, Nan::New("flags").ToLocalChecked(), Getflags, Setflags, ctor);
  SetPrototypeAccessor(proto, Nan::New("imageType").ToLocalChecked(), GetimageType, SetimageType, ctor);
  SetPrototypeAccessor(proto, Nan::New("format").ToLocalChecked(), Getformat, Setformat, ctor);
  SetPrototypeAccessor(proto, Nan::New("extent").ToLocalChecked(), Getextent, Setextent, ctor);
  SetPrototypeAccessor(proto, Nan::New("mipLevels").ToLocalChecked(), GetmipLevels, SetmipLevels, ctor);
  SetPrototypeAccessor(proto, Nan::New("arrayLayers").ToLocalChecked(), GetarrayLayers, SetarrayLayers, ctor);
  SetPrototypeAccessor(proto, Nan::New("samples").ToLocalChecked(), Getsamples, Setsamples, ctor);
  SetPrototypeAccessor(proto, Nan::New("tiling").ToLocalChecked(), Gettiling, Settiling, ctor);
  SetPrototypeAccessor(proto, Nan::New("usage").ToLocalChecked(), Getusage, Setusage, ctor);
  SetPrototypeAccessor(proto, Nan::New("sharingMode").ToLocalChecked(), GetsharingMode, SetsharingMode, ctor);
  SetPrototypeAccessor(proto, Nan::New("queueFamilyIndexCount").ToLocalChecked(), GetqueueFamilyIndexCount, SetqueueFamilyIndexCount, ctor);
  SetPrototypeAccessor(proto, Nan::New("pQueueFamilyIndices").ToLocalChecked(), GetpQueueFamilyIndices, SetpQueueFamilyIndices, ctor);
  SetPrototypeAccessor(proto, Nan::New("initialLayout").ToLocalChecked(), GetinitialLayout, SetinitialLayout, ctor);
  Nan::Set(target, Nan::New("VkImageCreateInfo").ToLocalChecked(), ctor->GetFunction());
}

NAN_METHOD(_VkImageCreateInfo::New) {
  if (info.IsConstructCall()) {
    _VkImageCreateInfo* self = new _VkImageCreateInfo();
    self->Wrap(info.Holder());
    
    if (info[0]->IsObject()) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(info[0]).ToLocalChecked();
      if (obj->Has(self->sAccess0)) info.This()->Set(self->sAccess0, obj->Get(self->sAccess0));
      if (obj->Has(self->sAccess1)) info.This()->Set(self->sAccess1, obj->Get(self->sAccess1));
      if (obj->Has(self->sAccess2)) info.This()->Set(self->sAccess2, obj->Get(self->sAccess2));
      if (obj->Has(self->sAccess3)) info.This()->Set(self->sAccess3, obj->Get(self->sAccess3));
      if (obj->Has(self->sAccess4)) info.This()->Set(self->sAccess4, obj->Get(self->sAccess4));
      if (obj->Has(self->sAccess5)) info.This()->Set(self->sAccess5, obj->Get(self->sAccess5));
      if (obj->Has(self->sAccess6)) info.This()->Set(self->sAccess6, obj->Get(self->sAccess6));
      if (obj->Has(self->sAccess7)) info.This()->Set(self->sAccess7, obj->Get(self->sAccess7));
      if (obj->Has(self->sAccess8)) info.This()->Set(self->sAccess8, obj->Get(self->sAccess8));
      if (obj->Has(self->sAccess9)) info.This()->Set(self->sAccess9, obj->Get(self->sAccess9));
      if (obj->Has(self->sAccess10)) info.This()->Set(self->sAccess10, obj->Get(self->sAccess10));
      if (obj->Has(self->sAccess11)) info.This()->Set(self->sAccess11, obj->Get(self->sAccess11));
      if (obj->Has(self->sAccess12)) info.This()->Set(self->sAccess12, obj->Get(self->sAccess12));
      if (obj->Has(self->sAccess13)) info.This()->Set(self->sAccess13, obj->Get(self->sAccess13));
      if (obj->Has(self->sAccess14)) info.This()->Set(self->sAccess14, obj->Get(self->sAccess14));
      
    }
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkImageCreateInfo constructor cannot be invoked without 'new'");
  }
};

NAN_METHOD(_VkImageCreateInfo::flush) {
  _VkImageCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkImageCreateInfo>(info.This());
  
  info.This()->Set(self->sAccess5, info.This()->Get(self->sAccess5));
}

// sType
NAN_GETTER(_VkImageCreateInfo::GetsType) {
  _VkImageCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkImageCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sType));
}NAN_SETTER(_VkImageCreateInfo::SetsType) {
  _VkImageCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkImageCreateInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.sType = static_cast<VkStructureType>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkImageCreateInfo.sType'");
  }
}// pNext
NAN_GETTER(_VkImageCreateInfo::GetpNext) {
  _VkImageCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkImageCreateInfo>(info.This());
}NAN_SETTER(_VkImageCreateInfo::SetpNext) {
  _VkImageCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkImageCreateInfo>(info.This());
}// flags
NAN_GETTER(_VkImageCreateInfo::Getflags) {
  _VkImageCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkImageCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.flags));
}NAN_SETTER(_VkImageCreateInfo::Setflags) {
  _VkImageCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkImageCreateInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.flags = static_cast<VkImageCreateFlags>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkImageCreateInfo.flags'");
  }
}// imageType
NAN_GETTER(_VkImageCreateInfo::GetimageType) {
  _VkImageCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkImageCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.imageType));
}NAN_SETTER(_VkImageCreateInfo::SetimageType) {
  _VkImageCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkImageCreateInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.imageType = static_cast<VkImageType>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkImageCreateInfo.imageType'");
  }
}// format
NAN_GETTER(_VkImageCreateInfo::Getformat) {
  _VkImageCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkImageCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.format));
}NAN_SETTER(_VkImageCreateInfo::Setformat) {
  _VkImageCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkImageCreateInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.format = static_cast<VkFormat>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkImageCreateInfo.format'");
  }
}// extent
NAN_GETTER(_VkImageCreateInfo::Getextent) {
  _VkImageCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkImageCreateInfo>(info.This());
  if (self->extent.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->extent);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkImageCreateInfo::Setextent) {
  _VkImageCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkImageCreateInfo>(info.This());
  // js
  if (!value->IsNull()) {
    v8::Local<v8::Object> obj = Nan::To<v8::Object>(value).ToLocalChecked();
    if (Nan::New(_VkExtent3D::constructor)->HasInstance(obj)) {
      self->extent.Reset<v8::Object>(value.As<v8::Object>());
      _VkExtent3D* inst = Nan::ObjectWrap::Unwrap<_VkExtent3D>(obj);
      self->instance.extent = inst->instance;
    } else {
      return Nan::ThrowTypeError("Expected 'Object [VkExtent3D]' for 'VkImageCreateInfo.extent'");
    }
  } else if (value->IsNull()) {
    self->extent.Reset();
    memset(&self->instance.extent, 0, sizeof(VkExtent3D));
  } else {
    return Nan::ThrowTypeError("Expected 'Object [VkExtent3D]' for 'VkImageCreateInfo.extent'");
  }
}// mipLevels
NAN_GETTER(_VkImageCreateInfo::GetmipLevels) {
  _VkImageCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkImageCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.mipLevels));
}NAN_SETTER(_VkImageCreateInfo::SetmipLevels) {
  _VkImageCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkImageCreateInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.mipLevels = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkImageCreateInfo.mipLevels'");
  }
}// arrayLayers
NAN_GETTER(_VkImageCreateInfo::GetarrayLayers) {
  _VkImageCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkImageCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.arrayLayers));
}NAN_SETTER(_VkImageCreateInfo::SetarrayLayers) {
  _VkImageCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkImageCreateInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.arrayLayers = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkImageCreateInfo.arrayLayers'");
  }
}// samples
NAN_GETTER(_VkImageCreateInfo::Getsamples) {
  _VkImageCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkImageCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.samples));
}NAN_SETTER(_VkImageCreateInfo::Setsamples) {
  _VkImageCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkImageCreateInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.samples = static_cast<VkSampleCountFlagBits>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkImageCreateInfo.samples'");
  }
}// tiling
NAN_GETTER(_VkImageCreateInfo::Gettiling) {
  _VkImageCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkImageCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.tiling));
}NAN_SETTER(_VkImageCreateInfo::Settiling) {
  _VkImageCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkImageCreateInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.tiling = static_cast<VkImageTiling>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkImageCreateInfo.tiling'");
  }
}// usage
NAN_GETTER(_VkImageCreateInfo::Getusage) {
  _VkImageCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkImageCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.usage));
}NAN_SETTER(_VkImageCreateInfo::Setusage) {
  _VkImageCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkImageCreateInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.usage = static_cast<VkImageUsageFlags>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkImageCreateInfo.usage'");
  }
}// sharingMode
NAN_GETTER(_VkImageCreateInfo::GetsharingMode) {
  _VkImageCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkImageCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sharingMode));
}NAN_SETTER(_VkImageCreateInfo::SetsharingMode) {
  _VkImageCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkImageCreateInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.sharingMode = static_cast<VkSharingMode>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkImageCreateInfo.sharingMode'");
  }
}// queueFamilyIndexCount
NAN_GETTER(_VkImageCreateInfo::GetqueueFamilyIndexCount) {
  _VkImageCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkImageCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.queueFamilyIndexCount));
}NAN_SETTER(_VkImageCreateInfo::SetqueueFamilyIndexCount) {
  _VkImageCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkImageCreateInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.queueFamilyIndexCount = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkImageCreateInfo.queueFamilyIndexCount'");
  }
}// pQueueFamilyIndices
NAN_GETTER(_VkImageCreateInfo::GetpQueueFamilyIndices) {
  _VkImageCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkImageCreateInfo>(info.This());
  if (self->pQueueFamilyIndices.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->pQueueFamilyIndices);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkImageCreateInfo::SetpQueueFamilyIndices) {
  _VkImageCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkImageCreateInfo>(info.This());
  
    // js
    if (value->IsArrayBufferView()) {
      if (value->IsUint32Array()) {
        self->pQueueFamilyIndices.Reset<v8::Array>(value.As<v8::Array>());
      } else {
        return Nan::ThrowTypeError("Expected 'Uint32Array' for 'VkImageCreateInfo.pQueueFamilyIndices'");
      }
    } else if (value->IsNull()) {
      self->pQueueFamilyIndices.Reset();
    } else {
      return Nan::ThrowTypeError("Expected 'Uint32Array' for 'VkImageCreateInfo.pQueueFamilyIndices'");
    }
  
  
  // vulkan
  if (value->IsArrayBufferView()) {
    self->instance.pQueueFamilyIndices = getTypedArrayData<uint32_t>(Nan::To<v8::Object>(value).ToLocalChecked(), nullptr);
  } else {
    self->instance.pQueueFamilyIndices = nullptr;
  }
}// initialLayout
NAN_GETTER(_VkImageCreateInfo::GetinitialLayout) {
  _VkImageCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkImageCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.initialLayout));
}NAN_SETTER(_VkImageCreateInfo::SetinitialLayout) {
  _VkImageCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkImageCreateInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.initialLayout = static_cast<VkImageLayout>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkImageCreateInfo.initialLayout'");
  }
}