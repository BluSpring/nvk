/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY node-vulkan v0.0.9
 */
#include "utils.h"
#include "index.h"
#include "VkDescriptorSetVariableDescriptorCountLayoutSupportEXT.h"

Nan::Persistent<v8::FunctionTemplate> _VkDescriptorSetVariableDescriptorCountLayoutSupportEXT::constructor;

_VkDescriptorSetVariableDescriptorCountLayoutSupportEXT::_VkDescriptorSetVariableDescriptorCountLayoutSupportEXT() {
  instance.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT;
  
}

_VkDescriptorSetVariableDescriptorCountLayoutSupportEXT::~_VkDescriptorSetVariableDescriptorCountLayoutSupportEXT() {
  //printf("VkDescriptorSetVariableDescriptorCountLayoutSupportEXT deconstructed!!\n");
  
  
  
}

void _VkDescriptorSetVariableDescriptorCountLayoutSupportEXT::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkDescriptorSetVariableDescriptorCountLayoutSupportEXT::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkDescriptorSetVariableDescriptorCountLayoutSupportEXT").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("sType").ToLocalChecked(), GetsType, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxVariableDescriptorCount").ToLocalChecked(), GetmaxVariableDescriptorCount, nullptr, ctor);
  Nan::Set(target, Nan::New("VkDescriptorSetVariableDescriptorCountLayoutSupportEXT").ToLocalChecked(), ctor->GetFunction());
}

bool _VkDescriptorSetVariableDescriptorCountLayoutSupportEXT::flush() {
  _VkDescriptorSetVariableDescriptorCountLayoutSupportEXT *self = this;
  
  return true;
}

NAN_METHOD(_VkDescriptorSetVariableDescriptorCountLayoutSupportEXT::New) {
  if (info.IsConstructCall()) {
    _VkDescriptorSetVariableDescriptorCountLayoutSupportEXT* self = new _VkDescriptorSetVariableDescriptorCountLayoutSupportEXT();
    self->Wrap(info.Holder());
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkDescriptorSetVariableDescriptorCountLayoutSupportEXT constructor cannot be invoked without 'new'");
  }
};

// sType
NAN_GETTER(_VkDescriptorSetVariableDescriptorCountLayoutSupportEXT::GetsType) {
  _VkDescriptorSetVariableDescriptorCountLayoutSupportEXT *self = Nan::ObjectWrap::Unwrap<_VkDescriptorSetVariableDescriptorCountLayoutSupportEXT>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sType));
}// maxVariableDescriptorCount
NAN_GETTER(_VkDescriptorSetVariableDescriptorCountLayoutSupportEXT::GetmaxVariableDescriptorCount) {
  _VkDescriptorSetVariableDescriptorCountLayoutSupportEXT *self = Nan::ObjectWrap::Unwrap<_VkDescriptorSetVariableDescriptorCountLayoutSupportEXT>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxVariableDescriptorCount));
}