/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY node-vulkan v0.0.7
 */
#include "utils.h"
#include "index.h"
#include "VkExtent3D.h"

Nan::Persistent<v8::FunctionTemplate> _VkExtent3D::constructor;

_VkExtent3D::_VkExtent3D() {
  
}

_VkExtent3D::~_VkExtent3D() {
  //printf("VkExtent3D deconstructed!!\n");
}

void _VkExtent3D::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkExtent3D::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkExtent3D").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  Nan::SetPrototypeMethod(ctor, "flush", flush);
  
  SetPrototypeAccessor(proto, Nan::New("width").ToLocalChecked(), Getwidth, Setwidth, ctor);
  SetPrototypeAccessor(proto, Nan::New("height").ToLocalChecked(), Getheight, Setheight, ctor);
  SetPrototypeAccessor(proto, Nan::New("depth").ToLocalChecked(), Getdepth, Setdepth, ctor);
  Nan::Set(target, Nan::New("VkExtent3D").ToLocalChecked(), ctor->GetFunction());
}

NAN_METHOD(_VkExtent3D::New) {
  if (info.IsConstructCall()) {
    _VkExtent3D* self = new _VkExtent3D();
    self->Wrap(info.Holder());
    
    if (info[0]->IsObject()) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(info[0]).ToLocalChecked();
      if (obj->Has(self->sAccess0)) info.This()->Set(self->sAccess0, obj->Get(self->sAccess0));
      if (obj->Has(self->sAccess1)) info.This()->Set(self->sAccess1, obj->Get(self->sAccess1));
      if (obj->Has(self->sAccess2)) info.This()->Set(self->sAccess2, obj->Get(self->sAccess2));
      
    }
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkExtent3D constructor cannot be invoked without 'new'");
  }
};

NAN_METHOD(_VkExtent3D::flush) {
  _VkExtent3D *self = Nan::ObjectWrap::Unwrap<_VkExtent3D>(info.This());
  
}

// width
NAN_GETTER(_VkExtent3D::Getwidth) {
  _VkExtent3D *self = Nan::ObjectWrap::Unwrap<_VkExtent3D>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.width));
}NAN_SETTER(_VkExtent3D::Setwidth) {
  _VkExtent3D *self = Nan::ObjectWrap::Unwrap<_VkExtent3D>(info.This());
  if (value->IsNumber()) {
    self->instance.width = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkExtent3D.width'");
  }
}// height
NAN_GETTER(_VkExtent3D::Getheight) {
  _VkExtent3D *self = Nan::ObjectWrap::Unwrap<_VkExtent3D>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.height));
}NAN_SETTER(_VkExtent3D::Setheight) {
  _VkExtent3D *self = Nan::ObjectWrap::Unwrap<_VkExtent3D>(info.This());
  if (value->IsNumber()) {
    self->instance.height = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkExtent3D.height'");
  }
}// depth
NAN_GETTER(_VkExtent3D::Getdepth) {
  _VkExtent3D *self = Nan::ObjectWrap::Unwrap<_VkExtent3D>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.depth));
}NAN_SETTER(_VkExtent3D::Setdepth) {
  _VkExtent3D *self = Nan::ObjectWrap::Unwrap<_VkExtent3D>(info.This());
  if (value->IsNumber()) {
    self->instance.depth = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkExtent3D.depth'");
  }
}