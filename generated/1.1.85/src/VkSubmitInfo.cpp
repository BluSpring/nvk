/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY node-vulkan v0.1.0
 */
#include "utils.h"
#include "index.h"
#include "VkSubmitInfo.h"

Nan::Persistent<v8::FunctionTemplate> _VkSubmitInfo::constructor;

_VkSubmitInfo::_VkSubmitInfo() {
  instance.sType = VK_STRUCTURE_TYPE_SUBMIT_INFO;
  vpWaitSemaphores = new std::vector<VkSemaphore>;
  vpCommandBuffers = new std::vector<VkCommandBuffer>;
  vpSignalSemaphores = new std::vector<VkSemaphore>;
  
}

_VkSubmitInfo::~_VkSubmitInfo() {
  //printf("VkSubmitInfo deconstructed!!\n");
  
  
  
  vpWaitSemaphores->clear();
  delete vpWaitSemaphores;
  
  pWaitSemaphores.Reset();
  
  pWaitDstStageMask.Reset();
  
  
  vpCommandBuffers->clear();
  delete vpCommandBuffers;
  
  pCommandBuffers.Reset();
  
  
  vpSignalSemaphores->clear();
  delete vpSignalSemaphores;
  
  pSignalSemaphores.Reset();
  
}

void _VkSubmitInfo::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkSubmitInfo::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkSubmitInfo").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("sType").ToLocalChecked(), GetsType, SetsType, ctor);
  SetPrototypeAccessor(proto, Nan::New("waitSemaphoreCount").ToLocalChecked(), GetwaitSemaphoreCount, SetwaitSemaphoreCount, ctor);
  SetPrototypeAccessor(proto, Nan::New("pWaitSemaphores").ToLocalChecked(), GetpWaitSemaphores, SetpWaitSemaphores, ctor);
  SetPrototypeAccessor(proto, Nan::New("pWaitDstStageMask").ToLocalChecked(), GetpWaitDstStageMask, SetpWaitDstStageMask, ctor);
  SetPrototypeAccessor(proto, Nan::New("commandBufferCount").ToLocalChecked(), GetcommandBufferCount, SetcommandBufferCount, ctor);
  SetPrototypeAccessor(proto, Nan::New("pCommandBuffers").ToLocalChecked(), GetpCommandBuffers, SetpCommandBuffers, ctor);
  SetPrototypeAccessor(proto, Nan::New("signalSemaphoreCount").ToLocalChecked(), GetsignalSemaphoreCount, SetsignalSemaphoreCount, ctor);
  SetPrototypeAccessor(proto, Nan::New("pSignalSemaphores").ToLocalChecked(), GetpSignalSemaphores, SetpSignalSemaphores, ctor);
  Nan::Set(target, Nan::New("VkSubmitInfo").ToLocalChecked(), ctor->GetFunction());
}

bool _VkSubmitInfo::flush() {
  _VkSubmitInfo *self = this;
  if (!(self->pWaitSemaphores.IsEmpty())) {
    v8::Local<v8::Value> value = Nan::New(self->pWaitSemaphores);
    
    v8::Local<v8::Array> array = v8::Local<v8::Array>::Cast(value);
    // validate length
    if (array->Length() != self->instance.waitSemaphoreCount) {
      Nan::ThrowRangeError("Invalid array length, expected array length of 'waitSemaphoreCount' for 'VkSubmitInfo.pWaitSemaphores'");
      return false;
    }
    std::vector<VkSemaphore>* data = self->vpWaitSemaphores;
    data->clear();
    for (unsigned int ii = 0; ii < array->Length(); ++ii) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(Nan::Get(array, ii).ToLocalChecked()).ToLocalChecked();
      if (!(Nan::New(_VkSemaphore::constructor)->HasInstance(obj))) {
        
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkSemaphore]' for 'VkSubmitInfo.pWaitSemaphores' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
        return false;
      }
      _VkSemaphore* result = Nan::ObjectWrap::Unwrap<_VkSemaphore>(obj);
      
      data->push_back(result->instance);
    };
    self->instance.pWaitSemaphores = data->data();
  }if (!(self->pCommandBuffers.IsEmpty())) {
    v8::Local<v8::Value> value = Nan::New(self->pCommandBuffers);
    
    v8::Local<v8::Array> array = v8::Local<v8::Array>::Cast(value);
    // validate length
    if (array->Length() != self->instance.commandBufferCount) {
      Nan::ThrowRangeError("Invalid array length, expected array length of 'commandBufferCount' for 'VkSubmitInfo.pCommandBuffers'");
      return false;
    }
    std::vector<VkCommandBuffer>* data = self->vpCommandBuffers;
    data->clear();
    for (unsigned int ii = 0; ii < array->Length(); ++ii) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(Nan::Get(array, ii).ToLocalChecked()).ToLocalChecked();
      if (!(Nan::New(_VkCommandBuffer::constructor)->HasInstance(obj))) {
        
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkCommandBuffer]' for 'VkSubmitInfo.pCommandBuffers' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
        return false;
      }
      _VkCommandBuffer* result = Nan::ObjectWrap::Unwrap<_VkCommandBuffer>(obj);
      
      data->push_back(result->instance);
    };
    self->instance.pCommandBuffers = data->data();
  }if (!(self->pSignalSemaphores.IsEmpty())) {
    v8::Local<v8::Value> value = Nan::New(self->pSignalSemaphores);
    
    v8::Local<v8::Array> array = v8::Local<v8::Array>::Cast(value);
    // validate length
    if (array->Length() != self->instance.signalSemaphoreCount) {
      Nan::ThrowRangeError("Invalid array length, expected array length of 'signalSemaphoreCount' for 'VkSubmitInfo.pSignalSemaphores'");
      return false;
    }
    std::vector<VkSemaphore>* data = self->vpSignalSemaphores;
    data->clear();
    for (unsigned int ii = 0; ii < array->Length(); ++ii) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(Nan::Get(array, ii).ToLocalChecked()).ToLocalChecked();
      if (!(Nan::New(_VkSemaphore::constructor)->HasInstance(obj))) {
        
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkSemaphore]' for 'VkSubmitInfo.pSignalSemaphores' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
        return false;
      }
      _VkSemaphore* result = Nan::ObjectWrap::Unwrap<_VkSemaphore>(obj);
      
      data->push_back(result->instance);
    };
    self->instance.pSignalSemaphores = data->data();
  }
  return true;
}

NAN_METHOD(_VkSubmitInfo::New) {
  if (info.IsConstructCall()) {
    _VkSubmitInfo* self = new _VkSubmitInfo();
    self->Wrap(info.Holder());
    
    if (info[0]->IsObject()) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(info[0]).ToLocalChecked();
      v8::Local<v8::String> sAccess0 = Nan::New("sType").ToLocalChecked();
      v8::Local<v8::String> sAccess2 = Nan::New("waitSemaphoreCount").ToLocalChecked();
      v8::Local<v8::String> sAccess3 = Nan::New("pWaitSemaphores").ToLocalChecked();
      v8::Local<v8::String> sAccess4 = Nan::New("pWaitDstStageMask").ToLocalChecked();
      v8::Local<v8::String> sAccess5 = Nan::New("commandBufferCount").ToLocalChecked();
      v8::Local<v8::String> sAccess6 = Nan::New("pCommandBuffers").ToLocalChecked();
      v8::Local<v8::String> sAccess7 = Nan::New("signalSemaphoreCount").ToLocalChecked();
      v8::Local<v8::String> sAccess8 = Nan::New("pSignalSemaphores").ToLocalChecked();
      if (obj->Has(sAccess0)) info.This()->Set(sAccess0, obj->Get(sAccess0));
      if (obj->Has(sAccess2)) info.This()->Set(sAccess2, obj->Get(sAccess2));
      if (obj->Has(sAccess3)) info.This()->Set(sAccess3, obj->Get(sAccess3));
      if (obj->Has(sAccess4)) info.This()->Set(sAccess4, obj->Get(sAccess4));
      if (obj->Has(sAccess5)) info.This()->Set(sAccess5, obj->Get(sAccess5));
      if (obj->Has(sAccess6)) info.This()->Set(sAccess6, obj->Get(sAccess6));
      if (obj->Has(sAccess7)) info.This()->Set(sAccess7, obj->Get(sAccess7));
      if (obj->Has(sAccess8)) info.This()->Set(sAccess8, obj->Get(sAccess8));
      
    }
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkSubmitInfo constructor cannot be invoked without 'new'");
  }
};

// sType
NAN_GETTER(_VkSubmitInfo::GetsType) {
  _VkSubmitInfo *self = Nan::ObjectWrap::Unwrap<_VkSubmitInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sType));
}NAN_SETTER(_VkSubmitInfo::SetsType) {
  _VkSubmitInfo *self = Nan::ObjectWrap::Unwrap<_VkSubmitInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.sType = static_cast<VkStructureType>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkSubmitInfo.sType' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// waitSemaphoreCount
NAN_GETTER(_VkSubmitInfo::GetwaitSemaphoreCount) {
  _VkSubmitInfo *self = Nan::ObjectWrap::Unwrap<_VkSubmitInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.waitSemaphoreCount));
}NAN_SETTER(_VkSubmitInfo::SetwaitSemaphoreCount) {
  _VkSubmitInfo *self = Nan::ObjectWrap::Unwrap<_VkSubmitInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.waitSemaphoreCount = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkSubmitInfo.waitSemaphoreCount' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// pWaitSemaphores
NAN_GETTER(_VkSubmitInfo::GetpWaitSemaphores) {
  _VkSubmitInfo *self = Nan::ObjectWrap::Unwrap<_VkSubmitInfo>(info.This());
  if (self->pWaitSemaphores.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->pWaitSemaphores);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkSubmitInfo::SetpWaitSemaphores) {
  _VkSubmitInfo *self = Nan::ObjectWrap::Unwrap<_VkSubmitInfo>(info.This());
  
    // js
    if (value->IsArray()) {
      self->pWaitSemaphores.Reset<v8::Array>(value.As<v8::Array>());
    } else if (value->IsNull()) {
      self->pWaitSemaphores.Reset();
      self->instance.pWaitSemaphores = nullptr;
    } else {
      
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkSemaphore]' for 'VkSubmitInfo.pWaitSemaphores' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
      return;
    }
  
  // vulkan
  if (value->IsArray()) {
    
  } else if (value->IsNull()) {
    self->instance.pWaitSemaphores = VK_NULL_HANDLE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkSemaphore]' for 'VkSubmitInfo.pWaitSemaphores' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// pWaitDstStageMask
NAN_GETTER(_VkSubmitInfo::GetpWaitDstStageMask) {
  _VkSubmitInfo *self = Nan::ObjectWrap::Unwrap<_VkSubmitInfo>(info.This());
  if (self->pWaitDstStageMask.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->pWaitDstStageMask);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkSubmitInfo::SetpWaitDstStageMask) {
  _VkSubmitInfo *self = Nan::ObjectWrap::Unwrap<_VkSubmitInfo>(info.This());
  
    // js
    if (value->IsArrayBufferView()) {
      if (value->IsInt32Array()) {
        self->pWaitDstStageMask.Reset<v8::Array>(value.As<v8::Array>());
      } else {
        
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Int32Array' for 'VkSubmitInfo.pWaitDstStageMask' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
        return;
      }
    } else if (value->IsNull()) {
      self->pWaitDstStageMask.Reset();
    } else {
      
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Int32Array' for 'VkSubmitInfo.pWaitDstStageMask' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
      return;
    }
  
  
  // vulkan
  if (value->IsArrayBufferView()) {
    self->instance.pWaitDstStageMask = reinterpret_cast<const VkPipelineStageFlags *>(getTypedArrayData<int32_t>(Nan::To<v8::Object>(value).ToLocalChecked(), nullptr));
  } else {
    self->instance.pWaitDstStageMask = nullptr;
  }
}// commandBufferCount
NAN_GETTER(_VkSubmitInfo::GetcommandBufferCount) {
  _VkSubmitInfo *self = Nan::ObjectWrap::Unwrap<_VkSubmitInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.commandBufferCount));
}NAN_SETTER(_VkSubmitInfo::SetcommandBufferCount) {
  _VkSubmitInfo *self = Nan::ObjectWrap::Unwrap<_VkSubmitInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.commandBufferCount = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkSubmitInfo.commandBufferCount' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// pCommandBuffers
NAN_GETTER(_VkSubmitInfo::GetpCommandBuffers) {
  _VkSubmitInfo *self = Nan::ObjectWrap::Unwrap<_VkSubmitInfo>(info.This());
  if (self->pCommandBuffers.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->pCommandBuffers);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkSubmitInfo::SetpCommandBuffers) {
  _VkSubmitInfo *self = Nan::ObjectWrap::Unwrap<_VkSubmitInfo>(info.This());
  
    // js
    if (value->IsArray()) {
      self->pCommandBuffers.Reset<v8::Array>(value.As<v8::Array>());
    } else if (value->IsNull()) {
      self->pCommandBuffers.Reset();
      self->instance.pCommandBuffers = nullptr;
    } else {
      
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkCommandBuffer]' for 'VkSubmitInfo.pCommandBuffers' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
      return;
    }
  
  // vulkan
  if (value->IsArray()) {
    
  } else if (value->IsNull()) {
    self->instance.pCommandBuffers = VK_NULL_HANDLE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkCommandBuffer]' for 'VkSubmitInfo.pCommandBuffers' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// signalSemaphoreCount
NAN_GETTER(_VkSubmitInfo::GetsignalSemaphoreCount) {
  _VkSubmitInfo *self = Nan::ObjectWrap::Unwrap<_VkSubmitInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.signalSemaphoreCount));
}NAN_SETTER(_VkSubmitInfo::SetsignalSemaphoreCount) {
  _VkSubmitInfo *self = Nan::ObjectWrap::Unwrap<_VkSubmitInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.signalSemaphoreCount = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkSubmitInfo.signalSemaphoreCount' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// pSignalSemaphores
NAN_GETTER(_VkSubmitInfo::GetpSignalSemaphores) {
  _VkSubmitInfo *self = Nan::ObjectWrap::Unwrap<_VkSubmitInfo>(info.This());
  if (self->pSignalSemaphores.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->pSignalSemaphores);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkSubmitInfo::SetpSignalSemaphores) {
  _VkSubmitInfo *self = Nan::ObjectWrap::Unwrap<_VkSubmitInfo>(info.This());
  
    // js
    if (value->IsArray()) {
      self->pSignalSemaphores.Reset<v8::Array>(value.As<v8::Array>());
    } else if (value->IsNull()) {
      self->pSignalSemaphores.Reset();
      self->instance.pSignalSemaphores = nullptr;
    } else {
      
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkSemaphore]' for 'VkSubmitInfo.pSignalSemaphores' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
      return;
    }
  
  // vulkan
  if (value->IsArray()) {
    
  } else if (value->IsNull()) {
    self->instance.pSignalSemaphores = VK_NULL_HANDLE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkSemaphore]' for 'VkSubmitInfo.pSignalSemaphores' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}