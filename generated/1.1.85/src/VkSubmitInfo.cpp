/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY node-vulkan v0.0.7
 */
#include "utils.h"
#include "index.h"
#include "VkSubmitInfo.h"

Nan::Persistent<v8::FunctionTemplate> _VkSubmitInfo::constructor;

_VkSubmitInfo::_VkSubmitInfo() {
  instance.sType = VK_STRUCTURE_TYPE_SUBMIT_INFO;
}

_VkSubmitInfo::~_VkSubmitInfo() {
  //printf("VkSubmitInfo deconstructed!!\n");
}

void _VkSubmitInfo::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkSubmitInfo::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkSubmitInfo").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  Nan::SetPrototypeMethod(ctor, "flush", flush);
  
  SetPrototypeAccessor(proto, Nan::New("sType").ToLocalChecked(), GetsType, SetsType, ctor);
  SetPrototypeAccessor(proto, Nan::New("pNext").ToLocalChecked(), GetpNext, SetpNext, ctor);
  SetPrototypeAccessor(proto, Nan::New("waitSemaphoreCount").ToLocalChecked(), GetwaitSemaphoreCount, SetwaitSemaphoreCount, ctor);
  SetPrototypeAccessor(proto, Nan::New("pWaitSemaphores").ToLocalChecked(), GetpWaitSemaphores, SetpWaitSemaphores, ctor);
  SetPrototypeAccessor(proto, Nan::New("pWaitDstStageMask").ToLocalChecked(), GetpWaitDstStageMask, SetpWaitDstStageMask, ctor);
  SetPrototypeAccessor(proto, Nan::New("commandBufferCount").ToLocalChecked(), GetcommandBufferCount, SetcommandBufferCount, ctor);
  SetPrototypeAccessor(proto, Nan::New("pCommandBuffers").ToLocalChecked(), GetpCommandBuffers, SetpCommandBuffers, ctor);
  SetPrototypeAccessor(proto, Nan::New("signalSemaphoreCount").ToLocalChecked(), GetsignalSemaphoreCount, SetsignalSemaphoreCount, ctor);
  SetPrototypeAccessor(proto, Nan::New("pSignalSemaphores").ToLocalChecked(), GetpSignalSemaphores, SetpSignalSemaphores, ctor);
  Nan::Set(target, Nan::New("VkSubmitInfo").ToLocalChecked(), ctor->GetFunction());
}

NAN_METHOD(_VkSubmitInfo::New) {
  if (info.IsConstructCall()) {
    _VkSubmitInfo* self = new _VkSubmitInfo();
    self->Wrap(info.Holder());
    
    if (info[0]->IsObject()) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(info[0]).ToLocalChecked();
      if (obj->Has(self->sAccess0)) info.This()->Set(self->sAccess0, obj->Get(self->sAccess0));
      if (obj->Has(self->sAccess1)) info.This()->Set(self->sAccess1, obj->Get(self->sAccess1));
      if (obj->Has(self->sAccess2)) info.This()->Set(self->sAccess2, obj->Get(self->sAccess2));
      if (obj->Has(self->sAccess3)) info.This()->Set(self->sAccess3, obj->Get(self->sAccess3));
      if (obj->Has(self->sAccess4)) info.This()->Set(self->sAccess4, obj->Get(self->sAccess4));
      if (obj->Has(self->sAccess5)) info.This()->Set(self->sAccess5, obj->Get(self->sAccess5));
      if (obj->Has(self->sAccess6)) info.This()->Set(self->sAccess6, obj->Get(self->sAccess6));
      if (obj->Has(self->sAccess7)) info.This()->Set(self->sAccess7, obj->Get(self->sAccess7));
      if (obj->Has(self->sAccess8)) info.This()->Set(self->sAccess8, obj->Get(self->sAccess8));
      
    }
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkSubmitInfo constructor cannot be invoked without 'new'");
  }
};

NAN_METHOD(_VkSubmitInfo::flush) {
  _VkSubmitInfo *self = Nan::ObjectWrap::Unwrap<_VkSubmitInfo>(info.This());
  
  info.This()->Set(self->sAccess3, info.This()->Get(self->sAccess3));
  info.This()->Set(self->sAccess6, info.This()->Get(self->sAccess6));
  info.This()->Set(self->sAccess8, info.This()->Get(self->sAccess8));
}

// sType
NAN_GETTER(_VkSubmitInfo::GetsType) {
  _VkSubmitInfo *self = Nan::ObjectWrap::Unwrap<_VkSubmitInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sType));
}NAN_SETTER(_VkSubmitInfo::SetsType) {
  _VkSubmitInfo *self = Nan::ObjectWrap::Unwrap<_VkSubmitInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.sType = static_cast<VkStructureType>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkSubmitInfo.sType'");
  }
}// pNext
NAN_GETTER(_VkSubmitInfo::GetpNext) {
  _VkSubmitInfo *self = Nan::ObjectWrap::Unwrap<_VkSubmitInfo>(info.This());
}NAN_SETTER(_VkSubmitInfo::SetpNext) {
  _VkSubmitInfo *self = Nan::ObjectWrap::Unwrap<_VkSubmitInfo>(info.This());
}// waitSemaphoreCount
NAN_GETTER(_VkSubmitInfo::GetwaitSemaphoreCount) {
  _VkSubmitInfo *self = Nan::ObjectWrap::Unwrap<_VkSubmitInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.waitSemaphoreCount));
}NAN_SETTER(_VkSubmitInfo::SetwaitSemaphoreCount) {
  _VkSubmitInfo *self = Nan::ObjectWrap::Unwrap<_VkSubmitInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.waitSemaphoreCount = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkSubmitInfo.waitSemaphoreCount'");
  }
}// pWaitSemaphores
NAN_GETTER(_VkSubmitInfo::GetpWaitSemaphores) {
  _VkSubmitInfo *self = Nan::ObjectWrap::Unwrap<_VkSubmitInfo>(info.This());
  if (self->pWaitSemaphores.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->pWaitSemaphores);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkSubmitInfo::SetpWaitSemaphores) {
  _VkSubmitInfo *self = Nan::ObjectWrap::Unwrap<_VkSubmitInfo>(info.This());
  
    // js
    if (value->IsArray()) {
      self->pWaitSemaphores.Reset<v8::Array>(value.As<v8::Array>());
    } else if (value->IsNull()) {
      self->pWaitSemaphores.Reset();
    } else {
      return Nan::ThrowTypeError("Expected 'Object [VkSemaphore]' for 'VkSubmitInfo.pWaitSemaphores'");
    }
  
  // vulkan
  if (value->IsArray()) {
    self->instance.pWaitSemaphores = copyArrayOfV8Objects<VkSemaphore, _VkSemaphore>(value);
  } else if (value->IsNull()) {
    self->instance.pWaitSemaphores = VK_NULL_HANDLE;
  } else {
    return Nan::ThrowTypeError("Expected 'Object [VkSemaphore]' for 'VkSubmitInfo.pWaitSemaphores'");
  }
}// pWaitDstStageMask
NAN_GETTER(_VkSubmitInfo::GetpWaitDstStageMask) {
  _VkSubmitInfo *self = Nan::ObjectWrap::Unwrap<_VkSubmitInfo>(info.This());
  if (self->pWaitDstStageMask.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->pWaitDstStageMask);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkSubmitInfo::SetpWaitDstStageMask) {
  _VkSubmitInfo *self = Nan::ObjectWrap::Unwrap<_VkSubmitInfo>(info.This());
  
    // js
    if (value->IsArrayBufferView()) {
      if (value->IsInt32Array()) {
        self->pWaitDstStageMask.Reset<v8::Array>(value.As<v8::Array>());
      } else {
        return Nan::ThrowTypeError("Expected 'Int32Array' for 'VkSubmitInfo.pWaitDstStageMask'");
      }
    } else if (value->IsNull()) {
      self->pWaitDstStageMask.Reset();
    } else {
      return Nan::ThrowTypeError("Expected 'Int32Array' for 'VkSubmitInfo.pWaitDstStageMask'");
    }
  
  
  // vulkan
  if (value->IsArrayBufferView()) {
    self->instance.pWaitDstStageMask = reinterpret_cast<const VkPipelineStageFlags *>(getTypedArrayData<int32_t>(Nan::To<v8::Object>(value).ToLocalChecked(), nullptr));
  } else {
    self->instance.pWaitDstStageMask = nullptr;
  }
}// commandBufferCount
NAN_GETTER(_VkSubmitInfo::GetcommandBufferCount) {
  _VkSubmitInfo *self = Nan::ObjectWrap::Unwrap<_VkSubmitInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.commandBufferCount));
}NAN_SETTER(_VkSubmitInfo::SetcommandBufferCount) {
  _VkSubmitInfo *self = Nan::ObjectWrap::Unwrap<_VkSubmitInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.commandBufferCount = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkSubmitInfo.commandBufferCount'");
  }
}// pCommandBuffers
NAN_GETTER(_VkSubmitInfo::GetpCommandBuffers) {
  _VkSubmitInfo *self = Nan::ObjectWrap::Unwrap<_VkSubmitInfo>(info.This());
  if (self->pCommandBuffers.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->pCommandBuffers);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkSubmitInfo::SetpCommandBuffers) {
  _VkSubmitInfo *self = Nan::ObjectWrap::Unwrap<_VkSubmitInfo>(info.This());
  
    // js
    if (value->IsArray()) {
      self->pCommandBuffers.Reset<v8::Array>(value.As<v8::Array>());
    } else if (value->IsNull()) {
      self->pCommandBuffers.Reset();
    } else {
      return Nan::ThrowTypeError("Expected 'Object [VkCommandBuffer]' for 'VkSubmitInfo.pCommandBuffers'");
    }
  
  // vulkan
  if (value->IsArray()) {
    self->instance.pCommandBuffers = copyArrayOfV8Objects<VkCommandBuffer, _VkCommandBuffer>(value);
  } else if (value->IsNull()) {
    self->instance.pCommandBuffers = VK_NULL_HANDLE;
  } else {
    return Nan::ThrowTypeError("Expected 'Object [VkCommandBuffer]' for 'VkSubmitInfo.pCommandBuffers'");
  }
}// signalSemaphoreCount
NAN_GETTER(_VkSubmitInfo::GetsignalSemaphoreCount) {
  _VkSubmitInfo *self = Nan::ObjectWrap::Unwrap<_VkSubmitInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.signalSemaphoreCount));
}NAN_SETTER(_VkSubmitInfo::SetsignalSemaphoreCount) {
  _VkSubmitInfo *self = Nan::ObjectWrap::Unwrap<_VkSubmitInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.signalSemaphoreCount = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkSubmitInfo.signalSemaphoreCount'");
  }
}// pSignalSemaphores
NAN_GETTER(_VkSubmitInfo::GetpSignalSemaphores) {
  _VkSubmitInfo *self = Nan::ObjectWrap::Unwrap<_VkSubmitInfo>(info.This());
  if (self->pSignalSemaphores.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->pSignalSemaphores);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkSubmitInfo::SetpSignalSemaphores) {
  _VkSubmitInfo *self = Nan::ObjectWrap::Unwrap<_VkSubmitInfo>(info.This());
  
    // js
    if (value->IsArray()) {
      self->pSignalSemaphores.Reset<v8::Array>(value.As<v8::Array>());
    } else if (value->IsNull()) {
      self->pSignalSemaphores.Reset();
    } else {
      return Nan::ThrowTypeError("Expected 'Object [VkSemaphore]' for 'VkSubmitInfo.pSignalSemaphores'");
    }
  
  // vulkan
  if (value->IsArray()) {
    self->instance.pSignalSemaphores = copyArrayOfV8Objects<VkSemaphore, _VkSemaphore>(value);
  } else if (value->IsNull()) {
    self->instance.pSignalSemaphores = VK_NULL_HANDLE;
  } else {
    return Nan::ThrowTypeError("Expected 'Object [VkSemaphore]' for 'VkSubmitInfo.pSignalSemaphores'");
  }
}