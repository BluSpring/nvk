/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY node-vulkan v0.0.7
 */
#include "utils.h"
#include "index.h"
#include "VkDescriptorSetLayoutBinding.h"

Nan::Persistent<v8::FunctionTemplate> _VkDescriptorSetLayoutBinding::constructor;

_VkDescriptorSetLayoutBinding::_VkDescriptorSetLayoutBinding() {
  
}

_VkDescriptorSetLayoutBinding::~_VkDescriptorSetLayoutBinding() {
  //printf("VkDescriptorSetLayoutBinding deconstructed!!\n");
}

void _VkDescriptorSetLayoutBinding::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkDescriptorSetLayoutBinding::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkDescriptorSetLayoutBinding").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  Nan::SetPrototypeMethod(ctor, "flush", flush);
  
  SetPrototypeAccessor(proto, Nan::New("binding").ToLocalChecked(), Getbinding, Setbinding, ctor);
  SetPrototypeAccessor(proto, Nan::New("descriptorType").ToLocalChecked(), GetdescriptorType, SetdescriptorType, ctor);
  SetPrototypeAccessor(proto, Nan::New("descriptorCount").ToLocalChecked(), GetdescriptorCount, SetdescriptorCount, ctor);
  SetPrototypeAccessor(proto, Nan::New("stageFlags").ToLocalChecked(), GetstageFlags, SetstageFlags, ctor);
  SetPrototypeAccessor(proto, Nan::New("pImmutableSamplers").ToLocalChecked(), GetpImmutableSamplers, SetpImmutableSamplers, ctor);
  Nan::Set(target, Nan::New("VkDescriptorSetLayoutBinding").ToLocalChecked(), ctor->GetFunction());
}

NAN_METHOD(_VkDescriptorSetLayoutBinding::New) {
  if (info.IsConstructCall()) {
    _VkDescriptorSetLayoutBinding* self = new _VkDescriptorSetLayoutBinding();
    self->Wrap(info.Holder());
    
    if (info[0]->IsObject()) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(info[0]).ToLocalChecked();
      if (obj->Has(self->sAccess0)) info.This()->Set(self->sAccess0, obj->Get(self->sAccess0));
      if (obj->Has(self->sAccess1)) info.This()->Set(self->sAccess1, obj->Get(self->sAccess1));
      if (obj->Has(self->sAccess2)) info.This()->Set(self->sAccess2, obj->Get(self->sAccess2));
      if (obj->Has(self->sAccess3)) info.This()->Set(self->sAccess3, obj->Get(self->sAccess3));
      if (obj->Has(self->sAccess4)) info.This()->Set(self->sAccess4, obj->Get(self->sAccess4));
      
    }
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkDescriptorSetLayoutBinding constructor cannot be invoked without 'new'");
  }
};

NAN_METHOD(_VkDescriptorSetLayoutBinding::flush) {
  _VkDescriptorSetLayoutBinding *self = Nan::ObjectWrap::Unwrap<_VkDescriptorSetLayoutBinding>(info.This());
  
  info.This()->Set(self->sAccess4, info.This()->Get(self->sAccess4));
}

// binding
NAN_GETTER(_VkDescriptorSetLayoutBinding::Getbinding) {
  _VkDescriptorSetLayoutBinding *self = Nan::ObjectWrap::Unwrap<_VkDescriptorSetLayoutBinding>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.binding));
}NAN_SETTER(_VkDescriptorSetLayoutBinding::Setbinding) {
  _VkDescriptorSetLayoutBinding *self = Nan::ObjectWrap::Unwrap<_VkDescriptorSetLayoutBinding>(info.This());
  if (value->IsNumber()) {
    self->instance.binding = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkDescriptorSetLayoutBinding.binding'");
  }
}// descriptorType
NAN_GETTER(_VkDescriptorSetLayoutBinding::GetdescriptorType) {
  _VkDescriptorSetLayoutBinding *self = Nan::ObjectWrap::Unwrap<_VkDescriptorSetLayoutBinding>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.descriptorType));
}NAN_SETTER(_VkDescriptorSetLayoutBinding::SetdescriptorType) {
  _VkDescriptorSetLayoutBinding *self = Nan::ObjectWrap::Unwrap<_VkDescriptorSetLayoutBinding>(info.This());
  if (value->IsNumber()) {
    self->instance.descriptorType = static_cast<VkDescriptorType>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkDescriptorSetLayoutBinding.descriptorType'");
  }
}// descriptorCount
NAN_GETTER(_VkDescriptorSetLayoutBinding::GetdescriptorCount) {
  _VkDescriptorSetLayoutBinding *self = Nan::ObjectWrap::Unwrap<_VkDescriptorSetLayoutBinding>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.descriptorCount));
}NAN_SETTER(_VkDescriptorSetLayoutBinding::SetdescriptorCount) {
  _VkDescriptorSetLayoutBinding *self = Nan::ObjectWrap::Unwrap<_VkDescriptorSetLayoutBinding>(info.This());
  if (value->IsNumber()) {
    self->instance.descriptorCount = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkDescriptorSetLayoutBinding.descriptorCount'");
  }
}// stageFlags
NAN_GETTER(_VkDescriptorSetLayoutBinding::GetstageFlags) {
  _VkDescriptorSetLayoutBinding *self = Nan::ObjectWrap::Unwrap<_VkDescriptorSetLayoutBinding>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.stageFlags));
}NAN_SETTER(_VkDescriptorSetLayoutBinding::SetstageFlags) {
  _VkDescriptorSetLayoutBinding *self = Nan::ObjectWrap::Unwrap<_VkDescriptorSetLayoutBinding>(info.This());
  if (value->IsNumber()) {
    self->instance.stageFlags = static_cast<VkShaderStageFlags>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowTypeError("Expected 'Number' for 'VkDescriptorSetLayoutBinding.stageFlags'");
  }
}// pImmutableSamplers
NAN_GETTER(_VkDescriptorSetLayoutBinding::GetpImmutableSamplers) {
  _VkDescriptorSetLayoutBinding *self = Nan::ObjectWrap::Unwrap<_VkDescriptorSetLayoutBinding>(info.This());
  if (self->pImmutableSamplers.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->pImmutableSamplers);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkDescriptorSetLayoutBinding::SetpImmutableSamplers) {
  _VkDescriptorSetLayoutBinding *self = Nan::ObjectWrap::Unwrap<_VkDescriptorSetLayoutBinding>(info.This());
  
    // js
    if (value->IsArray()) {
      self->pImmutableSamplers.Reset<v8::Array>(value.As<v8::Array>());
    } else if (value->IsNull()) {
      self->pImmutableSamplers.Reset();
    } else {
      return Nan::ThrowTypeError("Expected 'Object [VkSampler]' for 'VkDescriptorSetLayoutBinding.pImmutableSamplers'");
    }
  
  // vulkan
  if (value->IsArray()) {
    self->instance.pImmutableSamplers = copyArrayOfV8Objects<VkSampler, _VkSampler>(value);
  } else if (value->IsNull()) {
    self->instance.pImmutableSamplers = VK_NULL_HANDLE;
  } else {
    return Nan::ThrowTypeError("Expected 'Object [VkSampler]' for 'VkDescriptorSetLayoutBinding.pImmutableSamplers'");
  }
}