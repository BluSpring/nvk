/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY nvk v0.1.2
 */
#include "utils.h"
#include "index.h"
#include "VkPhysicalDeviceExternalSemaphoreInfoKHR.h"

Nan::Persistent<v8::FunctionTemplate> _VkPhysicalDeviceExternalSemaphoreInfoKHR::constructor;

_VkPhysicalDeviceExternalSemaphoreInfoKHR::_VkPhysicalDeviceExternalSemaphoreInfoKHR() {
  
  
}

_VkPhysicalDeviceExternalSemaphoreInfoKHR::~_VkPhysicalDeviceExternalSemaphoreInfoKHR() {
  //printf("VkPhysicalDeviceExternalSemaphoreInfoKHR deconstructed!!\n");
  
}

void _VkPhysicalDeviceExternalSemaphoreInfoKHR::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkPhysicalDeviceExternalSemaphoreInfoKHR::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkPhysicalDeviceExternalSemaphoreInfoKHR").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  Nan::Set(target, Nan::New("VkPhysicalDeviceExternalSemaphoreInfoKHR").ToLocalChecked(), ctor->GetFunction());
}

bool _VkPhysicalDeviceExternalSemaphoreInfoKHR::flush() {
  _VkPhysicalDeviceExternalSemaphoreInfoKHR *self = this;
  
  return true;
}

NAN_METHOD(_VkPhysicalDeviceExternalSemaphoreInfoKHR::New) {
  if (info.IsConstructCall()) {
    _VkPhysicalDeviceExternalSemaphoreInfoKHR* self = new _VkPhysicalDeviceExternalSemaphoreInfoKHR();
    self->Wrap(info.Holder());
    
    if (info[0]->IsObject()) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(info[0]).ToLocalChecked();
      
    }
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkPhysicalDeviceExternalSemaphoreInfoKHR constructor cannot be invoked without 'new'");
  }
};

