/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY node-vulkan v0.0.6
 */
#include "utils.h"
#include "index.h"
#include "VkDescriptorSetAllocateInfo.h"

Nan::Persistent<v8::FunctionTemplate> _VkDescriptorSetAllocateInfo::constructor;

_VkDescriptorSetAllocateInfo::_VkDescriptorSetAllocateInfo() {
  instance.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO;
}

_VkDescriptorSetAllocateInfo::~_VkDescriptorSetAllocateInfo() {
  //printf("VkDescriptorSetAllocateInfo deconstructed!!\n");
}

void _VkDescriptorSetAllocateInfo::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkDescriptorSetAllocateInfo::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkDescriptorSetAllocateInfo").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("sType").ToLocalChecked(), GetsType, SetsType, ctor);
  SetPrototypeAccessor(proto, Nan::New("pNext").ToLocalChecked(), GetpNext, SetpNext, ctor);
  SetPrototypeAccessor(proto, Nan::New("descriptorPool").ToLocalChecked(), GetdescriptorPool, SetdescriptorPool, ctor);
  SetPrototypeAccessor(proto, Nan::New("descriptorSetCount").ToLocalChecked(), GetdescriptorSetCount, SetdescriptorSetCount, ctor);
  SetPrototypeAccessor(proto, Nan::New("pSetLayouts").ToLocalChecked(), GetpSetLayouts, SetpSetLayouts, ctor);
  Nan::Set(target, Nan::New("VkDescriptorSetAllocateInfo").ToLocalChecked(), ctor->GetFunction());
}

NAN_METHOD(_VkDescriptorSetAllocateInfo::New) {
  if (info.IsConstructCall()) {
    _VkDescriptorSetAllocateInfo* self = new _VkDescriptorSetAllocateInfo();
    self->Wrap(info.Holder());
    
    if (info[0]->IsObject()) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(info[0]).ToLocalChecked();
      v8::Local<v8::String> sAccess0 = Nan::New("sType").ToLocalChecked();
      v8::Local<v8::String> sAccess1 = Nan::New("pNext").ToLocalChecked();
      v8::Local<v8::String> sAccess2 = Nan::New("descriptorPool").ToLocalChecked();
      v8::Local<v8::String> sAccess3 = Nan::New("descriptorSetCount").ToLocalChecked();
      v8::Local<v8::String> sAccess4 = Nan::New("pSetLayouts").ToLocalChecked();
      if (obj->Has(sAccess0)) info.This()->Set(sAccess0, obj->Get(sAccess0));
      if (obj->Has(sAccess1)) info.This()->Set(sAccess1, obj->Get(sAccess1));
      if (obj->Has(sAccess2)) info.This()->Set(sAccess2, obj->Get(sAccess2));
      if (obj->Has(sAccess3)) info.This()->Set(sAccess3, obj->Get(sAccess3));
      if (obj->Has(sAccess4)) info.This()->Set(sAccess4, obj->Get(sAccess4));
      
    }
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkDescriptorSetAllocateInfo constructor cannot be invoked without 'new'");
  }
};

// sType
NAN_GETTER(_VkDescriptorSetAllocateInfo::GetsType) {
  _VkDescriptorSetAllocateInfo *self = Nan::ObjectWrap::Unwrap<_VkDescriptorSetAllocateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sType));
}NAN_SETTER(_VkDescriptorSetAllocateInfo::SetsType) {
  _VkDescriptorSetAllocateInfo *self = Nan::ObjectWrap::Unwrap<_VkDescriptorSetAllocateInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.sType = static_cast<VkStructureType>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowError("Value of member 'sType' has invalid type");
  }
}// pNext
NAN_GETTER(_VkDescriptorSetAllocateInfo::GetpNext) {
  _VkDescriptorSetAllocateInfo *self = Nan::ObjectWrap::Unwrap<_VkDescriptorSetAllocateInfo>(info.This());
}NAN_SETTER(_VkDescriptorSetAllocateInfo::SetpNext) {
  _VkDescriptorSetAllocateInfo *self = Nan::ObjectWrap::Unwrap<_VkDescriptorSetAllocateInfo>(info.This());
}// descriptorPool
NAN_GETTER(_VkDescriptorSetAllocateInfo::GetdescriptorPool) {
  _VkDescriptorSetAllocateInfo *self = Nan::ObjectWrap::Unwrap<_VkDescriptorSetAllocateInfo>(info.This());
  if (self->descriptorPool.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->descriptorPool);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkDescriptorSetAllocateInfo::SetdescriptorPool) {
  _VkDescriptorSetAllocateInfo *self = Nan::ObjectWrap::Unwrap<_VkDescriptorSetAllocateInfo>(info.This());
  // js
  if (!value->IsNull()) {
    v8::Local<v8::Object> obj = Nan::To<v8::Object>(value).ToLocalChecked();
    if (Nan::New(_VkDescriptorPool::constructor)->HasInstance(obj)) {
      self->descriptorPool.Reset<v8::Object>(value.As<v8::Object>());
      _VkDescriptorPool* inst = Nan::ObjectWrap::Unwrap<_VkDescriptorPool>(obj);
      self->instance.descriptorPool = inst->instance;
    } else {
      return Nan::ThrowError("Value of member 'descriptorPool' has invalid type");
    }
  } else if (value->IsNull()) {
    self->descriptorPool.Reset();
    self->instance.descriptorPool = VK_NULL_HANDLE;
  } else {
    return Nan::ThrowError("Value of member 'descriptorPool' has invalid type");
  }
}// descriptorSetCount
NAN_GETTER(_VkDescriptorSetAllocateInfo::GetdescriptorSetCount) {
  _VkDescriptorSetAllocateInfo *self = Nan::ObjectWrap::Unwrap<_VkDescriptorSetAllocateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.descriptorSetCount));
}NAN_SETTER(_VkDescriptorSetAllocateInfo::SetdescriptorSetCount) {
  _VkDescriptorSetAllocateInfo *self = Nan::ObjectWrap::Unwrap<_VkDescriptorSetAllocateInfo>(info.This());
  if (value->IsNumber()) {
    self->instance.descriptorSetCount = static_cast<uint32_t>(Nan::To<int64_t>(value).FromMaybe(0));
  } else {
    return Nan::ThrowError("Value of member 'descriptorSetCount' has invalid type");
  }
}// pSetLayouts
NAN_GETTER(_VkDescriptorSetAllocateInfo::GetpSetLayouts) {
  _VkDescriptorSetAllocateInfo *self = Nan::ObjectWrap::Unwrap<_VkDescriptorSetAllocateInfo>(info.This());
  if (self->pSetLayouts.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->pSetLayouts);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkDescriptorSetAllocateInfo::SetpSetLayouts) {
  _VkDescriptorSetAllocateInfo *self = Nan::ObjectWrap::Unwrap<_VkDescriptorSetAllocateInfo>(info.This());
  
    // js
    if (value->IsArray()) {
      self->pSetLayouts.Reset<v8::Array>(value.As<v8::Array>());
    } else if (value->IsNull()) {
      self->pSetLayouts.Reset();
    } else {
      return Nan::ThrowError("Value of member 'pSetLayouts' has invalid type");
    }
  
  // vulkan
  if (value->IsArray()) {
    self->instance.pSetLayouts = copyArrayOfV8Objects<VkDescriptorSetLayout, _VkDescriptorSetLayout>(value);
  } else if (value->IsNull()) {
    self->instance.pSetLayouts = VK_NULL_HANDLE;
  } else {
    return Nan::ThrowError("Value of member 'pSetLayouts' has invalid type");
  }
}