/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY node-vulkan v0.0.6
 */
#include "utils.h"
#include "index.h"
#include "VkClearValue.h"

Nan::Persistent<v8::FunctionTemplate> _VkClearValue::constructor;

_VkClearValue::_VkClearValue() {
  
}

_VkClearValue::~_VkClearValue() {
  //printf("VkClearValue deconstructed!!\n");
}

void _VkClearValue::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkClearValue::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkClearValue").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  Nan::SetPrototypeMethod(ctor, "flush", flush);
  
  SetPrototypeAccessor(proto, Nan::New("color").ToLocalChecked(), Getcolor, Setcolor, ctor);
  SetPrototypeAccessor(proto, Nan::New("depthStencil").ToLocalChecked(), GetdepthStencil, SetdepthStencil, ctor);
  Nan::Set(target, Nan::New("VkClearValue").ToLocalChecked(), ctor->GetFunction());
}

NAN_METHOD(_VkClearValue::New) {
  if (info.IsConstructCall()) {
    _VkClearValue* self = new _VkClearValue();
    self->Wrap(info.Holder());
    
    if (info[0]->IsObject()) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(info[0]).ToLocalChecked();
      if (obj->Has(self->sAccess0)) info.This()->Set(self->sAccess0, obj->Get(self->sAccess0));
      if (obj->Has(self->sAccess1)) info.This()->Set(self->sAccess1, obj->Get(self->sAccess1));
      
    }
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkClearValue constructor cannot be invoked without 'new'");
  }
};

NAN_METHOD(_VkClearValue::flush) {
  _VkClearValue *self = Nan::ObjectWrap::Unwrap<_VkClearValue>(info.This());
  
  info.This()->Set(self->sAccess0, info.This()->Get(self->sAccess0));
  info.This()->Set(self->sAccess1, info.This()->Get(self->sAccess1));
}

// color
NAN_GETTER(_VkClearValue::Getcolor) {
  _VkClearValue *self = Nan::ObjectWrap::Unwrap<_VkClearValue>(info.This());
  if (self->color.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->color);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkClearValue::Setcolor) {
  _VkClearValue *self = Nan::ObjectWrap::Unwrap<_VkClearValue>(info.This());
  // js
  if (!value->IsNull()) {
    v8::Local<v8::Object> obj = Nan::To<v8::Object>(value).ToLocalChecked();
    if (Nan::New(_VkClearColorValue::constructor)->HasInstance(obj)) {
      self->color.Reset<v8::Object>(value.As<v8::Object>());
      _VkClearColorValue* inst = Nan::ObjectWrap::Unwrap<_VkClearColorValue>(obj);
      self->instance.color = inst->instance;
    } else {
      return Nan::ThrowTypeError("Expected 'Object [VkClearColorValue]' for 'VkClearValue.color'");
    }
  } else if (value->IsNull()) {
    self->color.Reset();
    memset(&self->instance.color, 0, sizeof(VkClearColorValue));
  } else {
    return Nan::ThrowTypeError("Expected 'Object [VkClearColorValue]' for 'VkClearValue.color'");
  }
}// depthStencil
NAN_GETTER(_VkClearValue::GetdepthStencil) {
  _VkClearValue *self = Nan::ObjectWrap::Unwrap<_VkClearValue>(info.This());
  if (self->depthStencil.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->depthStencil);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkClearValue::SetdepthStencil) {
  _VkClearValue *self = Nan::ObjectWrap::Unwrap<_VkClearValue>(info.This());
  // js
  if (!value->IsNull()) {
    v8::Local<v8::Object> obj = Nan::To<v8::Object>(value).ToLocalChecked();
    if (Nan::New(_VkClearDepthStencilValue::constructor)->HasInstance(obj)) {
      self->depthStencil.Reset<v8::Object>(value.As<v8::Object>());
      _VkClearDepthStencilValue* inst = Nan::ObjectWrap::Unwrap<_VkClearDepthStencilValue>(obj);
      self->instance.depthStencil = inst->instance;
    } else {
      return Nan::ThrowTypeError("Expected 'Object [VkClearDepthStencilValue]' for 'VkClearValue.depthStencil'");
    }
  } else if (value->IsNull()) {
    self->depthStencil.Reset();
    memset(&self->instance.depthStencil, 0, sizeof(VkClearDepthStencilValue));
  } else {
    return Nan::ThrowTypeError("Expected 'Object [VkClearDepthStencilValue]' for 'VkClearValue.depthStencil'");
  }
}