/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY node-vulkan v0.0.9
 */
#include "utils.h"
#include "index.h"
#include "VkPhysicalDeviceDescriptorIndexingFeaturesEXT.h"

Nan::Persistent<v8::FunctionTemplate> _VkPhysicalDeviceDescriptorIndexingFeaturesEXT::constructor;

_VkPhysicalDeviceDescriptorIndexingFeaturesEXT::_VkPhysicalDeviceDescriptorIndexingFeaturesEXT() {
  instance.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT;
  
}

_VkPhysicalDeviceDescriptorIndexingFeaturesEXT::~_VkPhysicalDeviceDescriptorIndexingFeaturesEXT() {
  //printf("VkPhysicalDeviceDescriptorIndexingFeaturesEXT deconstructed!!\n");
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
}

void _VkPhysicalDeviceDescriptorIndexingFeaturesEXT::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkPhysicalDeviceDescriptorIndexingFeaturesEXT::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkPhysicalDeviceDescriptorIndexingFeaturesEXT").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("sType").ToLocalChecked(), GetsType, SetsType, ctor);
  SetPrototypeAccessor(proto, Nan::New("shaderInputAttachmentArrayDynamicIndexing").ToLocalChecked(), GetshaderInputAttachmentArrayDynamicIndexing, SetshaderInputAttachmentArrayDynamicIndexing, ctor);
  SetPrototypeAccessor(proto, Nan::New("shaderUniformTexelBufferArrayDynamicIndexing").ToLocalChecked(), GetshaderUniformTexelBufferArrayDynamicIndexing, SetshaderUniformTexelBufferArrayDynamicIndexing, ctor);
  SetPrototypeAccessor(proto, Nan::New("shaderStorageTexelBufferArrayDynamicIndexing").ToLocalChecked(), GetshaderStorageTexelBufferArrayDynamicIndexing, SetshaderStorageTexelBufferArrayDynamicIndexing, ctor);
  SetPrototypeAccessor(proto, Nan::New("shaderUniformBufferArrayNonUniformIndexing").ToLocalChecked(), GetshaderUniformBufferArrayNonUniformIndexing, SetshaderUniformBufferArrayNonUniformIndexing, ctor);
  SetPrototypeAccessor(proto, Nan::New("shaderSampledImageArrayNonUniformIndexing").ToLocalChecked(), GetshaderSampledImageArrayNonUniformIndexing, SetshaderSampledImageArrayNonUniformIndexing, ctor);
  SetPrototypeAccessor(proto, Nan::New("shaderStorageBufferArrayNonUniformIndexing").ToLocalChecked(), GetshaderStorageBufferArrayNonUniformIndexing, SetshaderStorageBufferArrayNonUniformIndexing, ctor);
  SetPrototypeAccessor(proto, Nan::New("shaderStorageImageArrayNonUniformIndexing").ToLocalChecked(), GetshaderStorageImageArrayNonUniformIndexing, SetshaderStorageImageArrayNonUniformIndexing, ctor);
  SetPrototypeAccessor(proto, Nan::New("shaderInputAttachmentArrayNonUniformIndexing").ToLocalChecked(), GetshaderInputAttachmentArrayNonUniformIndexing, SetshaderInputAttachmentArrayNonUniformIndexing, ctor);
  SetPrototypeAccessor(proto, Nan::New("shaderUniformTexelBufferArrayNonUniformIndexing").ToLocalChecked(), GetshaderUniformTexelBufferArrayNonUniformIndexing, SetshaderUniformTexelBufferArrayNonUniformIndexing, ctor);
  SetPrototypeAccessor(proto, Nan::New("shaderStorageTexelBufferArrayNonUniformIndexing").ToLocalChecked(), GetshaderStorageTexelBufferArrayNonUniformIndexing, SetshaderStorageTexelBufferArrayNonUniformIndexing, ctor);
  SetPrototypeAccessor(proto, Nan::New("descriptorBindingUniformBufferUpdateAfterBind").ToLocalChecked(), GetdescriptorBindingUniformBufferUpdateAfterBind, SetdescriptorBindingUniformBufferUpdateAfterBind, ctor);
  SetPrototypeAccessor(proto, Nan::New("descriptorBindingSampledImageUpdateAfterBind").ToLocalChecked(), GetdescriptorBindingSampledImageUpdateAfterBind, SetdescriptorBindingSampledImageUpdateAfterBind, ctor);
  SetPrototypeAccessor(proto, Nan::New("descriptorBindingStorageImageUpdateAfterBind").ToLocalChecked(), GetdescriptorBindingStorageImageUpdateAfterBind, SetdescriptorBindingStorageImageUpdateAfterBind, ctor);
  SetPrototypeAccessor(proto, Nan::New("descriptorBindingStorageBufferUpdateAfterBind").ToLocalChecked(), GetdescriptorBindingStorageBufferUpdateAfterBind, SetdescriptorBindingStorageBufferUpdateAfterBind, ctor);
  SetPrototypeAccessor(proto, Nan::New("descriptorBindingUniformTexelBufferUpdateAfterBind").ToLocalChecked(), GetdescriptorBindingUniformTexelBufferUpdateAfterBind, SetdescriptorBindingUniformTexelBufferUpdateAfterBind, ctor);
  SetPrototypeAccessor(proto, Nan::New("descriptorBindingStorageTexelBufferUpdateAfterBind").ToLocalChecked(), GetdescriptorBindingStorageTexelBufferUpdateAfterBind, SetdescriptorBindingStorageTexelBufferUpdateAfterBind, ctor);
  SetPrototypeAccessor(proto, Nan::New("descriptorBindingUpdateUnusedWhilePending").ToLocalChecked(), GetdescriptorBindingUpdateUnusedWhilePending, SetdescriptorBindingUpdateUnusedWhilePending, ctor);
  SetPrototypeAccessor(proto, Nan::New("descriptorBindingPartiallyBound").ToLocalChecked(), GetdescriptorBindingPartiallyBound, SetdescriptorBindingPartiallyBound, ctor);
  SetPrototypeAccessor(proto, Nan::New("descriptorBindingVariableDescriptorCount").ToLocalChecked(), GetdescriptorBindingVariableDescriptorCount, SetdescriptorBindingVariableDescriptorCount, ctor);
  SetPrototypeAccessor(proto, Nan::New("runtimeDescriptorArray").ToLocalChecked(), GetruntimeDescriptorArray, SetruntimeDescriptorArray, ctor);
  Nan::Set(target, Nan::New("VkPhysicalDeviceDescriptorIndexingFeaturesEXT").ToLocalChecked(), ctor->GetFunction());
}

bool _VkPhysicalDeviceDescriptorIndexingFeaturesEXT::flush() {
  _VkPhysicalDeviceDescriptorIndexingFeaturesEXT *self = this;
  
  return true;
}

NAN_METHOD(_VkPhysicalDeviceDescriptorIndexingFeaturesEXT::New) {
  if (info.IsConstructCall()) {
    _VkPhysicalDeviceDescriptorIndexingFeaturesEXT* self = new _VkPhysicalDeviceDescriptorIndexingFeaturesEXT();
    self->Wrap(info.Holder());
    
    if (info[0]->IsObject()) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(info[0]).ToLocalChecked();
      v8::Local<v8::String> sAccess0 = Nan::New("sType").ToLocalChecked();
      v8::Local<v8::String> sAccess2 = Nan::New("shaderInputAttachmentArrayDynamicIndexing").ToLocalChecked();
      v8::Local<v8::String> sAccess3 = Nan::New("shaderUniformTexelBufferArrayDynamicIndexing").ToLocalChecked();
      v8::Local<v8::String> sAccess4 = Nan::New("shaderStorageTexelBufferArrayDynamicIndexing").ToLocalChecked();
      v8::Local<v8::String> sAccess5 = Nan::New("shaderUniformBufferArrayNonUniformIndexing").ToLocalChecked();
      v8::Local<v8::String> sAccess6 = Nan::New("shaderSampledImageArrayNonUniformIndexing").ToLocalChecked();
      v8::Local<v8::String> sAccess7 = Nan::New("shaderStorageBufferArrayNonUniformIndexing").ToLocalChecked();
      v8::Local<v8::String> sAccess8 = Nan::New("shaderStorageImageArrayNonUniformIndexing").ToLocalChecked();
      v8::Local<v8::String> sAccess9 = Nan::New("shaderInputAttachmentArrayNonUniformIndexing").ToLocalChecked();
      v8::Local<v8::String> sAccess10 = Nan::New("shaderUniformTexelBufferArrayNonUniformIndexing").ToLocalChecked();
      v8::Local<v8::String> sAccess11 = Nan::New("shaderStorageTexelBufferArrayNonUniformIndexing").ToLocalChecked();
      v8::Local<v8::String> sAccess12 = Nan::New("descriptorBindingUniformBufferUpdateAfterBind").ToLocalChecked();
      v8::Local<v8::String> sAccess13 = Nan::New("descriptorBindingSampledImageUpdateAfterBind").ToLocalChecked();
      v8::Local<v8::String> sAccess14 = Nan::New("descriptorBindingStorageImageUpdateAfterBind").ToLocalChecked();
      v8::Local<v8::String> sAccess15 = Nan::New("descriptorBindingStorageBufferUpdateAfterBind").ToLocalChecked();
      v8::Local<v8::String> sAccess16 = Nan::New("descriptorBindingUniformTexelBufferUpdateAfterBind").ToLocalChecked();
      v8::Local<v8::String> sAccess17 = Nan::New("descriptorBindingStorageTexelBufferUpdateAfterBind").ToLocalChecked();
      v8::Local<v8::String> sAccess18 = Nan::New("descriptorBindingUpdateUnusedWhilePending").ToLocalChecked();
      v8::Local<v8::String> sAccess19 = Nan::New("descriptorBindingPartiallyBound").ToLocalChecked();
      v8::Local<v8::String> sAccess20 = Nan::New("descriptorBindingVariableDescriptorCount").ToLocalChecked();
      v8::Local<v8::String> sAccess21 = Nan::New("runtimeDescriptorArray").ToLocalChecked();
      if (obj->Has(sAccess0)) info.This()->Set(sAccess0, obj->Get(sAccess0));
      if (obj->Has(sAccess2)) info.This()->Set(sAccess2, obj->Get(sAccess2));
      if (obj->Has(sAccess3)) info.This()->Set(sAccess3, obj->Get(sAccess3));
      if (obj->Has(sAccess4)) info.This()->Set(sAccess4, obj->Get(sAccess4));
      if (obj->Has(sAccess5)) info.This()->Set(sAccess5, obj->Get(sAccess5));
      if (obj->Has(sAccess6)) info.This()->Set(sAccess6, obj->Get(sAccess6));
      if (obj->Has(sAccess7)) info.This()->Set(sAccess7, obj->Get(sAccess7));
      if (obj->Has(sAccess8)) info.This()->Set(sAccess8, obj->Get(sAccess8));
      if (obj->Has(sAccess9)) info.This()->Set(sAccess9, obj->Get(sAccess9));
      if (obj->Has(sAccess10)) info.This()->Set(sAccess10, obj->Get(sAccess10));
      if (obj->Has(sAccess11)) info.This()->Set(sAccess11, obj->Get(sAccess11));
      if (obj->Has(sAccess12)) info.This()->Set(sAccess12, obj->Get(sAccess12));
      if (obj->Has(sAccess13)) info.This()->Set(sAccess13, obj->Get(sAccess13));
      if (obj->Has(sAccess14)) info.This()->Set(sAccess14, obj->Get(sAccess14));
      if (obj->Has(sAccess15)) info.This()->Set(sAccess15, obj->Get(sAccess15));
      if (obj->Has(sAccess16)) info.This()->Set(sAccess16, obj->Get(sAccess16));
      if (obj->Has(sAccess17)) info.This()->Set(sAccess17, obj->Get(sAccess17));
      if (obj->Has(sAccess18)) info.This()->Set(sAccess18, obj->Get(sAccess18));
      if (obj->Has(sAccess19)) info.This()->Set(sAccess19, obj->Get(sAccess19));
      if (obj->Has(sAccess20)) info.This()->Set(sAccess20, obj->Get(sAccess20));
      if (obj->Has(sAccess21)) info.This()->Set(sAccess21, obj->Get(sAccess21));
      
    }
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkPhysicalDeviceDescriptorIndexingFeaturesEXT constructor cannot be invoked without 'new'");
  }
};

// sType
NAN_GETTER(_VkPhysicalDeviceDescriptorIndexingFeaturesEXT::GetsType) {
  _VkPhysicalDeviceDescriptorIndexingFeaturesEXT *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceDescriptorIndexingFeaturesEXT>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sType));
}NAN_SETTER(_VkPhysicalDeviceDescriptorIndexingFeaturesEXT::SetsType) {
  _VkPhysicalDeviceDescriptorIndexingFeaturesEXT *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceDescriptorIndexingFeaturesEXT>(info.This());
  if (value->IsNumber()) {
    self->instance.sType = static_cast<VkStructureType>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceDescriptorIndexingFeaturesEXT.sType' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// shaderInputAttachmentArrayDynamicIndexing
NAN_GETTER(_VkPhysicalDeviceDescriptorIndexingFeaturesEXT::GetshaderInputAttachmentArrayDynamicIndexing) {
  _VkPhysicalDeviceDescriptorIndexingFeaturesEXT *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceDescriptorIndexingFeaturesEXT>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.shaderInputAttachmentArrayDynamicIndexing));
}NAN_SETTER(_VkPhysicalDeviceDescriptorIndexingFeaturesEXT::SetshaderInputAttachmentArrayDynamicIndexing) {
  _VkPhysicalDeviceDescriptorIndexingFeaturesEXT *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceDescriptorIndexingFeaturesEXT>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.shaderInputAttachmentArrayDynamicIndexing = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceDescriptorIndexingFeaturesEXT.shaderInputAttachmentArrayDynamicIndexing' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// shaderUniformTexelBufferArrayDynamicIndexing
NAN_GETTER(_VkPhysicalDeviceDescriptorIndexingFeaturesEXT::GetshaderUniformTexelBufferArrayDynamicIndexing) {
  _VkPhysicalDeviceDescriptorIndexingFeaturesEXT *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceDescriptorIndexingFeaturesEXT>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.shaderUniformTexelBufferArrayDynamicIndexing));
}NAN_SETTER(_VkPhysicalDeviceDescriptorIndexingFeaturesEXT::SetshaderUniformTexelBufferArrayDynamicIndexing) {
  _VkPhysicalDeviceDescriptorIndexingFeaturesEXT *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceDescriptorIndexingFeaturesEXT>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.shaderUniformTexelBufferArrayDynamicIndexing = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceDescriptorIndexingFeaturesEXT.shaderUniformTexelBufferArrayDynamicIndexing' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// shaderStorageTexelBufferArrayDynamicIndexing
NAN_GETTER(_VkPhysicalDeviceDescriptorIndexingFeaturesEXT::GetshaderStorageTexelBufferArrayDynamicIndexing) {
  _VkPhysicalDeviceDescriptorIndexingFeaturesEXT *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceDescriptorIndexingFeaturesEXT>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.shaderStorageTexelBufferArrayDynamicIndexing));
}NAN_SETTER(_VkPhysicalDeviceDescriptorIndexingFeaturesEXT::SetshaderStorageTexelBufferArrayDynamicIndexing) {
  _VkPhysicalDeviceDescriptorIndexingFeaturesEXT *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceDescriptorIndexingFeaturesEXT>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.shaderStorageTexelBufferArrayDynamicIndexing = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceDescriptorIndexingFeaturesEXT.shaderStorageTexelBufferArrayDynamicIndexing' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// shaderUniformBufferArrayNonUniformIndexing
NAN_GETTER(_VkPhysicalDeviceDescriptorIndexingFeaturesEXT::GetshaderUniformBufferArrayNonUniformIndexing) {
  _VkPhysicalDeviceDescriptorIndexingFeaturesEXT *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceDescriptorIndexingFeaturesEXT>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.shaderUniformBufferArrayNonUniformIndexing));
}NAN_SETTER(_VkPhysicalDeviceDescriptorIndexingFeaturesEXT::SetshaderUniformBufferArrayNonUniformIndexing) {
  _VkPhysicalDeviceDescriptorIndexingFeaturesEXT *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceDescriptorIndexingFeaturesEXT>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.shaderUniformBufferArrayNonUniformIndexing = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceDescriptorIndexingFeaturesEXT.shaderUniformBufferArrayNonUniformIndexing' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// shaderSampledImageArrayNonUniformIndexing
NAN_GETTER(_VkPhysicalDeviceDescriptorIndexingFeaturesEXT::GetshaderSampledImageArrayNonUniformIndexing) {
  _VkPhysicalDeviceDescriptorIndexingFeaturesEXT *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceDescriptorIndexingFeaturesEXT>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.shaderSampledImageArrayNonUniformIndexing));
}NAN_SETTER(_VkPhysicalDeviceDescriptorIndexingFeaturesEXT::SetshaderSampledImageArrayNonUniformIndexing) {
  _VkPhysicalDeviceDescriptorIndexingFeaturesEXT *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceDescriptorIndexingFeaturesEXT>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.shaderSampledImageArrayNonUniformIndexing = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceDescriptorIndexingFeaturesEXT.shaderSampledImageArrayNonUniformIndexing' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// shaderStorageBufferArrayNonUniformIndexing
NAN_GETTER(_VkPhysicalDeviceDescriptorIndexingFeaturesEXT::GetshaderStorageBufferArrayNonUniformIndexing) {
  _VkPhysicalDeviceDescriptorIndexingFeaturesEXT *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceDescriptorIndexingFeaturesEXT>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.shaderStorageBufferArrayNonUniformIndexing));
}NAN_SETTER(_VkPhysicalDeviceDescriptorIndexingFeaturesEXT::SetshaderStorageBufferArrayNonUniformIndexing) {
  _VkPhysicalDeviceDescriptorIndexingFeaturesEXT *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceDescriptorIndexingFeaturesEXT>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.shaderStorageBufferArrayNonUniformIndexing = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceDescriptorIndexingFeaturesEXT.shaderStorageBufferArrayNonUniformIndexing' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// shaderStorageImageArrayNonUniformIndexing
NAN_GETTER(_VkPhysicalDeviceDescriptorIndexingFeaturesEXT::GetshaderStorageImageArrayNonUniformIndexing) {
  _VkPhysicalDeviceDescriptorIndexingFeaturesEXT *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceDescriptorIndexingFeaturesEXT>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.shaderStorageImageArrayNonUniformIndexing));
}NAN_SETTER(_VkPhysicalDeviceDescriptorIndexingFeaturesEXT::SetshaderStorageImageArrayNonUniformIndexing) {
  _VkPhysicalDeviceDescriptorIndexingFeaturesEXT *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceDescriptorIndexingFeaturesEXT>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.shaderStorageImageArrayNonUniformIndexing = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceDescriptorIndexingFeaturesEXT.shaderStorageImageArrayNonUniformIndexing' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// shaderInputAttachmentArrayNonUniformIndexing
NAN_GETTER(_VkPhysicalDeviceDescriptorIndexingFeaturesEXT::GetshaderInputAttachmentArrayNonUniformIndexing) {
  _VkPhysicalDeviceDescriptorIndexingFeaturesEXT *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceDescriptorIndexingFeaturesEXT>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.shaderInputAttachmentArrayNonUniformIndexing));
}NAN_SETTER(_VkPhysicalDeviceDescriptorIndexingFeaturesEXT::SetshaderInputAttachmentArrayNonUniformIndexing) {
  _VkPhysicalDeviceDescriptorIndexingFeaturesEXT *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceDescriptorIndexingFeaturesEXT>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.shaderInputAttachmentArrayNonUniformIndexing = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceDescriptorIndexingFeaturesEXT.shaderInputAttachmentArrayNonUniformIndexing' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// shaderUniformTexelBufferArrayNonUniformIndexing
NAN_GETTER(_VkPhysicalDeviceDescriptorIndexingFeaturesEXT::GetshaderUniformTexelBufferArrayNonUniformIndexing) {
  _VkPhysicalDeviceDescriptorIndexingFeaturesEXT *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceDescriptorIndexingFeaturesEXT>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.shaderUniformTexelBufferArrayNonUniformIndexing));
}NAN_SETTER(_VkPhysicalDeviceDescriptorIndexingFeaturesEXT::SetshaderUniformTexelBufferArrayNonUniformIndexing) {
  _VkPhysicalDeviceDescriptorIndexingFeaturesEXT *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceDescriptorIndexingFeaturesEXT>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.shaderUniformTexelBufferArrayNonUniformIndexing = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceDescriptorIndexingFeaturesEXT.shaderUniformTexelBufferArrayNonUniformIndexing' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// shaderStorageTexelBufferArrayNonUniformIndexing
NAN_GETTER(_VkPhysicalDeviceDescriptorIndexingFeaturesEXT::GetshaderStorageTexelBufferArrayNonUniformIndexing) {
  _VkPhysicalDeviceDescriptorIndexingFeaturesEXT *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceDescriptorIndexingFeaturesEXT>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.shaderStorageTexelBufferArrayNonUniformIndexing));
}NAN_SETTER(_VkPhysicalDeviceDescriptorIndexingFeaturesEXT::SetshaderStorageTexelBufferArrayNonUniformIndexing) {
  _VkPhysicalDeviceDescriptorIndexingFeaturesEXT *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceDescriptorIndexingFeaturesEXT>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.shaderStorageTexelBufferArrayNonUniformIndexing = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceDescriptorIndexingFeaturesEXT.shaderStorageTexelBufferArrayNonUniformIndexing' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// descriptorBindingUniformBufferUpdateAfterBind
NAN_GETTER(_VkPhysicalDeviceDescriptorIndexingFeaturesEXT::GetdescriptorBindingUniformBufferUpdateAfterBind) {
  _VkPhysicalDeviceDescriptorIndexingFeaturesEXT *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceDescriptorIndexingFeaturesEXT>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.descriptorBindingUniformBufferUpdateAfterBind));
}NAN_SETTER(_VkPhysicalDeviceDescriptorIndexingFeaturesEXT::SetdescriptorBindingUniformBufferUpdateAfterBind) {
  _VkPhysicalDeviceDescriptorIndexingFeaturesEXT *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceDescriptorIndexingFeaturesEXT>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.descriptorBindingUniformBufferUpdateAfterBind = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceDescriptorIndexingFeaturesEXT.descriptorBindingUniformBufferUpdateAfterBind' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// descriptorBindingSampledImageUpdateAfterBind
NAN_GETTER(_VkPhysicalDeviceDescriptorIndexingFeaturesEXT::GetdescriptorBindingSampledImageUpdateAfterBind) {
  _VkPhysicalDeviceDescriptorIndexingFeaturesEXT *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceDescriptorIndexingFeaturesEXT>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.descriptorBindingSampledImageUpdateAfterBind));
}NAN_SETTER(_VkPhysicalDeviceDescriptorIndexingFeaturesEXT::SetdescriptorBindingSampledImageUpdateAfterBind) {
  _VkPhysicalDeviceDescriptorIndexingFeaturesEXT *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceDescriptorIndexingFeaturesEXT>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.descriptorBindingSampledImageUpdateAfterBind = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceDescriptorIndexingFeaturesEXT.descriptorBindingSampledImageUpdateAfterBind' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// descriptorBindingStorageImageUpdateAfterBind
NAN_GETTER(_VkPhysicalDeviceDescriptorIndexingFeaturesEXT::GetdescriptorBindingStorageImageUpdateAfterBind) {
  _VkPhysicalDeviceDescriptorIndexingFeaturesEXT *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceDescriptorIndexingFeaturesEXT>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.descriptorBindingStorageImageUpdateAfterBind));
}NAN_SETTER(_VkPhysicalDeviceDescriptorIndexingFeaturesEXT::SetdescriptorBindingStorageImageUpdateAfterBind) {
  _VkPhysicalDeviceDescriptorIndexingFeaturesEXT *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceDescriptorIndexingFeaturesEXT>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.descriptorBindingStorageImageUpdateAfterBind = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceDescriptorIndexingFeaturesEXT.descriptorBindingStorageImageUpdateAfterBind' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// descriptorBindingStorageBufferUpdateAfterBind
NAN_GETTER(_VkPhysicalDeviceDescriptorIndexingFeaturesEXT::GetdescriptorBindingStorageBufferUpdateAfterBind) {
  _VkPhysicalDeviceDescriptorIndexingFeaturesEXT *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceDescriptorIndexingFeaturesEXT>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.descriptorBindingStorageBufferUpdateAfterBind));
}NAN_SETTER(_VkPhysicalDeviceDescriptorIndexingFeaturesEXT::SetdescriptorBindingStorageBufferUpdateAfterBind) {
  _VkPhysicalDeviceDescriptorIndexingFeaturesEXT *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceDescriptorIndexingFeaturesEXT>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.descriptorBindingStorageBufferUpdateAfterBind = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceDescriptorIndexingFeaturesEXT.descriptorBindingStorageBufferUpdateAfterBind' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// descriptorBindingUniformTexelBufferUpdateAfterBind
NAN_GETTER(_VkPhysicalDeviceDescriptorIndexingFeaturesEXT::GetdescriptorBindingUniformTexelBufferUpdateAfterBind) {
  _VkPhysicalDeviceDescriptorIndexingFeaturesEXT *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceDescriptorIndexingFeaturesEXT>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.descriptorBindingUniformTexelBufferUpdateAfterBind));
}NAN_SETTER(_VkPhysicalDeviceDescriptorIndexingFeaturesEXT::SetdescriptorBindingUniformTexelBufferUpdateAfterBind) {
  _VkPhysicalDeviceDescriptorIndexingFeaturesEXT *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceDescriptorIndexingFeaturesEXT>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.descriptorBindingUniformTexelBufferUpdateAfterBind = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceDescriptorIndexingFeaturesEXT.descriptorBindingUniformTexelBufferUpdateAfterBind' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// descriptorBindingStorageTexelBufferUpdateAfterBind
NAN_GETTER(_VkPhysicalDeviceDescriptorIndexingFeaturesEXT::GetdescriptorBindingStorageTexelBufferUpdateAfterBind) {
  _VkPhysicalDeviceDescriptorIndexingFeaturesEXT *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceDescriptorIndexingFeaturesEXT>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.descriptorBindingStorageTexelBufferUpdateAfterBind));
}NAN_SETTER(_VkPhysicalDeviceDescriptorIndexingFeaturesEXT::SetdescriptorBindingStorageTexelBufferUpdateAfterBind) {
  _VkPhysicalDeviceDescriptorIndexingFeaturesEXT *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceDescriptorIndexingFeaturesEXT>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.descriptorBindingStorageTexelBufferUpdateAfterBind = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceDescriptorIndexingFeaturesEXT.descriptorBindingStorageTexelBufferUpdateAfterBind' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// descriptorBindingUpdateUnusedWhilePending
NAN_GETTER(_VkPhysicalDeviceDescriptorIndexingFeaturesEXT::GetdescriptorBindingUpdateUnusedWhilePending) {
  _VkPhysicalDeviceDescriptorIndexingFeaturesEXT *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceDescriptorIndexingFeaturesEXT>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.descriptorBindingUpdateUnusedWhilePending));
}NAN_SETTER(_VkPhysicalDeviceDescriptorIndexingFeaturesEXT::SetdescriptorBindingUpdateUnusedWhilePending) {
  _VkPhysicalDeviceDescriptorIndexingFeaturesEXT *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceDescriptorIndexingFeaturesEXT>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.descriptorBindingUpdateUnusedWhilePending = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceDescriptorIndexingFeaturesEXT.descriptorBindingUpdateUnusedWhilePending' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// descriptorBindingPartiallyBound
NAN_GETTER(_VkPhysicalDeviceDescriptorIndexingFeaturesEXT::GetdescriptorBindingPartiallyBound) {
  _VkPhysicalDeviceDescriptorIndexingFeaturesEXT *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceDescriptorIndexingFeaturesEXT>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.descriptorBindingPartiallyBound));
}NAN_SETTER(_VkPhysicalDeviceDescriptorIndexingFeaturesEXT::SetdescriptorBindingPartiallyBound) {
  _VkPhysicalDeviceDescriptorIndexingFeaturesEXT *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceDescriptorIndexingFeaturesEXT>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.descriptorBindingPartiallyBound = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceDescriptorIndexingFeaturesEXT.descriptorBindingPartiallyBound' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// descriptorBindingVariableDescriptorCount
NAN_GETTER(_VkPhysicalDeviceDescriptorIndexingFeaturesEXT::GetdescriptorBindingVariableDescriptorCount) {
  _VkPhysicalDeviceDescriptorIndexingFeaturesEXT *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceDescriptorIndexingFeaturesEXT>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.descriptorBindingVariableDescriptorCount));
}NAN_SETTER(_VkPhysicalDeviceDescriptorIndexingFeaturesEXT::SetdescriptorBindingVariableDescriptorCount) {
  _VkPhysicalDeviceDescriptorIndexingFeaturesEXT *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceDescriptorIndexingFeaturesEXT>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.descriptorBindingVariableDescriptorCount = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceDescriptorIndexingFeaturesEXT.descriptorBindingVariableDescriptorCount' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// runtimeDescriptorArray
NAN_GETTER(_VkPhysicalDeviceDescriptorIndexingFeaturesEXT::GetruntimeDescriptorArray) {
  _VkPhysicalDeviceDescriptorIndexingFeaturesEXT *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceDescriptorIndexingFeaturesEXT>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.runtimeDescriptorArray));
}NAN_SETTER(_VkPhysicalDeviceDescriptorIndexingFeaturesEXT::SetruntimeDescriptorArray) {
  _VkPhysicalDeviceDescriptorIndexingFeaturesEXT *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceDescriptorIndexingFeaturesEXT>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.runtimeDescriptorArray = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDeviceDescriptorIndexingFeaturesEXT.runtimeDescriptorArray' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}