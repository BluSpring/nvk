/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY node-vulkan v0.0.9
 */
#include "utils.h"
#include "index.h"
#include "VkPhysicalDevice16BitStorageFeatures.h"

Nan::Persistent<v8::FunctionTemplate> _VkPhysicalDevice16BitStorageFeatures::constructor;

_VkPhysicalDevice16BitStorageFeatures::_VkPhysicalDevice16BitStorageFeatures() {
  instance.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES;
  
}

_VkPhysicalDevice16BitStorageFeatures::~_VkPhysicalDevice16BitStorageFeatures() {
  //printf("VkPhysicalDevice16BitStorageFeatures deconstructed!!\n");
  
  
  
  
  
  
}

void _VkPhysicalDevice16BitStorageFeatures::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkPhysicalDevice16BitStorageFeatures::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkPhysicalDevice16BitStorageFeatures").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("sType").ToLocalChecked(), GetsType, SetsType, ctor);
  SetPrototypeAccessor(proto, Nan::New("storageBuffer16BitAccess").ToLocalChecked(), GetstorageBuffer16BitAccess, SetstorageBuffer16BitAccess, ctor);
  SetPrototypeAccessor(proto, Nan::New("uniformAndStorageBuffer16BitAccess").ToLocalChecked(), GetuniformAndStorageBuffer16BitAccess, SetuniformAndStorageBuffer16BitAccess, ctor);
  SetPrototypeAccessor(proto, Nan::New("storagePushConstant16").ToLocalChecked(), GetstoragePushConstant16, SetstoragePushConstant16, ctor);
  SetPrototypeAccessor(proto, Nan::New("storageInputOutput16").ToLocalChecked(), GetstorageInputOutput16, SetstorageInputOutput16, ctor);
  Nan::Set(target, Nan::New("VkPhysicalDevice16BitStorageFeatures").ToLocalChecked(), ctor->GetFunction());
}

bool _VkPhysicalDevice16BitStorageFeatures::flush() {
  _VkPhysicalDevice16BitStorageFeatures *self = this;
  
  return true;
}

NAN_METHOD(_VkPhysicalDevice16BitStorageFeatures::New) {
  if (info.IsConstructCall()) {
    _VkPhysicalDevice16BitStorageFeatures* self = new _VkPhysicalDevice16BitStorageFeatures();
    self->Wrap(info.Holder());
    
    if (info[0]->IsObject()) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(info[0]).ToLocalChecked();
      v8::Local<v8::String> sAccess0 = Nan::New("sType").ToLocalChecked();
      v8::Local<v8::String> sAccess2 = Nan::New("storageBuffer16BitAccess").ToLocalChecked();
      v8::Local<v8::String> sAccess3 = Nan::New("uniformAndStorageBuffer16BitAccess").ToLocalChecked();
      v8::Local<v8::String> sAccess4 = Nan::New("storagePushConstant16").ToLocalChecked();
      v8::Local<v8::String> sAccess5 = Nan::New("storageInputOutput16").ToLocalChecked();
      if (obj->Has(sAccess0)) info.This()->Set(sAccess0, obj->Get(sAccess0));
      if (obj->Has(sAccess2)) info.This()->Set(sAccess2, obj->Get(sAccess2));
      if (obj->Has(sAccess3)) info.This()->Set(sAccess3, obj->Get(sAccess3));
      if (obj->Has(sAccess4)) info.This()->Set(sAccess4, obj->Get(sAccess4));
      if (obj->Has(sAccess5)) info.This()->Set(sAccess5, obj->Get(sAccess5));
      
    }
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkPhysicalDevice16BitStorageFeatures constructor cannot be invoked without 'new'");
  }
};

// sType
NAN_GETTER(_VkPhysicalDevice16BitStorageFeatures::GetsType) {
  _VkPhysicalDevice16BitStorageFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDevice16BitStorageFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sType));
}NAN_SETTER(_VkPhysicalDevice16BitStorageFeatures::SetsType) {
  _VkPhysicalDevice16BitStorageFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDevice16BitStorageFeatures>(info.This());
  if (value->IsNumber()) {
    self->instance.sType = static_cast<VkStructureType>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDevice16BitStorageFeatures.sType' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// storageBuffer16BitAccess
NAN_GETTER(_VkPhysicalDevice16BitStorageFeatures::GetstorageBuffer16BitAccess) {
  _VkPhysicalDevice16BitStorageFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDevice16BitStorageFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.storageBuffer16BitAccess));
}NAN_SETTER(_VkPhysicalDevice16BitStorageFeatures::SetstorageBuffer16BitAccess) {
  _VkPhysicalDevice16BitStorageFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDevice16BitStorageFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.storageBuffer16BitAccess = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDevice16BitStorageFeatures.storageBuffer16BitAccess' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// uniformAndStorageBuffer16BitAccess
NAN_GETTER(_VkPhysicalDevice16BitStorageFeatures::GetuniformAndStorageBuffer16BitAccess) {
  _VkPhysicalDevice16BitStorageFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDevice16BitStorageFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.uniformAndStorageBuffer16BitAccess));
}NAN_SETTER(_VkPhysicalDevice16BitStorageFeatures::SetuniformAndStorageBuffer16BitAccess) {
  _VkPhysicalDevice16BitStorageFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDevice16BitStorageFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.uniformAndStorageBuffer16BitAccess = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDevice16BitStorageFeatures.uniformAndStorageBuffer16BitAccess' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// storagePushConstant16
NAN_GETTER(_VkPhysicalDevice16BitStorageFeatures::GetstoragePushConstant16) {
  _VkPhysicalDevice16BitStorageFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDevice16BitStorageFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.storagePushConstant16));
}NAN_SETTER(_VkPhysicalDevice16BitStorageFeatures::SetstoragePushConstant16) {
  _VkPhysicalDevice16BitStorageFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDevice16BitStorageFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.storagePushConstant16 = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDevice16BitStorageFeatures.storagePushConstant16' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// storageInputOutput16
NAN_GETTER(_VkPhysicalDevice16BitStorageFeatures::GetstorageInputOutput16) {
  _VkPhysicalDevice16BitStorageFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDevice16BitStorageFeatures>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.storageInputOutput16));
}NAN_SETTER(_VkPhysicalDevice16BitStorageFeatures::SetstorageInputOutput16) {
  _VkPhysicalDevice16BitStorageFeatures *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDevice16BitStorageFeatures>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.storageInputOutput16 = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDevice16BitStorageFeatures.storageInputOutput16' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}