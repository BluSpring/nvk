/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY node-vulkan v0.0.9
 */
#include "utils.h"
#include <string.h>
#include "index.h"
#include "VkPhysicalDeviceGroupProperties.h"

Nan::Persistent<v8::FunctionTemplate> _VkPhysicalDeviceGroupProperties::constructor;

_VkPhysicalDeviceGroupProperties::_VkPhysicalDeviceGroupProperties() {
  instance.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES;
  vphysicalDevices = new std::vector<VkPhysicalDevice>;
  
}

_VkPhysicalDeviceGroupProperties::~_VkPhysicalDeviceGroupProperties() {
  //printf("VkPhysicalDeviceGroupProperties deconstructed!!\n");
  
  
  
  vphysicalDevices->clear();
  delete vphysicalDevices;
  
  
  
}

void _VkPhysicalDeviceGroupProperties::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkPhysicalDeviceGroupProperties::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkPhysicalDeviceGroupProperties").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("sType").ToLocalChecked(), GetsType, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("physicalDeviceCount").ToLocalChecked(), GetphysicalDeviceCount, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("physicalDevices").ToLocalChecked(), GetphysicalDevices, nullptr, ctor);
  SetPrototypeAccessor(proto, Nan::New("subsetAllocation").ToLocalChecked(), GetsubsetAllocation, nullptr, ctor);
  Nan::Set(target, Nan::New("VkPhysicalDeviceGroupProperties").ToLocalChecked(), ctor->GetFunction());
}

bool _VkPhysicalDeviceGroupProperties::flush() {
  _VkPhysicalDeviceGroupProperties *self = this;
  if (!(self->physicalDevices.IsEmpty())) {
    v8::Local<v8::Value> value = Nan::New(self->physicalDevices);
    
  }
  return true;
}

NAN_METHOD(_VkPhysicalDeviceGroupProperties::New) {
  if (info.IsConstructCall()) {
    _VkPhysicalDeviceGroupProperties* self = new _VkPhysicalDeviceGroupProperties();
    self->Wrap(info.Holder());
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkPhysicalDeviceGroupProperties constructor cannot be invoked without 'new'");
  }
};

// sType
NAN_GETTER(_VkPhysicalDeviceGroupProperties::GetsType) {
  _VkPhysicalDeviceGroupProperties *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceGroupProperties>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sType));
}// physicalDeviceCount
NAN_GETTER(_VkPhysicalDeviceGroupProperties::GetphysicalDeviceCount) {
  _VkPhysicalDeviceGroupProperties *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceGroupProperties>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.physicalDeviceCount));
}// physicalDevices
NAN_GETTER(_VkPhysicalDeviceGroupProperties::GetphysicalDevices) {
  _VkPhysicalDeviceGroupProperties *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceGroupProperties>(info.This());
  if (self->physicalDevices.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    info.GetReturnValue().Set(Nan::New(self->physicalDevices));
  }
}// subsetAllocation
NAN_GETTER(_VkPhysicalDeviceGroupProperties::GetsubsetAllocation) {
  _VkPhysicalDeviceGroupProperties *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDeviceGroupProperties>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.subsetAllocation));
}