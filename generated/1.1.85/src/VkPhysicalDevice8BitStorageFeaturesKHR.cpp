/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY node-vulkan v0.0.9
 */
#include "utils.h"
#include "index.h"
#include "VkPhysicalDevice8BitStorageFeaturesKHR.h"

Nan::Persistent<v8::FunctionTemplate> _VkPhysicalDevice8BitStorageFeaturesKHR::constructor;

_VkPhysicalDevice8BitStorageFeaturesKHR::_VkPhysicalDevice8BitStorageFeaturesKHR() {
  instance.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR;
  
}

_VkPhysicalDevice8BitStorageFeaturesKHR::~_VkPhysicalDevice8BitStorageFeaturesKHR() {
  //printf("VkPhysicalDevice8BitStorageFeaturesKHR deconstructed!!\n");
  
  
  
  
  
}

void _VkPhysicalDevice8BitStorageFeaturesKHR::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkPhysicalDevice8BitStorageFeaturesKHR::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkPhysicalDevice8BitStorageFeaturesKHR").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("sType").ToLocalChecked(), GetsType, SetsType, ctor);
  SetPrototypeAccessor(proto, Nan::New("storageBuffer8BitAccess").ToLocalChecked(), GetstorageBuffer8BitAccess, SetstorageBuffer8BitAccess, ctor);
  SetPrototypeAccessor(proto, Nan::New("uniformAndStorageBuffer8BitAccess").ToLocalChecked(), GetuniformAndStorageBuffer8BitAccess, SetuniformAndStorageBuffer8BitAccess, ctor);
  SetPrototypeAccessor(proto, Nan::New("storagePushConstant8").ToLocalChecked(), GetstoragePushConstant8, SetstoragePushConstant8, ctor);
  Nan::Set(target, Nan::New("VkPhysicalDevice8BitStorageFeaturesKHR").ToLocalChecked(), ctor->GetFunction());
}

bool _VkPhysicalDevice8BitStorageFeaturesKHR::flush() {
  _VkPhysicalDevice8BitStorageFeaturesKHR *self = this;
  
  return true;
}

NAN_METHOD(_VkPhysicalDevice8BitStorageFeaturesKHR::New) {
  if (info.IsConstructCall()) {
    _VkPhysicalDevice8BitStorageFeaturesKHR* self = new _VkPhysicalDevice8BitStorageFeaturesKHR();
    self->Wrap(info.Holder());
    
    if (info[0]->IsObject()) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(info[0]).ToLocalChecked();
      v8::Local<v8::String> sAccess0 = Nan::New("sType").ToLocalChecked();
      v8::Local<v8::String> sAccess2 = Nan::New("storageBuffer8BitAccess").ToLocalChecked();
      v8::Local<v8::String> sAccess3 = Nan::New("uniformAndStorageBuffer8BitAccess").ToLocalChecked();
      v8::Local<v8::String> sAccess4 = Nan::New("storagePushConstant8").ToLocalChecked();
      if (obj->Has(sAccess0)) info.This()->Set(sAccess0, obj->Get(sAccess0));
      if (obj->Has(sAccess2)) info.This()->Set(sAccess2, obj->Get(sAccess2));
      if (obj->Has(sAccess3)) info.This()->Set(sAccess3, obj->Get(sAccess3));
      if (obj->Has(sAccess4)) info.This()->Set(sAccess4, obj->Get(sAccess4));
      
    }
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkPhysicalDevice8BitStorageFeaturesKHR constructor cannot be invoked without 'new'");
  }
};

// sType
NAN_GETTER(_VkPhysicalDevice8BitStorageFeaturesKHR::GetsType) {
  _VkPhysicalDevice8BitStorageFeaturesKHR *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDevice8BitStorageFeaturesKHR>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sType));
}NAN_SETTER(_VkPhysicalDevice8BitStorageFeaturesKHR::SetsType) {
  _VkPhysicalDevice8BitStorageFeaturesKHR *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDevice8BitStorageFeaturesKHR>(info.This());
  if (value->IsNumber()) {
    self->instance.sType = static_cast<VkStructureType>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDevice8BitStorageFeaturesKHR.sType' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// storageBuffer8BitAccess
NAN_GETTER(_VkPhysicalDevice8BitStorageFeaturesKHR::GetstorageBuffer8BitAccess) {
  _VkPhysicalDevice8BitStorageFeaturesKHR *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDevice8BitStorageFeaturesKHR>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.storageBuffer8BitAccess));
}NAN_SETTER(_VkPhysicalDevice8BitStorageFeaturesKHR::SetstorageBuffer8BitAccess) {
  _VkPhysicalDevice8BitStorageFeaturesKHR *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDevice8BitStorageFeaturesKHR>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.storageBuffer8BitAccess = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDevice8BitStorageFeaturesKHR.storageBuffer8BitAccess' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// uniformAndStorageBuffer8BitAccess
NAN_GETTER(_VkPhysicalDevice8BitStorageFeaturesKHR::GetuniformAndStorageBuffer8BitAccess) {
  _VkPhysicalDevice8BitStorageFeaturesKHR *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDevice8BitStorageFeaturesKHR>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.uniformAndStorageBuffer8BitAccess));
}NAN_SETTER(_VkPhysicalDevice8BitStorageFeaturesKHR::SetuniformAndStorageBuffer8BitAccess) {
  _VkPhysicalDevice8BitStorageFeaturesKHR *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDevice8BitStorageFeaturesKHR>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.uniformAndStorageBuffer8BitAccess = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDevice8BitStorageFeaturesKHR.uniformAndStorageBuffer8BitAccess' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// storagePushConstant8
NAN_GETTER(_VkPhysicalDevice8BitStorageFeaturesKHR::GetstoragePushConstant8) {
  _VkPhysicalDevice8BitStorageFeaturesKHR *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDevice8BitStorageFeaturesKHR>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.storagePushConstant8));
}NAN_SETTER(_VkPhysicalDevice8BitStorageFeaturesKHR::SetstoragePushConstant8) {
  _VkPhysicalDevice8BitStorageFeaturesKHR *self = Nan::ObjectWrap::Unwrap<_VkPhysicalDevice8BitStorageFeaturesKHR>(info.This());
  if (value->IsBoolean() || value->IsNumber()) {
    self->instance.storagePushConstant8 = static_cast<uint32_t>(Nan::To<bool>(value).FromMaybe(false)) ? VK_TRUE : VK_FALSE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkPhysicalDevice8BitStorageFeaturesKHR.storagePushConstant8' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}