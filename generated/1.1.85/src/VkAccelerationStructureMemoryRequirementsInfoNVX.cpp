/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY nvk v0.1.2
 */
#include "utils.h"
#include "index.h"
#include "VkAccelerationStructureMemoryRequirementsInfoNVX.h"

Nan::Persistent<v8::FunctionTemplate> _VkAccelerationStructureMemoryRequirementsInfoNVX::constructor;

_VkAccelerationStructureMemoryRequirementsInfoNVX::_VkAccelerationStructureMemoryRequirementsInfoNVX() {
  instance.sType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NVX;
  
}

_VkAccelerationStructureMemoryRequirementsInfoNVX::~_VkAccelerationStructureMemoryRequirementsInfoNVX() {
  //printf("VkAccelerationStructureMemoryRequirementsInfoNVX deconstructed!!\n");
  
  
  
}

void _VkAccelerationStructureMemoryRequirementsInfoNVX::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkAccelerationStructureMemoryRequirementsInfoNVX::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkAccelerationStructureMemoryRequirementsInfoNVX").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("sType").ToLocalChecked(), GetsType, SetsType, ctor);
  SetPrototypeAccessor(proto, Nan::New("accelerationStructure").ToLocalChecked(), GetaccelerationStructure, SetaccelerationStructure, ctor);
  Nan::Set(target, Nan::New("VkAccelerationStructureMemoryRequirementsInfoNVX").ToLocalChecked(), ctor->GetFunction());
}

bool _VkAccelerationStructureMemoryRequirementsInfoNVX::flush() {
  _VkAccelerationStructureMemoryRequirementsInfoNVX *self = this;
  
  return true;
}

NAN_METHOD(_VkAccelerationStructureMemoryRequirementsInfoNVX::New) {
  if (info.IsConstructCall()) {
    _VkAccelerationStructureMemoryRequirementsInfoNVX* self = new _VkAccelerationStructureMemoryRequirementsInfoNVX();
    self->Wrap(info.Holder());
    
    if (info[0]->IsObject()) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(info[0]).ToLocalChecked();
      v8::Local<v8::String> sAccess0 = Nan::New("sType").ToLocalChecked();
      v8::Local<v8::String> sAccess2 = Nan::New("accelerationStructure").ToLocalChecked();
      if (obj->Has(sAccess0)) info.This()->Set(sAccess0, obj->Get(sAccess0));
      if (obj->Has(sAccess2)) info.This()->Set(sAccess2, obj->Get(sAccess2));
      
    }
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkAccelerationStructureMemoryRequirementsInfoNVX constructor cannot be invoked without 'new'");
  }
};

// sType
NAN_GETTER(_VkAccelerationStructureMemoryRequirementsInfoNVX::GetsType) {
  _VkAccelerationStructureMemoryRequirementsInfoNVX *self = Nan::ObjectWrap::Unwrap<_VkAccelerationStructureMemoryRequirementsInfoNVX>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sType));
}NAN_SETTER(_VkAccelerationStructureMemoryRequirementsInfoNVX::SetsType) {
  _VkAccelerationStructureMemoryRequirementsInfoNVX *self = Nan::ObjectWrap::Unwrap<_VkAccelerationStructureMemoryRequirementsInfoNVX>(info.This());
  if (value->IsNumber()) {
    self->instance.sType = static_cast<VkStructureType>(Nan::To<int32_t>(value).FromMaybe(0));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected 'Number' for 'VkAccelerationStructureMemoryRequirementsInfoNVX.sType' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// accelerationStructure
NAN_GETTER(_VkAccelerationStructureMemoryRequirementsInfoNVX::GetaccelerationStructure) {
  _VkAccelerationStructureMemoryRequirementsInfoNVX *self = Nan::ObjectWrap::Unwrap<_VkAccelerationStructureMemoryRequirementsInfoNVX>(info.This());
  if (self->accelerationStructure.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->accelerationStructure);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkAccelerationStructureMemoryRequirementsInfoNVX::SetaccelerationStructure) {
  _VkAccelerationStructureMemoryRequirementsInfoNVX *self = Nan::ObjectWrap::Unwrap<_VkAccelerationStructureMemoryRequirementsInfoNVX>(info.This());
  // js
  if (!value->IsNull()) {
    v8::Local<v8::Object> obj = Nan::To<v8::Object>(value).ToLocalChecked();
    if (Nan::New(_VkAccelerationStructureNVX::constructor)->HasInstance(obj)) {
      self->accelerationStructure.Reset<v8::Object>(value.As<v8::Object>());
      _VkAccelerationStructureNVX* inst = Nan::ObjectWrap::Unwrap<_VkAccelerationStructureNVX>(obj);
      ;
      self->instance.accelerationStructure = inst->instance;
    } else {
      
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkAccelerationStructureNVX]' for 'VkAccelerationStructureMemoryRequirementsInfoNVX.accelerationStructure' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
      return;
    }
  } else if (value->IsNull()) {
    self->accelerationStructure.Reset();
    self->instance.accelerationStructure = VK_NULL_HANDLE;
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkAccelerationStructureNVX]' for 'VkAccelerationStructureMemoryRequirementsInfoNVX.accelerationStructure' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}