/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY node-vulkan v0.0.9
 */
#include "utils.h"
#include <string.h>
#include "index.h"
#include "VkImageBlit.h"

Nan::Persistent<v8::FunctionTemplate> _VkImageBlit::constructor;

_VkImageBlit::_VkImageBlit() {
  
  vsrcOffsets = new std::vector<VkOffset3D>;
  vdstOffsets = new std::vector<VkOffset3D>;
  
}

_VkImageBlit::~_VkImageBlit() {
  //printf("VkImageBlit deconstructed!!\n");
  
  
  vsrcOffsets->clear();
  delete vsrcOffsets;
  
  
  
  vdstOffsets->clear();
  delete vdstOffsets;
  
  
}

void _VkImageBlit::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkImageBlit::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkImageBlit").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("srcSubresource").ToLocalChecked(), GetsrcSubresource, SetsrcSubresource, ctor);
  SetPrototypeAccessor(proto, Nan::New("srcOffsets").ToLocalChecked(), GetsrcOffsets, SetsrcOffsets, ctor);
  SetPrototypeAccessor(proto, Nan::New("dstSubresource").ToLocalChecked(), GetdstSubresource, SetdstSubresource, ctor);
  SetPrototypeAccessor(proto, Nan::New("dstOffsets").ToLocalChecked(), GetdstOffsets, SetdstOffsets, ctor);
  Nan::Set(target, Nan::New("VkImageBlit").ToLocalChecked(), ctor->GetFunction());
}

bool _VkImageBlit::flush() {
  _VkImageBlit *self = this;
  if (!(self->srcSubresource.IsEmpty())) {
    v8::Local<v8::Value> value = Nan::New(self->srcSubresource);
    
    _VkImageSubresourceLayers* result = Nan::ObjectWrap::Unwrap<_VkImageSubresourceLayers>(Nan::To<v8::Object>(value).ToLocalChecked());
    if (!result->flush()) return false;
    self->instance.srcSubresource = result->instance;
  }if (!(self->srcOffsets.IsEmpty())) {
    v8::Local<v8::Value> value = Nan::New(self->srcOffsets);
    
    if (value->IsArray()) {
      v8::Local<v8::Array> array = v8::Local<v8::Array>::Cast(value);
      // validate length
      if (array->Length() != 2) {
        Nan::ThrowRangeError("Invalid array length, expected array length of '2' for 'VkImageBlit.srcOffsets'");
        return false;
      }
      std::vector<VkOffset3D>* data = self->vsrcOffsets;
      data->clear();
      for (unsigned int ii = 0; ii < array->Length(); ++ii) {
        v8::Local<v8::Object> obj = Nan::To<v8::Object>(Nan::Get(array, ii).ToLocalChecked()).ToLocalChecked();
        if (!(Nan::New(_VkOffset3D::constructor)->HasInstance(obj))) {
          
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkOffset3D]' for 'VkImageBlit.srcOffsets' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
          return false;
        }
        _VkOffset3D* result = Nan::ObjectWrap::Unwrap<_VkOffset3D>(obj);
        if (!result->flush()) return false;
        data->push_back(result->instance);
      };
      memcpy(self->instance.srcOffsets, data->data(), sizeof(VkOffset3D) * 2);

    } else if (value->IsNull()) {
      memset(&self->instance.srcOffsets, 0, sizeof(VkOffset3D));
    } else {
      
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkOffset3D]' for 'VkImageBlit.srcOffsets' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
      return false;
    }
  }if (!(self->dstSubresource.IsEmpty())) {
    v8::Local<v8::Value> value = Nan::New(self->dstSubresource);
    
    _VkImageSubresourceLayers* result = Nan::ObjectWrap::Unwrap<_VkImageSubresourceLayers>(Nan::To<v8::Object>(value).ToLocalChecked());
    if (!result->flush()) return false;
    self->instance.dstSubresource = result->instance;
  }if (!(self->dstOffsets.IsEmpty())) {
    v8::Local<v8::Value> value = Nan::New(self->dstOffsets);
    
    if (value->IsArray()) {
      v8::Local<v8::Array> array = v8::Local<v8::Array>::Cast(value);
      // validate length
      if (array->Length() != 2) {
        Nan::ThrowRangeError("Invalid array length, expected array length of '2' for 'VkImageBlit.dstOffsets'");
        return false;
      }
      std::vector<VkOffset3D>* data = self->vdstOffsets;
      data->clear();
      for (unsigned int ii = 0; ii < array->Length(); ++ii) {
        v8::Local<v8::Object> obj = Nan::To<v8::Object>(Nan::Get(array, ii).ToLocalChecked()).ToLocalChecked();
        if (!(Nan::New(_VkOffset3D::constructor)->HasInstance(obj))) {
          
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkOffset3D]' for 'VkImageBlit.dstOffsets' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
          return false;
        }
        _VkOffset3D* result = Nan::ObjectWrap::Unwrap<_VkOffset3D>(obj);
        if (!result->flush()) return false;
        data->push_back(result->instance);
      };
      memcpy(self->instance.dstOffsets, data->data(), sizeof(VkOffset3D) * 2);

    } else if (value->IsNull()) {
      memset(&self->instance.dstOffsets, 0, sizeof(VkOffset3D));
    } else {
      
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkOffset3D]' for 'VkImageBlit.dstOffsets' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
      return false;
    }
  }
  return true;
}

NAN_METHOD(_VkImageBlit::New) {
  if (info.IsConstructCall()) {
    _VkImageBlit* self = new _VkImageBlit();
    self->Wrap(info.Holder());
    
    if (info[0]->IsObject()) {
      v8::Local<v8::Object> obj = Nan::To<v8::Object>(info[0]).ToLocalChecked();
      v8::Local<v8::String> sAccess0 = Nan::New("srcSubresource").ToLocalChecked();
      v8::Local<v8::String> sAccess1 = Nan::New("srcOffsets").ToLocalChecked();
      v8::Local<v8::String> sAccess2 = Nan::New("dstSubresource").ToLocalChecked();
      v8::Local<v8::String> sAccess3 = Nan::New("dstOffsets").ToLocalChecked();
      if (obj->Has(sAccess0)) info.This()->Set(sAccess0, obj->Get(sAccess0));
      if (obj->Has(sAccess1)) info.This()->Set(sAccess1, obj->Get(sAccess1));
      if (obj->Has(sAccess2)) info.This()->Set(sAccess2, obj->Get(sAccess2));
      if (obj->Has(sAccess3)) info.This()->Set(sAccess3, obj->Get(sAccess3));
      
    }
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkImageBlit constructor cannot be invoked without 'new'");
  }
};

// srcSubresource
NAN_GETTER(_VkImageBlit::GetsrcSubresource) {
  _VkImageBlit *self = Nan::ObjectWrap::Unwrap<_VkImageBlit>(info.This());
  if (self->srcSubresource.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->srcSubresource);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkImageBlit::SetsrcSubresource) {
  _VkImageBlit *self = Nan::ObjectWrap::Unwrap<_VkImageBlit>(info.This());
  // js
  if (!value->IsNull()) {
    v8::Local<v8::Object> obj = Nan::To<v8::Object>(value).ToLocalChecked();
    if (Nan::New(_VkImageSubresourceLayers::constructor)->HasInstance(obj)) {
      self->srcSubresource.Reset<v8::Object>(value.As<v8::Object>());
      _VkImageSubresourceLayers* inst = Nan::ObjectWrap::Unwrap<_VkImageSubresourceLayers>(obj);
      inst->flush();
      self->instance.srcSubresource = inst->instance;
    } else {
      
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkImageSubresourceLayers]' for 'VkImageBlit.srcSubresource' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
      return;
    }
  } else if (value->IsNull()) {
    self->srcSubresource.Reset();
    memset(&self->instance.srcSubresource, 0, sizeof(VkImageSubresourceLayers));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkImageSubresourceLayers]' for 'VkImageBlit.srcSubresource' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// srcOffsets
NAN_GETTER(_VkImageBlit::GetsrcOffsets) {
  _VkImageBlit *self = Nan::ObjectWrap::Unwrap<_VkImageBlit>(info.This());
  if (self->srcOffsets.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    info.GetReturnValue().Set(Nan::New(self->srcOffsets));
  }
}NAN_SETTER(_VkImageBlit::SetsrcOffsets) {
  _VkImageBlit *self = Nan::ObjectWrap::Unwrap<_VkImageBlit>(info.This());
  // js
  if (value->IsArray()) {
    self->srcOffsets.Reset<v8::Array>(value.As<v8::Array>());
  } else if (value->IsNull()) {
    self->srcOffsets.Reset();
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkOffset3D]' for 'VkImageBlit.srcOffsets' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// dstSubresource
NAN_GETTER(_VkImageBlit::GetdstSubresource) {
  _VkImageBlit *self = Nan::ObjectWrap::Unwrap<_VkImageBlit>(info.This());
  if (self->dstSubresource.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->dstSubresource);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkImageBlit::SetdstSubresource) {
  _VkImageBlit *self = Nan::ObjectWrap::Unwrap<_VkImageBlit>(info.This());
  // js
  if (!value->IsNull()) {
    v8::Local<v8::Object> obj = Nan::To<v8::Object>(value).ToLocalChecked();
    if (Nan::New(_VkImageSubresourceLayers::constructor)->HasInstance(obj)) {
      self->dstSubresource.Reset<v8::Object>(value.As<v8::Object>());
      _VkImageSubresourceLayers* inst = Nan::ObjectWrap::Unwrap<_VkImageSubresourceLayers>(obj);
      inst->flush();
      self->instance.dstSubresource = inst->instance;
    } else {
      
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkImageSubresourceLayers]' for 'VkImageBlit.dstSubresource' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
      return;
    }
  } else if (value->IsNull()) {
    self->dstSubresource.Reset();
    memset(&self->instance.dstSubresource, 0, sizeof(VkImageSubresourceLayers));
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkImageSubresourceLayers]' for 'VkImageBlit.dstSubresource' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}// dstOffsets
NAN_GETTER(_VkImageBlit::GetdstOffsets) {
  _VkImageBlit *self = Nan::ObjectWrap::Unwrap<_VkImageBlit>(info.This());
  if (self->dstOffsets.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    info.GetReturnValue().Set(Nan::New(self->dstOffsets));
  }
}NAN_SETTER(_VkImageBlit::SetdstOffsets) {
  _VkImageBlit *self = Nan::ObjectWrap::Unwrap<_VkImageBlit>(info.This());
  // js
  if (value->IsArray()) {
    self->dstOffsets.Reset<v8::Array>(value.As<v8::Array>());
  } else if (value->IsNull()) {
    self->dstOffsets.Reset();
  } else {
    
    std::string details = getV8ObjectDetails(value);
    if (details[0] == '#') details = "[object " + (details.substr(2, details.length() - 2 - 1)) + "]";
    std::string msg = "Expected '[object VkOffset3D]' for 'VkImageBlit.dstOffsets' but got '" + details + "'";
    Nan::ThrowTypeError(msg.c_str());
    return;
  }
}