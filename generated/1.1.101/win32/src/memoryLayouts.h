/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY nvk v0.3.6
 */
Napi::Value MemoryLayouts(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  Napi::Object out = Napi::Object::New(env);

  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkBaseOutStructure)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBaseOutStructure, sType);
      uint32_t byteLength = sizeof(VkBaseOutStructure::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBaseOutStructure, pNext);
      uint32_t byteLength = sizeof(VkBaseOutStructure::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkBaseOutStructure"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkBaseInStructure)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBaseInStructure, sType);
      uint32_t byteLength = sizeof(VkBaseInStructure::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBaseInStructure, pNext);
      uint32_t byteLength = sizeof(VkBaseInStructure::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkBaseInStructure"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkOffset2D)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkOffset2D, x);
      uint32_t byteLength = sizeof(VkOffset2D::x);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "x"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkOffset2D, y);
      uint32_t byteLength = sizeof(VkOffset2D::y);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "y"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkOffset2D"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkOffset3D)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkOffset3D, x);
      uint32_t byteLength = sizeof(VkOffset3D::x);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "x"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkOffset3D, y);
      uint32_t byteLength = sizeof(VkOffset3D::y);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "y"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkOffset3D, z);
      uint32_t byteLength = sizeof(VkOffset3D::z);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "z"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkOffset3D"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkExtent2D)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExtent2D, width);
      uint32_t byteLength = sizeof(VkExtent2D::width);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "width"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExtent2D, height);
      uint32_t byteLength = sizeof(VkExtent2D::height);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "height"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkExtent2D"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkExtent3D)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExtent3D, width);
      uint32_t byteLength = sizeof(VkExtent3D::width);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "width"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExtent3D, height);
      uint32_t byteLength = sizeof(VkExtent3D::height);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "height"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExtent3D, depth);
      uint32_t byteLength = sizeof(VkExtent3D::depth);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "depth"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkExtent3D"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkViewport)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkViewport, x);
      uint32_t byteLength = sizeof(VkViewport::x);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "x"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkViewport, y);
      uint32_t byteLength = sizeof(VkViewport::y);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "y"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkViewport, width);
      uint32_t byteLength = sizeof(VkViewport::width);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "width"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkViewport, height);
      uint32_t byteLength = sizeof(VkViewport::height);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "height"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkViewport, minDepth);
      uint32_t byteLength = sizeof(VkViewport::minDepth);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "minDepth"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkViewport, maxDepth);
      uint32_t byteLength = sizeof(VkViewport::maxDepth);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxDepth"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkViewport"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkRect2D)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRect2D, offset);
      uint32_t byteLength = sizeof(VkRect2D::offset);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "offset"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRect2D, extent);
      uint32_t byteLength = sizeof(VkRect2D::extent);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "extent"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkRect2D"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkClearRect)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkClearRect, rect);
      uint32_t byteLength = sizeof(VkClearRect::rect);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "rect"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkClearRect, baseArrayLayer);
      uint32_t byteLength = sizeof(VkClearRect::baseArrayLayer);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "baseArrayLayer"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkClearRect, layerCount);
      uint32_t byteLength = sizeof(VkClearRect::layerCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "layerCount"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkClearRect"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkComponentMapping)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkComponentMapping, r);
      uint32_t byteLength = sizeof(VkComponentMapping::r);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "r"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkComponentMapping, g);
      uint32_t byteLength = sizeof(VkComponentMapping::g);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "g"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkComponentMapping, b);
      uint32_t byteLength = sizeof(VkComponentMapping::b);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "b"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkComponentMapping, a);
      uint32_t byteLength = sizeof(VkComponentMapping::a);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "a"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkComponentMapping"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceProperties)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceProperties, apiVersion);
      uint32_t byteLength = sizeof(VkPhysicalDeviceProperties::apiVersion);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "apiVersion"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceProperties, driverVersion);
      uint32_t byteLength = sizeof(VkPhysicalDeviceProperties::driverVersion);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "driverVersion"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceProperties, vendorID);
      uint32_t byteLength = sizeof(VkPhysicalDeviceProperties::vendorID);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "vendorID"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceProperties, deviceID);
      uint32_t byteLength = sizeof(VkPhysicalDeviceProperties::deviceID);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "deviceID"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceProperties, deviceType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceProperties::deviceType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "deviceType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceProperties, deviceName);
      uint32_t byteLength = sizeof(VkPhysicalDeviceProperties::deviceName);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "deviceName"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceProperties, pipelineCacheUUID);
      uint32_t byteLength = sizeof(VkPhysicalDeviceProperties::pipelineCacheUUID);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pipelineCacheUUID"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceProperties, limits);
      uint32_t byteLength = sizeof(VkPhysicalDeviceProperties::limits);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "limits"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceProperties, sparseProperties);
      uint32_t byteLength = sizeof(VkPhysicalDeviceProperties::sparseProperties);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sparseProperties"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceProperties"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkExtensionProperties)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExtensionProperties, extensionName);
      uint32_t byteLength = sizeof(VkExtensionProperties::extensionName);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "extensionName"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExtensionProperties, specVersion);
      uint32_t byteLength = sizeof(VkExtensionProperties::specVersion);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "specVersion"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkExtensionProperties"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkLayerProperties)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkLayerProperties, layerName);
      uint32_t byteLength = sizeof(VkLayerProperties::layerName);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "layerName"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkLayerProperties, specVersion);
      uint32_t byteLength = sizeof(VkLayerProperties::specVersion);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "specVersion"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkLayerProperties, implementationVersion);
      uint32_t byteLength = sizeof(VkLayerProperties::implementationVersion);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "implementationVersion"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkLayerProperties, description);
      uint32_t byteLength = sizeof(VkLayerProperties::description);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "description"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkLayerProperties"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkApplicationInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkApplicationInfo, sType);
      uint32_t byteLength = sizeof(VkApplicationInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkApplicationInfo, pNext);
      uint32_t byteLength = sizeof(VkApplicationInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkApplicationInfo, pApplicationName);
      uint32_t byteLength = sizeof(VkApplicationInfo::pApplicationName);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pApplicationName"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkApplicationInfo, applicationVersion);
      uint32_t byteLength = sizeof(VkApplicationInfo::applicationVersion);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "applicationVersion"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkApplicationInfo, pEngineName);
      uint32_t byteLength = sizeof(VkApplicationInfo::pEngineName);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pEngineName"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkApplicationInfo, engineVersion);
      uint32_t byteLength = sizeof(VkApplicationInfo::engineVersion);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "engineVersion"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkApplicationInfo, apiVersion);
      uint32_t byteLength = sizeof(VkApplicationInfo::apiVersion);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "apiVersion"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkApplicationInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkAllocationCallbacks)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkAllocationCallbacks, pUserData);
      uint32_t byteLength = sizeof(VkAllocationCallbacks::pUserData);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pUserData"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkAllocationCallbacks, pfnAllocation);
      uint32_t byteLength = sizeof(VkAllocationCallbacks::pfnAllocation);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pfnAllocation"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkAllocationCallbacks, pfnReallocation);
      uint32_t byteLength = sizeof(VkAllocationCallbacks::pfnReallocation);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pfnReallocation"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkAllocationCallbacks, pfnFree);
      uint32_t byteLength = sizeof(VkAllocationCallbacks::pfnFree);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pfnFree"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkAllocationCallbacks, pfnInternalAllocation);
      uint32_t byteLength = sizeof(VkAllocationCallbacks::pfnInternalAllocation);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pfnInternalAllocation"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkAllocationCallbacks, pfnInternalFree);
      uint32_t byteLength = sizeof(VkAllocationCallbacks::pfnInternalFree);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pfnInternalFree"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkAllocationCallbacks"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDeviceQueueCreateInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceQueueCreateInfo, sType);
      uint32_t byteLength = sizeof(VkDeviceQueueCreateInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceQueueCreateInfo, pNext);
      uint32_t byteLength = sizeof(VkDeviceQueueCreateInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceQueueCreateInfo, flags);
      uint32_t byteLength = sizeof(VkDeviceQueueCreateInfo::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceQueueCreateInfo, queueFamilyIndex);
      uint32_t byteLength = sizeof(VkDeviceQueueCreateInfo::queueFamilyIndex);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "queueFamilyIndex"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceQueueCreateInfo, queueCount);
      uint32_t byteLength = sizeof(VkDeviceQueueCreateInfo::queueCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "queueCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceQueueCreateInfo, pQueuePriorities);
      uint32_t byteLength = sizeof(VkDeviceQueueCreateInfo::pQueuePriorities);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pQueuePriorities"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDeviceQueueCreateInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDeviceCreateInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceCreateInfo, sType);
      uint32_t byteLength = sizeof(VkDeviceCreateInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceCreateInfo, pNext);
      uint32_t byteLength = sizeof(VkDeviceCreateInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceCreateInfo, flags);
      uint32_t byteLength = sizeof(VkDeviceCreateInfo::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceCreateInfo, queueCreateInfoCount);
      uint32_t byteLength = sizeof(VkDeviceCreateInfo::queueCreateInfoCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "queueCreateInfoCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceCreateInfo, pQueueCreateInfos);
      uint32_t byteLength = sizeof(VkDeviceCreateInfo::pQueueCreateInfos);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pQueueCreateInfos"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceCreateInfo, enabledLayerCount);
      uint32_t byteLength = sizeof(VkDeviceCreateInfo::enabledLayerCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "enabledLayerCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceCreateInfo, ppEnabledLayerNames);
      uint32_t byteLength = sizeof(VkDeviceCreateInfo::ppEnabledLayerNames);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "ppEnabledLayerNames"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceCreateInfo, enabledExtensionCount);
      uint32_t byteLength = sizeof(VkDeviceCreateInfo::enabledExtensionCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "enabledExtensionCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceCreateInfo, ppEnabledExtensionNames);
      uint32_t byteLength = sizeof(VkDeviceCreateInfo::ppEnabledExtensionNames);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "ppEnabledExtensionNames"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceCreateInfo, pEnabledFeatures);
      uint32_t byteLength = sizeof(VkDeviceCreateInfo::pEnabledFeatures);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pEnabledFeatures"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDeviceCreateInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkInstanceCreateInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkInstanceCreateInfo, sType);
      uint32_t byteLength = sizeof(VkInstanceCreateInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkInstanceCreateInfo, pNext);
      uint32_t byteLength = sizeof(VkInstanceCreateInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkInstanceCreateInfo, flags);
      uint32_t byteLength = sizeof(VkInstanceCreateInfo::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkInstanceCreateInfo, pApplicationInfo);
      uint32_t byteLength = sizeof(VkInstanceCreateInfo::pApplicationInfo);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pApplicationInfo"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkInstanceCreateInfo, enabledLayerCount);
      uint32_t byteLength = sizeof(VkInstanceCreateInfo::enabledLayerCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "enabledLayerCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkInstanceCreateInfo, ppEnabledLayerNames);
      uint32_t byteLength = sizeof(VkInstanceCreateInfo::ppEnabledLayerNames);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "ppEnabledLayerNames"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkInstanceCreateInfo, enabledExtensionCount);
      uint32_t byteLength = sizeof(VkInstanceCreateInfo::enabledExtensionCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "enabledExtensionCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkInstanceCreateInfo, ppEnabledExtensionNames);
      uint32_t byteLength = sizeof(VkInstanceCreateInfo::ppEnabledExtensionNames);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "ppEnabledExtensionNames"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkInstanceCreateInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkQueueFamilyProperties)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkQueueFamilyProperties, queueFlags);
      uint32_t byteLength = sizeof(VkQueueFamilyProperties::queueFlags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "queueFlags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkQueueFamilyProperties, queueCount);
      uint32_t byteLength = sizeof(VkQueueFamilyProperties::queueCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "queueCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkQueueFamilyProperties, timestampValidBits);
      uint32_t byteLength = sizeof(VkQueueFamilyProperties::timestampValidBits);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "timestampValidBits"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkQueueFamilyProperties, minImageTransferGranularity);
      uint32_t byteLength = sizeof(VkQueueFamilyProperties::minImageTransferGranularity);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "minImageTransferGranularity"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkQueueFamilyProperties"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceMemoryProperties)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceMemoryProperties, memoryTypeCount);
      uint32_t byteLength = sizeof(VkPhysicalDeviceMemoryProperties::memoryTypeCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "memoryTypeCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceMemoryProperties, memoryTypes);
      uint32_t byteLength = sizeof(VkPhysicalDeviceMemoryProperties::memoryTypes);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "memoryTypes"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceMemoryProperties, memoryHeapCount);
      uint32_t byteLength = sizeof(VkPhysicalDeviceMemoryProperties::memoryHeapCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "memoryHeapCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceMemoryProperties, memoryHeaps);
      uint32_t byteLength = sizeof(VkPhysicalDeviceMemoryProperties::memoryHeaps);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "memoryHeaps"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceMemoryProperties"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkMemoryAllocateInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMemoryAllocateInfo, sType);
      uint32_t byteLength = sizeof(VkMemoryAllocateInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMemoryAllocateInfo, pNext);
      uint32_t byteLength = sizeof(VkMemoryAllocateInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMemoryAllocateInfo, allocationSize);
      uint32_t byteLength = sizeof(VkMemoryAllocateInfo::allocationSize);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "allocationSize"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMemoryAllocateInfo, memoryTypeIndex);
      uint32_t byteLength = sizeof(VkMemoryAllocateInfo::memoryTypeIndex);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "memoryTypeIndex"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkMemoryAllocateInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkMemoryRequirements)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMemoryRequirements, size);
      uint32_t byteLength = sizeof(VkMemoryRequirements::size);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "size"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMemoryRequirements, alignment);
      uint32_t byteLength = sizeof(VkMemoryRequirements::alignment);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "alignment"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMemoryRequirements, memoryTypeBits);
      uint32_t byteLength = sizeof(VkMemoryRequirements::memoryTypeBits);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "memoryTypeBits"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkMemoryRequirements"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkSparseImageFormatProperties)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSparseImageFormatProperties, aspectMask);
      uint32_t byteLength = sizeof(VkSparseImageFormatProperties::aspectMask);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "aspectMask"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSparseImageFormatProperties, imageGranularity);
      uint32_t byteLength = sizeof(VkSparseImageFormatProperties::imageGranularity);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "imageGranularity"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSparseImageFormatProperties, flags);
      uint32_t byteLength = sizeof(VkSparseImageFormatProperties::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkSparseImageFormatProperties"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkSparseImageMemoryRequirements)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSparseImageMemoryRequirements, formatProperties);
      uint32_t byteLength = sizeof(VkSparseImageMemoryRequirements::formatProperties);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "formatProperties"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSparseImageMemoryRequirements, imageMipTailFirstLod);
      uint32_t byteLength = sizeof(VkSparseImageMemoryRequirements::imageMipTailFirstLod);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "imageMipTailFirstLod"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSparseImageMemoryRequirements, imageMipTailSize);
      uint32_t byteLength = sizeof(VkSparseImageMemoryRequirements::imageMipTailSize);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "imageMipTailSize"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSparseImageMemoryRequirements, imageMipTailOffset);
      uint32_t byteLength = sizeof(VkSparseImageMemoryRequirements::imageMipTailOffset);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "imageMipTailOffset"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSparseImageMemoryRequirements, imageMipTailStride);
      uint32_t byteLength = sizeof(VkSparseImageMemoryRequirements::imageMipTailStride);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "imageMipTailStride"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkSparseImageMemoryRequirements"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkMemoryType)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMemoryType, propertyFlags);
      uint32_t byteLength = sizeof(VkMemoryType::propertyFlags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "propertyFlags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMemoryType, heapIndex);
      uint32_t byteLength = sizeof(VkMemoryType::heapIndex);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "heapIndex"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkMemoryType"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkMemoryHeap)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMemoryHeap, size);
      uint32_t byteLength = sizeof(VkMemoryHeap::size);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "size"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMemoryHeap, flags);
      uint32_t byteLength = sizeof(VkMemoryHeap::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkMemoryHeap"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkMappedMemoryRange)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMappedMemoryRange, sType);
      uint32_t byteLength = sizeof(VkMappedMemoryRange::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMappedMemoryRange, pNext);
      uint32_t byteLength = sizeof(VkMappedMemoryRange::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMappedMemoryRange, memory);
      uint32_t byteLength = sizeof(VkMappedMemoryRange::memory);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "memory"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMappedMemoryRange, offset);
      uint32_t byteLength = sizeof(VkMappedMemoryRange::offset);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "offset"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMappedMemoryRange, size);
      uint32_t byteLength = sizeof(VkMappedMemoryRange::size);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "size"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkMappedMemoryRange"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkFormatProperties)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkFormatProperties, linearTilingFeatures);
      uint32_t byteLength = sizeof(VkFormatProperties::linearTilingFeatures);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "linearTilingFeatures"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkFormatProperties, optimalTilingFeatures);
      uint32_t byteLength = sizeof(VkFormatProperties::optimalTilingFeatures);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "optimalTilingFeatures"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkFormatProperties, bufferFeatures);
      uint32_t byteLength = sizeof(VkFormatProperties::bufferFeatures);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "bufferFeatures"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkFormatProperties"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkImageFormatProperties)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageFormatProperties, maxExtent);
      uint32_t byteLength = sizeof(VkImageFormatProperties::maxExtent);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxExtent"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageFormatProperties, maxMipLevels);
      uint32_t byteLength = sizeof(VkImageFormatProperties::maxMipLevels);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxMipLevels"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageFormatProperties, maxArrayLayers);
      uint32_t byteLength = sizeof(VkImageFormatProperties::maxArrayLayers);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxArrayLayers"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageFormatProperties, sampleCounts);
      uint32_t byteLength = sizeof(VkImageFormatProperties::sampleCounts);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sampleCounts"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageFormatProperties, maxResourceSize);
      uint32_t byteLength = sizeof(VkImageFormatProperties::maxResourceSize);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxResourceSize"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkImageFormatProperties"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDescriptorBufferInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorBufferInfo, buffer);
      uint32_t byteLength = sizeof(VkDescriptorBufferInfo::buffer);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "buffer"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorBufferInfo, offset);
      uint32_t byteLength = sizeof(VkDescriptorBufferInfo::offset);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "offset"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorBufferInfo, range);
      uint32_t byteLength = sizeof(VkDescriptorBufferInfo::range);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "range"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDescriptorBufferInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDescriptorImageInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorImageInfo, sampler);
      uint32_t byteLength = sizeof(VkDescriptorImageInfo::sampler);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sampler"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorImageInfo, imageView);
      uint32_t byteLength = sizeof(VkDescriptorImageInfo::imageView);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "imageView"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorImageInfo, imageLayout);
      uint32_t byteLength = sizeof(VkDescriptorImageInfo::imageLayout);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "imageLayout"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDescriptorImageInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkWriteDescriptorSet)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkWriteDescriptorSet, sType);
      uint32_t byteLength = sizeof(VkWriteDescriptorSet::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkWriteDescriptorSet, pNext);
      uint32_t byteLength = sizeof(VkWriteDescriptorSet::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkWriteDescriptorSet, dstSet);
      uint32_t byteLength = sizeof(VkWriteDescriptorSet::dstSet);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "dstSet"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkWriteDescriptorSet, dstBinding);
      uint32_t byteLength = sizeof(VkWriteDescriptorSet::dstBinding);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "dstBinding"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkWriteDescriptorSet, dstArrayElement);
      uint32_t byteLength = sizeof(VkWriteDescriptorSet::dstArrayElement);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "dstArrayElement"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkWriteDescriptorSet, descriptorCount);
      uint32_t byteLength = sizeof(VkWriteDescriptorSet::descriptorCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "descriptorCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkWriteDescriptorSet, descriptorType);
      uint32_t byteLength = sizeof(VkWriteDescriptorSet::descriptorType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "descriptorType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkWriteDescriptorSet, pImageInfo);
      uint32_t byteLength = sizeof(VkWriteDescriptorSet::pImageInfo);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pImageInfo"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkWriteDescriptorSet, pBufferInfo);
      uint32_t byteLength = sizeof(VkWriteDescriptorSet::pBufferInfo);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pBufferInfo"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkWriteDescriptorSet, pTexelBufferView);
      uint32_t byteLength = sizeof(VkWriteDescriptorSet::pTexelBufferView);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pTexelBufferView"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkWriteDescriptorSet"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkCopyDescriptorSet)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCopyDescriptorSet, sType);
      uint32_t byteLength = sizeof(VkCopyDescriptorSet::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCopyDescriptorSet, pNext);
      uint32_t byteLength = sizeof(VkCopyDescriptorSet::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCopyDescriptorSet, srcSet);
      uint32_t byteLength = sizeof(VkCopyDescriptorSet::srcSet);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "srcSet"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCopyDescriptorSet, srcBinding);
      uint32_t byteLength = sizeof(VkCopyDescriptorSet::srcBinding);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "srcBinding"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCopyDescriptorSet, srcArrayElement);
      uint32_t byteLength = sizeof(VkCopyDescriptorSet::srcArrayElement);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "srcArrayElement"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCopyDescriptorSet, dstSet);
      uint32_t byteLength = sizeof(VkCopyDescriptorSet::dstSet);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "dstSet"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCopyDescriptorSet, dstBinding);
      uint32_t byteLength = sizeof(VkCopyDescriptorSet::dstBinding);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "dstBinding"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCopyDescriptorSet, dstArrayElement);
      uint32_t byteLength = sizeof(VkCopyDescriptorSet::dstArrayElement);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "dstArrayElement"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCopyDescriptorSet, descriptorCount);
      uint32_t byteLength = sizeof(VkCopyDescriptorSet::descriptorCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "descriptorCount"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkCopyDescriptorSet"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkBufferCreateInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBufferCreateInfo, sType);
      uint32_t byteLength = sizeof(VkBufferCreateInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBufferCreateInfo, pNext);
      uint32_t byteLength = sizeof(VkBufferCreateInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBufferCreateInfo, flags);
      uint32_t byteLength = sizeof(VkBufferCreateInfo::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBufferCreateInfo, size);
      uint32_t byteLength = sizeof(VkBufferCreateInfo::size);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "size"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBufferCreateInfo, usage);
      uint32_t byteLength = sizeof(VkBufferCreateInfo::usage);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "usage"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBufferCreateInfo, sharingMode);
      uint32_t byteLength = sizeof(VkBufferCreateInfo::sharingMode);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sharingMode"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBufferCreateInfo, queueFamilyIndexCount);
      uint32_t byteLength = sizeof(VkBufferCreateInfo::queueFamilyIndexCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "queueFamilyIndexCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBufferCreateInfo, pQueueFamilyIndices);
      uint32_t byteLength = sizeof(VkBufferCreateInfo::pQueueFamilyIndices);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pQueueFamilyIndices"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkBufferCreateInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkBufferViewCreateInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBufferViewCreateInfo, sType);
      uint32_t byteLength = sizeof(VkBufferViewCreateInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBufferViewCreateInfo, pNext);
      uint32_t byteLength = sizeof(VkBufferViewCreateInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBufferViewCreateInfo, flags);
      uint32_t byteLength = sizeof(VkBufferViewCreateInfo::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBufferViewCreateInfo, buffer);
      uint32_t byteLength = sizeof(VkBufferViewCreateInfo::buffer);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "buffer"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBufferViewCreateInfo, format);
      uint32_t byteLength = sizeof(VkBufferViewCreateInfo::format);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "format"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBufferViewCreateInfo, offset);
      uint32_t byteLength = sizeof(VkBufferViewCreateInfo::offset);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "offset"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBufferViewCreateInfo, range);
      uint32_t byteLength = sizeof(VkBufferViewCreateInfo::range);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "range"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkBufferViewCreateInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkImageSubresource)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageSubresource, aspectMask);
      uint32_t byteLength = sizeof(VkImageSubresource::aspectMask);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "aspectMask"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageSubresource, mipLevel);
      uint32_t byteLength = sizeof(VkImageSubresource::mipLevel);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "mipLevel"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageSubresource, arrayLayer);
      uint32_t byteLength = sizeof(VkImageSubresource::arrayLayer);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "arrayLayer"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkImageSubresource"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkImageSubresourceLayers)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageSubresourceLayers, aspectMask);
      uint32_t byteLength = sizeof(VkImageSubresourceLayers::aspectMask);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "aspectMask"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageSubresourceLayers, mipLevel);
      uint32_t byteLength = sizeof(VkImageSubresourceLayers::mipLevel);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "mipLevel"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageSubresourceLayers, baseArrayLayer);
      uint32_t byteLength = sizeof(VkImageSubresourceLayers::baseArrayLayer);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "baseArrayLayer"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageSubresourceLayers, layerCount);
      uint32_t byteLength = sizeof(VkImageSubresourceLayers::layerCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "layerCount"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkImageSubresourceLayers"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkImageSubresourceRange)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageSubresourceRange, aspectMask);
      uint32_t byteLength = sizeof(VkImageSubresourceRange::aspectMask);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "aspectMask"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageSubresourceRange, baseMipLevel);
      uint32_t byteLength = sizeof(VkImageSubresourceRange::baseMipLevel);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "baseMipLevel"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageSubresourceRange, levelCount);
      uint32_t byteLength = sizeof(VkImageSubresourceRange::levelCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "levelCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageSubresourceRange, baseArrayLayer);
      uint32_t byteLength = sizeof(VkImageSubresourceRange::baseArrayLayer);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "baseArrayLayer"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageSubresourceRange, layerCount);
      uint32_t byteLength = sizeof(VkImageSubresourceRange::layerCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "layerCount"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkImageSubresourceRange"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkMemoryBarrier)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMemoryBarrier, sType);
      uint32_t byteLength = sizeof(VkMemoryBarrier::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMemoryBarrier, pNext);
      uint32_t byteLength = sizeof(VkMemoryBarrier::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMemoryBarrier, srcAccessMask);
      uint32_t byteLength = sizeof(VkMemoryBarrier::srcAccessMask);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "srcAccessMask"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMemoryBarrier, dstAccessMask);
      uint32_t byteLength = sizeof(VkMemoryBarrier::dstAccessMask);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "dstAccessMask"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkMemoryBarrier"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkBufferMemoryBarrier)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBufferMemoryBarrier, sType);
      uint32_t byteLength = sizeof(VkBufferMemoryBarrier::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBufferMemoryBarrier, pNext);
      uint32_t byteLength = sizeof(VkBufferMemoryBarrier::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBufferMemoryBarrier, srcAccessMask);
      uint32_t byteLength = sizeof(VkBufferMemoryBarrier::srcAccessMask);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "srcAccessMask"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBufferMemoryBarrier, dstAccessMask);
      uint32_t byteLength = sizeof(VkBufferMemoryBarrier::dstAccessMask);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "dstAccessMask"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBufferMemoryBarrier, srcQueueFamilyIndex);
      uint32_t byteLength = sizeof(VkBufferMemoryBarrier::srcQueueFamilyIndex);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "srcQueueFamilyIndex"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBufferMemoryBarrier, dstQueueFamilyIndex);
      uint32_t byteLength = sizeof(VkBufferMemoryBarrier::dstQueueFamilyIndex);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "dstQueueFamilyIndex"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBufferMemoryBarrier, buffer);
      uint32_t byteLength = sizeof(VkBufferMemoryBarrier::buffer);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "buffer"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBufferMemoryBarrier, offset);
      uint32_t byteLength = sizeof(VkBufferMemoryBarrier::offset);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "offset"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBufferMemoryBarrier, size);
      uint32_t byteLength = sizeof(VkBufferMemoryBarrier::size);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "size"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkBufferMemoryBarrier"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkImageMemoryBarrier)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageMemoryBarrier, sType);
      uint32_t byteLength = sizeof(VkImageMemoryBarrier::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageMemoryBarrier, pNext);
      uint32_t byteLength = sizeof(VkImageMemoryBarrier::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageMemoryBarrier, srcAccessMask);
      uint32_t byteLength = sizeof(VkImageMemoryBarrier::srcAccessMask);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "srcAccessMask"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageMemoryBarrier, dstAccessMask);
      uint32_t byteLength = sizeof(VkImageMemoryBarrier::dstAccessMask);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "dstAccessMask"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageMemoryBarrier, oldLayout);
      uint32_t byteLength = sizeof(VkImageMemoryBarrier::oldLayout);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "oldLayout"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageMemoryBarrier, newLayout);
      uint32_t byteLength = sizeof(VkImageMemoryBarrier::newLayout);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "newLayout"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageMemoryBarrier, srcQueueFamilyIndex);
      uint32_t byteLength = sizeof(VkImageMemoryBarrier::srcQueueFamilyIndex);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "srcQueueFamilyIndex"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageMemoryBarrier, dstQueueFamilyIndex);
      uint32_t byteLength = sizeof(VkImageMemoryBarrier::dstQueueFamilyIndex);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "dstQueueFamilyIndex"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageMemoryBarrier, image);
      uint32_t byteLength = sizeof(VkImageMemoryBarrier::image);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "image"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageMemoryBarrier, subresourceRange);
      uint32_t byteLength = sizeof(VkImageMemoryBarrier::subresourceRange);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "subresourceRange"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkImageMemoryBarrier"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkImageCreateInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageCreateInfo, sType);
      uint32_t byteLength = sizeof(VkImageCreateInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageCreateInfo, pNext);
      uint32_t byteLength = sizeof(VkImageCreateInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageCreateInfo, flags);
      uint32_t byteLength = sizeof(VkImageCreateInfo::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageCreateInfo, imageType);
      uint32_t byteLength = sizeof(VkImageCreateInfo::imageType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "imageType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageCreateInfo, format);
      uint32_t byteLength = sizeof(VkImageCreateInfo::format);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "format"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageCreateInfo, extent);
      uint32_t byteLength = sizeof(VkImageCreateInfo::extent);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "extent"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageCreateInfo, mipLevels);
      uint32_t byteLength = sizeof(VkImageCreateInfo::mipLevels);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "mipLevels"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageCreateInfo, arrayLayers);
      uint32_t byteLength = sizeof(VkImageCreateInfo::arrayLayers);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "arrayLayers"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageCreateInfo, samples);
      uint32_t byteLength = sizeof(VkImageCreateInfo::samples);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "samples"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageCreateInfo, tiling);
      uint32_t byteLength = sizeof(VkImageCreateInfo::tiling);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "tiling"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageCreateInfo, usage);
      uint32_t byteLength = sizeof(VkImageCreateInfo::usage);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "usage"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageCreateInfo, sharingMode);
      uint32_t byteLength = sizeof(VkImageCreateInfo::sharingMode);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sharingMode"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageCreateInfo, queueFamilyIndexCount);
      uint32_t byteLength = sizeof(VkImageCreateInfo::queueFamilyIndexCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "queueFamilyIndexCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageCreateInfo, pQueueFamilyIndices);
      uint32_t byteLength = sizeof(VkImageCreateInfo::pQueueFamilyIndices);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pQueueFamilyIndices"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageCreateInfo, initialLayout);
      uint32_t byteLength = sizeof(VkImageCreateInfo::initialLayout);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "initialLayout"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkImageCreateInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkSubresourceLayout)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSubresourceLayout, offset);
      uint32_t byteLength = sizeof(VkSubresourceLayout::offset);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "offset"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSubresourceLayout, size);
      uint32_t byteLength = sizeof(VkSubresourceLayout::size);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "size"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSubresourceLayout, rowPitch);
      uint32_t byteLength = sizeof(VkSubresourceLayout::rowPitch);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "rowPitch"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSubresourceLayout, arrayPitch);
      uint32_t byteLength = sizeof(VkSubresourceLayout::arrayPitch);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "arrayPitch"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSubresourceLayout, depthPitch);
      uint32_t byteLength = sizeof(VkSubresourceLayout::depthPitch);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "depthPitch"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkSubresourceLayout"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkImageViewCreateInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageViewCreateInfo, sType);
      uint32_t byteLength = sizeof(VkImageViewCreateInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageViewCreateInfo, pNext);
      uint32_t byteLength = sizeof(VkImageViewCreateInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageViewCreateInfo, flags);
      uint32_t byteLength = sizeof(VkImageViewCreateInfo::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageViewCreateInfo, image);
      uint32_t byteLength = sizeof(VkImageViewCreateInfo::image);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "image"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageViewCreateInfo, viewType);
      uint32_t byteLength = sizeof(VkImageViewCreateInfo::viewType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "viewType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageViewCreateInfo, format);
      uint32_t byteLength = sizeof(VkImageViewCreateInfo::format);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "format"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageViewCreateInfo, components);
      uint32_t byteLength = sizeof(VkImageViewCreateInfo::components);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "components"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageViewCreateInfo, subresourceRange);
      uint32_t byteLength = sizeof(VkImageViewCreateInfo::subresourceRange);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "subresourceRange"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkImageViewCreateInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkBufferCopy)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBufferCopy, srcOffset);
      uint32_t byteLength = sizeof(VkBufferCopy::srcOffset);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "srcOffset"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBufferCopy, dstOffset);
      uint32_t byteLength = sizeof(VkBufferCopy::dstOffset);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "dstOffset"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBufferCopy, size);
      uint32_t byteLength = sizeof(VkBufferCopy::size);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "size"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkBufferCopy"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkSparseMemoryBind)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSparseMemoryBind, resourceOffset);
      uint32_t byteLength = sizeof(VkSparseMemoryBind::resourceOffset);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "resourceOffset"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSparseMemoryBind, size);
      uint32_t byteLength = sizeof(VkSparseMemoryBind::size);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "size"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSparseMemoryBind, memory);
      uint32_t byteLength = sizeof(VkSparseMemoryBind::memory);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "memory"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSparseMemoryBind, memoryOffset);
      uint32_t byteLength = sizeof(VkSparseMemoryBind::memoryOffset);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "memoryOffset"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSparseMemoryBind, flags);
      uint32_t byteLength = sizeof(VkSparseMemoryBind::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkSparseMemoryBind"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkSparseImageMemoryBind)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSparseImageMemoryBind, subresource);
      uint32_t byteLength = sizeof(VkSparseImageMemoryBind::subresource);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "subresource"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSparseImageMemoryBind, offset);
      uint32_t byteLength = sizeof(VkSparseImageMemoryBind::offset);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "offset"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSparseImageMemoryBind, extent);
      uint32_t byteLength = sizeof(VkSparseImageMemoryBind::extent);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "extent"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSparseImageMemoryBind, memory);
      uint32_t byteLength = sizeof(VkSparseImageMemoryBind::memory);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "memory"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSparseImageMemoryBind, memoryOffset);
      uint32_t byteLength = sizeof(VkSparseImageMemoryBind::memoryOffset);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "memoryOffset"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSparseImageMemoryBind, flags);
      uint32_t byteLength = sizeof(VkSparseImageMemoryBind::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkSparseImageMemoryBind"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkSparseBufferMemoryBindInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSparseBufferMemoryBindInfo, buffer);
      uint32_t byteLength = sizeof(VkSparseBufferMemoryBindInfo::buffer);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "buffer"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSparseBufferMemoryBindInfo, bindCount);
      uint32_t byteLength = sizeof(VkSparseBufferMemoryBindInfo::bindCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "bindCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSparseBufferMemoryBindInfo, pBinds);
      uint32_t byteLength = sizeof(VkSparseBufferMemoryBindInfo::pBinds);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pBinds"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkSparseBufferMemoryBindInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkSparseImageOpaqueMemoryBindInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSparseImageOpaqueMemoryBindInfo, image);
      uint32_t byteLength = sizeof(VkSparseImageOpaqueMemoryBindInfo::image);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "image"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSparseImageOpaqueMemoryBindInfo, bindCount);
      uint32_t byteLength = sizeof(VkSparseImageOpaqueMemoryBindInfo::bindCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "bindCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSparseImageOpaqueMemoryBindInfo, pBinds);
      uint32_t byteLength = sizeof(VkSparseImageOpaqueMemoryBindInfo::pBinds);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pBinds"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkSparseImageOpaqueMemoryBindInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkSparseImageMemoryBindInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSparseImageMemoryBindInfo, image);
      uint32_t byteLength = sizeof(VkSparseImageMemoryBindInfo::image);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "image"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSparseImageMemoryBindInfo, bindCount);
      uint32_t byteLength = sizeof(VkSparseImageMemoryBindInfo::bindCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "bindCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSparseImageMemoryBindInfo, pBinds);
      uint32_t byteLength = sizeof(VkSparseImageMemoryBindInfo::pBinds);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pBinds"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkSparseImageMemoryBindInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkBindSparseInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindSparseInfo, sType);
      uint32_t byteLength = sizeof(VkBindSparseInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindSparseInfo, pNext);
      uint32_t byteLength = sizeof(VkBindSparseInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindSparseInfo, waitSemaphoreCount);
      uint32_t byteLength = sizeof(VkBindSparseInfo::waitSemaphoreCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "waitSemaphoreCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindSparseInfo, pWaitSemaphores);
      uint32_t byteLength = sizeof(VkBindSparseInfo::pWaitSemaphores);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pWaitSemaphores"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindSparseInfo, bufferBindCount);
      uint32_t byteLength = sizeof(VkBindSparseInfo::bufferBindCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "bufferBindCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindSparseInfo, pBufferBinds);
      uint32_t byteLength = sizeof(VkBindSparseInfo::pBufferBinds);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pBufferBinds"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindSparseInfo, imageOpaqueBindCount);
      uint32_t byteLength = sizeof(VkBindSparseInfo::imageOpaqueBindCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "imageOpaqueBindCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindSparseInfo, pImageOpaqueBinds);
      uint32_t byteLength = sizeof(VkBindSparseInfo::pImageOpaqueBinds);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pImageOpaqueBinds"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindSparseInfo, imageBindCount);
      uint32_t byteLength = sizeof(VkBindSparseInfo::imageBindCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "imageBindCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindSparseInfo, pImageBinds);
      uint32_t byteLength = sizeof(VkBindSparseInfo::pImageBinds);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pImageBinds"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindSparseInfo, signalSemaphoreCount);
      uint32_t byteLength = sizeof(VkBindSparseInfo::signalSemaphoreCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "signalSemaphoreCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindSparseInfo, pSignalSemaphores);
      uint32_t byteLength = sizeof(VkBindSparseInfo::pSignalSemaphores);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pSignalSemaphores"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkBindSparseInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkImageCopy)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageCopy, srcSubresource);
      uint32_t byteLength = sizeof(VkImageCopy::srcSubresource);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "srcSubresource"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageCopy, srcOffset);
      uint32_t byteLength = sizeof(VkImageCopy::srcOffset);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "srcOffset"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageCopy, dstSubresource);
      uint32_t byteLength = sizeof(VkImageCopy::dstSubresource);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "dstSubresource"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageCopy, dstOffset);
      uint32_t byteLength = sizeof(VkImageCopy::dstOffset);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "dstOffset"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageCopy, extent);
      uint32_t byteLength = sizeof(VkImageCopy::extent);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "extent"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkImageCopy"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkImageBlit)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageBlit, srcSubresource);
      uint32_t byteLength = sizeof(VkImageBlit::srcSubresource);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "srcSubresource"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageBlit, srcOffsets);
      uint32_t byteLength = sizeof(VkImageBlit::srcOffsets);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "srcOffsets"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageBlit, dstSubresource);
      uint32_t byteLength = sizeof(VkImageBlit::dstSubresource);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "dstSubresource"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageBlit, dstOffsets);
      uint32_t byteLength = sizeof(VkImageBlit::dstOffsets);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "dstOffsets"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkImageBlit"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkBufferImageCopy)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBufferImageCopy, bufferOffset);
      uint32_t byteLength = sizeof(VkBufferImageCopy::bufferOffset);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "bufferOffset"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBufferImageCopy, bufferRowLength);
      uint32_t byteLength = sizeof(VkBufferImageCopy::bufferRowLength);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "bufferRowLength"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBufferImageCopy, bufferImageHeight);
      uint32_t byteLength = sizeof(VkBufferImageCopy::bufferImageHeight);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "bufferImageHeight"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBufferImageCopy, imageSubresource);
      uint32_t byteLength = sizeof(VkBufferImageCopy::imageSubresource);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "imageSubresource"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBufferImageCopy, imageOffset);
      uint32_t byteLength = sizeof(VkBufferImageCopy::imageOffset);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "imageOffset"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBufferImageCopy, imageExtent);
      uint32_t byteLength = sizeof(VkBufferImageCopy::imageExtent);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "imageExtent"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkBufferImageCopy"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkImageResolve)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageResolve, srcSubresource);
      uint32_t byteLength = sizeof(VkImageResolve::srcSubresource);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "srcSubresource"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageResolve, srcOffset);
      uint32_t byteLength = sizeof(VkImageResolve::srcOffset);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "srcOffset"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageResolve, dstSubresource);
      uint32_t byteLength = sizeof(VkImageResolve::dstSubresource);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "dstSubresource"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageResolve, dstOffset);
      uint32_t byteLength = sizeof(VkImageResolve::dstOffset);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "dstOffset"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageResolve, extent);
      uint32_t byteLength = sizeof(VkImageResolve::extent);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "extent"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkImageResolve"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkShaderModuleCreateInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkShaderModuleCreateInfo, sType);
      uint32_t byteLength = sizeof(VkShaderModuleCreateInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkShaderModuleCreateInfo, pNext);
      uint32_t byteLength = sizeof(VkShaderModuleCreateInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkShaderModuleCreateInfo, flags);
      uint32_t byteLength = sizeof(VkShaderModuleCreateInfo::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkShaderModuleCreateInfo, codeSize);
      uint32_t byteLength = sizeof(VkShaderModuleCreateInfo::codeSize);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "codeSize"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkShaderModuleCreateInfo, pCode);
      uint32_t byteLength = sizeof(VkShaderModuleCreateInfo::pCode);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pCode"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkShaderModuleCreateInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDescriptorSetLayoutBinding)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorSetLayoutBinding, binding);
      uint32_t byteLength = sizeof(VkDescriptorSetLayoutBinding::binding);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "binding"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorSetLayoutBinding, descriptorType);
      uint32_t byteLength = sizeof(VkDescriptorSetLayoutBinding::descriptorType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "descriptorType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorSetLayoutBinding, descriptorCount);
      uint32_t byteLength = sizeof(VkDescriptorSetLayoutBinding::descriptorCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "descriptorCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorSetLayoutBinding, stageFlags);
      uint32_t byteLength = sizeof(VkDescriptorSetLayoutBinding::stageFlags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "stageFlags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorSetLayoutBinding, pImmutableSamplers);
      uint32_t byteLength = sizeof(VkDescriptorSetLayoutBinding::pImmutableSamplers);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pImmutableSamplers"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDescriptorSetLayoutBinding"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDescriptorSetLayoutCreateInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorSetLayoutCreateInfo, sType);
      uint32_t byteLength = sizeof(VkDescriptorSetLayoutCreateInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorSetLayoutCreateInfo, pNext);
      uint32_t byteLength = sizeof(VkDescriptorSetLayoutCreateInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorSetLayoutCreateInfo, flags);
      uint32_t byteLength = sizeof(VkDescriptorSetLayoutCreateInfo::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorSetLayoutCreateInfo, bindingCount);
      uint32_t byteLength = sizeof(VkDescriptorSetLayoutCreateInfo::bindingCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "bindingCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorSetLayoutCreateInfo, pBindings);
      uint32_t byteLength = sizeof(VkDescriptorSetLayoutCreateInfo::pBindings);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pBindings"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDescriptorSetLayoutCreateInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDescriptorPoolSize)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorPoolSize, type);
      uint32_t byteLength = sizeof(VkDescriptorPoolSize::type);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "type"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorPoolSize, descriptorCount);
      uint32_t byteLength = sizeof(VkDescriptorPoolSize::descriptorCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "descriptorCount"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDescriptorPoolSize"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDescriptorPoolCreateInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorPoolCreateInfo, sType);
      uint32_t byteLength = sizeof(VkDescriptorPoolCreateInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorPoolCreateInfo, pNext);
      uint32_t byteLength = sizeof(VkDescriptorPoolCreateInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorPoolCreateInfo, flags);
      uint32_t byteLength = sizeof(VkDescriptorPoolCreateInfo::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorPoolCreateInfo, maxSets);
      uint32_t byteLength = sizeof(VkDescriptorPoolCreateInfo::maxSets);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxSets"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorPoolCreateInfo, poolSizeCount);
      uint32_t byteLength = sizeof(VkDescriptorPoolCreateInfo::poolSizeCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "poolSizeCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorPoolCreateInfo, pPoolSizes);
      uint32_t byteLength = sizeof(VkDescriptorPoolCreateInfo::pPoolSizes);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pPoolSizes"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDescriptorPoolCreateInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDescriptorSetAllocateInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorSetAllocateInfo, sType);
      uint32_t byteLength = sizeof(VkDescriptorSetAllocateInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorSetAllocateInfo, pNext);
      uint32_t byteLength = sizeof(VkDescriptorSetAllocateInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorSetAllocateInfo, descriptorPool);
      uint32_t byteLength = sizeof(VkDescriptorSetAllocateInfo::descriptorPool);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "descriptorPool"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorSetAllocateInfo, descriptorSetCount);
      uint32_t byteLength = sizeof(VkDescriptorSetAllocateInfo::descriptorSetCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "descriptorSetCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorSetAllocateInfo, pSetLayouts);
      uint32_t byteLength = sizeof(VkDescriptorSetAllocateInfo::pSetLayouts);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pSetLayouts"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDescriptorSetAllocateInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkSpecializationMapEntry)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSpecializationMapEntry, constantID);
      uint32_t byteLength = sizeof(VkSpecializationMapEntry::constantID);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "constantID"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSpecializationMapEntry, offset);
      uint32_t byteLength = sizeof(VkSpecializationMapEntry::offset);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "offset"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSpecializationMapEntry, size);
      uint32_t byteLength = sizeof(VkSpecializationMapEntry::size);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "size"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkSpecializationMapEntry"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkSpecializationInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSpecializationInfo, mapEntryCount);
      uint32_t byteLength = sizeof(VkSpecializationInfo::mapEntryCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "mapEntryCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSpecializationInfo, pMapEntries);
      uint32_t byteLength = sizeof(VkSpecializationInfo::pMapEntries);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pMapEntries"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSpecializationInfo, dataSize);
      uint32_t byteLength = sizeof(VkSpecializationInfo::dataSize);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "dataSize"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSpecializationInfo, pData);
      uint32_t byteLength = sizeof(VkSpecializationInfo::pData);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pData"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkSpecializationInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPipelineShaderStageCreateInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineShaderStageCreateInfo, sType);
      uint32_t byteLength = sizeof(VkPipelineShaderStageCreateInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineShaderStageCreateInfo, pNext);
      uint32_t byteLength = sizeof(VkPipelineShaderStageCreateInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineShaderStageCreateInfo, flags);
      uint32_t byteLength = sizeof(VkPipelineShaderStageCreateInfo::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineShaderStageCreateInfo, stage);
      uint32_t byteLength = sizeof(VkPipelineShaderStageCreateInfo::stage);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "stage"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineShaderStageCreateInfo, module);
      uint32_t byteLength = sizeof(VkPipelineShaderStageCreateInfo::module);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "module"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineShaderStageCreateInfo, pName);
      uint32_t byteLength = sizeof(VkPipelineShaderStageCreateInfo::pName);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pName"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineShaderStageCreateInfo, pSpecializationInfo);
      uint32_t byteLength = sizeof(VkPipelineShaderStageCreateInfo::pSpecializationInfo);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pSpecializationInfo"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPipelineShaderStageCreateInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkComputePipelineCreateInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkComputePipelineCreateInfo, sType);
      uint32_t byteLength = sizeof(VkComputePipelineCreateInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkComputePipelineCreateInfo, pNext);
      uint32_t byteLength = sizeof(VkComputePipelineCreateInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkComputePipelineCreateInfo, flags);
      uint32_t byteLength = sizeof(VkComputePipelineCreateInfo::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkComputePipelineCreateInfo, stage);
      uint32_t byteLength = sizeof(VkComputePipelineCreateInfo::stage);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "stage"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkComputePipelineCreateInfo, layout);
      uint32_t byteLength = sizeof(VkComputePipelineCreateInfo::layout);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "layout"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkComputePipelineCreateInfo, basePipelineHandle);
      uint32_t byteLength = sizeof(VkComputePipelineCreateInfo::basePipelineHandle);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "basePipelineHandle"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkComputePipelineCreateInfo, basePipelineIndex);
      uint32_t byteLength = sizeof(VkComputePipelineCreateInfo::basePipelineIndex);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "basePipelineIndex"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkComputePipelineCreateInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkVertexInputBindingDescription)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkVertexInputBindingDescription, binding);
      uint32_t byteLength = sizeof(VkVertexInputBindingDescription::binding);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "binding"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkVertexInputBindingDescription, stride);
      uint32_t byteLength = sizeof(VkVertexInputBindingDescription::stride);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "stride"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkVertexInputBindingDescription, inputRate);
      uint32_t byteLength = sizeof(VkVertexInputBindingDescription::inputRate);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "inputRate"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkVertexInputBindingDescription"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkVertexInputAttributeDescription)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkVertexInputAttributeDescription, location);
      uint32_t byteLength = sizeof(VkVertexInputAttributeDescription::location);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "location"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkVertexInputAttributeDescription, binding);
      uint32_t byteLength = sizeof(VkVertexInputAttributeDescription::binding);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "binding"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkVertexInputAttributeDescription, format);
      uint32_t byteLength = sizeof(VkVertexInputAttributeDescription::format);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "format"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkVertexInputAttributeDescription, offset);
      uint32_t byteLength = sizeof(VkVertexInputAttributeDescription::offset);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "offset"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkVertexInputAttributeDescription"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPipelineVertexInputStateCreateInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineVertexInputStateCreateInfo, sType);
      uint32_t byteLength = sizeof(VkPipelineVertexInputStateCreateInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineVertexInputStateCreateInfo, pNext);
      uint32_t byteLength = sizeof(VkPipelineVertexInputStateCreateInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineVertexInputStateCreateInfo, flags);
      uint32_t byteLength = sizeof(VkPipelineVertexInputStateCreateInfo::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineVertexInputStateCreateInfo, vertexBindingDescriptionCount);
      uint32_t byteLength = sizeof(VkPipelineVertexInputStateCreateInfo::vertexBindingDescriptionCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "vertexBindingDescriptionCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineVertexInputStateCreateInfo, pVertexBindingDescriptions);
      uint32_t byteLength = sizeof(VkPipelineVertexInputStateCreateInfo::pVertexBindingDescriptions);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pVertexBindingDescriptions"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineVertexInputStateCreateInfo, vertexAttributeDescriptionCount);
      uint32_t byteLength = sizeof(VkPipelineVertexInputStateCreateInfo::vertexAttributeDescriptionCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "vertexAttributeDescriptionCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineVertexInputStateCreateInfo, pVertexAttributeDescriptions);
      uint32_t byteLength = sizeof(VkPipelineVertexInputStateCreateInfo::pVertexAttributeDescriptions);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pVertexAttributeDescriptions"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPipelineVertexInputStateCreateInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPipelineInputAssemblyStateCreateInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineInputAssemblyStateCreateInfo, sType);
      uint32_t byteLength = sizeof(VkPipelineInputAssemblyStateCreateInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineInputAssemblyStateCreateInfo, pNext);
      uint32_t byteLength = sizeof(VkPipelineInputAssemblyStateCreateInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineInputAssemblyStateCreateInfo, flags);
      uint32_t byteLength = sizeof(VkPipelineInputAssemblyStateCreateInfo::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineInputAssemblyStateCreateInfo, topology);
      uint32_t byteLength = sizeof(VkPipelineInputAssemblyStateCreateInfo::topology);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "topology"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineInputAssemblyStateCreateInfo, primitiveRestartEnable);
      uint32_t byteLength = sizeof(VkPipelineInputAssemblyStateCreateInfo::primitiveRestartEnable);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "primitiveRestartEnable"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPipelineInputAssemblyStateCreateInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPipelineTessellationStateCreateInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineTessellationStateCreateInfo, sType);
      uint32_t byteLength = sizeof(VkPipelineTessellationStateCreateInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineTessellationStateCreateInfo, pNext);
      uint32_t byteLength = sizeof(VkPipelineTessellationStateCreateInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineTessellationStateCreateInfo, flags);
      uint32_t byteLength = sizeof(VkPipelineTessellationStateCreateInfo::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineTessellationStateCreateInfo, patchControlPoints);
      uint32_t byteLength = sizeof(VkPipelineTessellationStateCreateInfo::patchControlPoints);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "patchControlPoints"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPipelineTessellationStateCreateInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPipelineViewportStateCreateInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineViewportStateCreateInfo, sType);
      uint32_t byteLength = sizeof(VkPipelineViewportStateCreateInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineViewportStateCreateInfo, pNext);
      uint32_t byteLength = sizeof(VkPipelineViewportStateCreateInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineViewportStateCreateInfo, flags);
      uint32_t byteLength = sizeof(VkPipelineViewportStateCreateInfo::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineViewportStateCreateInfo, viewportCount);
      uint32_t byteLength = sizeof(VkPipelineViewportStateCreateInfo::viewportCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "viewportCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineViewportStateCreateInfo, pViewports);
      uint32_t byteLength = sizeof(VkPipelineViewportStateCreateInfo::pViewports);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pViewports"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineViewportStateCreateInfo, scissorCount);
      uint32_t byteLength = sizeof(VkPipelineViewportStateCreateInfo::scissorCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "scissorCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineViewportStateCreateInfo, pScissors);
      uint32_t byteLength = sizeof(VkPipelineViewportStateCreateInfo::pScissors);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pScissors"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPipelineViewportStateCreateInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPipelineRasterizationStateCreateInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineRasterizationStateCreateInfo, sType);
      uint32_t byteLength = sizeof(VkPipelineRasterizationStateCreateInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineRasterizationStateCreateInfo, pNext);
      uint32_t byteLength = sizeof(VkPipelineRasterizationStateCreateInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineRasterizationStateCreateInfo, flags);
      uint32_t byteLength = sizeof(VkPipelineRasterizationStateCreateInfo::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineRasterizationStateCreateInfo, depthClampEnable);
      uint32_t byteLength = sizeof(VkPipelineRasterizationStateCreateInfo::depthClampEnable);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "depthClampEnable"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineRasterizationStateCreateInfo, rasterizerDiscardEnable);
      uint32_t byteLength = sizeof(VkPipelineRasterizationStateCreateInfo::rasterizerDiscardEnable);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "rasterizerDiscardEnable"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineRasterizationStateCreateInfo, polygonMode);
      uint32_t byteLength = sizeof(VkPipelineRasterizationStateCreateInfo::polygonMode);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "polygonMode"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineRasterizationStateCreateInfo, cullMode);
      uint32_t byteLength = sizeof(VkPipelineRasterizationStateCreateInfo::cullMode);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "cullMode"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineRasterizationStateCreateInfo, frontFace);
      uint32_t byteLength = sizeof(VkPipelineRasterizationStateCreateInfo::frontFace);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "frontFace"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineRasterizationStateCreateInfo, depthBiasEnable);
      uint32_t byteLength = sizeof(VkPipelineRasterizationStateCreateInfo::depthBiasEnable);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "depthBiasEnable"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineRasterizationStateCreateInfo, depthBiasConstantFactor);
      uint32_t byteLength = sizeof(VkPipelineRasterizationStateCreateInfo::depthBiasConstantFactor);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "depthBiasConstantFactor"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineRasterizationStateCreateInfo, depthBiasClamp);
      uint32_t byteLength = sizeof(VkPipelineRasterizationStateCreateInfo::depthBiasClamp);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "depthBiasClamp"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineRasterizationStateCreateInfo, depthBiasSlopeFactor);
      uint32_t byteLength = sizeof(VkPipelineRasterizationStateCreateInfo::depthBiasSlopeFactor);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "depthBiasSlopeFactor"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineRasterizationStateCreateInfo, lineWidth);
      uint32_t byteLength = sizeof(VkPipelineRasterizationStateCreateInfo::lineWidth);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "lineWidth"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPipelineRasterizationStateCreateInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPipelineMultisampleStateCreateInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineMultisampleStateCreateInfo, sType);
      uint32_t byteLength = sizeof(VkPipelineMultisampleStateCreateInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineMultisampleStateCreateInfo, pNext);
      uint32_t byteLength = sizeof(VkPipelineMultisampleStateCreateInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineMultisampleStateCreateInfo, flags);
      uint32_t byteLength = sizeof(VkPipelineMultisampleStateCreateInfo::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineMultisampleStateCreateInfo, rasterizationSamples);
      uint32_t byteLength = sizeof(VkPipelineMultisampleStateCreateInfo::rasterizationSamples);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "rasterizationSamples"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineMultisampleStateCreateInfo, sampleShadingEnable);
      uint32_t byteLength = sizeof(VkPipelineMultisampleStateCreateInfo::sampleShadingEnable);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sampleShadingEnable"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineMultisampleStateCreateInfo, minSampleShading);
      uint32_t byteLength = sizeof(VkPipelineMultisampleStateCreateInfo::minSampleShading);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "minSampleShading"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineMultisampleStateCreateInfo, pSampleMask);
      uint32_t byteLength = sizeof(VkPipelineMultisampleStateCreateInfo::pSampleMask);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pSampleMask"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineMultisampleStateCreateInfo, alphaToCoverageEnable);
      uint32_t byteLength = sizeof(VkPipelineMultisampleStateCreateInfo::alphaToCoverageEnable);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "alphaToCoverageEnable"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineMultisampleStateCreateInfo, alphaToOneEnable);
      uint32_t byteLength = sizeof(VkPipelineMultisampleStateCreateInfo::alphaToOneEnable);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "alphaToOneEnable"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPipelineMultisampleStateCreateInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPipelineColorBlendAttachmentState)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineColorBlendAttachmentState, blendEnable);
      uint32_t byteLength = sizeof(VkPipelineColorBlendAttachmentState::blendEnable);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "blendEnable"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineColorBlendAttachmentState, srcColorBlendFactor);
      uint32_t byteLength = sizeof(VkPipelineColorBlendAttachmentState::srcColorBlendFactor);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "srcColorBlendFactor"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineColorBlendAttachmentState, dstColorBlendFactor);
      uint32_t byteLength = sizeof(VkPipelineColorBlendAttachmentState::dstColorBlendFactor);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "dstColorBlendFactor"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineColorBlendAttachmentState, colorBlendOp);
      uint32_t byteLength = sizeof(VkPipelineColorBlendAttachmentState::colorBlendOp);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "colorBlendOp"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineColorBlendAttachmentState, srcAlphaBlendFactor);
      uint32_t byteLength = sizeof(VkPipelineColorBlendAttachmentState::srcAlphaBlendFactor);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "srcAlphaBlendFactor"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineColorBlendAttachmentState, dstAlphaBlendFactor);
      uint32_t byteLength = sizeof(VkPipelineColorBlendAttachmentState::dstAlphaBlendFactor);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "dstAlphaBlendFactor"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineColorBlendAttachmentState, alphaBlendOp);
      uint32_t byteLength = sizeof(VkPipelineColorBlendAttachmentState::alphaBlendOp);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "alphaBlendOp"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineColorBlendAttachmentState, colorWriteMask);
      uint32_t byteLength = sizeof(VkPipelineColorBlendAttachmentState::colorWriteMask);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "colorWriteMask"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPipelineColorBlendAttachmentState"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPipelineColorBlendStateCreateInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineColorBlendStateCreateInfo, sType);
      uint32_t byteLength = sizeof(VkPipelineColorBlendStateCreateInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineColorBlendStateCreateInfo, pNext);
      uint32_t byteLength = sizeof(VkPipelineColorBlendStateCreateInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineColorBlendStateCreateInfo, flags);
      uint32_t byteLength = sizeof(VkPipelineColorBlendStateCreateInfo::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineColorBlendStateCreateInfo, logicOpEnable);
      uint32_t byteLength = sizeof(VkPipelineColorBlendStateCreateInfo::logicOpEnable);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "logicOpEnable"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineColorBlendStateCreateInfo, logicOp);
      uint32_t byteLength = sizeof(VkPipelineColorBlendStateCreateInfo::logicOp);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "logicOp"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineColorBlendStateCreateInfo, attachmentCount);
      uint32_t byteLength = sizeof(VkPipelineColorBlendStateCreateInfo::attachmentCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "attachmentCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineColorBlendStateCreateInfo, pAttachments);
      uint32_t byteLength = sizeof(VkPipelineColorBlendStateCreateInfo::pAttachments);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pAttachments"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineColorBlendStateCreateInfo, blendConstants);
      uint32_t byteLength = sizeof(VkPipelineColorBlendStateCreateInfo::blendConstants);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "blendConstants"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPipelineColorBlendStateCreateInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPipelineDynamicStateCreateInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineDynamicStateCreateInfo, sType);
      uint32_t byteLength = sizeof(VkPipelineDynamicStateCreateInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineDynamicStateCreateInfo, pNext);
      uint32_t byteLength = sizeof(VkPipelineDynamicStateCreateInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineDynamicStateCreateInfo, flags);
      uint32_t byteLength = sizeof(VkPipelineDynamicStateCreateInfo::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineDynamicStateCreateInfo, dynamicStateCount);
      uint32_t byteLength = sizeof(VkPipelineDynamicStateCreateInfo::dynamicStateCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "dynamicStateCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineDynamicStateCreateInfo, pDynamicStates);
      uint32_t byteLength = sizeof(VkPipelineDynamicStateCreateInfo::pDynamicStates);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pDynamicStates"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPipelineDynamicStateCreateInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkStencilOpState)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkStencilOpState, failOp);
      uint32_t byteLength = sizeof(VkStencilOpState::failOp);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "failOp"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkStencilOpState, passOp);
      uint32_t byteLength = sizeof(VkStencilOpState::passOp);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "passOp"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkStencilOpState, depthFailOp);
      uint32_t byteLength = sizeof(VkStencilOpState::depthFailOp);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "depthFailOp"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkStencilOpState, compareOp);
      uint32_t byteLength = sizeof(VkStencilOpState::compareOp);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "compareOp"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkStencilOpState, compareMask);
      uint32_t byteLength = sizeof(VkStencilOpState::compareMask);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "compareMask"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkStencilOpState, writeMask);
      uint32_t byteLength = sizeof(VkStencilOpState::writeMask);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "writeMask"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkStencilOpState, reference);
      uint32_t byteLength = sizeof(VkStencilOpState::reference);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "reference"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkStencilOpState"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPipelineDepthStencilStateCreateInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineDepthStencilStateCreateInfo, sType);
      uint32_t byteLength = sizeof(VkPipelineDepthStencilStateCreateInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineDepthStencilStateCreateInfo, pNext);
      uint32_t byteLength = sizeof(VkPipelineDepthStencilStateCreateInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineDepthStencilStateCreateInfo, flags);
      uint32_t byteLength = sizeof(VkPipelineDepthStencilStateCreateInfo::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineDepthStencilStateCreateInfo, depthTestEnable);
      uint32_t byteLength = sizeof(VkPipelineDepthStencilStateCreateInfo::depthTestEnable);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "depthTestEnable"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineDepthStencilStateCreateInfo, depthWriteEnable);
      uint32_t byteLength = sizeof(VkPipelineDepthStencilStateCreateInfo::depthWriteEnable);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "depthWriteEnable"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineDepthStencilStateCreateInfo, depthCompareOp);
      uint32_t byteLength = sizeof(VkPipelineDepthStencilStateCreateInfo::depthCompareOp);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "depthCompareOp"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineDepthStencilStateCreateInfo, depthBoundsTestEnable);
      uint32_t byteLength = sizeof(VkPipelineDepthStencilStateCreateInfo::depthBoundsTestEnable);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "depthBoundsTestEnable"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineDepthStencilStateCreateInfo, stencilTestEnable);
      uint32_t byteLength = sizeof(VkPipelineDepthStencilStateCreateInfo::stencilTestEnable);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "stencilTestEnable"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineDepthStencilStateCreateInfo, front);
      uint32_t byteLength = sizeof(VkPipelineDepthStencilStateCreateInfo::front);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "front"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineDepthStencilStateCreateInfo, back);
      uint32_t byteLength = sizeof(VkPipelineDepthStencilStateCreateInfo::back);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "back"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineDepthStencilStateCreateInfo, minDepthBounds);
      uint32_t byteLength = sizeof(VkPipelineDepthStencilStateCreateInfo::minDepthBounds);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "minDepthBounds"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineDepthStencilStateCreateInfo, maxDepthBounds);
      uint32_t byteLength = sizeof(VkPipelineDepthStencilStateCreateInfo::maxDepthBounds);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxDepthBounds"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPipelineDepthStencilStateCreateInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkGraphicsPipelineCreateInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkGraphicsPipelineCreateInfo, sType);
      uint32_t byteLength = sizeof(VkGraphicsPipelineCreateInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkGraphicsPipelineCreateInfo, pNext);
      uint32_t byteLength = sizeof(VkGraphicsPipelineCreateInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkGraphicsPipelineCreateInfo, flags);
      uint32_t byteLength = sizeof(VkGraphicsPipelineCreateInfo::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkGraphicsPipelineCreateInfo, stageCount);
      uint32_t byteLength = sizeof(VkGraphicsPipelineCreateInfo::stageCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "stageCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkGraphicsPipelineCreateInfo, pStages);
      uint32_t byteLength = sizeof(VkGraphicsPipelineCreateInfo::pStages);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pStages"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkGraphicsPipelineCreateInfo, pVertexInputState);
      uint32_t byteLength = sizeof(VkGraphicsPipelineCreateInfo::pVertexInputState);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pVertexInputState"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkGraphicsPipelineCreateInfo, pInputAssemblyState);
      uint32_t byteLength = sizeof(VkGraphicsPipelineCreateInfo::pInputAssemblyState);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pInputAssemblyState"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkGraphicsPipelineCreateInfo, pTessellationState);
      uint32_t byteLength = sizeof(VkGraphicsPipelineCreateInfo::pTessellationState);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pTessellationState"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkGraphicsPipelineCreateInfo, pViewportState);
      uint32_t byteLength = sizeof(VkGraphicsPipelineCreateInfo::pViewportState);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pViewportState"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkGraphicsPipelineCreateInfo, pRasterizationState);
      uint32_t byteLength = sizeof(VkGraphicsPipelineCreateInfo::pRasterizationState);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pRasterizationState"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkGraphicsPipelineCreateInfo, pMultisampleState);
      uint32_t byteLength = sizeof(VkGraphicsPipelineCreateInfo::pMultisampleState);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pMultisampleState"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkGraphicsPipelineCreateInfo, pDepthStencilState);
      uint32_t byteLength = sizeof(VkGraphicsPipelineCreateInfo::pDepthStencilState);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pDepthStencilState"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkGraphicsPipelineCreateInfo, pColorBlendState);
      uint32_t byteLength = sizeof(VkGraphicsPipelineCreateInfo::pColorBlendState);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pColorBlendState"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkGraphicsPipelineCreateInfo, pDynamicState);
      uint32_t byteLength = sizeof(VkGraphicsPipelineCreateInfo::pDynamicState);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pDynamicState"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkGraphicsPipelineCreateInfo, layout);
      uint32_t byteLength = sizeof(VkGraphicsPipelineCreateInfo::layout);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "layout"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkGraphicsPipelineCreateInfo, renderPass);
      uint32_t byteLength = sizeof(VkGraphicsPipelineCreateInfo::renderPass);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "renderPass"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkGraphicsPipelineCreateInfo, subpass);
      uint32_t byteLength = sizeof(VkGraphicsPipelineCreateInfo::subpass);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "subpass"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkGraphicsPipelineCreateInfo, basePipelineHandle);
      uint32_t byteLength = sizeof(VkGraphicsPipelineCreateInfo::basePipelineHandle);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "basePipelineHandle"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkGraphicsPipelineCreateInfo, basePipelineIndex);
      uint32_t byteLength = sizeof(VkGraphicsPipelineCreateInfo::basePipelineIndex);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "basePipelineIndex"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkGraphicsPipelineCreateInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPipelineCacheCreateInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineCacheCreateInfo, sType);
      uint32_t byteLength = sizeof(VkPipelineCacheCreateInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineCacheCreateInfo, pNext);
      uint32_t byteLength = sizeof(VkPipelineCacheCreateInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineCacheCreateInfo, flags);
      uint32_t byteLength = sizeof(VkPipelineCacheCreateInfo::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineCacheCreateInfo, initialDataSize);
      uint32_t byteLength = sizeof(VkPipelineCacheCreateInfo::initialDataSize);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "initialDataSize"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineCacheCreateInfo, pInitialData);
      uint32_t byteLength = sizeof(VkPipelineCacheCreateInfo::pInitialData);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pInitialData"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPipelineCacheCreateInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPushConstantRange)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPushConstantRange, stageFlags);
      uint32_t byteLength = sizeof(VkPushConstantRange::stageFlags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "stageFlags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPushConstantRange, offset);
      uint32_t byteLength = sizeof(VkPushConstantRange::offset);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "offset"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPushConstantRange, size);
      uint32_t byteLength = sizeof(VkPushConstantRange::size);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "size"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPushConstantRange"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPipelineLayoutCreateInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineLayoutCreateInfo, sType);
      uint32_t byteLength = sizeof(VkPipelineLayoutCreateInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineLayoutCreateInfo, pNext);
      uint32_t byteLength = sizeof(VkPipelineLayoutCreateInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineLayoutCreateInfo, flags);
      uint32_t byteLength = sizeof(VkPipelineLayoutCreateInfo::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineLayoutCreateInfo, setLayoutCount);
      uint32_t byteLength = sizeof(VkPipelineLayoutCreateInfo::setLayoutCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "setLayoutCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineLayoutCreateInfo, pSetLayouts);
      uint32_t byteLength = sizeof(VkPipelineLayoutCreateInfo::pSetLayouts);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pSetLayouts"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineLayoutCreateInfo, pushConstantRangeCount);
      uint32_t byteLength = sizeof(VkPipelineLayoutCreateInfo::pushConstantRangeCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pushConstantRangeCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineLayoutCreateInfo, pPushConstantRanges);
      uint32_t byteLength = sizeof(VkPipelineLayoutCreateInfo::pPushConstantRanges);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pPushConstantRanges"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPipelineLayoutCreateInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkSamplerCreateInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSamplerCreateInfo, sType);
      uint32_t byteLength = sizeof(VkSamplerCreateInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSamplerCreateInfo, pNext);
      uint32_t byteLength = sizeof(VkSamplerCreateInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSamplerCreateInfo, flags);
      uint32_t byteLength = sizeof(VkSamplerCreateInfo::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSamplerCreateInfo, magFilter);
      uint32_t byteLength = sizeof(VkSamplerCreateInfo::magFilter);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "magFilter"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSamplerCreateInfo, minFilter);
      uint32_t byteLength = sizeof(VkSamplerCreateInfo::minFilter);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "minFilter"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSamplerCreateInfo, mipmapMode);
      uint32_t byteLength = sizeof(VkSamplerCreateInfo::mipmapMode);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "mipmapMode"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSamplerCreateInfo, addressModeU);
      uint32_t byteLength = sizeof(VkSamplerCreateInfo::addressModeU);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "addressModeU"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSamplerCreateInfo, addressModeV);
      uint32_t byteLength = sizeof(VkSamplerCreateInfo::addressModeV);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "addressModeV"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSamplerCreateInfo, addressModeW);
      uint32_t byteLength = sizeof(VkSamplerCreateInfo::addressModeW);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "addressModeW"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSamplerCreateInfo, mipLodBias);
      uint32_t byteLength = sizeof(VkSamplerCreateInfo::mipLodBias);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "mipLodBias"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSamplerCreateInfo, anisotropyEnable);
      uint32_t byteLength = sizeof(VkSamplerCreateInfo::anisotropyEnable);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "anisotropyEnable"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSamplerCreateInfo, maxAnisotropy);
      uint32_t byteLength = sizeof(VkSamplerCreateInfo::maxAnisotropy);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxAnisotropy"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSamplerCreateInfo, compareEnable);
      uint32_t byteLength = sizeof(VkSamplerCreateInfo::compareEnable);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "compareEnable"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSamplerCreateInfo, compareOp);
      uint32_t byteLength = sizeof(VkSamplerCreateInfo::compareOp);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "compareOp"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSamplerCreateInfo, minLod);
      uint32_t byteLength = sizeof(VkSamplerCreateInfo::minLod);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "minLod"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSamplerCreateInfo, maxLod);
      uint32_t byteLength = sizeof(VkSamplerCreateInfo::maxLod);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxLod"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSamplerCreateInfo, borderColor);
      uint32_t byteLength = sizeof(VkSamplerCreateInfo::borderColor);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "borderColor"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSamplerCreateInfo, unnormalizedCoordinates);
      uint32_t byteLength = sizeof(VkSamplerCreateInfo::unnormalizedCoordinates);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "unnormalizedCoordinates"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkSamplerCreateInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkCommandPoolCreateInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCommandPoolCreateInfo, sType);
      uint32_t byteLength = sizeof(VkCommandPoolCreateInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCommandPoolCreateInfo, pNext);
      uint32_t byteLength = sizeof(VkCommandPoolCreateInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCommandPoolCreateInfo, flags);
      uint32_t byteLength = sizeof(VkCommandPoolCreateInfo::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCommandPoolCreateInfo, queueFamilyIndex);
      uint32_t byteLength = sizeof(VkCommandPoolCreateInfo::queueFamilyIndex);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "queueFamilyIndex"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkCommandPoolCreateInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkCommandBufferAllocateInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCommandBufferAllocateInfo, sType);
      uint32_t byteLength = sizeof(VkCommandBufferAllocateInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCommandBufferAllocateInfo, pNext);
      uint32_t byteLength = sizeof(VkCommandBufferAllocateInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCommandBufferAllocateInfo, commandPool);
      uint32_t byteLength = sizeof(VkCommandBufferAllocateInfo::commandPool);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "commandPool"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCommandBufferAllocateInfo, level);
      uint32_t byteLength = sizeof(VkCommandBufferAllocateInfo::level);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "level"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCommandBufferAllocateInfo, commandBufferCount);
      uint32_t byteLength = sizeof(VkCommandBufferAllocateInfo::commandBufferCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "commandBufferCount"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkCommandBufferAllocateInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkCommandBufferInheritanceInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCommandBufferInheritanceInfo, sType);
      uint32_t byteLength = sizeof(VkCommandBufferInheritanceInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCommandBufferInheritanceInfo, pNext);
      uint32_t byteLength = sizeof(VkCommandBufferInheritanceInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCommandBufferInheritanceInfo, renderPass);
      uint32_t byteLength = sizeof(VkCommandBufferInheritanceInfo::renderPass);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "renderPass"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCommandBufferInheritanceInfo, subpass);
      uint32_t byteLength = sizeof(VkCommandBufferInheritanceInfo::subpass);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "subpass"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCommandBufferInheritanceInfo, framebuffer);
      uint32_t byteLength = sizeof(VkCommandBufferInheritanceInfo::framebuffer);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "framebuffer"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCommandBufferInheritanceInfo, occlusionQueryEnable);
      uint32_t byteLength = sizeof(VkCommandBufferInheritanceInfo::occlusionQueryEnable);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "occlusionQueryEnable"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCommandBufferInheritanceInfo, queryFlags);
      uint32_t byteLength = sizeof(VkCommandBufferInheritanceInfo::queryFlags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "queryFlags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCommandBufferInheritanceInfo, pipelineStatistics);
      uint32_t byteLength = sizeof(VkCommandBufferInheritanceInfo::pipelineStatistics);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pipelineStatistics"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkCommandBufferInheritanceInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkCommandBufferBeginInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCommandBufferBeginInfo, sType);
      uint32_t byteLength = sizeof(VkCommandBufferBeginInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCommandBufferBeginInfo, pNext);
      uint32_t byteLength = sizeof(VkCommandBufferBeginInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCommandBufferBeginInfo, flags);
      uint32_t byteLength = sizeof(VkCommandBufferBeginInfo::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCommandBufferBeginInfo, pInheritanceInfo);
      uint32_t byteLength = sizeof(VkCommandBufferBeginInfo::pInheritanceInfo);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pInheritanceInfo"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkCommandBufferBeginInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkRenderPassBeginInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRenderPassBeginInfo, sType);
      uint32_t byteLength = sizeof(VkRenderPassBeginInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRenderPassBeginInfo, pNext);
      uint32_t byteLength = sizeof(VkRenderPassBeginInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRenderPassBeginInfo, renderPass);
      uint32_t byteLength = sizeof(VkRenderPassBeginInfo::renderPass);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "renderPass"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRenderPassBeginInfo, framebuffer);
      uint32_t byteLength = sizeof(VkRenderPassBeginInfo::framebuffer);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "framebuffer"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRenderPassBeginInfo, renderArea);
      uint32_t byteLength = sizeof(VkRenderPassBeginInfo::renderArea);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "renderArea"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRenderPassBeginInfo, clearValueCount);
      uint32_t byteLength = sizeof(VkRenderPassBeginInfo::clearValueCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "clearValueCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRenderPassBeginInfo, pClearValues);
      uint32_t byteLength = sizeof(VkRenderPassBeginInfo::pClearValues);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pClearValues"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkRenderPassBeginInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkClearDepthStencilValue)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkClearDepthStencilValue, depth);
      uint32_t byteLength = sizeof(VkClearDepthStencilValue::depth);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "depth"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkClearDepthStencilValue, stencil);
      uint32_t byteLength = sizeof(VkClearDepthStencilValue::stencil);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "stencil"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkClearDepthStencilValue"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkClearAttachment)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkClearAttachment, aspectMask);
      uint32_t byteLength = sizeof(VkClearAttachment::aspectMask);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "aspectMask"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkClearAttachment, colorAttachment);
      uint32_t byteLength = sizeof(VkClearAttachment::colorAttachment);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "colorAttachment"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkClearAttachment, clearValue);
      uint32_t byteLength = sizeof(VkClearAttachment::clearValue);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "clearValue"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkClearAttachment"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkAttachmentDescription)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkAttachmentDescription, flags);
      uint32_t byteLength = sizeof(VkAttachmentDescription::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkAttachmentDescription, format);
      uint32_t byteLength = sizeof(VkAttachmentDescription::format);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "format"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkAttachmentDescription, samples);
      uint32_t byteLength = sizeof(VkAttachmentDescription::samples);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "samples"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkAttachmentDescription, loadOp);
      uint32_t byteLength = sizeof(VkAttachmentDescription::loadOp);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "loadOp"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkAttachmentDescription, storeOp);
      uint32_t byteLength = sizeof(VkAttachmentDescription::storeOp);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "storeOp"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkAttachmentDescription, stencilLoadOp);
      uint32_t byteLength = sizeof(VkAttachmentDescription::stencilLoadOp);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "stencilLoadOp"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkAttachmentDescription, stencilStoreOp);
      uint32_t byteLength = sizeof(VkAttachmentDescription::stencilStoreOp);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "stencilStoreOp"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkAttachmentDescription, initialLayout);
      uint32_t byteLength = sizeof(VkAttachmentDescription::initialLayout);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "initialLayout"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkAttachmentDescription, finalLayout);
      uint32_t byteLength = sizeof(VkAttachmentDescription::finalLayout);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "finalLayout"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkAttachmentDescription"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkAttachmentReference)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkAttachmentReference, attachment);
      uint32_t byteLength = sizeof(VkAttachmentReference::attachment);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "attachment"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkAttachmentReference, layout);
      uint32_t byteLength = sizeof(VkAttachmentReference::layout);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "layout"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkAttachmentReference"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkSubpassDescription)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSubpassDescription, flags);
      uint32_t byteLength = sizeof(VkSubpassDescription::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSubpassDescription, pipelineBindPoint);
      uint32_t byteLength = sizeof(VkSubpassDescription::pipelineBindPoint);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pipelineBindPoint"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSubpassDescription, inputAttachmentCount);
      uint32_t byteLength = sizeof(VkSubpassDescription::inputAttachmentCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "inputAttachmentCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSubpassDescription, pInputAttachments);
      uint32_t byteLength = sizeof(VkSubpassDescription::pInputAttachments);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pInputAttachments"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSubpassDescription, colorAttachmentCount);
      uint32_t byteLength = sizeof(VkSubpassDescription::colorAttachmentCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "colorAttachmentCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSubpassDescription, pColorAttachments);
      uint32_t byteLength = sizeof(VkSubpassDescription::pColorAttachments);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pColorAttachments"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSubpassDescription, pResolveAttachments);
      uint32_t byteLength = sizeof(VkSubpassDescription::pResolveAttachments);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pResolveAttachments"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSubpassDescription, pDepthStencilAttachment);
      uint32_t byteLength = sizeof(VkSubpassDescription::pDepthStencilAttachment);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pDepthStencilAttachment"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSubpassDescription, preserveAttachmentCount);
      uint32_t byteLength = sizeof(VkSubpassDescription::preserveAttachmentCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "preserveAttachmentCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSubpassDescription, pPreserveAttachments);
      uint32_t byteLength = sizeof(VkSubpassDescription::pPreserveAttachments);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pPreserveAttachments"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkSubpassDescription"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkSubpassDependency)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSubpassDependency, srcSubpass);
      uint32_t byteLength = sizeof(VkSubpassDependency::srcSubpass);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "srcSubpass"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSubpassDependency, dstSubpass);
      uint32_t byteLength = sizeof(VkSubpassDependency::dstSubpass);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "dstSubpass"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSubpassDependency, srcStageMask);
      uint32_t byteLength = sizeof(VkSubpassDependency::srcStageMask);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "srcStageMask"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSubpassDependency, dstStageMask);
      uint32_t byteLength = sizeof(VkSubpassDependency::dstStageMask);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "dstStageMask"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSubpassDependency, srcAccessMask);
      uint32_t byteLength = sizeof(VkSubpassDependency::srcAccessMask);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "srcAccessMask"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSubpassDependency, dstAccessMask);
      uint32_t byteLength = sizeof(VkSubpassDependency::dstAccessMask);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "dstAccessMask"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSubpassDependency, dependencyFlags);
      uint32_t byteLength = sizeof(VkSubpassDependency::dependencyFlags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "dependencyFlags"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkSubpassDependency"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkRenderPassCreateInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRenderPassCreateInfo, sType);
      uint32_t byteLength = sizeof(VkRenderPassCreateInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRenderPassCreateInfo, pNext);
      uint32_t byteLength = sizeof(VkRenderPassCreateInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRenderPassCreateInfo, flags);
      uint32_t byteLength = sizeof(VkRenderPassCreateInfo::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRenderPassCreateInfo, attachmentCount);
      uint32_t byteLength = sizeof(VkRenderPassCreateInfo::attachmentCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "attachmentCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRenderPassCreateInfo, pAttachments);
      uint32_t byteLength = sizeof(VkRenderPassCreateInfo::pAttachments);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pAttachments"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRenderPassCreateInfo, subpassCount);
      uint32_t byteLength = sizeof(VkRenderPassCreateInfo::subpassCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "subpassCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRenderPassCreateInfo, pSubpasses);
      uint32_t byteLength = sizeof(VkRenderPassCreateInfo::pSubpasses);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pSubpasses"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRenderPassCreateInfo, dependencyCount);
      uint32_t byteLength = sizeof(VkRenderPassCreateInfo::dependencyCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "dependencyCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRenderPassCreateInfo, pDependencies);
      uint32_t byteLength = sizeof(VkRenderPassCreateInfo::pDependencies);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pDependencies"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkRenderPassCreateInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkEventCreateInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkEventCreateInfo, sType);
      uint32_t byteLength = sizeof(VkEventCreateInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkEventCreateInfo, pNext);
      uint32_t byteLength = sizeof(VkEventCreateInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkEventCreateInfo, flags);
      uint32_t byteLength = sizeof(VkEventCreateInfo::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkEventCreateInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkFenceCreateInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkFenceCreateInfo, sType);
      uint32_t byteLength = sizeof(VkFenceCreateInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkFenceCreateInfo, pNext);
      uint32_t byteLength = sizeof(VkFenceCreateInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkFenceCreateInfo, flags);
      uint32_t byteLength = sizeof(VkFenceCreateInfo::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkFenceCreateInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceFeatures)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFeatures, robustBufferAccess);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFeatures::robustBufferAccess);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "robustBufferAccess"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFeatures, fullDrawIndexUint32);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFeatures::fullDrawIndexUint32);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "fullDrawIndexUint32"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFeatures, imageCubeArray);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFeatures::imageCubeArray);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "imageCubeArray"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFeatures, independentBlend);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFeatures::independentBlend);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "independentBlend"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFeatures, geometryShader);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFeatures::geometryShader);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "geometryShader"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFeatures, tessellationShader);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFeatures::tessellationShader);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "tessellationShader"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFeatures, sampleRateShading);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFeatures::sampleRateShading);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sampleRateShading"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFeatures, dualSrcBlend);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFeatures::dualSrcBlend);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "dualSrcBlend"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFeatures, logicOp);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFeatures::logicOp);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "logicOp"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFeatures, multiDrawIndirect);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFeatures::multiDrawIndirect);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "multiDrawIndirect"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFeatures, drawIndirectFirstInstance);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFeatures::drawIndirectFirstInstance);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "drawIndirectFirstInstance"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFeatures, depthClamp);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFeatures::depthClamp);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "depthClamp"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFeatures, depthBiasClamp);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFeatures::depthBiasClamp);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "depthBiasClamp"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFeatures, fillModeNonSolid);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFeatures::fillModeNonSolid);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "fillModeNonSolid"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFeatures, depthBounds);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFeatures::depthBounds);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "depthBounds"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFeatures, wideLines);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFeatures::wideLines);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "wideLines"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFeatures, largePoints);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFeatures::largePoints);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "largePoints"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFeatures, alphaToOne);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFeatures::alphaToOne);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "alphaToOne"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFeatures, multiViewport);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFeatures::multiViewport);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "multiViewport"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFeatures, samplerAnisotropy);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFeatures::samplerAnisotropy);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "samplerAnisotropy"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFeatures, textureCompressionETC2);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFeatures::textureCompressionETC2);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "textureCompressionETC2"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFeatures, textureCompressionASTC_LDR);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFeatures::textureCompressionASTC_LDR);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "textureCompressionASTC_LDR"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFeatures, textureCompressionBC);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFeatures::textureCompressionBC);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "textureCompressionBC"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFeatures, occlusionQueryPrecise);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFeatures::occlusionQueryPrecise);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "occlusionQueryPrecise"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFeatures, pipelineStatisticsQuery);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFeatures::pipelineStatisticsQuery);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pipelineStatisticsQuery"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFeatures, vertexPipelineStoresAndAtomics);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFeatures::vertexPipelineStoresAndAtomics);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "vertexPipelineStoresAndAtomics"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFeatures, fragmentStoresAndAtomics);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFeatures::fragmentStoresAndAtomics);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "fragmentStoresAndAtomics"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFeatures, shaderTessellationAndGeometryPointSize);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFeatures::shaderTessellationAndGeometryPointSize);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "shaderTessellationAndGeometryPointSize"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFeatures, shaderImageGatherExtended);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFeatures::shaderImageGatherExtended);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "shaderImageGatherExtended"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFeatures, shaderStorageImageExtendedFormats);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFeatures::shaderStorageImageExtendedFormats);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "shaderStorageImageExtendedFormats"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFeatures, shaderStorageImageMultisample);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFeatures::shaderStorageImageMultisample);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "shaderStorageImageMultisample"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFeatures, shaderStorageImageReadWithoutFormat);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFeatures::shaderStorageImageReadWithoutFormat);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "shaderStorageImageReadWithoutFormat"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFeatures, shaderStorageImageWriteWithoutFormat);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFeatures::shaderStorageImageWriteWithoutFormat);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "shaderStorageImageWriteWithoutFormat"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFeatures, shaderUniformBufferArrayDynamicIndexing);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFeatures::shaderUniformBufferArrayDynamicIndexing);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "shaderUniformBufferArrayDynamicIndexing"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFeatures, shaderSampledImageArrayDynamicIndexing);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFeatures::shaderSampledImageArrayDynamicIndexing);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "shaderSampledImageArrayDynamicIndexing"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFeatures, shaderStorageBufferArrayDynamicIndexing);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFeatures::shaderStorageBufferArrayDynamicIndexing);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "shaderStorageBufferArrayDynamicIndexing"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFeatures, shaderStorageImageArrayDynamicIndexing);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFeatures::shaderStorageImageArrayDynamicIndexing);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "shaderStorageImageArrayDynamicIndexing"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFeatures, shaderClipDistance);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFeatures::shaderClipDistance);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "shaderClipDistance"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFeatures, shaderCullDistance);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFeatures::shaderCullDistance);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "shaderCullDistance"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFeatures, shaderFloat64);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFeatures::shaderFloat64);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "shaderFloat64"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFeatures, shaderInt64);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFeatures::shaderInt64);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "shaderInt64"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFeatures, shaderInt16);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFeatures::shaderInt16);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "shaderInt16"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFeatures, shaderResourceResidency);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFeatures::shaderResourceResidency);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "shaderResourceResidency"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFeatures, shaderResourceMinLod);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFeatures::shaderResourceMinLod);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "shaderResourceMinLod"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFeatures, sparseBinding);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFeatures::sparseBinding);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sparseBinding"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFeatures, sparseResidencyBuffer);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFeatures::sparseResidencyBuffer);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sparseResidencyBuffer"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFeatures, sparseResidencyImage2D);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFeatures::sparseResidencyImage2D);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sparseResidencyImage2D"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFeatures, sparseResidencyImage3D);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFeatures::sparseResidencyImage3D);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sparseResidencyImage3D"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFeatures, sparseResidency2Samples);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFeatures::sparseResidency2Samples);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sparseResidency2Samples"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFeatures, sparseResidency4Samples);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFeatures::sparseResidency4Samples);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sparseResidency4Samples"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFeatures, sparseResidency8Samples);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFeatures::sparseResidency8Samples);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sparseResidency8Samples"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFeatures, sparseResidency16Samples);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFeatures::sparseResidency16Samples);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sparseResidency16Samples"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFeatures, sparseResidencyAliased);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFeatures::sparseResidencyAliased);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sparseResidencyAliased"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFeatures, variableMultisampleRate);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFeatures::variableMultisampleRate);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "variableMultisampleRate"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFeatures, inheritedQueries);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFeatures::inheritedQueries);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "inheritedQueries"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceFeatures"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceSparseProperties)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceSparseProperties, residencyStandard2DBlockShape);
      uint32_t byteLength = sizeof(VkPhysicalDeviceSparseProperties::residencyStandard2DBlockShape);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "residencyStandard2DBlockShape"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceSparseProperties, residencyStandard2DMultisampleBlockShape);
      uint32_t byteLength = sizeof(VkPhysicalDeviceSparseProperties::residencyStandard2DMultisampleBlockShape);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "residencyStandard2DMultisampleBlockShape"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceSparseProperties, residencyStandard3DBlockShape);
      uint32_t byteLength = sizeof(VkPhysicalDeviceSparseProperties::residencyStandard3DBlockShape);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "residencyStandard3DBlockShape"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceSparseProperties, residencyAlignedMipSize);
      uint32_t byteLength = sizeof(VkPhysicalDeviceSparseProperties::residencyAlignedMipSize);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "residencyAlignedMipSize"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceSparseProperties, residencyNonResidentStrict);
      uint32_t byteLength = sizeof(VkPhysicalDeviceSparseProperties::residencyNonResidentStrict);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "residencyNonResidentStrict"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceSparseProperties"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceLimits)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxImageDimension1D);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxImageDimension1D);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxImageDimension1D"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxImageDimension2D);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxImageDimension2D);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxImageDimension2D"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxImageDimension3D);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxImageDimension3D);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxImageDimension3D"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxImageDimensionCube);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxImageDimensionCube);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxImageDimensionCube"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxImageArrayLayers);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxImageArrayLayers);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxImageArrayLayers"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxTexelBufferElements);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxTexelBufferElements);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxTexelBufferElements"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxUniformBufferRange);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxUniformBufferRange);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxUniformBufferRange"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxStorageBufferRange);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxStorageBufferRange);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxStorageBufferRange"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxPushConstantsSize);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxPushConstantsSize);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxPushConstantsSize"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxMemoryAllocationCount);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxMemoryAllocationCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxMemoryAllocationCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxSamplerAllocationCount);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxSamplerAllocationCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxSamplerAllocationCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, bufferImageGranularity);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::bufferImageGranularity);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "bufferImageGranularity"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, sparseAddressSpaceSize);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::sparseAddressSpaceSize);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sparseAddressSpaceSize"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxBoundDescriptorSets);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxBoundDescriptorSets);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxBoundDescriptorSets"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxPerStageDescriptorSamplers);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxPerStageDescriptorSamplers);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxPerStageDescriptorSamplers"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxPerStageDescriptorUniformBuffers);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxPerStageDescriptorUniformBuffers);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxPerStageDescriptorUniformBuffers"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxPerStageDescriptorStorageBuffers);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxPerStageDescriptorStorageBuffers);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxPerStageDescriptorStorageBuffers"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxPerStageDescriptorSampledImages);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxPerStageDescriptorSampledImages);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxPerStageDescriptorSampledImages"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxPerStageDescriptorStorageImages);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxPerStageDescriptorStorageImages);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxPerStageDescriptorStorageImages"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxPerStageDescriptorInputAttachments);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxPerStageDescriptorInputAttachments);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxPerStageDescriptorInputAttachments"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxPerStageResources);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxPerStageResources);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxPerStageResources"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxDescriptorSetSamplers);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxDescriptorSetSamplers);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxDescriptorSetSamplers"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxDescriptorSetUniformBuffers);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxDescriptorSetUniformBuffers);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxDescriptorSetUniformBuffers"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxDescriptorSetUniformBuffersDynamic);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxDescriptorSetUniformBuffersDynamic);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxDescriptorSetUniformBuffersDynamic"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxDescriptorSetStorageBuffers);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxDescriptorSetStorageBuffers);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxDescriptorSetStorageBuffers"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxDescriptorSetStorageBuffersDynamic);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxDescriptorSetStorageBuffersDynamic);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxDescriptorSetStorageBuffersDynamic"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxDescriptorSetSampledImages);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxDescriptorSetSampledImages);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxDescriptorSetSampledImages"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxDescriptorSetStorageImages);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxDescriptorSetStorageImages);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxDescriptorSetStorageImages"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxDescriptorSetInputAttachments);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxDescriptorSetInputAttachments);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxDescriptorSetInputAttachments"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxVertexInputAttributes);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxVertexInputAttributes);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxVertexInputAttributes"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxVertexInputBindings);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxVertexInputBindings);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxVertexInputBindings"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxVertexInputAttributeOffset);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxVertexInputAttributeOffset);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxVertexInputAttributeOffset"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxVertexInputBindingStride);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxVertexInputBindingStride);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxVertexInputBindingStride"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxVertexOutputComponents);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxVertexOutputComponents);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxVertexOutputComponents"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxTessellationGenerationLevel);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxTessellationGenerationLevel);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxTessellationGenerationLevel"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxTessellationPatchSize);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxTessellationPatchSize);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxTessellationPatchSize"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxTessellationControlPerVertexInputComponents);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxTessellationControlPerVertexInputComponents);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxTessellationControlPerVertexInputComponents"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxTessellationControlPerVertexOutputComponents);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxTessellationControlPerVertexOutputComponents);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxTessellationControlPerVertexOutputComponents"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxTessellationControlPerPatchOutputComponents);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxTessellationControlPerPatchOutputComponents);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxTessellationControlPerPatchOutputComponents"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxTessellationControlTotalOutputComponents);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxTessellationControlTotalOutputComponents);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxTessellationControlTotalOutputComponents"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxTessellationEvaluationInputComponents);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxTessellationEvaluationInputComponents);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxTessellationEvaluationInputComponents"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxTessellationEvaluationOutputComponents);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxTessellationEvaluationOutputComponents);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxTessellationEvaluationOutputComponents"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxGeometryShaderInvocations);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxGeometryShaderInvocations);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxGeometryShaderInvocations"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxGeometryInputComponents);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxGeometryInputComponents);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxGeometryInputComponents"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxGeometryOutputComponents);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxGeometryOutputComponents);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxGeometryOutputComponents"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxGeometryOutputVertices);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxGeometryOutputVertices);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxGeometryOutputVertices"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxGeometryTotalOutputComponents);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxGeometryTotalOutputComponents);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxGeometryTotalOutputComponents"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxFragmentInputComponents);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxFragmentInputComponents);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxFragmentInputComponents"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxFragmentOutputAttachments);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxFragmentOutputAttachments);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxFragmentOutputAttachments"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxFragmentDualSrcAttachments);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxFragmentDualSrcAttachments);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxFragmentDualSrcAttachments"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxFragmentCombinedOutputResources);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxFragmentCombinedOutputResources);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxFragmentCombinedOutputResources"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxComputeSharedMemorySize);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxComputeSharedMemorySize);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxComputeSharedMemorySize"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxComputeWorkGroupCount);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxComputeWorkGroupCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxComputeWorkGroupCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxComputeWorkGroupInvocations);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxComputeWorkGroupInvocations);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxComputeWorkGroupInvocations"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxComputeWorkGroupSize);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxComputeWorkGroupSize);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxComputeWorkGroupSize"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, subPixelPrecisionBits);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::subPixelPrecisionBits);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "subPixelPrecisionBits"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, subTexelPrecisionBits);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::subTexelPrecisionBits);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "subTexelPrecisionBits"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, mipmapPrecisionBits);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::mipmapPrecisionBits);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "mipmapPrecisionBits"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxDrawIndexedIndexValue);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxDrawIndexedIndexValue);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxDrawIndexedIndexValue"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxDrawIndirectCount);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxDrawIndirectCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxDrawIndirectCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxSamplerLodBias);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxSamplerLodBias);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxSamplerLodBias"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxSamplerAnisotropy);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxSamplerAnisotropy);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxSamplerAnisotropy"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxViewports);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxViewports);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxViewports"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxViewportDimensions);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxViewportDimensions);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxViewportDimensions"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, viewportBoundsRange);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::viewportBoundsRange);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "viewportBoundsRange"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, viewportSubPixelBits);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::viewportSubPixelBits);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "viewportSubPixelBits"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, minMemoryMapAlignment);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::minMemoryMapAlignment);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "minMemoryMapAlignment"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, minTexelBufferOffsetAlignment);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::minTexelBufferOffsetAlignment);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "minTexelBufferOffsetAlignment"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, minUniformBufferOffsetAlignment);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::minUniformBufferOffsetAlignment);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "minUniformBufferOffsetAlignment"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, minStorageBufferOffsetAlignment);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::minStorageBufferOffsetAlignment);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "minStorageBufferOffsetAlignment"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, minTexelOffset);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::minTexelOffset);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "minTexelOffset"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxTexelOffset);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxTexelOffset);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxTexelOffset"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, minTexelGatherOffset);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::minTexelGatherOffset);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "minTexelGatherOffset"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxTexelGatherOffset);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxTexelGatherOffset);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxTexelGatherOffset"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, minInterpolationOffset);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::minInterpolationOffset);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "minInterpolationOffset"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxInterpolationOffset);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxInterpolationOffset);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxInterpolationOffset"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, subPixelInterpolationOffsetBits);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::subPixelInterpolationOffsetBits);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "subPixelInterpolationOffsetBits"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxFramebufferWidth);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxFramebufferWidth);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxFramebufferWidth"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxFramebufferHeight);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxFramebufferHeight);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxFramebufferHeight"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxFramebufferLayers);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxFramebufferLayers);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxFramebufferLayers"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, framebufferColorSampleCounts);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::framebufferColorSampleCounts);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "framebufferColorSampleCounts"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, framebufferDepthSampleCounts);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::framebufferDepthSampleCounts);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "framebufferDepthSampleCounts"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, framebufferStencilSampleCounts);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::framebufferStencilSampleCounts);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "framebufferStencilSampleCounts"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, framebufferNoAttachmentsSampleCounts);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::framebufferNoAttachmentsSampleCounts);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "framebufferNoAttachmentsSampleCounts"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxColorAttachments);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxColorAttachments);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxColorAttachments"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, sampledImageColorSampleCounts);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::sampledImageColorSampleCounts);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sampledImageColorSampleCounts"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, sampledImageIntegerSampleCounts);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::sampledImageIntegerSampleCounts);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sampledImageIntegerSampleCounts"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, sampledImageDepthSampleCounts);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::sampledImageDepthSampleCounts);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sampledImageDepthSampleCounts"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, sampledImageStencilSampleCounts);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::sampledImageStencilSampleCounts);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sampledImageStencilSampleCounts"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, storageImageSampleCounts);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::storageImageSampleCounts);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "storageImageSampleCounts"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxSampleMaskWords);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxSampleMaskWords);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxSampleMaskWords"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, timestampComputeAndGraphics);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::timestampComputeAndGraphics);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "timestampComputeAndGraphics"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, timestampPeriod);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::timestampPeriod);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "timestampPeriod"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxClipDistances);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxClipDistances);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxClipDistances"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxCullDistances);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxCullDistances);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxCullDistances"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, maxCombinedClipAndCullDistances);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::maxCombinedClipAndCullDistances);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxCombinedClipAndCullDistances"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, discreteQueuePriorities);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::discreteQueuePriorities);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "discreteQueuePriorities"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, pointSizeRange);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::pointSizeRange);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pointSizeRange"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, lineWidthRange);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::lineWidthRange);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "lineWidthRange"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, pointSizeGranularity);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::pointSizeGranularity);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pointSizeGranularity"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, lineWidthGranularity);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::lineWidthGranularity);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "lineWidthGranularity"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, strictLines);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::strictLines);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "strictLines"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, standardSampleLocations);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::standardSampleLocations);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "standardSampleLocations"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, optimalBufferCopyOffsetAlignment);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::optimalBufferCopyOffsetAlignment);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "optimalBufferCopyOffsetAlignment"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, optimalBufferCopyRowPitchAlignment);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::optimalBufferCopyRowPitchAlignment);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "optimalBufferCopyRowPitchAlignment"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceLimits, nonCoherentAtomSize);
      uint32_t byteLength = sizeof(VkPhysicalDeviceLimits::nonCoherentAtomSize);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "nonCoherentAtomSize"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceLimits"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkSemaphoreCreateInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSemaphoreCreateInfo, sType);
      uint32_t byteLength = sizeof(VkSemaphoreCreateInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSemaphoreCreateInfo, pNext);
      uint32_t byteLength = sizeof(VkSemaphoreCreateInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSemaphoreCreateInfo, flags);
      uint32_t byteLength = sizeof(VkSemaphoreCreateInfo::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkSemaphoreCreateInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkQueryPoolCreateInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkQueryPoolCreateInfo, sType);
      uint32_t byteLength = sizeof(VkQueryPoolCreateInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkQueryPoolCreateInfo, pNext);
      uint32_t byteLength = sizeof(VkQueryPoolCreateInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkQueryPoolCreateInfo, flags);
      uint32_t byteLength = sizeof(VkQueryPoolCreateInfo::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkQueryPoolCreateInfo, queryType);
      uint32_t byteLength = sizeof(VkQueryPoolCreateInfo::queryType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "queryType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkQueryPoolCreateInfo, queryCount);
      uint32_t byteLength = sizeof(VkQueryPoolCreateInfo::queryCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "queryCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkQueryPoolCreateInfo, pipelineStatistics);
      uint32_t byteLength = sizeof(VkQueryPoolCreateInfo::pipelineStatistics);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pipelineStatistics"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkQueryPoolCreateInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkFramebufferCreateInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkFramebufferCreateInfo, sType);
      uint32_t byteLength = sizeof(VkFramebufferCreateInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkFramebufferCreateInfo, pNext);
      uint32_t byteLength = sizeof(VkFramebufferCreateInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkFramebufferCreateInfo, flags);
      uint32_t byteLength = sizeof(VkFramebufferCreateInfo::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkFramebufferCreateInfo, renderPass);
      uint32_t byteLength = sizeof(VkFramebufferCreateInfo::renderPass);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "renderPass"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkFramebufferCreateInfo, attachmentCount);
      uint32_t byteLength = sizeof(VkFramebufferCreateInfo::attachmentCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "attachmentCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkFramebufferCreateInfo, pAttachments);
      uint32_t byteLength = sizeof(VkFramebufferCreateInfo::pAttachments);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pAttachments"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkFramebufferCreateInfo, width);
      uint32_t byteLength = sizeof(VkFramebufferCreateInfo::width);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "width"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkFramebufferCreateInfo, height);
      uint32_t byteLength = sizeof(VkFramebufferCreateInfo::height);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "height"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkFramebufferCreateInfo, layers);
      uint32_t byteLength = sizeof(VkFramebufferCreateInfo::layers);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "layers"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkFramebufferCreateInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDrawIndirectCommand)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDrawIndirectCommand, vertexCount);
      uint32_t byteLength = sizeof(VkDrawIndirectCommand::vertexCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "vertexCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDrawIndirectCommand, instanceCount);
      uint32_t byteLength = sizeof(VkDrawIndirectCommand::instanceCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "instanceCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDrawIndirectCommand, firstVertex);
      uint32_t byteLength = sizeof(VkDrawIndirectCommand::firstVertex);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "firstVertex"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDrawIndirectCommand, firstInstance);
      uint32_t byteLength = sizeof(VkDrawIndirectCommand::firstInstance);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "firstInstance"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDrawIndirectCommand"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDrawIndexedIndirectCommand)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDrawIndexedIndirectCommand, indexCount);
      uint32_t byteLength = sizeof(VkDrawIndexedIndirectCommand::indexCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "indexCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDrawIndexedIndirectCommand, instanceCount);
      uint32_t byteLength = sizeof(VkDrawIndexedIndirectCommand::instanceCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "instanceCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDrawIndexedIndirectCommand, firstIndex);
      uint32_t byteLength = sizeof(VkDrawIndexedIndirectCommand::firstIndex);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "firstIndex"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDrawIndexedIndirectCommand, vertexOffset);
      uint32_t byteLength = sizeof(VkDrawIndexedIndirectCommand::vertexOffset);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "vertexOffset"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDrawIndexedIndirectCommand, firstInstance);
      uint32_t byteLength = sizeof(VkDrawIndexedIndirectCommand::firstInstance);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "firstInstance"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDrawIndexedIndirectCommand"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDispatchIndirectCommand)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDispatchIndirectCommand, x);
      uint32_t byteLength = sizeof(VkDispatchIndirectCommand::x);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "x"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDispatchIndirectCommand, y);
      uint32_t byteLength = sizeof(VkDispatchIndirectCommand::y);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "y"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDispatchIndirectCommand, z);
      uint32_t byteLength = sizeof(VkDispatchIndirectCommand::z);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "z"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDispatchIndirectCommand"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkSubmitInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSubmitInfo, sType);
      uint32_t byteLength = sizeof(VkSubmitInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSubmitInfo, pNext);
      uint32_t byteLength = sizeof(VkSubmitInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSubmitInfo, waitSemaphoreCount);
      uint32_t byteLength = sizeof(VkSubmitInfo::waitSemaphoreCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "waitSemaphoreCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSubmitInfo, pWaitSemaphores);
      uint32_t byteLength = sizeof(VkSubmitInfo::pWaitSemaphores);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pWaitSemaphores"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSubmitInfo, pWaitDstStageMask);
      uint32_t byteLength = sizeof(VkSubmitInfo::pWaitDstStageMask);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pWaitDstStageMask"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSubmitInfo, commandBufferCount);
      uint32_t byteLength = sizeof(VkSubmitInfo::commandBufferCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "commandBufferCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSubmitInfo, pCommandBuffers);
      uint32_t byteLength = sizeof(VkSubmitInfo::pCommandBuffers);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pCommandBuffers"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSubmitInfo, signalSemaphoreCount);
      uint32_t byteLength = sizeof(VkSubmitInfo::signalSemaphoreCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "signalSemaphoreCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSubmitInfo, pSignalSemaphores);
      uint32_t byteLength = sizeof(VkSubmitInfo::pSignalSemaphores);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pSignalSemaphores"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkSubmitInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDisplayPropertiesKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDisplayPropertiesKHR, display);
      uint32_t byteLength = sizeof(VkDisplayPropertiesKHR::display);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "display"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDisplayPropertiesKHR, displayName);
      uint32_t byteLength = sizeof(VkDisplayPropertiesKHR::displayName);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "displayName"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDisplayPropertiesKHR, physicalDimensions);
      uint32_t byteLength = sizeof(VkDisplayPropertiesKHR::physicalDimensions);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "physicalDimensions"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDisplayPropertiesKHR, physicalResolution);
      uint32_t byteLength = sizeof(VkDisplayPropertiesKHR::physicalResolution);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "physicalResolution"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDisplayPropertiesKHR, supportedTransforms);
      uint32_t byteLength = sizeof(VkDisplayPropertiesKHR::supportedTransforms);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "supportedTransforms"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDisplayPropertiesKHR, planeReorderPossible);
      uint32_t byteLength = sizeof(VkDisplayPropertiesKHR::planeReorderPossible);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "planeReorderPossible"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDisplayPropertiesKHR, persistentContent);
      uint32_t byteLength = sizeof(VkDisplayPropertiesKHR::persistentContent);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "persistentContent"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDisplayPropertiesKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDisplayPlanePropertiesKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDisplayPlanePropertiesKHR, currentDisplay);
      uint32_t byteLength = sizeof(VkDisplayPlanePropertiesKHR::currentDisplay);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "currentDisplay"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDisplayPlanePropertiesKHR, currentStackIndex);
      uint32_t byteLength = sizeof(VkDisplayPlanePropertiesKHR::currentStackIndex);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "currentStackIndex"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDisplayPlanePropertiesKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDisplayModeParametersKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDisplayModeParametersKHR, visibleRegion);
      uint32_t byteLength = sizeof(VkDisplayModeParametersKHR::visibleRegion);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "visibleRegion"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDisplayModeParametersKHR, refreshRate);
      uint32_t byteLength = sizeof(VkDisplayModeParametersKHR::refreshRate);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "refreshRate"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDisplayModeParametersKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDisplayModePropertiesKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDisplayModePropertiesKHR, displayMode);
      uint32_t byteLength = sizeof(VkDisplayModePropertiesKHR::displayMode);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "displayMode"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDisplayModePropertiesKHR, parameters);
      uint32_t byteLength = sizeof(VkDisplayModePropertiesKHR::parameters);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "parameters"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDisplayModePropertiesKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDisplayModeCreateInfoKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDisplayModeCreateInfoKHR, sType);
      uint32_t byteLength = sizeof(VkDisplayModeCreateInfoKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDisplayModeCreateInfoKHR, pNext);
      uint32_t byteLength = sizeof(VkDisplayModeCreateInfoKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDisplayModeCreateInfoKHR, flags);
      uint32_t byteLength = sizeof(VkDisplayModeCreateInfoKHR::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDisplayModeCreateInfoKHR, parameters);
      uint32_t byteLength = sizeof(VkDisplayModeCreateInfoKHR::parameters);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "parameters"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDisplayModeCreateInfoKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDisplayPlaneCapabilitiesKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDisplayPlaneCapabilitiesKHR, supportedAlpha);
      uint32_t byteLength = sizeof(VkDisplayPlaneCapabilitiesKHR::supportedAlpha);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "supportedAlpha"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDisplayPlaneCapabilitiesKHR, minSrcPosition);
      uint32_t byteLength = sizeof(VkDisplayPlaneCapabilitiesKHR::minSrcPosition);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "minSrcPosition"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDisplayPlaneCapabilitiesKHR, maxSrcPosition);
      uint32_t byteLength = sizeof(VkDisplayPlaneCapabilitiesKHR::maxSrcPosition);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxSrcPosition"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDisplayPlaneCapabilitiesKHR, minSrcExtent);
      uint32_t byteLength = sizeof(VkDisplayPlaneCapabilitiesKHR::minSrcExtent);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "minSrcExtent"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDisplayPlaneCapabilitiesKHR, maxSrcExtent);
      uint32_t byteLength = sizeof(VkDisplayPlaneCapabilitiesKHR::maxSrcExtent);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxSrcExtent"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDisplayPlaneCapabilitiesKHR, minDstPosition);
      uint32_t byteLength = sizeof(VkDisplayPlaneCapabilitiesKHR::minDstPosition);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "minDstPosition"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDisplayPlaneCapabilitiesKHR, maxDstPosition);
      uint32_t byteLength = sizeof(VkDisplayPlaneCapabilitiesKHR::maxDstPosition);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxDstPosition"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDisplayPlaneCapabilitiesKHR, minDstExtent);
      uint32_t byteLength = sizeof(VkDisplayPlaneCapabilitiesKHR::minDstExtent);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "minDstExtent"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDisplayPlaneCapabilitiesKHR, maxDstExtent);
      uint32_t byteLength = sizeof(VkDisplayPlaneCapabilitiesKHR::maxDstExtent);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxDstExtent"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDisplayPlaneCapabilitiesKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDisplaySurfaceCreateInfoKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDisplaySurfaceCreateInfoKHR, sType);
      uint32_t byteLength = sizeof(VkDisplaySurfaceCreateInfoKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDisplaySurfaceCreateInfoKHR, pNext);
      uint32_t byteLength = sizeof(VkDisplaySurfaceCreateInfoKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDisplaySurfaceCreateInfoKHR, flags);
      uint32_t byteLength = sizeof(VkDisplaySurfaceCreateInfoKHR::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDisplaySurfaceCreateInfoKHR, displayMode);
      uint32_t byteLength = sizeof(VkDisplaySurfaceCreateInfoKHR::displayMode);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "displayMode"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDisplaySurfaceCreateInfoKHR, planeIndex);
      uint32_t byteLength = sizeof(VkDisplaySurfaceCreateInfoKHR::planeIndex);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "planeIndex"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDisplaySurfaceCreateInfoKHR, planeStackIndex);
      uint32_t byteLength = sizeof(VkDisplaySurfaceCreateInfoKHR::planeStackIndex);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "planeStackIndex"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDisplaySurfaceCreateInfoKHR, transform);
      uint32_t byteLength = sizeof(VkDisplaySurfaceCreateInfoKHR::transform);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "transform"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDisplaySurfaceCreateInfoKHR, globalAlpha);
      uint32_t byteLength = sizeof(VkDisplaySurfaceCreateInfoKHR::globalAlpha);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "globalAlpha"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDisplaySurfaceCreateInfoKHR, alphaMode);
      uint32_t byteLength = sizeof(VkDisplaySurfaceCreateInfoKHR::alphaMode);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "alphaMode"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDisplaySurfaceCreateInfoKHR, imageExtent);
      uint32_t byteLength = sizeof(VkDisplaySurfaceCreateInfoKHR::imageExtent);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "imageExtent"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDisplaySurfaceCreateInfoKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDisplayPresentInfoKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDisplayPresentInfoKHR, sType);
      uint32_t byteLength = sizeof(VkDisplayPresentInfoKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDisplayPresentInfoKHR, pNext);
      uint32_t byteLength = sizeof(VkDisplayPresentInfoKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDisplayPresentInfoKHR, srcRect);
      uint32_t byteLength = sizeof(VkDisplayPresentInfoKHR::srcRect);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "srcRect"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDisplayPresentInfoKHR, dstRect);
      uint32_t byteLength = sizeof(VkDisplayPresentInfoKHR::dstRect);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "dstRect"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDisplayPresentInfoKHR, persistent);
      uint32_t byteLength = sizeof(VkDisplayPresentInfoKHR::persistent);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "persistent"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDisplayPresentInfoKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkSurfaceCapabilitiesKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSurfaceCapabilitiesKHR, minImageCount);
      uint32_t byteLength = sizeof(VkSurfaceCapabilitiesKHR::minImageCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "minImageCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSurfaceCapabilitiesKHR, maxImageCount);
      uint32_t byteLength = sizeof(VkSurfaceCapabilitiesKHR::maxImageCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxImageCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSurfaceCapabilitiesKHR, currentExtent);
      uint32_t byteLength = sizeof(VkSurfaceCapabilitiesKHR::currentExtent);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "currentExtent"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSurfaceCapabilitiesKHR, minImageExtent);
      uint32_t byteLength = sizeof(VkSurfaceCapabilitiesKHR::minImageExtent);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "minImageExtent"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSurfaceCapabilitiesKHR, maxImageExtent);
      uint32_t byteLength = sizeof(VkSurfaceCapabilitiesKHR::maxImageExtent);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxImageExtent"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSurfaceCapabilitiesKHR, maxImageArrayLayers);
      uint32_t byteLength = sizeof(VkSurfaceCapabilitiesKHR::maxImageArrayLayers);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxImageArrayLayers"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSurfaceCapabilitiesKHR, supportedTransforms);
      uint32_t byteLength = sizeof(VkSurfaceCapabilitiesKHR::supportedTransforms);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "supportedTransforms"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSurfaceCapabilitiesKHR, currentTransform);
      uint32_t byteLength = sizeof(VkSurfaceCapabilitiesKHR::currentTransform);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "currentTransform"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSurfaceCapabilitiesKHR, supportedCompositeAlpha);
      uint32_t byteLength = sizeof(VkSurfaceCapabilitiesKHR::supportedCompositeAlpha);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "supportedCompositeAlpha"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSurfaceCapabilitiesKHR, supportedUsageFlags);
      uint32_t byteLength = sizeof(VkSurfaceCapabilitiesKHR::supportedUsageFlags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "supportedUsageFlags"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkSurfaceCapabilitiesKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkWin32SurfaceCreateInfoKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkWin32SurfaceCreateInfoKHR, sType);
      uint32_t byteLength = sizeof(VkWin32SurfaceCreateInfoKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkWin32SurfaceCreateInfoKHR, pNext);
      uint32_t byteLength = sizeof(VkWin32SurfaceCreateInfoKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkWin32SurfaceCreateInfoKHR, flags);
      uint32_t byteLength = sizeof(VkWin32SurfaceCreateInfoKHR::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkWin32SurfaceCreateInfoKHR, hinstance);
      uint32_t byteLength = sizeof(VkWin32SurfaceCreateInfoKHR::hinstance);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "hinstance"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkWin32SurfaceCreateInfoKHR, hwnd);
      uint32_t byteLength = sizeof(VkWin32SurfaceCreateInfoKHR::hwnd);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "hwnd"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkWin32SurfaceCreateInfoKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkSurfaceFormatKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSurfaceFormatKHR, format);
      uint32_t byteLength = sizeof(VkSurfaceFormatKHR::format);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "format"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSurfaceFormatKHR, colorSpace);
      uint32_t byteLength = sizeof(VkSurfaceFormatKHR::colorSpace);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "colorSpace"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkSurfaceFormatKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkSwapchainCreateInfoKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSwapchainCreateInfoKHR, sType);
      uint32_t byteLength = sizeof(VkSwapchainCreateInfoKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSwapchainCreateInfoKHR, pNext);
      uint32_t byteLength = sizeof(VkSwapchainCreateInfoKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSwapchainCreateInfoKHR, flags);
      uint32_t byteLength = sizeof(VkSwapchainCreateInfoKHR::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSwapchainCreateInfoKHR, surface);
      uint32_t byteLength = sizeof(VkSwapchainCreateInfoKHR::surface);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "surface"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSwapchainCreateInfoKHR, minImageCount);
      uint32_t byteLength = sizeof(VkSwapchainCreateInfoKHR::minImageCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "minImageCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSwapchainCreateInfoKHR, imageFormat);
      uint32_t byteLength = sizeof(VkSwapchainCreateInfoKHR::imageFormat);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "imageFormat"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSwapchainCreateInfoKHR, imageColorSpace);
      uint32_t byteLength = sizeof(VkSwapchainCreateInfoKHR::imageColorSpace);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "imageColorSpace"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSwapchainCreateInfoKHR, imageExtent);
      uint32_t byteLength = sizeof(VkSwapchainCreateInfoKHR::imageExtent);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "imageExtent"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSwapchainCreateInfoKHR, imageArrayLayers);
      uint32_t byteLength = sizeof(VkSwapchainCreateInfoKHR::imageArrayLayers);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "imageArrayLayers"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSwapchainCreateInfoKHR, imageUsage);
      uint32_t byteLength = sizeof(VkSwapchainCreateInfoKHR::imageUsage);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "imageUsage"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSwapchainCreateInfoKHR, imageSharingMode);
      uint32_t byteLength = sizeof(VkSwapchainCreateInfoKHR::imageSharingMode);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "imageSharingMode"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSwapchainCreateInfoKHR, queueFamilyIndexCount);
      uint32_t byteLength = sizeof(VkSwapchainCreateInfoKHR::queueFamilyIndexCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "queueFamilyIndexCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSwapchainCreateInfoKHR, pQueueFamilyIndices);
      uint32_t byteLength = sizeof(VkSwapchainCreateInfoKHR::pQueueFamilyIndices);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pQueueFamilyIndices"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSwapchainCreateInfoKHR, preTransform);
      uint32_t byteLength = sizeof(VkSwapchainCreateInfoKHR::preTransform);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "preTransform"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSwapchainCreateInfoKHR, compositeAlpha);
      uint32_t byteLength = sizeof(VkSwapchainCreateInfoKHR::compositeAlpha);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "compositeAlpha"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSwapchainCreateInfoKHR, presentMode);
      uint32_t byteLength = sizeof(VkSwapchainCreateInfoKHR::presentMode);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "presentMode"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSwapchainCreateInfoKHR, clipped);
      uint32_t byteLength = sizeof(VkSwapchainCreateInfoKHR::clipped);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "clipped"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSwapchainCreateInfoKHR, oldSwapchain);
      uint32_t byteLength = sizeof(VkSwapchainCreateInfoKHR::oldSwapchain);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "oldSwapchain"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkSwapchainCreateInfoKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPresentInfoKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPresentInfoKHR, sType);
      uint32_t byteLength = sizeof(VkPresentInfoKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPresentInfoKHR, pNext);
      uint32_t byteLength = sizeof(VkPresentInfoKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPresentInfoKHR, waitSemaphoreCount);
      uint32_t byteLength = sizeof(VkPresentInfoKHR::waitSemaphoreCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "waitSemaphoreCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPresentInfoKHR, pWaitSemaphores);
      uint32_t byteLength = sizeof(VkPresentInfoKHR::pWaitSemaphores);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pWaitSemaphores"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPresentInfoKHR, swapchainCount);
      uint32_t byteLength = sizeof(VkPresentInfoKHR::swapchainCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "swapchainCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPresentInfoKHR, pSwapchains);
      uint32_t byteLength = sizeof(VkPresentInfoKHR::pSwapchains);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pSwapchains"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPresentInfoKHR, pImageIndices);
      uint32_t byteLength = sizeof(VkPresentInfoKHR::pImageIndices);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pImageIndices"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPresentInfoKHR, pResults);
      uint32_t byteLength = sizeof(VkPresentInfoKHR::pResults);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pResults"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPresentInfoKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDebugReportCallbackCreateInfoEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDebugReportCallbackCreateInfoEXT, sType);
      uint32_t byteLength = sizeof(VkDebugReportCallbackCreateInfoEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDebugReportCallbackCreateInfoEXT, pNext);
      uint32_t byteLength = sizeof(VkDebugReportCallbackCreateInfoEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDebugReportCallbackCreateInfoEXT, flags);
      uint32_t byteLength = sizeof(VkDebugReportCallbackCreateInfoEXT::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDebugReportCallbackCreateInfoEXT, pfnCallback);
      uint32_t byteLength = sizeof(VkDebugReportCallbackCreateInfoEXT::pfnCallback);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pfnCallback"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDebugReportCallbackCreateInfoEXT, pUserData);
      uint32_t byteLength = sizeof(VkDebugReportCallbackCreateInfoEXT::pUserData);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pUserData"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDebugReportCallbackCreateInfoEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkValidationFlagsEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkValidationFlagsEXT, sType);
      uint32_t byteLength = sizeof(VkValidationFlagsEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkValidationFlagsEXT, pNext);
      uint32_t byteLength = sizeof(VkValidationFlagsEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkValidationFlagsEXT, disabledValidationCheckCount);
      uint32_t byteLength = sizeof(VkValidationFlagsEXT::disabledValidationCheckCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "disabledValidationCheckCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkValidationFlagsEXT, pDisabledValidationChecks);
      uint32_t byteLength = sizeof(VkValidationFlagsEXT::pDisabledValidationChecks);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pDisabledValidationChecks"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkValidationFlagsEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkValidationFeaturesEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkValidationFeaturesEXT, sType);
      uint32_t byteLength = sizeof(VkValidationFeaturesEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkValidationFeaturesEXT, pNext);
      uint32_t byteLength = sizeof(VkValidationFeaturesEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkValidationFeaturesEXT, enabledValidationFeatureCount);
      uint32_t byteLength = sizeof(VkValidationFeaturesEXT::enabledValidationFeatureCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "enabledValidationFeatureCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkValidationFeaturesEXT, pEnabledValidationFeatures);
      uint32_t byteLength = sizeof(VkValidationFeaturesEXT::pEnabledValidationFeatures);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pEnabledValidationFeatures"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkValidationFeaturesEXT, disabledValidationFeatureCount);
      uint32_t byteLength = sizeof(VkValidationFeaturesEXT::disabledValidationFeatureCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "disabledValidationFeatureCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkValidationFeaturesEXT, pDisabledValidationFeatures);
      uint32_t byteLength = sizeof(VkValidationFeaturesEXT::pDisabledValidationFeatures);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pDisabledValidationFeatures"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkValidationFeaturesEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPipelineRasterizationStateRasterizationOrderAMD)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineRasterizationStateRasterizationOrderAMD, sType);
      uint32_t byteLength = sizeof(VkPipelineRasterizationStateRasterizationOrderAMD::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineRasterizationStateRasterizationOrderAMD, pNext);
      uint32_t byteLength = sizeof(VkPipelineRasterizationStateRasterizationOrderAMD::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineRasterizationStateRasterizationOrderAMD, rasterizationOrder);
      uint32_t byteLength = sizeof(VkPipelineRasterizationStateRasterizationOrderAMD::rasterizationOrder);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "rasterizationOrder"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPipelineRasterizationStateRasterizationOrderAMD"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDebugMarkerObjectNameInfoEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDebugMarkerObjectNameInfoEXT, sType);
      uint32_t byteLength = sizeof(VkDebugMarkerObjectNameInfoEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDebugMarkerObjectNameInfoEXT, pNext);
      uint32_t byteLength = sizeof(VkDebugMarkerObjectNameInfoEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDebugMarkerObjectNameInfoEXT, objectType);
      uint32_t byteLength = sizeof(VkDebugMarkerObjectNameInfoEXT::objectType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "objectType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDebugMarkerObjectNameInfoEXT, object);
      uint32_t byteLength = sizeof(VkDebugMarkerObjectNameInfoEXT::object);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "object"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDebugMarkerObjectNameInfoEXT, pObjectName);
      uint32_t byteLength = sizeof(VkDebugMarkerObjectNameInfoEXT::pObjectName);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pObjectName"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDebugMarkerObjectNameInfoEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDebugMarkerObjectTagInfoEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDebugMarkerObjectTagInfoEXT, sType);
      uint32_t byteLength = sizeof(VkDebugMarkerObjectTagInfoEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDebugMarkerObjectTagInfoEXT, pNext);
      uint32_t byteLength = sizeof(VkDebugMarkerObjectTagInfoEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDebugMarkerObjectTagInfoEXT, objectType);
      uint32_t byteLength = sizeof(VkDebugMarkerObjectTagInfoEXT::objectType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "objectType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDebugMarkerObjectTagInfoEXT, object);
      uint32_t byteLength = sizeof(VkDebugMarkerObjectTagInfoEXT::object);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "object"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDebugMarkerObjectTagInfoEXT, tagName);
      uint32_t byteLength = sizeof(VkDebugMarkerObjectTagInfoEXT::tagName);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "tagName"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDebugMarkerObjectTagInfoEXT, tagSize);
      uint32_t byteLength = sizeof(VkDebugMarkerObjectTagInfoEXT::tagSize);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "tagSize"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDebugMarkerObjectTagInfoEXT, pTag);
      uint32_t byteLength = sizeof(VkDebugMarkerObjectTagInfoEXT::pTag);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pTag"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDebugMarkerObjectTagInfoEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDebugMarkerMarkerInfoEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDebugMarkerMarkerInfoEXT, sType);
      uint32_t byteLength = sizeof(VkDebugMarkerMarkerInfoEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDebugMarkerMarkerInfoEXT, pNext);
      uint32_t byteLength = sizeof(VkDebugMarkerMarkerInfoEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDebugMarkerMarkerInfoEXT, pMarkerName);
      uint32_t byteLength = sizeof(VkDebugMarkerMarkerInfoEXT::pMarkerName);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pMarkerName"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDebugMarkerMarkerInfoEXT, color);
      uint32_t byteLength = sizeof(VkDebugMarkerMarkerInfoEXT::color);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "color"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDebugMarkerMarkerInfoEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDedicatedAllocationImageCreateInfoNV)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDedicatedAllocationImageCreateInfoNV, sType);
      uint32_t byteLength = sizeof(VkDedicatedAllocationImageCreateInfoNV::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDedicatedAllocationImageCreateInfoNV, pNext);
      uint32_t byteLength = sizeof(VkDedicatedAllocationImageCreateInfoNV::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDedicatedAllocationImageCreateInfoNV, dedicatedAllocation);
      uint32_t byteLength = sizeof(VkDedicatedAllocationImageCreateInfoNV::dedicatedAllocation);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "dedicatedAllocation"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDedicatedAllocationImageCreateInfoNV"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDedicatedAllocationBufferCreateInfoNV)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDedicatedAllocationBufferCreateInfoNV, sType);
      uint32_t byteLength = sizeof(VkDedicatedAllocationBufferCreateInfoNV::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDedicatedAllocationBufferCreateInfoNV, pNext);
      uint32_t byteLength = sizeof(VkDedicatedAllocationBufferCreateInfoNV::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDedicatedAllocationBufferCreateInfoNV, dedicatedAllocation);
      uint32_t byteLength = sizeof(VkDedicatedAllocationBufferCreateInfoNV::dedicatedAllocation);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "dedicatedAllocation"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDedicatedAllocationBufferCreateInfoNV"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDedicatedAllocationMemoryAllocateInfoNV)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDedicatedAllocationMemoryAllocateInfoNV, sType);
      uint32_t byteLength = sizeof(VkDedicatedAllocationMemoryAllocateInfoNV::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDedicatedAllocationMemoryAllocateInfoNV, pNext);
      uint32_t byteLength = sizeof(VkDedicatedAllocationMemoryAllocateInfoNV::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDedicatedAllocationMemoryAllocateInfoNV, image);
      uint32_t byteLength = sizeof(VkDedicatedAllocationMemoryAllocateInfoNV::image);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "image"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDedicatedAllocationMemoryAllocateInfoNV, buffer);
      uint32_t byteLength = sizeof(VkDedicatedAllocationMemoryAllocateInfoNV::buffer);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "buffer"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDedicatedAllocationMemoryAllocateInfoNV"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkExternalImageFormatPropertiesNV)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExternalImageFormatPropertiesNV, imageFormatProperties);
      uint32_t byteLength = sizeof(VkExternalImageFormatPropertiesNV::imageFormatProperties);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "imageFormatProperties"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExternalImageFormatPropertiesNV, externalMemoryFeatures);
      uint32_t byteLength = sizeof(VkExternalImageFormatPropertiesNV::externalMemoryFeatures);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "externalMemoryFeatures"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExternalImageFormatPropertiesNV, exportFromImportedHandleTypes);
      uint32_t byteLength = sizeof(VkExternalImageFormatPropertiesNV::exportFromImportedHandleTypes);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "exportFromImportedHandleTypes"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExternalImageFormatPropertiesNV, compatibleHandleTypes);
      uint32_t byteLength = sizeof(VkExternalImageFormatPropertiesNV::compatibleHandleTypes);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "compatibleHandleTypes"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkExternalImageFormatPropertiesNV"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkExternalMemoryImageCreateInfoNV)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExternalMemoryImageCreateInfoNV, sType);
      uint32_t byteLength = sizeof(VkExternalMemoryImageCreateInfoNV::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExternalMemoryImageCreateInfoNV, pNext);
      uint32_t byteLength = sizeof(VkExternalMemoryImageCreateInfoNV::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExternalMemoryImageCreateInfoNV, handleTypes);
      uint32_t byteLength = sizeof(VkExternalMemoryImageCreateInfoNV::handleTypes);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "handleTypes"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkExternalMemoryImageCreateInfoNV"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkExportMemoryAllocateInfoNV)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExportMemoryAllocateInfoNV, sType);
      uint32_t byteLength = sizeof(VkExportMemoryAllocateInfoNV::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExportMemoryAllocateInfoNV, pNext);
      uint32_t byteLength = sizeof(VkExportMemoryAllocateInfoNV::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExportMemoryAllocateInfoNV, handleTypes);
      uint32_t byteLength = sizeof(VkExportMemoryAllocateInfoNV::handleTypes);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "handleTypes"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkExportMemoryAllocateInfoNV"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkImportMemoryWin32HandleInfoNV)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImportMemoryWin32HandleInfoNV, sType);
      uint32_t byteLength = sizeof(VkImportMemoryWin32HandleInfoNV::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImportMemoryWin32HandleInfoNV, pNext);
      uint32_t byteLength = sizeof(VkImportMemoryWin32HandleInfoNV::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImportMemoryWin32HandleInfoNV, handleType);
      uint32_t byteLength = sizeof(VkImportMemoryWin32HandleInfoNV::handleType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "handleType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImportMemoryWin32HandleInfoNV, handle);
      uint32_t byteLength = sizeof(VkImportMemoryWin32HandleInfoNV::handle);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "handle"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkImportMemoryWin32HandleInfoNV"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkExportMemoryWin32HandleInfoNV)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExportMemoryWin32HandleInfoNV, sType);
      uint32_t byteLength = sizeof(VkExportMemoryWin32HandleInfoNV::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExportMemoryWin32HandleInfoNV, pNext);
      uint32_t byteLength = sizeof(VkExportMemoryWin32HandleInfoNV::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExportMemoryWin32HandleInfoNV, pAttributes);
      uint32_t byteLength = sizeof(VkExportMemoryWin32HandleInfoNV::pAttributes);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pAttributes"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExportMemoryWin32HandleInfoNV, dwAccess);
      uint32_t byteLength = sizeof(VkExportMemoryWin32HandleInfoNV::dwAccess);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "dwAccess"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkExportMemoryWin32HandleInfoNV"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkWin32KeyedMutexAcquireReleaseInfoNV)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkWin32KeyedMutexAcquireReleaseInfoNV, sType);
      uint32_t byteLength = sizeof(VkWin32KeyedMutexAcquireReleaseInfoNV::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkWin32KeyedMutexAcquireReleaseInfoNV, pNext);
      uint32_t byteLength = sizeof(VkWin32KeyedMutexAcquireReleaseInfoNV::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkWin32KeyedMutexAcquireReleaseInfoNV, acquireCount);
      uint32_t byteLength = sizeof(VkWin32KeyedMutexAcquireReleaseInfoNV::acquireCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "acquireCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkWin32KeyedMutexAcquireReleaseInfoNV, pAcquireSyncs);
      uint32_t byteLength = sizeof(VkWin32KeyedMutexAcquireReleaseInfoNV::pAcquireSyncs);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pAcquireSyncs"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkWin32KeyedMutexAcquireReleaseInfoNV, pAcquireKeys);
      uint32_t byteLength = sizeof(VkWin32KeyedMutexAcquireReleaseInfoNV::pAcquireKeys);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pAcquireKeys"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkWin32KeyedMutexAcquireReleaseInfoNV, pAcquireTimeoutMilliseconds);
      uint32_t byteLength = sizeof(VkWin32KeyedMutexAcquireReleaseInfoNV::pAcquireTimeoutMilliseconds);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pAcquireTimeoutMilliseconds"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkWin32KeyedMutexAcquireReleaseInfoNV, releaseCount);
      uint32_t byteLength = sizeof(VkWin32KeyedMutexAcquireReleaseInfoNV::releaseCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "releaseCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkWin32KeyedMutexAcquireReleaseInfoNV, pReleaseSyncs);
      uint32_t byteLength = sizeof(VkWin32KeyedMutexAcquireReleaseInfoNV::pReleaseSyncs);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pReleaseSyncs"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkWin32KeyedMutexAcquireReleaseInfoNV, pReleaseKeys);
      uint32_t byteLength = sizeof(VkWin32KeyedMutexAcquireReleaseInfoNV::pReleaseKeys);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pReleaseKeys"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkWin32KeyedMutexAcquireReleaseInfoNV"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDeviceGeneratedCommandsFeaturesNVX)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGeneratedCommandsFeaturesNVX, sType);
      uint32_t byteLength = sizeof(VkDeviceGeneratedCommandsFeaturesNVX::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGeneratedCommandsFeaturesNVX, pNext);
      uint32_t byteLength = sizeof(VkDeviceGeneratedCommandsFeaturesNVX::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGeneratedCommandsFeaturesNVX, computeBindingPointSupport);
      uint32_t byteLength = sizeof(VkDeviceGeneratedCommandsFeaturesNVX::computeBindingPointSupport);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "computeBindingPointSupport"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDeviceGeneratedCommandsFeaturesNVX"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDeviceGeneratedCommandsLimitsNVX)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGeneratedCommandsLimitsNVX, sType);
      uint32_t byteLength = sizeof(VkDeviceGeneratedCommandsLimitsNVX::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGeneratedCommandsLimitsNVX, pNext);
      uint32_t byteLength = sizeof(VkDeviceGeneratedCommandsLimitsNVX::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGeneratedCommandsLimitsNVX, maxIndirectCommandsLayoutTokenCount);
      uint32_t byteLength = sizeof(VkDeviceGeneratedCommandsLimitsNVX::maxIndirectCommandsLayoutTokenCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxIndirectCommandsLayoutTokenCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGeneratedCommandsLimitsNVX, maxObjectEntryCounts);
      uint32_t byteLength = sizeof(VkDeviceGeneratedCommandsLimitsNVX::maxObjectEntryCounts);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxObjectEntryCounts"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGeneratedCommandsLimitsNVX, minSequenceCountBufferOffsetAlignment);
      uint32_t byteLength = sizeof(VkDeviceGeneratedCommandsLimitsNVX::minSequenceCountBufferOffsetAlignment);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "minSequenceCountBufferOffsetAlignment"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGeneratedCommandsLimitsNVX, minSequenceIndexBufferOffsetAlignment);
      uint32_t byteLength = sizeof(VkDeviceGeneratedCommandsLimitsNVX::minSequenceIndexBufferOffsetAlignment);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "minSequenceIndexBufferOffsetAlignment"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGeneratedCommandsLimitsNVX, minCommandsTokenBufferOffsetAlignment);
      uint32_t byteLength = sizeof(VkDeviceGeneratedCommandsLimitsNVX::minCommandsTokenBufferOffsetAlignment);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "minCommandsTokenBufferOffsetAlignment"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDeviceGeneratedCommandsLimitsNVX"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkIndirectCommandsTokenNVX)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkIndirectCommandsTokenNVX, tokenType);
      uint32_t byteLength = sizeof(VkIndirectCommandsTokenNVX::tokenType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "tokenType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkIndirectCommandsTokenNVX, buffer);
      uint32_t byteLength = sizeof(VkIndirectCommandsTokenNVX::buffer);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "buffer"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkIndirectCommandsTokenNVX, offset);
      uint32_t byteLength = sizeof(VkIndirectCommandsTokenNVX::offset);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "offset"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkIndirectCommandsTokenNVX"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkIndirectCommandsLayoutTokenNVX)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkIndirectCommandsLayoutTokenNVX, tokenType);
      uint32_t byteLength = sizeof(VkIndirectCommandsLayoutTokenNVX::tokenType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "tokenType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkIndirectCommandsLayoutTokenNVX, bindingUnit);
      uint32_t byteLength = sizeof(VkIndirectCommandsLayoutTokenNVX::bindingUnit);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "bindingUnit"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkIndirectCommandsLayoutTokenNVX, dynamicCount);
      uint32_t byteLength = sizeof(VkIndirectCommandsLayoutTokenNVX::dynamicCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "dynamicCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkIndirectCommandsLayoutTokenNVX, divisor);
      uint32_t byteLength = sizeof(VkIndirectCommandsLayoutTokenNVX::divisor);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "divisor"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkIndirectCommandsLayoutTokenNVX"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkIndirectCommandsLayoutCreateInfoNVX)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkIndirectCommandsLayoutCreateInfoNVX, sType);
      uint32_t byteLength = sizeof(VkIndirectCommandsLayoutCreateInfoNVX::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkIndirectCommandsLayoutCreateInfoNVX, pNext);
      uint32_t byteLength = sizeof(VkIndirectCommandsLayoutCreateInfoNVX::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkIndirectCommandsLayoutCreateInfoNVX, pipelineBindPoint);
      uint32_t byteLength = sizeof(VkIndirectCommandsLayoutCreateInfoNVX::pipelineBindPoint);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pipelineBindPoint"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkIndirectCommandsLayoutCreateInfoNVX, flags);
      uint32_t byteLength = sizeof(VkIndirectCommandsLayoutCreateInfoNVX::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkIndirectCommandsLayoutCreateInfoNVX, tokenCount);
      uint32_t byteLength = sizeof(VkIndirectCommandsLayoutCreateInfoNVX::tokenCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "tokenCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkIndirectCommandsLayoutCreateInfoNVX, pTokens);
      uint32_t byteLength = sizeof(VkIndirectCommandsLayoutCreateInfoNVX::pTokens);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pTokens"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkIndirectCommandsLayoutCreateInfoNVX"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkCmdProcessCommandsInfoNVX)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCmdProcessCommandsInfoNVX, sType);
      uint32_t byteLength = sizeof(VkCmdProcessCommandsInfoNVX::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCmdProcessCommandsInfoNVX, pNext);
      uint32_t byteLength = sizeof(VkCmdProcessCommandsInfoNVX::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCmdProcessCommandsInfoNVX, objectTable);
      uint32_t byteLength = sizeof(VkCmdProcessCommandsInfoNVX::objectTable);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "objectTable"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCmdProcessCommandsInfoNVX, indirectCommandsLayout);
      uint32_t byteLength = sizeof(VkCmdProcessCommandsInfoNVX::indirectCommandsLayout);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "indirectCommandsLayout"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCmdProcessCommandsInfoNVX, indirectCommandsTokenCount);
      uint32_t byteLength = sizeof(VkCmdProcessCommandsInfoNVX::indirectCommandsTokenCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "indirectCommandsTokenCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCmdProcessCommandsInfoNVX, pIndirectCommandsTokens);
      uint32_t byteLength = sizeof(VkCmdProcessCommandsInfoNVX::pIndirectCommandsTokens);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pIndirectCommandsTokens"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCmdProcessCommandsInfoNVX, maxSequencesCount);
      uint32_t byteLength = sizeof(VkCmdProcessCommandsInfoNVX::maxSequencesCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxSequencesCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCmdProcessCommandsInfoNVX, targetCommandBuffer);
      uint32_t byteLength = sizeof(VkCmdProcessCommandsInfoNVX::targetCommandBuffer);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "targetCommandBuffer"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCmdProcessCommandsInfoNVX, sequencesCountBuffer);
      uint32_t byteLength = sizeof(VkCmdProcessCommandsInfoNVX::sequencesCountBuffer);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sequencesCountBuffer"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCmdProcessCommandsInfoNVX, sequencesCountOffset);
      uint32_t byteLength = sizeof(VkCmdProcessCommandsInfoNVX::sequencesCountOffset);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sequencesCountOffset"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCmdProcessCommandsInfoNVX, sequencesIndexBuffer);
      uint32_t byteLength = sizeof(VkCmdProcessCommandsInfoNVX::sequencesIndexBuffer);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sequencesIndexBuffer"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCmdProcessCommandsInfoNVX, sequencesIndexOffset);
      uint32_t byteLength = sizeof(VkCmdProcessCommandsInfoNVX::sequencesIndexOffset);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sequencesIndexOffset"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkCmdProcessCommandsInfoNVX"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkCmdReserveSpaceForCommandsInfoNVX)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCmdReserveSpaceForCommandsInfoNVX, sType);
      uint32_t byteLength = sizeof(VkCmdReserveSpaceForCommandsInfoNVX::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCmdReserveSpaceForCommandsInfoNVX, pNext);
      uint32_t byteLength = sizeof(VkCmdReserveSpaceForCommandsInfoNVX::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCmdReserveSpaceForCommandsInfoNVX, objectTable);
      uint32_t byteLength = sizeof(VkCmdReserveSpaceForCommandsInfoNVX::objectTable);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "objectTable"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCmdReserveSpaceForCommandsInfoNVX, indirectCommandsLayout);
      uint32_t byteLength = sizeof(VkCmdReserveSpaceForCommandsInfoNVX::indirectCommandsLayout);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "indirectCommandsLayout"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCmdReserveSpaceForCommandsInfoNVX, maxSequencesCount);
      uint32_t byteLength = sizeof(VkCmdReserveSpaceForCommandsInfoNVX::maxSequencesCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxSequencesCount"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkCmdReserveSpaceForCommandsInfoNVX"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkObjectTableCreateInfoNVX)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkObjectTableCreateInfoNVX, sType);
      uint32_t byteLength = sizeof(VkObjectTableCreateInfoNVX::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkObjectTableCreateInfoNVX, pNext);
      uint32_t byteLength = sizeof(VkObjectTableCreateInfoNVX::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkObjectTableCreateInfoNVX, objectCount);
      uint32_t byteLength = sizeof(VkObjectTableCreateInfoNVX::objectCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "objectCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkObjectTableCreateInfoNVX, pObjectEntryTypes);
      uint32_t byteLength = sizeof(VkObjectTableCreateInfoNVX::pObjectEntryTypes);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pObjectEntryTypes"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkObjectTableCreateInfoNVX, pObjectEntryCounts);
      uint32_t byteLength = sizeof(VkObjectTableCreateInfoNVX::pObjectEntryCounts);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pObjectEntryCounts"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkObjectTableCreateInfoNVX, pObjectEntryUsageFlags);
      uint32_t byteLength = sizeof(VkObjectTableCreateInfoNVX::pObjectEntryUsageFlags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pObjectEntryUsageFlags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkObjectTableCreateInfoNVX, maxUniformBuffersPerDescriptor);
      uint32_t byteLength = sizeof(VkObjectTableCreateInfoNVX::maxUniformBuffersPerDescriptor);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxUniformBuffersPerDescriptor"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkObjectTableCreateInfoNVX, maxStorageBuffersPerDescriptor);
      uint32_t byteLength = sizeof(VkObjectTableCreateInfoNVX::maxStorageBuffersPerDescriptor);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxStorageBuffersPerDescriptor"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkObjectTableCreateInfoNVX, maxStorageImagesPerDescriptor);
      uint32_t byteLength = sizeof(VkObjectTableCreateInfoNVX::maxStorageImagesPerDescriptor);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxStorageImagesPerDescriptor"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkObjectTableCreateInfoNVX, maxSampledImagesPerDescriptor);
      uint32_t byteLength = sizeof(VkObjectTableCreateInfoNVX::maxSampledImagesPerDescriptor);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxSampledImagesPerDescriptor"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkObjectTableCreateInfoNVX, maxPipelineLayouts);
      uint32_t byteLength = sizeof(VkObjectTableCreateInfoNVX::maxPipelineLayouts);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxPipelineLayouts"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkObjectTableCreateInfoNVX"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkObjectTableEntryNVX)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkObjectTableEntryNVX, type);
      uint32_t byteLength = sizeof(VkObjectTableEntryNVX::type);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "type"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkObjectTableEntryNVX, flags);
      uint32_t byteLength = sizeof(VkObjectTableEntryNVX::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkObjectTableEntryNVX"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkObjectTablePipelineEntryNVX)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkObjectTablePipelineEntryNVX, type);
      uint32_t byteLength = sizeof(VkObjectTablePipelineEntryNVX::type);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "type"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkObjectTablePipelineEntryNVX, flags);
      uint32_t byteLength = sizeof(VkObjectTablePipelineEntryNVX::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkObjectTablePipelineEntryNVX, pipeline);
      uint32_t byteLength = sizeof(VkObjectTablePipelineEntryNVX::pipeline);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pipeline"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkObjectTablePipelineEntryNVX"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkObjectTableDescriptorSetEntryNVX)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkObjectTableDescriptorSetEntryNVX, type);
      uint32_t byteLength = sizeof(VkObjectTableDescriptorSetEntryNVX::type);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "type"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkObjectTableDescriptorSetEntryNVX, flags);
      uint32_t byteLength = sizeof(VkObjectTableDescriptorSetEntryNVX::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkObjectTableDescriptorSetEntryNVX, pipelineLayout);
      uint32_t byteLength = sizeof(VkObjectTableDescriptorSetEntryNVX::pipelineLayout);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pipelineLayout"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkObjectTableDescriptorSetEntryNVX, descriptorSet);
      uint32_t byteLength = sizeof(VkObjectTableDescriptorSetEntryNVX::descriptorSet);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "descriptorSet"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkObjectTableDescriptorSetEntryNVX"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkObjectTableVertexBufferEntryNVX)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkObjectTableVertexBufferEntryNVX, type);
      uint32_t byteLength = sizeof(VkObjectTableVertexBufferEntryNVX::type);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "type"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkObjectTableVertexBufferEntryNVX, flags);
      uint32_t byteLength = sizeof(VkObjectTableVertexBufferEntryNVX::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkObjectTableVertexBufferEntryNVX, buffer);
      uint32_t byteLength = sizeof(VkObjectTableVertexBufferEntryNVX::buffer);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "buffer"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkObjectTableVertexBufferEntryNVX"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkObjectTableIndexBufferEntryNVX)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkObjectTableIndexBufferEntryNVX, type);
      uint32_t byteLength = sizeof(VkObjectTableIndexBufferEntryNVX::type);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "type"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkObjectTableIndexBufferEntryNVX, flags);
      uint32_t byteLength = sizeof(VkObjectTableIndexBufferEntryNVX::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkObjectTableIndexBufferEntryNVX, buffer);
      uint32_t byteLength = sizeof(VkObjectTableIndexBufferEntryNVX::buffer);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "buffer"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkObjectTableIndexBufferEntryNVX, indexType);
      uint32_t byteLength = sizeof(VkObjectTableIndexBufferEntryNVX::indexType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "indexType"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkObjectTableIndexBufferEntryNVX"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkObjectTablePushConstantEntryNVX)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkObjectTablePushConstantEntryNVX, type);
      uint32_t byteLength = sizeof(VkObjectTablePushConstantEntryNVX::type);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "type"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkObjectTablePushConstantEntryNVX, flags);
      uint32_t byteLength = sizeof(VkObjectTablePushConstantEntryNVX::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkObjectTablePushConstantEntryNVX, pipelineLayout);
      uint32_t byteLength = sizeof(VkObjectTablePushConstantEntryNVX::pipelineLayout);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pipelineLayout"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkObjectTablePushConstantEntryNVX, stageFlags);
      uint32_t byteLength = sizeof(VkObjectTablePushConstantEntryNVX::stageFlags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "stageFlags"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkObjectTablePushConstantEntryNVX"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceFeatures2)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFeatures2, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFeatures2::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFeatures2, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFeatures2::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFeatures2, features);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFeatures2::features);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "features"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceFeatures2"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceFeatures2KHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFeatures2KHR, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFeatures2KHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFeatures2KHR, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFeatures2KHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFeatures2KHR, features);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFeatures2KHR::features);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "features"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceFeatures2KHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceProperties2)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceProperties2, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceProperties2::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceProperties2, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceProperties2::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceProperties2, properties);
      uint32_t byteLength = sizeof(VkPhysicalDeviceProperties2::properties);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "properties"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceProperties2"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceProperties2KHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceProperties2KHR, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceProperties2KHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceProperties2KHR, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceProperties2KHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceProperties2KHR, properties);
      uint32_t byteLength = sizeof(VkPhysicalDeviceProperties2KHR::properties);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "properties"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceProperties2KHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkFormatProperties2)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkFormatProperties2, sType);
      uint32_t byteLength = sizeof(VkFormatProperties2::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkFormatProperties2, pNext);
      uint32_t byteLength = sizeof(VkFormatProperties2::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkFormatProperties2, formatProperties);
      uint32_t byteLength = sizeof(VkFormatProperties2::formatProperties);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "formatProperties"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkFormatProperties2"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkFormatProperties2KHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkFormatProperties2KHR, sType);
      uint32_t byteLength = sizeof(VkFormatProperties2KHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkFormatProperties2KHR, pNext);
      uint32_t byteLength = sizeof(VkFormatProperties2KHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkFormatProperties2KHR, formatProperties);
      uint32_t byteLength = sizeof(VkFormatProperties2KHR::formatProperties);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "formatProperties"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkFormatProperties2KHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkImageFormatProperties2)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageFormatProperties2, sType);
      uint32_t byteLength = sizeof(VkImageFormatProperties2::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageFormatProperties2, pNext);
      uint32_t byteLength = sizeof(VkImageFormatProperties2::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageFormatProperties2, imageFormatProperties);
      uint32_t byteLength = sizeof(VkImageFormatProperties2::imageFormatProperties);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "imageFormatProperties"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkImageFormatProperties2"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkImageFormatProperties2KHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageFormatProperties2KHR, sType);
      uint32_t byteLength = sizeof(VkImageFormatProperties2KHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageFormatProperties2KHR, pNext);
      uint32_t byteLength = sizeof(VkImageFormatProperties2KHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageFormatProperties2KHR, imageFormatProperties);
      uint32_t byteLength = sizeof(VkImageFormatProperties2KHR::imageFormatProperties);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "imageFormatProperties"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkImageFormatProperties2KHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceImageFormatInfo2)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceImageFormatInfo2, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceImageFormatInfo2::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceImageFormatInfo2, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceImageFormatInfo2::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceImageFormatInfo2, format);
      uint32_t byteLength = sizeof(VkPhysicalDeviceImageFormatInfo2::format);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "format"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceImageFormatInfo2, type);
      uint32_t byteLength = sizeof(VkPhysicalDeviceImageFormatInfo2::type);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "type"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceImageFormatInfo2, tiling);
      uint32_t byteLength = sizeof(VkPhysicalDeviceImageFormatInfo2::tiling);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "tiling"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceImageFormatInfo2, usage);
      uint32_t byteLength = sizeof(VkPhysicalDeviceImageFormatInfo2::usage);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "usage"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceImageFormatInfo2, flags);
      uint32_t byteLength = sizeof(VkPhysicalDeviceImageFormatInfo2::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceImageFormatInfo2"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceImageFormatInfo2KHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceImageFormatInfo2KHR, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceImageFormatInfo2KHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceImageFormatInfo2KHR, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceImageFormatInfo2KHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceImageFormatInfo2KHR, format);
      uint32_t byteLength = sizeof(VkPhysicalDeviceImageFormatInfo2KHR::format);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "format"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceImageFormatInfo2KHR, type);
      uint32_t byteLength = sizeof(VkPhysicalDeviceImageFormatInfo2KHR::type);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "type"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceImageFormatInfo2KHR, tiling);
      uint32_t byteLength = sizeof(VkPhysicalDeviceImageFormatInfo2KHR::tiling);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "tiling"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceImageFormatInfo2KHR, usage);
      uint32_t byteLength = sizeof(VkPhysicalDeviceImageFormatInfo2KHR::usage);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "usage"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceImageFormatInfo2KHR, flags);
      uint32_t byteLength = sizeof(VkPhysicalDeviceImageFormatInfo2KHR::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceImageFormatInfo2KHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkQueueFamilyProperties2)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkQueueFamilyProperties2, sType);
      uint32_t byteLength = sizeof(VkQueueFamilyProperties2::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkQueueFamilyProperties2, pNext);
      uint32_t byteLength = sizeof(VkQueueFamilyProperties2::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkQueueFamilyProperties2, queueFamilyProperties);
      uint32_t byteLength = sizeof(VkQueueFamilyProperties2::queueFamilyProperties);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "queueFamilyProperties"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkQueueFamilyProperties2"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkQueueFamilyProperties2KHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkQueueFamilyProperties2KHR, sType);
      uint32_t byteLength = sizeof(VkQueueFamilyProperties2KHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkQueueFamilyProperties2KHR, pNext);
      uint32_t byteLength = sizeof(VkQueueFamilyProperties2KHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkQueueFamilyProperties2KHR, queueFamilyProperties);
      uint32_t byteLength = sizeof(VkQueueFamilyProperties2KHR::queueFamilyProperties);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "queueFamilyProperties"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkQueueFamilyProperties2KHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceMemoryProperties2)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceMemoryProperties2, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceMemoryProperties2::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceMemoryProperties2, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceMemoryProperties2::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceMemoryProperties2, memoryProperties);
      uint32_t byteLength = sizeof(VkPhysicalDeviceMemoryProperties2::memoryProperties);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "memoryProperties"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceMemoryProperties2"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceMemoryProperties2KHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceMemoryProperties2KHR, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceMemoryProperties2KHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceMemoryProperties2KHR, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceMemoryProperties2KHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceMemoryProperties2KHR, memoryProperties);
      uint32_t byteLength = sizeof(VkPhysicalDeviceMemoryProperties2KHR::memoryProperties);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "memoryProperties"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceMemoryProperties2KHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkSparseImageFormatProperties2)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSparseImageFormatProperties2, sType);
      uint32_t byteLength = sizeof(VkSparseImageFormatProperties2::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSparseImageFormatProperties2, pNext);
      uint32_t byteLength = sizeof(VkSparseImageFormatProperties2::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSparseImageFormatProperties2, properties);
      uint32_t byteLength = sizeof(VkSparseImageFormatProperties2::properties);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "properties"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkSparseImageFormatProperties2"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkSparseImageFormatProperties2KHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSparseImageFormatProperties2KHR, sType);
      uint32_t byteLength = sizeof(VkSparseImageFormatProperties2KHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSparseImageFormatProperties2KHR, pNext);
      uint32_t byteLength = sizeof(VkSparseImageFormatProperties2KHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSparseImageFormatProperties2KHR, properties);
      uint32_t byteLength = sizeof(VkSparseImageFormatProperties2KHR::properties);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "properties"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkSparseImageFormatProperties2KHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceSparseImageFormatInfo2)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceSparseImageFormatInfo2, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceSparseImageFormatInfo2::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceSparseImageFormatInfo2, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceSparseImageFormatInfo2::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceSparseImageFormatInfo2, format);
      uint32_t byteLength = sizeof(VkPhysicalDeviceSparseImageFormatInfo2::format);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "format"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceSparseImageFormatInfo2, type);
      uint32_t byteLength = sizeof(VkPhysicalDeviceSparseImageFormatInfo2::type);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "type"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceSparseImageFormatInfo2, samples);
      uint32_t byteLength = sizeof(VkPhysicalDeviceSparseImageFormatInfo2::samples);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "samples"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceSparseImageFormatInfo2, usage);
      uint32_t byteLength = sizeof(VkPhysicalDeviceSparseImageFormatInfo2::usage);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "usage"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceSparseImageFormatInfo2, tiling);
      uint32_t byteLength = sizeof(VkPhysicalDeviceSparseImageFormatInfo2::tiling);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "tiling"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceSparseImageFormatInfo2"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceSparseImageFormatInfo2KHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceSparseImageFormatInfo2KHR, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceSparseImageFormatInfo2KHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceSparseImageFormatInfo2KHR, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceSparseImageFormatInfo2KHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceSparseImageFormatInfo2KHR, format);
      uint32_t byteLength = sizeof(VkPhysicalDeviceSparseImageFormatInfo2KHR::format);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "format"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceSparseImageFormatInfo2KHR, type);
      uint32_t byteLength = sizeof(VkPhysicalDeviceSparseImageFormatInfo2KHR::type);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "type"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceSparseImageFormatInfo2KHR, samples);
      uint32_t byteLength = sizeof(VkPhysicalDeviceSparseImageFormatInfo2KHR::samples);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "samples"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceSparseImageFormatInfo2KHR, usage);
      uint32_t byteLength = sizeof(VkPhysicalDeviceSparseImageFormatInfo2KHR::usage);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "usage"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceSparseImageFormatInfo2KHR, tiling);
      uint32_t byteLength = sizeof(VkPhysicalDeviceSparseImageFormatInfo2KHR::tiling);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "tiling"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceSparseImageFormatInfo2KHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDevicePushDescriptorPropertiesKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDevicePushDescriptorPropertiesKHR, sType);
      uint32_t byteLength = sizeof(VkPhysicalDevicePushDescriptorPropertiesKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDevicePushDescriptorPropertiesKHR, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDevicePushDescriptorPropertiesKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDevicePushDescriptorPropertiesKHR, maxPushDescriptors);
      uint32_t byteLength = sizeof(VkPhysicalDevicePushDescriptorPropertiesKHR::maxPushDescriptors);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxPushDescriptors"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDevicePushDescriptorPropertiesKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkConformanceVersionKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkConformanceVersionKHR, major);
      uint32_t byteLength = sizeof(VkConformanceVersionKHR::major);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "major"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkConformanceVersionKHR, minor);
      uint32_t byteLength = sizeof(VkConformanceVersionKHR::minor);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "minor"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkConformanceVersionKHR, subminor);
      uint32_t byteLength = sizeof(VkConformanceVersionKHR::subminor);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "subminor"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkConformanceVersionKHR, patch);
      uint32_t byteLength = sizeof(VkConformanceVersionKHR::patch);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "patch"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkConformanceVersionKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceDriverPropertiesKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDriverPropertiesKHR, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDriverPropertiesKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDriverPropertiesKHR, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDriverPropertiesKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDriverPropertiesKHR, driverID);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDriverPropertiesKHR::driverID);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "driverID"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDriverPropertiesKHR, driverName);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDriverPropertiesKHR::driverName);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "driverName"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDriverPropertiesKHR, driverInfo);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDriverPropertiesKHR::driverInfo);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "driverInfo"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDriverPropertiesKHR, conformanceVersion);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDriverPropertiesKHR::conformanceVersion);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "conformanceVersion"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceDriverPropertiesKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPresentRegionsKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPresentRegionsKHR, sType);
      uint32_t byteLength = sizeof(VkPresentRegionsKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPresentRegionsKHR, pNext);
      uint32_t byteLength = sizeof(VkPresentRegionsKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPresentRegionsKHR, swapchainCount);
      uint32_t byteLength = sizeof(VkPresentRegionsKHR::swapchainCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "swapchainCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPresentRegionsKHR, pRegions);
      uint32_t byteLength = sizeof(VkPresentRegionsKHR::pRegions);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pRegions"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPresentRegionsKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPresentRegionKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPresentRegionKHR, rectangleCount);
      uint32_t byteLength = sizeof(VkPresentRegionKHR::rectangleCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "rectangleCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPresentRegionKHR, pRectangles);
      uint32_t byteLength = sizeof(VkPresentRegionKHR::pRectangles);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pRectangles"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPresentRegionKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkRectLayerKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRectLayerKHR, offset);
      uint32_t byteLength = sizeof(VkRectLayerKHR::offset);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "offset"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRectLayerKHR, extent);
      uint32_t byteLength = sizeof(VkRectLayerKHR::extent);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "extent"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRectLayerKHR, layer);
      uint32_t byteLength = sizeof(VkRectLayerKHR::layer);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "layer"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkRectLayerKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceVariablePointerFeatures)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceVariablePointerFeatures, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceVariablePointerFeatures::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceVariablePointerFeatures, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceVariablePointerFeatures::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceVariablePointerFeatures, variablePointersStorageBuffer);
      uint32_t byteLength = sizeof(VkPhysicalDeviceVariablePointerFeatures::variablePointersStorageBuffer);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "variablePointersStorageBuffer"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceVariablePointerFeatures, variablePointers);
      uint32_t byteLength = sizeof(VkPhysicalDeviceVariablePointerFeatures::variablePointers);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "variablePointers"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceVariablePointerFeatures"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceVariablePointerFeaturesKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceVariablePointerFeaturesKHR, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceVariablePointerFeaturesKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceVariablePointerFeaturesKHR, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceVariablePointerFeaturesKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceVariablePointerFeaturesKHR, variablePointersStorageBuffer);
      uint32_t byteLength = sizeof(VkPhysicalDeviceVariablePointerFeaturesKHR::variablePointersStorageBuffer);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "variablePointersStorageBuffer"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceVariablePointerFeaturesKHR, variablePointers);
      uint32_t byteLength = sizeof(VkPhysicalDeviceVariablePointerFeaturesKHR::variablePointers);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "variablePointers"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceVariablePointerFeaturesKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkExternalMemoryProperties)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExternalMemoryProperties, externalMemoryFeatures);
      uint32_t byteLength = sizeof(VkExternalMemoryProperties::externalMemoryFeatures);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "externalMemoryFeatures"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExternalMemoryProperties, exportFromImportedHandleTypes);
      uint32_t byteLength = sizeof(VkExternalMemoryProperties::exportFromImportedHandleTypes);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "exportFromImportedHandleTypes"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExternalMemoryProperties, compatibleHandleTypes);
      uint32_t byteLength = sizeof(VkExternalMemoryProperties::compatibleHandleTypes);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "compatibleHandleTypes"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkExternalMemoryProperties"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkExternalMemoryPropertiesKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExternalMemoryPropertiesKHR, externalMemoryFeatures);
      uint32_t byteLength = sizeof(VkExternalMemoryPropertiesKHR::externalMemoryFeatures);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "externalMemoryFeatures"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExternalMemoryPropertiesKHR, exportFromImportedHandleTypes);
      uint32_t byteLength = sizeof(VkExternalMemoryPropertiesKHR::exportFromImportedHandleTypes);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "exportFromImportedHandleTypes"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExternalMemoryPropertiesKHR, compatibleHandleTypes);
      uint32_t byteLength = sizeof(VkExternalMemoryPropertiesKHR::compatibleHandleTypes);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "compatibleHandleTypes"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkExternalMemoryPropertiesKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceExternalImageFormatInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceExternalImageFormatInfo, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceExternalImageFormatInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceExternalImageFormatInfo, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceExternalImageFormatInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceExternalImageFormatInfo, handleType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceExternalImageFormatInfo::handleType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "handleType"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceExternalImageFormatInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceExternalImageFormatInfoKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceExternalImageFormatInfoKHR, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceExternalImageFormatInfoKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceExternalImageFormatInfoKHR, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceExternalImageFormatInfoKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceExternalImageFormatInfoKHR, handleType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceExternalImageFormatInfoKHR::handleType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "handleType"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceExternalImageFormatInfoKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkExternalImageFormatProperties)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExternalImageFormatProperties, sType);
      uint32_t byteLength = sizeof(VkExternalImageFormatProperties::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExternalImageFormatProperties, pNext);
      uint32_t byteLength = sizeof(VkExternalImageFormatProperties::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExternalImageFormatProperties, externalMemoryProperties);
      uint32_t byteLength = sizeof(VkExternalImageFormatProperties::externalMemoryProperties);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "externalMemoryProperties"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkExternalImageFormatProperties"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkExternalImageFormatPropertiesKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExternalImageFormatPropertiesKHR, sType);
      uint32_t byteLength = sizeof(VkExternalImageFormatPropertiesKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExternalImageFormatPropertiesKHR, pNext);
      uint32_t byteLength = sizeof(VkExternalImageFormatPropertiesKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExternalImageFormatPropertiesKHR, externalMemoryProperties);
      uint32_t byteLength = sizeof(VkExternalImageFormatPropertiesKHR::externalMemoryProperties);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "externalMemoryProperties"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkExternalImageFormatPropertiesKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceExternalBufferInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceExternalBufferInfo, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceExternalBufferInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceExternalBufferInfo, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceExternalBufferInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceExternalBufferInfo, flags);
      uint32_t byteLength = sizeof(VkPhysicalDeviceExternalBufferInfo::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceExternalBufferInfo, usage);
      uint32_t byteLength = sizeof(VkPhysicalDeviceExternalBufferInfo::usage);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "usage"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceExternalBufferInfo, handleType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceExternalBufferInfo::handleType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "handleType"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceExternalBufferInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceExternalBufferInfoKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceExternalBufferInfoKHR, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceExternalBufferInfoKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceExternalBufferInfoKHR, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceExternalBufferInfoKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceExternalBufferInfoKHR, flags);
      uint32_t byteLength = sizeof(VkPhysicalDeviceExternalBufferInfoKHR::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceExternalBufferInfoKHR, usage);
      uint32_t byteLength = sizeof(VkPhysicalDeviceExternalBufferInfoKHR::usage);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "usage"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceExternalBufferInfoKHR, handleType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceExternalBufferInfoKHR::handleType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "handleType"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceExternalBufferInfoKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkExternalBufferProperties)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExternalBufferProperties, sType);
      uint32_t byteLength = sizeof(VkExternalBufferProperties::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExternalBufferProperties, pNext);
      uint32_t byteLength = sizeof(VkExternalBufferProperties::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExternalBufferProperties, externalMemoryProperties);
      uint32_t byteLength = sizeof(VkExternalBufferProperties::externalMemoryProperties);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "externalMemoryProperties"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkExternalBufferProperties"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkExternalBufferPropertiesKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExternalBufferPropertiesKHR, sType);
      uint32_t byteLength = sizeof(VkExternalBufferPropertiesKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExternalBufferPropertiesKHR, pNext);
      uint32_t byteLength = sizeof(VkExternalBufferPropertiesKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExternalBufferPropertiesKHR, externalMemoryProperties);
      uint32_t byteLength = sizeof(VkExternalBufferPropertiesKHR::externalMemoryProperties);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "externalMemoryProperties"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkExternalBufferPropertiesKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceIDProperties)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceIDProperties, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceIDProperties::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceIDProperties, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceIDProperties::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceIDProperties, deviceUUID);
      uint32_t byteLength = sizeof(VkPhysicalDeviceIDProperties::deviceUUID);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "deviceUUID"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceIDProperties, driverUUID);
      uint32_t byteLength = sizeof(VkPhysicalDeviceIDProperties::driverUUID);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "driverUUID"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceIDProperties, deviceLUID);
      uint32_t byteLength = sizeof(VkPhysicalDeviceIDProperties::deviceLUID);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "deviceLUID"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceIDProperties, deviceNodeMask);
      uint32_t byteLength = sizeof(VkPhysicalDeviceIDProperties::deviceNodeMask);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "deviceNodeMask"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceIDProperties, deviceLUIDValid);
      uint32_t byteLength = sizeof(VkPhysicalDeviceIDProperties::deviceLUIDValid);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "deviceLUIDValid"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceIDProperties"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceIDPropertiesKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceIDPropertiesKHR, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceIDPropertiesKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceIDPropertiesKHR, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceIDPropertiesKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceIDPropertiesKHR, deviceUUID);
      uint32_t byteLength = sizeof(VkPhysicalDeviceIDPropertiesKHR::deviceUUID);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "deviceUUID"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceIDPropertiesKHR, driverUUID);
      uint32_t byteLength = sizeof(VkPhysicalDeviceIDPropertiesKHR::driverUUID);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "driverUUID"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceIDPropertiesKHR, deviceLUID);
      uint32_t byteLength = sizeof(VkPhysicalDeviceIDPropertiesKHR::deviceLUID);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "deviceLUID"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceIDPropertiesKHR, deviceNodeMask);
      uint32_t byteLength = sizeof(VkPhysicalDeviceIDPropertiesKHR::deviceNodeMask);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "deviceNodeMask"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceIDPropertiesKHR, deviceLUIDValid);
      uint32_t byteLength = sizeof(VkPhysicalDeviceIDPropertiesKHR::deviceLUIDValid);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "deviceLUIDValid"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceIDPropertiesKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkExternalMemoryImageCreateInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExternalMemoryImageCreateInfo, sType);
      uint32_t byteLength = sizeof(VkExternalMemoryImageCreateInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExternalMemoryImageCreateInfo, pNext);
      uint32_t byteLength = sizeof(VkExternalMemoryImageCreateInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExternalMemoryImageCreateInfo, handleTypes);
      uint32_t byteLength = sizeof(VkExternalMemoryImageCreateInfo::handleTypes);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "handleTypes"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkExternalMemoryImageCreateInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkExternalMemoryImageCreateInfoKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExternalMemoryImageCreateInfoKHR, sType);
      uint32_t byteLength = sizeof(VkExternalMemoryImageCreateInfoKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExternalMemoryImageCreateInfoKHR, pNext);
      uint32_t byteLength = sizeof(VkExternalMemoryImageCreateInfoKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExternalMemoryImageCreateInfoKHR, handleTypes);
      uint32_t byteLength = sizeof(VkExternalMemoryImageCreateInfoKHR::handleTypes);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "handleTypes"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkExternalMemoryImageCreateInfoKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkExternalMemoryBufferCreateInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExternalMemoryBufferCreateInfo, sType);
      uint32_t byteLength = sizeof(VkExternalMemoryBufferCreateInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExternalMemoryBufferCreateInfo, pNext);
      uint32_t byteLength = sizeof(VkExternalMemoryBufferCreateInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExternalMemoryBufferCreateInfo, handleTypes);
      uint32_t byteLength = sizeof(VkExternalMemoryBufferCreateInfo::handleTypes);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "handleTypes"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkExternalMemoryBufferCreateInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkExternalMemoryBufferCreateInfoKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExternalMemoryBufferCreateInfoKHR, sType);
      uint32_t byteLength = sizeof(VkExternalMemoryBufferCreateInfoKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExternalMemoryBufferCreateInfoKHR, pNext);
      uint32_t byteLength = sizeof(VkExternalMemoryBufferCreateInfoKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExternalMemoryBufferCreateInfoKHR, handleTypes);
      uint32_t byteLength = sizeof(VkExternalMemoryBufferCreateInfoKHR::handleTypes);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "handleTypes"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkExternalMemoryBufferCreateInfoKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkExportMemoryAllocateInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExportMemoryAllocateInfo, sType);
      uint32_t byteLength = sizeof(VkExportMemoryAllocateInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExportMemoryAllocateInfo, pNext);
      uint32_t byteLength = sizeof(VkExportMemoryAllocateInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExportMemoryAllocateInfo, handleTypes);
      uint32_t byteLength = sizeof(VkExportMemoryAllocateInfo::handleTypes);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "handleTypes"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkExportMemoryAllocateInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkExportMemoryAllocateInfoKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExportMemoryAllocateInfoKHR, sType);
      uint32_t byteLength = sizeof(VkExportMemoryAllocateInfoKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExportMemoryAllocateInfoKHR, pNext);
      uint32_t byteLength = sizeof(VkExportMemoryAllocateInfoKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExportMemoryAllocateInfoKHR, handleTypes);
      uint32_t byteLength = sizeof(VkExportMemoryAllocateInfoKHR::handleTypes);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "handleTypes"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkExportMemoryAllocateInfoKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkImportMemoryWin32HandleInfoKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImportMemoryWin32HandleInfoKHR, sType);
      uint32_t byteLength = sizeof(VkImportMemoryWin32HandleInfoKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImportMemoryWin32HandleInfoKHR, pNext);
      uint32_t byteLength = sizeof(VkImportMemoryWin32HandleInfoKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImportMemoryWin32HandleInfoKHR, handleType);
      uint32_t byteLength = sizeof(VkImportMemoryWin32HandleInfoKHR::handleType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "handleType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImportMemoryWin32HandleInfoKHR, handle);
      uint32_t byteLength = sizeof(VkImportMemoryWin32HandleInfoKHR::handle);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "handle"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImportMemoryWin32HandleInfoKHR, name);
      uint32_t byteLength = sizeof(VkImportMemoryWin32HandleInfoKHR::name);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "name"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkImportMemoryWin32HandleInfoKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkExportMemoryWin32HandleInfoKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExportMemoryWin32HandleInfoKHR, sType);
      uint32_t byteLength = sizeof(VkExportMemoryWin32HandleInfoKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExportMemoryWin32HandleInfoKHR, pNext);
      uint32_t byteLength = sizeof(VkExportMemoryWin32HandleInfoKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExportMemoryWin32HandleInfoKHR, pAttributes);
      uint32_t byteLength = sizeof(VkExportMemoryWin32HandleInfoKHR::pAttributes);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pAttributes"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExportMemoryWin32HandleInfoKHR, dwAccess);
      uint32_t byteLength = sizeof(VkExportMemoryWin32HandleInfoKHR::dwAccess);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "dwAccess"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExportMemoryWin32HandleInfoKHR, name);
      uint32_t byteLength = sizeof(VkExportMemoryWin32HandleInfoKHR::name);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "name"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkExportMemoryWin32HandleInfoKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkMemoryWin32HandlePropertiesKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMemoryWin32HandlePropertiesKHR, sType);
      uint32_t byteLength = sizeof(VkMemoryWin32HandlePropertiesKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMemoryWin32HandlePropertiesKHR, pNext);
      uint32_t byteLength = sizeof(VkMemoryWin32HandlePropertiesKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMemoryWin32HandlePropertiesKHR, memoryTypeBits);
      uint32_t byteLength = sizeof(VkMemoryWin32HandlePropertiesKHR::memoryTypeBits);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "memoryTypeBits"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkMemoryWin32HandlePropertiesKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkMemoryGetWin32HandleInfoKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMemoryGetWin32HandleInfoKHR, sType);
      uint32_t byteLength = sizeof(VkMemoryGetWin32HandleInfoKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMemoryGetWin32HandleInfoKHR, pNext);
      uint32_t byteLength = sizeof(VkMemoryGetWin32HandleInfoKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMemoryGetWin32HandleInfoKHR, memory);
      uint32_t byteLength = sizeof(VkMemoryGetWin32HandleInfoKHR::memory);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "memory"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMemoryGetWin32HandleInfoKHR, handleType);
      uint32_t byteLength = sizeof(VkMemoryGetWin32HandleInfoKHR::handleType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "handleType"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkMemoryGetWin32HandleInfoKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkImportMemoryFdInfoKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImportMemoryFdInfoKHR, sType);
      uint32_t byteLength = sizeof(VkImportMemoryFdInfoKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImportMemoryFdInfoKHR, pNext);
      uint32_t byteLength = sizeof(VkImportMemoryFdInfoKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImportMemoryFdInfoKHR, handleType);
      uint32_t byteLength = sizeof(VkImportMemoryFdInfoKHR::handleType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "handleType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImportMemoryFdInfoKHR, fd);
      uint32_t byteLength = sizeof(VkImportMemoryFdInfoKHR::fd);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "fd"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkImportMemoryFdInfoKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkMemoryFdPropertiesKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMemoryFdPropertiesKHR, sType);
      uint32_t byteLength = sizeof(VkMemoryFdPropertiesKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMemoryFdPropertiesKHR, pNext);
      uint32_t byteLength = sizeof(VkMemoryFdPropertiesKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMemoryFdPropertiesKHR, memoryTypeBits);
      uint32_t byteLength = sizeof(VkMemoryFdPropertiesKHR::memoryTypeBits);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "memoryTypeBits"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkMemoryFdPropertiesKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkMemoryGetFdInfoKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMemoryGetFdInfoKHR, sType);
      uint32_t byteLength = sizeof(VkMemoryGetFdInfoKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMemoryGetFdInfoKHR, pNext);
      uint32_t byteLength = sizeof(VkMemoryGetFdInfoKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMemoryGetFdInfoKHR, memory);
      uint32_t byteLength = sizeof(VkMemoryGetFdInfoKHR::memory);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "memory"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMemoryGetFdInfoKHR, handleType);
      uint32_t byteLength = sizeof(VkMemoryGetFdInfoKHR::handleType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "handleType"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkMemoryGetFdInfoKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkWin32KeyedMutexAcquireReleaseInfoKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkWin32KeyedMutexAcquireReleaseInfoKHR, sType);
      uint32_t byteLength = sizeof(VkWin32KeyedMutexAcquireReleaseInfoKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkWin32KeyedMutexAcquireReleaseInfoKHR, pNext);
      uint32_t byteLength = sizeof(VkWin32KeyedMutexAcquireReleaseInfoKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkWin32KeyedMutexAcquireReleaseInfoKHR, acquireCount);
      uint32_t byteLength = sizeof(VkWin32KeyedMutexAcquireReleaseInfoKHR::acquireCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "acquireCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkWin32KeyedMutexAcquireReleaseInfoKHR, pAcquireSyncs);
      uint32_t byteLength = sizeof(VkWin32KeyedMutexAcquireReleaseInfoKHR::pAcquireSyncs);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pAcquireSyncs"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkWin32KeyedMutexAcquireReleaseInfoKHR, pAcquireKeys);
      uint32_t byteLength = sizeof(VkWin32KeyedMutexAcquireReleaseInfoKHR::pAcquireKeys);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pAcquireKeys"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkWin32KeyedMutexAcquireReleaseInfoKHR, pAcquireTimeouts);
      uint32_t byteLength = sizeof(VkWin32KeyedMutexAcquireReleaseInfoKHR::pAcquireTimeouts);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pAcquireTimeouts"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkWin32KeyedMutexAcquireReleaseInfoKHR, releaseCount);
      uint32_t byteLength = sizeof(VkWin32KeyedMutexAcquireReleaseInfoKHR::releaseCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "releaseCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkWin32KeyedMutexAcquireReleaseInfoKHR, pReleaseSyncs);
      uint32_t byteLength = sizeof(VkWin32KeyedMutexAcquireReleaseInfoKHR::pReleaseSyncs);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pReleaseSyncs"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkWin32KeyedMutexAcquireReleaseInfoKHR, pReleaseKeys);
      uint32_t byteLength = sizeof(VkWin32KeyedMutexAcquireReleaseInfoKHR::pReleaseKeys);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pReleaseKeys"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkWin32KeyedMutexAcquireReleaseInfoKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceExternalSemaphoreInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceExternalSemaphoreInfo, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceExternalSemaphoreInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceExternalSemaphoreInfo, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceExternalSemaphoreInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceExternalSemaphoreInfo, handleType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceExternalSemaphoreInfo::handleType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "handleType"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceExternalSemaphoreInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceExternalSemaphoreInfoKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceExternalSemaphoreInfoKHR, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceExternalSemaphoreInfoKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceExternalSemaphoreInfoKHR, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceExternalSemaphoreInfoKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceExternalSemaphoreInfoKHR, handleType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceExternalSemaphoreInfoKHR::handleType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "handleType"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceExternalSemaphoreInfoKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkExternalSemaphoreProperties)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExternalSemaphoreProperties, sType);
      uint32_t byteLength = sizeof(VkExternalSemaphoreProperties::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExternalSemaphoreProperties, pNext);
      uint32_t byteLength = sizeof(VkExternalSemaphoreProperties::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExternalSemaphoreProperties, exportFromImportedHandleTypes);
      uint32_t byteLength = sizeof(VkExternalSemaphoreProperties::exportFromImportedHandleTypes);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "exportFromImportedHandleTypes"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExternalSemaphoreProperties, compatibleHandleTypes);
      uint32_t byteLength = sizeof(VkExternalSemaphoreProperties::compatibleHandleTypes);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "compatibleHandleTypes"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExternalSemaphoreProperties, externalSemaphoreFeatures);
      uint32_t byteLength = sizeof(VkExternalSemaphoreProperties::externalSemaphoreFeatures);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "externalSemaphoreFeatures"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkExternalSemaphoreProperties"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkExternalSemaphorePropertiesKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExternalSemaphorePropertiesKHR, sType);
      uint32_t byteLength = sizeof(VkExternalSemaphorePropertiesKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExternalSemaphorePropertiesKHR, pNext);
      uint32_t byteLength = sizeof(VkExternalSemaphorePropertiesKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExternalSemaphorePropertiesKHR, exportFromImportedHandleTypes);
      uint32_t byteLength = sizeof(VkExternalSemaphorePropertiesKHR::exportFromImportedHandleTypes);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "exportFromImportedHandleTypes"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExternalSemaphorePropertiesKHR, compatibleHandleTypes);
      uint32_t byteLength = sizeof(VkExternalSemaphorePropertiesKHR::compatibleHandleTypes);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "compatibleHandleTypes"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExternalSemaphorePropertiesKHR, externalSemaphoreFeatures);
      uint32_t byteLength = sizeof(VkExternalSemaphorePropertiesKHR::externalSemaphoreFeatures);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "externalSemaphoreFeatures"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkExternalSemaphorePropertiesKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkExportSemaphoreCreateInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExportSemaphoreCreateInfo, sType);
      uint32_t byteLength = sizeof(VkExportSemaphoreCreateInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExportSemaphoreCreateInfo, pNext);
      uint32_t byteLength = sizeof(VkExportSemaphoreCreateInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExportSemaphoreCreateInfo, handleTypes);
      uint32_t byteLength = sizeof(VkExportSemaphoreCreateInfo::handleTypes);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "handleTypes"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkExportSemaphoreCreateInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkExportSemaphoreCreateInfoKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExportSemaphoreCreateInfoKHR, sType);
      uint32_t byteLength = sizeof(VkExportSemaphoreCreateInfoKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExportSemaphoreCreateInfoKHR, pNext);
      uint32_t byteLength = sizeof(VkExportSemaphoreCreateInfoKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExportSemaphoreCreateInfoKHR, handleTypes);
      uint32_t byteLength = sizeof(VkExportSemaphoreCreateInfoKHR::handleTypes);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "handleTypes"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkExportSemaphoreCreateInfoKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkImportSemaphoreWin32HandleInfoKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImportSemaphoreWin32HandleInfoKHR, sType);
      uint32_t byteLength = sizeof(VkImportSemaphoreWin32HandleInfoKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImportSemaphoreWin32HandleInfoKHR, pNext);
      uint32_t byteLength = sizeof(VkImportSemaphoreWin32HandleInfoKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImportSemaphoreWin32HandleInfoKHR, semaphore);
      uint32_t byteLength = sizeof(VkImportSemaphoreWin32HandleInfoKHR::semaphore);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "semaphore"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImportSemaphoreWin32HandleInfoKHR, flags);
      uint32_t byteLength = sizeof(VkImportSemaphoreWin32HandleInfoKHR::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImportSemaphoreWin32HandleInfoKHR, handleType);
      uint32_t byteLength = sizeof(VkImportSemaphoreWin32HandleInfoKHR::handleType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "handleType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImportSemaphoreWin32HandleInfoKHR, handle);
      uint32_t byteLength = sizeof(VkImportSemaphoreWin32HandleInfoKHR::handle);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "handle"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImportSemaphoreWin32HandleInfoKHR, name);
      uint32_t byteLength = sizeof(VkImportSemaphoreWin32HandleInfoKHR::name);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "name"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkImportSemaphoreWin32HandleInfoKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkExportSemaphoreWin32HandleInfoKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExportSemaphoreWin32HandleInfoKHR, sType);
      uint32_t byteLength = sizeof(VkExportSemaphoreWin32HandleInfoKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExportSemaphoreWin32HandleInfoKHR, pNext);
      uint32_t byteLength = sizeof(VkExportSemaphoreWin32HandleInfoKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExportSemaphoreWin32HandleInfoKHR, pAttributes);
      uint32_t byteLength = sizeof(VkExportSemaphoreWin32HandleInfoKHR::pAttributes);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pAttributes"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExportSemaphoreWin32HandleInfoKHR, dwAccess);
      uint32_t byteLength = sizeof(VkExportSemaphoreWin32HandleInfoKHR::dwAccess);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "dwAccess"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExportSemaphoreWin32HandleInfoKHR, name);
      uint32_t byteLength = sizeof(VkExportSemaphoreWin32HandleInfoKHR::name);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "name"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkExportSemaphoreWin32HandleInfoKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkD3D12FenceSubmitInfoKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkD3D12FenceSubmitInfoKHR, sType);
      uint32_t byteLength = sizeof(VkD3D12FenceSubmitInfoKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkD3D12FenceSubmitInfoKHR, pNext);
      uint32_t byteLength = sizeof(VkD3D12FenceSubmitInfoKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkD3D12FenceSubmitInfoKHR, waitSemaphoreValuesCount);
      uint32_t byteLength = sizeof(VkD3D12FenceSubmitInfoKHR::waitSemaphoreValuesCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "waitSemaphoreValuesCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkD3D12FenceSubmitInfoKHR, pWaitSemaphoreValues);
      uint32_t byteLength = sizeof(VkD3D12FenceSubmitInfoKHR::pWaitSemaphoreValues);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pWaitSemaphoreValues"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkD3D12FenceSubmitInfoKHR, signalSemaphoreValuesCount);
      uint32_t byteLength = sizeof(VkD3D12FenceSubmitInfoKHR::signalSemaphoreValuesCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "signalSemaphoreValuesCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkD3D12FenceSubmitInfoKHR, pSignalSemaphoreValues);
      uint32_t byteLength = sizeof(VkD3D12FenceSubmitInfoKHR::pSignalSemaphoreValues);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pSignalSemaphoreValues"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkD3D12FenceSubmitInfoKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkSemaphoreGetWin32HandleInfoKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSemaphoreGetWin32HandleInfoKHR, sType);
      uint32_t byteLength = sizeof(VkSemaphoreGetWin32HandleInfoKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSemaphoreGetWin32HandleInfoKHR, pNext);
      uint32_t byteLength = sizeof(VkSemaphoreGetWin32HandleInfoKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSemaphoreGetWin32HandleInfoKHR, semaphore);
      uint32_t byteLength = sizeof(VkSemaphoreGetWin32HandleInfoKHR::semaphore);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "semaphore"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSemaphoreGetWin32HandleInfoKHR, handleType);
      uint32_t byteLength = sizeof(VkSemaphoreGetWin32HandleInfoKHR::handleType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "handleType"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkSemaphoreGetWin32HandleInfoKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkImportSemaphoreFdInfoKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImportSemaphoreFdInfoKHR, sType);
      uint32_t byteLength = sizeof(VkImportSemaphoreFdInfoKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImportSemaphoreFdInfoKHR, pNext);
      uint32_t byteLength = sizeof(VkImportSemaphoreFdInfoKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImportSemaphoreFdInfoKHR, semaphore);
      uint32_t byteLength = sizeof(VkImportSemaphoreFdInfoKHR::semaphore);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "semaphore"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImportSemaphoreFdInfoKHR, flags);
      uint32_t byteLength = sizeof(VkImportSemaphoreFdInfoKHR::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImportSemaphoreFdInfoKHR, handleType);
      uint32_t byteLength = sizeof(VkImportSemaphoreFdInfoKHR::handleType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "handleType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImportSemaphoreFdInfoKHR, fd);
      uint32_t byteLength = sizeof(VkImportSemaphoreFdInfoKHR::fd);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "fd"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkImportSemaphoreFdInfoKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkSemaphoreGetFdInfoKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSemaphoreGetFdInfoKHR, sType);
      uint32_t byteLength = sizeof(VkSemaphoreGetFdInfoKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSemaphoreGetFdInfoKHR, pNext);
      uint32_t byteLength = sizeof(VkSemaphoreGetFdInfoKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSemaphoreGetFdInfoKHR, semaphore);
      uint32_t byteLength = sizeof(VkSemaphoreGetFdInfoKHR::semaphore);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "semaphore"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSemaphoreGetFdInfoKHR, handleType);
      uint32_t byteLength = sizeof(VkSemaphoreGetFdInfoKHR::handleType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "handleType"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkSemaphoreGetFdInfoKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceExternalFenceInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceExternalFenceInfo, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceExternalFenceInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceExternalFenceInfo, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceExternalFenceInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceExternalFenceInfo, handleType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceExternalFenceInfo::handleType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "handleType"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceExternalFenceInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceExternalFenceInfoKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceExternalFenceInfoKHR, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceExternalFenceInfoKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceExternalFenceInfoKHR, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceExternalFenceInfoKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceExternalFenceInfoKHR, handleType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceExternalFenceInfoKHR::handleType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "handleType"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceExternalFenceInfoKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkExternalFenceProperties)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExternalFenceProperties, sType);
      uint32_t byteLength = sizeof(VkExternalFenceProperties::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExternalFenceProperties, pNext);
      uint32_t byteLength = sizeof(VkExternalFenceProperties::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExternalFenceProperties, exportFromImportedHandleTypes);
      uint32_t byteLength = sizeof(VkExternalFenceProperties::exportFromImportedHandleTypes);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "exportFromImportedHandleTypes"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExternalFenceProperties, compatibleHandleTypes);
      uint32_t byteLength = sizeof(VkExternalFenceProperties::compatibleHandleTypes);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "compatibleHandleTypes"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExternalFenceProperties, externalFenceFeatures);
      uint32_t byteLength = sizeof(VkExternalFenceProperties::externalFenceFeatures);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "externalFenceFeatures"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkExternalFenceProperties"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkExternalFencePropertiesKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExternalFencePropertiesKHR, sType);
      uint32_t byteLength = sizeof(VkExternalFencePropertiesKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExternalFencePropertiesKHR, pNext);
      uint32_t byteLength = sizeof(VkExternalFencePropertiesKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExternalFencePropertiesKHR, exportFromImportedHandleTypes);
      uint32_t byteLength = sizeof(VkExternalFencePropertiesKHR::exportFromImportedHandleTypes);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "exportFromImportedHandleTypes"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExternalFencePropertiesKHR, compatibleHandleTypes);
      uint32_t byteLength = sizeof(VkExternalFencePropertiesKHR::compatibleHandleTypes);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "compatibleHandleTypes"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExternalFencePropertiesKHR, externalFenceFeatures);
      uint32_t byteLength = sizeof(VkExternalFencePropertiesKHR::externalFenceFeatures);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "externalFenceFeatures"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkExternalFencePropertiesKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkExportFenceCreateInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExportFenceCreateInfo, sType);
      uint32_t byteLength = sizeof(VkExportFenceCreateInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExportFenceCreateInfo, pNext);
      uint32_t byteLength = sizeof(VkExportFenceCreateInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExportFenceCreateInfo, handleTypes);
      uint32_t byteLength = sizeof(VkExportFenceCreateInfo::handleTypes);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "handleTypes"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkExportFenceCreateInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkExportFenceCreateInfoKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExportFenceCreateInfoKHR, sType);
      uint32_t byteLength = sizeof(VkExportFenceCreateInfoKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExportFenceCreateInfoKHR, pNext);
      uint32_t byteLength = sizeof(VkExportFenceCreateInfoKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExportFenceCreateInfoKHR, handleTypes);
      uint32_t byteLength = sizeof(VkExportFenceCreateInfoKHR::handleTypes);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "handleTypes"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkExportFenceCreateInfoKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkImportFenceWin32HandleInfoKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImportFenceWin32HandleInfoKHR, sType);
      uint32_t byteLength = sizeof(VkImportFenceWin32HandleInfoKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImportFenceWin32HandleInfoKHR, pNext);
      uint32_t byteLength = sizeof(VkImportFenceWin32HandleInfoKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImportFenceWin32HandleInfoKHR, fence);
      uint32_t byteLength = sizeof(VkImportFenceWin32HandleInfoKHR::fence);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "fence"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImportFenceWin32HandleInfoKHR, flags);
      uint32_t byteLength = sizeof(VkImportFenceWin32HandleInfoKHR::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImportFenceWin32HandleInfoKHR, handleType);
      uint32_t byteLength = sizeof(VkImportFenceWin32HandleInfoKHR::handleType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "handleType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImportFenceWin32HandleInfoKHR, handle);
      uint32_t byteLength = sizeof(VkImportFenceWin32HandleInfoKHR::handle);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "handle"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImportFenceWin32HandleInfoKHR, name);
      uint32_t byteLength = sizeof(VkImportFenceWin32HandleInfoKHR::name);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "name"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkImportFenceWin32HandleInfoKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkExportFenceWin32HandleInfoKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExportFenceWin32HandleInfoKHR, sType);
      uint32_t byteLength = sizeof(VkExportFenceWin32HandleInfoKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExportFenceWin32HandleInfoKHR, pNext);
      uint32_t byteLength = sizeof(VkExportFenceWin32HandleInfoKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExportFenceWin32HandleInfoKHR, pAttributes);
      uint32_t byteLength = sizeof(VkExportFenceWin32HandleInfoKHR::pAttributes);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pAttributes"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExportFenceWin32HandleInfoKHR, dwAccess);
      uint32_t byteLength = sizeof(VkExportFenceWin32HandleInfoKHR::dwAccess);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "dwAccess"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkExportFenceWin32HandleInfoKHR, name);
      uint32_t byteLength = sizeof(VkExportFenceWin32HandleInfoKHR::name);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "name"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkExportFenceWin32HandleInfoKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkFenceGetWin32HandleInfoKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkFenceGetWin32HandleInfoKHR, sType);
      uint32_t byteLength = sizeof(VkFenceGetWin32HandleInfoKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkFenceGetWin32HandleInfoKHR, pNext);
      uint32_t byteLength = sizeof(VkFenceGetWin32HandleInfoKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkFenceGetWin32HandleInfoKHR, fence);
      uint32_t byteLength = sizeof(VkFenceGetWin32HandleInfoKHR::fence);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "fence"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkFenceGetWin32HandleInfoKHR, handleType);
      uint32_t byteLength = sizeof(VkFenceGetWin32HandleInfoKHR::handleType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "handleType"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkFenceGetWin32HandleInfoKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkImportFenceFdInfoKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImportFenceFdInfoKHR, sType);
      uint32_t byteLength = sizeof(VkImportFenceFdInfoKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImportFenceFdInfoKHR, pNext);
      uint32_t byteLength = sizeof(VkImportFenceFdInfoKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImportFenceFdInfoKHR, fence);
      uint32_t byteLength = sizeof(VkImportFenceFdInfoKHR::fence);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "fence"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImportFenceFdInfoKHR, flags);
      uint32_t byteLength = sizeof(VkImportFenceFdInfoKHR::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImportFenceFdInfoKHR, handleType);
      uint32_t byteLength = sizeof(VkImportFenceFdInfoKHR::handleType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "handleType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImportFenceFdInfoKHR, fd);
      uint32_t byteLength = sizeof(VkImportFenceFdInfoKHR::fd);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "fd"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkImportFenceFdInfoKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkFenceGetFdInfoKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkFenceGetFdInfoKHR, sType);
      uint32_t byteLength = sizeof(VkFenceGetFdInfoKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkFenceGetFdInfoKHR, pNext);
      uint32_t byteLength = sizeof(VkFenceGetFdInfoKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkFenceGetFdInfoKHR, fence);
      uint32_t byteLength = sizeof(VkFenceGetFdInfoKHR::fence);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "fence"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkFenceGetFdInfoKHR, handleType);
      uint32_t byteLength = sizeof(VkFenceGetFdInfoKHR::handleType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "handleType"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkFenceGetFdInfoKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceMultiviewFeatures)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceMultiviewFeatures, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceMultiviewFeatures::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceMultiviewFeatures, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceMultiviewFeatures::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceMultiviewFeatures, multiview);
      uint32_t byteLength = sizeof(VkPhysicalDeviceMultiviewFeatures::multiview);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "multiview"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceMultiviewFeatures, multiviewGeometryShader);
      uint32_t byteLength = sizeof(VkPhysicalDeviceMultiviewFeatures::multiviewGeometryShader);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "multiviewGeometryShader"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceMultiviewFeatures, multiviewTessellationShader);
      uint32_t byteLength = sizeof(VkPhysicalDeviceMultiviewFeatures::multiviewTessellationShader);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "multiviewTessellationShader"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceMultiviewFeatures"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceMultiviewFeaturesKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceMultiviewFeaturesKHR, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceMultiviewFeaturesKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceMultiviewFeaturesKHR, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceMultiviewFeaturesKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceMultiviewFeaturesKHR, multiview);
      uint32_t byteLength = sizeof(VkPhysicalDeviceMultiviewFeaturesKHR::multiview);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "multiview"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceMultiviewFeaturesKHR, multiviewGeometryShader);
      uint32_t byteLength = sizeof(VkPhysicalDeviceMultiviewFeaturesKHR::multiviewGeometryShader);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "multiviewGeometryShader"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceMultiviewFeaturesKHR, multiviewTessellationShader);
      uint32_t byteLength = sizeof(VkPhysicalDeviceMultiviewFeaturesKHR::multiviewTessellationShader);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "multiviewTessellationShader"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceMultiviewFeaturesKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceMultiviewProperties)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceMultiviewProperties, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceMultiviewProperties::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceMultiviewProperties, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceMultiviewProperties::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceMultiviewProperties, maxMultiviewViewCount);
      uint32_t byteLength = sizeof(VkPhysicalDeviceMultiviewProperties::maxMultiviewViewCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxMultiviewViewCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceMultiviewProperties, maxMultiviewInstanceIndex);
      uint32_t byteLength = sizeof(VkPhysicalDeviceMultiviewProperties::maxMultiviewInstanceIndex);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxMultiviewInstanceIndex"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceMultiviewProperties"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceMultiviewPropertiesKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceMultiviewPropertiesKHR, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceMultiviewPropertiesKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceMultiviewPropertiesKHR, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceMultiviewPropertiesKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceMultiviewPropertiesKHR, maxMultiviewViewCount);
      uint32_t byteLength = sizeof(VkPhysicalDeviceMultiviewPropertiesKHR::maxMultiviewViewCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxMultiviewViewCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceMultiviewPropertiesKHR, maxMultiviewInstanceIndex);
      uint32_t byteLength = sizeof(VkPhysicalDeviceMultiviewPropertiesKHR::maxMultiviewInstanceIndex);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxMultiviewInstanceIndex"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceMultiviewPropertiesKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkRenderPassMultiviewCreateInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRenderPassMultiviewCreateInfo, sType);
      uint32_t byteLength = sizeof(VkRenderPassMultiviewCreateInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRenderPassMultiviewCreateInfo, pNext);
      uint32_t byteLength = sizeof(VkRenderPassMultiviewCreateInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRenderPassMultiviewCreateInfo, subpassCount);
      uint32_t byteLength = sizeof(VkRenderPassMultiviewCreateInfo::subpassCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "subpassCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRenderPassMultiviewCreateInfo, pViewMasks);
      uint32_t byteLength = sizeof(VkRenderPassMultiviewCreateInfo::pViewMasks);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pViewMasks"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRenderPassMultiviewCreateInfo, dependencyCount);
      uint32_t byteLength = sizeof(VkRenderPassMultiviewCreateInfo::dependencyCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "dependencyCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRenderPassMultiviewCreateInfo, pViewOffsets);
      uint32_t byteLength = sizeof(VkRenderPassMultiviewCreateInfo::pViewOffsets);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pViewOffsets"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRenderPassMultiviewCreateInfo, correlationMaskCount);
      uint32_t byteLength = sizeof(VkRenderPassMultiviewCreateInfo::correlationMaskCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "correlationMaskCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRenderPassMultiviewCreateInfo, pCorrelationMasks);
      uint32_t byteLength = sizeof(VkRenderPassMultiviewCreateInfo::pCorrelationMasks);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pCorrelationMasks"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkRenderPassMultiviewCreateInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkRenderPassMultiviewCreateInfoKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRenderPassMultiviewCreateInfoKHR, sType);
      uint32_t byteLength = sizeof(VkRenderPassMultiviewCreateInfoKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRenderPassMultiviewCreateInfoKHR, pNext);
      uint32_t byteLength = sizeof(VkRenderPassMultiviewCreateInfoKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRenderPassMultiviewCreateInfoKHR, subpassCount);
      uint32_t byteLength = sizeof(VkRenderPassMultiviewCreateInfoKHR::subpassCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "subpassCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRenderPassMultiviewCreateInfoKHR, pViewMasks);
      uint32_t byteLength = sizeof(VkRenderPassMultiviewCreateInfoKHR::pViewMasks);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pViewMasks"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRenderPassMultiviewCreateInfoKHR, dependencyCount);
      uint32_t byteLength = sizeof(VkRenderPassMultiviewCreateInfoKHR::dependencyCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "dependencyCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRenderPassMultiviewCreateInfoKHR, pViewOffsets);
      uint32_t byteLength = sizeof(VkRenderPassMultiviewCreateInfoKHR::pViewOffsets);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pViewOffsets"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRenderPassMultiviewCreateInfoKHR, correlationMaskCount);
      uint32_t byteLength = sizeof(VkRenderPassMultiviewCreateInfoKHR::correlationMaskCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "correlationMaskCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRenderPassMultiviewCreateInfoKHR, pCorrelationMasks);
      uint32_t byteLength = sizeof(VkRenderPassMultiviewCreateInfoKHR::pCorrelationMasks);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pCorrelationMasks"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkRenderPassMultiviewCreateInfoKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkSurfaceCapabilities2EXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSurfaceCapabilities2EXT, sType);
      uint32_t byteLength = sizeof(VkSurfaceCapabilities2EXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSurfaceCapabilities2EXT, pNext);
      uint32_t byteLength = sizeof(VkSurfaceCapabilities2EXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSurfaceCapabilities2EXT, minImageCount);
      uint32_t byteLength = sizeof(VkSurfaceCapabilities2EXT::minImageCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "minImageCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSurfaceCapabilities2EXT, maxImageCount);
      uint32_t byteLength = sizeof(VkSurfaceCapabilities2EXT::maxImageCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxImageCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSurfaceCapabilities2EXT, currentExtent);
      uint32_t byteLength = sizeof(VkSurfaceCapabilities2EXT::currentExtent);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "currentExtent"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSurfaceCapabilities2EXT, minImageExtent);
      uint32_t byteLength = sizeof(VkSurfaceCapabilities2EXT::minImageExtent);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "minImageExtent"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSurfaceCapabilities2EXT, maxImageExtent);
      uint32_t byteLength = sizeof(VkSurfaceCapabilities2EXT::maxImageExtent);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxImageExtent"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSurfaceCapabilities2EXT, maxImageArrayLayers);
      uint32_t byteLength = sizeof(VkSurfaceCapabilities2EXT::maxImageArrayLayers);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxImageArrayLayers"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSurfaceCapabilities2EXT, supportedTransforms);
      uint32_t byteLength = sizeof(VkSurfaceCapabilities2EXT::supportedTransforms);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "supportedTransforms"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSurfaceCapabilities2EXT, currentTransform);
      uint32_t byteLength = sizeof(VkSurfaceCapabilities2EXT::currentTransform);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "currentTransform"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSurfaceCapabilities2EXT, supportedCompositeAlpha);
      uint32_t byteLength = sizeof(VkSurfaceCapabilities2EXT::supportedCompositeAlpha);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "supportedCompositeAlpha"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSurfaceCapabilities2EXT, supportedUsageFlags);
      uint32_t byteLength = sizeof(VkSurfaceCapabilities2EXT::supportedUsageFlags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "supportedUsageFlags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSurfaceCapabilities2EXT, supportedSurfaceCounters);
      uint32_t byteLength = sizeof(VkSurfaceCapabilities2EXT::supportedSurfaceCounters);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "supportedSurfaceCounters"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkSurfaceCapabilities2EXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDisplayPowerInfoEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDisplayPowerInfoEXT, sType);
      uint32_t byteLength = sizeof(VkDisplayPowerInfoEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDisplayPowerInfoEXT, pNext);
      uint32_t byteLength = sizeof(VkDisplayPowerInfoEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDisplayPowerInfoEXT, powerState);
      uint32_t byteLength = sizeof(VkDisplayPowerInfoEXT::powerState);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "powerState"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDisplayPowerInfoEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDeviceEventInfoEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceEventInfoEXT, sType);
      uint32_t byteLength = sizeof(VkDeviceEventInfoEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceEventInfoEXT, pNext);
      uint32_t byteLength = sizeof(VkDeviceEventInfoEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceEventInfoEXT, deviceEvent);
      uint32_t byteLength = sizeof(VkDeviceEventInfoEXT::deviceEvent);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "deviceEvent"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDeviceEventInfoEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDisplayEventInfoEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDisplayEventInfoEXT, sType);
      uint32_t byteLength = sizeof(VkDisplayEventInfoEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDisplayEventInfoEXT, pNext);
      uint32_t byteLength = sizeof(VkDisplayEventInfoEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDisplayEventInfoEXT, displayEvent);
      uint32_t byteLength = sizeof(VkDisplayEventInfoEXT::displayEvent);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "displayEvent"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDisplayEventInfoEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkSwapchainCounterCreateInfoEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSwapchainCounterCreateInfoEXT, sType);
      uint32_t byteLength = sizeof(VkSwapchainCounterCreateInfoEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSwapchainCounterCreateInfoEXT, pNext);
      uint32_t byteLength = sizeof(VkSwapchainCounterCreateInfoEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSwapchainCounterCreateInfoEXT, surfaceCounters);
      uint32_t byteLength = sizeof(VkSwapchainCounterCreateInfoEXT::surfaceCounters);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "surfaceCounters"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkSwapchainCounterCreateInfoEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceGroupProperties)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceGroupProperties, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceGroupProperties::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceGroupProperties, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceGroupProperties::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceGroupProperties, physicalDeviceCount);
      uint32_t byteLength = sizeof(VkPhysicalDeviceGroupProperties::physicalDeviceCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "physicalDeviceCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceGroupProperties, physicalDevices);
      uint32_t byteLength = sizeof(VkPhysicalDeviceGroupProperties::physicalDevices);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "physicalDevices"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceGroupProperties, subsetAllocation);
      uint32_t byteLength = sizeof(VkPhysicalDeviceGroupProperties::subsetAllocation);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "subsetAllocation"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceGroupProperties"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceGroupPropertiesKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceGroupPropertiesKHR, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceGroupPropertiesKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceGroupPropertiesKHR, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceGroupPropertiesKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceGroupPropertiesKHR, physicalDeviceCount);
      uint32_t byteLength = sizeof(VkPhysicalDeviceGroupPropertiesKHR::physicalDeviceCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "physicalDeviceCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceGroupPropertiesKHR, physicalDevices);
      uint32_t byteLength = sizeof(VkPhysicalDeviceGroupPropertiesKHR::physicalDevices);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "physicalDevices"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceGroupPropertiesKHR, subsetAllocation);
      uint32_t byteLength = sizeof(VkPhysicalDeviceGroupPropertiesKHR::subsetAllocation);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "subsetAllocation"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceGroupPropertiesKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkMemoryAllocateFlagsInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMemoryAllocateFlagsInfo, sType);
      uint32_t byteLength = sizeof(VkMemoryAllocateFlagsInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMemoryAllocateFlagsInfo, pNext);
      uint32_t byteLength = sizeof(VkMemoryAllocateFlagsInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMemoryAllocateFlagsInfo, flags);
      uint32_t byteLength = sizeof(VkMemoryAllocateFlagsInfo::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMemoryAllocateFlagsInfo, deviceMask);
      uint32_t byteLength = sizeof(VkMemoryAllocateFlagsInfo::deviceMask);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "deviceMask"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkMemoryAllocateFlagsInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkMemoryAllocateFlagsInfoKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMemoryAllocateFlagsInfoKHR, sType);
      uint32_t byteLength = sizeof(VkMemoryAllocateFlagsInfoKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMemoryAllocateFlagsInfoKHR, pNext);
      uint32_t byteLength = sizeof(VkMemoryAllocateFlagsInfoKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMemoryAllocateFlagsInfoKHR, flags);
      uint32_t byteLength = sizeof(VkMemoryAllocateFlagsInfoKHR::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMemoryAllocateFlagsInfoKHR, deviceMask);
      uint32_t byteLength = sizeof(VkMemoryAllocateFlagsInfoKHR::deviceMask);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "deviceMask"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkMemoryAllocateFlagsInfoKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkBindBufferMemoryInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindBufferMemoryInfo, sType);
      uint32_t byteLength = sizeof(VkBindBufferMemoryInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindBufferMemoryInfo, pNext);
      uint32_t byteLength = sizeof(VkBindBufferMemoryInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindBufferMemoryInfo, buffer);
      uint32_t byteLength = sizeof(VkBindBufferMemoryInfo::buffer);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "buffer"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindBufferMemoryInfo, memory);
      uint32_t byteLength = sizeof(VkBindBufferMemoryInfo::memory);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "memory"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindBufferMemoryInfo, memoryOffset);
      uint32_t byteLength = sizeof(VkBindBufferMemoryInfo::memoryOffset);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "memoryOffset"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkBindBufferMemoryInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkBindBufferMemoryInfoKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindBufferMemoryInfoKHR, sType);
      uint32_t byteLength = sizeof(VkBindBufferMemoryInfoKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindBufferMemoryInfoKHR, pNext);
      uint32_t byteLength = sizeof(VkBindBufferMemoryInfoKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindBufferMemoryInfoKHR, buffer);
      uint32_t byteLength = sizeof(VkBindBufferMemoryInfoKHR::buffer);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "buffer"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindBufferMemoryInfoKHR, memory);
      uint32_t byteLength = sizeof(VkBindBufferMemoryInfoKHR::memory);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "memory"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindBufferMemoryInfoKHR, memoryOffset);
      uint32_t byteLength = sizeof(VkBindBufferMemoryInfoKHR::memoryOffset);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "memoryOffset"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkBindBufferMemoryInfoKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkBindBufferMemoryDeviceGroupInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindBufferMemoryDeviceGroupInfo, sType);
      uint32_t byteLength = sizeof(VkBindBufferMemoryDeviceGroupInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindBufferMemoryDeviceGroupInfo, pNext);
      uint32_t byteLength = sizeof(VkBindBufferMemoryDeviceGroupInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindBufferMemoryDeviceGroupInfo, deviceIndexCount);
      uint32_t byteLength = sizeof(VkBindBufferMemoryDeviceGroupInfo::deviceIndexCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "deviceIndexCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindBufferMemoryDeviceGroupInfo, pDeviceIndices);
      uint32_t byteLength = sizeof(VkBindBufferMemoryDeviceGroupInfo::pDeviceIndices);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pDeviceIndices"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkBindBufferMemoryDeviceGroupInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkBindBufferMemoryDeviceGroupInfoKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindBufferMemoryDeviceGroupInfoKHR, sType);
      uint32_t byteLength = sizeof(VkBindBufferMemoryDeviceGroupInfoKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindBufferMemoryDeviceGroupInfoKHR, pNext);
      uint32_t byteLength = sizeof(VkBindBufferMemoryDeviceGroupInfoKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindBufferMemoryDeviceGroupInfoKHR, deviceIndexCount);
      uint32_t byteLength = sizeof(VkBindBufferMemoryDeviceGroupInfoKHR::deviceIndexCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "deviceIndexCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindBufferMemoryDeviceGroupInfoKHR, pDeviceIndices);
      uint32_t byteLength = sizeof(VkBindBufferMemoryDeviceGroupInfoKHR::pDeviceIndices);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pDeviceIndices"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkBindBufferMemoryDeviceGroupInfoKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkBindImageMemoryInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindImageMemoryInfo, sType);
      uint32_t byteLength = sizeof(VkBindImageMemoryInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindImageMemoryInfo, pNext);
      uint32_t byteLength = sizeof(VkBindImageMemoryInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindImageMemoryInfo, image);
      uint32_t byteLength = sizeof(VkBindImageMemoryInfo::image);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "image"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindImageMemoryInfo, memory);
      uint32_t byteLength = sizeof(VkBindImageMemoryInfo::memory);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "memory"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindImageMemoryInfo, memoryOffset);
      uint32_t byteLength = sizeof(VkBindImageMemoryInfo::memoryOffset);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "memoryOffset"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkBindImageMemoryInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkBindImageMemoryInfoKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindImageMemoryInfoKHR, sType);
      uint32_t byteLength = sizeof(VkBindImageMemoryInfoKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindImageMemoryInfoKHR, pNext);
      uint32_t byteLength = sizeof(VkBindImageMemoryInfoKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindImageMemoryInfoKHR, image);
      uint32_t byteLength = sizeof(VkBindImageMemoryInfoKHR::image);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "image"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindImageMemoryInfoKHR, memory);
      uint32_t byteLength = sizeof(VkBindImageMemoryInfoKHR::memory);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "memory"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindImageMemoryInfoKHR, memoryOffset);
      uint32_t byteLength = sizeof(VkBindImageMemoryInfoKHR::memoryOffset);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "memoryOffset"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkBindImageMemoryInfoKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkBindImageMemoryDeviceGroupInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindImageMemoryDeviceGroupInfo, sType);
      uint32_t byteLength = sizeof(VkBindImageMemoryDeviceGroupInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindImageMemoryDeviceGroupInfo, pNext);
      uint32_t byteLength = sizeof(VkBindImageMemoryDeviceGroupInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindImageMemoryDeviceGroupInfo, deviceIndexCount);
      uint32_t byteLength = sizeof(VkBindImageMemoryDeviceGroupInfo::deviceIndexCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "deviceIndexCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindImageMemoryDeviceGroupInfo, pDeviceIndices);
      uint32_t byteLength = sizeof(VkBindImageMemoryDeviceGroupInfo::pDeviceIndices);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pDeviceIndices"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindImageMemoryDeviceGroupInfo, splitInstanceBindRegionCount);
      uint32_t byteLength = sizeof(VkBindImageMemoryDeviceGroupInfo::splitInstanceBindRegionCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "splitInstanceBindRegionCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindImageMemoryDeviceGroupInfo, pSplitInstanceBindRegions);
      uint32_t byteLength = sizeof(VkBindImageMemoryDeviceGroupInfo::pSplitInstanceBindRegions);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pSplitInstanceBindRegions"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkBindImageMemoryDeviceGroupInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkBindImageMemoryDeviceGroupInfoKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindImageMemoryDeviceGroupInfoKHR, sType);
      uint32_t byteLength = sizeof(VkBindImageMemoryDeviceGroupInfoKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindImageMemoryDeviceGroupInfoKHR, pNext);
      uint32_t byteLength = sizeof(VkBindImageMemoryDeviceGroupInfoKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindImageMemoryDeviceGroupInfoKHR, deviceIndexCount);
      uint32_t byteLength = sizeof(VkBindImageMemoryDeviceGroupInfoKHR::deviceIndexCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "deviceIndexCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindImageMemoryDeviceGroupInfoKHR, pDeviceIndices);
      uint32_t byteLength = sizeof(VkBindImageMemoryDeviceGroupInfoKHR::pDeviceIndices);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pDeviceIndices"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindImageMemoryDeviceGroupInfoKHR, splitInstanceBindRegionCount);
      uint32_t byteLength = sizeof(VkBindImageMemoryDeviceGroupInfoKHR::splitInstanceBindRegionCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "splitInstanceBindRegionCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindImageMemoryDeviceGroupInfoKHR, pSplitInstanceBindRegions);
      uint32_t byteLength = sizeof(VkBindImageMemoryDeviceGroupInfoKHR::pSplitInstanceBindRegions);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pSplitInstanceBindRegions"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkBindImageMemoryDeviceGroupInfoKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDeviceGroupRenderPassBeginInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGroupRenderPassBeginInfo, sType);
      uint32_t byteLength = sizeof(VkDeviceGroupRenderPassBeginInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGroupRenderPassBeginInfo, pNext);
      uint32_t byteLength = sizeof(VkDeviceGroupRenderPassBeginInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGroupRenderPassBeginInfo, deviceMask);
      uint32_t byteLength = sizeof(VkDeviceGroupRenderPassBeginInfo::deviceMask);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "deviceMask"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGroupRenderPassBeginInfo, deviceRenderAreaCount);
      uint32_t byteLength = sizeof(VkDeviceGroupRenderPassBeginInfo::deviceRenderAreaCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "deviceRenderAreaCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGroupRenderPassBeginInfo, pDeviceRenderAreas);
      uint32_t byteLength = sizeof(VkDeviceGroupRenderPassBeginInfo::pDeviceRenderAreas);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pDeviceRenderAreas"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDeviceGroupRenderPassBeginInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDeviceGroupRenderPassBeginInfoKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGroupRenderPassBeginInfoKHR, sType);
      uint32_t byteLength = sizeof(VkDeviceGroupRenderPassBeginInfoKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGroupRenderPassBeginInfoKHR, pNext);
      uint32_t byteLength = sizeof(VkDeviceGroupRenderPassBeginInfoKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGroupRenderPassBeginInfoKHR, deviceMask);
      uint32_t byteLength = sizeof(VkDeviceGroupRenderPassBeginInfoKHR::deviceMask);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "deviceMask"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGroupRenderPassBeginInfoKHR, deviceRenderAreaCount);
      uint32_t byteLength = sizeof(VkDeviceGroupRenderPassBeginInfoKHR::deviceRenderAreaCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "deviceRenderAreaCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGroupRenderPassBeginInfoKHR, pDeviceRenderAreas);
      uint32_t byteLength = sizeof(VkDeviceGroupRenderPassBeginInfoKHR::pDeviceRenderAreas);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pDeviceRenderAreas"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDeviceGroupRenderPassBeginInfoKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDeviceGroupCommandBufferBeginInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGroupCommandBufferBeginInfo, sType);
      uint32_t byteLength = sizeof(VkDeviceGroupCommandBufferBeginInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGroupCommandBufferBeginInfo, pNext);
      uint32_t byteLength = sizeof(VkDeviceGroupCommandBufferBeginInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGroupCommandBufferBeginInfo, deviceMask);
      uint32_t byteLength = sizeof(VkDeviceGroupCommandBufferBeginInfo::deviceMask);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "deviceMask"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDeviceGroupCommandBufferBeginInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDeviceGroupCommandBufferBeginInfoKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGroupCommandBufferBeginInfoKHR, sType);
      uint32_t byteLength = sizeof(VkDeviceGroupCommandBufferBeginInfoKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGroupCommandBufferBeginInfoKHR, pNext);
      uint32_t byteLength = sizeof(VkDeviceGroupCommandBufferBeginInfoKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGroupCommandBufferBeginInfoKHR, deviceMask);
      uint32_t byteLength = sizeof(VkDeviceGroupCommandBufferBeginInfoKHR::deviceMask);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "deviceMask"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDeviceGroupCommandBufferBeginInfoKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDeviceGroupSubmitInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGroupSubmitInfo, sType);
      uint32_t byteLength = sizeof(VkDeviceGroupSubmitInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGroupSubmitInfo, pNext);
      uint32_t byteLength = sizeof(VkDeviceGroupSubmitInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGroupSubmitInfo, waitSemaphoreCount);
      uint32_t byteLength = sizeof(VkDeviceGroupSubmitInfo::waitSemaphoreCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "waitSemaphoreCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGroupSubmitInfo, pWaitSemaphoreDeviceIndices);
      uint32_t byteLength = sizeof(VkDeviceGroupSubmitInfo::pWaitSemaphoreDeviceIndices);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pWaitSemaphoreDeviceIndices"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGroupSubmitInfo, commandBufferCount);
      uint32_t byteLength = sizeof(VkDeviceGroupSubmitInfo::commandBufferCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "commandBufferCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGroupSubmitInfo, pCommandBufferDeviceMasks);
      uint32_t byteLength = sizeof(VkDeviceGroupSubmitInfo::pCommandBufferDeviceMasks);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pCommandBufferDeviceMasks"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGroupSubmitInfo, signalSemaphoreCount);
      uint32_t byteLength = sizeof(VkDeviceGroupSubmitInfo::signalSemaphoreCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "signalSemaphoreCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGroupSubmitInfo, pSignalSemaphoreDeviceIndices);
      uint32_t byteLength = sizeof(VkDeviceGroupSubmitInfo::pSignalSemaphoreDeviceIndices);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pSignalSemaphoreDeviceIndices"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDeviceGroupSubmitInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDeviceGroupSubmitInfoKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGroupSubmitInfoKHR, sType);
      uint32_t byteLength = sizeof(VkDeviceGroupSubmitInfoKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGroupSubmitInfoKHR, pNext);
      uint32_t byteLength = sizeof(VkDeviceGroupSubmitInfoKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGroupSubmitInfoKHR, waitSemaphoreCount);
      uint32_t byteLength = sizeof(VkDeviceGroupSubmitInfoKHR::waitSemaphoreCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "waitSemaphoreCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGroupSubmitInfoKHR, pWaitSemaphoreDeviceIndices);
      uint32_t byteLength = sizeof(VkDeviceGroupSubmitInfoKHR::pWaitSemaphoreDeviceIndices);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pWaitSemaphoreDeviceIndices"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGroupSubmitInfoKHR, commandBufferCount);
      uint32_t byteLength = sizeof(VkDeviceGroupSubmitInfoKHR::commandBufferCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "commandBufferCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGroupSubmitInfoKHR, pCommandBufferDeviceMasks);
      uint32_t byteLength = sizeof(VkDeviceGroupSubmitInfoKHR::pCommandBufferDeviceMasks);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pCommandBufferDeviceMasks"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGroupSubmitInfoKHR, signalSemaphoreCount);
      uint32_t byteLength = sizeof(VkDeviceGroupSubmitInfoKHR::signalSemaphoreCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "signalSemaphoreCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGroupSubmitInfoKHR, pSignalSemaphoreDeviceIndices);
      uint32_t byteLength = sizeof(VkDeviceGroupSubmitInfoKHR::pSignalSemaphoreDeviceIndices);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pSignalSemaphoreDeviceIndices"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDeviceGroupSubmitInfoKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDeviceGroupBindSparseInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGroupBindSparseInfo, sType);
      uint32_t byteLength = sizeof(VkDeviceGroupBindSparseInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGroupBindSparseInfo, pNext);
      uint32_t byteLength = sizeof(VkDeviceGroupBindSparseInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGroupBindSparseInfo, resourceDeviceIndex);
      uint32_t byteLength = sizeof(VkDeviceGroupBindSparseInfo::resourceDeviceIndex);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "resourceDeviceIndex"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGroupBindSparseInfo, memoryDeviceIndex);
      uint32_t byteLength = sizeof(VkDeviceGroupBindSparseInfo::memoryDeviceIndex);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "memoryDeviceIndex"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDeviceGroupBindSparseInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDeviceGroupBindSparseInfoKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGroupBindSparseInfoKHR, sType);
      uint32_t byteLength = sizeof(VkDeviceGroupBindSparseInfoKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGroupBindSparseInfoKHR, pNext);
      uint32_t byteLength = sizeof(VkDeviceGroupBindSparseInfoKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGroupBindSparseInfoKHR, resourceDeviceIndex);
      uint32_t byteLength = sizeof(VkDeviceGroupBindSparseInfoKHR::resourceDeviceIndex);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "resourceDeviceIndex"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGroupBindSparseInfoKHR, memoryDeviceIndex);
      uint32_t byteLength = sizeof(VkDeviceGroupBindSparseInfoKHR::memoryDeviceIndex);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "memoryDeviceIndex"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDeviceGroupBindSparseInfoKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDeviceGroupPresentCapabilitiesKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGroupPresentCapabilitiesKHR, sType);
      uint32_t byteLength = sizeof(VkDeviceGroupPresentCapabilitiesKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGroupPresentCapabilitiesKHR, pNext);
      uint32_t byteLength = sizeof(VkDeviceGroupPresentCapabilitiesKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGroupPresentCapabilitiesKHR, presentMask);
      uint32_t byteLength = sizeof(VkDeviceGroupPresentCapabilitiesKHR::presentMask);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "presentMask"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGroupPresentCapabilitiesKHR, modes);
      uint32_t byteLength = sizeof(VkDeviceGroupPresentCapabilitiesKHR::modes);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "modes"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDeviceGroupPresentCapabilitiesKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkImageSwapchainCreateInfoKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageSwapchainCreateInfoKHR, sType);
      uint32_t byteLength = sizeof(VkImageSwapchainCreateInfoKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageSwapchainCreateInfoKHR, pNext);
      uint32_t byteLength = sizeof(VkImageSwapchainCreateInfoKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageSwapchainCreateInfoKHR, swapchain);
      uint32_t byteLength = sizeof(VkImageSwapchainCreateInfoKHR::swapchain);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "swapchain"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkImageSwapchainCreateInfoKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkBindImageMemorySwapchainInfoKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindImageMemorySwapchainInfoKHR, sType);
      uint32_t byteLength = sizeof(VkBindImageMemorySwapchainInfoKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindImageMemorySwapchainInfoKHR, pNext);
      uint32_t byteLength = sizeof(VkBindImageMemorySwapchainInfoKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindImageMemorySwapchainInfoKHR, swapchain);
      uint32_t byteLength = sizeof(VkBindImageMemorySwapchainInfoKHR::swapchain);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "swapchain"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindImageMemorySwapchainInfoKHR, imageIndex);
      uint32_t byteLength = sizeof(VkBindImageMemorySwapchainInfoKHR::imageIndex);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "imageIndex"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkBindImageMemorySwapchainInfoKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkAcquireNextImageInfoKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkAcquireNextImageInfoKHR, sType);
      uint32_t byteLength = sizeof(VkAcquireNextImageInfoKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkAcquireNextImageInfoKHR, pNext);
      uint32_t byteLength = sizeof(VkAcquireNextImageInfoKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkAcquireNextImageInfoKHR, swapchain);
      uint32_t byteLength = sizeof(VkAcquireNextImageInfoKHR::swapchain);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "swapchain"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkAcquireNextImageInfoKHR, timeout);
      uint32_t byteLength = sizeof(VkAcquireNextImageInfoKHR::timeout);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "timeout"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkAcquireNextImageInfoKHR, semaphore);
      uint32_t byteLength = sizeof(VkAcquireNextImageInfoKHR::semaphore);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "semaphore"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkAcquireNextImageInfoKHR, fence);
      uint32_t byteLength = sizeof(VkAcquireNextImageInfoKHR::fence);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "fence"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkAcquireNextImageInfoKHR, deviceMask);
      uint32_t byteLength = sizeof(VkAcquireNextImageInfoKHR::deviceMask);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "deviceMask"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkAcquireNextImageInfoKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDeviceGroupPresentInfoKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGroupPresentInfoKHR, sType);
      uint32_t byteLength = sizeof(VkDeviceGroupPresentInfoKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGroupPresentInfoKHR, pNext);
      uint32_t byteLength = sizeof(VkDeviceGroupPresentInfoKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGroupPresentInfoKHR, swapchainCount);
      uint32_t byteLength = sizeof(VkDeviceGroupPresentInfoKHR::swapchainCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "swapchainCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGroupPresentInfoKHR, pDeviceMasks);
      uint32_t byteLength = sizeof(VkDeviceGroupPresentInfoKHR::pDeviceMasks);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pDeviceMasks"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGroupPresentInfoKHR, mode);
      uint32_t byteLength = sizeof(VkDeviceGroupPresentInfoKHR::mode);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "mode"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDeviceGroupPresentInfoKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDeviceGroupDeviceCreateInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGroupDeviceCreateInfo, sType);
      uint32_t byteLength = sizeof(VkDeviceGroupDeviceCreateInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGroupDeviceCreateInfo, pNext);
      uint32_t byteLength = sizeof(VkDeviceGroupDeviceCreateInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGroupDeviceCreateInfo, physicalDeviceCount);
      uint32_t byteLength = sizeof(VkDeviceGroupDeviceCreateInfo::physicalDeviceCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "physicalDeviceCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGroupDeviceCreateInfo, pPhysicalDevices);
      uint32_t byteLength = sizeof(VkDeviceGroupDeviceCreateInfo::pPhysicalDevices);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pPhysicalDevices"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDeviceGroupDeviceCreateInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDeviceGroupDeviceCreateInfoKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGroupDeviceCreateInfoKHR, sType);
      uint32_t byteLength = sizeof(VkDeviceGroupDeviceCreateInfoKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGroupDeviceCreateInfoKHR, pNext);
      uint32_t byteLength = sizeof(VkDeviceGroupDeviceCreateInfoKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGroupDeviceCreateInfoKHR, physicalDeviceCount);
      uint32_t byteLength = sizeof(VkDeviceGroupDeviceCreateInfoKHR::physicalDeviceCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "physicalDeviceCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGroupDeviceCreateInfoKHR, pPhysicalDevices);
      uint32_t byteLength = sizeof(VkDeviceGroupDeviceCreateInfoKHR::pPhysicalDevices);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pPhysicalDevices"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDeviceGroupDeviceCreateInfoKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDeviceGroupSwapchainCreateInfoKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGroupSwapchainCreateInfoKHR, sType);
      uint32_t byteLength = sizeof(VkDeviceGroupSwapchainCreateInfoKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGroupSwapchainCreateInfoKHR, pNext);
      uint32_t byteLength = sizeof(VkDeviceGroupSwapchainCreateInfoKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceGroupSwapchainCreateInfoKHR, modes);
      uint32_t byteLength = sizeof(VkDeviceGroupSwapchainCreateInfoKHR::modes);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "modes"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDeviceGroupSwapchainCreateInfoKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDescriptorUpdateTemplateEntry)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorUpdateTemplateEntry, dstBinding);
      uint32_t byteLength = sizeof(VkDescriptorUpdateTemplateEntry::dstBinding);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "dstBinding"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorUpdateTemplateEntry, dstArrayElement);
      uint32_t byteLength = sizeof(VkDescriptorUpdateTemplateEntry::dstArrayElement);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "dstArrayElement"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorUpdateTemplateEntry, descriptorCount);
      uint32_t byteLength = sizeof(VkDescriptorUpdateTemplateEntry::descriptorCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "descriptorCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorUpdateTemplateEntry, descriptorType);
      uint32_t byteLength = sizeof(VkDescriptorUpdateTemplateEntry::descriptorType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "descriptorType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorUpdateTemplateEntry, offset);
      uint32_t byteLength = sizeof(VkDescriptorUpdateTemplateEntry::offset);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "offset"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorUpdateTemplateEntry, stride);
      uint32_t byteLength = sizeof(VkDescriptorUpdateTemplateEntry::stride);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "stride"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDescriptorUpdateTemplateEntry"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDescriptorUpdateTemplateEntryKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorUpdateTemplateEntryKHR, dstBinding);
      uint32_t byteLength = sizeof(VkDescriptorUpdateTemplateEntryKHR::dstBinding);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "dstBinding"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorUpdateTemplateEntryKHR, dstArrayElement);
      uint32_t byteLength = sizeof(VkDescriptorUpdateTemplateEntryKHR::dstArrayElement);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "dstArrayElement"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorUpdateTemplateEntryKHR, descriptorCount);
      uint32_t byteLength = sizeof(VkDescriptorUpdateTemplateEntryKHR::descriptorCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "descriptorCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorUpdateTemplateEntryKHR, descriptorType);
      uint32_t byteLength = sizeof(VkDescriptorUpdateTemplateEntryKHR::descriptorType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "descriptorType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorUpdateTemplateEntryKHR, offset);
      uint32_t byteLength = sizeof(VkDescriptorUpdateTemplateEntryKHR::offset);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "offset"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorUpdateTemplateEntryKHR, stride);
      uint32_t byteLength = sizeof(VkDescriptorUpdateTemplateEntryKHR::stride);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "stride"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDescriptorUpdateTemplateEntryKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDescriptorUpdateTemplateCreateInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorUpdateTemplateCreateInfo, sType);
      uint32_t byteLength = sizeof(VkDescriptorUpdateTemplateCreateInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorUpdateTemplateCreateInfo, pNext);
      uint32_t byteLength = sizeof(VkDescriptorUpdateTemplateCreateInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorUpdateTemplateCreateInfo, flags);
      uint32_t byteLength = sizeof(VkDescriptorUpdateTemplateCreateInfo::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorUpdateTemplateCreateInfo, descriptorUpdateEntryCount);
      uint32_t byteLength = sizeof(VkDescriptorUpdateTemplateCreateInfo::descriptorUpdateEntryCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "descriptorUpdateEntryCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorUpdateTemplateCreateInfo, pDescriptorUpdateEntries);
      uint32_t byteLength = sizeof(VkDescriptorUpdateTemplateCreateInfo::pDescriptorUpdateEntries);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pDescriptorUpdateEntries"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorUpdateTemplateCreateInfo, templateType);
      uint32_t byteLength = sizeof(VkDescriptorUpdateTemplateCreateInfo::templateType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "templateType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorUpdateTemplateCreateInfo, descriptorSetLayout);
      uint32_t byteLength = sizeof(VkDescriptorUpdateTemplateCreateInfo::descriptorSetLayout);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "descriptorSetLayout"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorUpdateTemplateCreateInfo, pipelineBindPoint);
      uint32_t byteLength = sizeof(VkDescriptorUpdateTemplateCreateInfo::pipelineBindPoint);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pipelineBindPoint"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorUpdateTemplateCreateInfo, pipelineLayout);
      uint32_t byteLength = sizeof(VkDescriptorUpdateTemplateCreateInfo::pipelineLayout);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pipelineLayout"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorUpdateTemplateCreateInfo, set);
      uint32_t byteLength = sizeof(VkDescriptorUpdateTemplateCreateInfo::set);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "set"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDescriptorUpdateTemplateCreateInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDescriptorUpdateTemplateCreateInfoKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorUpdateTemplateCreateInfoKHR, sType);
      uint32_t byteLength = sizeof(VkDescriptorUpdateTemplateCreateInfoKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorUpdateTemplateCreateInfoKHR, pNext);
      uint32_t byteLength = sizeof(VkDescriptorUpdateTemplateCreateInfoKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorUpdateTemplateCreateInfoKHR, flags);
      uint32_t byteLength = sizeof(VkDescriptorUpdateTemplateCreateInfoKHR::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorUpdateTemplateCreateInfoKHR, descriptorUpdateEntryCount);
      uint32_t byteLength = sizeof(VkDescriptorUpdateTemplateCreateInfoKHR::descriptorUpdateEntryCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "descriptorUpdateEntryCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorUpdateTemplateCreateInfoKHR, pDescriptorUpdateEntries);
      uint32_t byteLength = sizeof(VkDescriptorUpdateTemplateCreateInfoKHR::pDescriptorUpdateEntries);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pDescriptorUpdateEntries"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorUpdateTemplateCreateInfoKHR, templateType);
      uint32_t byteLength = sizeof(VkDescriptorUpdateTemplateCreateInfoKHR::templateType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "templateType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorUpdateTemplateCreateInfoKHR, descriptorSetLayout);
      uint32_t byteLength = sizeof(VkDescriptorUpdateTemplateCreateInfoKHR::descriptorSetLayout);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "descriptorSetLayout"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorUpdateTemplateCreateInfoKHR, pipelineBindPoint);
      uint32_t byteLength = sizeof(VkDescriptorUpdateTemplateCreateInfoKHR::pipelineBindPoint);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pipelineBindPoint"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorUpdateTemplateCreateInfoKHR, pipelineLayout);
      uint32_t byteLength = sizeof(VkDescriptorUpdateTemplateCreateInfoKHR::pipelineLayout);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pipelineLayout"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorUpdateTemplateCreateInfoKHR, set);
      uint32_t byteLength = sizeof(VkDescriptorUpdateTemplateCreateInfoKHR::set);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "set"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDescriptorUpdateTemplateCreateInfoKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkXYColorEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkXYColorEXT, x);
      uint32_t byteLength = sizeof(VkXYColorEXT::x);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "x"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkXYColorEXT, y);
      uint32_t byteLength = sizeof(VkXYColorEXT::y);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "y"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkXYColorEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkHdrMetadataEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkHdrMetadataEXT, sType);
      uint32_t byteLength = sizeof(VkHdrMetadataEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkHdrMetadataEXT, pNext);
      uint32_t byteLength = sizeof(VkHdrMetadataEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkHdrMetadataEXT, displayPrimaryRed);
      uint32_t byteLength = sizeof(VkHdrMetadataEXT::displayPrimaryRed);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "displayPrimaryRed"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkHdrMetadataEXT, displayPrimaryGreen);
      uint32_t byteLength = sizeof(VkHdrMetadataEXT::displayPrimaryGreen);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "displayPrimaryGreen"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkHdrMetadataEXT, displayPrimaryBlue);
      uint32_t byteLength = sizeof(VkHdrMetadataEXT::displayPrimaryBlue);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "displayPrimaryBlue"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkHdrMetadataEXT, whitePoint);
      uint32_t byteLength = sizeof(VkHdrMetadataEXT::whitePoint);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "whitePoint"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkHdrMetadataEXT, maxLuminance);
      uint32_t byteLength = sizeof(VkHdrMetadataEXT::maxLuminance);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxLuminance"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkHdrMetadataEXT, minLuminance);
      uint32_t byteLength = sizeof(VkHdrMetadataEXT::minLuminance);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "minLuminance"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkHdrMetadataEXT, maxContentLightLevel);
      uint32_t byteLength = sizeof(VkHdrMetadataEXT::maxContentLightLevel);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxContentLightLevel"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkHdrMetadataEXT, maxFrameAverageLightLevel);
      uint32_t byteLength = sizeof(VkHdrMetadataEXT::maxFrameAverageLightLevel);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxFrameAverageLightLevel"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkHdrMetadataEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkRefreshCycleDurationGOOGLE)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRefreshCycleDurationGOOGLE, refreshDuration);
      uint32_t byteLength = sizeof(VkRefreshCycleDurationGOOGLE::refreshDuration);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "refreshDuration"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkRefreshCycleDurationGOOGLE"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPastPresentationTimingGOOGLE)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPastPresentationTimingGOOGLE, presentID);
      uint32_t byteLength = sizeof(VkPastPresentationTimingGOOGLE::presentID);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "presentID"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPastPresentationTimingGOOGLE, desiredPresentTime);
      uint32_t byteLength = sizeof(VkPastPresentationTimingGOOGLE::desiredPresentTime);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "desiredPresentTime"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPastPresentationTimingGOOGLE, actualPresentTime);
      uint32_t byteLength = sizeof(VkPastPresentationTimingGOOGLE::actualPresentTime);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "actualPresentTime"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPastPresentationTimingGOOGLE, earliestPresentTime);
      uint32_t byteLength = sizeof(VkPastPresentationTimingGOOGLE::earliestPresentTime);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "earliestPresentTime"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPastPresentationTimingGOOGLE, presentMargin);
      uint32_t byteLength = sizeof(VkPastPresentationTimingGOOGLE::presentMargin);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "presentMargin"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPastPresentationTimingGOOGLE"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPresentTimesInfoGOOGLE)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPresentTimesInfoGOOGLE, sType);
      uint32_t byteLength = sizeof(VkPresentTimesInfoGOOGLE::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPresentTimesInfoGOOGLE, pNext);
      uint32_t byteLength = sizeof(VkPresentTimesInfoGOOGLE::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPresentTimesInfoGOOGLE, swapchainCount);
      uint32_t byteLength = sizeof(VkPresentTimesInfoGOOGLE::swapchainCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "swapchainCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPresentTimesInfoGOOGLE, pTimes);
      uint32_t byteLength = sizeof(VkPresentTimesInfoGOOGLE::pTimes);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pTimes"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPresentTimesInfoGOOGLE"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPresentTimeGOOGLE)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPresentTimeGOOGLE, presentID);
      uint32_t byteLength = sizeof(VkPresentTimeGOOGLE::presentID);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "presentID"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPresentTimeGOOGLE, desiredPresentTime);
      uint32_t byteLength = sizeof(VkPresentTimeGOOGLE::desiredPresentTime);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "desiredPresentTime"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPresentTimeGOOGLE"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkViewportWScalingNV)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkViewportWScalingNV, xcoeff);
      uint32_t byteLength = sizeof(VkViewportWScalingNV::xcoeff);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "xcoeff"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkViewportWScalingNV, ycoeff);
      uint32_t byteLength = sizeof(VkViewportWScalingNV::ycoeff);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "ycoeff"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkViewportWScalingNV"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPipelineViewportWScalingStateCreateInfoNV)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineViewportWScalingStateCreateInfoNV, sType);
      uint32_t byteLength = sizeof(VkPipelineViewportWScalingStateCreateInfoNV::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineViewportWScalingStateCreateInfoNV, pNext);
      uint32_t byteLength = sizeof(VkPipelineViewportWScalingStateCreateInfoNV::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineViewportWScalingStateCreateInfoNV, viewportWScalingEnable);
      uint32_t byteLength = sizeof(VkPipelineViewportWScalingStateCreateInfoNV::viewportWScalingEnable);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "viewportWScalingEnable"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineViewportWScalingStateCreateInfoNV, viewportCount);
      uint32_t byteLength = sizeof(VkPipelineViewportWScalingStateCreateInfoNV::viewportCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "viewportCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineViewportWScalingStateCreateInfoNV, pViewportWScalings);
      uint32_t byteLength = sizeof(VkPipelineViewportWScalingStateCreateInfoNV::pViewportWScalings);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pViewportWScalings"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPipelineViewportWScalingStateCreateInfoNV"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkViewportSwizzleNV)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkViewportSwizzleNV, x);
      uint32_t byteLength = sizeof(VkViewportSwizzleNV::x);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "x"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkViewportSwizzleNV, y);
      uint32_t byteLength = sizeof(VkViewportSwizzleNV::y);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "y"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkViewportSwizzleNV, z);
      uint32_t byteLength = sizeof(VkViewportSwizzleNV::z);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "z"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkViewportSwizzleNV, w);
      uint32_t byteLength = sizeof(VkViewportSwizzleNV::w);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "w"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkViewportSwizzleNV"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPipelineViewportSwizzleStateCreateInfoNV)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineViewportSwizzleStateCreateInfoNV, sType);
      uint32_t byteLength = sizeof(VkPipelineViewportSwizzleStateCreateInfoNV::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineViewportSwizzleStateCreateInfoNV, pNext);
      uint32_t byteLength = sizeof(VkPipelineViewportSwizzleStateCreateInfoNV::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineViewportSwizzleStateCreateInfoNV, flags);
      uint32_t byteLength = sizeof(VkPipelineViewportSwizzleStateCreateInfoNV::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineViewportSwizzleStateCreateInfoNV, viewportCount);
      uint32_t byteLength = sizeof(VkPipelineViewportSwizzleStateCreateInfoNV::viewportCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "viewportCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineViewportSwizzleStateCreateInfoNV, pViewportSwizzles);
      uint32_t byteLength = sizeof(VkPipelineViewportSwizzleStateCreateInfoNV::pViewportSwizzles);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pViewportSwizzles"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPipelineViewportSwizzleStateCreateInfoNV"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceDiscardRectanglePropertiesEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDiscardRectanglePropertiesEXT, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDiscardRectanglePropertiesEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDiscardRectanglePropertiesEXT, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDiscardRectanglePropertiesEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDiscardRectanglePropertiesEXT, maxDiscardRectangles);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDiscardRectanglePropertiesEXT::maxDiscardRectangles);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxDiscardRectangles"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceDiscardRectanglePropertiesEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPipelineDiscardRectangleStateCreateInfoEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineDiscardRectangleStateCreateInfoEXT, sType);
      uint32_t byteLength = sizeof(VkPipelineDiscardRectangleStateCreateInfoEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineDiscardRectangleStateCreateInfoEXT, pNext);
      uint32_t byteLength = sizeof(VkPipelineDiscardRectangleStateCreateInfoEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineDiscardRectangleStateCreateInfoEXT, flags);
      uint32_t byteLength = sizeof(VkPipelineDiscardRectangleStateCreateInfoEXT::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineDiscardRectangleStateCreateInfoEXT, discardRectangleMode);
      uint32_t byteLength = sizeof(VkPipelineDiscardRectangleStateCreateInfoEXT::discardRectangleMode);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "discardRectangleMode"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineDiscardRectangleStateCreateInfoEXT, discardRectangleCount);
      uint32_t byteLength = sizeof(VkPipelineDiscardRectangleStateCreateInfoEXT::discardRectangleCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "discardRectangleCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineDiscardRectangleStateCreateInfoEXT, pDiscardRectangles);
      uint32_t byteLength = sizeof(VkPipelineDiscardRectangleStateCreateInfoEXT::pDiscardRectangles);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pDiscardRectangles"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPipelineDiscardRectangleStateCreateInfoEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX, perViewPositionAllComponents);
      uint32_t byteLength = sizeof(VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX::perViewPositionAllComponents);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "perViewPositionAllComponents"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkInputAttachmentAspectReference)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkInputAttachmentAspectReference, subpass);
      uint32_t byteLength = sizeof(VkInputAttachmentAspectReference::subpass);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "subpass"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkInputAttachmentAspectReference, inputAttachmentIndex);
      uint32_t byteLength = sizeof(VkInputAttachmentAspectReference::inputAttachmentIndex);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "inputAttachmentIndex"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkInputAttachmentAspectReference, aspectMask);
      uint32_t byteLength = sizeof(VkInputAttachmentAspectReference::aspectMask);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "aspectMask"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkInputAttachmentAspectReference"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkInputAttachmentAspectReferenceKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkInputAttachmentAspectReferenceKHR, subpass);
      uint32_t byteLength = sizeof(VkInputAttachmentAspectReferenceKHR::subpass);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "subpass"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkInputAttachmentAspectReferenceKHR, inputAttachmentIndex);
      uint32_t byteLength = sizeof(VkInputAttachmentAspectReferenceKHR::inputAttachmentIndex);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "inputAttachmentIndex"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkInputAttachmentAspectReferenceKHR, aspectMask);
      uint32_t byteLength = sizeof(VkInputAttachmentAspectReferenceKHR::aspectMask);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "aspectMask"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkInputAttachmentAspectReferenceKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkRenderPassInputAttachmentAspectCreateInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRenderPassInputAttachmentAspectCreateInfo, sType);
      uint32_t byteLength = sizeof(VkRenderPassInputAttachmentAspectCreateInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRenderPassInputAttachmentAspectCreateInfo, pNext);
      uint32_t byteLength = sizeof(VkRenderPassInputAttachmentAspectCreateInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRenderPassInputAttachmentAspectCreateInfo, aspectReferenceCount);
      uint32_t byteLength = sizeof(VkRenderPassInputAttachmentAspectCreateInfo::aspectReferenceCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "aspectReferenceCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRenderPassInputAttachmentAspectCreateInfo, pAspectReferences);
      uint32_t byteLength = sizeof(VkRenderPassInputAttachmentAspectCreateInfo::pAspectReferences);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pAspectReferences"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkRenderPassInputAttachmentAspectCreateInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkRenderPassInputAttachmentAspectCreateInfoKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRenderPassInputAttachmentAspectCreateInfoKHR, sType);
      uint32_t byteLength = sizeof(VkRenderPassInputAttachmentAspectCreateInfoKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRenderPassInputAttachmentAspectCreateInfoKHR, pNext);
      uint32_t byteLength = sizeof(VkRenderPassInputAttachmentAspectCreateInfoKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRenderPassInputAttachmentAspectCreateInfoKHR, aspectReferenceCount);
      uint32_t byteLength = sizeof(VkRenderPassInputAttachmentAspectCreateInfoKHR::aspectReferenceCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "aspectReferenceCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRenderPassInputAttachmentAspectCreateInfoKHR, pAspectReferences);
      uint32_t byteLength = sizeof(VkRenderPassInputAttachmentAspectCreateInfoKHR::pAspectReferences);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pAspectReferences"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkRenderPassInputAttachmentAspectCreateInfoKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceSurfaceInfo2KHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceSurfaceInfo2KHR, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceSurfaceInfo2KHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceSurfaceInfo2KHR, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceSurfaceInfo2KHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceSurfaceInfo2KHR, surface);
      uint32_t byteLength = sizeof(VkPhysicalDeviceSurfaceInfo2KHR::surface);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "surface"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceSurfaceInfo2KHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkSurfaceCapabilities2KHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSurfaceCapabilities2KHR, sType);
      uint32_t byteLength = sizeof(VkSurfaceCapabilities2KHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSurfaceCapabilities2KHR, pNext);
      uint32_t byteLength = sizeof(VkSurfaceCapabilities2KHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSurfaceCapabilities2KHR, surfaceCapabilities);
      uint32_t byteLength = sizeof(VkSurfaceCapabilities2KHR::surfaceCapabilities);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "surfaceCapabilities"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkSurfaceCapabilities2KHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkSurfaceFormat2KHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSurfaceFormat2KHR, sType);
      uint32_t byteLength = sizeof(VkSurfaceFormat2KHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSurfaceFormat2KHR, pNext);
      uint32_t byteLength = sizeof(VkSurfaceFormat2KHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSurfaceFormat2KHR, surfaceFormat);
      uint32_t byteLength = sizeof(VkSurfaceFormat2KHR::surfaceFormat);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "surfaceFormat"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkSurfaceFormat2KHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDisplayProperties2KHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDisplayProperties2KHR, sType);
      uint32_t byteLength = sizeof(VkDisplayProperties2KHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDisplayProperties2KHR, pNext);
      uint32_t byteLength = sizeof(VkDisplayProperties2KHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDisplayProperties2KHR, displayProperties);
      uint32_t byteLength = sizeof(VkDisplayProperties2KHR::displayProperties);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "displayProperties"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDisplayProperties2KHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDisplayPlaneProperties2KHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDisplayPlaneProperties2KHR, sType);
      uint32_t byteLength = sizeof(VkDisplayPlaneProperties2KHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDisplayPlaneProperties2KHR, pNext);
      uint32_t byteLength = sizeof(VkDisplayPlaneProperties2KHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDisplayPlaneProperties2KHR, displayPlaneProperties);
      uint32_t byteLength = sizeof(VkDisplayPlaneProperties2KHR::displayPlaneProperties);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "displayPlaneProperties"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDisplayPlaneProperties2KHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDisplayModeProperties2KHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDisplayModeProperties2KHR, sType);
      uint32_t byteLength = sizeof(VkDisplayModeProperties2KHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDisplayModeProperties2KHR, pNext);
      uint32_t byteLength = sizeof(VkDisplayModeProperties2KHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDisplayModeProperties2KHR, displayModeProperties);
      uint32_t byteLength = sizeof(VkDisplayModeProperties2KHR::displayModeProperties);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "displayModeProperties"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDisplayModeProperties2KHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDisplayPlaneInfo2KHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDisplayPlaneInfo2KHR, sType);
      uint32_t byteLength = sizeof(VkDisplayPlaneInfo2KHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDisplayPlaneInfo2KHR, pNext);
      uint32_t byteLength = sizeof(VkDisplayPlaneInfo2KHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDisplayPlaneInfo2KHR, mode);
      uint32_t byteLength = sizeof(VkDisplayPlaneInfo2KHR::mode);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "mode"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDisplayPlaneInfo2KHR, planeIndex);
      uint32_t byteLength = sizeof(VkDisplayPlaneInfo2KHR::planeIndex);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "planeIndex"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDisplayPlaneInfo2KHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDisplayPlaneCapabilities2KHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDisplayPlaneCapabilities2KHR, sType);
      uint32_t byteLength = sizeof(VkDisplayPlaneCapabilities2KHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDisplayPlaneCapabilities2KHR, pNext);
      uint32_t byteLength = sizeof(VkDisplayPlaneCapabilities2KHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDisplayPlaneCapabilities2KHR, capabilities);
      uint32_t byteLength = sizeof(VkDisplayPlaneCapabilities2KHR::capabilities);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "capabilities"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDisplayPlaneCapabilities2KHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkSharedPresentSurfaceCapabilitiesKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSharedPresentSurfaceCapabilitiesKHR, sType);
      uint32_t byteLength = sizeof(VkSharedPresentSurfaceCapabilitiesKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSharedPresentSurfaceCapabilitiesKHR, pNext);
      uint32_t byteLength = sizeof(VkSharedPresentSurfaceCapabilitiesKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSharedPresentSurfaceCapabilitiesKHR, sharedPresentSupportedUsageFlags);
      uint32_t byteLength = sizeof(VkSharedPresentSurfaceCapabilitiesKHR::sharedPresentSupportedUsageFlags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sharedPresentSupportedUsageFlags"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkSharedPresentSurfaceCapabilitiesKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDevice16BitStorageFeatures)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDevice16BitStorageFeatures, sType);
      uint32_t byteLength = sizeof(VkPhysicalDevice16BitStorageFeatures::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDevice16BitStorageFeatures, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDevice16BitStorageFeatures::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDevice16BitStorageFeatures, storageBuffer16BitAccess);
      uint32_t byteLength = sizeof(VkPhysicalDevice16BitStorageFeatures::storageBuffer16BitAccess);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "storageBuffer16BitAccess"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDevice16BitStorageFeatures, uniformAndStorageBuffer16BitAccess);
      uint32_t byteLength = sizeof(VkPhysicalDevice16BitStorageFeatures::uniformAndStorageBuffer16BitAccess);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "uniformAndStorageBuffer16BitAccess"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDevice16BitStorageFeatures, storagePushConstant16);
      uint32_t byteLength = sizeof(VkPhysicalDevice16BitStorageFeatures::storagePushConstant16);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "storagePushConstant16"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDevice16BitStorageFeatures, storageInputOutput16);
      uint32_t byteLength = sizeof(VkPhysicalDevice16BitStorageFeatures::storageInputOutput16);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "storageInputOutput16"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDevice16BitStorageFeatures"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDevice16BitStorageFeaturesKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDevice16BitStorageFeaturesKHR, sType);
      uint32_t byteLength = sizeof(VkPhysicalDevice16BitStorageFeaturesKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDevice16BitStorageFeaturesKHR, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDevice16BitStorageFeaturesKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDevice16BitStorageFeaturesKHR, storageBuffer16BitAccess);
      uint32_t byteLength = sizeof(VkPhysicalDevice16BitStorageFeaturesKHR::storageBuffer16BitAccess);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "storageBuffer16BitAccess"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDevice16BitStorageFeaturesKHR, uniformAndStorageBuffer16BitAccess);
      uint32_t byteLength = sizeof(VkPhysicalDevice16BitStorageFeaturesKHR::uniformAndStorageBuffer16BitAccess);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "uniformAndStorageBuffer16BitAccess"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDevice16BitStorageFeaturesKHR, storagePushConstant16);
      uint32_t byteLength = sizeof(VkPhysicalDevice16BitStorageFeaturesKHR::storagePushConstant16);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "storagePushConstant16"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDevice16BitStorageFeaturesKHR, storageInputOutput16);
      uint32_t byteLength = sizeof(VkPhysicalDevice16BitStorageFeaturesKHR::storageInputOutput16);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "storageInputOutput16"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDevice16BitStorageFeaturesKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceSubgroupProperties)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceSubgroupProperties, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceSubgroupProperties::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceSubgroupProperties, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceSubgroupProperties::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceSubgroupProperties, subgroupSize);
      uint32_t byteLength = sizeof(VkPhysicalDeviceSubgroupProperties::subgroupSize);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "subgroupSize"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceSubgroupProperties, supportedStages);
      uint32_t byteLength = sizeof(VkPhysicalDeviceSubgroupProperties::supportedStages);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "supportedStages"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceSubgroupProperties, supportedOperations);
      uint32_t byteLength = sizeof(VkPhysicalDeviceSubgroupProperties::supportedOperations);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "supportedOperations"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceSubgroupProperties, quadOperationsInAllStages);
      uint32_t byteLength = sizeof(VkPhysicalDeviceSubgroupProperties::quadOperationsInAllStages);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "quadOperationsInAllStages"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceSubgroupProperties"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkBufferMemoryRequirementsInfo2)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBufferMemoryRequirementsInfo2, sType);
      uint32_t byteLength = sizeof(VkBufferMemoryRequirementsInfo2::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBufferMemoryRequirementsInfo2, pNext);
      uint32_t byteLength = sizeof(VkBufferMemoryRequirementsInfo2::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBufferMemoryRequirementsInfo2, buffer);
      uint32_t byteLength = sizeof(VkBufferMemoryRequirementsInfo2::buffer);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "buffer"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkBufferMemoryRequirementsInfo2"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkBufferMemoryRequirementsInfo2KHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBufferMemoryRequirementsInfo2KHR, sType);
      uint32_t byteLength = sizeof(VkBufferMemoryRequirementsInfo2KHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBufferMemoryRequirementsInfo2KHR, pNext);
      uint32_t byteLength = sizeof(VkBufferMemoryRequirementsInfo2KHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBufferMemoryRequirementsInfo2KHR, buffer);
      uint32_t byteLength = sizeof(VkBufferMemoryRequirementsInfo2KHR::buffer);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "buffer"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkBufferMemoryRequirementsInfo2KHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkImageMemoryRequirementsInfo2)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageMemoryRequirementsInfo2, sType);
      uint32_t byteLength = sizeof(VkImageMemoryRequirementsInfo2::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageMemoryRequirementsInfo2, pNext);
      uint32_t byteLength = sizeof(VkImageMemoryRequirementsInfo2::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageMemoryRequirementsInfo2, image);
      uint32_t byteLength = sizeof(VkImageMemoryRequirementsInfo2::image);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "image"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkImageMemoryRequirementsInfo2"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkImageMemoryRequirementsInfo2KHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageMemoryRequirementsInfo2KHR, sType);
      uint32_t byteLength = sizeof(VkImageMemoryRequirementsInfo2KHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageMemoryRequirementsInfo2KHR, pNext);
      uint32_t byteLength = sizeof(VkImageMemoryRequirementsInfo2KHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageMemoryRequirementsInfo2KHR, image);
      uint32_t byteLength = sizeof(VkImageMemoryRequirementsInfo2KHR::image);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "image"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkImageMemoryRequirementsInfo2KHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkImageSparseMemoryRequirementsInfo2)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageSparseMemoryRequirementsInfo2, sType);
      uint32_t byteLength = sizeof(VkImageSparseMemoryRequirementsInfo2::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageSparseMemoryRequirementsInfo2, pNext);
      uint32_t byteLength = sizeof(VkImageSparseMemoryRequirementsInfo2::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageSparseMemoryRequirementsInfo2, image);
      uint32_t byteLength = sizeof(VkImageSparseMemoryRequirementsInfo2::image);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "image"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkImageSparseMemoryRequirementsInfo2"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkImageSparseMemoryRequirementsInfo2KHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageSparseMemoryRequirementsInfo2KHR, sType);
      uint32_t byteLength = sizeof(VkImageSparseMemoryRequirementsInfo2KHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageSparseMemoryRequirementsInfo2KHR, pNext);
      uint32_t byteLength = sizeof(VkImageSparseMemoryRequirementsInfo2KHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageSparseMemoryRequirementsInfo2KHR, image);
      uint32_t byteLength = sizeof(VkImageSparseMemoryRequirementsInfo2KHR::image);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "image"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkImageSparseMemoryRequirementsInfo2KHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkMemoryRequirements2)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMemoryRequirements2, sType);
      uint32_t byteLength = sizeof(VkMemoryRequirements2::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMemoryRequirements2, pNext);
      uint32_t byteLength = sizeof(VkMemoryRequirements2::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMemoryRequirements2, memoryRequirements);
      uint32_t byteLength = sizeof(VkMemoryRequirements2::memoryRequirements);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "memoryRequirements"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkMemoryRequirements2"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkMemoryRequirements2KHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMemoryRequirements2KHR, sType);
      uint32_t byteLength = sizeof(VkMemoryRequirements2KHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMemoryRequirements2KHR, pNext);
      uint32_t byteLength = sizeof(VkMemoryRequirements2KHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMemoryRequirements2KHR, memoryRequirements);
      uint32_t byteLength = sizeof(VkMemoryRequirements2KHR::memoryRequirements);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "memoryRequirements"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkMemoryRequirements2KHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkSparseImageMemoryRequirements2)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSparseImageMemoryRequirements2, sType);
      uint32_t byteLength = sizeof(VkSparseImageMemoryRequirements2::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSparseImageMemoryRequirements2, pNext);
      uint32_t byteLength = sizeof(VkSparseImageMemoryRequirements2::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSparseImageMemoryRequirements2, memoryRequirements);
      uint32_t byteLength = sizeof(VkSparseImageMemoryRequirements2::memoryRequirements);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "memoryRequirements"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkSparseImageMemoryRequirements2"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkSparseImageMemoryRequirements2KHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSparseImageMemoryRequirements2KHR, sType);
      uint32_t byteLength = sizeof(VkSparseImageMemoryRequirements2KHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSparseImageMemoryRequirements2KHR, pNext);
      uint32_t byteLength = sizeof(VkSparseImageMemoryRequirements2KHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSparseImageMemoryRequirements2KHR, memoryRequirements);
      uint32_t byteLength = sizeof(VkSparseImageMemoryRequirements2KHR::memoryRequirements);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "memoryRequirements"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkSparseImageMemoryRequirements2KHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDevicePointClippingProperties)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDevicePointClippingProperties, sType);
      uint32_t byteLength = sizeof(VkPhysicalDevicePointClippingProperties::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDevicePointClippingProperties, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDevicePointClippingProperties::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDevicePointClippingProperties, pointClippingBehavior);
      uint32_t byteLength = sizeof(VkPhysicalDevicePointClippingProperties::pointClippingBehavior);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pointClippingBehavior"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDevicePointClippingProperties"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDevicePointClippingPropertiesKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDevicePointClippingPropertiesKHR, sType);
      uint32_t byteLength = sizeof(VkPhysicalDevicePointClippingPropertiesKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDevicePointClippingPropertiesKHR, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDevicePointClippingPropertiesKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDevicePointClippingPropertiesKHR, pointClippingBehavior);
      uint32_t byteLength = sizeof(VkPhysicalDevicePointClippingPropertiesKHR::pointClippingBehavior);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pointClippingBehavior"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDevicePointClippingPropertiesKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkMemoryDedicatedRequirements)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMemoryDedicatedRequirements, sType);
      uint32_t byteLength = sizeof(VkMemoryDedicatedRequirements::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMemoryDedicatedRequirements, pNext);
      uint32_t byteLength = sizeof(VkMemoryDedicatedRequirements::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMemoryDedicatedRequirements, prefersDedicatedAllocation);
      uint32_t byteLength = sizeof(VkMemoryDedicatedRequirements::prefersDedicatedAllocation);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "prefersDedicatedAllocation"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMemoryDedicatedRequirements, requiresDedicatedAllocation);
      uint32_t byteLength = sizeof(VkMemoryDedicatedRequirements::requiresDedicatedAllocation);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "requiresDedicatedAllocation"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkMemoryDedicatedRequirements"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkMemoryDedicatedRequirementsKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMemoryDedicatedRequirementsKHR, sType);
      uint32_t byteLength = sizeof(VkMemoryDedicatedRequirementsKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMemoryDedicatedRequirementsKHR, pNext);
      uint32_t byteLength = sizeof(VkMemoryDedicatedRequirementsKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMemoryDedicatedRequirementsKHR, prefersDedicatedAllocation);
      uint32_t byteLength = sizeof(VkMemoryDedicatedRequirementsKHR::prefersDedicatedAllocation);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "prefersDedicatedAllocation"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMemoryDedicatedRequirementsKHR, requiresDedicatedAllocation);
      uint32_t byteLength = sizeof(VkMemoryDedicatedRequirementsKHR::requiresDedicatedAllocation);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "requiresDedicatedAllocation"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkMemoryDedicatedRequirementsKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkMemoryDedicatedAllocateInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMemoryDedicatedAllocateInfo, sType);
      uint32_t byteLength = sizeof(VkMemoryDedicatedAllocateInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMemoryDedicatedAllocateInfo, pNext);
      uint32_t byteLength = sizeof(VkMemoryDedicatedAllocateInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMemoryDedicatedAllocateInfo, image);
      uint32_t byteLength = sizeof(VkMemoryDedicatedAllocateInfo::image);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "image"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMemoryDedicatedAllocateInfo, buffer);
      uint32_t byteLength = sizeof(VkMemoryDedicatedAllocateInfo::buffer);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "buffer"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkMemoryDedicatedAllocateInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkMemoryDedicatedAllocateInfoKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMemoryDedicatedAllocateInfoKHR, sType);
      uint32_t byteLength = sizeof(VkMemoryDedicatedAllocateInfoKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMemoryDedicatedAllocateInfoKHR, pNext);
      uint32_t byteLength = sizeof(VkMemoryDedicatedAllocateInfoKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMemoryDedicatedAllocateInfoKHR, image);
      uint32_t byteLength = sizeof(VkMemoryDedicatedAllocateInfoKHR::image);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "image"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMemoryDedicatedAllocateInfoKHR, buffer);
      uint32_t byteLength = sizeof(VkMemoryDedicatedAllocateInfoKHR::buffer);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "buffer"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkMemoryDedicatedAllocateInfoKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkImageViewUsageCreateInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageViewUsageCreateInfo, sType);
      uint32_t byteLength = sizeof(VkImageViewUsageCreateInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageViewUsageCreateInfo, pNext);
      uint32_t byteLength = sizeof(VkImageViewUsageCreateInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageViewUsageCreateInfo, usage);
      uint32_t byteLength = sizeof(VkImageViewUsageCreateInfo::usage);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "usage"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkImageViewUsageCreateInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkImageViewUsageCreateInfoKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageViewUsageCreateInfoKHR, sType);
      uint32_t byteLength = sizeof(VkImageViewUsageCreateInfoKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageViewUsageCreateInfoKHR, pNext);
      uint32_t byteLength = sizeof(VkImageViewUsageCreateInfoKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageViewUsageCreateInfoKHR, usage);
      uint32_t byteLength = sizeof(VkImageViewUsageCreateInfoKHR::usage);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "usage"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkImageViewUsageCreateInfoKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPipelineTessellationDomainOriginStateCreateInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineTessellationDomainOriginStateCreateInfo, sType);
      uint32_t byteLength = sizeof(VkPipelineTessellationDomainOriginStateCreateInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineTessellationDomainOriginStateCreateInfo, pNext);
      uint32_t byteLength = sizeof(VkPipelineTessellationDomainOriginStateCreateInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineTessellationDomainOriginStateCreateInfo, domainOrigin);
      uint32_t byteLength = sizeof(VkPipelineTessellationDomainOriginStateCreateInfo::domainOrigin);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "domainOrigin"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPipelineTessellationDomainOriginStateCreateInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPipelineTessellationDomainOriginStateCreateInfoKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineTessellationDomainOriginStateCreateInfoKHR, sType);
      uint32_t byteLength = sizeof(VkPipelineTessellationDomainOriginStateCreateInfoKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineTessellationDomainOriginStateCreateInfoKHR, pNext);
      uint32_t byteLength = sizeof(VkPipelineTessellationDomainOriginStateCreateInfoKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineTessellationDomainOriginStateCreateInfoKHR, domainOrigin);
      uint32_t byteLength = sizeof(VkPipelineTessellationDomainOriginStateCreateInfoKHR::domainOrigin);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "domainOrigin"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPipelineTessellationDomainOriginStateCreateInfoKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkSamplerYcbcrConversionInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSamplerYcbcrConversionInfo, sType);
      uint32_t byteLength = sizeof(VkSamplerYcbcrConversionInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSamplerYcbcrConversionInfo, pNext);
      uint32_t byteLength = sizeof(VkSamplerYcbcrConversionInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSamplerYcbcrConversionInfo, conversion);
      uint32_t byteLength = sizeof(VkSamplerYcbcrConversionInfo::conversion);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "conversion"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkSamplerYcbcrConversionInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkSamplerYcbcrConversionInfoKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSamplerYcbcrConversionInfoKHR, sType);
      uint32_t byteLength = sizeof(VkSamplerYcbcrConversionInfoKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSamplerYcbcrConversionInfoKHR, pNext);
      uint32_t byteLength = sizeof(VkSamplerYcbcrConversionInfoKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSamplerYcbcrConversionInfoKHR, conversion);
      uint32_t byteLength = sizeof(VkSamplerYcbcrConversionInfoKHR::conversion);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "conversion"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkSamplerYcbcrConversionInfoKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkSamplerYcbcrConversionCreateInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSamplerYcbcrConversionCreateInfo, sType);
      uint32_t byteLength = sizeof(VkSamplerYcbcrConversionCreateInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSamplerYcbcrConversionCreateInfo, pNext);
      uint32_t byteLength = sizeof(VkSamplerYcbcrConversionCreateInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSamplerYcbcrConversionCreateInfo, format);
      uint32_t byteLength = sizeof(VkSamplerYcbcrConversionCreateInfo::format);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "format"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSamplerYcbcrConversionCreateInfo, ycbcrModel);
      uint32_t byteLength = sizeof(VkSamplerYcbcrConversionCreateInfo::ycbcrModel);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "ycbcrModel"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSamplerYcbcrConversionCreateInfo, ycbcrRange);
      uint32_t byteLength = sizeof(VkSamplerYcbcrConversionCreateInfo::ycbcrRange);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "ycbcrRange"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSamplerYcbcrConversionCreateInfo, components);
      uint32_t byteLength = sizeof(VkSamplerYcbcrConversionCreateInfo::components);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "components"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSamplerYcbcrConversionCreateInfo, xChromaOffset);
      uint32_t byteLength = sizeof(VkSamplerYcbcrConversionCreateInfo::xChromaOffset);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "xChromaOffset"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSamplerYcbcrConversionCreateInfo, yChromaOffset);
      uint32_t byteLength = sizeof(VkSamplerYcbcrConversionCreateInfo::yChromaOffset);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "yChromaOffset"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSamplerYcbcrConversionCreateInfo, chromaFilter);
      uint32_t byteLength = sizeof(VkSamplerYcbcrConversionCreateInfo::chromaFilter);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "chromaFilter"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSamplerYcbcrConversionCreateInfo, forceExplicitReconstruction);
      uint32_t byteLength = sizeof(VkSamplerYcbcrConversionCreateInfo::forceExplicitReconstruction);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "forceExplicitReconstruction"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkSamplerYcbcrConversionCreateInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkSamplerYcbcrConversionCreateInfoKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSamplerYcbcrConversionCreateInfoKHR, sType);
      uint32_t byteLength = sizeof(VkSamplerYcbcrConversionCreateInfoKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSamplerYcbcrConversionCreateInfoKHR, pNext);
      uint32_t byteLength = sizeof(VkSamplerYcbcrConversionCreateInfoKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSamplerYcbcrConversionCreateInfoKHR, format);
      uint32_t byteLength = sizeof(VkSamplerYcbcrConversionCreateInfoKHR::format);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "format"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSamplerYcbcrConversionCreateInfoKHR, ycbcrModel);
      uint32_t byteLength = sizeof(VkSamplerYcbcrConversionCreateInfoKHR::ycbcrModel);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "ycbcrModel"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSamplerYcbcrConversionCreateInfoKHR, ycbcrRange);
      uint32_t byteLength = sizeof(VkSamplerYcbcrConversionCreateInfoKHR::ycbcrRange);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "ycbcrRange"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSamplerYcbcrConversionCreateInfoKHR, components);
      uint32_t byteLength = sizeof(VkSamplerYcbcrConversionCreateInfoKHR::components);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "components"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSamplerYcbcrConversionCreateInfoKHR, xChromaOffset);
      uint32_t byteLength = sizeof(VkSamplerYcbcrConversionCreateInfoKHR::xChromaOffset);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "xChromaOffset"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSamplerYcbcrConversionCreateInfoKHR, yChromaOffset);
      uint32_t byteLength = sizeof(VkSamplerYcbcrConversionCreateInfoKHR::yChromaOffset);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "yChromaOffset"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSamplerYcbcrConversionCreateInfoKHR, chromaFilter);
      uint32_t byteLength = sizeof(VkSamplerYcbcrConversionCreateInfoKHR::chromaFilter);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "chromaFilter"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSamplerYcbcrConversionCreateInfoKHR, forceExplicitReconstruction);
      uint32_t byteLength = sizeof(VkSamplerYcbcrConversionCreateInfoKHR::forceExplicitReconstruction);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "forceExplicitReconstruction"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkSamplerYcbcrConversionCreateInfoKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkBindImagePlaneMemoryInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindImagePlaneMemoryInfo, sType);
      uint32_t byteLength = sizeof(VkBindImagePlaneMemoryInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindImagePlaneMemoryInfo, pNext);
      uint32_t byteLength = sizeof(VkBindImagePlaneMemoryInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindImagePlaneMemoryInfo, planeAspect);
      uint32_t byteLength = sizeof(VkBindImagePlaneMemoryInfo::planeAspect);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "planeAspect"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkBindImagePlaneMemoryInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkBindImagePlaneMemoryInfoKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindImagePlaneMemoryInfoKHR, sType);
      uint32_t byteLength = sizeof(VkBindImagePlaneMemoryInfoKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindImagePlaneMemoryInfoKHR, pNext);
      uint32_t byteLength = sizeof(VkBindImagePlaneMemoryInfoKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindImagePlaneMemoryInfoKHR, planeAspect);
      uint32_t byteLength = sizeof(VkBindImagePlaneMemoryInfoKHR::planeAspect);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "planeAspect"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkBindImagePlaneMemoryInfoKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkImagePlaneMemoryRequirementsInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImagePlaneMemoryRequirementsInfo, sType);
      uint32_t byteLength = sizeof(VkImagePlaneMemoryRequirementsInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImagePlaneMemoryRequirementsInfo, pNext);
      uint32_t byteLength = sizeof(VkImagePlaneMemoryRequirementsInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImagePlaneMemoryRequirementsInfo, planeAspect);
      uint32_t byteLength = sizeof(VkImagePlaneMemoryRequirementsInfo::planeAspect);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "planeAspect"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkImagePlaneMemoryRequirementsInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkImagePlaneMemoryRequirementsInfoKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImagePlaneMemoryRequirementsInfoKHR, sType);
      uint32_t byteLength = sizeof(VkImagePlaneMemoryRequirementsInfoKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImagePlaneMemoryRequirementsInfoKHR, pNext);
      uint32_t byteLength = sizeof(VkImagePlaneMemoryRequirementsInfoKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImagePlaneMemoryRequirementsInfoKHR, planeAspect);
      uint32_t byteLength = sizeof(VkImagePlaneMemoryRequirementsInfoKHR::planeAspect);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "planeAspect"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkImagePlaneMemoryRequirementsInfoKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceSamplerYcbcrConversionFeatures)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceSamplerYcbcrConversionFeatures, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceSamplerYcbcrConversionFeatures::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceSamplerYcbcrConversionFeatures, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceSamplerYcbcrConversionFeatures::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceSamplerYcbcrConversionFeatures, samplerYcbcrConversion);
      uint32_t byteLength = sizeof(VkPhysicalDeviceSamplerYcbcrConversionFeatures::samplerYcbcrConversion);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "samplerYcbcrConversion"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceSamplerYcbcrConversionFeatures"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR, samplerYcbcrConversion);
      uint32_t byteLength = sizeof(VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR::samplerYcbcrConversion);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "samplerYcbcrConversion"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkSamplerYcbcrConversionImageFormatProperties)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSamplerYcbcrConversionImageFormatProperties, sType);
      uint32_t byteLength = sizeof(VkSamplerYcbcrConversionImageFormatProperties::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSamplerYcbcrConversionImageFormatProperties, pNext);
      uint32_t byteLength = sizeof(VkSamplerYcbcrConversionImageFormatProperties::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSamplerYcbcrConversionImageFormatProperties, combinedImageSamplerDescriptorCount);
      uint32_t byteLength = sizeof(VkSamplerYcbcrConversionImageFormatProperties::combinedImageSamplerDescriptorCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "combinedImageSamplerDescriptorCount"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkSamplerYcbcrConversionImageFormatProperties"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkSamplerYcbcrConversionImageFormatPropertiesKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSamplerYcbcrConversionImageFormatPropertiesKHR, sType);
      uint32_t byteLength = sizeof(VkSamplerYcbcrConversionImageFormatPropertiesKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSamplerYcbcrConversionImageFormatPropertiesKHR, pNext);
      uint32_t byteLength = sizeof(VkSamplerYcbcrConversionImageFormatPropertiesKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSamplerYcbcrConversionImageFormatPropertiesKHR, combinedImageSamplerDescriptorCount);
      uint32_t byteLength = sizeof(VkSamplerYcbcrConversionImageFormatPropertiesKHR::combinedImageSamplerDescriptorCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "combinedImageSamplerDescriptorCount"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkSamplerYcbcrConversionImageFormatPropertiesKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkTextureLODGatherFormatPropertiesAMD)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkTextureLODGatherFormatPropertiesAMD, sType);
      uint32_t byteLength = sizeof(VkTextureLODGatherFormatPropertiesAMD::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkTextureLODGatherFormatPropertiesAMD, pNext);
      uint32_t byteLength = sizeof(VkTextureLODGatherFormatPropertiesAMD::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkTextureLODGatherFormatPropertiesAMD, supportsTextureGatherLODBiasAMD);
      uint32_t byteLength = sizeof(VkTextureLODGatherFormatPropertiesAMD::supportsTextureGatherLODBiasAMD);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "supportsTextureGatherLODBiasAMD"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkTextureLODGatherFormatPropertiesAMD"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkConditionalRenderingBeginInfoEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkConditionalRenderingBeginInfoEXT, sType);
      uint32_t byteLength = sizeof(VkConditionalRenderingBeginInfoEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkConditionalRenderingBeginInfoEXT, pNext);
      uint32_t byteLength = sizeof(VkConditionalRenderingBeginInfoEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkConditionalRenderingBeginInfoEXT, buffer);
      uint32_t byteLength = sizeof(VkConditionalRenderingBeginInfoEXT::buffer);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "buffer"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkConditionalRenderingBeginInfoEXT, offset);
      uint32_t byteLength = sizeof(VkConditionalRenderingBeginInfoEXT::offset);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "offset"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkConditionalRenderingBeginInfoEXT, flags);
      uint32_t byteLength = sizeof(VkConditionalRenderingBeginInfoEXT::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkConditionalRenderingBeginInfoEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkProtectedSubmitInfo)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkProtectedSubmitInfo, sType);
      uint32_t byteLength = sizeof(VkProtectedSubmitInfo::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkProtectedSubmitInfo, pNext);
      uint32_t byteLength = sizeof(VkProtectedSubmitInfo::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkProtectedSubmitInfo, protectedSubmit);
      uint32_t byteLength = sizeof(VkProtectedSubmitInfo::protectedSubmit);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "protectedSubmit"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkProtectedSubmitInfo"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceProtectedMemoryFeatures)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceProtectedMemoryFeatures, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceProtectedMemoryFeatures::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceProtectedMemoryFeatures, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceProtectedMemoryFeatures::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceProtectedMemoryFeatures, protectedMemory);
      uint32_t byteLength = sizeof(VkPhysicalDeviceProtectedMemoryFeatures::protectedMemory);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "protectedMemory"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceProtectedMemoryFeatures"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceProtectedMemoryProperties)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceProtectedMemoryProperties, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceProtectedMemoryProperties::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceProtectedMemoryProperties, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceProtectedMemoryProperties::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceProtectedMemoryProperties, protectedNoFault);
      uint32_t byteLength = sizeof(VkPhysicalDeviceProtectedMemoryProperties::protectedNoFault);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "protectedNoFault"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceProtectedMemoryProperties"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDeviceQueueInfo2)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceQueueInfo2, sType);
      uint32_t byteLength = sizeof(VkDeviceQueueInfo2::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceQueueInfo2, pNext);
      uint32_t byteLength = sizeof(VkDeviceQueueInfo2::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceQueueInfo2, flags);
      uint32_t byteLength = sizeof(VkDeviceQueueInfo2::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceQueueInfo2, queueFamilyIndex);
      uint32_t byteLength = sizeof(VkDeviceQueueInfo2::queueFamilyIndex);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "queueFamilyIndex"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceQueueInfo2, queueIndex);
      uint32_t byteLength = sizeof(VkDeviceQueueInfo2::queueIndex);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "queueIndex"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDeviceQueueInfo2"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPipelineCoverageToColorStateCreateInfoNV)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineCoverageToColorStateCreateInfoNV, sType);
      uint32_t byteLength = sizeof(VkPipelineCoverageToColorStateCreateInfoNV::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineCoverageToColorStateCreateInfoNV, pNext);
      uint32_t byteLength = sizeof(VkPipelineCoverageToColorStateCreateInfoNV::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineCoverageToColorStateCreateInfoNV, flags);
      uint32_t byteLength = sizeof(VkPipelineCoverageToColorStateCreateInfoNV::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineCoverageToColorStateCreateInfoNV, coverageToColorEnable);
      uint32_t byteLength = sizeof(VkPipelineCoverageToColorStateCreateInfoNV::coverageToColorEnable);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "coverageToColorEnable"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineCoverageToColorStateCreateInfoNV, coverageToColorLocation);
      uint32_t byteLength = sizeof(VkPipelineCoverageToColorStateCreateInfoNV::coverageToColorLocation);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "coverageToColorLocation"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPipelineCoverageToColorStateCreateInfoNV"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT, filterMinmaxSingleComponentFormats);
      uint32_t byteLength = sizeof(VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT::filterMinmaxSingleComponentFormats);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "filterMinmaxSingleComponentFormats"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT, filterMinmaxImageComponentMapping);
      uint32_t byteLength = sizeof(VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT::filterMinmaxImageComponentMapping);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "filterMinmaxImageComponentMapping"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkSampleLocationEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSampleLocationEXT, x);
      uint32_t byteLength = sizeof(VkSampleLocationEXT::x);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "x"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSampleLocationEXT, y);
      uint32_t byteLength = sizeof(VkSampleLocationEXT::y);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "y"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkSampleLocationEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkSampleLocationsInfoEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSampleLocationsInfoEXT, sType);
      uint32_t byteLength = sizeof(VkSampleLocationsInfoEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSampleLocationsInfoEXT, pNext);
      uint32_t byteLength = sizeof(VkSampleLocationsInfoEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSampleLocationsInfoEXT, sampleLocationsPerPixel);
      uint32_t byteLength = sizeof(VkSampleLocationsInfoEXT::sampleLocationsPerPixel);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sampleLocationsPerPixel"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSampleLocationsInfoEXT, sampleLocationGridSize);
      uint32_t byteLength = sizeof(VkSampleLocationsInfoEXT::sampleLocationGridSize);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sampleLocationGridSize"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSampleLocationsInfoEXT, sampleLocationsCount);
      uint32_t byteLength = sizeof(VkSampleLocationsInfoEXT::sampleLocationsCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sampleLocationsCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSampleLocationsInfoEXT, pSampleLocations);
      uint32_t byteLength = sizeof(VkSampleLocationsInfoEXT::pSampleLocations);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pSampleLocations"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkSampleLocationsInfoEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkAttachmentSampleLocationsEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkAttachmentSampleLocationsEXT, attachmentIndex);
      uint32_t byteLength = sizeof(VkAttachmentSampleLocationsEXT::attachmentIndex);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "attachmentIndex"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkAttachmentSampleLocationsEXT, sampleLocationsInfo);
      uint32_t byteLength = sizeof(VkAttachmentSampleLocationsEXT::sampleLocationsInfo);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sampleLocationsInfo"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkAttachmentSampleLocationsEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkSubpassSampleLocationsEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSubpassSampleLocationsEXT, subpassIndex);
      uint32_t byteLength = sizeof(VkSubpassSampleLocationsEXT::subpassIndex);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "subpassIndex"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSubpassSampleLocationsEXT, sampleLocationsInfo);
      uint32_t byteLength = sizeof(VkSubpassSampleLocationsEXT::sampleLocationsInfo);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sampleLocationsInfo"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkSubpassSampleLocationsEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkRenderPassSampleLocationsBeginInfoEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRenderPassSampleLocationsBeginInfoEXT, sType);
      uint32_t byteLength = sizeof(VkRenderPassSampleLocationsBeginInfoEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRenderPassSampleLocationsBeginInfoEXT, pNext);
      uint32_t byteLength = sizeof(VkRenderPassSampleLocationsBeginInfoEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRenderPassSampleLocationsBeginInfoEXT, attachmentInitialSampleLocationsCount);
      uint32_t byteLength = sizeof(VkRenderPassSampleLocationsBeginInfoEXT::attachmentInitialSampleLocationsCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "attachmentInitialSampleLocationsCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRenderPassSampleLocationsBeginInfoEXT, pAttachmentInitialSampleLocations);
      uint32_t byteLength = sizeof(VkRenderPassSampleLocationsBeginInfoEXT::pAttachmentInitialSampleLocations);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pAttachmentInitialSampleLocations"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRenderPassSampleLocationsBeginInfoEXT, postSubpassSampleLocationsCount);
      uint32_t byteLength = sizeof(VkRenderPassSampleLocationsBeginInfoEXT::postSubpassSampleLocationsCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "postSubpassSampleLocationsCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRenderPassSampleLocationsBeginInfoEXT, pPostSubpassSampleLocations);
      uint32_t byteLength = sizeof(VkRenderPassSampleLocationsBeginInfoEXT::pPostSubpassSampleLocations);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pPostSubpassSampleLocations"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkRenderPassSampleLocationsBeginInfoEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPipelineSampleLocationsStateCreateInfoEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineSampleLocationsStateCreateInfoEXT, sType);
      uint32_t byteLength = sizeof(VkPipelineSampleLocationsStateCreateInfoEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineSampleLocationsStateCreateInfoEXT, pNext);
      uint32_t byteLength = sizeof(VkPipelineSampleLocationsStateCreateInfoEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineSampleLocationsStateCreateInfoEXT, sampleLocationsEnable);
      uint32_t byteLength = sizeof(VkPipelineSampleLocationsStateCreateInfoEXT::sampleLocationsEnable);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sampleLocationsEnable"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineSampleLocationsStateCreateInfoEXT, sampleLocationsInfo);
      uint32_t byteLength = sizeof(VkPipelineSampleLocationsStateCreateInfoEXT::sampleLocationsInfo);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sampleLocationsInfo"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPipelineSampleLocationsStateCreateInfoEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceSampleLocationsPropertiesEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceSampleLocationsPropertiesEXT, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceSampleLocationsPropertiesEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceSampleLocationsPropertiesEXT, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceSampleLocationsPropertiesEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceSampleLocationsPropertiesEXT, sampleLocationSampleCounts);
      uint32_t byteLength = sizeof(VkPhysicalDeviceSampleLocationsPropertiesEXT::sampleLocationSampleCounts);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sampleLocationSampleCounts"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceSampleLocationsPropertiesEXT, maxSampleLocationGridSize);
      uint32_t byteLength = sizeof(VkPhysicalDeviceSampleLocationsPropertiesEXT::maxSampleLocationGridSize);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxSampleLocationGridSize"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceSampleLocationsPropertiesEXT, sampleLocationCoordinateRange);
      uint32_t byteLength = sizeof(VkPhysicalDeviceSampleLocationsPropertiesEXT::sampleLocationCoordinateRange);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sampleLocationCoordinateRange"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceSampleLocationsPropertiesEXT, sampleLocationSubPixelBits);
      uint32_t byteLength = sizeof(VkPhysicalDeviceSampleLocationsPropertiesEXT::sampleLocationSubPixelBits);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sampleLocationSubPixelBits"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceSampleLocationsPropertiesEXT, variableSampleLocations);
      uint32_t byteLength = sizeof(VkPhysicalDeviceSampleLocationsPropertiesEXT::variableSampleLocations);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "variableSampleLocations"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceSampleLocationsPropertiesEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkMultisamplePropertiesEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMultisamplePropertiesEXT, sType);
      uint32_t byteLength = sizeof(VkMultisamplePropertiesEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMultisamplePropertiesEXT, pNext);
      uint32_t byteLength = sizeof(VkMultisamplePropertiesEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMultisamplePropertiesEXT, maxSampleLocationGridSize);
      uint32_t byteLength = sizeof(VkMultisamplePropertiesEXT::maxSampleLocationGridSize);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxSampleLocationGridSize"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkMultisamplePropertiesEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkSamplerReductionModeCreateInfoEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSamplerReductionModeCreateInfoEXT, sType);
      uint32_t byteLength = sizeof(VkSamplerReductionModeCreateInfoEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSamplerReductionModeCreateInfoEXT, pNext);
      uint32_t byteLength = sizeof(VkSamplerReductionModeCreateInfoEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSamplerReductionModeCreateInfoEXT, reductionMode);
      uint32_t byteLength = sizeof(VkSamplerReductionModeCreateInfoEXT::reductionMode);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "reductionMode"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkSamplerReductionModeCreateInfoEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT, advancedBlendCoherentOperations);
      uint32_t byteLength = sizeof(VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT::advancedBlendCoherentOperations);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "advancedBlendCoherentOperations"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT, advancedBlendMaxColorAttachments);
      uint32_t byteLength = sizeof(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT::advancedBlendMaxColorAttachments);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "advancedBlendMaxColorAttachments"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT, advancedBlendIndependentBlend);
      uint32_t byteLength = sizeof(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT::advancedBlendIndependentBlend);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "advancedBlendIndependentBlend"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT, advancedBlendNonPremultipliedSrcColor);
      uint32_t byteLength = sizeof(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT::advancedBlendNonPremultipliedSrcColor);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "advancedBlendNonPremultipliedSrcColor"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT, advancedBlendNonPremultipliedDstColor);
      uint32_t byteLength = sizeof(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT::advancedBlendNonPremultipliedDstColor);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "advancedBlendNonPremultipliedDstColor"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT, advancedBlendCorrelatedOverlap);
      uint32_t byteLength = sizeof(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT::advancedBlendCorrelatedOverlap);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "advancedBlendCorrelatedOverlap"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT, advancedBlendAllOperations);
      uint32_t byteLength = sizeof(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT::advancedBlendAllOperations);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "advancedBlendAllOperations"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPipelineColorBlendAdvancedStateCreateInfoEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineColorBlendAdvancedStateCreateInfoEXT, sType);
      uint32_t byteLength = sizeof(VkPipelineColorBlendAdvancedStateCreateInfoEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineColorBlendAdvancedStateCreateInfoEXT, pNext);
      uint32_t byteLength = sizeof(VkPipelineColorBlendAdvancedStateCreateInfoEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineColorBlendAdvancedStateCreateInfoEXT, srcPremultiplied);
      uint32_t byteLength = sizeof(VkPipelineColorBlendAdvancedStateCreateInfoEXT::srcPremultiplied);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "srcPremultiplied"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineColorBlendAdvancedStateCreateInfoEXT, dstPremultiplied);
      uint32_t byteLength = sizeof(VkPipelineColorBlendAdvancedStateCreateInfoEXT::dstPremultiplied);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "dstPremultiplied"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineColorBlendAdvancedStateCreateInfoEXT, blendOverlap);
      uint32_t byteLength = sizeof(VkPipelineColorBlendAdvancedStateCreateInfoEXT::blendOverlap);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "blendOverlap"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPipelineColorBlendAdvancedStateCreateInfoEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceInlineUniformBlockFeaturesEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceInlineUniformBlockFeaturesEXT, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceInlineUniformBlockFeaturesEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceInlineUniformBlockFeaturesEXT, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceInlineUniformBlockFeaturesEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceInlineUniformBlockFeaturesEXT, inlineUniformBlock);
      uint32_t byteLength = sizeof(VkPhysicalDeviceInlineUniformBlockFeaturesEXT::inlineUniformBlock);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "inlineUniformBlock"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceInlineUniformBlockFeaturesEXT, descriptorBindingInlineUniformBlockUpdateAfterBind);
      uint32_t byteLength = sizeof(VkPhysicalDeviceInlineUniformBlockFeaturesEXT::descriptorBindingInlineUniformBlockUpdateAfterBind);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "descriptorBindingInlineUniformBlockUpdateAfterBind"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceInlineUniformBlockFeaturesEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceInlineUniformBlockPropertiesEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceInlineUniformBlockPropertiesEXT, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceInlineUniformBlockPropertiesEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceInlineUniformBlockPropertiesEXT, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceInlineUniformBlockPropertiesEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceInlineUniformBlockPropertiesEXT, maxInlineUniformBlockSize);
      uint32_t byteLength = sizeof(VkPhysicalDeviceInlineUniformBlockPropertiesEXT::maxInlineUniformBlockSize);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxInlineUniformBlockSize"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceInlineUniformBlockPropertiesEXT, maxPerStageDescriptorInlineUniformBlocks);
      uint32_t byteLength = sizeof(VkPhysicalDeviceInlineUniformBlockPropertiesEXT::maxPerStageDescriptorInlineUniformBlocks);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxPerStageDescriptorInlineUniformBlocks"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceInlineUniformBlockPropertiesEXT, maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks);
      uint32_t byteLength = sizeof(VkPhysicalDeviceInlineUniformBlockPropertiesEXT::maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceInlineUniformBlockPropertiesEXT, maxDescriptorSetInlineUniformBlocks);
      uint32_t byteLength = sizeof(VkPhysicalDeviceInlineUniformBlockPropertiesEXT::maxDescriptorSetInlineUniformBlocks);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxDescriptorSetInlineUniformBlocks"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceInlineUniformBlockPropertiesEXT, maxDescriptorSetUpdateAfterBindInlineUniformBlocks);
      uint32_t byteLength = sizeof(VkPhysicalDeviceInlineUniformBlockPropertiesEXT::maxDescriptorSetUpdateAfterBindInlineUniformBlocks);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxDescriptorSetUpdateAfterBindInlineUniformBlocks"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceInlineUniformBlockPropertiesEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkWriteDescriptorSetInlineUniformBlockEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkWriteDescriptorSetInlineUniformBlockEXT, sType);
      uint32_t byteLength = sizeof(VkWriteDescriptorSetInlineUniformBlockEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkWriteDescriptorSetInlineUniformBlockEXT, pNext);
      uint32_t byteLength = sizeof(VkWriteDescriptorSetInlineUniformBlockEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkWriteDescriptorSetInlineUniformBlockEXT, dataSize);
      uint32_t byteLength = sizeof(VkWriteDescriptorSetInlineUniformBlockEXT::dataSize);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "dataSize"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkWriteDescriptorSetInlineUniformBlockEXT, pData);
      uint32_t byteLength = sizeof(VkWriteDescriptorSetInlineUniformBlockEXT::pData);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pData"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkWriteDescriptorSetInlineUniformBlockEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDescriptorPoolInlineUniformBlockCreateInfoEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorPoolInlineUniformBlockCreateInfoEXT, sType);
      uint32_t byteLength = sizeof(VkDescriptorPoolInlineUniformBlockCreateInfoEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorPoolInlineUniformBlockCreateInfoEXT, pNext);
      uint32_t byteLength = sizeof(VkDescriptorPoolInlineUniformBlockCreateInfoEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorPoolInlineUniformBlockCreateInfoEXT, maxInlineUniformBlockBindings);
      uint32_t byteLength = sizeof(VkDescriptorPoolInlineUniformBlockCreateInfoEXT::maxInlineUniformBlockBindings);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxInlineUniformBlockBindings"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDescriptorPoolInlineUniformBlockCreateInfoEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPipelineCoverageModulationStateCreateInfoNV)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineCoverageModulationStateCreateInfoNV, sType);
      uint32_t byteLength = sizeof(VkPipelineCoverageModulationStateCreateInfoNV::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineCoverageModulationStateCreateInfoNV, pNext);
      uint32_t byteLength = sizeof(VkPipelineCoverageModulationStateCreateInfoNV::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineCoverageModulationStateCreateInfoNV, flags);
      uint32_t byteLength = sizeof(VkPipelineCoverageModulationStateCreateInfoNV::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineCoverageModulationStateCreateInfoNV, coverageModulationMode);
      uint32_t byteLength = sizeof(VkPipelineCoverageModulationStateCreateInfoNV::coverageModulationMode);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "coverageModulationMode"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineCoverageModulationStateCreateInfoNV, coverageModulationTableEnable);
      uint32_t byteLength = sizeof(VkPipelineCoverageModulationStateCreateInfoNV::coverageModulationTableEnable);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "coverageModulationTableEnable"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineCoverageModulationStateCreateInfoNV, coverageModulationTableCount);
      uint32_t byteLength = sizeof(VkPipelineCoverageModulationStateCreateInfoNV::coverageModulationTableCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "coverageModulationTableCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineCoverageModulationStateCreateInfoNV, pCoverageModulationTable);
      uint32_t byteLength = sizeof(VkPipelineCoverageModulationStateCreateInfoNV::pCoverageModulationTable);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pCoverageModulationTable"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPipelineCoverageModulationStateCreateInfoNV"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkImageFormatListCreateInfoKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageFormatListCreateInfoKHR, sType);
      uint32_t byteLength = sizeof(VkImageFormatListCreateInfoKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageFormatListCreateInfoKHR, pNext);
      uint32_t byteLength = sizeof(VkImageFormatListCreateInfoKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageFormatListCreateInfoKHR, viewFormatCount);
      uint32_t byteLength = sizeof(VkImageFormatListCreateInfoKHR::viewFormatCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "viewFormatCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageFormatListCreateInfoKHR, pViewFormats);
      uint32_t byteLength = sizeof(VkImageFormatListCreateInfoKHR::pViewFormats);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pViewFormats"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkImageFormatListCreateInfoKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkValidationCacheCreateInfoEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkValidationCacheCreateInfoEXT, sType);
      uint32_t byteLength = sizeof(VkValidationCacheCreateInfoEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkValidationCacheCreateInfoEXT, pNext);
      uint32_t byteLength = sizeof(VkValidationCacheCreateInfoEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkValidationCacheCreateInfoEXT, flags);
      uint32_t byteLength = sizeof(VkValidationCacheCreateInfoEXT::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkValidationCacheCreateInfoEXT, initialDataSize);
      uint32_t byteLength = sizeof(VkValidationCacheCreateInfoEXT::initialDataSize);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "initialDataSize"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkValidationCacheCreateInfoEXT, pInitialData);
      uint32_t byteLength = sizeof(VkValidationCacheCreateInfoEXT::pInitialData);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pInitialData"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkValidationCacheCreateInfoEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkShaderModuleValidationCacheCreateInfoEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkShaderModuleValidationCacheCreateInfoEXT, sType);
      uint32_t byteLength = sizeof(VkShaderModuleValidationCacheCreateInfoEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkShaderModuleValidationCacheCreateInfoEXT, pNext);
      uint32_t byteLength = sizeof(VkShaderModuleValidationCacheCreateInfoEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkShaderModuleValidationCacheCreateInfoEXT, validationCache);
      uint32_t byteLength = sizeof(VkShaderModuleValidationCacheCreateInfoEXT::validationCache);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "validationCache"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkShaderModuleValidationCacheCreateInfoEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceMaintenance3Properties)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceMaintenance3Properties, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceMaintenance3Properties::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceMaintenance3Properties, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceMaintenance3Properties::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceMaintenance3Properties, maxPerSetDescriptors);
      uint32_t byteLength = sizeof(VkPhysicalDeviceMaintenance3Properties::maxPerSetDescriptors);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxPerSetDescriptors"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceMaintenance3Properties, maxMemoryAllocationSize);
      uint32_t byteLength = sizeof(VkPhysicalDeviceMaintenance3Properties::maxMemoryAllocationSize);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxMemoryAllocationSize"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceMaintenance3Properties"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceMaintenance3PropertiesKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceMaintenance3PropertiesKHR, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceMaintenance3PropertiesKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceMaintenance3PropertiesKHR, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceMaintenance3PropertiesKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceMaintenance3PropertiesKHR, maxPerSetDescriptors);
      uint32_t byteLength = sizeof(VkPhysicalDeviceMaintenance3PropertiesKHR::maxPerSetDescriptors);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxPerSetDescriptors"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceMaintenance3PropertiesKHR, maxMemoryAllocationSize);
      uint32_t byteLength = sizeof(VkPhysicalDeviceMaintenance3PropertiesKHR::maxMemoryAllocationSize);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxMemoryAllocationSize"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceMaintenance3PropertiesKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDescriptorSetLayoutSupport)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorSetLayoutSupport, sType);
      uint32_t byteLength = sizeof(VkDescriptorSetLayoutSupport::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorSetLayoutSupport, pNext);
      uint32_t byteLength = sizeof(VkDescriptorSetLayoutSupport::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorSetLayoutSupport, supported);
      uint32_t byteLength = sizeof(VkDescriptorSetLayoutSupport::supported);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "supported"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDescriptorSetLayoutSupport"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDescriptorSetLayoutSupportKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorSetLayoutSupportKHR, sType);
      uint32_t byteLength = sizeof(VkDescriptorSetLayoutSupportKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorSetLayoutSupportKHR, pNext);
      uint32_t byteLength = sizeof(VkDescriptorSetLayoutSupportKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorSetLayoutSupportKHR, supported);
      uint32_t byteLength = sizeof(VkDescriptorSetLayoutSupportKHR::supported);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "supported"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDescriptorSetLayoutSupportKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderDrawParameterFeatures)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceShaderDrawParameterFeatures, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceShaderDrawParameterFeatures::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceShaderDrawParameterFeatures, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceShaderDrawParameterFeatures::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceShaderDrawParameterFeatures, shaderDrawParameters);
      uint32_t byteLength = sizeof(VkPhysicalDeviceShaderDrawParameterFeatures::shaderDrawParameters);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "shaderDrawParameters"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceShaderDrawParameterFeatures"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceFloat16Int8FeaturesKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFloat16Int8FeaturesKHR, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFloat16Int8FeaturesKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFloat16Int8FeaturesKHR, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFloat16Int8FeaturesKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFloat16Int8FeaturesKHR, shaderFloat16);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFloat16Int8FeaturesKHR::shaderFloat16);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "shaderFloat16"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFloat16Int8FeaturesKHR, shaderInt8);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFloat16Int8FeaturesKHR::shaderInt8);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "shaderInt8"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceFloat16Int8FeaturesKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceFloatControlsPropertiesKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFloatControlsPropertiesKHR, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFloatControlsPropertiesKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFloatControlsPropertiesKHR, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFloatControlsPropertiesKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFloatControlsPropertiesKHR, separateDenormSettings);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFloatControlsPropertiesKHR::separateDenormSettings);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "separateDenormSettings"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFloatControlsPropertiesKHR, separateRoundingModeSettings);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFloatControlsPropertiesKHR::separateRoundingModeSettings);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "separateRoundingModeSettings"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFloatControlsPropertiesKHR, shaderSignedZeroInfNanPreserveFloat16);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFloatControlsPropertiesKHR::shaderSignedZeroInfNanPreserveFloat16);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "shaderSignedZeroInfNanPreserveFloat16"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFloatControlsPropertiesKHR, shaderSignedZeroInfNanPreserveFloat32);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFloatControlsPropertiesKHR::shaderSignedZeroInfNanPreserveFloat32);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "shaderSignedZeroInfNanPreserveFloat32"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFloatControlsPropertiesKHR, shaderSignedZeroInfNanPreserveFloat64);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFloatControlsPropertiesKHR::shaderSignedZeroInfNanPreserveFloat64);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "shaderSignedZeroInfNanPreserveFloat64"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFloatControlsPropertiesKHR, shaderDenormPreserveFloat16);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFloatControlsPropertiesKHR::shaderDenormPreserveFloat16);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "shaderDenormPreserveFloat16"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFloatControlsPropertiesKHR, shaderDenormPreserveFloat32);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFloatControlsPropertiesKHR::shaderDenormPreserveFloat32);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "shaderDenormPreserveFloat32"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFloatControlsPropertiesKHR, shaderDenormPreserveFloat64);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFloatControlsPropertiesKHR::shaderDenormPreserveFloat64);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "shaderDenormPreserveFloat64"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFloatControlsPropertiesKHR, shaderDenormFlushToZeroFloat16);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFloatControlsPropertiesKHR::shaderDenormFlushToZeroFloat16);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "shaderDenormFlushToZeroFloat16"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFloatControlsPropertiesKHR, shaderDenormFlushToZeroFloat32);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFloatControlsPropertiesKHR::shaderDenormFlushToZeroFloat32);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "shaderDenormFlushToZeroFloat32"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFloatControlsPropertiesKHR, shaderDenormFlushToZeroFloat64);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFloatControlsPropertiesKHR::shaderDenormFlushToZeroFloat64);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "shaderDenormFlushToZeroFloat64"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFloatControlsPropertiesKHR, shaderRoundingModeRTEFloat16);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFloatControlsPropertiesKHR::shaderRoundingModeRTEFloat16);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "shaderRoundingModeRTEFloat16"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFloatControlsPropertiesKHR, shaderRoundingModeRTEFloat32);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFloatControlsPropertiesKHR::shaderRoundingModeRTEFloat32);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "shaderRoundingModeRTEFloat32"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFloatControlsPropertiesKHR, shaderRoundingModeRTEFloat64);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFloatControlsPropertiesKHR::shaderRoundingModeRTEFloat64);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "shaderRoundingModeRTEFloat64"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFloatControlsPropertiesKHR, shaderRoundingModeRTZFloat16);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFloatControlsPropertiesKHR::shaderRoundingModeRTZFloat16);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "shaderRoundingModeRTZFloat16"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFloatControlsPropertiesKHR, shaderRoundingModeRTZFloat32);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFloatControlsPropertiesKHR::shaderRoundingModeRTZFloat32);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "shaderRoundingModeRTZFloat32"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFloatControlsPropertiesKHR, shaderRoundingModeRTZFloat64);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFloatControlsPropertiesKHR::shaderRoundingModeRTZFloat64);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "shaderRoundingModeRTZFloat64"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceFloatControlsPropertiesKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkShaderResourceUsageAMD)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkShaderResourceUsageAMD, numUsedVgprs);
      uint32_t byteLength = sizeof(VkShaderResourceUsageAMD::numUsedVgprs);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "numUsedVgprs"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkShaderResourceUsageAMD, numUsedSgprs);
      uint32_t byteLength = sizeof(VkShaderResourceUsageAMD::numUsedSgprs);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "numUsedSgprs"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkShaderResourceUsageAMD, ldsSizePerLocalWorkGroup);
      uint32_t byteLength = sizeof(VkShaderResourceUsageAMD::ldsSizePerLocalWorkGroup);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "ldsSizePerLocalWorkGroup"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkShaderResourceUsageAMD, ldsUsageSizeInBytes);
      uint32_t byteLength = sizeof(VkShaderResourceUsageAMD::ldsUsageSizeInBytes);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "ldsUsageSizeInBytes"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkShaderResourceUsageAMD, scratchMemUsageInBytes);
      uint32_t byteLength = sizeof(VkShaderResourceUsageAMD::scratchMemUsageInBytes);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "scratchMemUsageInBytes"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkShaderResourceUsageAMD"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkShaderStatisticsInfoAMD)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkShaderStatisticsInfoAMD, shaderStageMask);
      uint32_t byteLength = sizeof(VkShaderStatisticsInfoAMD::shaderStageMask);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "shaderStageMask"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkShaderStatisticsInfoAMD, resourceUsage);
      uint32_t byteLength = sizeof(VkShaderStatisticsInfoAMD::resourceUsage);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "resourceUsage"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkShaderStatisticsInfoAMD, numPhysicalVgprs);
      uint32_t byteLength = sizeof(VkShaderStatisticsInfoAMD::numPhysicalVgprs);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "numPhysicalVgprs"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkShaderStatisticsInfoAMD, numPhysicalSgprs);
      uint32_t byteLength = sizeof(VkShaderStatisticsInfoAMD::numPhysicalSgprs);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "numPhysicalSgprs"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkShaderStatisticsInfoAMD, numAvailableVgprs);
      uint32_t byteLength = sizeof(VkShaderStatisticsInfoAMD::numAvailableVgprs);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "numAvailableVgprs"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkShaderStatisticsInfoAMD, numAvailableSgprs);
      uint32_t byteLength = sizeof(VkShaderStatisticsInfoAMD::numAvailableSgprs);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "numAvailableSgprs"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkShaderStatisticsInfoAMD, computeWorkGroupSize);
      uint32_t byteLength = sizeof(VkShaderStatisticsInfoAMD::computeWorkGroupSize);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "computeWorkGroupSize"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkShaderStatisticsInfoAMD"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDeviceQueueGlobalPriorityCreateInfoEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceQueueGlobalPriorityCreateInfoEXT, sType);
      uint32_t byteLength = sizeof(VkDeviceQueueGlobalPriorityCreateInfoEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceQueueGlobalPriorityCreateInfoEXT, pNext);
      uint32_t byteLength = sizeof(VkDeviceQueueGlobalPriorityCreateInfoEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceQueueGlobalPriorityCreateInfoEXT, globalPriority);
      uint32_t byteLength = sizeof(VkDeviceQueueGlobalPriorityCreateInfoEXT::globalPriority);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "globalPriority"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDeviceQueueGlobalPriorityCreateInfoEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDebugUtilsObjectNameInfoEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDebugUtilsObjectNameInfoEXT, sType);
      uint32_t byteLength = sizeof(VkDebugUtilsObjectNameInfoEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDebugUtilsObjectNameInfoEXT, pNext);
      uint32_t byteLength = sizeof(VkDebugUtilsObjectNameInfoEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDebugUtilsObjectNameInfoEXT, objectType);
      uint32_t byteLength = sizeof(VkDebugUtilsObjectNameInfoEXT::objectType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "objectType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDebugUtilsObjectNameInfoEXT, objectHandle);
      uint32_t byteLength = sizeof(VkDebugUtilsObjectNameInfoEXT::objectHandle);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "objectHandle"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDebugUtilsObjectNameInfoEXT, pObjectName);
      uint32_t byteLength = sizeof(VkDebugUtilsObjectNameInfoEXT::pObjectName);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pObjectName"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDebugUtilsObjectNameInfoEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDebugUtilsObjectTagInfoEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDebugUtilsObjectTagInfoEXT, sType);
      uint32_t byteLength = sizeof(VkDebugUtilsObjectTagInfoEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDebugUtilsObjectTagInfoEXT, pNext);
      uint32_t byteLength = sizeof(VkDebugUtilsObjectTagInfoEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDebugUtilsObjectTagInfoEXT, objectType);
      uint32_t byteLength = sizeof(VkDebugUtilsObjectTagInfoEXT::objectType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "objectType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDebugUtilsObjectTagInfoEXT, objectHandle);
      uint32_t byteLength = sizeof(VkDebugUtilsObjectTagInfoEXT::objectHandle);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "objectHandle"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDebugUtilsObjectTagInfoEXT, tagName);
      uint32_t byteLength = sizeof(VkDebugUtilsObjectTagInfoEXT::tagName);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "tagName"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDebugUtilsObjectTagInfoEXT, tagSize);
      uint32_t byteLength = sizeof(VkDebugUtilsObjectTagInfoEXT::tagSize);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "tagSize"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDebugUtilsObjectTagInfoEXT, pTag);
      uint32_t byteLength = sizeof(VkDebugUtilsObjectTagInfoEXT::pTag);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pTag"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDebugUtilsObjectTagInfoEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDebugUtilsLabelEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDebugUtilsLabelEXT, sType);
      uint32_t byteLength = sizeof(VkDebugUtilsLabelEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDebugUtilsLabelEXT, pNext);
      uint32_t byteLength = sizeof(VkDebugUtilsLabelEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDebugUtilsLabelEXT, pLabelName);
      uint32_t byteLength = sizeof(VkDebugUtilsLabelEXT::pLabelName);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pLabelName"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDebugUtilsLabelEXT, color);
      uint32_t byteLength = sizeof(VkDebugUtilsLabelEXT::color);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "color"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDebugUtilsLabelEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDebugUtilsMessengerCreateInfoEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDebugUtilsMessengerCreateInfoEXT, sType);
      uint32_t byteLength = sizeof(VkDebugUtilsMessengerCreateInfoEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDebugUtilsMessengerCreateInfoEXT, pNext);
      uint32_t byteLength = sizeof(VkDebugUtilsMessengerCreateInfoEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDebugUtilsMessengerCreateInfoEXT, flags);
      uint32_t byteLength = sizeof(VkDebugUtilsMessengerCreateInfoEXT::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDebugUtilsMessengerCreateInfoEXT, messageSeverity);
      uint32_t byteLength = sizeof(VkDebugUtilsMessengerCreateInfoEXT::messageSeverity);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "messageSeverity"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDebugUtilsMessengerCreateInfoEXT, messageType);
      uint32_t byteLength = sizeof(VkDebugUtilsMessengerCreateInfoEXT::messageType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "messageType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDebugUtilsMessengerCreateInfoEXT, pfnUserCallback);
      uint32_t byteLength = sizeof(VkDebugUtilsMessengerCreateInfoEXT::pfnUserCallback);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pfnUserCallback"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDebugUtilsMessengerCreateInfoEXT, pUserData);
      uint32_t byteLength = sizeof(VkDebugUtilsMessengerCreateInfoEXT::pUserData);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pUserData"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDebugUtilsMessengerCreateInfoEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDebugUtilsMessengerCallbackDataEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDebugUtilsMessengerCallbackDataEXT, sType);
      uint32_t byteLength = sizeof(VkDebugUtilsMessengerCallbackDataEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDebugUtilsMessengerCallbackDataEXT, pNext);
      uint32_t byteLength = sizeof(VkDebugUtilsMessengerCallbackDataEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDebugUtilsMessengerCallbackDataEXT, flags);
      uint32_t byteLength = sizeof(VkDebugUtilsMessengerCallbackDataEXT::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDebugUtilsMessengerCallbackDataEXT, pMessageIdName);
      uint32_t byteLength = sizeof(VkDebugUtilsMessengerCallbackDataEXT::pMessageIdName);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pMessageIdName"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDebugUtilsMessengerCallbackDataEXT, messageIdNumber);
      uint32_t byteLength = sizeof(VkDebugUtilsMessengerCallbackDataEXT::messageIdNumber);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "messageIdNumber"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDebugUtilsMessengerCallbackDataEXT, pMessage);
      uint32_t byteLength = sizeof(VkDebugUtilsMessengerCallbackDataEXT::pMessage);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pMessage"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDebugUtilsMessengerCallbackDataEXT, queueLabelCount);
      uint32_t byteLength = sizeof(VkDebugUtilsMessengerCallbackDataEXT::queueLabelCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "queueLabelCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDebugUtilsMessengerCallbackDataEXT, pQueueLabels);
      uint32_t byteLength = sizeof(VkDebugUtilsMessengerCallbackDataEXT::pQueueLabels);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pQueueLabels"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDebugUtilsMessengerCallbackDataEXT, cmdBufLabelCount);
      uint32_t byteLength = sizeof(VkDebugUtilsMessengerCallbackDataEXT::cmdBufLabelCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "cmdBufLabelCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDebugUtilsMessengerCallbackDataEXT, pCmdBufLabels);
      uint32_t byteLength = sizeof(VkDebugUtilsMessengerCallbackDataEXT::pCmdBufLabels);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pCmdBufLabels"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDebugUtilsMessengerCallbackDataEXT, objectCount);
      uint32_t byteLength = sizeof(VkDebugUtilsMessengerCallbackDataEXT::objectCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "objectCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDebugUtilsMessengerCallbackDataEXT, pObjects);
      uint32_t byteLength = sizeof(VkDebugUtilsMessengerCallbackDataEXT::pObjects);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pObjects"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDebugUtilsMessengerCallbackDataEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkImportMemoryHostPointerInfoEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImportMemoryHostPointerInfoEXT, sType);
      uint32_t byteLength = sizeof(VkImportMemoryHostPointerInfoEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImportMemoryHostPointerInfoEXT, pNext);
      uint32_t byteLength = sizeof(VkImportMemoryHostPointerInfoEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImportMemoryHostPointerInfoEXT, handleType);
      uint32_t byteLength = sizeof(VkImportMemoryHostPointerInfoEXT::handleType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "handleType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImportMemoryHostPointerInfoEXT, pHostPointer);
      uint32_t byteLength = sizeof(VkImportMemoryHostPointerInfoEXT::pHostPointer);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pHostPointer"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkImportMemoryHostPointerInfoEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkMemoryHostPointerPropertiesEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMemoryHostPointerPropertiesEXT, sType);
      uint32_t byteLength = sizeof(VkMemoryHostPointerPropertiesEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMemoryHostPointerPropertiesEXT, pNext);
      uint32_t byteLength = sizeof(VkMemoryHostPointerPropertiesEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMemoryHostPointerPropertiesEXT, memoryTypeBits);
      uint32_t byteLength = sizeof(VkMemoryHostPointerPropertiesEXT::memoryTypeBits);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "memoryTypeBits"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkMemoryHostPointerPropertiesEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceExternalMemoryHostPropertiesEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceExternalMemoryHostPropertiesEXT, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceExternalMemoryHostPropertiesEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceExternalMemoryHostPropertiesEXT, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceExternalMemoryHostPropertiesEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceExternalMemoryHostPropertiesEXT, minImportedHostPointerAlignment);
      uint32_t byteLength = sizeof(VkPhysicalDeviceExternalMemoryHostPropertiesEXT::minImportedHostPointerAlignment);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "minImportedHostPointerAlignment"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceExternalMemoryHostPropertiesEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceConservativeRasterizationPropertiesEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceConservativeRasterizationPropertiesEXT, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceConservativeRasterizationPropertiesEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceConservativeRasterizationPropertiesEXT, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceConservativeRasterizationPropertiesEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceConservativeRasterizationPropertiesEXT, primitiveOverestimationSize);
      uint32_t byteLength = sizeof(VkPhysicalDeviceConservativeRasterizationPropertiesEXT::primitiveOverestimationSize);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "primitiveOverestimationSize"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceConservativeRasterizationPropertiesEXT, maxExtraPrimitiveOverestimationSize);
      uint32_t byteLength = sizeof(VkPhysicalDeviceConservativeRasterizationPropertiesEXT::maxExtraPrimitiveOverestimationSize);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxExtraPrimitiveOverestimationSize"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceConservativeRasterizationPropertiesEXT, extraPrimitiveOverestimationSizeGranularity);
      uint32_t byteLength = sizeof(VkPhysicalDeviceConservativeRasterizationPropertiesEXT::extraPrimitiveOverestimationSizeGranularity);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "extraPrimitiveOverestimationSizeGranularity"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceConservativeRasterizationPropertiesEXT, primitiveUnderestimation);
      uint32_t byteLength = sizeof(VkPhysicalDeviceConservativeRasterizationPropertiesEXT::primitiveUnderestimation);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "primitiveUnderestimation"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceConservativeRasterizationPropertiesEXT, conservativePointAndLineRasterization);
      uint32_t byteLength = sizeof(VkPhysicalDeviceConservativeRasterizationPropertiesEXT::conservativePointAndLineRasterization);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "conservativePointAndLineRasterization"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceConservativeRasterizationPropertiesEXT, degenerateTrianglesRasterized);
      uint32_t byteLength = sizeof(VkPhysicalDeviceConservativeRasterizationPropertiesEXT::degenerateTrianglesRasterized);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "degenerateTrianglesRasterized"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceConservativeRasterizationPropertiesEXT, degenerateLinesRasterized);
      uint32_t byteLength = sizeof(VkPhysicalDeviceConservativeRasterizationPropertiesEXT::degenerateLinesRasterized);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "degenerateLinesRasterized"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceConservativeRasterizationPropertiesEXT, fullyCoveredFragmentShaderInputVariable);
      uint32_t byteLength = sizeof(VkPhysicalDeviceConservativeRasterizationPropertiesEXT::fullyCoveredFragmentShaderInputVariable);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "fullyCoveredFragmentShaderInputVariable"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceConservativeRasterizationPropertiesEXT, conservativeRasterizationPostDepthCoverage);
      uint32_t byteLength = sizeof(VkPhysicalDeviceConservativeRasterizationPropertiesEXT::conservativeRasterizationPostDepthCoverage);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "conservativeRasterizationPostDepthCoverage"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceConservativeRasterizationPropertiesEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkCalibratedTimestampInfoEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCalibratedTimestampInfoEXT, sType);
      uint32_t byteLength = sizeof(VkCalibratedTimestampInfoEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCalibratedTimestampInfoEXT, pNext);
      uint32_t byteLength = sizeof(VkCalibratedTimestampInfoEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCalibratedTimestampInfoEXT, timeDomain);
      uint32_t byteLength = sizeof(VkCalibratedTimestampInfoEXT::timeDomain);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "timeDomain"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkCalibratedTimestampInfoEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderCorePropertiesAMD)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceShaderCorePropertiesAMD, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceShaderCorePropertiesAMD::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceShaderCorePropertiesAMD, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceShaderCorePropertiesAMD::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceShaderCorePropertiesAMD, shaderEngineCount);
      uint32_t byteLength = sizeof(VkPhysicalDeviceShaderCorePropertiesAMD::shaderEngineCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "shaderEngineCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceShaderCorePropertiesAMD, shaderArraysPerEngineCount);
      uint32_t byteLength = sizeof(VkPhysicalDeviceShaderCorePropertiesAMD::shaderArraysPerEngineCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "shaderArraysPerEngineCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceShaderCorePropertiesAMD, computeUnitsPerShaderArray);
      uint32_t byteLength = sizeof(VkPhysicalDeviceShaderCorePropertiesAMD::computeUnitsPerShaderArray);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "computeUnitsPerShaderArray"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceShaderCorePropertiesAMD, simdPerComputeUnit);
      uint32_t byteLength = sizeof(VkPhysicalDeviceShaderCorePropertiesAMD::simdPerComputeUnit);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "simdPerComputeUnit"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceShaderCorePropertiesAMD, wavefrontsPerSimd);
      uint32_t byteLength = sizeof(VkPhysicalDeviceShaderCorePropertiesAMD::wavefrontsPerSimd);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "wavefrontsPerSimd"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceShaderCorePropertiesAMD, wavefrontSize);
      uint32_t byteLength = sizeof(VkPhysicalDeviceShaderCorePropertiesAMD::wavefrontSize);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "wavefrontSize"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceShaderCorePropertiesAMD, sgprsPerSimd);
      uint32_t byteLength = sizeof(VkPhysicalDeviceShaderCorePropertiesAMD::sgprsPerSimd);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sgprsPerSimd"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceShaderCorePropertiesAMD, minSgprAllocation);
      uint32_t byteLength = sizeof(VkPhysicalDeviceShaderCorePropertiesAMD::minSgprAllocation);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "minSgprAllocation"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceShaderCorePropertiesAMD, maxSgprAllocation);
      uint32_t byteLength = sizeof(VkPhysicalDeviceShaderCorePropertiesAMD::maxSgprAllocation);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxSgprAllocation"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceShaderCorePropertiesAMD, sgprAllocationGranularity);
      uint32_t byteLength = sizeof(VkPhysicalDeviceShaderCorePropertiesAMD::sgprAllocationGranularity);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sgprAllocationGranularity"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceShaderCorePropertiesAMD, vgprsPerSimd);
      uint32_t byteLength = sizeof(VkPhysicalDeviceShaderCorePropertiesAMD::vgprsPerSimd);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "vgprsPerSimd"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceShaderCorePropertiesAMD, minVgprAllocation);
      uint32_t byteLength = sizeof(VkPhysicalDeviceShaderCorePropertiesAMD::minVgprAllocation);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "minVgprAllocation"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceShaderCorePropertiesAMD, maxVgprAllocation);
      uint32_t byteLength = sizeof(VkPhysicalDeviceShaderCorePropertiesAMD::maxVgprAllocation);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxVgprAllocation"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceShaderCorePropertiesAMD, vgprAllocationGranularity);
      uint32_t byteLength = sizeof(VkPhysicalDeviceShaderCorePropertiesAMD::vgprAllocationGranularity);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "vgprAllocationGranularity"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceShaderCorePropertiesAMD"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPipelineRasterizationConservativeStateCreateInfoEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineRasterizationConservativeStateCreateInfoEXT, sType);
      uint32_t byteLength = sizeof(VkPipelineRasterizationConservativeStateCreateInfoEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineRasterizationConservativeStateCreateInfoEXT, pNext);
      uint32_t byteLength = sizeof(VkPipelineRasterizationConservativeStateCreateInfoEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineRasterizationConservativeStateCreateInfoEXT, flags);
      uint32_t byteLength = sizeof(VkPipelineRasterizationConservativeStateCreateInfoEXT::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineRasterizationConservativeStateCreateInfoEXT, conservativeRasterizationMode);
      uint32_t byteLength = sizeof(VkPipelineRasterizationConservativeStateCreateInfoEXT::conservativeRasterizationMode);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "conservativeRasterizationMode"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineRasterizationConservativeStateCreateInfoEXT, extraPrimitiveOverestimationSize);
      uint32_t byteLength = sizeof(VkPipelineRasterizationConservativeStateCreateInfoEXT::extraPrimitiveOverestimationSize);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "extraPrimitiveOverestimationSize"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPipelineRasterizationConservativeStateCreateInfoEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT, shaderInputAttachmentArrayDynamicIndexing);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT::shaderInputAttachmentArrayDynamicIndexing);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "shaderInputAttachmentArrayDynamicIndexing"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT, shaderUniformTexelBufferArrayDynamicIndexing);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT::shaderUniformTexelBufferArrayDynamicIndexing);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "shaderUniformTexelBufferArrayDynamicIndexing"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT, shaderStorageTexelBufferArrayDynamicIndexing);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT::shaderStorageTexelBufferArrayDynamicIndexing);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "shaderStorageTexelBufferArrayDynamicIndexing"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT, shaderUniformBufferArrayNonUniformIndexing);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT::shaderUniformBufferArrayNonUniformIndexing);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "shaderUniformBufferArrayNonUniformIndexing"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT, shaderSampledImageArrayNonUniformIndexing);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT::shaderSampledImageArrayNonUniformIndexing);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "shaderSampledImageArrayNonUniformIndexing"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT, shaderStorageBufferArrayNonUniformIndexing);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT::shaderStorageBufferArrayNonUniformIndexing);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "shaderStorageBufferArrayNonUniformIndexing"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT, shaderStorageImageArrayNonUniformIndexing);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT::shaderStorageImageArrayNonUniformIndexing);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "shaderStorageImageArrayNonUniformIndexing"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT, shaderInputAttachmentArrayNonUniformIndexing);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT::shaderInputAttachmentArrayNonUniformIndexing);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "shaderInputAttachmentArrayNonUniformIndexing"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT, shaderUniformTexelBufferArrayNonUniformIndexing);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT::shaderUniformTexelBufferArrayNonUniformIndexing);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "shaderUniformTexelBufferArrayNonUniformIndexing"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT, shaderStorageTexelBufferArrayNonUniformIndexing);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT::shaderStorageTexelBufferArrayNonUniformIndexing);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "shaderStorageTexelBufferArrayNonUniformIndexing"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT, descriptorBindingUniformBufferUpdateAfterBind);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT::descriptorBindingUniformBufferUpdateAfterBind);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "descriptorBindingUniformBufferUpdateAfterBind"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT, descriptorBindingSampledImageUpdateAfterBind);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT::descriptorBindingSampledImageUpdateAfterBind);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "descriptorBindingSampledImageUpdateAfterBind"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT, descriptorBindingStorageImageUpdateAfterBind);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT::descriptorBindingStorageImageUpdateAfterBind);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "descriptorBindingStorageImageUpdateAfterBind"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT, descriptorBindingStorageBufferUpdateAfterBind);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT::descriptorBindingStorageBufferUpdateAfterBind);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "descriptorBindingStorageBufferUpdateAfterBind"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT, descriptorBindingUniformTexelBufferUpdateAfterBind);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT::descriptorBindingUniformTexelBufferUpdateAfterBind);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "descriptorBindingUniformTexelBufferUpdateAfterBind"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT, descriptorBindingStorageTexelBufferUpdateAfterBind);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT::descriptorBindingStorageTexelBufferUpdateAfterBind);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "descriptorBindingStorageTexelBufferUpdateAfterBind"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT, descriptorBindingUpdateUnusedWhilePending);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT::descriptorBindingUpdateUnusedWhilePending);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "descriptorBindingUpdateUnusedWhilePending"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT, descriptorBindingPartiallyBound);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT::descriptorBindingPartiallyBound);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "descriptorBindingPartiallyBound"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT, descriptorBindingVariableDescriptorCount);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT::descriptorBindingVariableDescriptorCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "descriptorBindingVariableDescriptorCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT, runtimeDescriptorArray);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT::runtimeDescriptorArray);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "runtimeDescriptorArray"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceDescriptorIndexingFeaturesEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT, maxUpdateAfterBindDescriptorsInAllPools);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT::maxUpdateAfterBindDescriptorsInAllPools);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxUpdateAfterBindDescriptorsInAllPools"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT, shaderUniformBufferArrayNonUniformIndexingNative);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT::shaderUniformBufferArrayNonUniformIndexingNative);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "shaderUniformBufferArrayNonUniformIndexingNative"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT, shaderSampledImageArrayNonUniformIndexingNative);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT::shaderSampledImageArrayNonUniformIndexingNative);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "shaderSampledImageArrayNonUniformIndexingNative"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT, shaderStorageBufferArrayNonUniformIndexingNative);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT::shaderStorageBufferArrayNonUniformIndexingNative);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "shaderStorageBufferArrayNonUniformIndexingNative"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT, shaderStorageImageArrayNonUniformIndexingNative);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT::shaderStorageImageArrayNonUniformIndexingNative);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "shaderStorageImageArrayNonUniformIndexingNative"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT, shaderInputAttachmentArrayNonUniformIndexingNative);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT::shaderInputAttachmentArrayNonUniformIndexingNative);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "shaderInputAttachmentArrayNonUniformIndexingNative"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT, robustBufferAccessUpdateAfterBind);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT::robustBufferAccessUpdateAfterBind);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "robustBufferAccessUpdateAfterBind"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT, quadDivergentImplicitLod);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT::quadDivergentImplicitLod);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "quadDivergentImplicitLod"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT, maxPerStageDescriptorUpdateAfterBindSamplers);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT::maxPerStageDescriptorUpdateAfterBindSamplers);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxPerStageDescriptorUpdateAfterBindSamplers"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT, maxPerStageDescriptorUpdateAfterBindUniformBuffers);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT::maxPerStageDescriptorUpdateAfterBindUniformBuffers);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxPerStageDescriptorUpdateAfterBindUniformBuffers"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT, maxPerStageDescriptorUpdateAfterBindStorageBuffers);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT::maxPerStageDescriptorUpdateAfterBindStorageBuffers);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxPerStageDescriptorUpdateAfterBindStorageBuffers"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT, maxPerStageDescriptorUpdateAfterBindSampledImages);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT::maxPerStageDescriptorUpdateAfterBindSampledImages);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxPerStageDescriptorUpdateAfterBindSampledImages"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT, maxPerStageDescriptorUpdateAfterBindStorageImages);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT::maxPerStageDescriptorUpdateAfterBindStorageImages);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxPerStageDescriptorUpdateAfterBindStorageImages"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT, maxPerStageDescriptorUpdateAfterBindInputAttachments);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT::maxPerStageDescriptorUpdateAfterBindInputAttachments);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxPerStageDescriptorUpdateAfterBindInputAttachments"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT, maxPerStageUpdateAfterBindResources);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT::maxPerStageUpdateAfterBindResources);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxPerStageUpdateAfterBindResources"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT, maxDescriptorSetUpdateAfterBindSamplers);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT::maxDescriptorSetUpdateAfterBindSamplers);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxDescriptorSetUpdateAfterBindSamplers"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT, maxDescriptorSetUpdateAfterBindUniformBuffers);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT::maxDescriptorSetUpdateAfterBindUniformBuffers);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxDescriptorSetUpdateAfterBindUniformBuffers"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT, maxDescriptorSetUpdateAfterBindUniformBuffersDynamic);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT::maxDescriptorSetUpdateAfterBindUniformBuffersDynamic);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxDescriptorSetUpdateAfterBindUniformBuffersDynamic"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT, maxDescriptorSetUpdateAfterBindStorageBuffers);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT::maxDescriptorSetUpdateAfterBindStorageBuffers);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxDescriptorSetUpdateAfterBindStorageBuffers"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT, maxDescriptorSetUpdateAfterBindStorageBuffersDynamic);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT::maxDescriptorSetUpdateAfterBindStorageBuffersDynamic);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxDescriptorSetUpdateAfterBindStorageBuffersDynamic"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT, maxDescriptorSetUpdateAfterBindSampledImages);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT::maxDescriptorSetUpdateAfterBindSampledImages);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxDescriptorSetUpdateAfterBindSampledImages"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT, maxDescriptorSetUpdateAfterBindStorageImages);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT::maxDescriptorSetUpdateAfterBindStorageImages);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxDescriptorSetUpdateAfterBindStorageImages"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT, maxDescriptorSetUpdateAfterBindInputAttachments);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT::maxDescriptorSetUpdateAfterBindInputAttachments);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxDescriptorSetUpdateAfterBindInputAttachments"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceDescriptorIndexingPropertiesEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDescriptorSetLayoutBindingFlagsCreateInfoEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorSetLayoutBindingFlagsCreateInfoEXT, sType);
      uint32_t byteLength = sizeof(VkDescriptorSetLayoutBindingFlagsCreateInfoEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorSetLayoutBindingFlagsCreateInfoEXT, pNext);
      uint32_t byteLength = sizeof(VkDescriptorSetLayoutBindingFlagsCreateInfoEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorSetLayoutBindingFlagsCreateInfoEXT, bindingCount);
      uint32_t byteLength = sizeof(VkDescriptorSetLayoutBindingFlagsCreateInfoEXT::bindingCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "bindingCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorSetLayoutBindingFlagsCreateInfoEXT, pBindingFlags);
      uint32_t byteLength = sizeof(VkDescriptorSetLayoutBindingFlagsCreateInfoEXT::pBindingFlags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pBindingFlags"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDescriptorSetLayoutBindingFlagsCreateInfoEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDescriptorSetVariableDescriptorCountAllocateInfoEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorSetVariableDescriptorCountAllocateInfoEXT, sType);
      uint32_t byteLength = sizeof(VkDescriptorSetVariableDescriptorCountAllocateInfoEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorSetVariableDescriptorCountAllocateInfoEXT, pNext);
      uint32_t byteLength = sizeof(VkDescriptorSetVariableDescriptorCountAllocateInfoEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorSetVariableDescriptorCountAllocateInfoEXT, descriptorSetCount);
      uint32_t byteLength = sizeof(VkDescriptorSetVariableDescriptorCountAllocateInfoEXT::descriptorSetCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "descriptorSetCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorSetVariableDescriptorCountAllocateInfoEXT, pDescriptorCounts);
      uint32_t byteLength = sizeof(VkDescriptorSetVariableDescriptorCountAllocateInfoEXT::pDescriptorCounts);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pDescriptorCounts"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDescriptorSetVariableDescriptorCountAllocateInfoEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDescriptorSetVariableDescriptorCountLayoutSupportEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorSetVariableDescriptorCountLayoutSupportEXT, sType);
      uint32_t byteLength = sizeof(VkDescriptorSetVariableDescriptorCountLayoutSupportEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorSetVariableDescriptorCountLayoutSupportEXT, pNext);
      uint32_t byteLength = sizeof(VkDescriptorSetVariableDescriptorCountLayoutSupportEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDescriptorSetVariableDescriptorCountLayoutSupportEXT, maxVariableDescriptorCount);
      uint32_t byteLength = sizeof(VkDescriptorSetVariableDescriptorCountLayoutSupportEXT::maxVariableDescriptorCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxVariableDescriptorCount"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDescriptorSetVariableDescriptorCountLayoutSupportEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkAttachmentDescription2KHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkAttachmentDescription2KHR, sType);
      uint32_t byteLength = sizeof(VkAttachmentDescription2KHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkAttachmentDescription2KHR, pNext);
      uint32_t byteLength = sizeof(VkAttachmentDescription2KHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkAttachmentDescription2KHR, flags);
      uint32_t byteLength = sizeof(VkAttachmentDescription2KHR::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkAttachmentDescription2KHR, format);
      uint32_t byteLength = sizeof(VkAttachmentDescription2KHR::format);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "format"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkAttachmentDescription2KHR, samples);
      uint32_t byteLength = sizeof(VkAttachmentDescription2KHR::samples);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "samples"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkAttachmentDescription2KHR, loadOp);
      uint32_t byteLength = sizeof(VkAttachmentDescription2KHR::loadOp);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "loadOp"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkAttachmentDescription2KHR, storeOp);
      uint32_t byteLength = sizeof(VkAttachmentDescription2KHR::storeOp);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "storeOp"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkAttachmentDescription2KHR, stencilLoadOp);
      uint32_t byteLength = sizeof(VkAttachmentDescription2KHR::stencilLoadOp);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "stencilLoadOp"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkAttachmentDescription2KHR, stencilStoreOp);
      uint32_t byteLength = sizeof(VkAttachmentDescription2KHR::stencilStoreOp);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "stencilStoreOp"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkAttachmentDescription2KHR, initialLayout);
      uint32_t byteLength = sizeof(VkAttachmentDescription2KHR::initialLayout);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "initialLayout"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkAttachmentDescription2KHR, finalLayout);
      uint32_t byteLength = sizeof(VkAttachmentDescription2KHR::finalLayout);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "finalLayout"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkAttachmentDescription2KHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkAttachmentReference2KHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkAttachmentReference2KHR, sType);
      uint32_t byteLength = sizeof(VkAttachmentReference2KHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkAttachmentReference2KHR, pNext);
      uint32_t byteLength = sizeof(VkAttachmentReference2KHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkAttachmentReference2KHR, attachment);
      uint32_t byteLength = sizeof(VkAttachmentReference2KHR::attachment);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "attachment"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkAttachmentReference2KHR, layout);
      uint32_t byteLength = sizeof(VkAttachmentReference2KHR::layout);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "layout"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkAttachmentReference2KHR, aspectMask);
      uint32_t byteLength = sizeof(VkAttachmentReference2KHR::aspectMask);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "aspectMask"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkAttachmentReference2KHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkSubpassDescription2KHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSubpassDescription2KHR, sType);
      uint32_t byteLength = sizeof(VkSubpassDescription2KHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSubpassDescription2KHR, pNext);
      uint32_t byteLength = sizeof(VkSubpassDescription2KHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSubpassDescription2KHR, flags);
      uint32_t byteLength = sizeof(VkSubpassDescription2KHR::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSubpassDescription2KHR, pipelineBindPoint);
      uint32_t byteLength = sizeof(VkSubpassDescription2KHR::pipelineBindPoint);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pipelineBindPoint"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSubpassDescription2KHR, viewMask);
      uint32_t byteLength = sizeof(VkSubpassDescription2KHR::viewMask);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "viewMask"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSubpassDescription2KHR, inputAttachmentCount);
      uint32_t byteLength = sizeof(VkSubpassDescription2KHR::inputAttachmentCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "inputAttachmentCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSubpassDescription2KHR, pInputAttachments);
      uint32_t byteLength = sizeof(VkSubpassDescription2KHR::pInputAttachments);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pInputAttachments"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSubpassDescription2KHR, colorAttachmentCount);
      uint32_t byteLength = sizeof(VkSubpassDescription2KHR::colorAttachmentCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "colorAttachmentCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSubpassDescription2KHR, pColorAttachments);
      uint32_t byteLength = sizeof(VkSubpassDescription2KHR::pColorAttachments);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pColorAttachments"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSubpassDescription2KHR, pResolveAttachments);
      uint32_t byteLength = sizeof(VkSubpassDescription2KHR::pResolveAttachments);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pResolveAttachments"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSubpassDescription2KHR, pDepthStencilAttachment);
      uint32_t byteLength = sizeof(VkSubpassDescription2KHR::pDepthStencilAttachment);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pDepthStencilAttachment"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSubpassDescription2KHR, preserveAttachmentCount);
      uint32_t byteLength = sizeof(VkSubpassDescription2KHR::preserveAttachmentCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "preserveAttachmentCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSubpassDescription2KHR, pPreserveAttachments);
      uint32_t byteLength = sizeof(VkSubpassDescription2KHR::pPreserveAttachments);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pPreserveAttachments"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkSubpassDescription2KHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkSubpassDependency2KHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSubpassDependency2KHR, sType);
      uint32_t byteLength = sizeof(VkSubpassDependency2KHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSubpassDependency2KHR, pNext);
      uint32_t byteLength = sizeof(VkSubpassDependency2KHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSubpassDependency2KHR, srcSubpass);
      uint32_t byteLength = sizeof(VkSubpassDependency2KHR::srcSubpass);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "srcSubpass"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSubpassDependency2KHR, dstSubpass);
      uint32_t byteLength = sizeof(VkSubpassDependency2KHR::dstSubpass);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "dstSubpass"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSubpassDependency2KHR, srcStageMask);
      uint32_t byteLength = sizeof(VkSubpassDependency2KHR::srcStageMask);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "srcStageMask"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSubpassDependency2KHR, dstStageMask);
      uint32_t byteLength = sizeof(VkSubpassDependency2KHR::dstStageMask);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "dstStageMask"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSubpassDependency2KHR, srcAccessMask);
      uint32_t byteLength = sizeof(VkSubpassDependency2KHR::srcAccessMask);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "srcAccessMask"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSubpassDependency2KHR, dstAccessMask);
      uint32_t byteLength = sizeof(VkSubpassDependency2KHR::dstAccessMask);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "dstAccessMask"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSubpassDependency2KHR, dependencyFlags);
      uint32_t byteLength = sizeof(VkSubpassDependency2KHR::dependencyFlags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "dependencyFlags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSubpassDependency2KHR, viewOffset);
      uint32_t byteLength = sizeof(VkSubpassDependency2KHR::viewOffset);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "viewOffset"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkSubpassDependency2KHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkRenderPassCreateInfo2KHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRenderPassCreateInfo2KHR, sType);
      uint32_t byteLength = sizeof(VkRenderPassCreateInfo2KHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRenderPassCreateInfo2KHR, pNext);
      uint32_t byteLength = sizeof(VkRenderPassCreateInfo2KHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRenderPassCreateInfo2KHR, flags);
      uint32_t byteLength = sizeof(VkRenderPassCreateInfo2KHR::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRenderPassCreateInfo2KHR, attachmentCount);
      uint32_t byteLength = sizeof(VkRenderPassCreateInfo2KHR::attachmentCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "attachmentCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRenderPassCreateInfo2KHR, pAttachments);
      uint32_t byteLength = sizeof(VkRenderPassCreateInfo2KHR::pAttachments);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pAttachments"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRenderPassCreateInfo2KHR, subpassCount);
      uint32_t byteLength = sizeof(VkRenderPassCreateInfo2KHR::subpassCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "subpassCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRenderPassCreateInfo2KHR, pSubpasses);
      uint32_t byteLength = sizeof(VkRenderPassCreateInfo2KHR::pSubpasses);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pSubpasses"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRenderPassCreateInfo2KHR, dependencyCount);
      uint32_t byteLength = sizeof(VkRenderPassCreateInfo2KHR::dependencyCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "dependencyCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRenderPassCreateInfo2KHR, pDependencies);
      uint32_t byteLength = sizeof(VkRenderPassCreateInfo2KHR::pDependencies);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pDependencies"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRenderPassCreateInfo2KHR, correlatedViewMaskCount);
      uint32_t byteLength = sizeof(VkRenderPassCreateInfo2KHR::correlatedViewMaskCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "correlatedViewMaskCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRenderPassCreateInfo2KHR, pCorrelatedViewMasks);
      uint32_t byteLength = sizeof(VkRenderPassCreateInfo2KHR::pCorrelatedViewMasks);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pCorrelatedViewMasks"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkRenderPassCreateInfo2KHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkSubpassBeginInfoKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSubpassBeginInfoKHR, sType);
      uint32_t byteLength = sizeof(VkSubpassBeginInfoKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSubpassBeginInfoKHR, pNext);
      uint32_t byteLength = sizeof(VkSubpassBeginInfoKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSubpassBeginInfoKHR, contents);
      uint32_t byteLength = sizeof(VkSubpassBeginInfoKHR::contents);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "contents"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkSubpassBeginInfoKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkSubpassEndInfoKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSubpassEndInfoKHR, sType);
      uint32_t byteLength = sizeof(VkSubpassEndInfoKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSubpassEndInfoKHR, pNext);
      uint32_t byteLength = sizeof(VkSubpassEndInfoKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkSubpassEndInfoKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkVertexInputBindingDivisorDescriptionEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkVertexInputBindingDivisorDescriptionEXT, binding);
      uint32_t byteLength = sizeof(VkVertexInputBindingDivisorDescriptionEXT::binding);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "binding"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkVertexInputBindingDivisorDescriptionEXT, divisor);
      uint32_t byteLength = sizeof(VkVertexInputBindingDivisorDescriptionEXT::divisor);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "divisor"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkVertexInputBindingDivisorDescriptionEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPipelineVertexInputDivisorStateCreateInfoEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineVertexInputDivisorStateCreateInfoEXT, sType);
      uint32_t byteLength = sizeof(VkPipelineVertexInputDivisorStateCreateInfoEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineVertexInputDivisorStateCreateInfoEXT, pNext);
      uint32_t byteLength = sizeof(VkPipelineVertexInputDivisorStateCreateInfoEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineVertexInputDivisorStateCreateInfoEXT, vertexBindingDivisorCount);
      uint32_t byteLength = sizeof(VkPipelineVertexInputDivisorStateCreateInfoEXT::vertexBindingDivisorCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "vertexBindingDivisorCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineVertexInputDivisorStateCreateInfoEXT, pVertexBindingDivisors);
      uint32_t byteLength = sizeof(VkPipelineVertexInputDivisorStateCreateInfoEXT::pVertexBindingDivisors);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pVertexBindingDivisors"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPipelineVertexInputDivisorStateCreateInfoEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT, maxVertexAttribDivisor);
      uint32_t byteLength = sizeof(VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT::maxVertexAttribDivisor);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxVertexAttribDivisor"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDevicePCIBusInfoPropertiesEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDevicePCIBusInfoPropertiesEXT, sType);
      uint32_t byteLength = sizeof(VkPhysicalDevicePCIBusInfoPropertiesEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDevicePCIBusInfoPropertiesEXT, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDevicePCIBusInfoPropertiesEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDevicePCIBusInfoPropertiesEXT, pciDomain);
      uint32_t byteLength = sizeof(VkPhysicalDevicePCIBusInfoPropertiesEXT::pciDomain);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pciDomain"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDevicePCIBusInfoPropertiesEXT, pciBus);
      uint32_t byteLength = sizeof(VkPhysicalDevicePCIBusInfoPropertiesEXT::pciBus);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pciBus"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDevicePCIBusInfoPropertiesEXT, pciDevice);
      uint32_t byteLength = sizeof(VkPhysicalDevicePCIBusInfoPropertiesEXT::pciDevice);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pciDevice"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDevicePCIBusInfoPropertiesEXT, pciFunction);
      uint32_t byteLength = sizeof(VkPhysicalDevicePCIBusInfoPropertiesEXT::pciFunction);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pciFunction"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDevicePCIBusInfoPropertiesEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkCommandBufferInheritanceConditionalRenderingInfoEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCommandBufferInheritanceConditionalRenderingInfoEXT, sType);
      uint32_t byteLength = sizeof(VkCommandBufferInheritanceConditionalRenderingInfoEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCommandBufferInheritanceConditionalRenderingInfoEXT, pNext);
      uint32_t byteLength = sizeof(VkCommandBufferInheritanceConditionalRenderingInfoEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCommandBufferInheritanceConditionalRenderingInfoEXT, conditionalRenderingEnable);
      uint32_t byteLength = sizeof(VkCommandBufferInheritanceConditionalRenderingInfoEXT::conditionalRenderingEnable);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "conditionalRenderingEnable"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkCommandBufferInheritanceConditionalRenderingInfoEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDevice8BitStorageFeaturesKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDevice8BitStorageFeaturesKHR, sType);
      uint32_t byteLength = sizeof(VkPhysicalDevice8BitStorageFeaturesKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDevice8BitStorageFeaturesKHR, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDevice8BitStorageFeaturesKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDevice8BitStorageFeaturesKHR, storageBuffer8BitAccess);
      uint32_t byteLength = sizeof(VkPhysicalDevice8BitStorageFeaturesKHR::storageBuffer8BitAccess);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "storageBuffer8BitAccess"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDevice8BitStorageFeaturesKHR, uniformAndStorageBuffer8BitAccess);
      uint32_t byteLength = sizeof(VkPhysicalDevice8BitStorageFeaturesKHR::uniformAndStorageBuffer8BitAccess);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "uniformAndStorageBuffer8BitAccess"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDevice8BitStorageFeaturesKHR, storagePushConstant8);
      uint32_t byteLength = sizeof(VkPhysicalDevice8BitStorageFeaturesKHR::storagePushConstant8);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "storagePushConstant8"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDevice8BitStorageFeaturesKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceConditionalRenderingFeaturesEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceConditionalRenderingFeaturesEXT, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceConditionalRenderingFeaturesEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceConditionalRenderingFeaturesEXT, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceConditionalRenderingFeaturesEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceConditionalRenderingFeaturesEXT, conditionalRendering);
      uint32_t byteLength = sizeof(VkPhysicalDeviceConditionalRenderingFeaturesEXT::conditionalRendering);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "conditionalRendering"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceConditionalRenderingFeaturesEXT, inheritedConditionalRendering);
      uint32_t byteLength = sizeof(VkPhysicalDeviceConditionalRenderingFeaturesEXT::inheritedConditionalRendering);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "inheritedConditionalRendering"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceConditionalRenderingFeaturesEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceVulkanMemoryModelFeaturesKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceVulkanMemoryModelFeaturesKHR, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceVulkanMemoryModelFeaturesKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceVulkanMemoryModelFeaturesKHR, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceVulkanMemoryModelFeaturesKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceVulkanMemoryModelFeaturesKHR, vulkanMemoryModel);
      uint32_t byteLength = sizeof(VkPhysicalDeviceVulkanMemoryModelFeaturesKHR::vulkanMemoryModel);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "vulkanMemoryModel"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceVulkanMemoryModelFeaturesKHR, vulkanMemoryModelDeviceScope);
      uint32_t byteLength = sizeof(VkPhysicalDeviceVulkanMemoryModelFeaturesKHR::vulkanMemoryModelDeviceScope);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "vulkanMemoryModelDeviceScope"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceVulkanMemoryModelFeaturesKHR, vulkanMemoryModelAvailabilityVisibilityChains);
      uint32_t byteLength = sizeof(VkPhysicalDeviceVulkanMemoryModelFeaturesKHR::vulkanMemoryModelAvailabilityVisibilityChains);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "vulkanMemoryModelAvailabilityVisibilityChains"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceVulkanMemoryModelFeaturesKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderAtomicInt64FeaturesKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceShaderAtomicInt64FeaturesKHR, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceShaderAtomicInt64FeaturesKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceShaderAtomicInt64FeaturesKHR, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceShaderAtomicInt64FeaturesKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceShaderAtomicInt64FeaturesKHR, shaderBufferInt64Atomics);
      uint32_t byteLength = sizeof(VkPhysicalDeviceShaderAtomicInt64FeaturesKHR::shaderBufferInt64Atomics);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "shaderBufferInt64Atomics"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceShaderAtomicInt64FeaturesKHR, shaderSharedInt64Atomics);
      uint32_t byteLength = sizeof(VkPhysicalDeviceShaderAtomicInt64FeaturesKHR::shaderSharedInt64Atomics);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "shaderSharedInt64Atomics"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceShaderAtomicInt64FeaturesKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT, vertexAttributeInstanceRateDivisor);
      uint32_t byteLength = sizeof(VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT::vertexAttributeInstanceRateDivisor);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "vertexAttributeInstanceRateDivisor"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT, vertexAttributeInstanceRateZeroDivisor);
      uint32_t byteLength = sizeof(VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT::vertexAttributeInstanceRateZeroDivisor);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "vertexAttributeInstanceRateZeroDivisor"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkQueueFamilyCheckpointPropertiesNV)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkQueueFamilyCheckpointPropertiesNV, sType);
      uint32_t byteLength = sizeof(VkQueueFamilyCheckpointPropertiesNV::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkQueueFamilyCheckpointPropertiesNV, pNext);
      uint32_t byteLength = sizeof(VkQueueFamilyCheckpointPropertiesNV::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkQueueFamilyCheckpointPropertiesNV, checkpointExecutionStageMask);
      uint32_t byteLength = sizeof(VkQueueFamilyCheckpointPropertiesNV::checkpointExecutionStageMask);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "checkpointExecutionStageMask"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkQueueFamilyCheckpointPropertiesNV"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkCheckpointDataNV)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCheckpointDataNV, sType);
      uint32_t byteLength = sizeof(VkCheckpointDataNV::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCheckpointDataNV, pNext);
      uint32_t byteLength = sizeof(VkCheckpointDataNV::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCheckpointDataNV, stage);
      uint32_t byteLength = sizeof(VkCheckpointDataNV::stage);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "stage"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCheckpointDataNV, pCheckpointMarker);
      uint32_t byteLength = sizeof(VkCheckpointDataNV::pCheckpointMarker);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pCheckpointMarker"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkCheckpointDataNV"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceDepthStencilResolvePropertiesKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDepthStencilResolvePropertiesKHR, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDepthStencilResolvePropertiesKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDepthStencilResolvePropertiesKHR, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDepthStencilResolvePropertiesKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDepthStencilResolvePropertiesKHR, supportedDepthResolveModes);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDepthStencilResolvePropertiesKHR::supportedDepthResolveModes);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "supportedDepthResolveModes"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDepthStencilResolvePropertiesKHR, supportedStencilResolveModes);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDepthStencilResolvePropertiesKHR::supportedStencilResolveModes);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "supportedStencilResolveModes"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDepthStencilResolvePropertiesKHR, independentResolveNone);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDepthStencilResolvePropertiesKHR::independentResolveNone);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "independentResolveNone"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDepthStencilResolvePropertiesKHR, independentResolve);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDepthStencilResolvePropertiesKHR::independentResolve);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "independentResolve"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceDepthStencilResolvePropertiesKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkSubpassDescriptionDepthStencilResolveKHR)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSubpassDescriptionDepthStencilResolveKHR, sType);
      uint32_t byteLength = sizeof(VkSubpassDescriptionDepthStencilResolveKHR::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSubpassDescriptionDepthStencilResolveKHR, pNext);
      uint32_t byteLength = sizeof(VkSubpassDescriptionDepthStencilResolveKHR::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSubpassDescriptionDepthStencilResolveKHR, depthResolveMode);
      uint32_t byteLength = sizeof(VkSubpassDescriptionDepthStencilResolveKHR::depthResolveMode);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "depthResolveMode"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSubpassDescriptionDepthStencilResolveKHR, stencilResolveMode);
      uint32_t byteLength = sizeof(VkSubpassDescriptionDepthStencilResolveKHR::stencilResolveMode);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "stencilResolveMode"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkSubpassDescriptionDepthStencilResolveKHR, pDepthStencilResolveAttachment);
      uint32_t byteLength = sizeof(VkSubpassDescriptionDepthStencilResolveKHR::pDepthStencilResolveAttachment);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pDepthStencilResolveAttachment"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkSubpassDescriptionDepthStencilResolveKHR"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkImageViewASTCDecodeModeEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageViewASTCDecodeModeEXT, sType);
      uint32_t byteLength = sizeof(VkImageViewASTCDecodeModeEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageViewASTCDecodeModeEXT, pNext);
      uint32_t byteLength = sizeof(VkImageViewASTCDecodeModeEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageViewASTCDecodeModeEXT, decodeMode);
      uint32_t byteLength = sizeof(VkImageViewASTCDecodeModeEXT::decodeMode);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "decodeMode"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkImageViewASTCDecodeModeEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceASTCDecodeFeaturesEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceASTCDecodeFeaturesEXT, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceASTCDecodeFeaturesEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceASTCDecodeFeaturesEXT, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceASTCDecodeFeaturesEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceASTCDecodeFeaturesEXT, decodeModeSharedExponent);
      uint32_t byteLength = sizeof(VkPhysicalDeviceASTCDecodeFeaturesEXT::decodeModeSharedExponent);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "decodeModeSharedExponent"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceASTCDecodeFeaturesEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceTransformFeedbackFeaturesEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceTransformFeedbackFeaturesEXT, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceTransformFeedbackFeaturesEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceTransformFeedbackFeaturesEXT, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceTransformFeedbackFeaturesEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceTransformFeedbackFeaturesEXT, transformFeedback);
      uint32_t byteLength = sizeof(VkPhysicalDeviceTransformFeedbackFeaturesEXT::transformFeedback);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "transformFeedback"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceTransformFeedbackFeaturesEXT, geometryStreams);
      uint32_t byteLength = sizeof(VkPhysicalDeviceTransformFeedbackFeaturesEXT::geometryStreams);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "geometryStreams"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceTransformFeedbackFeaturesEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceTransformFeedbackPropertiesEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceTransformFeedbackPropertiesEXT, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceTransformFeedbackPropertiesEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceTransformFeedbackPropertiesEXT, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceTransformFeedbackPropertiesEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceTransformFeedbackPropertiesEXT, maxTransformFeedbackStreams);
      uint32_t byteLength = sizeof(VkPhysicalDeviceTransformFeedbackPropertiesEXT::maxTransformFeedbackStreams);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxTransformFeedbackStreams"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceTransformFeedbackPropertiesEXT, maxTransformFeedbackBuffers);
      uint32_t byteLength = sizeof(VkPhysicalDeviceTransformFeedbackPropertiesEXT::maxTransformFeedbackBuffers);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxTransformFeedbackBuffers"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceTransformFeedbackPropertiesEXT, maxTransformFeedbackBufferSize);
      uint32_t byteLength = sizeof(VkPhysicalDeviceTransformFeedbackPropertiesEXT::maxTransformFeedbackBufferSize);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxTransformFeedbackBufferSize"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceTransformFeedbackPropertiesEXT, maxTransformFeedbackStreamDataSize);
      uint32_t byteLength = sizeof(VkPhysicalDeviceTransformFeedbackPropertiesEXT::maxTransformFeedbackStreamDataSize);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxTransformFeedbackStreamDataSize"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceTransformFeedbackPropertiesEXT, maxTransformFeedbackBufferDataSize);
      uint32_t byteLength = sizeof(VkPhysicalDeviceTransformFeedbackPropertiesEXT::maxTransformFeedbackBufferDataSize);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxTransformFeedbackBufferDataSize"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceTransformFeedbackPropertiesEXT, maxTransformFeedbackBufferDataStride);
      uint32_t byteLength = sizeof(VkPhysicalDeviceTransformFeedbackPropertiesEXT::maxTransformFeedbackBufferDataStride);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxTransformFeedbackBufferDataStride"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceTransformFeedbackPropertiesEXT, transformFeedbackQueries);
      uint32_t byteLength = sizeof(VkPhysicalDeviceTransformFeedbackPropertiesEXT::transformFeedbackQueries);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "transformFeedbackQueries"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceTransformFeedbackPropertiesEXT, transformFeedbackStreamsLinesTriangles);
      uint32_t byteLength = sizeof(VkPhysicalDeviceTransformFeedbackPropertiesEXT::transformFeedbackStreamsLinesTriangles);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "transformFeedbackStreamsLinesTriangles"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceTransformFeedbackPropertiesEXT, transformFeedbackRasterizationStreamSelect);
      uint32_t byteLength = sizeof(VkPhysicalDeviceTransformFeedbackPropertiesEXT::transformFeedbackRasterizationStreamSelect);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "transformFeedbackRasterizationStreamSelect"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceTransformFeedbackPropertiesEXT, transformFeedbackDraw);
      uint32_t byteLength = sizeof(VkPhysicalDeviceTransformFeedbackPropertiesEXT::transformFeedbackDraw);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "transformFeedbackDraw"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceTransformFeedbackPropertiesEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPipelineRasterizationStateStreamCreateInfoEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineRasterizationStateStreamCreateInfoEXT, sType);
      uint32_t byteLength = sizeof(VkPipelineRasterizationStateStreamCreateInfoEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineRasterizationStateStreamCreateInfoEXT, pNext);
      uint32_t byteLength = sizeof(VkPipelineRasterizationStateStreamCreateInfoEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineRasterizationStateStreamCreateInfoEXT, flags);
      uint32_t byteLength = sizeof(VkPipelineRasterizationStateStreamCreateInfoEXT::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineRasterizationStateStreamCreateInfoEXT, rasterizationStream);
      uint32_t byteLength = sizeof(VkPipelineRasterizationStateStreamCreateInfoEXT::rasterizationStream);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "rasterizationStream"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPipelineRasterizationStateStreamCreateInfoEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV, representativeFragmentTest);
      uint32_t byteLength = sizeof(VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV::representativeFragmentTest);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "representativeFragmentTest"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPipelineRepresentativeFragmentTestStateCreateInfoNV)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineRepresentativeFragmentTestStateCreateInfoNV, sType);
      uint32_t byteLength = sizeof(VkPipelineRepresentativeFragmentTestStateCreateInfoNV::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineRepresentativeFragmentTestStateCreateInfoNV, pNext);
      uint32_t byteLength = sizeof(VkPipelineRepresentativeFragmentTestStateCreateInfoNV::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineRepresentativeFragmentTestStateCreateInfoNV, representativeFragmentTestEnable);
      uint32_t byteLength = sizeof(VkPipelineRepresentativeFragmentTestStateCreateInfoNV::representativeFragmentTestEnable);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "representativeFragmentTestEnable"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPipelineRepresentativeFragmentTestStateCreateInfoNV"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceExclusiveScissorFeaturesNV)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceExclusiveScissorFeaturesNV, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceExclusiveScissorFeaturesNV::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceExclusiveScissorFeaturesNV, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceExclusiveScissorFeaturesNV::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceExclusiveScissorFeaturesNV, exclusiveScissor);
      uint32_t byteLength = sizeof(VkPhysicalDeviceExclusiveScissorFeaturesNV::exclusiveScissor);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "exclusiveScissor"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceExclusiveScissorFeaturesNV"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPipelineViewportExclusiveScissorStateCreateInfoNV)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineViewportExclusiveScissorStateCreateInfoNV, sType);
      uint32_t byteLength = sizeof(VkPipelineViewportExclusiveScissorStateCreateInfoNV::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineViewportExclusiveScissorStateCreateInfoNV, pNext);
      uint32_t byteLength = sizeof(VkPipelineViewportExclusiveScissorStateCreateInfoNV::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineViewportExclusiveScissorStateCreateInfoNV, exclusiveScissorCount);
      uint32_t byteLength = sizeof(VkPipelineViewportExclusiveScissorStateCreateInfoNV::exclusiveScissorCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "exclusiveScissorCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineViewportExclusiveScissorStateCreateInfoNV, pExclusiveScissors);
      uint32_t byteLength = sizeof(VkPipelineViewportExclusiveScissorStateCreateInfoNV::pExclusiveScissors);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pExclusiveScissors"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPipelineViewportExclusiveScissorStateCreateInfoNV"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceCornerSampledImageFeaturesNV)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceCornerSampledImageFeaturesNV, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceCornerSampledImageFeaturesNV::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceCornerSampledImageFeaturesNV, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceCornerSampledImageFeaturesNV::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceCornerSampledImageFeaturesNV, cornerSampledImage);
      uint32_t byteLength = sizeof(VkPhysicalDeviceCornerSampledImageFeaturesNV::cornerSampledImage);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "cornerSampledImage"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceCornerSampledImageFeaturesNV"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceComputeShaderDerivativesFeaturesNV)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceComputeShaderDerivativesFeaturesNV, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceComputeShaderDerivativesFeaturesNV::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceComputeShaderDerivativesFeaturesNV, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceComputeShaderDerivativesFeaturesNV::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceComputeShaderDerivativesFeaturesNV, computeDerivativeGroupQuads);
      uint32_t byteLength = sizeof(VkPhysicalDeviceComputeShaderDerivativesFeaturesNV::computeDerivativeGroupQuads);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "computeDerivativeGroupQuads"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceComputeShaderDerivativesFeaturesNV, computeDerivativeGroupLinear);
      uint32_t byteLength = sizeof(VkPhysicalDeviceComputeShaderDerivativesFeaturesNV::computeDerivativeGroupLinear);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "computeDerivativeGroupLinear"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceComputeShaderDerivativesFeaturesNV"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV, fragmentShaderBarycentric);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV::fragmentShaderBarycentric);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "fragmentShaderBarycentric"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceShaderImageFootprintFeaturesNV)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceShaderImageFootprintFeaturesNV, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceShaderImageFootprintFeaturesNV::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceShaderImageFootprintFeaturesNV, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceShaderImageFootprintFeaturesNV::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceShaderImageFootprintFeaturesNV, imageFootprint);
      uint32_t byteLength = sizeof(VkPhysicalDeviceShaderImageFootprintFeaturesNV::imageFootprint);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "imageFootprint"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceShaderImageFootprintFeaturesNV"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV, dedicatedAllocationImageAliasing);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV::dedicatedAllocationImageAliasing);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "dedicatedAllocationImageAliasing"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkShadingRatePaletteNV)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkShadingRatePaletteNV, shadingRatePaletteEntryCount);
      uint32_t byteLength = sizeof(VkShadingRatePaletteNV::shadingRatePaletteEntryCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "shadingRatePaletteEntryCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkShadingRatePaletteNV, pShadingRatePaletteEntries);
      uint32_t byteLength = sizeof(VkShadingRatePaletteNV::pShadingRatePaletteEntries);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pShadingRatePaletteEntries"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkShadingRatePaletteNV"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPipelineViewportShadingRateImageStateCreateInfoNV)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineViewportShadingRateImageStateCreateInfoNV, sType);
      uint32_t byteLength = sizeof(VkPipelineViewportShadingRateImageStateCreateInfoNV::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineViewportShadingRateImageStateCreateInfoNV, pNext);
      uint32_t byteLength = sizeof(VkPipelineViewportShadingRateImageStateCreateInfoNV::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineViewportShadingRateImageStateCreateInfoNV, shadingRateImageEnable);
      uint32_t byteLength = sizeof(VkPipelineViewportShadingRateImageStateCreateInfoNV::shadingRateImageEnable);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "shadingRateImageEnable"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineViewportShadingRateImageStateCreateInfoNV, viewportCount);
      uint32_t byteLength = sizeof(VkPipelineViewportShadingRateImageStateCreateInfoNV::viewportCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "viewportCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineViewportShadingRateImageStateCreateInfoNV, pShadingRatePalettes);
      uint32_t byteLength = sizeof(VkPipelineViewportShadingRateImageStateCreateInfoNV::pShadingRatePalettes);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pShadingRatePalettes"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPipelineViewportShadingRateImageStateCreateInfoNV"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceShadingRateImageFeaturesNV)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceShadingRateImageFeaturesNV, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceShadingRateImageFeaturesNV::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceShadingRateImageFeaturesNV, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceShadingRateImageFeaturesNV::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceShadingRateImageFeaturesNV, shadingRateImage);
      uint32_t byteLength = sizeof(VkPhysicalDeviceShadingRateImageFeaturesNV::shadingRateImage);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "shadingRateImage"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceShadingRateImageFeaturesNV, shadingRateCoarseSampleOrder);
      uint32_t byteLength = sizeof(VkPhysicalDeviceShadingRateImageFeaturesNV::shadingRateCoarseSampleOrder);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "shadingRateCoarseSampleOrder"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceShadingRateImageFeaturesNV"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceShadingRateImagePropertiesNV)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceShadingRateImagePropertiesNV, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceShadingRateImagePropertiesNV::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceShadingRateImagePropertiesNV, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceShadingRateImagePropertiesNV::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceShadingRateImagePropertiesNV, shadingRateTexelSize);
      uint32_t byteLength = sizeof(VkPhysicalDeviceShadingRateImagePropertiesNV::shadingRateTexelSize);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "shadingRateTexelSize"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceShadingRateImagePropertiesNV, shadingRatePaletteSize);
      uint32_t byteLength = sizeof(VkPhysicalDeviceShadingRateImagePropertiesNV::shadingRatePaletteSize);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "shadingRatePaletteSize"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceShadingRateImagePropertiesNV, shadingRateMaxCoarseSamples);
      uint32_t byteLength = sizeof(VkPhysicalDeviceShadingRateImagePropertiesNV::shadingRateMaxCoarseSamples);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "shadingRateMaxCoarseSamples"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceShadingRateImagePropertiesNV"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkCoarseSampleLocationNV)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCoarseSampleLocationNV, pixelX);
      uint32_t byteLength = sizeof(VkCoarseSampleLocationNV::pixelX);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pixelX"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCoarseSampleLocationNV, pixelY);
      uint32_t byteLength = sizeof(VkCoarseSampleLocationNV::pixelY);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pixelY"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCoarseSampleLocationNV, sample);
      uint32_t byteLength = sizeof(VkCoarseSampleLocationNV::sample);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sample"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkCoarseSampleLocationNV"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkCoarseSampleOrderCustomNV)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCoarseSampleOrderCustomNV, shadingRate);
      uint32_t byteLength = sizeof(VkCoarseSampleOrderCustomNV::shadingRate);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "shadingRate"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCoarseSampleOrderCustomNV, sampleCount);
      uint32_t byteLength = sizeof(VkCoarseSampleOrderCustomNV::sampleCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sampleCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCoarseSampleOrderCustomNV, sampleLocationCount);
      uint32_t byteLength = sizeof(VkCoarseSampleOrderCustomNV::sampleLocationCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sampleLocationCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCoarseSampleOrderCustomNV, pSampleLocations);
      uint32_t byteLength = sizeof(VkCoarseSampleOrderCustomNV::pSampleLocations);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pSampleLocations"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkCoarseSampleOrderCustomNV"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPipelineViewportCoarseSampleOrderStateCreateInfoNV)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineViewportCoarseSampleOrderStateCreateInfoNV, sType);
      uint32_t byteLength = sizeof(VkPipelineViewportCoarseSampleOrderStateCreateInfoNV::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineViewportCoarseSampleOrderStateCreateInfoNV, pNext);
      uint32_t byteLength = sizeof(VkPipelineViewportCoarseSampleOrderStateCreateInfoNV::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineViewportCoarseSampleOrderStateCreateInfoNV, sampleOrderType);
      uint32_t byteLength = sizeof(VkPipelineViewportCoarseSampleOrderStateCreateInfoNV::sampleOrderType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sampleOrderType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineViewportCoarseSampleOrderStateCreateInfoNV, customSampleOrderCount);
      uint32_t byteLength = sizeof(VkPipelineViewportCoarseSampleOrderStateCreateInfoNV::customSampleOrderCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "customSampleOrderCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineViewportCoarseSampleOrderStateCreateInfoNV, pCustomSampleOrders);
      uint32_t byteLength = sizeof(VkPipelineViewportCoarseSampleOrderStateCreateInfoNV::pCustomSampleOrders);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pCustomSampleOrders"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPipelineViewportCoarseSampleOrderStateCreateInfoNV"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceMeshShaderFeaturesNV)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceMeshShaderFeaturesNV, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceMeshShaderFeaturesNV::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceMeshShaderFeaturesNV, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceMeshShaderFeaturesNV::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceMeshShaderFeaturesNV, taskShader);
      uint32_t byteLength = sizeof(VkPhysicalDeviceMeshShaderFeaturesNV::taskShader);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "taskShader"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceMeshShaderFeaturesNV, meshShader);
      uint32_t byteLength = sizeof(VkPhysicalDeviceMeshShaderFeaturesNV::meshShader);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "meshShader"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceMeshShaderFeaturesNV"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceMeshShaderPropertiesNV)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceMeshShaderPropertiesNV, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceMeshShaderPropertiesNV::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceMeshShaderPropertiesNV, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceMeshShaderPropertiesNV::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceMeshShaderPropertiesNV, maxDrawMeshTasksCount);
      uint32_t byteLength = sizeof(VkPhysicalDeviceMeshShaderPropertiesNV::maxDrawMeshTasksCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxDrawMeshTasksCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceMeshShaderPropertiesNV, maxTaskWorkGroupInvocations);
      uint32_t byteLength = sizeof(VkPhysicalDeviceMeshShaderPropertiesNV::maxTaskWorkGroupInvocations);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxTaskWorkGroupInvocations"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceMeshShaderPropertiesNV, maxTaskWorkGroupSize);
      uint32_t byteLength = sizeof(VkPhysicalDeviceMeshShaderPropertiesNV::maxTaskWorkGroupSize);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxTaskWorkGroupSize"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceMeshShaderPropertiesNV, maxTaskTotalMemorySize);
      uint32_t byteLength = sizeof(VkPhysicalDeviceMeshShaderPropertiesNV::maxTaskTotalMemorySize);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxTaskTotalMemorySize"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceMeshShaderPropertiesNV, maxTaskOutputCount);
      uint32_t byteLength = sizeof(VkPhysicalDeviceMeshShaderPropertiesNV::maxTaskOutputCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxTaskOutputCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceMeshShaderPropertiesNV, maxMeshWorkGroupInvocations);
      uint32_t byteLength = sizeof(VkPhysicalDeviceMeshShaderPropertiesNV::maxMeshWorkGroupInvocations);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxMeshWorkGroupInvocations"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceMeshShaderPropertiesNV, maxMeshWorkGroupSize);
      uint32_t byteLength = sizeof(VkPhysicalDeviceMeshShaderPropertiesNV::maxMeshWorkGroupSize);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxMeshWorkGroupSize"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceMeshShaderPropertiesNV, maxMeshTotalMemorySize);
      uint32_t byteLength = sizeof(VkPhysicalDeviceMeshShaderPropertiesNV::maxMeshTotalMemorySize);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxMeshTotalMemorySize"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceMeshShaderPropertiesNV, maxMeshOutputVertices);
      uint32_t byteLength = sizeof(VkPhysicalDeviceMeshShaderPropertiesNV::maxMeshOutputVertices);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxMeshOutputVertices"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceMeshShaderPropertiesNV, maxMeshOutputPrimitives);
      uint32_t byteLength = sizeof(VkPhysicalDeviceMeshShaderPropertiesNV::maxMeshOutputPrimitives);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxMeshOutputPrimitives"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceMeshShaderPropertiesNV, maxMeshMultiviewViewCount);
      uint32_t byteLength = sizeof(VkPhysicalDeviceMeshShaderPropertiesNV::maxMeshMultiviewViewCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxMeshMultiviewViewCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceMeshShaderPropertiesNV, meshOutputPerVertexGranularity);
      uint32_t byteLength = sizeof(VkPhysicalDeviceMeshShaderPropertiesNV::meshOutputPerVertexGranularity);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "meshOutputPerVertexGranularity"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceMeshShaderPropertiesNV, meshOutputPerPrimitiveGranularity);
      uint32_t byteLength = sizeof(VkPhysicalDeviceMeshShaderPropertiesNV::meshOutputPerPrimitiveGranularity);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "meshOutputPerPrimitiveGranularity"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceMeshShaderPropertiesNV"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDrawMeshTasksIndirectCommandNV)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDrawMeshTasksIndirectCommandNV, taskCount);
      uint32_t byteLength = sizeof(VkDrawMeshTasksIndirectCommandNV::taskCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "taskCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDrawMeshTasksIndirectCommandNV, firstTask);
      uint32_t byteLength = sizeof(VkDrawMeshTasksIndirectCommandNV::firstTask);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "firstTask"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDrawMeshTasksIndirectCommandNV"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkRayTracingShaderGroupCreateInfoNV)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRayTracingShaderGroupCreateInfoNV, sType);
      uint32_t byteLength = sizeof(VkRayTracingShaderGroupCreateInfoNV::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRayTracingShaderGroupCreateInfoNV, pNext);
      uint32_t byteLength = sizeof(VkRayTracingShaderGroupCreateInfoNV::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRayTracingShaderGroupCreateInfoNV, type);
      uint32_t byteLength = sizeof(VkRayTracingShaderGroupCreateInfoNV::type);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "type"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRayTracingShaderGroupCreateInfoNV, generalShader);
      uint32_t byteLength = sizeof(VkRayTracingShaderGroupCreateInfoNV::generalShader);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "generalShader"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRayTracingShaderGroupCreateInfoNV, closestHitShader);
      uint32_t byteLength = sizeof(VkRayTracingShaderGroupCreateInfoNV::closestHitShader);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "closestHitShader"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRayTracingShaderGroupCreateInfoNV, anyHitShader);
      uint32_t byteLength = sizeof(VkRayTracingShaderGroupCreateInfoNV::anyHitShader);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "anyHitShader"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRayTracingShaderGroupCreateInfoNV, intersectionShader);
      uint32_t byteLength = sizeof(VkRayTracingShaderGroupCreateInfoNV::intersectionShader);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "intersectionShader"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkRayTracingShaderGroupCreateInfoNV"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkRayTracingPipelineCreateInfoNV)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRayTracingPipelineCreateInfoNV, sType);
      uint32_t byteLength = sizeof(VkRayTracingPipelineCreateInfoNV::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRayTracingPipelineCreateInfoNV, pNext);
      uint32_t byteLength = sizeof(VkRayTracingPipelineCreateInfoNV::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRayTracingPipelineCreateInfoNV, flags);
      uint32_t byteLength = sizeof(VkRayTracingPipelineCreateInfoNV::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRayTracingPipelineCreateInfoNV, stageCount);
      uint32_t byteLength = sizeof(VkRayTracingPipelineCreateInfoNV::stageCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "stageCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRayTracingPipelineCreateInfoNV, pStages);
      uint32_t byteLength = sizeof(VkRayTracingPipelineCreateInfoNV::pStages);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pStages"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRayTracingPipelineCreateInfoNV, groupCount);
      uint32_t byteLength = sizeof(VkRayTracingPipelineCreateInfoNV::groupCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "groupCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRayTracingPipelineCreateInfoNV, pGroups);
      uint32_t byteLength = sizeof(VkRayTracingPipelineCreateInfoNV::pGroups);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pGroups"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRayTracingPipelineCreateInfoNV, maxRecursionDepth);
      uint32_t byteLength = sizeof(VkRayTracingPipelineCreateInfoNV::maxRecursionDepth);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxRecursionDepth"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRayTracingPipelineCreateInfoNV, layout);
      uint32_t byteLength = sizeof(VkRayTracingPipelineCreateInfoNV::layout);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "layout"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRayTracingPipelineCreateInfoNV, basePipelineHandle);
      uint32_t byteLength = sizeof(VkRayTracingPipelineCreateInfoNV::basePipelineHandle);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "basePipelineHandle"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRayTracingPipelineCreateInfoNV, basePipelineIndex);
      uint32_t byteLength = sizeof(VkRayTracingPipelineCreateInfoNV::basePipelineIndex);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "basePipelineIndex"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkRayTracingPipelineCreateInfoNV"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkGeometryTrianglesNV)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkGeometryTrianglesNV, sType);
      uint32_t byteLength = sizeof(VkGeometryTrianglesNV::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkGeometryTrianglesNV, pNext);
      uint32_t byteLength = sizeof(VkGeometryTrianglesNV::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkGeometryTrianglesNV, vertexData);
      uint32_t byteLength = sizeof(VkGeometryTrianglesNV::vertexData);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "vertexData"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkGeometryTrianglesNV, vertexOffset);
      uint32_t byteLength = sizeof(VkGeometryTrianglesNV::vertexOffset);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "vertexOffset"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkGeometryTrianglesNV, vertexCount);
      uint32_t byteLength = sizeof(VkGeometryTrianglesNV::vertexCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "vertexCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkGeometryTrianglesNV, vertexStride);
      uint32_t byteLength = sizeof(VkGeometryTrianglesNV::vertexStride);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "vertexStride"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkGeometryTrianglesNV, vertexFormat);
      uint32_t byteLength = sizeof(VkGeometryTrianglesNV::vertexFormat);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "vertexFormat"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkGeometryTrianglesNV, indexData);
      uint32_t byteLength = sizeof(VkGeometryTrianglesNV::indexData);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "indexData"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkGeometryTrianglesNV, indexOffset);
      uint32_t byteLength = sizeof(VkGeometryTrianglesNV::indexOffset);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "indexOffset"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkGeometryTrianglesNV, indexCount);
      uint32_t byteLength = sizeof(VkGeometryTrianglesNV::indexCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "indexCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkGeometryTrianglesNV, indexType);
      uint32_t byteLength = sizeof(VkGeometryTrianglesNV::indexType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "indexType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkGeometryTrianglesNV, transformData);
      uint32_t byteLength = sizeof(VkGeometryTrianglesNV::transformData);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "transformData"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkGeometryTrianglesNV, transformOffset);
      uint32_t byteLength = sizeof(VkGeometryTrianglesNV::transformOffset);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "transformOffset"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkGeometryTrianglesNV"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkGeometryAABBNV)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkGeometryAABBNV, sType);
      uint32_t byteLength = sizeof(VkGeometryAABBNV::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkGeometryAABBNV, pNext);
      uint32_t byteLength = sizeof(VkGeometryAABBNV::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkGeometryAABBNV, aabbData);
      uint32_t byteLength = sizeof(VkGeometryAABBNV::aabbData);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "aabbData"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkGeometryAABBNV, numAABBs);
      uint32_t byteLength = sizeof(VkGeometryAABBNV::numAABBs);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "numAABBs"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkGeometryAABBNV, stride);
      uint32_t byteLength = sizeof(VkGeometryAABBNV::stride);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "stride"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkGeometryAABBNV, offset);
      uint32_t byteLength = sizeof(VkGeometryAABBNV::offset);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "offset"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkGeometryAABBNV"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkGeometryDataNV)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkGeometryDataNV, triangles);
      uint32_t byteLength = sizeof(VkGeometryDataNV::triangles);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "triangles"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkGeometryDataNV, aabbs);
      uint32_t byteLength = sizeof(VkGeometryDataNV::aabbs);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "aabbs"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkGeometryDataNV"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkGeometryNV)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkGeometryNV, sType);
      uint32_t byteLength = sizeof(VkGeometryNV::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkGeometryNV, pNext);
      uint32_t byteLength = sizeof(VkGeometryNV::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkGeometryNV, geometryType);
      uint32_t byteLength = sizeof(VkGeometryNV::geometryType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "geometryType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkGeometryNV, geometry);
      uint32_t byteLength = sizeof(VkGeometryNV::geometry);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "geometry"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkGeometryNV, flags);
      uint32_t byteLength = sizeof(VkGeometryNV::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkGeometryNV"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkAccelerationStructureInfoNV)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkAccelerationStructureInfoNV, sType);
      uint32_t byteLength = sizeof(VkAccelerationStructureInfoNV::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkAccelerationStructureInfoNV, pNext);
      uint32_t byteLength = sizeof(VkAccelerationStructureInfoNV::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkAccelerationStructureInfoNV, type);
      uint32_t byteLength = sizeof(VkAccelerationStructureInfoNV::type);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "type"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkAccelerationStructureInfoNV, flags);
      uint32_t byteLength = sizeof(VkAccelerationStructureInfoNV::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkAccelerationStructureInfoNV, instanceCount);
      uint32_t byteLength = sizeof(VkAccelerationStructureInfoNV::instanceCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "instanceCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkAccelerationStructureInfoNV, geometryCount);
      uint32_t byteLength = sizeof(VkAccelerationStructureInfoNV::geometryCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "geometryCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkAccelerationStructureInfoNV, pGeometries);
      uint32_t byteLength = sizeof(VkAccelerationStructureInfoNV::pGeometries);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pGeometries"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkAccelerationStructureInfoNV"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkAccelerationStructureCreateInfoNV)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkAccelerationStructureCreateInfoNV, sType);
      uint32_t byteLength = sizeof(VkAccelerationStructureCreateInfoNV::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkAccelerationStructureCreateInfoNV, pNext);
      uint32_t byteLength = sizeof(VkAccelerationStructureCreateInfoNV::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkAccelerationStructureCreateInfoNV, compactedSize);
      uint32_t byteLength = sizeof(VkAccelerationStructureCreateInfoNV::compactedSize);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "compactedSize"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkAccelerationStructureCreateInfoNV, info);
      uint32_t byteLength = sizeof(VkAccelerationStructureCreateInfoNV::info);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "info"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkAccelerationStructureCreateInfoNV"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkBindAccelerationStructureMemoryInfoNV)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindAccelerationStructureMemoryInfoNV, sType);
      uint32_t byteLength = sizeof(VkBindAccelerationStructureMemoryInfoNV::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindAccelerationStructureMemoryInfoNV, pNext);
      uint32_t byteLength = sizeof(VkBindAccelerationStructureMemoryInfoNV::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindAccelerationStructureMemoryInfoNV, accelerationStructure);
      uint32_t byteLength = sizeof(VkBindAccelerationStructureMemoryInfoNV::accelerationStructure);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "accelerationStructure"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindAccelerationStructureMemoryInfoNV, memory);
      uint32_t byteLength = sizeof(VkBindAccelerationStructureMemoryInfoNV::memory);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "memory"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindAccelerationStructureMemoryInfoNV, memoryOffset);
      uint32_t byteLength = sizeof(VkBindAccelerationStructureMemoryInfoNV::memoryOffset);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "memoryOffset"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindAccelerationStructureMemoryInfoNV, deviceIndexCount);
      uint32_t byteLength = sizeof(VkBindAccelerationStructureMemoryInfoNV::deviceIndexCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "deviceIndexCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBindAccelerationStructureMemoryInfoNV, pDeviceIndices);
      uint32_t byteLength = sizeof(VkBindAccelerationStructureMemoryInfoNV::pDeviceIndices);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pDeviceIndices"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkBindAccelerationStructureMemoryInfoNV"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkWriteDescriptorSetAccelerationStructureNV)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkWriteDescriptorSetAccelerationStructureNV, sType);
      uint32_t byteLength = sizeof(VkWriteDescriptorSetAccelerationStructureNV::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkWriteDescriptorSetAccelerationStructureNV, pNext);
      uint32_t byteLength = sizeof(VkWriteDescriptorSetAccelerationStructureNV::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkWriteDescriptorSetAccelerationStructureNV, accelerationStructureCount);
      uint32_t byteLength = sizeof(VkWriteDescriptorSetAccelerationStructureNV::accelerationStructureCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "accelerationStructureCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkWriteDescriptorSetAccelerationStructureNV, pAccelerationStructures);
      uint32_t byteLength = sizeof(VkWriteDescriptorSetAccelerationStructureNV::pAccelerationStructures);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pAccelerationStructures"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkWriteDescriptorSetAccelerationStructureNV"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkAccelerationStructureMemoryRequirementsInfoNV)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkAccelerationStructureMemoryRequirementsInfoNV, sType);
      uint32_t byteLength = sizeof(VkAccelerationStructureMemoryRequirementsInfoNV::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkAccelerationStructureMemoryRequirementsInfoNV, pNext);
      uint32_t byteLength = sizeof(VkAccelerationStructureMemoryRequirementsInfoNV::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkAccelerationStructureMemoryRequirementsInfoNV, type);
      uint32_t byteLength = sizeof(VkAccelerationStructureMemoryRequirementsInfoNV::type);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "type"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkAccelerationStructureMemoryRequirementsInfoNV, accelerationStructure);
      uint32_t byteLength = sizeof(VkAccelerationStructureMemoryRequirementsInfoNV::accelerationStructure);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "accelerationStructure"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkAccelerationStructureMemoryRequirementsInfoNV"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceRayTracingPropertiesNV)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceRayTracingPropertiesNV, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceRayTracingPropertiesNV::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceRayTracingPropertiesNV, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceRayTracingPropertiesNV::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceRayTracingPropertiesNV, shaderGroupHandleSize);
      uint32_t byteLength = sizeof(VkPhysicalDeviceRayTracingPropertiesNV::shaderGroupHandleSize);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "shaderGroupHandleSize"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceRayTracingPropertiesNV, maxRecursionDepth);
      uint32_t byteLength = sizeof(VkPhysicalDeviceRayTracingPropertiesNV::maxRecursionDepth);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxRecursionDepth"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceRayTracingPropertiesNV, maxShaderGroupStride);
      uint32_t byteLength = sizeof(VkPhysicalDeviceRayTracingPropertiesNV::maxShaderGroupStride);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxShaderGroupStride"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceRayTracingPropertiesNV, shaderGroupBaseAlignment);
      uint32_t byteLength = sizeof(VkPhysicalDeviceRayTracingPropertiesNV::shaderGroupBaseAlignment);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "shaderGroupBaseAlignment"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceRayTracingPropertiesNV, maxGeometryCount);
      uint32_t byteLength = sizeof(VkPhysicalDeviceRayTracingPropertiesNV::maxGeometryCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxGeometryCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceRayTracingPropertiesNV, maxInstanceCount);
      uint32_t byteLength = sizeof(VkPhysicalDeviceRayTracingPropertiesNV::maxInstanceCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxInstanceCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceRayTracingPropertiesNV, maxTriangleCount);
      uint32_t byteLength = sizeof(VkPhysicalDeviceRayTracingPropertiesNV::maxTriangleCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxTriangleCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceRayTracingPropertiesNV, maxDescriptorSetAccelerationStructures);
      uint32_t byteLength = sizeof(VkPhysicalDeviceRayTracingPropertiesNV::maxDescriptorSetAccelerationStructures);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxDescriptorSetAccelerationStructures"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceRayTracingPropertiesNV"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDrmFormatModifierPropertiesListEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDrmFormatModifierPropertiesListEXT, sType);
      uint32_t byteLength = sizeof(VkDrmFormatModifierPropertiesListEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDrmFormatModifierPropertiesListEXT, pNext);
      uint32_t byteLength = sizeof(VkDrmFormatModifierPropertiesListEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDrmFormatModifierPropertiesListEXT, drmFormatModifierCount);
      uint32_t byteLength = sizeof(VkDrmFormatModifierPropertiesListEXT::drmFormatModifierCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "drmFormatModifierCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDrmFormatModifierPropertiesListEXT, pDrmFormatModifierProperties);
      uint32_t byteLength = sizeof(VkDrmFormatModifierPropertiesListEXT::pDrmFormatModifierProperties);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pDrmFormatModifierProperties"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDrmFormatModifierPropertiesListEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDrmFormatModifierPropertiesEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDrmFormatModifierPropertiesEXT, drmFormatModifier);
      uint32_t byteLength = sizeof(VkDrmFormatModifierPropertiesEXT::drmFormatModifier);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "drmFormatModifier"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDrmFormatModifierPropertiesEXT, drmFormatModifierPlaneCount);
      uint32_t byteLength = sizeof(VkDrmFormatModifierPropertiesEXT::drmFormatModifierPlaneCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "drmFormatModifierPlaneCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDrmFormatModifierPropertiesEXT, drmFormatModifierTilingFeatures);
      uint32_t byteLength = sizeof(VkDrmFormatModifierPropertiesEXT::drmFormatModifierTilingFeatures);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "drmFormatModifierTilingFeatures"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDrmFormatModifierPropertiesEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceImageDrmFormatModifierInfoEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceImageDrmFormatModifierInfoEXT, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceImageDrmFormatModifierInfoEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceImageDrmFormatModifierInfoEXT, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceImageDrmFormatModifierInfoEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceImageDrmFormatModifierInfoEXT, drmFormatModifier);
      uint32_t byteLength = sizeof(VkPhysicalDeviceImageDrmFormatModifierInfoEXT::drmFormatModifier);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "drmFormatModifier"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceImageDrmFormatModifierInfoEXT, sharingMode);
      uint32_t byteLength = sizeof(VkPhysicalDeviceImageDrmFormatModifierInfoEXT::sharingMode);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sharingMode"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceImageDrmFormatModifierInfoEXT, queueFamilyIndexCount);
      uint32_t byteLength = sizeof(VkPhysicalDeviceImageDrmFormatModifierInfoEXT::queueFamilyIndexCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "queueFamilyIndexCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceImageDrmFormatModifierInfoEXT, pQueueFamilyIndices);
      uint32_t byteLength = sizeof(VkPhysicalDeviceImageDrmFormatModifierInfoEXT::pQueueFamilyIndices);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pQueueFamilyIndices"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceImageDrmFormatModifierInfoEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkImageDrmFormatModifierListCreateInfoEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageDrmFormatModifierListCreateInfoEXT, sType);
      uint32_t byteLength = sizeof(VkImageDrmFormatModifierListCreateInfoEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageDrmFormatModifierListCreateInfoEXT, pNext);
      uint32_t byteLength = sizeof(VkImageDrmFormatModifierListCreateInfoEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageDrmFormatModifierListCreateInfoEXT, drmFormatModifierCount);
      uint32_t byteLength = sizeof(VkImageDrmFormatModifierListCreateInfoEXT::drmFormatModifierCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "drmFormatModifierCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageDrmFormatModifierListCreateInfoEXT, pDrmFormatModifiers);
      uint32_t byteLength = sizeof(VkImageDrmFormatModifierListCreateInfoEXT::pDrmFormatModifiers);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pDrmFormatModifiers"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkImageDrmFormatModifierListCreateInfoEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkImageDrmFormatModifierExplicitCreateInfoEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageDrmFormatModifierExplicitCreateInfoEXT, sType);
      uint32_t byteLength = sizeof(VkImageDrmFormatModifierExplicitCreateInfoEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageDrmFormatModifierExplicitCreateInfoEXT, pNext);
      uint32_t byteLength = sizeof(VkImageDrmFormatModifierExplicitCreateInfoEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageDrmFormatModifierExplicitCreateInfoEXT, drmFormatModifier);
      uint32_t byteLength = sizeof(VkImageDrmFormatModifierExplicitCreateInfoEXT::drmFormatModifier);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "drmFormatModifier"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageDrmFormatModifierExplicitCreateInfoEXT, drmFormatModifierPlaneCount);
      uint32_t byteLength = sizeof(VkImageDrmFormatModifierExplicitCreateInfoEXT::drmFormatModifierPlaneCount);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "drmFormatModifierPlaneCount"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageDrmFormatModifierExplicitCreateInfoEXT, pPlaneLayouts);
      uint32_t byteLength = sizeof(VkImageDrmFormatModifierExplicitCreateInfoEXT::pPlaneLayouts);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pPlaneLayouts"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkImageDrmFormatModifierExplicitCreateInfoEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkImageDrmFormatModifierPropertiesEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageDrmFormatModifierPropertiesEXT, sType);
      uint32_t byteLength = sizeof(VkImageDrmFormatModifierPropertiesEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageDrmFormatModifierPropertiesEXT, pNext);
      uint32_t byteLength = sizeof(VkImageDrmFormatModifierPropertiesEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageDrmFormatModifierPropertiesEXT, drmFormatModifier);
      uint32_t byteLength = sizeof(VkImageDrmFormatModifierPropertiesEXT::drmFormatModifier);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "drmFormatModifier"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkImageDrmFormatModifierPropertiesEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkImageStencilUsageCreateInfoEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageStencilUsageCreateInfoEXT, sType);
      uint32_t byteLength = sizeof(VkImageStencilUsageCreateInfoEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageStencilUsageCreateInfoEXT, pNext);
      uint32_t byteLength = sizeof(VkImageStencilUsageCreateInfoEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkImageStencilUsageCreateInfoEXT, stencilUsage);
      uint32_t byteLength = sizeof(VkImageStencilUsageCreateInfoEXT::stencilUsage);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "stencilUsage"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkImageStencilUsageCreateInfoEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkDeviceMemoryOverallocationCreateInfoAMD)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceMemoryOverallocationCreateInfoAMD, sType);
      uint32_t byteLength = sizeof(VkDeviceMemoryOverallocationCreateInfoAMD::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceMemoryOverallocationCreateInfoAMD, pNext);
      uint32_t byteLength = sizeof(VkDeviceMemoryOverallocationCreateInfoAMD::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkDeviceMemoryOverallocationCreateInfoAMD, overallocationBehavior);
      uint32_t byteLength = sizeof(VkDeviceMemoryOverallocationCreateInfoAMD::overallocationBehavior);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "overallocationBehavior"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkDeviceMemoryOverallocationCreateInfoAMD"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentDensityMapFeaturesEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFragmentDensityMapFeaturesEXT, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFragmentDensityMapFeaturesEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFragmentDensityMapFeaturesEXT, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFragmentDensityMapFeaturesEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFragmentDensityMapFeaturesEXT, fragmentDensityMap);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFragmentDensityMapFeaturesEXT::fragmentDensityMap);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "fragmentDensityMap"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFragmentDensityMapFeaturesEXT, fragmentDensityMapDynamic);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFragmentDensityMapFeaturesEXT::fragmentDensityMapDynamic);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "fragmentDensityMapDynamic"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFragmentDensityMapFeaturesEXT, fragmentDensityMapNonSubsampledImages);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFragmentDensityMapFeaturesEXT::fragmentDensityMapNonSubsampledImages);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "fragmentDensityMapNonSubsampledImages"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceFragmentDensityMapFeaturesEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceFragmentDensityMapPropertiesEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFragmentDensityMapPropertiesEXT, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFragmentDensityMapPropertiesEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFragmentDensityMapPropertiesEXT, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFragmentDensityMapPropertiesEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFragmentDensityMapPropertiesEXT, minFragmentDensityTexelSize);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFragmentDensityMapPropertiesEXT::minFragmentDensityTexelSize);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "minFragmentDensityTexelSize"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFragmentDensityMapPropertiesEXT, maxFragmentDensityTexelSize);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFragmentDensityMapPropertiesEXT::maxFragmentDensityTexelSize);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "maxFragmentDensityTexelSize"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceFragmentDensityMapPropertiesEXT, fragmentDensityInvocations);
      uint32_t byteLength = sizeof(VkPhysicalDeviceFragmentDensityMapPropertiesEXT::fragmentDensityInvocations);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "fragmentDensityInvocations"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceFragmentDensityMapPropertiesEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkRenderPassFragmentDensityMapCreateInfoEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRenderPassFragmentDensityMapCreateInfoEXT, sType);
      uint32_t byteLength = sizeof(VkRenderPassFragmentDensityMapCreateInfoEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRenderPassFragmentDensityMapCreateInfoEXT, pNext);
      uint32_t byteLength = sizeof(VkRenderPassFragmentDensityMapCreateInfoEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkRenderPassFragmentDensityMapCreateInfoEXT, fragmentDensityMapAttachment);
      uint32_t byteLength = sizeof(VkRenderPassFragmentDensityMapCreateInfoEXT::fragmentDensityMapAttachment);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "fragmentDensityMapAttachment"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkRenderPassFragmentDensityMapCreateInfoEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceScalarBlockLayoutFeaturesEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceScalarBlockLayoutFeaturesEXT, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceScalarBlockLayoutFeaturesEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceScalarBlockLayoutFeaturesEXT, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceScalarBlockLayoutFeaturesEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceScalarBlockLayoutFeaturesEXT, scalarBlockLayout);
      uint32_t byteLength = sizeof(VkPhysicalDeviceScalarBlockLayoutFeaturesEXT::scalarBlockLayout);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "scalarBlockLayout"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceScalarBlockLayoutFeaturesEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceDepthClipEnableFeaturesEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDepthClipEnableFeaturesEXT, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDepthClipEnableFeaturesEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDepthClipEnableFeaturesEXT, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDepthClipEnableFeaturesEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceDepthClipEnableFeaturesEXT, depthClipEnable);
      uint32_t byteLength = sizeof(VkPhysicalDeviceDepthClipEnableFeaturesEXT::depthClipEnable);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "depthClipEnable"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceDepthClipEnableFeaturesEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPipelineRasterizationDepthClipStateCreateInfoEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineRasterizationDepthClipStateCreateInfoEXT, sType);
      uint32_t byteLength = sizeof(VkPipelineRasterizationDepthClipStateCreateInfoEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineRasterizationDepthClipStateCreateInfoEXT, pNext);
      uint32_t byteLength = sizeof(VkPipelineRasterizationDepthClipStateCreateInfoEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineRasterizationDepthClipStateCreateInfoEXT, flags);
      uint32_t byteLength = sizeof(VkPipelineRasterizationDepthClipStateCreateInfoEXT::flags);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "flags"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPipelineRasterizationDepthClipStateCreateInfoEXT, depthClipEnable);
      uint32_t byteLength = sizeof(VkPipelineRasterizationDepthClipStateCreateInfoEXT::depthClipEnable);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "depthClipEnable"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPipelineRasterizationDepthClipStateCreateInfoEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceMemoryBudgetPropertiesEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceMemoryBudgetPropertiesEXT, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceMemoryBudgetPropertiesEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceMemoryBudgetPropertiesEXT, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceMemoryBudgetPropertiesEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceMemoryBudgetPropertiesEXT, heapBudget);
      uint32_t byteLength = sizeof(VkPhysicalDeviceMemoryBudgetPropertiesEXT::heapBudget);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "heapBudget"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceMemoryBudgetPropertiesEXT, heapUsage);
      uint32_t byteLength = sizeof(VkPhysicalDeviceMemoryBudgetPropertiesEXT::heapUsage);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "heapUsage"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceMemoryBudgetPropertiesEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceMemoryPriorityFeaturesEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceMemoryPriorityFeaturesEXT, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceMemoryPriorityFeaturesEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceMemoryPriorityFeaturesEXT, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceMemoryPriorityFeaturesEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceMemoryPriorityFeaturesEXT, memoryPriority);
      uint32_t byteLength = sizeof(VkPhysicalDeviceMemoryPriorityFeaturesEXT::memoryPriority);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "memoryPriority"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceMemoryPriorityFeaturesEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkMemoryPriorityAllocateInfoEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMemoryPriorityAllocateInfoEXT, sType);
      uint32_t byteLength = sizeof(VkMemoryPriorityAllocateInfoEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMemoryPriorityAllocateInfoEXT, pNext);
      uint32_t byteLength = sizeof(VkMemoryPriorityAllocateInfoEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkMemoryPriorityAllocateInfoEXT, priority);
      uint32_t byteLength = sizeof(VkMemoryPriorityAllocateInfoEXT::priority);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "priority"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkMemoryPriorityAllocateInfoEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceBufferAddressFeaturesEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceBufferAddressFeaturesEXT, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceBufferAddressFeaturesEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceBufferAddressFeaturesEXT, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceBufferAddressFeaturesEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceBufferAddressFeaturesEXT, bufferDeviceAddress);
      uint32_t byteLength = sizeof(VkPhysicalDeviceBufferAddressFeaturesEXT::bufferDeviceAddress);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "bufferDeviceAddress"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceBufferAddressFeaturesEXT, bufferDeviceAddressCaptureReplay);
      uint32_t byteLength = sizeof(VkPhysicalDeviceBufferAddressFeaturesEXT::bufferDeviceAddressCaptureReplay);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "bufferDeviceAddressCaptureReplay"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceBufferAddressFeaturesEXT, bufferDeviceAddressMultiDevice);
      uint32_t byteLength = sizeof(VkPhysicalDeviceBufferAddressFeaturesEXT::bufferDeviceAddressMultiDevice);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "bufferDeviceAddressMultiDevice"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceBufferAddressFeaturesEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkBufferDeviceAddressInfoEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBufferDeviceAddressInfoEXT, sType);
      uint32_t byteLength = sizeof(VkBufferDeviceAddressInfoEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBufferDeviceAddressInfoEXT, pNext);
      uint32_t byteLength = sizeof(VkBufferDeviceAddressInfoEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBufferDeviceAddressInfoEXT, buffer);
      uint32_t byteLength = sizeof(VkBufferDeviceAddressInfoEXT::buffer);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "buffer"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkBufferDeviceAddressInfoEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkBufferDeviceAddressCreateInfoEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBufferDeviceAddressCreateInfoEXT, sType);
      uint32_t byteLength = sizeof(VkBufferDeviceAddressCreateInfoEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBufferDeviceAddressCreateInfoEXT, pNext);
      uint32_t byteLength = sizeof(VkBufferDeviceAddressCreateInfoEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkBufferDeviceAddressCreateInfoEXT, deviceAddress);
      uint32_t byteLength = sizeof(VkBufferDeviceAddressCreateInfoEXT::deviceAddress);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "deviceAddress"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkBufferDeviceAddressCreateInfoEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceImageViewImageFormatInfoEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceImageViewImageFormatInfoEXT, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceImageViewImageFormatInfoEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceImageViewImageFormatInfoEXT, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceImageViewImageFormatInfoEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceImageViewImageFormatInfoEXT, imageViewType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceImageViewImageFormatInfoEXT::imageViewType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "imageViewType"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceImageViewImageFormatInfoEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkFilterCubicImageViewImageFormatPropertiesEXT)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkFilterCubicImageViewImageFormatPropertiesEXT, sType);
      uint32_t byteLength = sizeof(VkFilterCubicImageViewImageFormatPropertiesEXT::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkFilterCubicImageViewImageFormatPropertiesEXT, pNext);
      uint32_t byteLength = sizeof(VkFilterCubicImageViewImageFormatPropertiesEXT::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkFilterCubicImageViewImageFormatPropertiesEXT, filterCubic);
      uint32_t byteLength = sizeof(VkFilterCubicImageViewImageFormatPropertiesEXT::filterCubic);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "filterCubic"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkFilterCubicImageViewImageFormatPropertiesEXT, filterCubicMinmax);
      uint32_t byteLength = sizeof(VkFilterCubicImageViewImageFormatPropertiesEXT::filterCubicMinmax);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "filterCubicMinmax"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkFilterCubicImageViewImageFormatPropertiesEXT"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceCooperativeMatrixFeaturesNV)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceCooperativeMatrixFeaturesNV, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceCooperativeMatrixFeaturesNV::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceCooperativeMatrixFeaturesNV, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceCooperativeMatrixFeaturesNV::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceCooperativeMatrixFeaturesNV, cooperativeMatrix);
      uint32_t byteLength = sizeof(VkPhysicalDeviceCooperativeMatrixFeaturesNV::cooperativeMatrix);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "cooperativeMatrix"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceCooperativeMatrixFeaturesNV, cooperativeMatrixRobustBufferAccess);
      uint32_t byteLength = sizeof(VkPhysicalDeviceCooperativeMatrixFeaturesNV::cooperativeMatrixRobustBufferAccess);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "cooperativeMatrixRobustBufferAccess"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceCooperativeMatrixFeaturesNV"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkPhysicalDeviceCooperativeMatrixPropertiesNV)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceCooperativeMatrixPropertiesNV, sType);
      uint32_t byteLength = sizeof(VkPhysicalDeviceCooperativeMatrixPropertiesNV::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceCooperativeMatrixPropertiesNV, pNext);
      uint32_t byteLength = sizeof(VkPhysicalDeviceCooperativeMatrixPropertiesNV::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkPhysicalDeviceCooperativeMatrixPropertiesNV, cooperativeMatrixSupportedStages);
      uint32_t byteLength = sizeof(VkPhysicalDeviceCooperativeMatrixPropertiesNV::cooperativeMatrixSupportedStages);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "cooperativeMatrixSupportedStages"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkPhysicalDeviceCooperativeMatrixPropertiesNV"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkCooperativeMatrixPropertiesNV)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCooperativeMatrixPropertiesNV, sType);
      uint32_t byteLength = sizeof(VkCooperativeMatrixPropertiesNV::sType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "sType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCooperativeMatrixPropertiesNV, pNext);
      uint32_t byteLength = sizeof(VkCooperativeMatrixPropertiesNV::pNext);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "pNext"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCooperativeMatrixPropertiesNV, MSize);
      uint32_t byteLength = sizeof(VkCooperativeMatrixPropertiesNV::MSize);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "MSize"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCooperativeMatrixPropertiesNV, NSize);
      uint32_t byteLength = sizeof(VkCooperativeMatrixPropertiesNV::NSize);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "NSize"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCooperativeMatrixPropertiesNV, KSize);
      uint32_t byteLength = sizeof(VkCooperativeMatrixPropertiesNV::KSize);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "KSize"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCooperativeMatrixPropertiesNV, AType);
      uint32_t byteLength = sizeof(VkCooperativeMatrixPropertiesNV::AType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "AType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCooperativeMatrixPropertiesNV, BType);
      uint32_t byteLength = sizeof(VkCooperativeMatrixPropertiesNV::BType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "BType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCooperativeMatrixPropertiesNV, CType);
      uint32_t byteLength = sizeof(VkCooperativeMatrixPropertiesNV::CType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "CType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCooperativeMatrixPropertiesNV, DType);
      uint32_t byteLength = sizeof(VkCooperativeMatrixPropertiesNV::DType);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "DType"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkCooperativeMatrixPropertiesNV, scope);
      uint32_t byteLength = sizeof(VkCooperativeMatrixPropertiesNV::scope);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "scope"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkCooperativeMatrixPropertiesNV"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkClearColorValue)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkClearColorValue, float32);
      uint32_t byteLength = sizeof(VkClearColorValue::float32);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "float32"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkClearColorValue, int32);
      uint32_t byteLength = sizeof(VkClearColorValue::int32);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "int32"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkClearColorValue, uint32);
      uint32_t byteLength = sizeof(VkClearColorValue::uint32);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "uint32"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkClearColorValue"), structure);
  }
  {
    Napi::Object structure = Napi::Object::New(env);
    structure.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, sizeof(VkClearValue)));
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkClearValue, color);
      uint32_t byteLength = sizeof(VkClearValue::color);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "color"), obj);
    }
    {
      Napi::Object obj = Napi::Object::New(env);
      uint32_t byteOffset = offsetof(VkClearValue, depthStencil);
      uint32_t byteLength = sizeof(VkClearValue::depthStencil);
      obj.Set(Napi::String::New(env, "byteOffset"), Napi::Number::New(env, byteOffset));
      obj.Set(Napi::String::New(env, "byteLength"), Napi::Number::New(env, byteLength));
      structure.Set(Napi::String::New(env, "depthStencil"), obj);
    }
    
    out.Set(Napi::String::New(env, "VkClearValue"), structure);
  }
  

  return out;
}

