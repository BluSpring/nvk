/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY nvk v0.3.6
 */

const textEncoder = new TextEncoder();
const textDecoder = new TextDecoder();

class NativeStringArray {
  constructor(array) {
    this.array = array;
    this.address = 0n;
    let stringBuffers = [];
    let addressView = new BigInt64Array(array.length);
    let addressBuffer = addressView.buffer;
    let addressBufferAddress = getAddressFromArrayBuffer(addressBuffer);
    for (let ii = 0; ii < array.length; ++ii) {
      let str = array[ii];
      let strBuffer = textEncoder.encode(str + String.fromCharCode(0x0)).buffer;
      let strBufferAddress = getAddressFromArrayBuffer(strBuffer);
      addressView[ii] = strBufferAddress;
      stringBuffers.push(strBuffer);
    };
    this.address = addressBufferAddress;
    // keep reference to prevent deallocation
    this.addressBuffer = addressBuffer;
    this.stringBuffers = stringBuffers;
  }
};

class NativeObjectArray {
  constructor(array) {
    this.array = array;
    this.address = 0n;
    let addressView = new BigInt64Array(array.length);
    let addressBuffer = addressView.buffer;
    let addressBufferAddress = getAddressFromArrayBuffer(addressBuffer);
    for (let ii = 0; ii < array.length; ++ii) {
      let object = array[ii];
      let objectAddress = object.address;
      addressView[ii] = objectAddress;
    };
    this.address = addressBufferAddress;
    // keep reference to prevent deallocation
    this.addressBuffer = addressBuffer;
  }
};
/** VkBaseOutStructure **/
class VkBaseOutStructure {
  constructor(opts) {
    
    this._pNext = null;
    this.memoryBuffer = new ArrayBuffer(VkBaseOutStructure.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null && value.constructor === VkBaseOutStructure) {
      value.flush();
      this._pNext = value;
      this.memoryView.setBigInt64(0x8, value.memoryAddress);
    } else if (value === null) {
      this._pNext = null;
    } else {
      throw new TypeError("Invalid type for 'VkBaseOutStructure.pNext': Expected 'VkBaseOutStructure' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkBaseOutStructure.prototype.flush = function flush() {
  
  return true;
};

VkBaseOutStructure.byteLength = 0x10;

VkBaseOutStructure.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
});
/** VkBaseInStructure **/
class VkBaseInStructure {
  constructor(opts) {
    
    this._pNext = null;
    this.memoryBuffer = new ArrayBuffer(VkBaseInStructure.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null && value.constructor === VkBaseInStructure) {
      value.flush();
      this._pNext = value;
      this.memoryView.setBigInt64(0x8, value.memoryAddress);
    } else if (value === null) {
      this._pNext = null;
    } else {
      throw new TypeError("Invalid type for 'VkBaseInStructure.pNext': Expected 'VkBaseInStructure' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkBaseInStructure.prototype.flush = function flush() {
  
  return true;
};

VkBaseInStructure.byteLength = 0x10;

VkBaseInStructure.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
});
/** VkOffset2D **/
class VkOffset2D {
  constructor(opts) {
    
    
    this.memoryBuffer = new ArrayBuffer(VkOffset2D.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.x !== void 0) this.x = opts.x;
      if (opts.y !== void 0) this.y = opts.y;
      
    }
  }
  get x() {
    return this.memoryView.getInt32(0x0);
  }
  set x(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get y() {
    return this.memoryView.getInt32(0x4);
  }
  set y(value) {
    this.memoryView.setInt32(0x4, value);
  }
  
};

VkOffset2D.prototype.flush = function flush() {
  
  return true;
};

VkOffset2D.byteLength = 0x8;

VkOffset2D.memoryLayout = Object.freeze({
  x: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  y: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
});
/** VkOffset3D **/
class VkOffset3D {
  constructor(opts) {
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkOffset3D.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.x !== void 0) this.x = opts.x;
      if (opts.y !== void 0) this.y = opts.y;
      if (opts.z !== void 0) this.z = opts.z;
      
    }
  }
  get x() {
    return this.memoryView.getInt32(0x0);
  }
  set x(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get y() {
    return this.memoryView.getInt32(0x4);
  }
  set y(value) {
    this.memoryView.setInt32(0x4, value);
  }
  get z() {
    return this.memoryView.getInt32(0x8);
  }
  set z(value) {
    this.memoryView.setInt32(0x8, value);
  }
  
};

VkOffset3D.prototype.flush = function flush() {
  
  return true;
};

VkOffset3D.byteLength = 0xC;

VkOffset3D.memoryLayout = Object.freeze({
  x: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  y: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  z: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
});
/** VkExtent2D **/
class VkExtent2D {
  constructor(opts) {
    
    
    this.memoryBuffer = new ArrayBuffer(VkExtent2D.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.width !== void 0) this.width = opts.width;
      if (opts.height !== void 0) this.height = opts.height;
      
    }
  }
  get width() {
    return this.memoryView.getUint32(0x0);
  }
  set width(value) {
    this.memoryView.setUint32(0x0, value);
  }
  get height() {
    return this.memoryView.getUint32(0x4);
  }
  set height(value) {
    this.memoryView.setUint32(0x4, value);
  }
  
};

VkExtent2D.prototype.flush = function flush() {
  
  return true;
};

VkExtent2D.byteLength = 0x8;

VkExtent2D.memoryLayout = Object.freeze({
  width: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  height: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
});
/** VkExtent3D **/
class VkExtent3D {
  constructor(opts) {
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkExtent3D.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.width !== void 0) this.width = opts.width;
      if (opts.height !== void 0) this.height = opts.height;
      if (opts.depth !== void 0) this.depth = opts.depth;
      
    }
  }
  get width() {
    return this.memoryView.getUint32(0x0);
  }
  set width(value) {
    this.memoryView.setUint32(0x0, value);
  }
  get height() {
    return this.memoryView.getUint32(0x4);
  }
  set height(value) {
    this.memoryView.setUint32(0x4, value);
  }
  get depth() {
    return this.memoryView.getUint32(0x8);
  }
  set depth(value) {
    this.memoryView.setUint32(0x8, value);
  }
  
};

VkExtent3D.prototype.flush = function flush() {
  
  return true;
};

VkExtent3D.byteLength = 0xC;

VkExtent3D.memoryLayout = Object.freeze({
  width: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  height: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  depth: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
});
/** VkViewport **/
class VkViewport {
  constructor(opts) {
    
    
    
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkViewport.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.x !== void 0) this.x = opts.x;
      if (opts.y !== void 0) this.y = opts.y;
      if (opts.width !== void 0) this.width = opts.width;
      if (opts.height !== void 0) this.height = opts.height;
      if (opts.minDepth !== void 0) this.minDepth = opts.minDepth;
      if (opts.maxDepth !== void 0) this.maxDepth = opts.maxDepth;
      
    }
  }
  get x() {
    return this.memoryView.getFloat32(0x0);
  }
  set x(value) {
    this.memoryView.setFloat32(0x0, value);
  }
  get y() {
    return this.memoryView.getFloat32(0x4);
  }
  set y(value) {
    this.memoryView.setFloat32(0x4, value);
  }
  get width() {
    return this.memoryView.getFloat32(0x8);
  }
  set width(value) {
    this.memoryView.setFloat32(0x8, value);
  }
  get height() {
    return this.memoryView.getFloat32(0xC);
  }
  set height(value) {
    this.memoryView.setFloat32(0xC, value);
  }
  get minDepth() {
    return this.memoryView.getFloat32(0x10);
  }
  set minDepth(value) {
    this.memoryView.setFloat32(0x10, value);
  }
  get maxDepth() {
    return this.memoryView.getFloat32(0x14);
  }
  set maxDepth(value) {
    this.memoryView.setFloat32(0x14, value);
  }
  
};

VkViewport.prototype.flush = function flush() {
  
  return true;
};

VkViewport.byteLength = 0x18;

VkViewport.memoryLayout = Object.freeze({
  x: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  y: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  width: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
  height: Object.freeze({
    byteOffset: 0xC,
    byteLength: 0x4
  }),
  minDepth: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  maxDepth: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
});
/** VkRect2D **/
class VkRect2D {
  constructor(opts) {
    this._offset = null;
    this._extent = null;
    this.memoryBuffer = new ArrayBuffer(VkRect2D.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.offset !== void 0) this.offset = opts.offset;
      if (opts.extent !== void 0) this.extent = opts.extent;
      
    }
  }
  get offset() {
    return this._offset;
  }
  set offset(value) {
    if (value !== null && value.constructor === VkOffset2D) {
      value.flush();
      this._offset = value;
      this.memoryView.setBigInt64(0x0, value.memoryAddress);
    } else if (value === null) {
      this._offset = null;
    } else {
      throw new TypeError("Invalid type for 'VkRect2D.offset': Expected 'VkOffset2D' but got '" + value.constructor.name + "'");
    }
  }
  get extent() {
    return this._extent;
  }
  set extent(value) {
    if (value !== null && value.constructor === VkExtent2D) {
      value.flush();
      this._extent = value;
      this.memoryView.setBigInt64(0x8, value.memoryAddress);
    } else if (value === null) {
      this._extent = null;
    } else {
      throw new TypeError("Invalid type for 'VkRect2D.extent': Expected 'VkExtent2D' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkRect2D.prototype.flush = function flush() {
  
  
  
  
  
  return true;
};

VkRect2D.byteLength = 0x10;

VkRect2D.memoryLayout = Object.freeze({
  offset: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x8
  }),
  extent: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
});
/** VkClearRect **/
class VkClearRect {
  constructor(opts) {
    this._rect = null;
    
    
    this.memoryBuffer = new ArrayBuffer(VkClearRect.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.rect !== void 0) this.rect = opts.rect;
      if (opts.baseArrayLayer !== void 0) this.baseArrayLayer = opts.baseArrayLayer;
      if (opts.layerCount !== void 0) this.layerCount = opts.layerCount;
      
    }
  }
  get rect() {
    return this._rect;
  }
  set rect(value) {
    if (value !== null && value.constructor === VkRect2D) {
      value.flush();
      this._rect = value;
      this.memoryView.setBigInt64(0x0, value.memoryAddress);
    } else if (value === null) {
      this._rect = null;
    } else {
      throw new TypeError("Invalid type for 'VkClearRect.rect': Expected 'VkRect2D' but got '" + value.constructor.name + "'");
    }
  }
  get baseArrayLayer() {
    return this.memoryView.getUint32(0x10);
  }
  set baseArrayLayer(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get layerCount() {
    return this.memoryView.getUint32(0x14);
  }
  set layerCount(value) {
    this.memoryView.setUint32(0x14, value);
  }
  
};

VkClearRect.prototype.flush = function flush() {
  
  
  
  return true;
};

VkClearRect.byteLength = 0x18;

VkClearRect.memoryLayout = Object.freeze({
  rect: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x10
  }),
  baseArrayLayer: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  layerCount: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
});
/** VkComponentMapping **/
class VkComponentMapping {
  constructor(opts) {
    
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkComponentMapping.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.r !== void 0) this.r = opts.r;
      if (opts.g !== void 0) this.g = opts.g;
      if (opts.b !== void 0) this.b = opts.b;
      if (opts.a !== void 0) this.a = opts.a;
      
    }
  }
  get r() {
    return this.memoryView.getInt32(0x0);
  }
  set r(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get g() {
    return this.memoryView.getInt32(0x4);
  }
  set g(value) {
    this.memoryView.setInt32(0x4, value);
  }
  get b() {
    return this.memoryView.getInt32(0x8);
  }
  set b(value) {
    this.memoryView.setInt32(0x8, value);
  }
  get a() {
    return this.memoryView.getInt32(0xC);
  }
  set a(value) {
    this.memoryView.setInt32(0xC, value);
  }
  
};

VkComponentMapping.prototype.flush = function flush() {
  
  return true;
};

VkComponentMapping.byteLength = 0x10;

VkComponentMapping.memoryLayout = Object.freeze({
  r: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  g: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  b: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
  a: Object.freeze({
    byteOffset: 0xC,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceProperties **/
class VkPhysicalDeviceProperties {
  constructor(opts) {
    
    
    
    
    
    this._deviceName = null;
    this._pipelineCacheUUID = null;
    this._limits = null;
    this._sparseProperties = null;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceProperties.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      
    }
  }
  get apiVersion() {
    return this.memoryView.getUint32(0x0);
  }
  get driverVersion() {
    return this.memoryView.getUint32(0x4);
  }
  get vendorID() {
    return this.memoryView.getUint32(0x8);
  }
  get deviceID() {
    return this.memoryView.getUint32(0xC);
  }
  get deviceType() {
    return this.memoryView.getInt32(0x10);
  }
  get deviceName() {
    if (this._deviceName !== null) {
      let str = textDecoder.decode(this._deviceName);
      return str.substr(0, str.length - 1);
    } else {
      return null;
    }
  }
  get pipelineCacheUUID() {
    return this._pipelineCacheUUID;
  }
  get limits() {
    return this._limits;
  }
  get sparseProperties() {
    return this._sparseProperties;
  }
  
};

VkPhysicalDeviceProperties.prototype.flush = function flush() {
  
  
  if (this._pipelineCacheUUID !== null) {
    let array = this._pipelineCacheUUID;
    for (let ii = 0; ii < array.length; ++ii) {
      this.memoryView.setUint8(0x114, array[ii]);
    };
  }
  
  
  
  
  
  return true;
};

VkPhysicalDeviceProperties.byteLength = 0x338;

VkPhysicalDeviceProperties.memoryLayout = Object.freeze({
  apiVersion: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  driverVersion: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  vendorID: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
  deviceID: Object.freeze({
    byteOffset: 0xC,
    byteLength: 0x4
  }),
  deviceType: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  deviceName: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x100
  }),
  pipelineCacheUUID: Object.freeze({
    byteOffset: 0x114,
    byteLength: 0x10
  }),
  limits: Object.freeze({
    byteOffset: 0x128,
    byteLength: 0x1F8
  }),
  sparseProperties: Object.freeze({
    byteOffset: 0x320,
    byteLength: 0x14
  }),
});
/** VkExtensionProperties **/
class VkExtensionProperties {
  constructor(opts) {
    this._extensionName = null;
    
    this.memoryBuffer = new ArrayBuffer(VkExtensionProperties.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      
    }
  }
  get extensionName() {
    if (this._extensionName !== null) {
      let str = textDecoder.decode(this._extensionName);
      return str.substr(0, str.length - 1);
    } else {
      return null;
    }
  }
  get specVersion() {
    return this.memoryView.getUint32(0x100);
  }
  
};

VkExtensionProperties.prototype.flush = function flush() {
  
  return true;
};

VkExtensionProperties.byteLength = 0x104;

VkExtensionProperties.memoryLayout = Object.freeze({
  extensionName: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x100
  }),
  specVersion: Object.freeze({
    byteOffset: 0x100,
    byteLength: 0x4
  }),
});
/** VkLayerProperties **/
class VkLayerProperties {
  constructor(opts) {
    this._layerName = null;
    
    
    this._description = null;
    this.memoryBuffer = new ArrayBuffer(VkLayerProperties.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      
    }
  }
  get layerName() {
    if (this._layerName !== null) {
      let str = textDecoder.decode(this._layerName);
      return str.substr(0, str.length - 1);
    } else {
      return null;
    }
  }
  get specVersion() {
    return this.memoryView.getUint32(0x100);
  }
  get implementationVersion() {
    return this.memoryView.getUint32(0x104);
  }
  get description() {
    if (this._description !== null) {
      let str = textDecoder.decode(this._description);
      return str.substr(0, str.length - 1);
    } else {
      return null;
    }
  }
  
};

VkLayerProperties.prototype.flush = function flush() {
  
  return true;
};

VkLayerProperties.byteLength = 0x208;

VkLayerProperties.memoryLayout = Object.freeze({
  layerName: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x100
  }),
  specVersion: Object.freeze({
    byteOffset: 0x100,
    byteLength: 0x4
  }),
  implementationVersion: Object.freeze({
    byteOffset: 0x104,
    byteLength: 0x4
  }),
  description: Object.freeze({
    byteOffset: 0x108,
    byteLength: 0x100
  }),
});
/** VkApplicationInfo **/
class VkApplicationInfo {
  constructor(opts) {
    
    this._pNext = null;
    this._pApplicationName = null;
    
    this._pEngineName = null;
    
    
    this.memoryBuffer = new ArrayBuffer(VkApplicationInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_APPLICATION_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.pApplicationName !== void 0) this.pApplicationName = opts.pApplicationName;
      if (opts.applicationVersion !== void 0) this.applicationVersion = opts.applicationVersion;
      if (opts.pEngineName !== void 0) this.pEngineName = opts.pEngineName;
      if (opts.engineVersion !== void 0) this.engineVersion = opts.engineVersion;
      if (opts.apiVersion !== void 0) this.apiVersion = opts.apiVersion;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get pApplicationName() {
    if (this._pApplicationName !== null) {
      let str = textDecoder.decode(this._pApplicationName);
      return str.substr(0, str.length - 1);
    } else {
      return null;
    }
  }
  set pApplicationName(value) {
    if (value !== null && value.constructor === String) {
      this._pApplicationName = textEncoder.encode(value + String.fromCharCode(0x0)).buffer;
      this.memoryView.setBigInt64(0x10, getAddressFromArrayBuffer(this._pApplicationName));
    } else if (value === null) {
      this._pApplicationName = null;
      this.memoryView.setBigInt64(0x10, 0n);
    } else {
      throw new TypeError("Invalid type for 'VkApplicationInfo.pApplicationName': Expected 'String' but got '" + value.constructor.name + "'");
    }
  }
  get applicationVersion() {
    return this.memoryView.getUint32(0x18);
  }
  set applicationVersion(value) {
    this.memoryView.setUint32(0x18, value);
  }
  get pEngineName() {
    if (this._pEngineName !== null) {
      let str = textDecoder.decode(this._pEngineName);
      return str.substr(0, str.length - 1);
    } else {
      return null;
    }
  }
  set pEngineName(value) {
    if (value !== null && value.constructor === String) {
      this._pEngineName = textEncoder.encode(value + String.fromCharCode(0x0)).buffer;
      this.memoryView.setBigInt64(0x20, getAddressFromArrayBuffer(this._pEngineName));
    } else if (value === null) {
      this._pEngineName = null;
      this.memoryView.setBigInt64(0x20, 0n);
    } else {
      throw new TypeError("Invalid type for 'VkApplicationInfo.pEngineName': Expected 'String' but got '" + value.constructor.name + "'");
    }
  }
  get engineVersion() {
    return this.memoryView.getUint32(0x28);
  }
  set engineVersion(value) {
    this.memoryView.setUint32(0x28, value);
  }
  get apiVersion() {
    return this.memoryView.getUint32(0x2C);
  }
  set apiVersion(value) {
    this.memoryView.setUint32(0x2C, value);
  }
  
};

VkApplicationInfo.prototype.flush = function flush() {
  
  
  
  return true;
};

VkApplicationInfo.byteLength = 0x30;

VkApplicationInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  pApplicationName: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  applicationVersion: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  pEngineName: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
  engineVersion: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x4
  }),
  apiVersion: Object.freeze({
    byteOffset: 0x2C,
    byteLength: 0x4
  }),
});
/** VkAllocationCallbacks **/
class VkAllocationCallbacks {
  constructor(opts) {
    this._pUserData = null;
    this.memoryBuffer = new ArrayBuffer(VkAllocationCallbacks.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.pUserData !== void 0) this.pUserData = opts.pUserData;
      
    }
  }
  get pUserData() {
    return this._pUserData;
  }
  set pUserData(value) {
    if (value !== null && value.constructor === ArrayBuffer) {
      this._pUserData = value;
      this.memoryView.setBigInt64(0x0, getAddressFromArrayBuffer(value.buffer));
    } else if (value === null) {
      this._pUserData = null;
    } else {
      throw new TypeError("Invalid type for 'VkAllocationCallbacks.pUserData': Expected 'ArrayBuffer' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkAllocationCallbacks.prototype.flush = function flush() {
  
  return true;
};

VkAllocationCallbacks.byteLength = 0x30;

VkAllocationCallbacks.memoryLayout = Object.freeze({
  pUserData: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x8
  }),
});
/** VkDeviceQueueCreateInfo **/
class VkDeviceQueueCreateInfo {
  constructor(opts) {
    
    this._pNext = null;
    
    
    
    this._pQueuePriorities = null;
    this.memoryBuffer = new ArrayBuffer(VkDeviceQueueCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.queueFamilyIndex !== void 0) this.queueFamilyIndex = opts.queueFamilyIndex;
      if (opts.queueCount !== void 0) this.queueCount = opts.queueCount;
      if (opts.pQueuePriorities !== void 0) this.pQueuePriorities = opts.pQueuePriorities;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get flags() {
    return this.memoryView.getInt32(0x10);
  }
  set flags(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get queueFamilyIndex() {
    return this.memoryView.getUint32(0x14);
  }
  set queueFamilyIndex(value) {
    this.memoryView.setUint32(0x14, value);
  }
  get queueCount() {
    return this.memoryView.getUint32(0x18);
  }
  set queueCount(value) {
    this.memoryView.setUint32(0x18, value);
  }
  get pQueuePriorities() {
    return this._pQueuePriorities;
  }
  set pQueuePriorities(value) {
    if (value !== null && value.constructor === Float32Array) {
      this._pQueuePriorities = value;
      this.memoryView.setBigInt64(0x20, getAddressFromArrayBuffer(value.buffer));
    } else if (value === null) {
      this._pQueuePriorities = null;
    } else {
      throw new TypeError("Invalid type for 'VkDeviceQueueCreateInfo.pQueuePriorities': Expected 'Float32Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkDeviceQueueCreateInfo.prototype.flush = function flush() {
  
  
  
  return true;
};

VkDeviceQueueCreateInfo.byteLength = 0x28;

VkDeviceQueueCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  queueFamilyIndex: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  queueCount: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  pQueuePriorities: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
});
/** VkDeviceCreateInfo **/
class VkDeviceCreateInfo {
  constructor(opts) {
    
    this._pNext = null;
    
    
    this._pQueueCreateInfos = null;
    this._pQueueCreateInfosNative = null;
    
    this._ppEnabledLayerNames = null;
    this._ppEnabledLayerNamesNative = null;
    
    this._ppEnabledExtensionNames = null;
    this._ppEnabledExtensionNamesNative = null;
    this._pEnabledFeatures = null;
    this.memoryBuffer = new ArrayBuffer(VkDeviceCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.queueCreateInfoCount !== void 0) this.queueCreateInfoCount = opts.queueCreateInfoCount;
      if (opts.pQueueCreateInfos !== void 0) this.pQueueCreateInfos = opts.pQueueCreateInfos;
      if (opts.enabledLayerCount !== void 0) this.enabledLayerCount = opts.enabledLayerCount;
      if (opts.ppEnabledLayerNames !== void 0) this.ppEnabledLayerNames = opts.ppEnabledLayerNames;
      if (opts.enabledExtensionCount !== void 0) this.enabledExtensionCount = opts.enabledExtensionCount;
      if (opts.ppEnabledExtensionNames !== void 0) this.ppEnabledExtensionNames = opts.ppEnabledExtensionNames;
      if (opts.pEnabledFeatures !== void 0) this.pEnabledFeatures = opts.pEnabledFeatures;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get flags() {
    return this.memoryView.getInt32(0x10);
  }
  set flags(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get queueCreateInfoCount() {
    return this.memoryView.getUint32(0x14);
  }
  set queueCreateInfoCount(value) {
    this.memoryView.setUint32(0x14, value);
  }
  get pQueueCreateInfos() {
    return this._pQueueCreateInfos;
  }
  set pQueueCreateInfos(value) {
    if (value !== null && value.constructor === Array) {
      this._pQueueCreateInfos = value;
    } else if (value === null) {
      this._pQueueCreateInfos = null;
    } else {
      throw new TypeError("Invalid type for 'VkDeviceCreateInfo.pQueueCreateInfos': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get enabledLayerCount() {
    return this.memoryView.getUint32(0x20);
  }
  set enabledLayerCount(value) {
    this.memoryView.setUint32(0x20, value);
  }
  get ppEnabledLayerNames() {
    return this._ppEnabledLayerNames;
  }
  set ppEnabledLayerNames(value) {
    if (value !== null && value.constructor === Array) {
      this._ppEnabledLayerNames = value;
    } else if (value === null) {
      this._ppEnabledLayerNames = null;
    } else {
      throw new TypeError("Invalid type for 'VkDeviceCreateInfo.ppEnabledLayerNames': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get enabledExtensionCount() {
    return this.memoryView.getUint32(0x30);
  }
  set enabledExtensionCount(value) {
    this.memoryView.setUint32(0x30, value);
  }
  get ppEnabledExtensionNames() {
    return this._ppEnabledExtensionNames;
  }
  set ppEnabledExtensionNames(value) {
    if (value !== null && value.constructor === Array) {
      this._ppEnabledExtensionNames = value;
    } else if (value === null) {
      this._ppEnabledExtensionNames = null;
    } else {
      throw new TypeError("Invalid type for 'VkDeviceCreateInfo.ppEnabledExtensionNames': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get pEnabledFeatures() {
    return this._pEnabledFeatures;
  }
  set pEnabledFeatures(value) {
    if (value !== null && value.constructor === VkPhysicalDeviceFeatures) {
      value.flush();
      this._pEnabledFeatures = value;
      this.memoryView.setBigInt64(0x40, value.memoryAddress);
    } else if (value === null) {
      this._pEnabledFeatures = null;
    } else {
      throw new TypeError("Invalid type for 'VkDeviceCreateInfo.pEnabledFeatures': Expected 'VkPhysicalDeviceFeatures' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkDeviceCreateInfo.prototype.flush = function flush() {
  
  
  
  
  if (this._pQueueCreateInfos !== null) {
    let nativeArray = new NativeObjectArray(this._pQueueCreateInfos);
    this._pQueueCreateInfosNative = nativeArray;
    this.memoryView.setBigInt64(0x18, nativeArray.address);
  }
  
  
  if (this._ppEnabledLayerNames !== null) {
    let nativeArray = new NativeStringArray(this._ppEnabledLayerNames);
    this._ppEnabledLayerNamesNative = nativeArray;
    this.memoryView.setBigInt64(0x28, nativeArray.address);
  }
  
  
  if (this._ppEnabledExtensionNames !== null) {
    let nativeArray = new NativeStringArray(this._ppEnabledExtensionNames);
    this._ppEnabledExtensionNamesNative = nativeArray;
    this.memoryView.setBigInt64(0x38, nativeArray.address);
  }
  
  return true;
};

VkDeviceCreateInfo.byteLength = 0x48;

VkDeviceCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  queueCreateInfoCount: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  pQueueCreateInfos: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  enabledLayerCount: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  ppEnabledLayerNames: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
  enabledExtensionCount: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  ppEnabledExtensionNames: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x8
  }),
  pEnabledFeatures: Object.freeze({
    byteOffset: 0x40,
    byteLength: 0x8
  }),
});
/** VkInstanceCreateInfo **/
class VkInstanceCreateInfo {
  constructor(opts) {
    
    this._pNext = null;
    
    this._pApplicationInfo = null;
    
    this._ppEnabledLayerNames = null;
    this._ppEnabledLayerNamesNative = null;
    
    this._ppEnabledExtensionNames = null;
    this._ppEnabledExtensionNamesNative = null;
    this.memoryBuffer = new ArrayBuffer(VkInstanceCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.pApplicationInfo !== void 0) this.pApplicationInfo = opts.pApplicationInfo;
      if (opts.enabledLayerCount !== void 0) this.enabledLayerCount = opts.enabledLayerCount;
      if (opts.ppEnabledLayerNames !== void 0) this.ppEnabledLayerNames = opts.ppEnabledLayerNames;
      if (opts.enabledExtensionCount !== void 0) this.enabledExtensionCount = opts.enabledExtensionCount;
      if (opts.ppEnabledExtensionNames !== void 0) this.ppEnabledExtensionNames = opts.ppEnabledExtensionNames;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get flags() {
    return this.memoryView.getInt32(0x10);
  }
  set flags(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get pApplicationInfo() {
    return this._pApplicationInfo;
  }
  set pApplicationInfo(value) {
    if (value !== null && value.constructor === VkApplicationInfo) {
      value.flush();
      this._pApplicationInfo = value;
      this.memoryView.setBigInt64(0x18, value.memoryAddress);
    } else if (value === null) {
      this._pApplicationInfo = null;
    } else {
      throw new TypeError("Invalid type for 'VkInstanceCreateInfo.pApplicationInfo': Expected 'VkApplicationInfo' but got '" + value.constructor.name + "'");
    }
  }
  get enabledLayerCount() {
    return this.memoryView.getUint32(0x20);
  }
  set enabledLayerCount(value) {
    this.memoryView.setUint32(0x20, value);
  }
  get ppEnabledLayerNames() {
    return this._ppEnabledLayerNames;
  }
  set ppEnabledLayerNames(value) {
    if (value !== null && value.constructor === Array) {
      this._ppEnabledLayerNames = value;
    } else if (value === null) {
      this._ppEnabledLayerNames = null;
    } else {
      throw new TypeError("Invalid type for 'VkInstanceCreateInfo.ppEnabledLayerNames': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get enabledExtensionCount() {
    return this.memoryView.getUint32(0x30);
  }
  set enabledExtensionCount(value) {
    this.memoryView.setUint32(0x30, value);
  }
  get ppEnabledExtensionNames() {
    return this._ppEnabledExtensionNames;
  }
  set ppEnabledExtensionNames(value) {
    if (value !== null && value.constructor === Array) {
      this._ppEnabledExtensionNames = value;
    } else if (value === null) {
      this._ppEnabledExtensionNames = null;
    } else {
      throw new TypeError("Invalid type for 'VkInstanceCreateInfo.ppEnabledExtensionNames': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkInstanceCreateInfo.prototype.flush = function flush() {
  
  
  
  
  if (this._ppEnabledLayerNames !== null) {
    let nativeArray = new NativeStringArray(this._ppEnabledLayerNames);
    this._ppEnabledLayerNamesNative = nativeArray;
    this.memoryView.setBigInt64(0x28, nativeArray.address);
  }
  
  
  if (this._ppEnabledExtensionNames !== null) {
    let nativeArray = new NativeStringArray(this._ppEnabledExtensionNames);
    this._ppEnabledExtensionNamesNative = nativeArray;
    this.memoryView.setBigInt64(0x38, nativeArray.address);
  }
  
  return true;
};

VkInstanceCreateInfo.byteLength = 0x40;

VkInstanceCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pApplicationInfo: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  enabledLayerCount: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  ppEnabledLayerNames: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
  enabledExtensionCount: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  ppEnabledExtensionNames: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x8
  }),
});
/** VkQueueFamilyProperties **/
class VkQueueFamilyProperties {
  constructor(opts) {
    
    
    
    this._minImageTransferGranularity = null;
    this.memoryBuffer = new ArrayBuffer(VkQueueFamilyProperties.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      
    }
  }
  get queueFlags() {
    return this.memoryView.getInt32(0x0);
  }
  get queueCount() {
    return this.memoryView.getUint32(0x4);
  }
  get timestampValidBits() {
    return this.memoryView.getUint32(0x8);
  }
  get minImageTransferGranularity() {
    return this._minImageTransferGranularity;
  }
  
};

VkQueueFamilyProperties.prototype.flush = function flush() {
  
  
  
  return true;
};

VkQueueFamilyProperties.byteLength = 0x18;

VkQueueFamilyProperties.memoryLayout = Object.freeze({
  queueFlags: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  queueCount: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  timestampValidBits: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
  minImageTransferGranularity: Object.freeze({
    byteOffset: 0xC,
    byteLength: 0xC
  }),
});
/** VkPhysicalDeviceMemoryProperties **/
class VkPhysicalDeviceMemoryProperties {
  constructor(opts) {
    
    this._memoryTypes = null;
    
    this._memoryHeaps = null;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceMemoryProperties.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      
    }
  }
  get memoryTypeCount() {
    return this.memoryView.getUint32(0x0);
  }
  get memoryTypes() {
    return this._memoryTypes;
  }
  get memoryHeapCount() {
    return this.memoryView.getUint32(0x104);
  }
  get memoryHeaps() {
    return this._memoryHeaps;
  }
  
};

VkPhysicalDeviceMemoryProperties.prototype.flush = function flush() {
  
  
  if (this._memoryTypes !== null) {
    let nativeArray = new NativeObjectArray(this._memoryTypes);
    this._memoryTypesNative = nativeArray;
    this.memoryView.setBigInt64(0x4, nativeArray.address);
  }
  
  
  if (this._memoryHeaps !== null) {
    let nativeArray = new NativeObjectArray(this._memoryHeaps);
    this._memoryHeapsNative = nativeArray;
    this.memoryView.setBigInt64(0x108, nativeArray.address);
  }
  
  return true;
};

VkPhysicalDeviceMemoryProperties.byteLength = 0x208;

VkPhysicalDeviceMemoryProperties.memoryLayout = Object.freeze({
  memoryTypeCount: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  memoryTypes: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x100
  }),
  memoryHeapCount: Object.freeze({
    byteOffset: 0x104,
    byteLength: 0x4
  }),
  memoryHeaps: Object.freeze({
    byteOffset: 0x108,
    byteLength: 0x100
  }),
});
/** VkMemoryAllocateInfo **/
class VkMemoryAllocateInfo {
  constructor(opts) {
    
    this._pNext = null;
    
    
    this.memoryBuffer = new ArrayBuffer(VkMemoryAllocateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.allocationSize !== void 0) this.allocationSize = opts.allocationSize;
      if (opts.memoryTypeIndex !== void 0) this.memoryTypeIndex = opts.memoryTypeIndex;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get allocationSize() {
    return this.memoryView.getBigUint64(0x10);
  }
  set allocationSize(value) {
    this.memoryView.setBigUint64(0x10, value);
  }
  get memoryTypeIndex() {
    return this.memoryView.getUint32(0x18);
  }
  set memoryTypeIndex(value) {
    this.memoryView.setUint32(0x18, value);
  }
  
};

VkMemoryAllocateInfo.prototype.flush = function flush() {
  
  
  
  return true;
};

VkMemoryAllocateInfo.byteLength = 0x20;

VkMemoryAllocateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  allocationSize: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  memoryTypeIndex: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
});
/** VkMemoryRequirements **/
class VkMemoryRequirements {
  constructor(opts) {
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkMemoryRequirements.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      
    }
  }
  get size() {
    return this.memoryView.getBigUint64(0x0);
  }
  get alignment() {
    return this.memoryView.getBigUint64(0x8);
  }
  get memoryTypeBits() {
    return this.memoryView.getUint32(0x10);
  }
  
};

VkMemoryRequirements.prototype.flush = function flush() {
  
  return true;
};

VkMemoryRequirements.byteLength = 0x18;

VkMemoryRequirements.memoryLayout = Object.freeze({
  size: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x8
  }),
  alignment: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  memoryTypeBits: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkSparseImageFormatProperties **/
class VkSparseImageFormatProperties {
  constructor(opts) {
    
    this._imageGranularity = null;
    
    this.memoryBuffer = new ArrayBuffer(VkSparseImageFormatProperties.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      
    }
  }
  get aspectMask() {
    return this.memoryView.getInt32(0x0);
  }
  get imageGranularity() {
    return this._imageGranularity;
  }
  get flags() {
    return this.memoryView.getInt32(0x10);
  }
  
};

VkSparseImageFormatProperties.prototype.flush = function flush() {
  
  
  
  return true;
};

VkSparseImageFormatProperties.byteLength = 0x14;

VkSparseImageFormatProperties.memoryLayout = Object.freeze({
  aspectMask: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  imageGranularity: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0xC
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkSparseImageMemoryRequirements **/
class VkSparseImageMemoryRequirements {
  constructor(opts) {
    this._formatProperties = null;
    
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkSparseImageMemoryRequirements.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      
    }
  }
  get formatProperties() {
    return this._formatProperties;
  }
  get imageMipTailFirstLod() {
    return this.memoryView.getUint32(0x14);
  }
  get imageMipTailSize() {
    return this.memoryView.getBigUint64(0x18);
  }
  get imageMipTailOffset() {
    return this.memoryView.getBigUint64(0x20);
  }
  get imageMipTailStride() {
    return this.memoryView.getBigUint64(0x28);
  }
  
};

VkSparseImageMemoryRequirements.prototype.flush = function flush() {
  
  
  
  return true;
};

VkSparseImageMemoryRequirements.byteLength = 0x30;

VkSparseImageMemoryRequirements.memoryLayout = Object.freeze({
  formatProperties: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x14
  }),
  imageMipTailFirstLod: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  imageMipTailSize: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  imageMipTailOffset: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
  imageMipTailStride: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
});
/** VkMemoryType **/
class VkMemoryType {
  constructor(opts) {
    
    
    this.memoryBuffer = new ArrayBuffer(VkMemoryType.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      
    }
  }
  get propertyFlags() {
    return this.memoryView.getInt32(0x0);
  }
  get heapIndex() {
    return this.memoryView.getUint32(0x4);
  }
  
};

VkMemoryType.prototype.flush = function flush() {
  
  return true;
};

VkMemoryType.byteLength = 0x8;

VkMemoryType.memoryLayout = Object.freeze({
  propertyFlags: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  heapIndex: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
});
/** VkMemoryHeap **/
class VkMemoryHeap {
  constructor(opts) {
    
    
    this.memoryBuffer = new ArrayBuffer(VkMemoryHeap.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      
    }
  }
  get size() {
    return this.memoryView.getBigUint64(0x0);
  }
  get flags() {
    return this.memoryView.getInt32(0x8);
  }
  
};

VkMemoryHeap.prototype.flush = function flush() {
  
  return true;
};

VkMemoryHeap.byteLength = 0x10;

VkMemoryHeap.memoryLayout = Object.freeze({
  size: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
});
/** VkMappedMemoryRange **/
class VkMappedMemoryRange {
  constructor(opts) {
    
    this._pNext = null;
    this._memory = null;
    
    
    this.memoryBuffer = new ArrayBuffer(VkMappedMemoryRange.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.memory !== void 0) this.memory = opts.memory;
      if (opts.offset !== void 0) this.offset = opts.offset;
      if (opts.size !== void 0) this.size = opts.size;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get memory() {
    return this._memory;
  }
  set memory(value) {
    if (value !== null && value.constructor === VkDeviceMemory) {
      value.flush();
      this._memory = value;
      this.memoryView.setBigInt64(0x10, value.memoryAddress);
    } else if (value === null) {
      this._memory = null;
    } else {
      throw new TypeError("Invalid type for 'VkMappedMemoryRange.memory': Expected 'VkDeviceMemory' but got '" + value.constructor.name + "'");
    }
  }
  get offset() {
    return this.memoryView.getBigUint64(0x18);
  }
  set offset(value) {
    this.memoryView.setBigUint64(0x18, value);
  }
  get size() {
    return this.memoryView.getBigUint64(0x20);
  }
  set size(value) {
    this.memoryView.setBigUint64(0x20, value);
  }
  
};

VkMappedMemoryRange.prototype.flush = function flush() {
  
  
  
  return true;
};

VkMappedMemoryRange.byteLength = 0x28;

VkMappedMemoryRange.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  memory: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  offset: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  size: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
});
/** VkFormatProperties **/
class VkFormatProperties {
  constructor(opts) {
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkFormatProperties.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      
    }
  }
  get linearTilingFeatures() {
    return this.memoryView.getInt32(0x0);
  }
  get optimalTilingFeatures() {
    return this.memoryView.getInt32(0x4);
  }
  get bufferFeatures() {
    return this.memoryView.getInt32(0x8);
  }
  
};

VkFormatProperties.prototype.flush = function flush() {
  
  return true;
};

VkFormatProperties.byteLength = 0xC;

VkFormatProperties.memoryLayout = Object.freeze({
  linearTilingFeatures: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  optimalTilingFeatures: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  bufferFeatures: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
});
/** VkImageFormatProperties **/
class VkImageFormatProperties {
  constructor(opts) {
    this._maxExtent = null;
    
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkImageFormatProperties.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      
    }
  }
  get maxExtent() {
    return this._maxExtent;
  }
  get maxMipLevels() {
    return this.memoryView.getUint32(0xC);
  }
  get maxArrayLayers() {
    return this.memoryView.getUint32(0x10);
  }
  get sampleCounts() {
    return this.memoryView.getInt32(0x14);
  }
  get maxResourceSize() {
    return this.memoryView.getBigUint64(0x18);
  }
  
};

VkImageFormatProperties.prototype.flush = function flush() {
  
  
  
  return true;
};

VkImageFormatProperties.byteLength = 0x20;

VkImageFormatProperties.memoryLayout = Object.freeze({
  maxExtent: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0xC
  }),
  maxMipLevels: Object.freeze({
    byteOffset: 0xC,
    byteLength: 0x4
  }),
  maxArrayLayers: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  sampleCounts: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  maxResourceSize: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkDescriptorBufferInfo **/
class VkDescriptorBufferInfo {
  constructor(opts) {
    this._buffer = null;
    
    
    this.memoryBuffer = new ArrayBuffer(VkDescriptorBufferInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.buffer !== void 0) this.buffer = opts.buffer;
      if (opts.offset !== void 0) this.offset = opts.offset;
      if (opts.range !== void 0) this.range = opts.range;
      
    }
  }
  get buffer() {
    return this._buffer;
  }
  set buffer(value) {
    if (value !== null && value.constructor === VkBuffer) {
      value.flush();
      this._buffer = value;
      this.memoryView.setBigInt64(0x0, value.memoryAddress);
    } else if (value === null) {
      this._buffer = null;
    } else {
      throw new TypeError("Invalid type for 'VkDescriptorBufferInfo.buffer': Expected 'VkBuffer' but got '" + value.constructor.name + "'");
    }
  }
  get offset() {
    return this.memoryView.getBigUint64(0x8);
  }
  set offset(value) {
    this.memoryView.setBigUint64(0x8, value);
  }
  get range() {
    return this.memoryView.getBigUint64(0x10);
  }
  set range(value) {
    this.memoryView.setBigUint64(0x10, value);
  }
  
};

VkDescriptorBufferInfo.prototype.flush = function flush() {
  
  return true;
};

VkDescriptorBufferInfo.byteLength = 0x18;

VkDescriptorBufferInfo.memoryLayout = Object.freeze({
  buffer: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x8
  }),
  offset: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  range: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
});
/** VkDescriptorImageInfo **/
class VkDescriptorImageInfo {
  constructor(opts) {
    this._sampler = null;
    this._imageView = null;
    
    this.memoryBuffer = new ArrayBuffer(VkDescriptorImageInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.sampler !== void 0) this.sampler = opts.sampler;
      if (opts.imageView !== void 0) this.imageView = opts.imageView;
      if (opts.imageLayout !== void 0) this.imageLayout = opts.imageLayout;
      
    }
  }
  get sampler() {
    return this._sampler;
  }
  set sampler(value) {
    if (value !== null && value.constructor === VkSampler) {
      value.flush();
      this._sampler = value;
      this.memoryView.setBigInt64(0x0, value.memoryAddress);
    } else if (value === null) {
      this._sampler = null;
    } else {
      throw new TypeError("Invalid type for 'VkDescriptorImageInfo.sampler': Expected 'VkSampler' but got '" + value.constructor.name + "'");
    }
  }
  get imageView() {
    return this._imageView;
  }
  set imageView(value) {
    if (value !== null && value.constructor === VkImageView) {
      value.flush();
      this._imageView = value;
      this.memoryView.setBigInt64(0x8, value.memoryAddress);
    } else if (value === null) {
      this._imageView = null;
    } else {
      throw new TypeError("Invalid type for 'VkDescriptorImageInfo.imageView': Expected 'VkImageView' but got '" + value.constructor.name + "'");
    }
  }
  get imageLayout() {
    return this.memoryView.getInt32(0x10);
  }
  set imageLayout(value) {
    this.memoryView.setInt32(0x10, value);
  }
  
};

VkDescriptorImageInfo.prototype.flush = function flush() {
  
  return true;
};

VkDescriptorImageInfo.byteLength = 0x18;

VkDescriptorImageInfo.memoryLayout = Object.freeze({
  sampler: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x8
  }),
  imageView: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  imageLayout: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkWriteDescriptorSet **/
class VkWriteDescriptorSet {
  constructor(opts) {
    
    this._pNext = null;
    this._dstSet = null;
    
    
    
    
    this._pImageInfo = null;
    this._pImageInfoNative = null;
    this._pBufferInfo = null;
    this._pBufferInfoNative = null;
    this._pTexelBufferView = null;
    this._pTexelBufferViewNative = null;
    this.memoryBuffer = new ArrayBuffer(VkWriteDescriptorSet.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.dstSet !== void 0) this.dstSet = opts.dstSet;
      if (opts.dstBinding !== void 0) this.dstBinding = opts.dstBinding;
      if (opts.dstArrayElement !== void 0) this.dstArrayElement = opts.dstArrayElement;
      if (opts.descriptorCount !== void 0) this.descriptorCount = opts.descriptorCount;
      if (opts.descriptorType !== void 0) this.descriptorType = opts.descriptorType;
      if (opts.pImageInfo !== void 0) this.pImageInfo = opts.pImageInfo;
      if (opts.pBufferInfo !== void 0) this.pBufferInfo = opts.pBufferInfo;
      if (opts.pTexelBufferView !== void 0) this.pTexelBufferView = opts.pTexelBufferView;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get dstSet() {
    return this._dstSet;
  }
  set dstSet(value) {
    if (value !== null && value.constructor === VkDescriptorSet) {
      value.flush();
      this._dstSet = value;
      this.memoryView.setBigInt64(0x10, value.memoryAddress);
    } else if (value === null) {
      this._dstSet = null;
    } else {
      throw new TypeError("Invalid type for 'VkWriteDescriptorSet.dstSet': Expected 'VkDescriptorSet' but got '" + value.constructor.name + "'");
    }
  }
  get dstBinding() {
    return this.memoryView.getUint32(0x18);
  }
  set dstBinding(value) {
    this.memoryView.setUint32(0x18, value);
  }
  get dstArrayElement() {
    return this.memoryView.getUint32(0x1C);
  }
  set dstArrayElement(value) {
    this.memoryView.setUint32(0x1C, value);
  }
  get descriptorCount() {
    return this.memoryView.getUint32(0x20);
  }
  set descriptorCount(value) {
    this.memoryView.setUint32(0x20, value);
  }
  get descriptorType() {
    return this.memoryView.getInt32(0x24);
  }
  set descriptorType(value) {
    this.memoryView.setInt32(0x24, value);
  }
  get pImageInfo() {
    return this._pImageInfo;
  }
  set pImageInfo(value) {
    if (value !== null && value.constructor === Array) {
      this._pImageInfo = value;
    } else if (value === null) {
      this._pImageInfo = null;
    } else {
      throw new TypeError("Invalid type for 'VkWriteDescriptorSet.pImageInfo': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get pBufferInfo() {
    return this._pBufferInfo;
  }
  set pBufferInfo(value) {
    if (value !== null && value.constructor === Array) {
      this._pBufferInfo = value;
    } else if (value === null) {
      this._pBufferInfo = null;
    } else {
      throw new TypeError("Invalid type for 'VkWriteDescriptorSet.pBufferInfo': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get pTexelBufferView() {
    return this._pTexelBufferView;
  }
  set pTexelBufferView(value) {
    if (value !== null && value.constructor === Array) {
      this._pTexelBufferView = value;
    } else if (value === null) {
      this._pTexelBufferView = null;
    } else {
      throw new TypeError("Invalid type for 'VkWriteDescriptorSet.pTexelBufferView': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkWriteDescriptorSet.prototype.flush = function flush() {
  
  
  
  
  if (this._pImageInfo !== null) {
    let nativeArray = new NativeObjectArray(this._pImageInfo);
    this._pImageInfoNative = nativeArray;
    this.memoryView.setBigInt64(0x28, nativeArray.address);
  }
  
  
  if (this._pBufferInfo !== null) {
    let nativeArray = new NativeObjectArray(this._pBufferInfo);
    this._pBufferInfoNative = nativeArray;
    this.memoryView.setBigInt64(0x30, nativeArray.address);
  }
  
  
  if (this._pTexelBufferView !== null) {
    let nativeArray = new NativeObjectArray(this._pTexelBufferView);
    this._pTexelBufferViewNative = nativeArray;
    this.memoryView.setBigInt64(0x38, nativeArray.address);
  }
  
  return true;
};

VkWriteDescriptorSet.byteLength = 0x40;

VkWriteDescriptorSet.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  dstSet: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  dstBinding: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  dstArrayElement: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  descriptorCount: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  descriptorType: Object.freeze({
    byteOffset: 0x24,
    byteLength: 0x4
  }),
  pImageInfo: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
  pBufferInfo: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x8
  }),
  pTexelBufferView: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x8
  }),
});
/** VkCopyDescriptorSet **/
class VkCopyDescriptorSet {
  constructor(opts) {
    
    this._pNext = null;
    this._srcSet = null;
    
    
    this._dstSet = null;
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkCopyDescriptorSet.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.srcSet !== void 0) this.srcSet = opts.srcSet;
      if (opts.srcBinding !== void 0) this.srcBinding = opts.srcBinding;
      if (opts.srcArrayElement !== void 0) this.srcArrayElement = opts.srcArrayElement;
      if (opts.dstSet !== void 0) this.dstSet = opts.dstSet;
      if (opts.dstBinding !== void 0) this.dstBinding = opts.dstBinding;
      if (opts.dstArrayElement !== void 0) this.dstArrayElement = opts.dstArrayElement;
      if (opts.descriptorCount !== void 0) this.descriptorCount = opts.descriptorCount;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get srcSet() {
    return this._srcSet;
  }
  set srcSet(value) {
    if (value !== null && value.constructor === VkDescriptorSet) {
      value.flush();
      this._srcSet = value;
      this.memoryView.setBigInt64(0x10, value.memoryAddress);
    } else if (value === null) {
      this._srcSet = null;
    } else {
      throw new TypeError("Invalid type for 'VkCopyDescriptorSet.srcSet': Expected 'VkDescriptorSet' but got '" + value.constructor.name + "'");
    }
  }
  get srcBinding() {
    return this.memoryView.getUint32(0x18);
  }
  set srcBinding(value) {
    this.memoryView.setUint32(0x18, value);
  }
  get srcArrayElement() {
    return this.memoryView.getUint32(0x1C);
  }
  set srcArrayElement(value) {
    this.memoryView.setUint32(0x1C, value);
  }
  get dstSet() {
    return this._dstSet;
  }
  set dstSet(value) {
    if (value !== null && value.constructor === VkDescriptorSet) {
      value.flush();
      this._dstSet = value;
      this.memoryView.setBigInt64(0x20, value.memoryAddress);
    } else if (value === null) {
      this._dstSet = null;
    } else {
      throw new TypeError("Invalid type for 'VkCopyDescriptorSet.dstSet': Expected 'VkDescriptorSet' but got '" + value.constructor.name + "'");
    }
  }
  get dstBinding() {
    return this.memoryView.getUint32(0x28);
  }
  set dstBinding(value) {
    this.memoryView.setUint32(0x28, value);
  }
  get dstArrayElement() {
    return this.memoryView.getUint32(0x2C);
  }
  set dstArrayElement(value) {
    this.memoryView.setUint32(0x2C, value);
  }
  get descriptorCount() {
    return this.memoryView.getUint32(0x30);
  }
  set descriptorCount(value) {
    this.memoryView.setUint32(0x30, value);
  }
  
};

VkCopyDescriptorSet.prototype.flush = function flush() {
  
  
  
  return true;
};

VkCopyDescriptorSet.byteLength = 0x38;

VkCopyDescriptorSet.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  srcSet: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  srcBinding: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  srcArrayElement: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  dstSet: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
  dstBinding: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x4
  }),
  dstArrayElement: Object.freeze({
    byteOffset: 0x2C,
    byteLength: 0x4
  }),
  descriptorCount: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
});
/** VkBufferCreateInfo **/
class VkBufferCreateInfo {
  constructor(opts) {
    
    this._pNext = null;
    
    
    
    
    
    this._pQueueFamilyIndices = null;
    this.memoryBuffer = new ArrayBuffer(VkBufferCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.size !== void 0) this.size = opts.size;
      if (opts.usage !== void 0) this.usage = opts.usage;
      if (opts.sharingMode !== void 0) this.sharingMode = opts.sharingMode;
      if (opts.queueFamilyIndexCount !== void 0) this.queueFamilyIndexCount = opts.queueFamilyIndexCount;
      if (opts.pQueueFamilyIndices !== void 0) this.pQueueFamilyIndices = opts.pQueueFamilyIndices;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get flags() {
    return this.memoryView.getInt32(0x10);
  }
  set flags(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get size() {
    return this.memoryView.getBigUint64(0x18);
  }
  set size(value) {
    this.memoryView.setBigUint64(0x18, value);
  }
  get usage() {
    return this.memoryView.getInt32(0x20);
  }
  set usage(value) {
    this.memoryView.setInt32(0x20, value);
  }
  get sharingMode() {
    return this.memoryView.getInt32(0x24);
  }
  set sharingMode(value) {
    this.memoryView.setInt32(0x24, value);
  }
  get queueFamilyIndexCount() {
    return this.memoryView.getUint32(0x28);
  }
  set queueFamilyIndexCount(value) {
    this.memoryView.setUint32(0x28, value);
  }
  get pQueueFamilyIndices() {
    return this._pQueueFamilyIndices;
  }
  set pQueueFamilyIndices(value) {
    if (value !== null && value.constructor === Uint32Array) {
      this._pQueueFamilyIndices = value;
      this.memoryView.setBigInt64(0x30, getAddressFromArrayBuffer(value.buffer));
    } else if (value === null) {
      this._pQueueFamilyIndices = null;
    } else {
      throw new TypeError("Invalid type for 'VkBufferCreateInfo.pQueueFamilyIndices': Expected 'Uint32Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkBufferCreateInfo.prototype.flush = function flush() {
  
  
  
  return true;
};

VkBufferCreateInfo.byteLength = 0x38;

VkBufferCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  size: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  usage: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  sharingMode: Object.freeze({
    byteOffset: 0x24,
    byteLength: 0x4
  }),
  queueFamilyIndexCount: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x4
  }),
  pQueueFamilyIndices: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x8
  }),
});
/** VkBufferViewCreateInfo **/
class VkBufferViewCreateInfo {
  constructor(opts) {
    
    this._pNext = null;
    
    this._buffer = null;
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkBufferViewCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.buffer !== void 0) this.buffer = opts.buffer;
      if (opts.format !== void 0) this.format = opts.format;
      if (opts.offset !== void 0) this.offset = opts.offset;
      if (opts.range !== void 0) this.range = opts.range;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get flags() {
    return this.memoryView.getInt32(0x10);
  }
  set flags(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get buffer() {
    return this._buffer;
  }
  set buffer(value) {
    if (value !== null && value.constructor === VkBuffer) {
      value.flush();
      this._buffer = value;
      this.memoryView.setBigInt64(0x18, value.memoryAddress);
    } else if (value === null) {
      this._buffer = null;
    } else {
      throw new TypeError("Invalid type for 'VkBufferViewCreateInfo.buffer': Expected 'VkBuffer' but got '" + value.constructor.name + "'");
    }
  }
  get format() {
    return this.memoryView.getInt32(0x20);
  }
  set format(value) {
    this.memoryView.setInt32(0x20, value);
  }
  get offset() {
    return this.memoryView.getBigUint64(0x28);
  }
  set offset(value) {
    this.memoryView.setBigUint64(0x28, value);
  }
  get range() {
    return this.memoryView.getBigUint64(0x30);
  }
  set range(value) {
    this.memoryView.setBigUint64(0x30, value);
  }
  
};

VkBufferViewCreateInfo.prototype.flush = function flush() {
  
  
  
  return true;
};

VkBufferViewCreateInfo.byteLength = 0x38;

VkBufferViewCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  buffer: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  format: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  offset: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
  range: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x8
  }),
});
/** VkImageSubresource **/
class VkImageSubresource {
  constructor(opts) {
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkImageSubresource.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.aspectMask !== void 0) this.aspectMask = opts.aspectMask;
      if (opts.mipLevel !== void 0) this.mipLevel = opts.mipLevel;
      if (opts.arrayLayer !== void 0) this.arrayLayer = opts.arrayLayer;
      
    }
  }
  get aspectMask() {
    return this.memoryView.getInt32(0x0);
  }
  set aspectMask(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get mipLevel() {
    return this.memoryView.getUint32(0x4);
  }
  set mipLevel(value) {
    this.memoryView.setUint32(0x4, value);
  }
  get arrayLayer() {
    return this.memoryView.getUint32(0x8);
  }
  set arrayLayer(value) {
    this.memoryView.setUint32(0x8, value);
  }
  
};

VkImageSubresource.prototype.flush = function flush() {
  
  return true;
};

VkImageSubresource.byteLength = 0xC;

VkImageSubresource.memoryLayout = Object.freeze({
  aspectMask: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  mipLevel: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  arrayLayer: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
});
/** VkImageSubresourceLayers **/
class VkImageSubresourceLayers {
  constructor(opts) {
    
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkImageSubresourceLayers.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.aspectMask !== void 0) this.aspectMask = opts.aspectMask;
      if (opts.mipLevel !== void 0) this.mipLevel = opts.mipLevel;
      if (opts.baseArrayLayer !== void 0) this.baseArrayLayer = opts.baseArrayLayer;
      if (opts.layerCount !== void 0) this.layerCount = opts.layerCount;
      
    }
  }
  get aspectMask() {
    return this.memoryView.getInt32(0x0);
  }
  set aspectMask(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get mipLevel() {
    return this.memoryView.getUint32(0x4);
  }
  set mipLevel(value) {
    this.memoryView.setUint32(0x4, value);
  }
  get baseArrayLayer() {
    return this.memoryView.getUint32(0x8);
  }
  set baseArrayLayer(value) {
    this.memoryView.setUint32(0x8, value);
  }
  get layerCount() {
    return this.memoryView.getUint32(0xC);
  }
  set layerCount(value) {
    this.memoryView.setUint32(0xC, value);
  }
  
};

VkImageSubresourceLayers.prototype.flush = function flush() {
  
  return true;
};

VkImageSubresourceLayers.byteLength = 0x10;

VkImageSubresourceLayers.memoryLayout = Object.freeze({
  aspectMask: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  mipLevel: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  baseArrayLayer: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
  layerCount: Object.freeze({
    byteOffset: 0xC,
    byteLength: 0x4
  }),
});
/** VkImageSubresourceRange **/
class VkImageSubresourceRange {
  constructor(opts) {
    
    
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkImageSubresourceRange.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.aspectMask !== void 0) this.aspectMask = opts.aspectMask;
      if (opts.baseMipLevel !== void 0) this.baseMipLevel = opts.baseMipLevel;
      if (opts.levelCount !== void 0) this.levelCount = opts.levelCount;
      if (opts.baseArrayLayer !== void 0) this.baseArrayLayer = opts.baseArrayLayer;
      if (opts.layerCount !== void 0) this.layerCount = opts.layerCount;
      
    }
  }
  get aspectMask() {
    return this.memoryView.getInt32(0x0);
  }
  set aspectMask(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get baseMipLevel() {
    return this.memoryView.getUint32(0x4);
  }
  set baseMipLevel(value) {
    this.memoryView.setUint32(0x4, value);
  }
  get levelCount() {
    return this.memoryView.getUint32(0x8);
  }
  set levelCount(value) {
    this.memoryView.setUint32(0x8, value);
  }
  get baseArrayLayer() {
    return this.memoryView.getUint32(0xC);
  }
  set baseArrayLayer(value) {
    this.memoryView.setUint32(0xC, value);
  }
  get layerCount() {
    return this.memoryView.getUint32(0x10);
  }
  set layerCount(value) {
    this.memoryView.setUint32(0x10, value);
  }
  
};

VkImageSubresourceRange.prototype.flush = function flush() {
  
  return true;
};

VkImageSubresourceRange.byteLength = 0x14;

VkImageSubresourceRange.memoryLayout = Object.freeze({
  aspectMask: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  baseMipLevel: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  levelCount: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
  baseArrayLayer: Object.freeze({
    byteOffset: 0xC,
    byteLength: 0x4
  }),
  layerCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkMemoryBarrier **/
class VkMemoryBarrier {
  constructor(opts) {
    
    this._pNext = null;
    
    
    this.memoryBuffer = new ArrayBuffer(VkMemoryBarrier.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_MEMORY_BARRIER;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.srcAccessMask !== void 0) this.srcAccessMask = opts.srcAccessMask;
      if (opts.dstAccessMask !== void 0) this.dstAccessMask = opts.dstAccessMask;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get srcAccessMask() {
    return this.memoryView.getInt32(0x10);
  }
  set srcAccessMask(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get dstAccessMask() {
    return this.memoryView.getInt32(0x14);
  }
  set dstAccessMask(value) {
    this.memoryView.setInt32(0x14, value);
  }
  
};

VkMemoryBarrier.prototype.flush = function flush() {
  
  
  
  return true;
};

VkMemoryBarrier.byteLength = 0x18;

VkMemoryBarrier.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  srcAccessMask: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  dstAccessMask: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
});
/** VkBufferMemoryBarrier **/
class VkBufferMemoryBarrier {
  constructor(opts) {
    
    this._pNext = null;
    
    
    
    
    this._buffer = null;
    
    
    this.memoryBuffer = new ArrayBuffer(VkBufferMemoryBarrier.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.srcAccessMask !== void 0) this.srcAccessMask = opts.srcAccessMask;
      if (opts.dstAccessMask !== void 0) this.dstAccessMask = opts.dstAccessMask;
      if (opts.srcQueueFamilyIndex !== void 0) this.srcQueueFamilyIndex = opts.srcQueueFamilyIndex;
      if (opts.dstQueueFamilyIndex !== void 0) this.dstQueueFamilyIndex = opts.dstQueueFamilyIndex;
      if (opts.buffer !== void 0) this.buffer = opts.buffer;
      if (opts.offset !== void 0) this.offset = opts.offset;
      if (opts.size !== void 0) this.size = opts.size;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get srcAccessMask() {
    return this.memoryView.getInt32(0x10);
  }
  set srcAccessMask(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get dstAccessMask() {
    return this.memoryView.getInt32(0x14);
  }
  set dstAccessMask(value) {
    this.memoryView.setInt32(0x14, value);
  }
  get srcQueueFamilyIndex() {
    return this.memoryView.getUint32(0x18);
  }
  set srcQueueFamilyIndex(value) {
    this.memoryView.setUint32(0x18, value);
  }
  get dstQueueFamilyIndex() {
    return this.memoryView.getUint32(0x1C);
  }
  set dstQueueFamilyIndex(value) {
    this.memoryView.setUint32(0x1C, value);
  }
  get buffer() {
    return this._buffer;
  }
  set buffer(value) {
    if (value !== null && value.constructor === VkBuffer) {
      value.flush();
      this._buffer = value;
      this.memoryView.setBigInt64(0x20, value.memoryAddress);
    } else if (value === null) {
      this._buffer = null;
    } else {
      throw new TypeError("Invalid type for 'VkBufferMemoryBarrier.buffer': Expected 'VkBuffer' but got '" + value.constructor.name + "'");
    }
  }
  get offset() {
    return this.memoryView.getBigUint64(0x28);
  }
  set offset(value) {
    this.memoryView.setBigUint64(0x28, value);
  }
  get size() {
    return this.memoryView.getBigUint64(0x30);
  }
  set size(value) {
    this.memoryView.setBigUint64(0x30, value);
  }
  
};

VkBufferMemoryBarrier.prototype.flush = function flush() {
  
  
  
  return true;
};

VkBufferMemoryBarrier.byteLength = 0x38;

VkBufferMemoryBarrier.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  srcAccessMask: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  dstAccessMask: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  srcQueueFamilyIndex: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  dstQueueFamilyIndex: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  buffer: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
  offset: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
  size: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x8
  }),
});
/** VkImageMemoryBarrier **/
class VkImageMemoryBarrier {
  constructor(opts) {
    
    this._pNext = null;
    
    
    
    
    
    
    this._image = null;
    this._subresourceRange = null;
    this.memoryBuffer = new ArrayBuffer(VkImageMemoryBarrier.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.srcAccessMask !== void 0) this.srcAccessMask = opts.srcAccessMask;
      if (opts.dstAccessMask !== void 0) this.dstAccessMask = opts.dstAccessMask;
      if (opts.oldLayout !== void 0) this.oldLayout = opts.oldLayout;
      if (opts.newLayout !== void 0) this.newLayout = opts.newLayout;
      if (opts.srcQueueFamilyIndex !== void 0) this.srcQueueFamilyIndex = opts.srcQueueFamilyIndex;
      if (opts.dstQueueFamilyIndex !== void 0) this.dstQueueFamilyIndex = opts.dstQueueFamilyIndex;
      if (opts.image !== void 0) this.image = opts.image;
      if (opts.subresourceRange !== void 0) this.subresourceRange = opts.subresourceRange;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get srcAccessMask() {
    return this.memoryView.getInt32(0x10);
  }
  set srcAccessMask(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get dstAccessMask() {
    return this.memoryView.getInt32(0x14);
  }
  set dstAccessMask(value) {
    this.memoryView.setInt32(0x14, value);
  }
  get oldLayout() {
    return this.memoryView.getInt32(0x18);
  }
  set oldLayout(value) {
    this.memoryView.setInt32(0x18, value);
  }
  get newLayout() {
    return this.memoryView.getInt32(0x1C);
  }
  set newLayout(value) {
    this.memoryView.setInt32(0x1C, value);
  }
  get srcQueueFamilyIndex() {
    return this.memoryView.getUint32(0x20);
  }
  set srcQueueFamilyIndex(value) {
    this.memoryView.setUint32(0x20, value);
  }
  get dstQueueFamilyIndex() {
    return this.memoryView.getUint32(0x24);
  }
  set dstQueueFamilyIndex(value) {
    this.memoryView.setUint32(0x24, value);
  }
  get image() {
    return this._image;
  }
  set image(value) {
    if (value !== null && value.constructor === VkImage) {
      value.flush();
      this._image = value;
      this.memoryView.setBigInt64(0x28, value.memoryAddress);
    } else if (value === null) {
      this._image = null;
    } else {
      throw new TypeError("Invalid type for 'VkImageMemoryBarrier.image': Expected 'VkImage' but got '" + value.constructor.name + "'");
    }
  }
  get subresourceRange() {
    return this._subresourceRange;
  }
  set subresourceRange(value) {
    if (value !== null && value.constructor === VkImageSubresourceRange) {
      value.flush();
      this._subresourceRange = value;
      this.memoryView.setBigInt64(0x30, value.memoryAddress);
    } else if (value === null) {
      this._subresourceRange = null;
    } else {
      throw new TypeError("Invalid type for 'VkImageMemoryBarrier.subresourceRange': Expected 'VkImageSubresourceRange' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkImageMemoryBarrier.prototype.flush = function flush() {
  
  
  
  
  
  return true;
};

VkImageMemoryBarrier.byteLength = 0x48;

VkImageMemoryBarrier.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  srcAccessMask: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  dstAccessMask: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  oldLayout: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  newLayout: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  srcQueueFamilyIndex: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  dstQueueFamilyIndex: Object.freeze({
    byteOffset: 0x24,
    byteLength: 0x4
  }),
  image: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
  subresourceRange: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x14
  }),
});
/** VkImageCreateInfo **/
class VkImageCreateInfo {
  constructor(opts) {
    
    this._pNext = null;
    
    
    
    this._extent = null;
    
    
    
    
    
    
    
    this._pQueueFamilyIndices = null;
    
    this.memoryBuffer = new ArrayBuffer(VkImageCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.imageType !== void 0) this.imageType = opts.imageType;
      if (opts.format !== void 0) this.format = opts.format;
      if (opts.extent !== void 0) this.extent = opts.extent;
      if (opts.mipLevels !== void 0) this.mipLevels = opts.mipLevels;
      if (opts.arrayLayers !== void 0) this.arrayLayers = opts.arrayLayers;
      if (opts.samples !== void 0) this.samples = opts.samples;
      if (opts.tiling !== void 0) this.tiling = opts.tiling;
      if (opts.usage !== void 0) this.usage = opts.usage;
      if (opts.sharingMode !== void 0) this.sharingMode = opts.sharingMode;
      if (opts.queueFamilyIndexCount !== void 0) this.queueFamilyIndexCount = opts.queueFamilyIndexCount;
      if (opts.pQueueFamilyIndices !== void 0) this.pQueueFamilyIndices = opts.pQueueFamilyIndices;
      if (opts.initialLayout !== void 0) this.initialLayout = opts.initialLayout;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get flags() {
    return this.memoryView.getInt32(0x10);
  }
  set flags(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get imageType() {
    return this.memoryView.getInt32(0x14);
  }
  set imageType(value) {
    this.memoryView.setInt32(0x14, value);
  }
  get format() {
    return this.memoryView.getInt32(0x18);
  }
  set format(value) {
    this.memoryView.setInt32(0x18, value);
  }
  get extent() {
    return this._extent;
  }
  set extent(value) {
    if (value !== null && value.constructor === VkExtent3D) {
      value.flush();
      this._extent = value;
      this.memoryView.setBigInt64(0x1C, value.memoryAddress);
    } else if (value === null) {
      this._extent = null;
    } else {
      throw new TypeError("Invalid type for 'VkImageCreateInfo.extent': Expected 'VkExtent3D' but got '" + value.constructor.name + "'");
    }
  }
  get mipLevels() {
    return this.memoryView.getUint32(0x28);
  }
  set mipLevels(value) {
    this.memoryView.setUint32(0x28, value);
  }
  get arrayLayers() {
    return this.memoryView.getUint32(0x2C);
  }
  set arrayLayers(value) {
    this.memoryView.setUint32(0x2C, value);
  }
  get samples() {
    return this.memoryView.getInt32(0x30);
  }
  set samples(value) {
    this.memoryView.setInt32(0x30, value);
  }
  get tiling() {
    return this.memoryView.getInt32(0x34);
  }
  set tiling(value) {
    this.memoryView.setInt32(0x34, value);
  }
  get usage() {
    return this.memoryView.getInt32(0x38);
  }
  set usage(value) {
    this.memoryView.setInt32(0x38, value);
  }
  get sharingMode() {
    return this.memoryView.getInt32(0x3C);
  }
  set sharingMode(value) {
    this.memoryView.setInt32(0x3C, value);
  }
  get queueFamilyIndexCount() {
    return this.memoryView.getUint32(0x40);
  }
  set queueFamilyIndexCount(value) {
    this.memoryView.setUint32(0x40, value);
  }
  get pQueueFamilyIndices() {
    return this._pQueueFamilyIndices;
  }
  set pQueueFamilyIndices(value) {
    if (value !== null && value.constructor === Uint32Array) {
      this._pQueueFamilyIndices = value;
      this.memoryView.setBigInt64(0x48, getAddressFromArrayBuffer(value.buffer));
    } else if (value === null) {
      this._pQueueFamilyIndices = null;
    } else {
      throw new TypeError("Invalid type for 'VkImageCreateInfo.pQueueFamilyIndices': Expected 'Uint32Array' but got '" + value.constructor.name + "'");
    }
  }
  get initialLayout() {
    return this.memoryView.getInt32(0x50);
  }
  set initialLayout(value) {
    this.memoryView.setInt32(0x50, value);
  }
  
};

VkImageCreateInfo.prototype.flush = function flush() {
  
  
  
  
  
  return true;
};

VkImageCreateInfo.byteLength = 0x58;

VkImageCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  imageType: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  format: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  extent: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0xC
  }),
  mipLevels: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x4
  }),
  arrayLayers: Object.freeze({
    byteOffset: 0x2C,
    byteLength: 0x4
  }),
  samples: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  tiling: Object.freeze({
    byteOffset: 0x34,
    byteLength: 0x4
  }),
  usage: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x4
  }),
  sharingMode: Object.freeze({
    byteOffset: 0x3C,
    byteLength: 0x4
  }),
  queueFamilyIndexCount: Object.freeze({
    byteOffset: 0x40,
    byteLength: 0x4
  }),
  pQueueFamilyIndices: Object.freeze({
    byteOffset: 0x48,
    byteLength: 0x8
  }),
  initialLayout: Object.freeze({
    byteOffset: 0x50,
    byteLength: 0x4
  }),
});
/** VkSubresourceLayout **/
class VkSubresourceLayout {
  constructor(opts) {
    
    
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkSubresourceLayout.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      
    }
  }
  get offset() {
    return this.memoryView.getBigUint64(0x0);
  }
  get size() {
    return this.memoryView.getBigUint64(0x8);
  }
  get rowPitch() {
    return this.memoryView.getBigUint64(0x10);
  }
  get arrayPitch() {
    return this.memoryView.getBigUint64(0x18);
  }
  get depthPitch() {
    return this.memoryView.getBigUint64(0x20);
  }
  
};

VkSubresourceLayout.prototype.flush = function flush() {
  
  return true;
};

VkSubresourceLayout.byteLength = 0x28;

VkSubresourceLayout.memoryLayout = Object.freeze({
  offset: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x8
  }),
  size: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  rowPitch: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  arrayPitch: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  depthPitch: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
});
/** VkImageViewCreateInfo **/
class VkImageViewCreateInfo {
  constructor(opts) {
    
    this._pNext = null;
    
    this._image = null;
    
    
    this._components = null;
    this._subresourceRange = null;
    this.memoryBuffer = new ArrayBuffer(VkImageViewCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.image !== void 0) this.image = opts.image;
      if (opts.viewType !== void 0) this.viewType = opts.viewType;
      if (opts.format !== void 0) this.format = opts.format;
      if (opts.components !== void 0) this.components = opts.components;
      if (opts.subresourceRange !== void 0) this.subresourceRange = opts.subresourceRange;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get flags() {
    return this.memoryView.getInt32(0x10);
  }
  set flags(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get image() {
    return this._image;
  }
  set image(value) {
    if (value !== null && value.constructor === VkImage) {
      value.flush();
      this._image = value;
      this.memoryView.setBigInt64(0x18, value.memoryAddress);
    } else if (value === null) {
      this._image = null;
    } else {
      throw new TypeError("Invalid type for 'VkImageViewCreateInfo.image': Expected 'VkImage' but got '" + value.constructor.name + "'");
    }
  }
  get viewType() {
    return this.memoryView.getInt32(0x20);
  }
  set viewType(value) {
    this.memoryView.setInt32(0x20, value);
  }
  get format() {
    return this.memoryView.getInt32(0x24);
  }
  set format(value) {
    this.memoryView.setInt32(0x24, value);
  }
  get components() {
    return this._components;
  }
  set components(value) {
    if (value !== null && value.constructor === VkComponentMapping) {
      value.flush();
      this._components = value;
      this.memoryView.setBigInt64(0x28, value.memoryAddress);
    } else if (value === null) {
      this._components = null;
    } else {
      throw new TypeError("Invalid type for 'VkImageViewCreateInfo.components': Expected 'VkComponentMapping' but got '" + value.constructor.name + "'");
    }
  }
  get subresourceRange() {
    return this._subresourceRange;
  }
  set subresourceRange(value) {
    if (value !== null && value.constructor === VkImageSubresourceRange) {
      value.flush();
      this._subresourceRange = value;
      this.memoryView.setBigInt64(0x38, value.memoryAddress);
    } else if (value === null) {
      this._subresourceRange = null;
    } else {
      throw new TypeError("Invalid type for 'VkImageViewCreateInfo.subresourceRange': Expected 'VkImageSubresourceRange' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkImageViewCreateInfo.prototype.flush = function flush() {
  
  
  
  
  
  
  
  return true;
};

VkImageViewCreateInfo.byteLength = 0x50;

VkImageViewCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  image: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  viewType: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  format: Object.freeze({
    byteOffset: 0x24,
    byteLength: 0x4
  }),
  components: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x10
  }),
  subresourceRange: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x14
  }),
});
/** VkBufferCopy **/
class VkBufferCopy {
  constructor(opts) {
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkBufferCopy.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.srcOffset !== void 0) this.srcOffset = opts.srcOffset;
      if (opts.dstOffset !== void 0) this.dstOffset = opts.dstOffset;
      if (opts.size !== void 0) this.size = opts.size;
      
    }
  }
  get srcOffset() {
    return this.memoryView.getBigUint64(0x0);
  }
  set srcOffset(value) {
    this.memoryView.setBigUint64(0x0, value);
  }
  get dstOffset() {
    return this.memoryView.getBigUint64(0x8);
  }
  set dstOffset(value) {
    this.memoryView.setBigUint64(0x8, value);
  }
  get size() {
    return this.memoryView.getBigUint64(0x10);
  }
  set size(value) {
    this.memoryView.setBigUint64(0x10, value);
  }
  
};

VkBufferCopy.prototype.flush = function flush() {
  
  return true;
};

VkBufferCopy.byteLength = 0x18;

VkBufferCopy.memoryLayout = Object.freeze({
  srcOffset: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x8
  }),
  dstOffset: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  size: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
});
/** VkSparseMemoryBind **/
class VkSparseMemoryBind {
  constructor(opts) {
    
    
    this._memory = null;
    
    
    this.memoryBuffer = new ArrayBuffer(VkSparseMemoryBind.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.resourceOffset !== void 0) this.resourceOffset = opts.resourceOffset;
      if (opts.size !== void 0) this.size = opts.size;
      if (opts.memory !== void 0) this.memory = opts.memory;
      if (opts.memoryOffset !== void 0) this.memoryOffset = opts.memoryOffset;
      if (opts.flags !== void 0) this.flags = opts.flags;
      
    }
  }
  get resourceOffset() {
    return this.memoryView.getBigUint64(0x0);
  }
  set resourceOffset(value) {
    this.memoryView.setBigUint64(0x0, value);
  }
  get size() {
    return this.memoryView.getBigUint64(0x8);
  }
  set size(value) {
    this.memoryView.setBigUint64(0x8, value);
  }
  get memory() {
    return this._memory;
  }
  set memory(value) {
    if (value !== null && value.constructor === VkDeviceMemory) {
      value.flush();
      this._memory = value;
      this.memoryView.setBigInt64(0x10, value.memoryAddress);
    } else if (value === null) {
      this._memory = null;
    } else {
      throw new TypeError("Invalid type for 'VkSparseMemoryBind.memory': Expected 'VkDeviceMemory' but got '" + value.constructor.name + "'");
    }
  }
  get memoryOffset() {
    return this.memoryView.getBigUint64(0x18);
  }
  set memoryOffset(value) {
    this.memoryView.setBigUint64(0x18, value);
  }
  get flags() {
    return this.memoryView.getInt32(0x20);
  }
  set flags(value) {
    this.memoryView.setInt32(0x20, value);
  }
  
};

VkSparseMemoryBind.prototype.flush = function flush() {
  
  return true;
};

VkSparseMemoryBind.byteLength = 0x28;

VkSparseMemoryBind.memoryLayout = Object.freeze({
  resourceOffset: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x8
  }),
  size: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  memory: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  memoryOffset: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
});
/** VkSparseImageMemoryBind **/
class VkSparseImageMemoryBind {
  constructor(opts) {
    this._subresource = null;
    this._offset = null;
    this._extent = null;
    this._memory = null;
    
    
    this.memoryBuffer = new ArrayBuffer(VkSparseImageMemoryBind.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.subresource !== void 0) this.subresource = opts.subresource;
      if (opts.offset !== void 0) this.offset = opts.offset;
      if (opts.extent !== void 0) this.extent = opts.extent;
      if (opts.memory !== void 0) this.memory = opts.memory;
      if (opts.memoryOffset !== void 0) this.memoryOffset = opts.memoryOffset;
      if (opts.flags !== void 0) this.flags = opts.flags;
      
    }
  }
  get subresource() {
    return this._subresource;
  }
  set subresource(value) {
    if (value !== null && value.constructor === VkImageSubresource) {
      value.flush();
      this._subresource = value;
      this.memoryView.setBigInt64(0x0, value.memoryAddress);
    } else if (value === null) {
      this._subresource = null;
    } else {
      throw new TypeError("Invalid type for 'VkSparseImageMemoryBind.subresource': Expected 'VkImageSubresource' but got '" + value.constructor.name + "'");
    }
  }
  get offset() {
    return this._offset;
  }
  set offset(value) {
    if (value !== null && value.constructor === VkOffset3D) {
      value.flush();
      this._offset = value;
      this.memoryView.setBigInt64(0xC, value.memoryAddress);
    } else if (value === null) {
      this._offset = null;
    } else {
      throw new TypeError("Invalid type for 'VkSparseImageMemoryBind.offset': Expected 'VkOffset3D' but got '" + value.constructor.name + "'");
    }
  }
  get extent() {
    return this._extent;
  }
  set extent(value) {
    if (value !== null && value.constructor === VkExtent3D) {
      value.flush();
      this._extent = value;
      this.memoryView.setBigInt64(0x18, value.memoryAddress);
    } else if (value === null) {
      this._extent = null;
    } else {
      throw new TypeError("Invalid type for 'VkSparseImageMemoryBind.extent': Expected 'VkExtent3D' but got '" + value.constructor.name + "'");
    }
  }
  get memory() {
    return this._memory;
  }
  set memory(value) {
    if (value !== null && value.constructor === VkDeviceMemory) {
      value.flush();
      this._memory = value;
      this.memoryView.setBigInt64(0x28, value.memoryAddress);
    } else if (value === null) {
      this._memory = null;
    } else {
      throw new TypeError("Invalid type for 'VkSparseImageMemoryBind.memory': Expected 'VkDeviceMemory' but got '" + value.constructor.name + "'");
    }
  }
  get memoryOffset() {
    return this.memoryView.getBigUint64(0x30);
  }
  set memoryOffset(value) {
    this.memoryView.setBigUint64(0x30, value);
  }
  get flags() {
    return this.memoryView.getInt32(0x38);
  }
  set flags(value) {
    this.memoryView.setInt32(0x38, value);
  }
  
};

VkSparseImageMemoryBind.prototype.flush = function flush() {
  
  
  
  
  
  
  
  return true;
};

VkSparseImageMemoryBind.byteLength = 0x40;

VkSparseImageMemoryBind.memoryLayout = Object.freeze({
  subresource: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0xC
  }),
  offset: Object.freeze({
    byteOffset: 0xC,
    byteLength: 0xC
  }),
  extent: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0xC
  }),
  memory: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
  memoryOffset: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x4
  }),
});
/** VkSparseBufferMemoryBindInfo **/
class VkSparseBufferMemoryBindInfo {
  constructor(opts) {
    this._buffer = null;
    
    this._pBinds = null;
    this._pBindsNative = null;
    this.memoryBuffer = new ArrayBuffer(VkSparseBufferMemoryBindInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.buffer !== void 0) this.buffer = opts.buffer;
      if (opts.bindCount !== void 0) this.bindCount = opts.bindCount;
      if (opts.pBinds !== void 0) this.pBinds = opts.pBinds;
      
    }
  }
  get buffer() {
    return this._buffer;
  }
  set buffer(value) {
    if (value !== null && value.constructor === VkBuffer) {
      value.flush();
      this._buffer = value;
      this.memoryView.setBigInt64(0x0, value.memoryAddress);
    } else if (value === null) {
      this._buffer = null;
    } else {
      throw new TypeError("Invalid type for 'VkSparseBufferMemoryBindInfo.buffer': Expected 'VkBuffer' but got '" + value.constructor.name + "'");
    }
  }
  get bindCount() {
    return this.memoryView.getUint32(0x8);
  }
  set bindCount(value) {
    this.memoryView.setUint32(0x8, value);
  }
  get pBinds() {
    return this._pBinds;
  }
  set pBinds(value) {
    if (value !== null && value.constructor === Array) {
      this._pBinds = value;
    } else if (value === null) {
      this._pBinds = null;
    } else {
      throw new TypeError("Invalid type for 'VkSparseBufferMemoryBindInfo.pBinds': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkSparseBufferMemoryBindInfo.prototype.flush = function flush() {
  
  
  if (this._pBinds !== null) {
    let nativeArray = new NativeObjectArray(this._pBinds);
    this._pBindsNative = nativeArray;
    this.memoryView.setBigInt64(0x10, nativeArray.address);
  }
  
  return true;
};

VkSparseBufferMemoryBindInfo.byteLength = 0x18;

VkSparseBufferMemoryBindInfo.memoryLayout = Object.freeze({
  buffer: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x8
  }),
  bindCount: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
  pBinds: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
});
/** VkSparseImageOpaqueMemoryBindInfo **/
class VkSparseImageOpaqueMemoryBindInfo {
  constructor(opts) {
    this._image = null;
    
    this._pBinds = null;
    this._pBindsNative = null;
    this.memoryBuffer = new ArrayBuffer(VkSparseImageOpaqueMemoryBindInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.image !== void 0) this.image = opts.image;
      if (opts.bindCount !== void 0) this.bindCount = opts.bindCount;
      if (opts.pBinds !== void 0) this.pBinds = opts.pBinds;
      
    }
  }
  get image() {
    return this._image;
  }
  set image(value) {
    if (value !== null && value.constructor === VkImage) {
      value.flush();
      this._image = value;
      this.memoryView.setBigInt64(0x0, value.memoryAddress);
    } else if (value === null) {
      this._image = null;
    } else {
      throw new TypeError("Invalid type for 'VkSparseImageOpaqueMemoryBindInfo.image': Expected 'VkImage' but got '" + value.constructor.name + "'");
    }
  }
  get bindCount() {
    return this.memoryView.getUint32(0x8);
  }
  set bindCount(value) {
    this.memoryView.setUint32(0x8, value);
  }
  get pBinds() {
    return this._pBinds;
  }
  set pBinds(value) {
    if (value !== null && value.constructor === Array) {
      this._pBinds = value;
    } else if (value === null) {
      this._pBinds = null;
    } else {
      throw new TypeError("Invalid type for 'VkSparseImageOpaqueMemoryBindInfo.pBinds': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkSparseImageOpaqueMemoryBindInfo.prototype.flush = function flush() {
  
  
  if (this._pBinds !== null) {
    let nativeArray = new NativeObjectArray(this._pBinds);
    this._pBindsNative = nativeArray;
    this.memoryView.setBigInt64(0x10, nativeArray.address);
  }
  
  return true;
};

VkSparseImageOpaqueMemoryBindInfo.byteLength = 0x18;

VkSparseImageOpaqueMemoryBindInfo.memoryLayout = Object.freeze({
  image: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x8
  }),
  bindCount: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
  pBinds: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
});
/** VkSparseImageMemoryBindInfo **/
class VkSparseImageMemoryBindInfo {
  constructor(opts) {
    this._image = null;
    
    this._pBinds = null;
    this._pBindsNative = null;
    this.memoryBuffer = new ArrayBuffer(VkSparseImageMemoryBindInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.image !== void 0) this.image = opts.image;
      if (opts.bindCount !== void 0) this.bindCount = opts.bindCount;
      if (opts.pBinds !== void 0) this.pBinds = opts.pBinds;
      
    }
  }
  get image() {
    return this._image;
  }
  set image(value) {
    if (value !== null && value.constructor === VkImage) {
      value.flush();
      this._image = value;
      this.memoryView.setBigInt64(0x0, value.memoryAddress);
    } else if (value === null) {
      this._image = null;
    } else {
      throw new TypeError("Invalid type for 'VkSparseImageMemoryBindInfo.image': Expected 'VkImage' but got '" + value.constructor.name + "'");
    }
  }
  get bindCount() {
    return this.memoryView.getUint32(0x8);
  }
  set bindCount(value) {
    this.memoryView.setUint32(0x8, value);
  }
  get pBinds() {
    return this._pBinds;
  }
  set pBinds(value) {
    if (value !== null && value.constructor === Array) {
      this._pBinds = value;
    } else if (value === null) {
      this._pBinds = null;
    } else {
      throw new TypeError("Invalid type for 'VkSparseImageMemoryBindInfo.pBinds': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkSparseImageMemoryBindInfo.prototype.flush = function flush() {
  
  
  if (this._pBinds !== null) {
    let nativeArray = new NativeObjectArray(this._pBinds);
    this._pBindsNative = nativeArray;
    this.memoryView.setBigInt64(0x10, nativeArray.address);
  }
  
  return true;
};

VkSparseImageMemoryBindInfo.byteLength = 0x18;

VkSparseImageMemoryBindInfo.memoryLayout = Object.freeze({
  image: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x8
  }),
  bindCount: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
  pBinds: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
});
/** VkBindSparseInfo **/
class VkBindSparseInfo {
  constructor(opts) {
    
    this._pNext = null;
    
    this._pWaitSemaphores = null;
    this._pWaitSemaphoresNative = null;
    
    this._pBufferBinds = null;
    this._pBufferBindsNative = null;
    
    this._pImageOpaqueBinds = null;
    this._pImageOpaqueBindsNative = null;
    
    this._pImageBinds = null;
    this._pImageBindsNative = null;
    
    this._pSignalSemaphores = null;
    this._pSignalSemaphoresNative = null;
    this.memoryBuffer = new ArrayBuffer(VkBindSparseInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_BIND_SPARSE_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.waitSemaphoreCount !== void 0) this.waitSemaphoreCount = opts.waitSemaphoreCount;
      if (opts.pWaitSemaphores !== void 0) this.pWaitSemaphores = opts.pWaitSemaphores;
      if (opts.bufferBindCount !== void 0) this.bufferBindCount = opts.bufferBindCount;
      if (opts.pBufferBinds !== void 0) this.pBufferBinds = opts.pBufferBinds;
      if (opts.imageOpaqueBindCount !== void 0) this.imageOpaqueBindCount = opts.imageOpaqueBindCount;
      if (opts.pImageOpaqueBinds !== void 0) this.pImageOpaqueBinds = opts.pImageOpaqueBinds;
      if (opts.imageBindCount !== void 0) this.imageBindCount = opts.imageBindCount;
      if (opts.pImageBinds !== void 0) this.pImageBinds = opts.pImageBinds;
      if (opts.signalSemaphoreCount !== void 0) this.signalSemaphoreCount = opts.signalSemaphoreCount;
      if (opts.pSignalSemaphores !== void 0) this.pSignalSemaphores = opts.pSignalSemaphores;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get waitSemaphoreCount() {
    return this.memoryView.getUint32(0x10);
  }
  set waitSemaphoreCount(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get pWaitSemaphores() {
    return this._pWaitSemaphores;
  }
  set pWaitSemaphores(value) {
    if (value !== null && value.constructor === Array) {
      this._pWaitSemaphores = value;
    } else if (value === null) {
      this._pWaitSemaphores = null;
    } else {
      throw new TypeError("Invalid type for 'VkBindSparseInfo.pWaitSemaphores': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get bufferBindCount() {
    return this.memoryView.getUint32(0x20);
  }
  set bufferBindCount(value) {
    this.memoryView.setUint32(0x20, value);
  }
  get pBufferBinds() {
    return this._pBufferBinds;
  }
  set pBufferBinds(value) {
    if (value !== null && value.constructor === Array) {
      this._pBufferBinds = value;
    } else if (value === null) {
      this._pBufferBinds = null;
    } else {
      throw new TypeError("Invalid type for 'VkBindSparseInfo.pBufferBinds': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get imageOpaqueBindCount() {
    return this.memoryView.getUint32(0x30);
  }
  set imageOpaqueBindCount(value) {
    this.memoryView.setUint32(0x30, value);
  }
  get pImageOpaqueBinds() {
    return this._pImageOpaqueBinds;
  }
  set pImageOpaqueBinds(value) {
    if (value !== null && value.constructor === Array) {
      this._pImageOpaqueBinds = value;
    } else if (value === null) {
      this._pImageOpaqueBinds = null;
    } else {
      throw new TypeError("Invalid type for 'VkBindSparseInfo.pImageOpaqueBinds': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get imageBindCount() {
    return this.memoryView.getUint32(0x40);
  }
  set imageBindCount(value) {
    this.memoryView.setUint32(0x40, value);
  }
  get pImageBinds() {
    return this._pImageBinds;
  }
  set pImageBinds(value) {
    if (value !== null && value.constructor === Array) {
      this._pImageBinds = value;
    } else if (value === null) {
      this._pImageBinds = null;
    } else {
      throw new TypeError("Invalid type for 'VkBindSparseInfo.pImageBinds': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get signalSemaphoreCount() {
    return this.memoryView.getUint32(0x50);
  }
  set signalSemaphoreCount(value) {
    this.memoryView.setUint32(0x50, value);
  }
  get pSignalSemaphores() {
    return this._pSignalSemaphores;
  }
  set pSignalSemaphores(value) {
    if (value !== null && value.constructor === Array) {
      this._pSignalSemaphores = value;
    } else if (value === null) {
      this._pSignalSemaphores = null;
    } else {
      throw new TypeError("Invalid type for 'VkBindSparseInfo.pSignalSemaphores': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkBindSparseInfo.prototype.flush = function flush() {
  
  
  
  
  if (this._pWaitSemaphores !== null) {
    let nativeArray = new NativeObjectArray(this._pWaitSemaphores);
    this._pWaitSemaphoresNative = nativeArray;
    this.memoryView.setBigInt64(0x18, nativeArray.address);
  }
  
  
  if (this._pBufferBinds !== null) {
    let nativeArray = new NativeObjectArray(this._pBufferBinds);
    this._pBufferBindsNative = nativeArray;
    this.memoryView.setBigInt64(0x28, nativeArray.address);
  }
  
  
  if (this._pImageOpaqueBinds !== null) {
    let nativeArray = new NativeObjectArray(this._pImageOpaqueBinds);
    this._pImageOpaqueBindsNative = nativeArray;
    this.memoryView.setBigInt64(0x38, nativeArray.address);
  }
  
  
  if (this._pImageBinds !== null) {
    let nativeArray = new NativeObjectArray(this._pImageBinds);
    this._pImageBindsNative = nativeArray;
    this.memoryView.setBigInt64(0x48, nativeArray.address);
  }
  
  
  if (this._pSignalSemaphores !== null) {
    let nativeArray = new NativeObjectArray(this._pSignalSemaphores);
    this._pSignalSemaphoresNative = nativeArray;
    this.memoryView.setBigInt64(0x58, nativeArray.address);
  }
  
  return true;
};

VkBindSparseInfo.byteLength = 0x60;

VkBindSparseInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  waitSemaphoreCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pWaitSemaphores: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  bufferBindCount: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  pBufferBinds: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
  imageOpaqueBindCount: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  pImageOpaqueBinds: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x8
  }),
  imageBindCount: Object.freeze({
    byteOffset: 0x40,
    byteLength: 0x4
  }),
  pImageBinds: Object.freeze({
    byteOffset: 0x48,
    byteLength: 0x8
  }),
  signalSemaphoreCount: Object.freeze({
    byteOffset: 0x50,
    byteLength: 0x4
  }),
  pSignalSemaphores: Object.freeze({
    byteOffset: 0x58,
    byteLength: 0x8
  }),
});
/** VkImageCopy **/
class VkImageCopy {
  constructor(opts) {
    this._srcSubresource = null;
    this._srcOffset = null;
    this._dstSubresource = null;
    this._dstOffset = null;
    this._extent = null;
    this.memoryBuffer = new ArrayBuffer(VkImageCopy.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.srcSubresource !== void 0) this.srcSubresource = opts.srcSubresource;
      if (opts.srcOffset !== void 0) this.srcOffset = opts.srcOffset;
      if (opts.dstSubresource !== void 0) this.dstSubresource = opts.dstSubresource;
      if (opts.dstOffset !== void 0) this.dstOffset = opts.dstOffset;
      if (opts.extent !== void 0) this.extent = opts.extent;
      
    }
  }
  get srcSubresource() {
    return this._srcSubresource;
  }
  set srcSubresource(value) {
    if (value !== null && value.constructor === VkImageSubresourceLayers) {
      value.flush();
      this._srcSubresource = value;
      this.memoryView.setBigInt64(0x0, value.memoryAddress);
    } else if (value === null) {
      this._srcSubresource = null;
    } else {
      throw new TypeError("Invalid type for 'VkImageCopy.srcSubresource': Expected 'VkImageSubresourceLayers' but got '" + value.constructor.name + "'");
    }
  }
  get srcOffset() {
    return this._srcOffset;
  }
  set srcOffset(value) {
    if (value !== null && value.constructor === VkOffset3D) {
      value.flush();
      this._srcOffset = value;
      this.memoryView.setBigInt64(0x10, value.memoryAddress);
    } else if (value === null) {
      this._srcOffset = null;
    } else {
      throw new TypeError("Invalid type for 'VkImageCopy.srcOffset': Expected 'VkOffset3D' but got '" + value.constructor.name + "'");
    }
  }
  get dstSubresource() {
    return this._dstSubresource;
  }
  set dstSubresource(value) {
    if (value !== null && value.constructor === VkImageSubresourceLayers) {
      value.flush();
      this._dstSubresource = value;
      this.memoryView.setBigInt64(0x1C, value.memoryAddress);
    } else if (value === null) {
      this._dstSubresource = null;
    } else {
      throw new TypeError("Invalid type for 'VkImageCopy.dstSubresource': Expected 'VkImageSubresourceLayers' but got '" + value.constructor.name + "'");
    }
  }
  get dstOffset() {
    return this._dstOffset;
  }
  set dstOffset(value) {
    if (value !== null && value.constructor === VkOffset3D) {
      value.flush();
      this._dstOffset = value;
      this.memoryView.setBigInt64(0x2C, value.memoryAddress);
    } else if (value === null) {
      this._dstOffset = null;
    } else {
      throw new TypeError("Invalid type for 'VkImageCopy.dstOffset': Expected 'VkOffset3D' but got '" + value.constructor.name + "'");
    }
  }
  get extent() {
    return this._extent;
  }
  set extent(value) {
    if (value !== null && value.constructor === VkExtent3D) {
      value.flush();
      this._extent = value;
      this.memoryView.setBigInt64(0x38, value.memoryAddress);
    } else if (value === null) {
      this._extent = null;
    } else {
      throw new TypeError("Invalid type for 'VkImageCopy.extent': Expected 'VkExtent3D' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkImageCopy.prototype.flush = function flush() {
  
  
  
  
  
  
  
  
  
  
  
  return true;
};

VkImageCopy.byteLength = 0x44;

VkImageCopy.memoryLayout = Object.freeze({
  srcSubresource: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x10
  }),
  srcOffset: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0xC
  }),
  dstSubresource: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x10
  }),
  dstOffset: Object.freeze({
    byteOffset: 0x2C,
    byteLength: 0xC
  }),
  extent: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0xC
  }),
});
/** VkImageBlit **/
class VkImageBlit {
  constructor(opts) {
    this._srcSubresource = null;
    this._srcOffsets = null;
    this._dstSubresource = null;
    this._dstOffsets = null;
    this.memoryBuffer = new ArrayBuffer(VkImageBlit.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.srcSubresource !== void 0) this.srcSubresource = opts.srcSubresource;
      if (opts.srcOffsets !== void 0) this.srcOffsets = opts.srcOffsets;
      if (opts.dstSubresource !== void 0) this.dstSubresource = opts.dstSubresource;
      if (opts.dstOffsets !== void 0) this.dstOffsets = opts.dstOffsets;
      
    }
  }
  get srcSubresource() {
    return this._srcSubresource;
  }
  set srcSubresource(value) {
    if (value !== null && value.constructor === VkImageSubresourceLayers) {
      value.flush();
      this._srcSubresource = value;
      this.memoryView.setBigInt64(0x0, value.memoryAddress);
    } else if (value === null) {
      this._srcSubresource = null;
    } else {
      throw new TypeError("Invalid type for 'VkImageBlit.srcSubresource': Expected 'VkImageSubresourceLayers' but got '" + value.constructor.name + "'");
    }
  }
  get srcOffsets() {
    return this._srcOffsets;
  }
  set srcOffsets(value) {
    if (value !== null && value.constructor === Array) {
      this._srcOffsets = value;
    } else if (value === null) {
      this._srcOffsets = null;
    } else {
      throw new TypeError("Invalid type for 'VkImageBlit.srcOffsets': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get dstSubresource() {
    return this._dstSubresource;
  }
  set dstSubresource(value) {
    if (value !== null && value.constructor === VkImageSubresourceLayers) {
      value.flush();
      this._dstSubresource = value;
      this.memoryView.setBigInt64(0x28, value.memoryAddress);
    } else if (value === null) {
      this._dstSubresource = null;
    } else {
      throw new TypeError("Invalid type for 'VkImageBlit.dstSubresource': Expected 'VkImageSubresourceLayers' but got '" + value.constructor.name + "'");
    }
  }
  get dstOffsets() {
    return this._dstOffsets;
  }
  set dstOffsets(value) {
    if (value !== null && value.constructor === Array) {
      this._dstOffsets = value;
    } else if (value === null) {
      this._dstOffsets = null;
    } else {
      throw new TypeError("Invalid type for 'VkImageBlit.dstOffsets': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkImageBlit.prototype.flush = function flush() {
  
  
  
  
  if (this._srcOffsets !== null) {
    let nativeArray = new NativeObjectArray(this._srcOffsets);
    this._srcOffsetsNative = nativeArray;
    this.memoryView.setBigInt64(0x10, nativeArray.address);
  }
  
  
  
  
  if (this._dstOffsets !== null) {
    let nativeArray = new NativeObjectArray(this._dstOffsets);
    this._dstOffsetsNative = nativeArray;
    this.memoryView.setBigInt64(0x38, nativeArray.address);
  }
  
  return true;
};

VkImageBlit.byteLength = 0x50;

VkImageBlit.memoryLayout = Object.freeze({
  srcSubresource: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x10
  }),
  srcOffsets: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x18
  }),
  dstSubresource: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x10
  }),
  dstOffsets: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x18
  }),
});
/** VkBufferImageCopy **/
class VkBufferImageCopy {
  constructor(opts) {
    
    
    
    this._imageSubresource = null;
    this._imageOffset = null;
    this._imageExtent = null;
    this.memoryBuffer = new ArrayBuffer(VkBufferImageCopy.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.bufferOffset !== void 0) this.bufferOffset = opts.bufferOffset;
      if (opts.bufferRowLength !== void 0) this.bufferRowLength = opts.bufferRowLength;
      if (opts.bufferImageHeight !== void 0) this.bufferImageHeight = opts.bufferImageHeight;
      if (opts.imageSubresource !== void 0) this.imageSubresource = opts.imageSubresource;
      if (opts.imageOffset !== void 0) this.imageOffset = opts.imageOffset;
      if (opts.imageExtent !== void 0) this.imageExtent = opts.imageExtent;
      
    }
  }
  get bufferOffset() {
    return this.memoryView.getBigUint64(0x0);
  }
  set bufferOffset(value) {
    this.memoryView.setBigUint64(0x0, value);
  }
  get bufferRowLength() {
    return this.memoryView.getUint32(0x8);
  }
  set bufferRowLength(value) {
    this.memoryView.setUint32(0x8, value);
  }
  get bufferImageHeight() {
    return this.memoryView.getUint32(0xC);
  }
  set bufferImageHeight(value) {
    this.memoryView.setUint32(0xC, value);
  }
  get imageSubresource() {
    return this._imageSubresource;
  }
  set imageSubresource(value) {
    if (value !== null && value.constructor === VkImageSubresourceLayers) {
      value.flush();
      this._imageSubresource = value;
      this.memoryView.setBigInt64(0x10, value.memoryAddress);
    } else if (value === null) {
      this._imageSubresource = null;
    } else {
      throw new TypeError("Invalid type for 'VkBufferImageCopy.imageSubresource': Expected 'VkImageSubresourceLayers' but got '" + value.constructor.name + "'");
    }
  }
  get imageOffset() {
    return this._imageOffset;
  }
  set imageOffset(value) {
    if (value !== null && value.constructor === VkOffset3D) {
      value.flush();
      this._imageOffset = value;
      this.memoryView.setBigInt64(0x20, value.memoryAddress);
    } else if (value === null) {
      this._imageOffset = null;
    } else {
      throw new TypeError("Invalid type for 'VkBufferImageCopy.imageOffset': Expected 'VkOffset3D' but got '" + value.constructor.name + "'");
    }
  }
  get imageExtent() {
    return this._imageExtent;
  }
  set imageExtent(value) {
    if (value !== null && value.constructor === VkExtent3D) {
      value.flush();
      this._imageExtent = value;
      this.memoryView.setBigInt64(0x2C, value.memoryAddress);
    } else if (value === null) {
      this._imageExtent = null;
    } else {
      throw new TypeError("Invalid type for 'VkBufferImageCopy.imageExtent': Expected 'VkExtent3D' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkBufferImageCopy.prototype.flush = function flush() {
  
  
  
  
  
  
  
  return true;
};

VkBufferImageCopy.byteLength = 0x38;

VkBufferImageCopy.memoryLayout = Object.freeze({
  bufferOffset: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x8
  }),
  bufferRowLength: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
  bufferImageHeight: Object.freeze({
    byteOffset: 0xC,
    byteLength: 0x4
  }),
  imageSubresource: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x10
  }),
  imageOffset: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0xC
  }),
  imageExtent: Object.freeze({
    byteOffset: 0x2C,
    byteLength: 0xC
  }),
});
/** VkImageResolve **/
class VkImageResolve {
  constructor(opts) {
    this._srcSubresource = null;
    this._srcOffset = null;
    this._dstSubresource = null;
    this._dstOffset = null;
    this._extent = null;
    this.memoryBuffer = new ArrayBuffer(VkImageResolve.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.srcSubresource !== void 0) this.srcSubresource = opts.srcSubresource;
      if (opts.srcOffset !== void 0) this.srcOffset = opts.srcOffset;
      if (opts.dstSubresource !== void 0) this.dstSubresource = opts.dstSubresource;
      if (opts.dstOffset !== void 0) this.dstOffset = opts.dstOffset;
      if (opts.extent !== void 0) this.extent = opts.extent;
      
    }
  }
  get srcSubresource() {
    return this._srcSubresource;
  }
  set srcSubresource(value) {
    if (value !== null && value.constructor === VkImageSubresourceLayers) {
      value.flush();
      this._srcSubresource = value;
      this.memoryView.setBigInt64(0x0, value.memoryAddress);
    } else if (value === null) {
      this._srcSubresource = null;
    } else {
      throw new TypeError("Invalid type for 'VkImageResolve.srcSubresource': Expected 'VkImageSubresourceLayers' but got '" + value.constructor.name + "'");
    }
  }
  get srcOffset() {
    return this._srcOffset;
  }
  set srcOffset(value) {
    if (value !== null && value.constructor === VkOffset3D) {
      value.flush();
      this._srcOffset = value;
      this.memoryView.setBigInt64(0x10, value.memoryAddress);
    } else if (value === null) {
      this._srcOffset = null;
    } else {
      throw new TypeError("Invalid type for 'VkImageResolve.srcOffset': Expected 'VkOffset3D' but got '" + value.constructor.name + "'");
    }
  }
  get dstSubresource() {
    return this._dstSubresource;
  }
  set dstSubresource(value) {
    if (value !== null && value.constructor === VkImageSubresourceLayers) {
      value.flush();
      this._dstSubresource = value;
      this.memoryView.setBigInt64(0x1C, value.memoryAddress);
    } else if (value === null) {
      this._dstSubresource = null;
    } else {
      throw new TypeError("Invalid type for 'VkImageResolve.dstSubresource': Expected 'VkImageSubresourceLayers' but got '" + value.constructor.name + "'");
    }
  }
  get dstOffset() {
    return this._dstOffset;
  }
  set dstOffset(value) {
    if (value !== null && value.constructor === VkOffset3D) {
      value.flush();
      this._dstOffset = value;
      this.memoryView.setBigInt64(0x2C, value.memoryAddress);
    } else if (value === null) {
      this._dstOffset = null;
    } else {
      throw new TypeError("Invalid type for 'VkImageResolve.dstOffset': Expected 'VkOffset3D' but got '" + value.constructor.name + "'");
    }
  }
  get extent() {
    return this._extent;
  }
  set extent(value) {
    if (value !== null && value.constructor === VkExtent3D) {
      value.flush();
      this._extent = value;
      this.memoryView.setBigInt64(0x38, value.memoryAddress);
    } else if (value === null) {
      this._extent = null;
    } else {
      throw new TypeError("Invalid type for 'VkImageResolve.extent': Expected 'VkExtent3D' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkImageResolve.prototype.flush = function flush() {
  
  
  
  
  
  
  
  
  
  
  
  return true;
};

VkImageResolve.byteLength = 0x44;

VkImageResolve.memoryLayout = Object.freeze({
  srcSubresource: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x10
  }),
  srcOffset: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0xC
  }),
  dstSubresource: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x10
  }),
  dstOffset: Object.freeze({
    byteOffset: 0x2C,
    byteLength: 0xC
  }),
  extent: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0xC
  }),
});
/** VkShaderModuleCreateInfo **/
class VkShaderModuleCreateInfo {
  constructor(opts) {
    
    this._pNext = null;
    
    
    this._pCode = null;
    this.memoryBuffer = new ArrayBuffer(VkShaderModuleCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.codeSize !== void 0) this.codeSize = opts.codeSize;
      if (opts.pCode !== void 0) this.pCode = opts.pCode;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get flags() {
    return this.memoryView.getInt32(0x10);
  }
  set flags(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get codeSize() {
    return this.memoryView.getBigInt64(0x18);
  }
  set codeSize(value) {
    this.memoryView.setBigInt64(0x18, value);
  }
  get pCode() {
    return this._pCode;
  }
  set pCode(value) {
    if (value !== null && value.constructor === Uint8Array) {
      this._pCode = value;
      this.memoryView.setBigInt64(0x20, getAddressFromArrayBuffer(value.buffer));
    } else if (value === null) {
      this._pCode = null;
    } else {
      throw new TypeError("Invalid type for 'VkShaderModuleCreateInfo.pCode': Expected 'Uint8Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkShaderModuleCreateInfo.prototype.flush = function flush() {
  
  
  
  return true;
};

VkShaderModuleCreateInfo.byteLength = 0x28;

VkShaderModuleCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  codeSize: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  pCode: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
});
/** VkDescriptorSetLayoutBinding **/
class VkDescriptorSetLayoutBinding {
  constructor(opts) {
    
    
    
    
    this._pImmutableSamplers = null;
    this._pImmutableSamplersNative = null;
    this.memoryBuffer = new ArrayBuffer(VkDescriptorSetLayoutBinding.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.binding !== void 0) this.binding = opts.binding;
      if (opts.descriptorType !== void 0) this.descriptorType = opts.descriptorType;
      if (opts.descriptorCount !== void 0) this.descriptorCount = opts.descriptorCount;
      if (opts.stageFlags !== void 0) this.stageFlags = opts.stageFlags;
      if (opts.pImmutableSamplers !== void 0) this.pImmutableSamplers = opts.pImmutableSamplers;
      
    }
  }
  get binding() {
    return this.memoryView.getUint32(0x0);
  }
  set binding(value) {
    this.memoryView.setUint32(0x0, value);
  }
  get descriptorType() {
    return this.memoryView.getInt32(0x4);
  }
  set descriptorType(value) {
    this.memoryView.setInt32(0x4, value);
  }
  get descriptorCount() {
    return this.memoryView.getUint32(0x8);
  }
  set descriptorCount(value) {
    this.memoryView.setUint32(0x8, value);
  }
  get stageFlags() {
    return this.memoryView.getInt32(0xC);
  }
  set stageFlags(value) {
    this.memoryView.setInt32(0xC, value);
  }
  get pImmutableSamplers() {
    return this._pImmutableSamplers;
  }
  set pImmutableSamplers(value) {
    if (value !== null && value.constructor === Array) {
      this._pImmutableSamplers = value;
    } else if (value === null) {
      this._pImmutableSamplers = null;
    } else {
      throw new TypeError("Invalid type for 'VkDescriptorSetLayoutBinding.pImmutableSamplers': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkDescriptorSetLayoutBinding.prototype.flush = function flush() {
  
  
  if (this._pImmutableSamplers !== null) {
    let nativeArray = new NativeObjectArray(this._pImmutableSamplers);
    this._pImmutableSamplersNative = nativeArray;
    this.memoryView.setBigInt64(0x10, nativeArray.address);
  }
  
  return true;
};

VkDescriptorSetLayoutBinding.byteLength = 0x18;

VkDescriptorSetLayoutBinding.memoryLayout = Object.freeze({
  binding: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  descriptorType: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  descriptorCount: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
  stageFlags: Object.freeze({
    byteOffset: 0xC,
    byteLength: 0x4
  }),
  pImmutableSamplers: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
});
/** VkDescriptorSetLayoutCreateInfo **/
class VkDescriptorSetLayoutCreateInfo {
  constructor(opts) {
    
    this._pNext = null;
    
    
    this._pBindings = null;
    this._pBindingsNative = null;
    this.memoryBuffer = new ArrayBuffer(VkDescriptorSetLayoutCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.bindingCount !== void 0) this.bindingCount = opts.bindingCount;
      if (opts.pBindings !== void 0) this.pBindings = opts.pBindings;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get flags() {
    return this.memoryView.getInt32(0x10);
  }
  set flags(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get bindingCount() {
    return this.memoryView.getUint32(0x14);
  }
  set bindingCount(value) {
    this.memoryView.setUint32(0x14, value);
  }
  get pBindings() {
    return this._pBindings;
  }
  set pBindings(value) {
    if (value !== null && value.constructor === Array) {
      this._pBindings = value;
    } else if (value === null) {
      this._pBindings = null;
    } else {
      throw new TypeError("Invalid type for 'VkDescriptorSetLayoutCreateInfo.pBindings': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkDescriptorSetLayoutCreateInfo.prototype.flush = function flush() {
  
  
  
  
  if (this._pBindings !== null) {
    let nativeArray = new NativeObjectArray(this._pBindings);
    this._pBindingsNative = nativeArray;
    this.memoryView.setBigInt64(0x18, nativeArray.address);
  }
  
  return true;
};

VkDescriptorSetLayoutCreateInfo.byteLength = 0x20;

VkDescriptorSetLayoutCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  bindingCount: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  pBindings: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkDescriptorPoolSize **/
class VkDescriptorPoolSize {
  constructor(opts) {
    
    
    this.memoryBuffer = new ArrayBuffer(VkDescriptorPoolSize.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.type !== void 0) this.type = opts.type;
      if (opts.descriptorCount !== void 0) this.descriptorCount = opts.descriptorCount;
      
    }
  }
  get type() {
    return this.memoryView.getInt32(0x0);
  }
  set type(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get descriptorCount() {
    return this.memoryView.getUint32(0x4);
  }
  set descriptorCount(value) {
    this.memoryView.setUint32(0x4, value);
  }
  
};

VkDescriptorPoolSize.prototype.flush = function flush() {
  
  return true;
};

VkDescriptorPoolSize.byteLength = 0x8;

VkDescriptorPoolSize.memoryLayout = Object.freeze({
  type: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  descriptorCount: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
});
/** VkDescriptorPoolCreateInfo **/
class VkDescriptorPoolCreateInfo {
  constructor(opts) {
    
    this._pNext = null;
    
    
    
    this._pPoolSizes = null;
    this._pPoolSizesNative = null;
    this.memoryBuffer = new ArrayBuffer(VkDescriptorPoolCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.maxSets !== void 0) this.maxSets = opts.maxSets;
      if (opts.poolSizeCount !== void 0) this.poolSizeCount = opts.poolSizeCount;
      if (opts.pPoolSizes !== void 0) this.pPoolSizes = opts.pPoolSizes;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get flags() {
    return this.memoryView.getInt32(0x10);
  }
  set flags(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get maxSets() {
    return this.memoryView.getUint32(0x14);
  }
  set maxSets(value) {
    this.memoryView.setUint32(0x14, value);
  }
  get poolSizeCount() {
    return this.memoryView.getUint32(0x18);
  }
  set poolSizeCount(value) {
    this.memoryView.setUint32(0x18, value);
  }
  get pPoolSizes() {
    return this._pPoolSizes;
  }
  set pPoolSizes(value) {
    if (value !== null && value.constructor === Array) {
      this._pPoolSizes = value;
    } else if (value === null) {
      this._pPoolSizes = null;
    } else {
      throw new TypeError("Invalid type for 'VkDescriptorPoolCreateInfo.pPoolSizes': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkDescriptorPoolCreateInfo.prototype.flush = function flush() {
  
  
  
  
  if (this._pPoolSizes !== null) {
    let nativeArray = new NativeObjectArray(this._pPoolSizes);
    this._pPoolSizesNative = nativeArray;
    this.memoryView.setBigInt64(0x20, nativeArray.address);
  }
  
  return true;
};

VkDescriptorPoolCreateInfo.byteLength = 0x28;

VkDescriptorPoolCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  maxSets: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  poolSizeCount: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  pPoolSizes: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
});
/** VkDescriptorSetAllocateInfo **/
class VkDescriptorSetAllocateInfo {
  constructor(opts) {
    
    this._pNext = null;
    this._descriptorPool = null;
    
    this._pSetLayouts = null;
    this._pSetLayoutsNative = null;
    this.memoryBuffer = new ArrayBuffer(VkDescriptorSetAllocateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.descriptorPool !== void 0) this.descriptorPool = opts.descriptorPool;
      if (opts.descriptorSetCount !== void 0) this.descriptorSetCount = opts.descriptorSetCount;
      if (opts.pSetLayouts !== void 0) this.pSetLayouts = opts.pSetLayouts;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get descriptorPool() {
    return this._descriptorPool;
  }
  set descriptorPool(value) {
    if (value !== null && value.constructor === VkDescriptorPool) {
      value.flush();
      this._descriptorPool = value;
      this.memoryView.setBigInt64(0x10, value.memoryAddress);
    } else if (value === null) {
      this._descriptorPool = null;
    } else {
      throw new TypeError("Invalid type for 'VkDescriptorSetAllocateInfo.descriptorPool': Expected 'VkDescriptorPool' but got '" + value.constructor.name + "'");
    }
  }
  get descriptorSetCount() {
    return this.memoryView.getUint32(0x18);
  }
  set descriptorSetCount(value) {
    this.memoryView.setUint32(0x18, value);
  }
  get pSetLayouts() {
    return this._pSetLayouts;
  }
  set pSetLayouts(value) {
    if (value !== null && value.constructor === Array) {
      this._pSetLayouts = value;
    } else if (value === null) {
      this._pSetLayouts = null;
    } else {
      throw new TypeError("Invalid type for 'VkDescriptorSetAllocateInfo.pSetLayouts': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkDescriptorSetAllocateInfo.prototype.flush = function flush() {
  
  
  
  
  if (this._pSetLayouts !== null) {
    let nativeArray = new NativeObjectArray(this._pSetLayouts);
    this._pSetLayoutsNative = nativeArray;
    this.memoryView.setBigInt64(0x20, nativeArray.address);
  }
  
  return true;
};

VkDescriptorSetAllocateInfo.byteLength = 0x28;

VkDescriptorSetAllocateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  descriptorPool: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  descriptorSetCount: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  pSetLayouts: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
});
/** VkSpecializationMapEntry **/
class VkSpecializationMapEntry {
  constructor(opts) {
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkSpecializationMapEntry.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.constantID !== void 0) this.constantID = opts.constantID;
      if (opts.offset !== void 0) this.offset = opts.offset;
      if (opts.size !== void 0) this.size = opts.size;
      
    }
  }
  get constantID() {
    return this.memoryView.getUint32(0x0);
  }
  set constantID(value) {
    this.memoryView.setUint32(0x0, value);
  }
  get offset() {
    return this.memoryView.getUint32(0x4);
  }
  set offset(value) {
    this.memoryView.setUint32(0x4, value);
  }
  get size() {
    return this.memoryView.getBigInt64(0x8);
  }
  set size(value) {
    this.memoryView.setBigInt64(0x8, value);
  }
  
};

VkSpecializationMapEntry.prototype.flush = function flush() {
  
  return true;
};

VkSpecializationMapEntry.byteLength = 0x10;

VkSpecializationMapEntry.memoryLayout = Object.freeze({
  constantID: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  offset: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  size: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
});
/** VkSpecializationInfo **/
class VkSpecializationInfo {
  constructor(opts) {
    
    this._pMapEntries = null;
    this._pMapEntriesNative = null;
    
    this._pData = null;
    this.memoryBuffer = new ArrayBuffer(VkSpecializationInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.mapEntryCount !== void 0) this.mapEntryCount = opts.mapEntryCount;
      if (opts.pMapEntries !== void 0) this.pMapEntries = opts.pMapEntries;
      if (opts.dataSize !== void 0) this.dataSize = opts.dataSize;
      if (opts.pData !== void 0) this.pData = opts.pData;
      
    }
  }
  get mapEntryCount() {
    return this.memoryView.getUint32(0x0);
  }
  set mapEntryCount(value) {
    this.memoryView.setUint32(0x0, value);
  }
  get pMapEntries() {
    return this._pMapEntries;
  }
  set pMapEntries(value) {
    if (value !== null && value.constructor === Array) {
      this._pMapEntries = value;
    } else if (value === null) {
      this._pMapEntries = null;
    } else {
      throw new TypeError("Invalid type for 'VkSpecializationInfo.pMapEntries': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get dataSize() {
    return this.memoryView.getBigInt64(0x10);
  }
  set dataSize(value) {
    this.memoryView.setBigInt64(0x10, value);
  }
  get pData() {
    return this._pData;
  }
  set pData(value) {
    if (value !== null && value.constructor === ArrayBuffer) {
      this._pData = value;
      this.memoryView.setBigInt64(0x18, getAddressFromArrayBuffer(value.buffer));
    } else if (value === null) {
      this._pData = null;
    } else {
      throw new TypeError("Invalid type for 'VkSpecializationInfo.pData': Expected 'ArrayBuffer' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkSpecializationInfo.prototype.flush = function flush() {
  
  
  if (this._pMapEntries !== null) {
    let nativeArray = new NativeObjectArray(this._pMapEntries);
    this._pMapEntriesNative = nativeArray;
    this.memoryView.setBigInt64(0x8, nativeArray.address);
  }
  
  return true;
};

VkSpecializationInfo.byteLength = 0x20;

VkSpecializationInfo.memoryLayout = Object.freeze({
  mapEntryCount: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pMapEntries: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  dataSize: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  pData: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkPipelineShaderStageCreateInfo **/
class VkPipelineShaderStageCreateInfo {
  constructor(opts) {
    
    this._pNext = null;
    
    
    this._module = null;
    this._pName = null;
    this._pSpecializationInfo = null;
    this.memoryBuffer = new ArrayBuffer(VkPipelineShaderStageCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.stage !== void 0) this.stage = opts.stage;
      if (opts.module !== void 0) this.module = opts.module;
      if (opts.pName !== void 0) this.pName = opts.pName;
      if (opts.pSpecializationInfo !== void 0) this.pSpecializationInfo = opts.pSpecializationInfo;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get flags() {
    return this.memoryView.getInt32(0x10);
  }
  set flags(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get stage() {
    return this.memoryView.getInt32(0x14);
  }
  set stage(value) {
    this.memoryView.setInt32(0x14, value);
  }
  get module() {
    return this._module;
  }
  set module(value) {
    if (value !== null && value.constructor === VkShaderModule) {
      value.flush();
      this._module = value;
      this.memoryView.setBigInt64(0x18, value.memoryAddress);
    } else if (value === null) {
      this._module = null;
    } else {
      throw new TypeError("Invalid type for 'VkPipelineShaderStageCreateInfo.module': Expected 'VkShaderModule' but got '" + value.constructor.name + "'");
    }
  }
  get pName() {
    if (this._pName !== null) {
      let str = textDecoder.decode(this._pName);
      return str.substr(0, str.length - 1);
    } else {
      return null;
    }
  }
  set pName(value) {
    if (value !== null && value.constructor === String) {
      this._pName = textEncoder.encode(value + String.fromCharCode(0x0)).buffer;
      this.memoryView.setBigInt64(0x20, getAddressFromArrayBuffer(this._pName));
    } else if (value === null) {
      this._pName = null;
      this.memoryView.setBigInt64(0x20, 0n);
    } else {
      throw new TypeError("Invalid type for 'VkPipelineShaderStageCreateInfo.pName': Expected 'String' but got '" + value.constructor.name + "'");
    }
  }
  get pSpecializationInfo() {
    return this._pSpecializationInfo;
  }
  set pSpecializationInfo(value) {
    if (value !== null && value.constructor === VkSpecializationInfo) {
      value.flush();
      this._pSpecializationInfo = value;
      this.memoryView.setBigInt64(0x28, value.memoryAddress);
    } else if (value === null) {
      this._pSpecializationInfo = null;
    } else {
      throw new TypeError("Invalid type for 'VkPipelineShaderStageCreateInfo.pSpecializationInfo': Expected 'VkSpecializationInfo' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkPipelineShaderStageCreateInfo.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPipelineShaderStageCreateInfo.byteLength = 0x30;

VkPipelineShaderStageCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  stage: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  module: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  pName: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
  pSpecializationInfo: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
});
/** VkComputePipelineCreateInfo **/
class VkComputePipelineCreateInfo {
  constructor(opts) {
    
    this._pNext = null;
    
    this._stage = null;
    this._layout = null;
    this._basePipelineHandle = null;
    
    this.memoryBuffer = new ArrayBuffer(VkComputePipelineCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.stage !== void 0) this.stage = opts.stage;
      if (opts.layout !== void 0) this.layout = opts.layout;
      if (opts.basePipelineHandle !== void 0) this.basePipelineHandle = opts.basePipelineHandle;
      if (opts.basePipelineIndex !== void 0) this.basePipelineIndex = opts.basePipelineIndex;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get flags() {
    return this.memoryView.getInt32(0x10);
  }
  set flags(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get stage() {
    return this._stage;
  }
  set stage(value) {
    if (value !== null && value.constructor === VkPipelineShaderStageCreateInfo) {
      value.flush();
      this._stage = value;
      this.memoryView.setBigInt64(0x18, value.memoryAddress);
    } else if (value === null) {
      this._stage = null;
    } else {
      throw new TypeError("Invalid type for 'VkComputePipelineCreateInfo.stage': Expected 'VkPipelineShaderStageCreateInfo' but got '" + value.constructor.name + "'");
    }
  }
  get layout() {
    return this._layout;
  }
  set layout(value) {
    if (value !== null && value.constructor === VkPipelineLayout) {
      value.flush();
      this._layout = value;
      this.memoryView.setBigInt64(0x48, value.memoryAddress);
    } else if (value === null) {
      this._layout = null;
    } else {
      throw new TypeError("Invalid type for 'VkComputePipelineCreateInfo.layout': Expected 'VkPipelineLayout' but got '" + value.constructor.name + "'");
    }
  }
  get basePipelineHandle() {
    return this._basePipelineHandle;
  }
  set basePipelineHandle(value) {
    if (value !== null && value.constructor === VkPipeline) {
      value.flush();
      this._basePipelineHandle = value;
      this.memoryView.setBigInt64(0x50, value.memoryAddress);
    } else if (value === null) {
      this._basePipelineHandle = null;
    } else {
      throw new TypeError("Invalid type for 'VkComputePipelineCreateInfo.basePipelineHandle': Expected 'VkPipeline' but got '" + value.constructor.name + "'");
    }
  }
  get basePipelineIndex() {
    return this.memoryView.getInt32(0x58);
  }
  set basePipelineIndex(value) {
    this.memoryView.setInt32(0x58, value);
  }
  
};

VkComputePipelineCreateInfo.prototype.flush = function flush() {
  
  
  
  
  
  return true;
};

VkComputePipelineCreateInfo.byteLength = 0x60;

VkComputePipelineCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  stage: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x30
  }),
  layout: Object.freeze({
    byteOffset: 0x48,
    byteLength: 0x8
  }),
  basePipelineHandle: Object.freeze({
    byteOffset: 0x50,
    byteLength: 0x8
  }),
  basePipelineIndex: Object.freeze({
    byteOffset: 0x58,
    byteLength: 0x4
  }),
});
/** VkVertexInputBindingDescription **/
class VkVertexInputBindingDescription {
  constructor(opts) {
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkVertexInputBindingDescription.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.binding !== void 0) this.binding = opts.binding;
      if (opts.stride !== void 0) this.stride = opts.stride;
      if (opts.inputRate !== void 0) this.inputRate = opts.inputRate;
      
    }
  }
  get binding() {
    return this.memoryView.getUint32(0x0);
  }
  set binding(value) {
    this.memoryView.setUint32(0x0, value);
  }
  get stride() {
    return this.memoryView.getUint32(0x4);
  }
  set stride(value) {
    this.memoryView.setUint32(0x4, value);
  }
  get inputRate() {
    return this.memoryView.getInt32(0x8);
  }
  set inputRate(value) {
    this.memoryView.setInt32(0x8, value);
  }
  
};

VkVertexInputBindingDescription.prototype.flush = function flush() {
  
  return true;
};

VkVertexInputBindingDescription.byteLength = 0xC;

VkVertexInputBindingDescription.memoryLayout = Object.freeze({
  binding: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  stride: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  inputRate: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
});
/** VkVertexInputAttributeDescription **/
class VkVertexInputAttributeDescription {
  constructor(opts) {
    
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkVertexInputAttributeDescription.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.location !== void 0) this.location = opts.location;
      if (opts.binding !== void 0) this.binding = opts.binding;
      if (opts.format !== void 0) this.format = opts.format;
      if (opts.offset !== void 0) this.offset = opts.offset;
      
    }
  }
  get location() {
    return this.memoryView.getUint32(0x0);
  }
  set location(value) {
    this.memoryView.setUint32(0x0, value);
  }
  get binding() {
    return this.memoryView.getUint32(0x4);
  }
  set binding(value) {
    this.memoryView.setUint32(0x4, value);
  }
  get format() {
    return this.memoryView.getInt32(0x8);
  }
  set format(value) {
    this.memoryView.setInt32(0x8, value);
  }
  get offset() {
    return this.memoryView.getUint32(0xC);
  }
  set offset(value) {
    this.memoryView.setUint32(0xC, value);
  }
  
};

VkVertexInputAttributeDescription.prototype.flush = function flush() {
  
  return true;
};

VkVertexInputAttributeDescription.byteLength = 0x10;

VkVertexInputAttributeDescription.memoryLayout = Object.freeze({
  location: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  binding: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  format: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
  offset: Object.freeze({
    byteOffset: 0xC,
    byteLength: 0x4
  }),
});
/** VkPipelineVertexInputStateCreateInfo **/
class VkPipelineVertexInputStateCreateInfo {
  constructor(opts) {
    
    this._pNext = null;
    
    
    this._pVertexBindingDescriptions = null;
    this._pVertexBindingDescriptionsNative = null;
    
    this._pVertexAttributeDescriptions = null;
    this._pVertexAttributeDescriptionsNative = null;
    this.memoryBuffer = new ArrayBuffer(VkPipelineVertexInputStateCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.vertexBindingDescriptionCount !== void 0) this.vertexBindingDescriptionCount = opts.vertexBindingDescriptionCount;
      if (opts.pVertexBindingDescriptions !== void 0) this.pVertexBindingDescriptions = opts.pVertexBindingDescriptions;
      if (opts.vertexAttributeDescriptionCount !== void 0) this.vertexAttributeDescriptionCount = opts.vertexAttributeDescriptionCount;
      if (opts.pVertexAttributeDescriptions !== void 0) this.pVertexAttributeDescriptions = opts.pVertexAttributeDescriptions;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get flags() {
    return this.memoryView.getInt32(0x10);
  }
  set flags(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get vertexBindingDescriptionCount() {
    return this.memoryView.getUint32(0x14);
  }
  set vertexBindingDescriptionCount(value) {
    this.memoryView.setUint32(0x14, value);
  }
  get pVertexBindingDescriptions() {
    return this._pVertexBindingDescriptions;
  }
  set pVertexBindingDescriptions(value) {
    if (value !== null && value.constructor === Array) {
      this._pVertexBindingDescriptions = value;
    } else if (value === null) {
      this._pVertexBindingDescriptions = null;
    } else {
      throw new TypeError("Invalid type for 'VkPipelineVertexInputStateCreateInfo.pVertexBindingDescriptions': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get vertexAttributeDescriptionCount() {
    return this.memoryView.getUint32(0x20);
  }
  set vertexAttributeDescriptionCount(value) {
    this.memoryView.setUint32(0x20, value);
  }
  get pVertexAttributeDescriptions() {
    return this._pVertexAttributeDescriptions;
  }
  set pVertexAttributeDescriptions(value) {
    if (value !== null && value.constructor === Array) {
      this._pVertexAttributeDescriptions = value;
    } else if (value === null) {
      this._pVertexAttributeDescriptions = null;
    } else {
      throw new TypeError("Invalid type for 'VkPipelineVertexInputStateCreateInfo.pVertexAttributeDescriptions': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkPipelineVertexInputStateCreateInfo.prototype.flush = function flush() {
  
  
  
  
  if (this._pVertexBindingDescriptions !== null) {
    let nativeArray = new NativeObjectArray(this._pVertexBindingDescriptions);
    this._pVertexBindingDescriptionsNative = nativeArray;
    this.memoryView.setBigInt64(0x18, nativeArray.address);
  }
  
  
  if (this._pVertexAttributeDescriptions !== null) {
    let nativeArray = new NativeObjectArray(this._pVertexAttributeDescriptions);
    this._pVertexAttributeDescriptionsNative = nativeArray;
    this.memoryView.setBigInt64(0x28, nativeArray.address);
  }
  
  return true;
};

VkPipelineVertexInputStateCreateInfo.byteLength = 0x30;

VkPipelineVertexInputStateCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  vertexBindingDescriptionCount: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  pVertexBindingDescriptions: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  vertexAttributeDescriptionCount: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  pVertexAttributeDescriptions: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
});
/** VkPipelineInputAssemblyStateCreateInfo **/
class VkPipelineInputAssemblyStateCreateInfo {
  constructor(opts) {
    
    this._pNext = null;
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkPipelineInputAssemblyStateCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.topology !== void 0) this.topology = opts.topology;
      if (opts.primitiveRestartEnable !== void 0) this.primitiveRestartEnable = opts.primitiveRestartEnable;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get flags() {
    return this.memoryView.getInt32(0x10);
  }
  set flags(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get topology() {
    return this.memoryView.getInt32(0x14);
  }
  set topology(value) {
    this.memoryView.setInt32(0x14, value);
  }
  get primitiveRestartEnable() {
    return this.memoryView.getUint32(0x18);
  }
  set primitiveRestartEnable(value) {
    this.memoryView.setUint32(0x18, value);
  }
  
};

VkPipelineInputAssemblyStateCreateInfo.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPipelineInputAssemblyStateCreateInfo.byteLength = 0x20;

VkPipelineInputAssemblyStateCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  topology: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  primitiveRestartEnable: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
});
/** VkPipelineTessellationStateCreateInfo **/
class VkPipelineTessellationStateCreateInfo {
  constructor(opts) {
    
    this._pNext = null;
    
    
    this.memoryBuffer = new ArrayBuffer(VkPipelineTessellationStateCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.patchControlPoints !== void 0) this.patchControlPoints = opts.patchControlPoints;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get flags() {
    return this.memoryView.getInt32(0x10);
  }
  set flags(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get patchControlPoints() {
    return this.memoryView.getUint32(0x14);
  }
  set patchControlPoints(value) {
    this.memoryView.setUint32(0x14, value);
  }
  
};

VkPipelineTessellationStateCreateInfo.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPipelineTessellationStateCreateInfo.byteLength = 0x18;

VkPipelineTessellationStateCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  patchControlPoints: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
});
/** VkPipelineViewportStateCreateInfo **/
class VkPipelineViewportStateCreateInfo {
  constructor(opts) {
    
    this._pNext = null;
    
    
    this._pViewports = null;
    this._pViewportsNative = null;
    
    this._pScissors = null;
    this._pScissorsNative = null;
    this.memoryBuffer = new ArrayBuffer(VkPipelineViewportStateCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.viewportCount !== void 0) this.viewportCount = opts.viewportCount;
      if (opts.pViewports !== void 0) this.pViewports = opts.pViewports;
      if (opts.scissorCount !== void 0) this.scissorCount = opts.scissorCount;
      if (opts.pScissors !== void 0) this.pScissors = opts.pScissors;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get flags() {
    return this.memoryView.getInt32(0x10);
  }
  set flags(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get viewportCount() {
    return this.memoryView.getUint32(0x14);
  }
  set viewportCount(value) {
    this.memoryView.setUint32(0x14, value);
  }
  get pViewports() {
    return this._pViewports;
  }
  set pViewports(value) {
    if (value !== null && value.constructor === Array) {
      this._pViewports = value;
    } else if (value === null) {
      this._pViewports = null;
    } else {
      throw new TypeError("Invalid type for 'VkPipelineViewportStateCreateInfo.pViewports': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get scissorCount() {
    return this.memoryView.getUint32(0x20);
  }
  set scissorCount(value) {
    this.memoryView.setUint32(0x20, value);
  }
  get pScissors() {
    return this._pScissors;
  }
  set pScissors(value) {
    if (value !== null && value.constructor === Array) {
      this._pScissors = value;
    } else if (value === null) {
      this._pScissors = null;
    } else {
      throw new TypeError("Invalid type for 'VkPipelineViewportStateCreateInfo.pScissors': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkPipelineViewportStateCreateInfo.prototype.flush = function flush() {
  
  
  
  
  if (this._pViewports !== null) {
    let nativeArray = new NativeObjectArray(this._pViewports);
    this._pViewportsNative = nativeArray;
    this.memoryView.setBigInt64(0x18, nativeArray.address);
  }
  
  
  if (this._pScissors !== null) {
    let nativeArray = new NativeObjectArray(this._pScissors);
    this._pScissorsNative = nativeArray;
    this.memoryView.setBigInt64(0x28, nativeArray.address);
  }
  
  return true;
};

VkPipelineViewportStateCreateInfo.byteLength = 0x30;

VkPipelineViewportStateCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  viewportCount: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  pViewports: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  scissorCount: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  pScissors: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
});
/** VkPipelineRasterizationStateCreateInfo **/
class VkPipelineRasterizationStateCreateInfo {
  constructor(opts) {
    
    this._pNext = null;
    
    
    
    
    
    
    
    
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkPipelineRasterizationStateCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.depthClampEnable !== void 0) this.depthClampEnable = opts.depthClampEnable;
      if (opts.rasterizerDiscardEnable !== void 0) this.rasterizerDiscardEnable = opts.rasterizerDiscardEnable;
      if (opts.polygonMode !== void 0) this.polygonMode = opts.polygonMode;
      if (opts.cullMode !== void 0) this.cullMode = opts.cullMode;
      if (opts.frontFace !== void 0) this.frontFace = opts.frontFace;
      if (opts.depthBiasEnable !== void 0) this.depthBiasEnable = opts.depthBiasEnable;
      if (opts.depthBiasConstantFactor !== void 0) this.depthBiasConstantFactor = opts.depthBiasConstantFactor;
      if (opts.depthBiasClamp !== void 0) this.depthBiasClamp = opts.depthBiasClamp;
      if (opts.depthBiasSlopeFactor !== void 0) this.depthBiasSlopeFactor = opts.depthBiasSlopeFactor;
      if (opts.lineWidth !== void 0) this.lineWidth = opts.lineWidth;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get flags() {
    return this.memoryView.getInt32(0x10);
  }
  set flags(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get depthClampEnable() {
    return this.memoryView.getUint32(0x14);
  }
  set depthClampEnable(value) {
    this.memoryView.setUint32(0x14, value);
  }
  get rasterizerDiscardEnable() {
    return this.memoryView.getUint32(0x18);
  }
  set rasterizerDiscardEnable(value) {
    this.memoryView.setUint32(0x18, value);
  }
  get polygonMode() {
    return this.memoryView.getInt32(0x1C);
  }
  set polygonMode(value) {
    this.memoryView.setInt32(0x1C, value);
  }
  get cullMode() {
    return this.memoryView.getInt32(0x20);
  }
  set cullMode(value) {
    this.memoryView.setInt32(0x20, value);
  }
  get frontFace() {
    return this.memoryView.getInt32(0x24);
  }
  set frontFace(value) {
    this.memoryView.setInt32(0x24, value);
  }
  get depthBiasEnable() {
    return this.memoryView.getUint32(0x28);
  }
  set depthBiasEnable(value) {
    this.memoryView.setUint32(0x28, value);
  }
  get depthBiasConstantFactor() {
    return this.memoryView.getFloat32(0x2C);
  }
  set depthBiasConstantFactor(value) {
    this.memoryView.setFloat32(0x2C, value);
  }
  get depthBiasClamp() {
    return this.memoryView.getFloat32(0x30);
  }
  set depthBiasClamp(value) {
    this.memoryView.setFloat32(0x30, value);
  }
  get depthBiasSlopeFactor() {
    return this.memoryView.getFloat32(0x34);
  }
  set depthBiasSlopeFactor(value) {
    this.memoryView.setFloat32(0x34, value);
  }
  get lineWidth() {
    return this.memoryView.getFloat32(0x38);
  }
  set lineWidth(value) {
    this.memoryView.setFloat32(0x38, value);
  }
  
};

VkPipelineRasterizationStateCreateInfo.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPipelineRasterizationStateCreateInfo.byteLength = 0x40;

VkPipelineRasterizationStateCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  depthClampEnable: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  rasterizerDiscardEnable: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  polygonMode: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  cullMode: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  frontFace: Object.freeze({
    byteOffset: 0x24,
    byteLength: 0x4
  }),
  depthBiasEnable: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x4
  }),
  depthBiasConstantFactor: Object.freeze({
    byteOffset: 0x2C,
    byteLength: 0x4
  }),
  depthBiasClamp: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  depthBiasSlopeFactor: Object.freeze({
    byteOffset: 0x34,
    byteLength: 0x4
  }),
  lineWidth: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x4
  }),
});
/** VkPipelineMultisampleStateCreateInfo **/
class VkPipelineMultisampleStateCreateInfo {
  constructor(opts) {
    
    this._pNext = null;
    
    
    
    
    this._pSampleMask = null;
    
    
    this.memoryBuffer = new ArrayBuffer(VkPipelineMultisampleStateCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.rasterizationSamples !== void 0) this.rasterizationSamples = opts.rasterizationSamples;
      if (opts.sampleShadingEnable !== void 0) this.sampleShadingEnable = opts.sampleShadingEnable;
      if (opts.minSampleShading !== void 0) this.minSampleShading = opts.minSampleShading;
      if (opts.pSampleMask !== void 0) this.pSampleMask = opts.pSampleMask;
      if (opts.alphaToCoverageEnable !== void 0) this.alphaToCoverageEnable = opts.alphaToCoverageEnable;
      if (opts.alphaToOneEnable !== void 0) this.alphaToOneEnable = opts.alphaToOneEnable;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get flags() {
    return this.memoryView.getInt32(0x10);
  }
  set flags(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get rasterizationSamples() {
    return this.memoryView.getInt32(0x14);
  }
  set rasterizationSamples(value) {
    this.memoryView.setInt32(0x14, value);
  }
  get sampleShadingEnable() {
    return this.memoryView.getUint32(0x18);
  }
  set sampleShadingEnable(value) {
    this.memoryView.setUint32(0x18, value);
  }
  get minSampleShading() {
    return this.memoryView.getFloat32(0x1C);
  }
  set minSampleShading(value) {
    this.memoryView.setFloat32(0x1C, value);
  }
  get pSampleMask() {
    return this._pSampleMask;
  }
  set pSampleMask(value) {
    if (value !== null && value.constructor === Uint32Array) {
      this._pSampleMask = value;
      this.memoryView.setBigInt64(0x20, getAddressFromArrayBuffer(value.buffer));
    } else if (value === null) {
      this._pSampleMask = null;
    } else {
      throw new TypeError("Invalid type for 'VkPipelineMultisampleStateCreateInfo.pSampleMask': Expected 'Uint32Array' but got '" + value.constructor.name + "'");
    }
  }
  get alphaToCoverageEnable() {
    return this.memoryView.getUint32(0x28);
  }
  set alphaToCoverageEnable(value) {
    this.memoryView.setUint32(0x28, value);
  }
  get alphaToOneEnable() {
    return this.memoryView.getUint32(0x2C);
  }
  set alphaToOneEnable(value) {
    this.memoryView.setUint32(0x2C, value);
  }
  
};

VkPipelineMultisampleStateCreateInfo.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPipelineMultisampleStateCreateInfo.byteLength = 0x30;

VkPipelineMultisampleStateCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  rasterizationSamples: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  sampleShadingEnable: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  minSampleShading: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  pSampleMask: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
  alphaToCoverageEnable: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x4
  }),
  alphaToOneEnable: Object.freeze({
    byteOffset: 0x2C,
    byteLength: 0x4
  }),
});
/** VkPipelineColorBlendAttachmentState **/
class VkPipelineColorBlendAttachmentState {
  constructor(opts) {
    
    
    
    
    
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkPipelineColorBlendAttachmentState.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.blendEnable !== void 0) this.blendEnable = opts.blendEnable;
      if (opts.srcColorBlendFactor !== void 0) this.srcColorBlendFactor = opts.srcColorBlendFactor;
      if (opts.dstColorBlendFactor !== void 0) this.dstColorBlendFactor = opts.dstColorBlendFactor;
      if (opts.colorBlendOp !== void 0) this.colorBlendOp = opts.colorBlendOp;
      if (opts.srcAlphaBlendFactor !== void 0) this.srcAlphaBlendFactor = opts.srcAlphaBlendFactor;
      if (opts.dstAlphaBlendFactor !== void 0) this.dstAlphaBlendFactor = opts.dstAlphaBlendFactor;
      if (opts.alphaBlendOp !== void 0) this.alphaBlendOp = opts.alphaBlendOp;
      if (opts.colorWriteMask !== void 0) this.colorWriteMask = opts.colorWriteMask;
      
    }
  }
  get blendEnable() {
    return this.memoryView.getUint32(0x0);
  }
  set blendEnable(value) {
    this.memoryView.setUint32(0x0, value);
  }
  get srcColorBlendFactor() {
    return this.memoryView.getInt32(0x4);
  }
  set srcColorBlendFactor(value) {
    this.memoryView.setInt32(0x4, value);
  }
  get dstColorBlendFactor() {
    return this.memoryView.getInt32(0x8);
  }
  set dstColorBlendFactor(value) {
    this.memoryView.setInt32(0x8, value);
  }
  get colorBlendOp() {
    return this.memoryView.getInt32(0xC);
  }
  set colorBlendOp(value) {
    this.memoryView.setInt32(0xC, value);
  }
  get srcAlphaBlendFactor() {
    return this.memoryView.getInt32(0x10);
  }
  set srcAlphaBlendFactor(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get dstAlphaBlendFactor() {
    return this.memoryView.getInt32(0x14);
  }
  set dstAlphaBlendFactor(value) {
    this.memoryView.setInt32(0x14, value);
  }
  get alphaBlendOp() {
    return this.memoryView.getInt32(0x18);
  }
  set alphaBlendOp(value) {
    this.memoryView.setInt32(0x18, value);
  }
  get colorWriteMask() {
    return this.memoryView.getInt32(0x1C);
  }
  set colorWriteMask(value) {
    this.memoryView.setInt32(0x1C, value);
  }
  
};

VkPipelineColorBlendAttachmentState.prototype.flush = function flush() {
  
  return true;
};

VkPipelineColorBlendAttachmentState.byteLength = 0x20;

VkPipelineColorBlendAttachmentState.memoryLayout = Object.freeze({
  blendEnable: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  srcColorBlendFactor: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  dstColorBlendFactor: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
  colorBlendOp: Object.freeze({
    byteOffset: 0xC,
    byteLength: 0x4
  }),
  srcAlphaBlendFactor: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  dstAlphaBlendFactor: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  alphaBlendOp: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  colorWriteMask: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
});
/** VkPipelineColorBlendStateCreateInfo **/
class VkPipelineColorBlendStateCreateInfo {
  constructor(opts) {
    
    this._pNext = null;
    
    
    
    
    this._pAttachments = null;
    this._pAttachmentsNative = null;
    this._blendConstants = null;
    this.memoryBuffer = new ArrayBuffer(VkPipelineColorBlendStateCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.logicOpEnable !== void 0) this.logicOpEnable = opts.logicOpEnable;
      if (opts.logicOp !== void 0) this.logicOp = opts.logicOp;
      if (opts.attachmentCount !== void 0) this.attachmentCount = opts.attachmentCount;
      if (opts.pAttachments !== void 0) this.pAttachments = opts.pAttachments;
      if (opts.blendConstants !== void 0) this.blendConstants = opts.blendConstants;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get flags() {
    return this.memoryView.getInt32(0x10);
  }
  set flags(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get logicOpEnable() {
    return this.memoryView.getUint32(0x14);
  }
  set logicOpEnable(value) {
    this.memoryView.setUint32(0x14, value);
  }
  get logicOp() {
    return this.memoryView.getInt32(0x18);
  }
  set logicOp(value) {
    this.memoryView.setInt32(0x18, value);
  }
  get attachmentCount() {
    return this.memoryView.getUint32(0x1C);
  }
  set attachmentCount(value) {
    this.memoryView.setUint32(0x1C, value);
  }
  get pAttachments() {
    return this._pAttachments;
  }
  set pAttachments(value) {
    if (value !== null && value.constructor === Array) {
      this._pAttachments = value;
    } else if (value === null) {
      this._pAttachments = null;
    } else {
      throw new TypeError("Invalid type for 'VkPipelineColorBlendStateCreateInfo.pAttachments': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get blendConstants() {
    return this._blendConstants;
  }
  set blendConstants(value) {
    if (value !== null && value.constructor === Array) {
      this._blendConstants = value;
    } else if (value === null) {
      this._blendConstants = null;
    } else {
      throw new TypeError("Invalid type for 'VkPipelineColorBlendStateCreateInfo.blendConstants': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkPipelineColorBlendStateCreateInfo.prototype.flush = function flush() {
  
  
  
  
  if (this._pAttachments !== null) {
    let nativeArray = new NativeObjectArray(this._pAttachments);
    this._pAttachmentsNative = nativeArray;
    this.memoryView.setBigInt64(0x20, nativeArray.address);
  }
  
  
  if (this._blendConstants !== null) {
    let array = this._blendConstants;
    for (let ii = 0; ii < array.length; ++ii) {
      this.memoryView.setFloat32(0x28, array[ii]);
    };
  }
  
  return true;
};

VkPipelineColorBlendStateCreateInfo.byteLength = 0x38;

VkPipelineColorBlendStateCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  logicOpEnable: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  logicOp: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  attachmentCount: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  pAttachments: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
  blendConstants: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x10
  }),
});
/** VkPipelineDynamicStateCreateInfo **/
class VkPipelineDynamicStateCreateInfo {
  constructor(opts) {
    
    this._pNext = null;
    
    
    this._pDynamicStates = null;
    this.memoryBuffer = new ArrayBuffer(VkPipelineDynamicStateCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.dynamicStateCount !== void 0) this.dynamicStateCount = opts.dynamicStateCount;
      if (opts.pDynamicStates !== void 0) this.pDynamicStates = opts.pDynamicStates;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get flags() {
    return this.memoryView.getInt32(0x10);
  }
  set flags(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get dynamicStateCount() {
    return this.memoryView.getUint32(0x14);
  }
  set dynamicStateCount(value) {
    this.memoryView.setUint32(0x14, value);
  }
  get pDynamicStates() {
    return this._pDynamicStates;
  }
  set pDynamicStates(value) {
    if (value !== null && value.constructor === Int32Array) {
      this._pDynamicStates = value;
      this.memoryView.setBigInt64(0x18, getAddressFromArrayBuffer(value.buffer));
    } else if (value === null) {
      this._pDynamicStates = null;
    } else {
      throw new TypeError("Invalid type for 'VkPipelineDynamicStateCreateInfo.pDynamicStates': Expected 'Int32Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkPipelineDynamicStateCreateInfo.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPipelineDynamicStateCreateInfo.byteLength = 0x20;

VkPipelineDynamicStateCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  dynamicStateCount: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  pDynamicStates: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkStencilOpState **/
class VkStencilOpState {
  constructor(opts) {
    
    
    
    
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkStencilOpState.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.failOp !== void 0) this.failOp = opts.failOp;
      if (opts.passOp !== void 0) this.passOp = opts.passOp;
      if (opts.depthFailOp !== void 0) this.depthFailOp = opts.depthFailOp;
      if (opts.compareOp !== void 0) this.compareOp = opts.compareOp;
      if (opts.compareMask !== void 0) this.compareMask = opts.compareMask;
      if (opts.writeMask !== void 0) this.writeMask = opts.writeMask;
      if (opts.reference !== void 0) this.reference = opts.reference;
      
    }
  }
  get failOp() {
    return this.memoryView.getInt32(0x0);
  }
  set failOp(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get passOp() {
    return this.memoryView.getInt32(0x4);
  }
  set passOp(value) {
    this.memoryView.setInt32(0x4, value);
  }
  get depthFailOp() {
    return this.memoryView.getInt32(0x8);
  }
  set depthFailOp(value) {
    this.memoryView.setInt32(0x8, value);
  }
  get compareOp() {
    return this.memoryView.getInt32(0xC);
  }
  set compareOp(value) {
    this.memoryView.setInt32(0xC, value);
  }
  get compareMask() {
    return this.memoryView.getUint32(0x10);
  }
  set compareMask(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get writeMask() {
    return this.memoryView.getUint32(0x14);
  }
  set writeMask(value) {
    this.memoryView.setUint32(0x14, value);
  }
  get reference() {
    return this.memoryView.getUint32(0x18);
  }
  set reference(value) {
    this.memoryView.setUint32(0x18, value);
  }
  
};

VkStencilOpState.prototype.flush = function flush() {
  
  return true;
};

VkStencilOpState.byteLength = 0x1C;

VkStencilOpState.memoryLayout = Object.freeze({
  failOp: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  passOp: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  depthFailOp: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
  compareOp: Object.freeze({
    byteOffset: 0xC,
    byteLength: 0x4
  }),
  compareMask: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  writeMask: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  reference: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
});
/** VkPipelineDepthStencilStateCreateInfo **/
class VkPipelineDepthStencilStateCreateInfo {
  constructor(opts) {
    
    this._pNext = null;
    
    
    
    
    
    
    this._front = null;
    this._back = null;
    
    
    this.memoryBuffer = new ArrayBuffer(VkPipelineDepthStencilStateCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.depthTestEnable !== void 0) this.depthTestEnable = opts.depthTestEnable;
      if (opts.depthWriteEnable !== void 0) this.depthWriteEnable = opts.depthWriteEnable;
      if (opts.depthCompareOp !== void 0) this.depthCompareOp = opts.depthCompareOp;
      if (opts.depthBoundsTestEnable !== void 0) this.depthBoundsTestEnable = opts.depthBoundsTestEnable;
      if (opts.stencilTestEnable !== void 0) this.stencilTestEnable = opts.stencilTestEnable;
      if (opts.front !== void 0) this.front = opts.front;
      if (opts.back !== void 0) this.back = opts.back;
      if (opts.minDepthBounds !== void 0) this.minDepthBounds = opts.minDepthBounds;
      if (opts.maxDepthBounds !== void 0) this.maxDepthBounds = opts.maxDepthBounds;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get flags() {
    return this.memoryView.getInt32(0x10);
  }
  set flags(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get depthTestEnable() {
    return this.memoryView.getUint32(0x14);
  }
  set depthTestEnable(value) {
    this.memoryView.setUint32(0x14, value);
  }
  get depthWriteEnable() {
    return this.memoryView.getUint32(0x18);
  }
  set depthWriteEnable(value) {
    this.memoryView.setUint32(0x18, value);
  }
  get depthCompareOp() {
    return this.memoryView.getInt32(0x1C);
  }
  set depthCompareOp(value) {
    this.memoryView.setInt32(0x1C, value);
  }
  get depthBoundsTestEnable() {
    return this.memoryView.getUint32(0x20);
  }
  set depthBoundsTestEnable(value) {
    this.memoryView.setUint32(0x20, value);
  }
  get stencilTestEnable() {
    return this.memoryView.getUint32(0x24);
  }
  set stencilTestEnable(value) {
    this.memoryView.setUint32(0x24, value);
  }
  get front() {
    return this._front;
  }
  set front(value) {
    if (value !== null && value.constructor === VkStencilOpState) {
      value.flush();
      this._front = value;
      this.memoryView.setBigInt64(0x28, value.memoryAddress);
    } else if (value === null) {
      this._front = null;
    } else {
      throw new TypeError("Invalid type for 'VkPipelineDepthStencilStateCreateInfo.front': Expected 'VkStencilOpState' but got '" + value.constructor.name + "'");
    }
  }
  get back() {
    return this._back;
  }
  set back(value) {
    if (value !== null && value.constructor === VkStencilOpState) {
      value.flush();
      this._back = value;
      this.memoryView.setBigInt64(0x44, value.memoryAddress);
    } else if (value === null) {
      this._back = null;
    } else {
      throw new TypeError("Invalid type for 'VkPipelineDepthStencilStateCreateInfo.back': Expected 'VkStencilOpState' but got '" + value.constructor.name + "'");
    }
  }
  get minDepthBounds() {
    return this.memoryView.getFloat32(0x60);
  }
  set minDepthBounds(value) {
    this.memoryView.setFloat32(0x60, value);
  }
  get maxDepthBounds() {
    return this.memoryView.getFloat32(0x64);
  }
  set maxDepthBounds(value) {
    this.memoryView.setFloat32(0x64, value);
  }
  
};

VkPipelineDepthStencilStateCreateInfo.prototype.flush = function flush() {
  
  
  
  
  
  
  
  return true;
};

VkPipelineDepthStencilStateCreateInfo.byteLength = 0x68;

VkPipelineDepthStencilStateCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  depthTestEnable: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  depthWriteEnable: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  depthCompareOp: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  depthBoundsTestEnable: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  stencilTestEnable: Object.freeze({
    byteOffset: 0x24,
    byteLength: 0x4
  }),
  front: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x1C
  }),
  back: Object.freeze({
    byteOffset: 0x44,
    byteLength: 0x1C
  }),
  minDepthBounds: Object.freeze({
    byteOffset: 0x60,
    byteLength: 0x4
  }),
  maxDepthBounds: Object.freeze({
    byteOffset: 0x64,
    byteLength: 0x4
  }),
});
/** VkGraphicsPipelineCreateInfo **/
class VkGraphicsPipelineCreateInfo {
  constructor(opts) {
    
    this._pNext = null;
    
    
    this._pStages = null;
    this._pStagesNative = null;
    this._pVertexInputState = null;
    this._pInputAssemblyState = null;
    this._pTessellationState = null;
    this._pViewportState = null;
    this._pRasterizationState = null;
    this._pMultisampleState = null;
    this._pDepthStencilState = null;
    this._pColorBlendState = null;
    this._pDynamicState = null;
    this._layout = null;
    this._renderPass = null;
    
    this._basePipelineHandle = null;
    
    this.memoryBuffer = new ArrayBuffer(VkGraphicsPipelineCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.stageCount !== void 0) this.stageCount = opts.stageCount;
      if (opts.pStages !== void 0) this.pStages = opts.pStages;
      if (opts.pVertexInputState !== void 0) this.pVertexInputState = opts.pVertexInputState;
      if (opts.pInputAssemblyState !== void 0) this.pInputAssemblyState = opts.pInputAssemblyState;
      if (opts.pTessellationState !== void 0) this.pTessellationState = opts.pTessellationState;
      if (opts.pViewportState !== void 0) this.pViewportState = opts.pViewportState;
      if (opts.pRasterizationState !== void 0) this.pRasterizationState = opts.pRasterizationState;
      if (opts.pMultisampleState !== void 0) this.pMultisampleState = opts.pMultisampleState;
      if (opts.pDepthStencilState !== void 0) this.pDepthStencilState = opts.pDepthStencilState;
      if (opts.pColorBlendState !== void 0) this.pColorBlendState = opts.pColorBlendState;
      if (opts.pDynamicState !== void 0) this.pDynamicState = opts.pDynamicState;
      if (opts.layout !== void 0) this.layout = opts.layout;
      if (opts.renderPass !== void 0) this.renderPass = opts.renderPass;
      if (opts.subpass !== void 0) this.subpass = opts.subpass;
      if (opts.basePipelineHandle !== void 0) this.basePipelineHandle = opts.basePipelineHandle;
      if (opts.basePipelineIndex !== void 0) this.basePipelineIndex = opts.basePipelineIndex;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get flags() {
    return this.memoryView.getInt32(0x10);
  }
  set flags(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get stageCount() {
    return this.memoryView.getUint32(0x14);
  }
  set stageCount(value) {
    this.memoryView.setUint32(0x14, value);
  }
  get pStages() {
    return this._pStages;
  }
  set pStages(value) {
    if (value !== null && value.constructor === Array) {
      this._pStages = value;
    } else if (value === null) {
      this._pStages = null;
    } else {
      throw new TypeError("Invalid type for 'VkGraphicsPipelineCreateInfo.pStages': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get pVertexInputState() {
    return this._pVertexInputState;
  }
  set pVertexInputState(value) {
    if (value !== null && value.constructor === VkPipelineVertexInputStateCreateInfo) {
      value.flush();
      this._pVertexInputState = value;
      this.memoryView.setBigInt64(0x20, value.memoryAddress);
    } else if (value === null) {
      this._pVertexInputState = null;
    } else {
      throw new TypeError("Invalid type for 'VkGraphicsPipelineCreateInfo.pVertexInputState': Expected 'VkPipelineVertexInputStateCreateInfo' but got '" + value.constructor.name + "'");
    }
  }
  get pInputAssemblyState() {
    return this._pInputAssemblyState;
  }
  set pInputAssemblyState(value) {
    if (value !== null && value.constructor === VkPipelineInputAssemblyStateCreateInfo) {
      value.flush();
      this._pInputAssemblyState = value;
      this.memoryView.setBigInt64(0x28, value.memoryAddress);
    } else if (value === null) {
      this._pInputAssemblyState = null;
    } else {
      throw new TypeError("Invalid type for 'VkGraphicsPipelineCreateInfo.pInputAssemblyState': Expected 'VkPipelineInputAssemblyStateCreateInfo' but got '" + value.constructor.name + "'");
    }
  }
  get pTessellationState() {
    return this._pTessellationState;
  }
  set pTessellationState(value) {
    if (value !== null && value.constructor === VkPipelineTessellationStateCreateInfo) {
      value.flush();
      this._pTessellationState = value;
      this.memoryView.setBigInt64(0x30, value.memoryAddress);
    } else if (value === null) {
      this._pTessellationState = null;
    } else {
      throw new TypeError("Invalid type for 'VkGraphicsPipelineCreateInfo.pTessellationState': Expected 'VkPipelineTessellationStateCreateInfo' but got '" + value.constructor.name + "'");
    }
  }
  get pViewportState() {
    return this._pViewportState;
  }
  set pViewportState(value) {
    if (value !== null && value.constructor === VkPipelineViewportStateCreateInfo) {
      value.flush();
      this._pViewportState = value;
      this.memoryView.setBigInt64(0x38, value.memoryAddress);
    } else if (value === null) {
      this._pViewportState = null;
    } else {
      throw new TypeError("Invalid type for 'VkGraphicsPipelineCreateInfo.pViewportState': Expected 'VkPipelineViewportStateCreateInfo' but got '" + value.constructor.name + "'");
    }
  }
  get pRasterizationState() {
    return this._pRasterizationState;
  }
  set pRasterizationState(value) {
    if (value !== null && value.constructor === VkPipelineRasterizationStateCreateInfo) {
      value.flush();
      this._pRasterizationState = value;
      this.memoryView.setBigInt64(0x40, value.memoryAddress);
    } else if (value === null) {
      this._pRasterizationState = null;
    } else {
      throw new TypeError("Invalid type for 'VkGraphicsPipelineCreateInfo.pRasterizationState': Expected 'VkPipelineRasterizationStateCreateInfo' but got '" + value.constructor.name + "'");
    }
  }
  get pMultisampleState() {
    return this._pMultisampleState;
  }
  set pMultisampleState(value) {
    if (value !== null && value.constructor === VkPipelineMultisampleStateCreateInfo) {
      value.flush();
      this._pMultisampleState = value;
      this.memoryView.setBigInt64(0x48, value.memoryAddress);
    } else if (value === null) {
      this._pMultisampleState = null;
    } else {
      throw new TypeError("Invalid type for 'VkGraphicsPipelineCreateInfo.pMultisampleState': Expected 'VkPipelineMultisampleStateCreateInfo' but got '" + value.constructor.name + "'");
    }
  }
  get pDepthStencilState() {
    return this._pDepthStencilState;
  }
  set pDepthStencilState(value) {
    if (value !== null && value.constructor === VkPipelineDepthStencilStateCreateInfo) {
      value.flush();
      this._pDepthStencilState = value;
      this.memoryView.setBigInt64(0x50, value.memoryAddress);
    } else if (value === null) {
      this._pDepthStencilState = null;
    } else {
      throw new TypeError("Invalid type for 'VkGraphicsPipelineCreateInfo.pDepthStencilState': Expected 'VkPipelineDepthStencilStateCreateInfo' but got '" + value.constructor.name + "'");
    }
  }
  get pColorBlendState() {
    return this._pColorBlendState;
  }
  set pColorBlendState(value) {
    if (value !== null && value.constructor === VkPipelineColorBlendStateCreateInfo) {
      value.flush();
      this._pColorBlendState = value;
      this.memoryView.setBigInt64(0x58, value.memoryAddress);
    } else if (value === null) {
      this._pColorBlendState = null;
    } else {
      throw new TypeError("Invalid type for 'VkGraphicsPipelineCreateInfo.pColorBlendState': Expected 'VkPipelineColorBlendStateCreateInfo' but got '" + value.constructor.name + "'");
    }
  }
  get pDynamicState() {
    return this._pDynamicState;
  }
  set pDynamicState(value) {
    if (value !== null && value.constructor === VkPipelineDynamicStateCreateInfo) {
      value.flush();
      this._pDynamicState = value;
      this.memoryView.setBigInt64(0x60, value.memoryAddress);
    } else if (value === null) {
      this._pDynamicState = null;
    } else {
      throw new TypeError("Invalid type for 'VkGraphicsPipelineCreateInfo.pDynamicState': Expected 'VkPipelineDynamicStateCreateInfo' but got '" + value.constructor.name + "'");
    }
  }
  get layout() {
    return this._layout;
  }
  set layout(value) {
    if (value !== null && value.constructor === VkPipelineLayout) {
      value.flush();
      this._layout = value;
      this.memoryView.setBigInt64(0x68, value.memoryAddress);
    } else if (value === null) {
      this._layout = null;
    } else {
      throw new TypeError("Invalid type for 'VkGraphicsPipelineCreateInfo.layout': Expected 'VkPipelineLayout' but got '" + value.constructor.name + "'");
    }
  }
  get renderPass() {
    return this._renderPass;
  }
  set renderPass(value) {
    if (value !== null && value.constructor === VkRenderPass) {
      value.flush();
      this._renderPass = value;
      this.memoryView.setBigInt64(0x70, value.memoryAddress);
    } else if (value === null) {
      this._renderPass = null;
    } else {
      throw new TypeError("Invalid type for 'VkGraphicsPipelineCreateInfo.renderPass': Expected 'VkRenderPass' but got '" + value.constructor.name + "'");
    }
  }
  get subpass() {
    return this.memoryView.getUint32(0x78);
  }
  set subpass(value) {
    this.memoryView.setUint32(0x78, value);
  }
  get basePipelineHandle() {
    return this._basePipelineHandle;
  }
  set basePipelineHandle(value) {
    if (value !== null && value.constructor === VkPipeline) {
      value.flush();
      this._basePipelineHandle = value;
      this.memoryView.setBigInt64(0x80, value.memoryAddress);
    } else if (value === null) {
      this._basePipelineHandle = null;
    } else {
      throw new TypeError("Invalid type for 'VkGraphicsPipelineCreateInfo.basePipelineHandle': Expected 'VkPipeline' but got '" + value.constructor.name + "'");
    }
  }
  get basePipelineIndex() {
    return this.memoryView.getInt32(0x88);
  }
  set basePipelineIndex(value) {
    this.memoryView.setInt32(0x88, value);
  }
  
};

VkGraphicsPipelineCreateInfo.prototype.flush = function flush() {
  
  
  
  
  if (this._pStages !== null) {
    let nativeArray = new NativeObjectArray(this._pStages);
    this._pStagesNative = nativeArray;
    this.memoryView.setBigInt64(0x18, nativeArray.address);
  }
  
  return true;
};

VkGraphicsPipelineCreateInfo.byteLength = 0x90;

VkGraphicsPipelineCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  stageCount: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  pStages: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  pVertexInputState: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
  pInputAssemblyState: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
  pTessellationState: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x8
  }),
  pViewportState: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x8
  }),
  pRasterizationState: Object.freeze({
    byteOffset: 0x40,
    byteLength: 0x8
  }),
  pMultisampleState: Object.freeze({
    byteOffset: 0x48,
    byteLength: 0x8
  }),
  pDepthStencilState: Object.freeze({
    byteOffset: 0x50,
    byteLength: 0x8
  }),
  pColorBlendState: Object.freeze({
    byteOffset: 0x58,
    byteLength: 0x8
  }),
  pDynamicState: Object.freeze({
    byteOffset: 0x60,
    byteLength: 0x8
  }),
  layout: Object.freeze({
    byteOffset: 0x68,
    byteLength: 0x8
  }),
  renderPass: Object.freeze({
    byteOffset: 0x70,
    byteLength: 0x8
  }),
  subpass: Object.freeze({
    byteOffset: 0x78,
    byteLength: 0x4
  }),
  basePipelineHandle: Object.freeze({
    byteOffset: 0x80,
    byteLength: 0x8
  }),
  basePipelineIndex: Object.freeze({
    byteOffset: 0x88,
    byteLength: 0x4
  }),
});
/** VkPipelineCacheCreateInfo **/
class VkPipelineCacheCreateInfo {
  constructor(opts) {
    
    this._pNext = null;
    
    
    this._pInitialData = null;
    this.memoryBuffer = new ArrayBuffer(VkPipelineCacheCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.initialDataSize !== void 0) this.initialDataSize = opts.initialDataSize;
      if (opts.pInitialData !== void 0) this.pInitialData = opts.pInitialData;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get flags() {
    return this.memoryView.getInt32(0x10);
  }
  set flags(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get initialDataSize() {
    return this.memoryView.getBigInt64(0x18);
  }
  set initialDataSize(value) {
    this.memoryView.setBigInt64(0x18, value);
  }
  get pInitialData() {
    return this._pInitialData;
  }
  set pInitialData(value) {
    if (value !== null && value.constructor === ArrayBuffer) {
      this._pInitialData = value;
      this.memoryView.setBigInt64(0x20, getAddressFromArrayBuffer(value.buffer));
    } else if (value === null) {
      this._pInitialData = null;
    } else {
      throw new TypeError("Invalid type for 'VkPipelineCacheCreateInfo.pInitialData': Expected 'ArrayBuffer' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkPipelineCacheCreateInfo.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPipelineCacheCreateInfo.byteLength = 0x28;

VkPipelineCacheCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  initialDataSize: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  pInitialData: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
});
/** VkPushConstantRange **/
class VkPushConstantRange {
  constructor(opts) {
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkPushConstantRange.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.stageFlags !== void 0) this.stageFlags = opts.stageFlags;
      if (opts.offset !== void 0) this.offset = opts.offset;
      if (opts.size !== void 0) this.size = opts.size;
      
    }
  }
  get stageFlags() {
    return this.memoryView.getInt32(0x0);
  }
  set stageFlags(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get offset() {
    return this.memoryView.getUint32(0x4);
  }
  set offset(value) {
    this.memoryView.setUint32(0x4, value);
  }
  get size() {
    return this.memoryView.getUint32(0x8);
  }
  set size(value) {
    this.memoryView.setUint32(0x8, value);
  }
  
};

VkPushConstantRange.prototype.flush = function flush() {
  
  return true;
};

VkPushConstantRange.byteLength = 0xC;

VkPushConstantRange.memoryLayout = Object.freeze({
  stageFlags: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  offset: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  size: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
});
/** VkPipelineLayoutCreateInfo **/
class VkPipelineLayoutCreateInfo {
  constructor(opts) {
    
    this._pNext = null;
    
    
    this._pSetLayouts = null;
    this._pSetLayoutsNative = null;
    
    this._pPushConstantRanges = null;
    this._pPushConstantRangesNative = null;
    this.memoryBuffer = new ArrayBuffer(VkPipelineLayoutCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.setLayoutCount !== void 0) this.setLayoutCount = opts.setLayoutCount;
      if (opts.pSetLayouts !== void 0) this.pSetLayouts = opts.pSetLayouts;
      if (opts.pushConstantRangeCount !== void 0) this.pushConstantRangeCount = opts.pushConstantRangeCount;
      if (opts.pPushConstantRanges !== void 0) this.pPushConstantRanges = opts.pPushConstantRanges;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get flags() {
    return this.memoryView.getInt32(0x10);
  }
  set flags(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get setLayoutCount() {
    return this.memoryView.getUint32(0x14);
  }
  set setLayoutCount(value) {
    this.memoryView.setUint32(0x14, value);
  }
  get pSetLayouts() {
    return this._pSetLayouts;
  }
  set pSetLayouts(value) {
    if (value !== null && value.constructor === Array) {
      this._pSetLayouts = value;
    } else if (value === null) {
      this._pSetLayouts = null;
    } else {
      throw new TypeError("Invalid type for 'VkPipelineLayoutCreateInfo.pSetLayouts': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get pushConstantRangeCount() {
    return this.memoryView.getUint32(0x20);
  }
  set pushConstantRangeCount(value) {
    this.memoryView.setUint32(0x20, value);
  }
  get pPushConstantRanges() {
    return this._pPushConstantRanges;
  }
  set pPushConstantRanges(value) {
    if (value !== null && value.constructor === Array) {
      this._pPushConstantRanges = value;
    } else if (value === null) {
      this._pPushConstantRanges = null;
    } else {
      throw new TypeError("Invalid type for 'VkPipelineLayoutCreateInfo.pPushConstantRanges': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkPipelineLayoutCreateInfo.prototype.flush = function flush() {
  
  
  
  
  if (this._pSetLayouts !== null) {
    let nativeArray = new NativeObjectArray(this._pSetLayouts);
    this._pSetLayoutsNative = nativeArray;
    this.memoryView.setBigInt64(0x18, nativeArray.address);
  }
  
  
  if (this._pPushConstantRanges !== null) {
    let nativeArray = new NativeObjectArray(this._pPushConstantRanges);
    this._pPushConstantRangesNative = nativeArray;
    this.memoryView.setBigInt64(0x28, nativeArray.address);
  }
  
  return true;
};

VkPipelineLayoutCreateInfo.byteLength = 0x30;

VkPipelineLayoutCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  setLayoutCount: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  pSetLayouts: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  pushConstantRangeCount: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  pPushConstantRanges: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
});
/** VkSamplerCreateInfo **/
class VkSamplerCreateInfo {
  constructor(opts) {
    
    this._pNext = null;
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkSamplerCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.magFilter !== void 0) this.magFilter = opts.magFilter;
      if (opts.minFilter !== void 0) this.minFilter = opts.minFilter;
      if (opts.mipmapMode !== void 0) this.mipmapMode = opts.mipmapMode;
      if (opts.addressModeU !== void 0) this.addressModeU = opts.addressModeU;
      if (opts.addressModeV !== void 0) this.addressModeV = opts.addressModeV;
      if (opts.addressModeW !== void 0) this.addressModeW = opts.addressModeW;
      if (opts.mipLodBias !== void 0) this.mipLodBias = opts.mipLodBias;
      if (opts.anisotropyEnable !== void 0) this.anisotropyEnable = opts.anisotropyEnable;
      if (opts.maxAnisotropy !== void 0) this.maxAnisotropy = opts.maxAnisotropy;
      if (opts.compareEnable !== void 0) this.compareEnable = opts.compareEnable;
      if (opts.compareOp !== void 0) this.compareOp = opts.compareOp;
      if (opts.minLod !== void 0) this.minLod = opts.minLod;
      if (opts.maxLod !== void 0) this.maxLod = opts.maxLod;
      if (opts.borderColor !== void 0) this.borderColor = opts.borderColor;
      if (opts.unnormalizedCoordinates !== void 0) this.unnormalizedCoordinates = opts.unnormalizedCoordinates;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get flags() {
    return this.memoryView.getInt32(0x10);
  }
  set flags(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get magFilter() {
    return this.memoryView.getInt32(0x14);
  }
  set magFilter(value) {
    this.memoryView.setInt32(0x14, value);
  }
  get minFilter() {
    return this.memoryView.getInt32(0x18);
  }
  set minFilter(value) {
    this.memoryView.setInt32(0x18, value);
  }
  get mipmapMode() {
    return this.memoryView.getInt32(0x1C);
  }
  set mipmapMode(value) {
    this.memoryView.setInt32(0x1C, value);
  }
  get addressModeU() {
    return this.memoryView.getInt32(0x20);
  }
  set addressModeU(value) {
    this.memoryView.setInt32(0x20, value);
  }
  get addressModeV() {
    return this.memoryView.getInt32(0x24);
  }
  set addressModeV(value) {
    this.memoryView.setInt32(0x24, value);
  }
  get addressModeW() {
    return this.memoryView.getInt32(0x28);
  }
  set addressModeW(value) {
    this.memoryView.setInt32(0x28, value);
  }
  get mipLodBias() {
    return this.memoryView.getFloat32(0x2C);
  }
  set mipLodBias(value) {
    this.memoryView.setFloat32(0x2C, value);
  }
  get anisotropyEnable() {
    return this.memoryView.getUint32(0x30);
  }
  set anisotropyEnable(value) {
    this.memoryView.setUint32(0x30, value);
  }
  get maxAnisotropy() {
    return this.memoryView.getFloat32(0x34);
  }
  set maxAnisotropy(value) {
    this.memoryView.setFloat32(0x34, value);
  }
  get compareEnable() {
    return this.memoryView.getUint32(0x38);
  }
  set compareEnable(value) {
    this.memoryView.setUint32(0x38, value);
  }
  get compareOp() {
    return this.memoryView.getInt32(0x3C);
  }
  set compareOp(value) {
    this.memoryView.setInt32(0x3C, value);
  }
  get minLod() {
    return this.memoryView.getFloat32(0x40);
  }
  set minLod(value) {
    this.memoryView.setFloat32(0x40, value);
  }
  get maxLod() {
    return this.memoryView.getFloat32(0x44);
  }
  set maxLod(value) {
    this.memoryView.setFloat32(0x44, value);
  }
  get borderColor() {
    return this.memoryView.getInt32(0x48);
  }
  set borderColor(value) {
    this.memoryView.setInt32(0x48, value);
  }
  get unnormalizedCoordinates() {
    return this.memoryView.getUint32(0x4C);
  }
  set unnormalizedCoordinates(value) {
    this.memoryView.setUint32(0x4C, value);
  }
  
};

VkSamplerCreateInfo.prototype.flush = function flush() {
  
  
  
  return true;
};

VkSamplerCreateInfo.byteLength = 0x50;

VkSamplerCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  magFilter: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  minFilter: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  mipmapMode: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  addressModeU: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  addressModeV: Object.freeze({
    byteOffset: 0x24,
    byteLength: 0x4
  }),
  addressModeW: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x4
  }),
  mipLodBias: Object.freeze({
    byteOffset: 0x2C,
    byteLength: 0x4
  }),
  anisotropyEnable: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  maxAnisotropy: Object.freeze({
    byteOffset: 0x34,
    byteLength: 0x4
  }),
  compareEnable: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x4
  }),
  compareOp: Object.freeze({
    byteOffset: 0x3C,
    byteLength: 0x4
  }),
  minLod: Object.freeze({
    byteOffset: 0x40,
    byteLength: 0x4
  }),
  maxLod: Object.freeze({
    byteOffset: 0x44,
    byteLength: 0x4
  }),
  borderColor: Object.freeze({
    byteOffset: 0x48,
    byteLength: 0x4
  }),
  unnormalizedCoordinates: Object.freeze({
    byteOffset: 0x4C,
    byteLength: 0x4
  }),
});
/** VkCommandPoolCreateInfo **/
class VkCommandPoolCreateInfo {
  constructor(opts) {
    
    this._pNext = null;
    
    
    this.memoryBuffer = new ArrayBuffer(VkCommandPoolCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.queueFamilyIndex !== void 0) this.queueFamilyIndex = opts.queueFamilyIndex;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get flags() {
    return this.memoryView.getInt32(0x10);
  }
  set flags(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get queueFamilyIndex() {
    return this.memoryView.getUint32(0x14);
  }
  set queueFamilyIndex(value) {
    this.memoryView.setUint32(0x14, value);
  }
  
};

VkCommandPoolCreateInfo.prototype.flush = function flush() {
  
  
  
  return true;
};

VkCommandPoolCreateInfo.byteLength = 0x18;

VkCommandPoolCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  queueFamilyIndex: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
});
/** VkCommandBufferAllocateInfo **/
class VkCommandBufferAllocateInfo {
  constructor(opts) {
    
    this._pNext = null;
    this._commandPool = null;
    
    
    this.memoryBuffer = new ArrayBuffer(VkCommandBufferAllocateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.commandPool !== void 0) this.commandPool = opts.commandPool;
      if (opts.level !== void 0) this.level = opts.level;
      if (opts.commandBufferCount !== void 0) this.commandBufferCount = opts.commandBufferCount;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get commandPool() {
    return this._commandPool;
  }
  set commandPool(value) {
    if (value !== null && value.constructor === VkCommandPool) {
      value.flush();
      this._commandPool = value;
      this.memoryView.setBigInt64(0x10, value.memoryAddress);
    } else if (value === null) {
      this._commandPool = null;
    } else {
      throw new TypeError("Invalid type for 'VkCommandBufferAllocateInfo.commandPool': Expected 'VkCommandPool' but got '" + value.constructor.name + "'");
    }
  }
  get level() {
    return this.memoryView.getInt32(0x18);
  }
  set level(value) {
    this.memoryView.setInt32(0x18, value);
  }
  get commandBufferCount() {
    return this.memoryView.getUint32(0x1C);
  }
  set commandBufferCount(value) {
    this.memoryView.setUint32(0x1C, value);
  }
  
};

VkCommandBufferAllocateInfo.prototype.flush = function flush() {
  
  
  
  return true;
};

VkCommandBufferAllocateInfo.byteLength = 0x20;

VkCommandBufferAllocateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  commandPool: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  level: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  commandBufferCount: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
});
/** VkCommandBufferInheritanceInfo **/
class VkCommandBufferInheritanceInfo {
  constructor(opts) {
    
    this._pNext = null;
    this._renderPass = null;
    
    this._framebuffer = null;
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkCommandBufferInheritanceInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.renderPass !== void 0) this.renderPass = opts.renderPass;
      if (opts.subpass !== void 0) this.subpass = opts.subpass;
      if (opts.framebuffer !== void 0) this.framebuffer = opts.framebuffer;
      if (opts.occlusionQueryEnable !== void 0) this.occlusionQueryEnable = opts.occlusionQueryEnable;
      if (opts.queryFlags !== void 0) this.queryFlags = opts.queryFlags;
      if (opts.pipelineStatistics !== void 0) this.pipelineStatistics = opts.pipelineStatistics;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get renderPass() {
    return this._renderPass;
  }
  set renderPass(value) {
    if (value !== null && value.constructor === VkRenderPass) {
      value.flush();
      this._renderPass = value;
      this.memoryView.setBigInt64(0x10, value.memoryAddress);
    } else if (value === null) {
      this._renderPass = null;
    } else {
      throw new TypeError("Invalid type for 'VkCommandBufferInheritanceInfo.renderPass': Expected 'VkRenderPass' but got '" + value.constructor.name + "'");
    }
  }
  get subpass() {
    return this.memoryView.getUint32(0x18);
  }
  set subpass(value) {
    this.memoryView.setUint32(0x18, value);
  }
  get framebuffer() {
    return this._framebuffer;
  }
  set framebuffer(value) {
    if (value !== null && value.constructor === VkFramebuffer) {
      value.flush();
      this._framebuffer = value;
      this.memoryView.setBigInt64(0x20, value.memoryAddress);
    } else if (value === null) {
      this._framebuffer = null;
    } else {
      throw new TypeError("Invalid type for 'VkCommandBufferInheritanceInfo.framebuffer': Expected 'VkFramebuffer' but got '" + value.constructor.name + "'");
    }
  }
  get occlusionQueryEnable() {
    return this.memoryView.getUint32(0x28);
  }
  set occlusionQueryEnable(value) {
    this.memoryView.setUint32(0x28, value);
  }
  get queryFlags() {
    return this.memoryView.getInt32(0x2C);
  }
  set queryFlags(value) {
    this.memoryView.setInt32(0x2C, value);
  }
  get pipelineStatistics() {
    return this.memoryView.getInt32(0x30);
  }
  set pipelineStatistics(value) {
    this.memoryView.setInt32(0x30, value);
  }
  
};

VkCommandBufferInheritanceInfo.prototype.flush = function flush() {
  
  
  
  return true;
};

VkCommandBufferInheritanceInfo.byteLength = 0x38;

VkCommandBufferInheritanceInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  renderPass: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  subpass: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  framebuffer: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
  occlusionQueryEnable: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x4
  }),
  queryFlags: Object.freeze({
    byteOffset: 0x2C,
    byteLength: 0x4
  }),
  pipelineStatistics: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
});
/** VkCommandBufferBeginInfo **/
class VkCommandBufferBeginInfo {
  constructor(opts) {
    
    this._pNext = null;
    
    this._pInheritanceInfo = null;
    this.memoryBuffer = new ArrayBuffer(VkCommandBufferBeginInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.pInheritanceInfo !== void 0) this.pInheritanceInfo = opts.pInheritanceInfo;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get flags() {
    return this.memoryView.getInt32(0x10);
  }
  set flags(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get pInheritanceInfo() {
    return this._pInheritanceInfo;
  }
  set pInheritanceInfo(value) {
    if (value !== null && value.constructor === VkCommandBufferInheritanceInfo) {
      value.flush();
      this._pInheritanceInfo = value;
      this.memoryView.setBigInt64(0x18, value.memoryAddress);
    } else if (value === null) {
      this._pInheritanceInfo = null;
    } else {
      throw new TypeError("Invalid type for 'VkCommandBufferBeginInfo.pInheritanceInfo': Expected 'VkCommandBufferInheritanceInfo' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkCommandBufferBeginInfo.prototype.flush = function flush() {
  
  
  
  return true;
};

VkCommandBufferBeginInfo.byteLength = 0x20;

VkCommandBufferBeginInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pInheritanceInfo: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkRenderPassBeginInfo **/
class VkRenderPassBeginInfo {
  constructor(opts) {
    
    this._pNext = null;
    this._renderPass = null;
    this._framebuffer = null;
    this._renderArea = null;
    
    this._pClearValues = null;
    this._pClearValuesNative = null;
    this.memoryBuffer = new ArrayBuffer(VkRenderPassBeginInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.renderPass !== void 0) this.renderPass = opts.renderPass;
      if (opts.framebuffer !== void 0) this.framebuffer = opts.framebuffer;
      if (opts.renderArea !== void 0) this.renderArea = opts.renderArea;
      if (opts.clearValueCount !== void 0) this.clearValueCount = opts.clearValueCount;
      if (opts.pClearValues !== void 0) this.pClearValues = opts.pClearValues;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get renderPass() {
    return this._renderPass;
  }
  set renderPass(value) {
    if (value !== null && value.constructor === VkRenderPass) {
      value.flush();
      this._renderPass = value;
      this.memoryView.setBigInt64(0x10, value.memoryAddress);
    } else if (value === null) {
      this._renderPass = null;
    } else {
      throw new TypeError("Invalid type for 'VkRenderPassBeginInfo.renderPass': Expected 'VkRenderPass' but got '" + value.constructor.name + "'");
    }
  }
  get framebuffer() {
    return this._framebuffer;
  }
  set framebuffer(value) {
    if (value !== null && value.constructor === VkFramebuffer) {
      value.flush();
      this._framebuffer = value;
      this.memoryView.setBigInt64(0x18, value.memoryAddress);
    } else if (value === null) {
      this._framebuffer = null;
    } else {
      throw new TypeError("Invalid type for 'VkRenderPassBeginInfo.framebuffer': Expected 'VkFramebuffer' but got '" + value.constructor.name + "'");
    }
  }
  get renderArea() {
    return this._renderArea;
  }
  set renderArea(value) {
    if (value !== null && value.constructor === VkRect2D) {
      value.flush();
      this._renderArea = value;
      this.memoryView.setBigInt64(0x20, value.memoryAddress);
    } else if (value === null) {
      this._renderArea = null;
    } else {
      throw new TypeError("Invalid type for 'VkRenderPassBeginInfo.renderArea': Expected 'VkRect2D' but got '" + value.constructor.name + "'");
    }
  }
  get clearValueCount() {
    return this.memoryView.getUint32(0x30);
  }
  set clearValueCount(value) {
    this.memoryView.setUint32(0x30, value);
  }
  get pClearValues() {
    return this._pClearValues;
  }
  set pClearValues(value) {
    if (value !== null && value.constructor === Array) {
      this._pClearValues = value;
    } else if (value === null) {
      this._pClearValues = null;
    } else {
      throw new TypeError("Invalid type for 'VkRenderPassBeginInfo.pClearValues': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkRenderPassBeginInfo.prototype.flush = function flush() {
  
  
  
  
  
  
  if (this._pClearValues !== null) {
    let nativeArray = new NativeObjectArray(this._pClearValues);
    this._pClearValuesNative = nativeArray;
    this.memoryView.setBigInt64(0x38, nativeArray.address);
  }
  
  return true;
};

VkRenderPassBeginInfo.byteLength = 0x40;

VkRenderPassBeginInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  renderPass: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  framebuffer: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  renderArea: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x10
  }),
  clearValueCount: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  pClearValues: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x8
  }),
});
/** VkClearDepthStencilValue **/
class VkClearDepthStencilValue {
  constructor(opts) {
    
    
    this.memoryBuffer = new ArrayBuffer(VkClearDepthStencilValue.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.depth !== void 0) this.depth = opts.depth;
      if (opts.stencil !== void 0) this.stencil = opts.stencil;
      
    }
  }
  get depth() {
    return this.memoryView.getFloat32(0x0);
  }
  set depth(value) {
    this.memoryView.setFloat32(0x0, value);
  }
  get stencil() {
    return this.memoryView.getUint32(0x4);
  }
  set stencil(value) {
    this.memoryView.setUint32(0x4, value);
  }
  
};

VkClearDepthStencilValue.prototype.flush = function flush() {
  
  return true;
};

VkClearDepthStencilValue.byteLength = 0x8;

VkClearDepthStencilValue.memoryLayout = Object.freeze({
  depth: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  stencil: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
});
/** VkClearAttachment **/
class VkClearAttachment {
  constructor(opts) {
    
    
    this._clearValue = null;
    this.memoryBuffer = new ArrayBuffer(VkClearAttachment.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.aspectMask !== void 0) this.aspectMask = opts.aspectMask;
      if (opts.colorAttachment !== void 0) this.colorAttachment = opts.colorAttachment;
      if (opts.clearValue !== void 0) this.clearValue = opts.clearValue;
      
    }
  }
  get aspectMask() {
    return this.memoryView.getInt32(0x0);
  }
  set aspectMask(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get colorAttachment() {
    return this.memoryView.getUint32(0x4);
  }
  set colorAttachment(value) {
    this.memoryView.setUint32(0x4, value);
  }
  get clearValue() {
    return this._clearValue;
  }
  set clearValue(value) {
    if (value !== null && value.constructor === VkClearValue) {
      value.flush();
      this._clearValue = value;
      this.memoryView.setBigInt64(0x8, value.memoryAddress);
    } else if (value === null) {
      this._clearValue = null;
    } else {
      throw new TypeError("Invalid type for 'VkClearAttachment.clearValue': Expected 'VkClearValue' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkClearAttachment.prototype.flush = function flush() {
  
  
  
  return true;
};

VkClearAttachment.byteLength = 0x18;

VkClearAttachment.memoryLayout = Object.freeze({
  aspectMask: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  colorAttachment: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  clearValue: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x10
  }),
});
/** VkAttachmentDescription **/
class VkAttachmentDescription {
  constructor(opts) {
    
    
    
    
    
    
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkAttachmentDescription.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.format !== void 0) this.format = opts.format;
      if (opts.samples !== void 0) this.samples = opts.samples;
      if (opts.loadOp !== void 0) this.loadOp = opts.loadOp;
      if (opts.storeOp !== void 0) this.storeOp = opts.storeOp;
      if (opts.stencilLoadOp !== void 0) this.stencilLoadOp = opts.stencilLoadOp;
      if (opts.stencilStoreOp !== void 0) this.stencilStoreOp = opts.stencilStoreOp;
      if (opts.initialLayout !== void 0) this.initialLayout = opts.initialLayout;
      if (opts.finalLayout !== void 0) this.finalLayout = opts.finalLayout;
      
    }
  }
  get flags() {
    return this.memoryView.getInt32(0x0);
  }
  set flags(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get format() {
    return this.memoryView.getInt32(0x4);
  }
  set format(value) {
    this.memoryView.setInt32(0x4, value);
  }
  get samples() {
    return this.memoryView.getInt32(0x8);
  }
  set samples(value) {
    this.memoryView.setInt32(0x8, value);
  }
  get loadOp() {
    return this.memoryView.getInt32(0xC);
  }
  set loadOp(value) {
    this.memoryView.setInt32(0xC, value);
  }
  get storeOp() {
    return this.memoryView.getInt32(0x10);
  }
  set storeOp(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get stencilLoadOp() {
    return this.memoryView.getInt32(0x14);
  }
  set stencilLoadOp(value) {
    this.memoryView.setInt32(0x14, value);
  }
  get stencilStoreOp() {
    return this.memoryView.getInt32(0x18);
  }
  set stencilStoreOp(value) {
    this.memoryView.setInt32(0x18, value);
  }
  get initialLayout() {
    return this.memoryView.getInt32(0x1C);
  }
  set initialLayout(value) {
    this.memoryView.setInt32(0x1C, value);
  }
  get finalLayout() {
    return this.memoryView.getInt32(0x20);
  }
  set finalLayout(value) {
    this.memoryView.setInt32(0x20, value);
  }
  
};

VkAttachmentDescription.prototype.flush = function flush() {
  
  return true;
};

VkAttachmentDescription.byteLength = 0x24;

VkAttachmentDescription.memoryLayout = Object.freeze({
  flags: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  format: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  samples: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
  loadOp: Object.freeze({
    byteOffset: 0xC,
    byteLength: 0x4
  }),
  storeOp: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  stencilLoadOp: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  stencilStoreOp: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  initialLayout: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  finalLayout: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
});
/** VkAttachmentReference **/
class VkAttachmentReference {
  constructor(opts) {
    
    
    this.memoryBuffer = new ArrayBuffer(VkAttachmentReference.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.attachment !== void 0) this.attachment = opts.attachment;
      if (opts.layout !== void 0) this.layout = opts.layout;
      
    }
  }
  get attachment() {
    return this.memoryView.getUint32(0x0);
  }
  set attachment(value) {
    this.memoryView.setUint32(0x0, value);
  }
  get layout() {
    return this.memoryView.getInt32(0x4);
  }
  set layout(value) {
    this.memoryView.setInt32(0x4, value);
  }
  
};

VkAttachmentReference.prototype.flush = function flush() {
  
  return true;
};

VkAttachmentReference.byteLength = 0x8;

VkAttachmentReference.memoryLayout = Object.freeze({
  attachment: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  layout: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
});
/** VkSubpassDescription **/
class VkSubpassDescription {
  constructor(opts) {
    
    
    
    this._pInputAttachments = null;
    this._pInputAttachmentsNative = null;
    
    this._pColorAttachments = null;
    this._pColorAttachmentsNative = null;
    this._pResolveAttachments = null;
    this._pResolveAttachmentsNative = null;
    this._pDepthStencilAttachment = null;
    
    this._pPreserveAttachments = null;
    this.memoryBuffer = new ArrayBuffer(VkSubpassDescription.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.pipelineBindPoint !== void 0) this.pipelineBindPoint = opts.pipelineBindPoint;
      if (opts.inputAttachmentCount !== void 0) this.inputAttachmentCount = opts.inputAttachmentCount;
      if (opts.pInputAttachments !== void 0) this.pInputAttachments = opts.pInputAttachments;
      if (opts.colorAttachmentCount !== void 0) this.colorAttachmentCount = opts.colorAttachmentCount;
      if (opts.pColorAttachments !== void 0) this.pColorAttachments = opts.pColorAttachments;
      if (opts.pResolveAttachments !== void 0) this.pResolveAttachments = opts.pResolveAttachments;
      if (opts.pDepthStencilAttachment !== void 0) this.pDepthStencilAttachment = opts.pDepthStencilAttachment;
      if (opts.preserveAttachmentCount !== void 0) this.preserveAttachmentCount = opts.preserveAttachmentCount;
      if (opts.pPreserveAttachments !== void 0) this.pPreserveAttachments = opts.pPreserveAttachments;
      
    }
  }
  get flags() {
    return this.memoryView.getInt32(0x0);
  }
  set flags(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pipelineBindPoint() {
    return this.memoryView.getInt32(0x4);
  }
  set pipelineBindPoint(value) {
    this.memoryView.setInt32(0x4, value);
  }
  get inputAttachmentCount() {
    return this.memoryView.getUint32(0x8);
  }
  set inputAttachmentCount(value) {
    this.memoryView.setUint32(0x8, value);
  }
  get pInputAttachments() {
    return this._pInputAttachments;
  }
  set pInputAttachments(value) {
    if (value !== null && value.constructor === Array) {
      this._pInputAttachments = value;
    } else if (value === null) {
      this._pInputAttachments = null;
    } else {
      throw new TypeError("Invalid type for 'VkSubpassDescription.pInputAttachments': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get colorAttachmentCount() {
    return this.memoryView.getUint32(0x18);
  }
  set colorAttachmentCount(value) {
    this.memoryView.setUint32(0x18, value);
  }
  get pColorAttachments() {
    return this._pColorAttachments;
  }
  set pColorAttachments(value) {
    if (value !== null && value.constructor === Array) {
      this._pColorAttachments = value;
    } else if (value === null) {
      this._pColorAttachments = null;
    } else {
      throw new TypeError("Invalid type for 'VkSubpassDescription.pColorAttachments': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get pResolveAttachments() {
    return this._pResolveAttachments;
  }
  set pResolveAttachments(value) {
    if (value !== null && value.constructor === Array) {
      this._pResolveAttachments = value;
    } else if (value === null) {
      this._pResolveAttachments = null;
    } else {
      throw new TypeError("Invalid type for 'VkSubpassDescription.pResolveAttachments': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get pDepthStencilAttachment() {
    return this._pDepthStencilAttachment;
  }
  set pDepthStencilAttachment(value) {
    if (value !== null && value.constructor === VkAttachmentReference) {
      value.flush();
      this._pDepthStencilAttachment = value;
      this.memoryView.setBigInt64(0x30, value.memoryAddress);
    } else if (value === null) {
      this._pDepthStencilAttachment = null;
    } else {
      throw new TypeError("Invalid type for 'VkSubpassDescription.pDepthStencilAttachment': Expected 'VkAttachmentReference' but got '" + value.constructor.name + "'");
    }
  }
  get preserveAttachmentCount() {
    return this.memoryView.getUint32(0x38);
  }
  set preserveAttachmentCount(value) {
    this.memoryView.setUint32(0x38, value);
  }
  get pPreserveAttachments() {
    return this._pPreserveAttachments;
  }
  set pPreserveAttachments(value) {
    if (value !== null && value.constructor === Uint32Array) {
      this._pPreserveAttachments = value;
      this.memoryView.setBigInt64(0x40, getAddressFromArrayBuffer(value.buffer));
    } else if (value === null) {
      this._pPreserveAttachments = null;
    } else {
      throw new TypeError("Invalid type for 'VkSubpassDescription.pPreserveAttachments': Expected 'Uint32Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkSubpassDescription.prototype.flush = function flush() {
  
  
  if (this._pInputAttachments !== null) {
    let nativeArray = new NativeObjectArray(this._pInputAttachments);
    this._pInputAttachmentsNative = nativeArray;
    this.memoryView.setBigInt64(0x10, nativeArray.address);
  }
  
  
  if (this._pColorAttachments !== null) {
    let nativeArray = new NativeObjectArray(this._pColorAttachments);
    this._pColorAttachmentsNative = nativeArray;
    this.memoryView.setBigInt64(0x20, nativeArray.address);
  }
  
  
  if (this._pResolveAttachments !== null) {
    let nativeArray = new NativeObjectArray(this._pResolveAttachments);
    this._pResolveAttachmentsNative = nativeArray;
    this.memoryView.setBigInt64(0x28, nativeArray.address);
  }
  
  return true;
};

VkSubpassDescription.byteLength = 0x48;

VkSubpassDescription.memoryLayout = Object.freeze({
  flags: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pipelineBindPoint: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  inputAttachmentCount: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
  pInputAttachments: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  colorAttachmentCount: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  pColorAttachments: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
  pResolveAttachments: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
  pDepthStencilAttachment: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x8
  }),
  preserveAttachmentCount: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x4
  }),
  pPreserveAttachments: Object.freeze({
    byteOffset: 0x40,
    byteLength: 0x8
  }),
});
/** VkSubpassDependency **/
class VkSubpassDependency {
  constructor(opts) {
    
    
    
    
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkSubpassDependency.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.srcSubpass !== void 0) this.srcSubpass = opts.srcSubpass;
      if (opts.dstSubpass !== void 0) this.dstSubpass = opts.dstSubpass;
      if (opts.srcStageMask !== void 0) this.srcStageMask = opts.srcStageMask;
      if (opts.dstStageMask !== void 0) this.dstStageMask = opts.dstStageMask;
      if (opts.srcAccessMask !== void 0) this.srcAccessMask = opts.srcAccessMask;
      if (opts.dstAccessMask !== void 0) this.dstAccessMask = opts.dstAccessMask;
      if (opts.dependencyFlags !== void 0) this.dependencyFlags = opts.dependencyFlags;
      
    }
  }
  get srcSubpass() {
    return this.memoryView.getUint32(0x0);
  }
  set srcSubpass(value) {
    this.memoryView.setUint32(0x0, value);
  }
  get dstSubpass() {
    return this.memoryView.getUint32(0x4);
  }
  set dstSubpass(value) {
    this.memoryView.setUint32(0x4, value);
  }
  get srcStageMask() {
    return this.memoryView.getInt32(0x8);
  }
  set srcStageMask(value) {
    this.memoryView.setInt32(0x8, value);
  }
  get dstStageMask() {
    return this.memoryView.getInt32(0xC);
  }
  set dstStageMask(value) {
    this.memoryView.setInt32(0xC, value);
  }
  get srcAccessMask() {
    return this.memoryView.getInt32(0x10);
  }
  set srcAccessMask(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get dstAccessMask() {
    return this.memoryView.getInt32(0x14);
  }
  set dstAccessMask(value) {
    this.memoryView.setInt32(0x14, value);
  }
  get dependencyFlags() {
    return this.memoryView.getInt32(0x18);
  }
  set dependencyFlags(value) {
    this.memoryView.setInt32(0x18, value);
  }
  
};

VkSubpassDependency.prototype.flush = function flush() {
  
  return true;
};

VkSubpassDependency.byteLength = 0x1C;

VkSubpassDependency.memoryLayout = Object.freeze({
  srcSubpass: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  dstSubpass: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  srcStageMask: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
  dstStageMask: Object.freeze({
    byteOffset: 0xC,
    byteLength: 0x4
  }),
  srcAccessMask: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  dstAccessMask: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  dependencyFlags: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
});
/** VkRenderPassCreateInfo **/
class VkRenderPassCreateInfo {
  constructor(opts) {
    
    this._pNext = null;
    
    
    this._pAttachments = null;
    this._pAttachmentsNative = null;
    
    this._pSubpasses = null;
    this._pSubpassesNative = null;
    
    this._pDependencies = null;
    this._pDependenciesNative = null;
    this.memoryBuffer = new ArrayBuffer(VkRenderPassCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.attachmentCount !== void 0) this.attachmentCount = opts.attachmentCount;
      if (opts.pAttachments !== void 0) this.pAttachments = opts.pAttachments;
      if (opts.subpassCount !== void 0) this.subpassCount = opts.subpassCount;
      if (opts.pSubpasses !== void 0) this.pSubpasses = opts.pSubpasses;
      if (opts.dependencyCount !== void 0) this.dependencyCount = opts.dependencyCount;
      if (opts.pDependencies !== void 0) this.pDependencies = opts.pDependencies;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get flags() {
    return this.memoryView.getInt32(0x10);
  }
  set flags(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get attachmentCount() {
    return this.memoryView.getUint32(0x14);
  }
  set attachmentCount(value) {
    this.memoryView.setUint32(0x14, value);
  }
  get pAttachments() {
    return this._pAttachments;
  }
  set pAttachments(value) {
    if (value !== null && value.constructor === Array) {
      this._pAttachments = value;
    } else if (value === null) {
      this._pAttachments = null;
    } else {
      throw new TypeError("Invalid type for 'VkRenderPassCreateInfo.pAttachments': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get subpassCount() {
    return this.memoryView.getUint32(0x20);
  }
  set subpassCount(value) {
    this.memoryView.setUint32(0x20, value);
  }
  get pSubpasses() {
    return this._pSubpasses;
  }
  set pSubpasses(value) {
    if (value !== null && value.constructor === Array) {
      this._pSubpasses = value;
    } else if (value === null) {
      this._pSubpasses = null;
    } else {
      throw new TypeError("Invalid type for 'VkRenderPassCreateInfo.pSubpasses': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get dependencyCount() {
    return this.memoryView.getUint32(0x30);
  }
  set dependencyCount(value) {
    this.memoryView.setUint32(0x30, value);
  }
  get pDependencies() {
    return this._pDependencies;
  }
  set pDependencies(value) {
    if (value !== null && value.constructor === Array) {
      this._pDependencies = value;
    } else if (value === null) {
      this._pDependencies = null;
    } else {
      throw new TypeError("Invalid type for 'VkRenderPassCreateInfo.pDependencies': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkRenderPassCreateInfo.prototype.flush = function flush() {
  
  
  
  
  if (this._pAttachments !== null) {
    let nativeArray = new NativeObjectArray(this._pAttachments);
    this._pAttachmentsNative = nativeArray;
    this.memoryView.setBigInt64(0x18, nativeArray.address);
  }
  
  
  if (this._pSubpasses !== null) {
    let nativeArray = new NativeObjectArray(this._pSubpasses);
    this._pSubpassesNative = nativeArray;
    this.memoryView.setBigInt64(0x28, nativeArray.address);
  }
  
  
  if (this._pDependencies !== null) {
    let nativeArray = new NativeObjectArray(this._pDependencies);
    this._pDependenciesNative = nativeArray;
    this.memoryView.setBigInt64(0x38, nativeArray.address);
  }
  
  return true;
};

VkRenderPassCreateInfo.byteLength = 0x40;

VkRenderPassCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  attachmentCount: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  pAttachments: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  subpassCount: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  pSubpasses: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
  dependencyCount: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  pDependencies: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x8
  }),
});
/** VkEventCreateInfo **/
class VkEventCreateInfo {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkEventCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_EVENT_CREATE_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get flags() {
    return this.memoryView.getInt32(0x10);
  }
  set flags(value) {
    this.memoryView.setInt32(0x10, value);
  }
  
};

VkEventCreateInfo.prototype.flush = function flush() {
  
  
  
  return true;
};

VkEventCreateInfo.byteLength = 0x18;

VkEventCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkFenceCreateInfo **/
class VkFenceCreateInfo {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkFenceCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_FENCE_CREATE_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get flags() {
    return this.memoryView.getInt32(0x10);
  }
  set flags(value) {
    this.memoryView.setInt32(0x10, value);
  }
  
};

VkFenceCreateInfo.prototype.flush = function flush() {
  
  
  
  return true;
};

VkFenceCreateInfo.byteLength = 0x18;

VkFenceCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceFeatures **/
class VkPhysicalDeviceFeatures {
  constructor(opts) {
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceFeatures.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.robustBufferAccess !== void 0) this.robustBufferAccess = opts.robustBufferAccess;
      if (opts.fullDrawIndexUint32 !== void 0) this.fullDrawIndexUint32 = opts.fullDrawIndexUint32;
      if (opts.imageCubeArray !== void 0) this.imageCubeArray = opts.imageCubeArray;
      if (opts.independentBlend !== void 0) this.independentBlend = opts.independentBlend;
      if (opts.geometryShader !== void 0) this.geometryShader = opts.geometryShader;
      if (opts.tessellationShader !== void 0) this.tessellationShader = opts.tessellationShader;
      if (opts.sampleRateShading !== void 0) this.sampleRateShading = opts.sampleRateShading;
      if (opts.dualSrcBlend !== void 0) this.dualSrcBlend = opts.dualSrcBlend;
      if (opts.logicOp !== void 0) this.logicOp = opts.logicOp;
      if (opts.multiDrawIndirect !== void 0) this.multiDrawIndirect = opts.multiDrawIndirect;
      if (opts.drawIndirectFirstInstance !== void 0) this.drawIndirectFirstInstance = opts.drawIndirectFirstInstance;
      if (opts.depthClamp !== void 0) this.depthClamp = opts.depthClamp;
      if (opts.depthBiasClamp !== void 0) this.depthBiasClamp = opts.depthBiasClamp;
      if (opts.fillModeNonSolid !== void 0) this.fillModeNonSolid = opts.fillModeNonSolid;
      if (opts.depthBounds !== void 0) this.depthBounds = opts.depthBounds;
      if (opts.wideLines !== void 0) this.wideLines = opts.wideLines;
      if (opts.largePoints !== void 0) this.largePoints = opts.largePoints;
      if (opts.alphaToOne !== void 0) this.alphaToOne = opts.alphaToOne;
      if (opts.multiViewport !== void 0) this.multiViewport = opts.multiViewport;
      if (opts.samplerAnisotropy !== void 0) this.samplerAnisotropy = opts.samplerAnisotropy;
      if (opts.textureCompressionETC2 !== void 0) this.textureCompressionETC2 = opts.textureCompressionETC2;
      if (opts.textureCompressionASTC_LDR !== void 0) this.textureCompressionASTC_LDR = opts.textureCompressionASTC_LDR;
      if (opts.textureCompressionBC !== void 0) this.textureCompressionBC = opts.textureCompressionBC;
      if (opts.occlusionQueryPrecise !== void 0) this.occlusionQueryPrecise = opts.occlusionQueryPrecise;
      if (opts.pipelineStatisticsQuery !== void 0) this.pipelineStatisticsQuery = opts.pipelineStatisticsQuery;
      if (opts.vertexPipelineStoresAndAtomics !== void 0) this.vertexPipelineStoresAndAtomics = opts.vertexPipelineStoresAndAtomics;
      if (opts.fragmentStoresAndAtomics !== void 0) this.fragmentStoresAndAtomics = opts.fragmentStoresAndAtomics;
      if (opts.shaderTessellationAndGeometryPointSize !== void 0) this.shaderTessellationAndGeometryPointSize = opts.shaderTessellationAndGeometryPointSize;
      if (opts.shaderImageGatherExtended !== void 0) this.shaderImageGatherExtended = opts.shaderImageGatherExtended;
      if (opts.shaderStorageImageExtendedFormats !== void 0) this.shaderStorageImageExtendedFormats = opts.shaderStorageImageExtendedFormats;
      if (opts.shaderStorageImageMultisample !== void 0) this.shaderStorageImageMultisample = opts.shaderStorageImageMultisample;
      if (opts.shaderStorageImageReadWithoutFormat !== void 0) this.shaderStorageImageReadWithoutFormat = opts.shaderStorageImageReadWithoutFormat;
      if (opts.shaderStorageImageWriteWithoutFormat !== void 0) this.shaderStorageImageWriteWithoutFormat = opts.shaderStorageImageWriteWithoutFormat;
      if (opts.shaderUniformBufferArrayDynamicIndexing !== void 0) this.shaderUniformBufferArrayDynamicIndexing = opts.shaderUniformBufferArrayDynamicIndexing;
      if (opts.shaderSampledImageArrayDynamicIndexing !== void 0) this.shaderSampledImageArrayDynamicIndexing = opts.shaderSampledImageArrayDynamicIndexing;
      if (opts.shaderStorageBufferArrayDynamicIndexing !== void 0) this.shaderStorageBufferArrayDynamicIndexing = opts.shaderStorageBufferArrayDynamicIndexing;
      if (opts.shaderStorageImageArrayDynamicIndexing !== void 0) this.shaderStorageImageArrayDynamicIndexing = opts.shaderStorageImageArrayDynamicIndexing;
      if (opts.shaderClipDistance !== void 0) this.shaderClipDistance = opts.shaderClipDistance;
      if (opts.shaderCullDistance !== void 0) this.shaderCullDistance = opts.shaderCullDistance;
      if (opts.shaderFloat64 !== void 0) this.shaderFloat64 = opts.shaderFloat64;
      if (opts.shaderInt64 !== void 0) this.shaderInt64 = opts.shaderInt64;
      if (opts.shaderInt16 !== void 0) this.shaderInt16 = opts.shaderInt16;
      if (opts.shaderResourceResidency !== void 0) this.shaderResourceResidency = opts.shaderResourceResidency;
      if (opts.shaderResourceMinLod !== void 0) this.shaderResourceMinLod = opts.shaderResourceMinLod;
      if (opts.sparseBinding !== void 0) this.sparseBinding = opts.sparseBinding;
      if (opts.sparseResidencyBuffer !== void 0) this.sparseResidencyBuffer = opts.sparseResidencyBuffer;
      if (opts.sparseResidencyImage2D !== void 0) this.sparseResidencyImage2D = opts.sparseResidencyImage2D;
      if (opts.sparseResidencyImage3D !== void 0) this.sparseResidencyImage3D = opts.sparseResidencyImage3D;
      if (opts.sparseResidency2Samples !== void 0) this.sparseResidency2Samples = opts.sparseResidency2Samples;
      if (opts.sparseResidency4Samples !== void 0) this.sparseResidency4Samples = opts.sparseResidency4Samples;
      if (opts.sparseResidency8Samples !== void 0) this.sparseResidency8Samples = opts.sparseResidency8Samples;
      if (opts.sparseResidency16Samples !== void 0) this.sparseResidency16Samples = opts.sparseResidency16Samples;
      if (opts.sparseResidencyAliased !== void 0) this.sparseResidencyAliased = opts.sparseResidencyAliased;
      if (opts.variableMultisampleRate !== void 0) this.variableMultisampleRate = opts.variableMultisampleRate;
      if (opts.inheritedQueries !== void 0) this.inheritedQueries = opts.inheritedQueries;
      
    }
  }
  get robustBufferAccess() {
    return this.memoryView.getUint32(0x0);
  }
  set robustBufferAccess(value) {
    this.memoryView.setUint32(0x0, value);
  }
  get fullDrawIndexUint32() {
    return this.memoryView.getUint32(0x4);
  }
  set fullDrawIndexUint32(value) {
    this.memoryView.setUint32(0x4, value);
  }
  get imageCubeArray() {
    return this.memoryView.getUint32(0x8);
  }
  set imageCubeArray(value) {
    this.memoryView.setUint32(0x8, value);
  }
  get independentBlend() {
    return this.memoryView.getUint32(0xC);
  }
  set independentBlend(value) {
    this.memoryView.setUint32(0xC, value);
  }
  get geometryShader() {
    return this.memoryView.getUint32(0x10);
  }
  set geometryShader(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get tessellationShader() {
    return this.memoryView.getUint32(0x14);
  }
  set tessellationShader(value) {
    this.memoryView.setUint32(0x14, value);
  }
  get sampleRateShading() {
    return this.memoryView.getUint32(0x18);
  }
  set sampleRateShading(value) {
    this.memoryView.setUint32(0x18, value);
  }
  get dualSrcBlend() {
    return this.memoryView.getUint32(0x1C);
  }
  set dualSrcBlend(value) {
    this.memoryView.setUint32(0x1C, value);
  }
  get logicOp() {
    return this.memoryView.getUint32(0x20);
  }
  set logicOp(value) {
    this.memoryView.setUint32(0x20, value);
  }
  get multiDrawIndirect() {
    return this.memoryView.getUint32(0x24);
  }
  set multiDrawIndirect(value) {
    this.memoryView.setUint32(0x24, value);
  }
  get drawIndirectFirstInstance() {
    return this.memoryView.getUint32(0x28);
  }
  set drawIndirectFirstInstance(value) {
    this.memoryView.setUint32(0x28, value);
  }
  get depthClamp() {
    return this.memoryView.getUint32(0x2C);
  }
  set depthClamp(value) {
    this.memoryView.setUint32(0x2C, value);
  }
  get depthBiasClamp() {
    return this.memoryView.getUint32(0x30);
  }
  set depthBiasClamp(value) {
    this.memoryView.setUint32(0x30, value);
  }
  get fillModeNonSolid() {
    return this.memoryView.getUint32(0x34);
  }
  set fillModeNonSolid(value) {
    this.memoryView.setUint32(0x34, value);
  }
  get depthBounds() {
    return this.memoryView.getUint32(0x38);
  }
  set depthBounds(value) {
    this.memoryView.setUint32(0x38, value);
  }
  get wideLines() {
    return this.memoryView.getUint32(0x3C);
  }
  set wideLines(value) {
    this.memoryView.setUint32(0x3C, value);
  }
  get largePoints() {
    return this.memoryView.getUint32(0x40);
  }
  set largePoints(value) {
    this.memoryView.setUint32(0x40, value);
  }
  get alphaToOne() {
    return this.memoryView.getUint32(0x44);
  }
  set alphaToOne(value) {
    this.memoryView.setUint32(0x44, value);
  }
  get multiViewport() {
    return this.memoryView.getUint32(0x48);
  }
  set multiViewport(value) {
    this.memoryView.setUint32(0x48, value);
  }
  get samplerAnisotropy() {
    return this.memoryView.getUint32(0x4C);
  }
  set samplerAnisotropy(value) {
    this.memoryView.setUint32(0x4C, value);
  }
  get textureCompressionETC2() {
    return this.memoryView.getUint32(0x50);
  }
  set textureCompressionETC2(value) {
    this.memoryView.setUint32(0x50, value);
  }
  get textureCompressionASTC_LDR() {
    return this.memoryView.getUint32(0x54);
  }
  set textureCompressionASTC_LDR(value) {
    this.memoryView.setUint32(0x54, value);
  }
  get textureCompressionBC() {
    return this.memoryView.getUint32(0x58);
  }
  set textureCompressionBC(value) {
    this.memoryView.setUint32(0x58, value);
  }
  get occlusionQueryPrecise() {
    return this.memoryView.getUint32(0x5C);
  }
  set occlusionQueryPrecise(value) {
    this.memoryView.setUint32(0x5C, value);
  }
  get pipelineStatisticsQuery() {
    return this.memoryView.getUint32(0x60);
  }
  set pipelineStatisticsQuery(value) {
    this.memoryView.setUint32(0x60, value);
  }
  get vertexPipelineStoresAndAtomics() {
    return this.memoryView.getUint32(0x64);
  }
  set vertexPipelineStoresAndAtomics(value) {
    this.memoryView.setUint32(0x64, value);
  }
  get fragmentStoresAndAtomics() {
    return this.memoryView.getUint32(0x68);
  }
  set fragmentStoresAndAtomics(value) {
    this.memoryView.setUint32(0x68, value);
  }
  get shaderTessellationAndGeometryPointSize() {
    return this.memoryView.getUint32(0x6C);
  }
  set shaderTessellationAndGeometryPointSize(value) {
    this.memoryView.setUint32(0x6C, value);
  }
  get shaderImageGatherExtended() {
    return this.memoryView.getUint32(0x70);
  }
  set shaderImageGatherExtended(value) {
    this.memoryView.setUint32(0x70, value);
  }
  get shaderStorageImageExtendedFormats() {
    return this.memoryView.getUint32(0x74);
  }
  set shaderStorageImageExtendedFormats(value) {
    this.memoryView.setUint32(0x74, value);
  }
  get shaderStorageImageMultisample() {
    return this.memoryView.getUint32(0x78);
  }
  set shaderStorageImageMultisample(value) {
    this.memoryView.setUint32(0x78, value);
  }
  get shaderStorageImageReadWithoutFormat() {
    return this.memoryView.getUint32(0x7C);
  }
  set shaderStorageImageReadWithoutFormat(value) {
    this.memoryView.setUint32(0x7C, value);
  }
  get shaderStorageImageWriteWithoutFormat() {
    return this.memoryView.getUint32(0x80);
  }
  set shaderStorageImageWriteWithoutFormat(value) {
    this.memoryView.setUint32(0x80, value);
  }
  get shaderUniformBufferArrayDynamicIndexing() {
    return this.memoryView.getUint32(0x84);
  }
  set shaderUniformBufferArrayDynamicIndexing(value) {
    this.memoryView.setUint32(0x84, value);
  }
  get shaderSampledImageArrayDynamicIndexing() {
    return this.memoryView.getUint32(0x88);
  }
  set shaderSampledImageArrayDynamicIndexing(value) {
    this.memoryView.setUint32(0x88, value);
  }
  get shaderStorageBufferArrayDynamicIndexing() {
    return this.memoryView.getUint32(0x8C);
  }
  set shaderStorageBufferArrayDynamicIndexing(value) {
    this.memoryView.setUint32(0x8C, value);
  }
  get shaderStorageImageArrayDynamicIndexing() {
    return this.memoryView.getUint32(0x90);
  }
  set shaderStorageImageArrayDynamicIndexing(value) {
    this.memoryView.setUint32(0x90, value);
  }
  get shaderClipDistance() {
    return this.memoryView.getUint32(0x94);
  }
  set shaderClipDistance(value) {
    this.memoryView.setUint32(0x94, value);
  }
  get shaderCullDistance() {
    return this.memoryView.getUint32(0x98);
  }
  set shaderCullDistance(value) {
    this.memoryView.setUint32(0x98, value);
  }
  get shaderFloat64() {
    return this.memoryView.getUint32(0x9C);
  }
  set shaderFloat64(value) {
    this.memoryView.setUint32(0x9C, value);
  }
  get shaderInt64() {
    return this.memoryView.getUint32(0xA0);
  }
  set shaderInt64(value) {
    this.memoryView.setUint32(0xA0, value);
  }
  get shaderInt16() {
    return this.memoryView.getUint32(0xA4);
  }
  set shaderInt16(value) {
    this.memoryView.setUint32(0xA4, value);
  }
  get shaderResourceResidency() {
    return this.memoryView.getUint32(0xA8);
  }
  set shaderResourceResidency(value) {
    this.memoryView.setUint32(0xA8, value);
  }
  get shaderResourceMinLod() {
    return this.memoryView.getUint32(0xAC);
  }
  set shaderResourceMinLod(value) {
    this.memoryView.setUint32(0xAC, value);
  }
  get sparseBinding() {
    return this.memoryView.getUint32(0xB0);
  }
  set sparseBinding(value) {
    this.memoryView.setUint32(0xB0, value);
  }
  get sparseResidencyBuffer() {
    return this.memoryView.getUint32(0xB4);
  }
  set sparseResidencyBuffer(value) {
    this.memoryView.setUint32(0xB4, value);
  }
  get sparseResidencyImage2D() {
    return this.memoryView.getUint32(0xB8);
  }
  set sparseResidencyImage2D(value) {
    this.memoryView.setUint32(0xB8, value);
  }
  get sparseResidencyImage3D() {
    return this.memoryView.getUint32(0xBC);
  }
  set sparseResidencyImage3D(value) {
    this.memoryView.setUint32(0xBC, value);
  }
  get sparseResidency2Samples() {
    return this.memoryView.getUint32(0xC0);
  }
  set sparseResidency2Samples(value) {
    this.memoryView.setUint32(0xC0, value);
  }
  get sparseResidency4Samples() {
    return this.memoryView.getUint32(0xC4);
  }
  set sparseResidency4Samples(value) {
    this.memoryView.setUint32(0xC4, value);
  }
  get sparseResidency8Samples() {
    return this.memoryView.getUint32(0xC8);
  }
  set sparseResidency8Samples(value) {
    this.memoryView.setUint32(0xC8, value);
  }
  get sparseResidency16Samples() {
    return this.memoryView.getUint32(0xCC);
  }
  set sparseResidency16Samples(value) {
    this.memoryView.setUint32(0xCC, value);
  }
  get sparseResidencyAliased() {
    return this.memoryView.getUint32(0xD0);
  }
  set sparseResidencyAliased(value) {
    this.memoryView.setUint32(0xD0, value);
  }
  get variableMultisampleRate() {
    return this.memoryView.getUint32(0xD4);
  }
  set variableMultisampleRate(value) {
    this.memoryView.setUint32(0xD4, value);
  }
  get inheritedQueries() {
    return this.memoryView.getUint32(0xD8);
  }
  set inheritedQueries(value) {
    this.memoryView.setUint32(0xD8, value);
  }
  
};

VkPhysicalDeviceFeatures.prototype.flush = function flush() {
  
  return true;
};

VkPhysicalDeviceFeatures.byteLength = 0xDC;

VkPhysicalDeviceFeatures.memoryLayout = Object.freeze({
  robustBufferAccess: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  fullDrawIndexUint32: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  imageCubeArray: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
  independentBlend: Object.freeze({
    byteOffset: 0xC,
    byteLength: 0x4
  }),
  geometryShader: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  tessellationShader: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  sampleRateShading: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  dualSrcBlend: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  logicOp: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  multiDrawIndirect: Object.freeze({
    byteOffset: 0x24,
    byteLength: 0x4
  }),
  drawIndirectFirstInstance: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x4
  }),
  depthClamp: Object.freeze({
    byteOffset: 0x2C,
    byteLength: 0x4
  }),
  depthBiasClamp: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  fillModeNonSolid: Object.freeze({
    byteOffset: 0x34,
    byteLength: 0x4
  }),
  depthBounds: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x4
  }),
  wideLines: Object.freeze({
    byteOffset: 0x3C,
    byteLength: 0x4
  }),
  largePoints: Object.freeze({
    byteOffset: 0x40,
    byteLength: 0x4
  }),
  alphaToOne: Object.freeze({
    byteOffset: 0x44,
    byteLength: 0x4
  }),
  multiViewport: Object.freeze({
    byteOffset: 0x48,
    byteLength: 0x4
  }),
  samplerAnisotropy: Object.freeze({
    byteOffset: 0x4C,
    byteLength: 0x4
  }),
  textureCompressionETC2: Object.freeze({
    byteOffset: 0x50,
    byteLength: 0x4
  }),
  textureCompressionASTC_LDR: Object.freeze({
    byteOffset: 0x54,
    byteLength: 0x4
  }),
  textureCompressionBC: Object.freeze({
    byteOffset: 0x58,
    byteLength: 0x4
  }),
  occlusionQueryPrecise: Object.freeze({
    byteOffset: 0x5C,
    byteLength: 0x4
  }),
  pipelineStatisticsQuery: Object.freeze({
    byteOffset: 0x60,
    byteLength: 0x4
  }),
  vertexPipelineStoresAndAtomics: Object.freeze({
    byteOffset: 0x64,
    byteLength: 0x4
  }),
  fragmentStoresAndAtomics: Object.freeze({
    byteOffset: 0x68,
    byteLength: 0x4
  }),
  shaderTessellationAndGeometryPointSize: Object.freeze({
    byteOffset: 0x6C,
    byteLength: 0x4
  }),
  shaderImageGatherExtended: Object.freeze({
    byteOffset: 0x70,
    byteLength: 0x4
  }),
  shaderStorageImageExtendedFormats: Object.freeze({
    byteOffset: 0x74,
    byteLength: 0x4
  }),
  shaderStorageImageMultisample: Object.freeze({
    byteOffset: 0x78,
    byteLength: 0x4
  }),
  shaderStorageImageReadWithoutFormat: Object.freeze({
    byteOffset: 0x7C,
    byteLength: 0x4
  }),
  shaderStorageImageWriteWithoutFormat: Object.freeze({
    byteOffset: 0x80,
    byteLength: 0x4
  }),
  shaderUniformBufferArrayDynamicIndexing: Object.freeze({
    byteOffset: 0x84,
    byteLength: 0x4
  }),
  shaderSampledImageArrayDynamicIndexing: Object.freeze({
    byteOffset: 0x88,
    byteLength: 0x4
  }),
  shaderStorageBufferArrayDynamicIndexing: Object.freeze({
    byteOffset: 0x8C,
    byteLength: 0x4
  }),
  shaderStorageImageArrayDynamicIndexing: Object.freeze({
    byteOffset: 0x90,
    byteLength: 0x4
  }),
  shaderClipDistance: Object.freeze({
    byteOffset: 0x94,
    byteLength: 0x4
  }),
  shaderCullDistance: Object.freeze({
    byteOffset: 0x98,
    byteLength: 0x4
  }),
  shaderFloat64: Object.freeze({
    byteOffset: 0x9C,
    byteLength: 0x4
  }),
  shaderInt64: Object.freeze({
    byteOffset: 0xA0,
    byteLength: 0x4
  }),
  shaderInt16: Object.freeze({
    byteOffset: 0xA4,
    byteLength: 0x4
  }),
  shaderResourceResidency: Object.freeze({
    byteOffset: 0xA8,
    byteLength: 0x4
  }),
  shaderResourceMinLod: Object.freeze({
    byteOffset: 0xAC,
    byteLength: 0x4
  }),
  sparseBinding: Object.freeze({
    byteOffset: 0xB0,
    byteLength: 0x4
  }),
  sparseResidencyBuffer: Object.freeze({
    byteOffset: 0xB4,
    byteLength: 0x4
  }),
  sparseResidencyImage2D: Object.freeze({
    byteOffset: 0xB8,
    byteLength: 0x4
  }),
  sparseResidencyImage3D: Object.freeze({
    byteOffset: 0xBC,
    byteLength: 0x4
  }),
  sparseResidency2Samples: Object.freeze({
    byteOffset: 0xC0,
    byteLength: 0x4
  }),
  sparseResidency4Samples: Object.freeze({
    byteOffset: 0xC4,
    byteLength: 0x4
  }),
  sparseResidency8Samples: Object.freeze({
    byteOffset: 0xC8,
    byteLength: 0x4
  }),
  sparseResidency16Samples: Object.freeze({
    byteOffset: 0xCC,
    byteLength: 0x4
  }),
  sparseResidencyAliased: Object.freeze({
    byteOffset: 0xD0,
    byteLength: 0x4
  }),
  variableMultisampleRate: Object.freeze({
    byteOffset: 0xD4,
    byteLength: 0x4
  }),
  inheritedQueries: Object.freeze({
    byteOffset: 0xD8,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceSparseProperties **/
class VkPhysicalDeviceSparseProperties {
  constructor(opts) {
    
    
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceSparseProperties.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      
    }
  }
  get residencyStandard2DBlockShape() {
    return this.memoryView.getUint32(0x0);
  }
  get residencyStandard2DMultisampleBlockShape() {
    return this.memoryView.getUint32(0x4);
  }
  get residencyStandard3DBlockShape() {
    return this.memoryView.getUint32(0x8);
  }
  get residencyAlignedMipSize() {
    return this.memoryView.getUint32(0xC);
  }
  get residencyNonResidentStrict() {
    return this.memoryView.getUint32(0x10);
  }
  
};

VkPhysicalDeviceSparseProperties.prototype.flush = function flush() {
  
  return true;
};

VkPhysicalDeviceSparseProperties.byteLength = 0x14;

VkPhysicalDeviceSparseProperties.memoryLayout = Object.freeze({
  residencyStandard2DBlockShape: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  residencyStandard2DMultisampleBlockShape: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  residencyStandard3DBlockShape: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
  residencyAlignedMipSize: Object.freeze({
    byteOffset: 0xC,
    byteLength: 0x4
  }),
  residencyNonResidentStrict: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceLimits **/
class VkPhysicalDeviceLimits {
  constructor(opts) {
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    this._maxComputeWorkGroupCount = null;
    
    this._maxComputeWorkGroupSize = null;
    
    
    
    
    
    
    
    
    this._maxViewportDimensions = null;
    this._viewportBoundsRange = null;
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    this._pointSizeRange = null;
    this._lineWidthRange = null;
    
    
    
    
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceLimits.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      
    }
  }
  get maxImageDimension1D() {
    return this.memoryView.getUint32(0x0);
  }
  get maxImageDimension2D() {
    return this.memoryView.getUint32(0x4);
  }
  get maxImageDimension3D() {
    return this.memoryView.getUint32(0x8);
  }
  get maxImageDimensionCube() {
    return this.memoryView.getUint32(0xC);
  }
  get maxImageArrayLayers() {
    return this.memoryView.getUint32(0x10);
  }
  get maxTexelBufferElements() {
    return this.memoryView.getUint32(0x14);
  }
  get maxUniformBufferRange() {
    return this.memoryView.getUint32(0x18);
  }
  get maxStorageBufferRange() {
    return this.memoryView.getUint32(0x1C);
  }
  get maxPushConstantsSize() {
    return this.memoryView.getUint32(0x20);
  }
  get maxMemoryAllocationCount() {
    return this.memoryView.getUint32(0x24);
  }
  get maxSamplerAllocationCount() {
    return this.memoryView.getUint32(0x28);
  }
  get bufferImageGranularity() {
    return this.memoryView.getBigUint64(0x30);
  }
  get sparseAddressSpaceSize() {
    return this.memoryView.getBigUint64(0x38);
  }
  get maxBoundDescriptorSets() {
    return this.memoryView.getUint32(0x40);
  }
  get maxPerStageDescriptorSamplers() {
    return this.memoryView.getUint32(0x44);
  }
  get maxPerStageDescriptorUniformBuffers() {
    return this.memoryView.getUint32(0x48);
  }
  get maxPerStageDescriptorStorageBuffers() {
    return this.memoryView.getUint32(0x4C);
  }
  get maxPerStageDescriptorSampledImages() {
    return this.memoryView.getUint32(0x50);
  }
  get maxPerStageDescriptorStorageImages() {
    return this.memoryView.getUint32(0x54);
  }
  get maxPerStageDescriptorInputAttachments() {
    return this.memoryView.getUint32(0x58);
  }
  get maxPerStageResources() {
    return this.memoryView.getUint32(0x5C);
  }
  get maxDescriptorSetSamplers() {
    return this.memoryView.getUint32(0x60);
  }
  get maxDescriptorSetUniformBuffers() {
    return this.memoryView.getUint32(0x64);
  }
  get maxDescriptorSetUniformBuffersDynamic() {
    return this.memoryView.getUint32(0x68);
  }
  get maxDescriptorSetStorageBuffers() {
    return this.memoryView.getUint32(0x6C);
  }
  get maxDescriptorSetStorageBuffersDynamic() {
    return this.memoryView.getUint32(0x70);
  }
  get maxDescriptorSetSampledImages() {
    return this.memoryView.getUint32(0x74);
  }
  get maxDescriptorSetStorageImages() {
    return this.memoryView.getUint32(0x78);
  }
  get maxDescriptorSetInputAttachments() {
    return this.memoryView.getUint32(0x7C);
  }
  get maxVertexInputAttributes() {
    return this.memoryView.getUint32(0x80);
  }
  get maxVertexInputBindings() {
    return this.memoryView.getUint32(0x84);
  }
  get maxVertexInputAttributeOffset() {
    return this.memoryView.getUint32(0x88);
  }
  get maxVertexInputBindingStride() {
    return this.memoryView.getUint32(0x8C);
  }
  get maxVertexOutputComponents() {
    return this.memoryView.getUint32(0x90);
  }
  get maxTessellationGenerationLevel() {
    return this.memoryView.getUint32(0x94);
  }
  get maxTessellationPatchSize() {
    return this.memoryView.getUint32(0x98);
  }
  get maxTessellationControlPerVertexInputComponents() {
    return this.memoryView.getUint32(0x9C);
  }
  get maxTessellationControlPerVertexOutputComponents() {
    return this.memoryView.getUint32(0xA0);
  }
  get maxTessellationControlPerPatchOutputComponents() {
    return this.memoryView.getUint32(0xA4);
  }
  get maxTessellationControlTotalOutputComponents() {
    return this.memoryView.getUint32(0xA8);
  }
  get maxTessellationEvaluationInputComponents() {
    return this.memoryView.getUint32(0xAC);
  }
  get maxTessellationEvaluationOutputComponents() {
    return this.memoryView.getUint32(0xB0);
  }
  get maxGeometryShaderInvocations() {
    return this.memoryView.getUint32(0xB4);
  }
  get maxGeometryInputComponents() {
    return this.memoryView.getUint32(0xB8);
  }
  get maxGeometryOutputComponents() {
    return this.memoryView.getUint32(0xBC);
  }
  get maxGeometryOutputVertices() {
    return this.memoryView.getUint32(0xC0);
  }
  get maxGeometryTotalOutputComponents() {
    return this.memoryView.getUint32(0xC4);
  }
  get maxFragmentInputComponents() {
    return this.memoryView.getUint32(0xC8);
  }
  get maxFragmentOutputAttachments() {
    return this.memoryView.getUint32(0xCC);
  }
  get maxFragmentDualSrcAttachments() {
    return this.memoryView.getUint32(0xD0);
  }
  get maxFragmentCombinedOutputResources() {
    return this.memoryView.getUint32(0xD4);
  }
  get maxComputeSharedMemorySize() {
    return this.memoryView.getUint32(0xD8);
  }
  get maxComputeWorkGroupCount() {
    return this._maxComputeWorkGroupCount;
  }
  get maxComputeWorkGroupInvocations() {
    return this.memoryView.getUint32(0xE8);
  }
  get maxComputeWorkGroupSize() {
    return this._maxComputeWorkGroupSize;
  }
  get subPixelPrecisionBits() {
    return this.memoryView.getUint32(0xF8);
  }
  get subTexelPrecisionBits() {
    return this.memoryView.getUint32(0xFC);
  }
  get mipmapPrecisionBits() {
    return this.memoryView.getUint32(0x100);
  }
  get maxDrawIndexedIndexValue() {
    return this.memoryView.getUint32(0x104);
  }
  get maxDrawIndirectCount() {
    return this.memoryView.getUint32(0x108);
  }
  get maxSamplerLodBias() {
    return this.memoryView.getFloat32(0x10C);
  }
  get maxSamplerAnisotropy() {
    return this.memoryView.getFloat32(0x110);
  }
  get maxViewports() {
    return this.memoryView.getUint32(0x114);
  }
  get maxViewportDimensions() {
    return this._maxViewportDimensions;
  }
  get viewportBoundsRange() {
    return this._viewportBoundsRange;
  }
  get viewportSubPixelBits() {
    return this.memoryView.getUint32(0x128);
  }
  get minMemoryMapAlignment() {
    return this.memoryView.getBigInt64(0x130);
  }
  get minTexelBufferOffsetAlignment() {
    return this.memoryView.getBigUint64(0x138);
  }
  get minUniformBufferOffsetAlignment() {
    return this.memoryView.getBigUint64(0x140);
  }
  get minStorageBufferOffsetAlignment() {
    return this.memoryView.getBigUint64(0x148);
  }
  get minTexelOffset() {
    return this.memoryView.getInt32(0x150);
  }
  get maxTexelOffset() {
    return this.memoryView.getUint32(0x154);
  }
  get minTexelGatherOffset() {
    return this.memoryView.getInt32(0x158);
  }
  get maxTexelGatherOffset() {
    return this.memoryView.getUint32(0x15C);
  }
  get minInterpolationOffset() {
    return this.memoryView.getFloat32(0x160);
  }
  get maxInterpolationOffset() {
    return this.memoryView.getFloat32(0x164);
  }
  get subPixelInterpolationOffsetBits() {
    return this.memoryView.getUint32(0x168);
  }
  get maxFramebufferWidth() {
    return this.memoryView.getUint32(0x16C);
  }
  get maxFramebufferHeight() {
    return this.memoryView.getUint32(0x170);
  }
  get maxFramebufferLayers() {
    return this.memoryView.getUint32(0x174);
  }
  get framebufferColorSampleCounts() {
    return this.memoryView.getInt32(0x178);
  }
  get framebufferDepthSampleCounts() {
    return this.memoryView.getInt32(0x17C);
  }
  get framebufferStencilSampleCounts() {
    return this.memoryView.getInt32(0x180);
  }
  get framebufferNoAttachmentsSampleCounts() {
    return this.memoryView.getInt32(0x184);
  }
  get maxColorAttachments() {
    return this.memoryView.getUint32(0x188);
  }
  get sampledImageColorSampleCounts() {
    return this.memoryView.getInt32(0x18C);
  }
  get sampledImageIntegerSampleCounts() {
    return this.memoryView.getInt32(0x190);
  }
  get sampledImageDepthSampleCounts() {
    return this.memoryView.getInt32(0x194);
  }
  get sampledImageStencilSampleCounts() {
    return this.memoryView.getInt32(0x198);
  }
  get storageImageSampleCounts() {
    return this.memoryView.getInt32(0x19C);
  }
  get maxSampleMaskWords() {
    return this.memoryView.getUint32(0x1A0);
  }
  get timestampComputeAndGraphics() {
    return this.memoryView.getUint32(0x1A4);
  }
  get timestampPeriod() {
    return this.memoryView.getFloat32(0x1A8);
  }
  get maxClipDistances() {
    return this.memoryView.getUint32(0x1AC);
  }
  get maxCullDistances() {
    return this.memoryView.getUint32(0x1B0);
  }
  get maxCombinedClipAndCullDistances() {
    return this.memoryView.getUint32(0x1B4);
  }
  get discreteQueuePriorities() {
    return this.memoryView.getUint32(0x1B8);
  }
  get pointSizeRange() {
    return this._pointSizeRange;
  }
  get lineWidthRange() {
    return this._lineWidthRange;
  }
  get pointSizeGranularity() {
    return this.memoryView.getFloat32(0x1CC);
  }
  get lineWidthGranularity() {
    return this.memoryView.getFloat32(0x1D0);
  }
  get strictLines() {
    return this.memoryView.getUint32(0x1D4);
  }
  get standardSampleLocations() {
    return this.memoryView.getUint32(0x1D8);
  }
  get optimalBufferCopyOffsetAlignment() {
    return this.memoryView.getBigUint64(0x1E0);
  }
  get optimalBufferCopyRowPitchAlignment() {
    return this.memoryView.getBigUint64(0x1E8);
  }
  get nonCoherentAtomSize() {
    return this.memoryView.getBigUint64(0x1F0);
  }
  
};

VkPhysicalDeviceLimits.prototype.flush = function flush() {
  
  
  if (this._maxComputeWorkGroupCount !== null) {
    let array = this._maxComputeWorkGroupCount;
    for (let ii = 0; ii < array.length; ++ii) {
      this.memoryView.setUint32(0xDC, array[ii]);
    };
  }
  
  
  if (this._maxComputeWorkGroupSize !== null) {
    let array = this._maxComputeWorkGroupSize;
    for (let ii = 0; ii < array.length; ++ii) {
      this.memoryView.setUint32(0xEC, array[ii]);
    };
  }
  
  
  if (this._maxViewportDimensions !== null) {
    let array = this._maxViewportDimensions;
    for (let ii = 0; ii < array.length; ++ii) {
      this.memoryView.setUint32(0x118, array[ii]);
    };
  }
  
  
  if (this._viewportBoundsRange !== null) {
    let array = this._viewportBoundsRange;
    for (let ii = 0; ii < array.length; ++ii) {
      this.memoryView.setFloat32(0x120, array[ii]);
    };
  }
  
  
  if (this._pointSizeRange !== null) {
    let array = this._pointSizeRange;
    for (let ii = 0; ii < array.length; ++ii) {
      this.memoryView.setFloat32(0x1BC, array[ii]);
    };
  }
  
  
  if (this._lineWidthRange !== null) {
    let array = this._lineWidthRange;
    for (let ii = 0; ii < array.length; ++ii) {
      this.memoryView.setFloat32(0x1C4, array[ii]);
    };
  }
  
  return true;
};

VkPhysicalDeviceLimits.byteLength = 0x1F8;

VkPhysicalDeviceLimits.memoryLayout = Object.freeze({
  maxImageDimension1D: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  maxImageDimension2D: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  maxImageDimension3D: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
  maxImageDimensionCube: Object.freeze({
    byteOffset: 0xC,
    byteLength: 0x4
  }),
  maxImageArrayLayers: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  maxTexelBufferElements: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  maxUniformBufferRange: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  maxStorageBufferRange: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  maxPushConstantsSize: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  maxMemoryAllocationCount: Object.freeze({
    byteOffset: 0x24,
    byteLength: 0x4
  }),
  maxSamplerAllocationCount: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x4
  }),
  bufferImageGranularity: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x8
  }),
  sparseAddressSpaceSize: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x8
  }),
  maxBoundDescriptorSets: Object.freeze({
    byteOffset: 0x40,
    byteLength: 0x4
  }),
  maxPerStageDescriptorSamplers: Object.freeze({
    byteOffset: 0x44,
    byteLength: 0x4
  }),
  maxPerStageDescriptorUniformBuffers: Object.freeze({
    byteOffset: 0x48,
    byteLength: 0x4
  }),
  maxPerStageDescriptorStorageBuffers: Object.freeze({
    byteOffset: 0x4C,
    byteLength: 0x4
  }),
  maxPerStageDescriptorSampledImages: Object.freeze({
    byteOffset: 0x50,
    byteLength: 0x4
  }),
  maxPerStageDescriptorStorageImages: Object.freeze({
    byteOffset: 0x54,
    byteLength: 0x4
  }),
  maxPerStageDescriptorInputAttachments: Object.freeze({
    byteOffset: 0x58,
    byteLength: 0x4
  }),
  maxPerStageResources: Object.freeze({
    byteOffset: 0x5C,
    byteLength: 0x4
  }),
  maxDescriptorSetSamplers: Object.freeze({
    byteOffset: 0x60,
    byteLength: 0x4
  }),
  maxDescriptorSetUniformBuffers: Object.freeze({
    byteOffset: 0x64,
    byteLength: 0x4
  }),
  maxDescriptorSetUniformBuffersDynamic: Object.freeze({
    byteOffset: 0x68,
    byteLength: 0x4
  }),
  maxDescriptorSetStorageBuffers: Object.freeze({
    byteOffset: 0x6C,
    byteLength: 0x4
  }),
  maxDescriptorSetStorageBuffersDynamic: Object.freeze({
    byteOffset: 0x70,
    byteLength: 0x4
  }),
  maxDescriptorSetSampledImages: Object.freeze({
    byteOffset: 0x74,
    byteLength: 0x4
  }),
  maxDescriptorSetStorageImages: Object.freeze({
    byteOffset: 0x78,
    byteLength: 0x4
  }),
  maxDescriptorSetInputAttachments: Object.freeze({
    byteOffset: 0x7C,
    byteLength: 0x4
  }),
  maxVertexInputAttributes: Object.freeze({
    byteOffset: 0x80,
    byteLength: 0x4
  }),
  maxVertexInputBindings: Object.freeze({
    byteOffset: 0x84,
    byteLength: 0x4
  }),
  maxVertexInputAttributeOffset: Object.freeze({
    byteOffset: 0x88,
    byteLength: 0x4
  }),
  maxVertexInputBindingStride: Object.freeze({
    byteOffset: 0x8C,
    byteLength: 0x4
  }),
  maxVertexOutputComponents: Object.freeze({
    byteOffset: 0x90,
    byteLength: 0x4
  }),
  maxTessellationGenerationLevel: Object.freeze({
    byteOffset: 0x94,
    byteLength: 0x4
  }),
  maxTessellationPatchSize: Object.freeze({
    byteOffset: 0x98,
    byteLength: 0x4
  }),
  maxTessellationControlPerVertexInputComponents: Object.freeze({
    byteOffset: 0x9C,
    byteLength: 0x4
  }),
  maxTessellationControlPerVertexOutputComponents: Object.freeze({
    byteOffset: 0xA0,
    byteLength: 0x4
  }),
  maxTessellationControlPerPatchOutputComponents: Object.freeze({
    byteOffset: 0xA4,
    byteLength: 0x4
  }),
  maxTessellationControlTotalOutputComponents: Object.freeze({
    byteOffset: 0xA8,
    byteLength: 0x4
  }),
  maxTessellationEvaluationInputComponents: Object.freeze({
    byteOffset: 0xAC,
    byteLength: 0x4
  }),
  maxTessellationEvaluationOutputComponents: Object.freeze({
    byteOffset: 0xB0,
    byteLength: 0x4
  }),
  maxGeometryShaderInvocations: Object.freeze({
    byteOffset: 0xB4,
    byteLength: 0x4
  }),
  maxGeometryInputComponents: Object.freeze({
    byteOffset: 0xB8,
    byteLength: 0x4
  }),
  maxGeometryOutputComponents: Object.freeze({
    byteOffset: 0xBC,
    byteLength: 0x4
  }),
  maxGeometryOutputVertices: Object.freeze({
    byteOffset: 0xC0,
    byteLength: 0x4
  }),
  maxGeometryTotalOutputComponents: Object.freeze({
    byteOffset: 0xC4,
    byteLength: 0x4
  }),
  maxFragmentInputComponents: Object.freeze({
    byteOffset: 0xC8,
    byteLength: 0x4
  }),
  maxFragmentOutputAttachments: Object.freeze({
    byteOffset: 0xCC,
    byteLength: 0x4
  }),
  maxFragmentDualSrcAttachments: Object.freeze({
    byteOffset: 0xD0,
    byteLength: 0x4
  }),
  maxFragmentCombinedOutputResources: Object.freeze({
    byteOffset: 0xD4,
    byteLength: 0x4
  }),
  maxComputeSharedMemorySize: Object.freeze({
    byteOffset: 0xD8,
    byteLength: 0x4
  }),
  maxComputeWorkGroupCount: Object.freeze({
    byteOffset: 0xDC,
    byteLength: 0xC
  }),
  maxComputeWorkGroupInvocations: Object.freeze({
    byteOffset: 0xE8,
    byteLength: 0x4
  }),
  maxComputeWorkGroupSize: Object.freeze({
    byteOffset: 0xEC,
    byteLength: 0xC
  }),
  subPixelPrecisionBits: Object.freeze({
    byteOffset: 0xF8,
    byteLength: 0x4
  }),
  subTexelPrecisionBits: Object.freeze({
    byteOffset: 0xFC,
    byteLength: 0x4
  }),
  mipmapPrecisionBits: Object.freeze({
    byteOffset: 0x100,
    byteLength: 0x4
  }),
  maxDrawIndexedIndexValue: Object.freeze({
    byteOffset: 0x104,
    byteLength: 0x4
  }),
  maxDrawIndirectCount: Object.freeze({
    byteOffset: 0x108,
    byteLength: 0x4
  }),
  maxSamplerLodBias: Object.freeze({
    byteOffset: 0x10C,
    byteLength: 0x4
  }),
  maxSamplerAnisotropy: Object.freeze({
    byteOffset: 0x110,
    byteLength: 0x4
  }),
  maxViewports: Object.freeze({
    byteOffset: 0x114,
    byteLength: 0x4
  }),
  maxViewportDimensions: Object.freeze({
    byteOffset: 0x118,
    byteLength: 0x8
  }),
  viewportBoundsRange: Object.freeze({
    byteOffset: 0x120,
    byteLength: 0x8
  }),
  viewportSubPixelBits: Object.freeze({
    byteOffset: 0x128,
    byteLength: 0x4
  }),
  minMemoryMapAlignment: Object.freeze({
    byteOffset: 0x130,
    byteLength: 0x8
  }),
  minTexelBufferOffsetAlignment: Object.freeze({
    byteOffset: 0x138,
    byteLength: 0x8
  }),
  minUniformBufferOffsetAlignment: Object.freeze({
    byteOffset: 0x140,
    byteLength: 0x8
  }),
  minStorageBufferOffsetAlignment: Object.freeze({
    byteOffset: 0x148,
    byteLength: 0x8
  }),
  minTexelOffset: Object.freeze({
    byteOffset: 0x150,
    byteLength: 0x4
  }),
  maxTexelOffset: Object.freeze({
    byteOffset: 0x154,
    byteLength: 0x4
  }),
  minTexelGatherOffset: Object.freeze({
    byteOffset: 0x158,
    byteLength: 0x4
  }),
  maxTexelGatherOffset: Object.freeze({
    byteOffset: 0x15C,
    byteLength: 0x4
  }),
  minInterpolationOffset: Object.freeze({
    byteOffset: 0x160,
    byteLength: 0x4
  }),
  maxInterpolationOffset: Object.freeze({
    byteOffset: 0x164,
    byteLength: 0x4
  }),
  subPixelInterpolationOffsetBits: Object.freeze({
    byteOffset: 0x168,
    byteLength: 0x4
  }),
  maxFramebufferWidth: Object.freeze({
    byteOffset: 0x16C,
    byteLength: 0x4
  }),
  maxFramebufferHeight: Object.freeze({
    byteOffset: 0x170,
    byteLength: 0x4
  }),
  maxFramebufferLayers: Object.freeze({
    byteOffset: 0x174,
    byteLength: 0x4
  }),
  framebufferColorSampleCounts: Object.freeze({
    byteOffset: 0x178,
    byteLength: 0x4
  }),
  framebufferDepthSampleCounts: Object.freeze({
    byteOffset: 0x17C,
    byteLength: 0x4
  }),
  framebufferStencilSampleCounts: Object.freeze({
    byteOffset: 0x180,
    byteLength: 0x4
  }),
  framebufferNoAttachmentsSampleCounts: Object.freeze({
    byteOffset: 0x184,
    byteLength: 0x4
  }),
  maxColorAttachments: Object.freeze({
    byteOffset: 0x188,
    byteLength: 0x4
  }),
  sampledImageColorSampleCounts: Object.freeze({
    byteOffset: 0x18C,
    byteLength: 0x4
  }),
  sampledImageIntegerSampleCounts: Object.freeze({
    byteOffset: 0x190,
    byteLength: 0x4
  }),
  sampledImageDepthSampleCounts: Object.freeze({
    byteOffset: 0x194,
    byteLength: 0x4
  }),
  sampledImageStencilSampleCounts: Object.freeze({
    byteOffset: 0x198,
    byteLength: 0x4
  }),
  storageImageSampleCounts: Object.freeze({
    byteOffset: 0x19C,
    byteLength: 0x4
  }),
  maxSampleMaskWords: Object.freeze({
    byteOffset: 0x1A0,
    byteLength: 0x4
  }),
  timestampComputeAndGraphics: Object.freeze({
    byteOffset: 0x1A4,
    byteLength: 0x4
  }),
  timestampPeriod: Object.freeze({
    byteOffset: 0x1A8,
    byteLength: 0x4
  }),
  maxClipDistances: Object.freeze({
    byteOffset: 0x1AC,
    byteLength: 0x4
  }),
  maxCullDistances: Object.freeze({
    byteOffset: 0x1B0,
    byteLength: 0x4
  }),
  maxCombinedClipAndCullDistances: Object.freeze({
    byteOffset: 0x1B4,
    byteLength: 0x4
  }),
  discreteQueuePriorities: Object.freeze({
    byteOffset: 0x1B8,
    byteLength: 0x4
  }),
  pointSizeRange: Object.freeze({
    byteOffset: 0x1BC,
    byteLength: 0x8
  }),
  lineWidthRange: Object.freeze({
    byteOffset: 0x1C4,
    byteLength: 0x8
  }),
  pointSizeGranularity: Object.freeze({
    byteOffset: 0x1CC,
    byteLength: 0x4
  }),
  lineWidthGranularity: Object.freeze({
    byteOffset: 0x1D0,
    byteLength: 0x4
  }),
  strictLines: Object.freeze({
    byteOffset: 0x1D4,
    byteLength: 0x4
  }),
  standardSampleLocations: Object.freeze({
    byteOffset: 0x1D8,
    byteLength: 0x4
  }),
  optimalBufferCopyOffsetAlignment: Object.freeze({
    byteOffset: 0x1E0,
    byteLength: 0x8
  }),
  optimalBufferCopyRowPitchAlignment: Object.freeze({
    byteOffset: 0x1E8,
    byteLength: 0x8
  }),
  nonCoherentAtomSize: Object.freeze({
    byteOffset: 0x1F0,
    byteLength: 0x8
  }),
});
/** VkSemaphoreCreateInfo **/
class VkSemaphoreCreateInfo {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkSemaphoreCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get flags() {
    return this.memoryView.getInt32(0x10);
  }
  set flags(value) {
    this.memoryView.setInt32(0x10, value);
  }
  
};

VkSemaphoreCreateInfo.prototype.flush = function flush() {
  
  
  
  return true;
};

VkSemaphoreCreateInfo.byteLength = 0x18;

VkSemaphoreCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkQueryPoolCreateInfo **/
class VkQueryPoolCreateInfo {
  constructor(opts) {
    
    this._pNext = null;
    
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkQueryPoolCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.queryType !== void 0) this.queryType = opts.queryType;
      if (opts.queryCount !== void 0) this.queryCount = opts.queryCount;
      if (opts.pipelineStatistics !== void 0) this.pipelineStatistics = opts.pipelineStatistics;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get flags() {
    return this.memoryView.getInt32(0x10);
  }
  set flags(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get queryType() {
    return this.memoryView.getInt32(0x14);
  }
  set queryType(value) {
    this.memoryView.setInt32(0x14, value);
  }
  get queryCount() {
    return this.memoryView.getUint32(0x18);
  }
  set queryCount(value) {
    this.memoryView.setUint32(0x18, value);
  }
  get pipelineStatistics() {
    return this.memoryView.getInt32(0x1C);
  }
  set pipelineStatistics(value) {
    this.memoryView.setInt32(0x1C, value);
  }
  
};

VkQueryPoolCreateInfo.prototype.flush = function flush() {
  
  
  
  return true;
};

VkQueryPoolCreateInfo.byteLength = 0x20;

VkQueryPoolCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  queryType: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  queryCount: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  pipelineStatistics: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
});
/** VkFramebufferCreateInfo **/
class VkFramebufferCreateInfo {
  constructor(opts) {
    
    this._pNext = null;
    
    this._renderPass = null;
    
    this._pAttachments = null;
    this._pAttachmentsNative = null;
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkFramebufferCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.renderPass !== void 0) this.renderPass = opts.renderPass;
      if (opts.attachmentCount !== void 0) this.attachmentCount = opts.attachmentCount;
      if (opts.pAttachments !== void 0) this.pAttachments = opts.pAttachments;
      if (opts.width !== void 0) this.width = opts.width;
      if (opts.height !== void 0) this.height = opts.height;
      if (opts.layers !== void 0) this.layers = opts.layers;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get flags() {
    return this.memoryView.getInt32(0x10);
  }
  set flags(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get renderPass() {
    return this._renderPass;
  }
  set renderPass(value) {
    if (value !== null && value.constructor === VkRenderPass) {
      value.flush();
      this._renderPass = value;
      this.memoryView.setBigInt64(0x18, value.memoryAddress);
    } else if (value === null) {
      this._renderPass = null;
    } else {
      throw new TypeError("Invalid type for 'VkFramebufferCreateInfo.renderPass': Expected 'VkRenderPass' but got '" + value.constructor.name + "'");
    }
  }
  get attachmentCount() {
    return this.memoryView.getUint32(0x20);
  }
  set attachmentCount(value) {
    this.memoryView.setUint32(0x20, value);
  }
  get pAttachments() {
    return this._pAttachments;
  }
  set pAttachments(value) {
    if (value !== null && value.constructor === Array) {
      this._pAttachments = value;
    } else if (value === null) {
      this._pAttachments = null;
    } else {
      throw new TypeError("Invalid type for 'VkFramebufferCreateInfo.pAttachments': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get width() {
    return this.memoryView.getUint32(0x30);
  }
  set width(value) {
    this.memoryView.setUint32(0x30, value);
  }
  get height() {
    return this.memoryView.getUint32(0x34);
  }
  set height(value) {
    this.memoryView.setUint32(0x34, value);
  }
  get layers() {
    return this.memoryView.getUint32(0x38);
  }
  set layers(value) {
    this.memoryView.setUint32(0x38, value);
  }
  
};

VkFramebufferCreateInfo.prototype.flush = function flush() {
  
  
  
  
  if (this._pAttachments !== null) {
    let nativeArray = new NativeObjectArray(this._pAttachments);
    this._pAttachmentsNative = nativeArray;
    this.memoryView.setBigInt64(0x28, nativeArray.address);
  }
  
  return true;
};

VkFramebufferCreateInfo.byteLength = 0x40;

VkFramebufferCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  renderPass: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  attachmentCount: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  pAttachments: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
  width: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  height: Object.freeze({
    byteOffset: 0x34,
    byteLength: 0x4
  }),
  layers: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x4
  }),
});
/** VkDrawIndirectCommand **/
class VkDrawIndirectCommand {
  constructor(opts) {
    
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkDrawIndirectCommand.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.vertexCount !== void 0) this.vertexCount = opts.vertexCount;
      if (opts.instanceCount !== void 0) this.instanceCount = opts.instanceCount;
      if (opts.firstVertex !== void 0) this.firstVertex = opts.firstVertex;
      if (opts.firstInstance !== void 0) this.firstInstance = opts.firstInstance;
      
    }
  }
  get vertexCount() {
    return this.memoryView.getUint32(0x0);
  }
  set vertexCount(value) {
    this.memoryView.setUint32(0x0, value);
  }
  get instanceCount() {
    return this.memoryView.getUint32(0x4);
  }
  set instanceCount(value) {
    this.memoryView.setUint32(0x4, value);
  }
  get firstVertex() {
    return this.memoryView.getUint32(0x8);
  }
  set firstVertex(value) {
    this.memoryView.setUint32(0x8, value);
  }
  get firstInstance() {
    return this.memoryView.getUint32(0xC);
  }
  set firstInstance(value) {
    this.memoryView.setUint32(0xC, value);
  }
  
};

VkDrawIndirectCommand.prototype.flush = function flush() {
  
  return true;
};

VkDrawIndirectCommand.byteLength = 0x10;

VkDrawIndirectCommand.memoryLayout = Object.freeze({
  vertexCount: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  instanceCount: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  firstVertex: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
  firstInstance: Object.freeze({
    byteOffset: 0xC,
    byteLength: 0x4
  }),
});
/** VkDrawIndexedIndirectCommand **/
class VkDrawIndexedIndirectCommand {
  constructor(opts) {
    
    
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkDrawIndexedIndirectCommand.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.indexCount !== void 0) this.indexCount = opts.indexCount;
      if (opts.instanceCount !== void 0) this.instanceCount = opts.instanceCount;
      if (opts.firstIndex !== void 0) this.firstIndex = opts.firstIndex;
      if (opts.vertexOffset !== void 0) this.vertexOffset = opts.vertexOffset;
      if (opts.firstInstance !== void 0) this.firstInstance = opts.firstInstance;
      
    }
  }
  get indexCount() {
    return this.memoryView.getUint32(0x0);
  }
  set indexCount(value) {
    this.memoryView.setUint32(0x0, value);
  }
  get instanceCount() {
    return this.memoryView.getUint32(0x4);
  }
  set instanceCount(value) {
    this.memoryView.setUint32(0x4, value);
  }
  get firstIndex() {
    return this.memoryView.getUint32(0x8);
  }
  set firstIndex(value) {
    this.memoryView.setUint32(0x8, value);
  }
  get vertexOffset() {
    return this.memoryView.getInt32(0xC);
  }
  set vertexOffset(value) {
    this.memoryView.setInt32(0xC, value);
  }
  get firstInstance() {
    return this.memoryView.getUint32(0x10);
  }
  set firstInstance(value) {
    this.memoryView.setUint32(0x10, value);
  }
  
};

VkDrawIndexedIndirectCommand.prototype.flush = function flush() {
  
  return true;
};

VkDrawIndexedIndirectCommand.byteLength = 0x14;

VkDrawIndexedIndirectCommand.memoryLayout = Object.freeze({
  indexCount: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  instanceCount: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  firstIndex: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
  vertexOffset: Object.freeze({
    byteOffset: 0xC,
    byteLength: 0x4
  }),
  firstInstance: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkDispatchIndirectCommand **/
class VkDispatchIndirectCommand {
  constructor(opts) {
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkDispatchIndirectCommand.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.x !== void 0) this.x = opts.x;
      if (opts.y !== void 0) this.y = opts.y;
      if (opts.z !== void 0) this.z = opts.z;
      
    }
  }
  get x() {
    return this.memoryView.getUint32(0x0);
  }
  set x(value) {
    this.memoryView.setUint32(0x0, value);
  }
  get y() {
    return this.memoryView.getUint32(0x4);
  }
  set y(value) {
    this.memoryView.setUint32(0x4, value);
  }
  get z() {
    return this.memoryView.getUint32(0x8);
  }
  set z(value) {
    this.memoryView.setUint32(0x8, value);
  }
  
};

VkDispatchIndirectCommand.prototype.flush = function flush() {
  
  return true;
};

VkDispatchIndirectCommand.byteLength = 0xC;

VkDispatchIndirectCommand.memoryLayout = Object.freeze({
  x: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  y: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  z: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
});
/** VkSubmitInfo **/
class VkSubmitInfo {
  constructor(opts) {
    
    this._pNext = null;
    
    this._pWaitSemaphores = null;
    this._pWaitSemaphoresNative = null;
    this._pWaitDstStageMask = null;
    
    this._pCommandBuffers = null;
    this._pCommandBuffersNative = null;
    
    this._pSignalSemaphores = null;
    this._pSignalSemaphoresNative = null;
    this.memoryBuffer = new ArrayBuffer(VkSubmitInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_SUBMIT_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.waitSemaphoreCount !== void 0) this.waitSemaphoreCount = opts.waitSemaphoreCount;
      if (opts.pWaitSemaphores !== void 0) this.pWaitSemaphores = opts.pWaitSemaphores;
      if (opts.pWaitDstStageMask !== void 0) this.pWaitDstStageMask = opts.pWaitDstStageMask;
      if (opts.commandBufferCount !== void 0) this.commandBufferCount = opts.commandBufferCount;
      if (opts.pCommandBuffers !== void 0) this.pCommandBuffers = opts.pCommandBuffers;
      if (opts.signalSemaphoreCount !== void 0) this.signalSemaphoreCount = opts.signalSemaphoreCount;
      if (opts.pSignalSemaphores !== void 0) this.pSignalSemaphores = opts.pSignalSemaphores;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get waitSemaphoreCount() {
    return this.memoryView.getUint32(0x10);
  }
  set waitSemaphoreCount(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get pWaitSemaphores() {
    return this._pWaitSemaphores;
  }
  set pWaitSemaphores(value) {
    if (value !== null && value.constructor === Array) {
      this._pWaitSemaphores = value;
    } else if (value === null) {
      this._pWaitSemaphores = null;
    } else {
      throw new TypeError("Invalid type for 'VkSubmitInfo.pWaitSemaphores': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get pWaitDstStageMask() {
    return this._pWaitDstStageMask;
  }
  set pWaitDstStageMask(value) {
    if (value !== null && value.constructor === Int32Array) {
      this._pWaitDstStageMask = value;
      this.memoryView.setBigInt64(0x20, getAddressFromArrayBuffer(value.buffer));
    } else if (value === null) {
      this._pWaitDstStageMask = null;
    } else {
      throw new TypeError("Invalid type for 'VkSubmitInfo.pWaitDstStageMask': Expected 'Int32Array' but got '" + value.constructor.name + "'");
    }
  }
  get commandBufferCount() {
    return this.memoryView.getUint32(0x28);
  }
  set commandBufferCount(value) {
    this.memoryView.setUint32(0x28, value);
  }
  get pCommandBuffers() {
    return this._pCommandBuffers;
  }
  set pCommandBuffers(value) {
    if (value !== null && value.constructor === Array) {
      this._pCommandBuffers = value;
    } else if (value === null) {
      this._pCommandBuffers = null;
    } else {
      throw new TypeError("Invalid type for 'VkSubmitInfo.pCommandBuffers': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get signalSemaphoreCount() {
    return this.memoryView.getUint32(0x38);
  }
  set signalSemaphoreCount(value) {
    this.memoryView.setUint32(0x38, value);
  }
  get pSignalSemaphores() {
    return this._pSignalSemaphores;
  }
  set pSignalSemaphores(value) {
    if (value !== null && value.constructor === Array) {
      this._pSignalSemaphores = value;
    } else if (value === null) {
      this._pSignalSemaphores = null;
    } else {
      throw new TypeError("Invalid type for 'VkSubmitInfo.pSignalSemaphores': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkSubmitInfo.prototype.flush = function flush() {
  
  
  
  
  if (this._pWaitSemaphores !== null) {
    let nativeArray = new NativeObjectArray(this._pWaitSemaphores);
    this._pWaitSemaphoresNative = nativeArray;
    this.memoryView.setBigInt64(0x18, nativeArray.address);
  }
  
  
  if (this._pCommandBuffers !== null) {
    let nativeArray = new NativeObjectArray(this._pCommandBuffers);
    this._pCommandBuffersNative = nativeArray;
    this.memoryView.setBigInt64(0x30, nativeArray.address);
  }
  
  
  if (this._pSignalSemaphores !== null) {
    let nativeArray = new NativeObjectArray(this._pSignalSemaphores);
    this._pSignalSemaphoresNative = nativeArray;
    this.memoryView.setBigInt64(0x40, nativeArray.address);
  }
  
  return true;
};

VkSubmitInfo.byteLength = 0x48;

VkSubmitInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  waitSemaphoreCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pWaitSemaphores: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  pWaitDstStageMask: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
  commandBufferCount: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x4
  }),
  pCommandBuffers: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x8
  }),
  signalSemaphoreCount: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x4
  }),
  pSignalSemaphores: Object.freeze({
    byteOffset: 0x40,
    byteLength: 0x8
  }),
});
/** VkDisplayPropertiesKHR **/
class VkDisplayPropertiesKHR {
  constructor(opts) {
    this._display = null;
    this._displayName = null;
    this._physicalDimensions = null;
    this._physicalResolution = null;
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkDisplayPropertiesKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      
    }
  }
  get display() {
    return this._display;
  }
  get displayName() {
    if (this._displayName !== null) {
      let str = textDecoder.decode(this._displayName);
      return str.substr(0, str.length - 1);
    } else {
      return null;
    }
  }
  get physicalDimensions() {
    return this._physicalDimensions;
  }
  get physicalResolution() {
    return this._physicalResolution;
  }
  get supportedTransforms() {
    return this.memoryView.getInt32(0x20);
  }
  get planeReorderPossible() {
    return this.memoryView.getUint32(0x24);
  }
  get persistentContent() {
    return this.memoryView.getUint32(0x28);
  }
  
};

VkDisplayPropertiesKHR.prototype.flush = function flush() {
  
  
  
  
  
  return true;
};

VkDisplayPropertiesKHR.byteLength = 0x30;

VkDisplayPropertiesKHR.memoryLayout = Object.freeze({
  display: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x8
  }),
  displayName: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  physicalDimensions: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  physicalResolution: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  supportedTransforms: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  planeReorderPossible: Object.freeze({
    byteOffset: 0x24,
    byteLength: 0x4
  }),
  persistentContent: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x4
  }),
});
/** VkDisplayPlanePropertiesKHR **/
class VkDisplayPlanePropertiesKHR {
  constructor(opts) {
    this._currentDisplay = null;
    
    this.memoryBuffer = new ArrayBuffer(VkDisplayPlanePropertiesKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      
    }
  }
  get currentDisplay() {
    return this._currentDisplay;
  }
  get currentStackIndex() {
    return this.memoryView.getUint32(0x8);
  }
  
};

VkDisplayPlanePropertiesKHR.prototype.flush = function flush() {
  
  return true;
};

VkDisplayPlanePropertiesKHR.byteLength = 0x10;

VkDisplayPlanePropertiesKHR.memoryLayout = Object.freeze({
  currentDisplay: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x8
  }),
  currentStackIndex: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
});
/** VkDisplayModeParametersKHR **/
class VkDisplayModeParametersKHR {
  constructor(opts) {
    this._visibleRegion = null;
    
    this.memoryBuffer = new ArrayBuffer(VkDisplayModeParametersKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.visibleRegion !== void 0) this.visibleRegion = opts.visibleRegion;
      if (opts.refreshRate !== void 0) this.refreshRate = opts.refreshRate;
      
    }
  }
  get visibleRegion() {
    return this._visibleRegion;
  }
  set visibleRegion(value) {
    if (value !== null && value.constructor === VkExtent2D) {
      value.flush();
      this._visibleRegion = value;
      this.memoryView.setBigInt64(0x0, value.memoryAddress);
    } else if (value === null) {
      this._visibleRegion = null;
    } else {
      throw new TypeError("Invalid type for 'VkDisplayModeParametersKHR.visibleRegion': Expected 'VkExtent2D' but got '" + value.constructor.name + "'");
    }
  }
  get refreshRate() {
    return this.memoryView.getUint32(0x8);
  }
  set refreshRate(value) {
    this.memoryView.setUint32(0x8, value);
  }
  
};

VkDisplayModeParametersKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkDisplayModeParametersKHR.byteLength = 0xC;

VkDisplayModeParametersKHR.memoryLayout = Object.freeze({
  visibleRegion: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x8
  }),
  refreshRate: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
});
/** VkDisplayModePropertiesKHR **/
class VkDisplayModePropertiesKHR {
  constructor(opts) {
    this._displayMode = null;
    this._parameters = null;
    this.memoryBuffer = new ArrayBuffer(VkDisplayModePropertiesKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      
    }
  }
  get displayMode() {
    return this._displayMode;
  }
  get parameters() {
    return this._parameters;
  }
  
};

VkDisplayModePropertiesKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkDisplayModePropertiesKHR.byteLength = 0x18;

VkDisplayModePropertiesKHR.memoryLayout = Object.freeze({
  displayMode: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x8
  }),
  parameters: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0xC
  }),
});
/** VkDisplayModeCreateInfoKHR **/
class VkDisplayModeCreateInfoKHR {
  constructor(opts) {
    
    this._pNext = null;
    
    this._parameters = null;
    this.memoryBuffer = new ArrayBuffer(VkDisplayModeCreateInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.parameters !== void 0) this.parameters = opts.parameters;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get flags() {
    return this.memoryView.getInt32(0x10);
  }
  set flags(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get parameters() {
    return this._parameters;
  }
  set parameters(value) {
    if (value !== null && value.constructor === VkDisplayModeParametersKHR) {
      value.flush();
      this._parameters = value;
      this.memoryView.setBigInt64(0x14, value.memoryAddress);
    } else if (value === null) {
      this._parameters = null;
    } else {
      throw new TypeError("Invalid type for 'VkDisplayModeCreateInfoKHR.parameters': Expected 'VkDisplayModeParametersKHR' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkDisplayModeCreateInfoKHR.prototype.flush = function flush() {
  
  
  
  
  
  return true;
};

VkDisplayModeCreateInfoKHR.byteLength = 0x20;

VkDisplayModeCreateInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  parameters: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0xC
  }),
});
/** VkDisplayPlaneCapabilitiesKHR **/
class VkDisplayPlaneCapabilitiesKHR {
  constructor(opts) {
    
    this._minSrcPosition = null;
    this._maxSrcPosition = null;
    this._minSrcExtent = null;
    this._maxSrcExtent = null;
    this._minDstPosition = null;
    this._maxDstPosition = null;
    this._minDstExtent = null;
    this._maxDstExtent = null;
    this.memoryBuffer = new ArrayBuffer(VkDisplayPlaneCapabilitiesKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      
    }
  }
  get supportedAlpha() {
    return this.memoryView.getInt32(0x0);
  }
  get minSrcPosition() {
    return this._minSrcPosition;
  }
  get maxSrcPosition() {
    return this._maxSrcPosition;
  }
  get minSrcExtent() {
    return this._minSrcExtent;
  }
  get maxSrcExtent() {
    return this._maxSrcExtent;
  }
  get minDstPosition() {
    return this._minDstPosition;
  }
  get maxDstPosition() {
    return this._maxDstPosition;
  }
  get minDstExtent() {
    return this._minDstExtent;
  }
  get maxDstExtent() {
    return this._maxDstExtent;
  }
  
};

VkDisplayPlaneCapabilitiesKHR.prototype.flush = function flush() {
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  return true;
};

VkDisplayPlaneCapabilitiesKHR.byteLength = 0x44;

VkDisplayPlaneCapabilitiesKHR.memoryLayout = Object.freeze({
  supportedAlpha: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  minSrcPosition: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x8
  }),
  maxSrcPosition: Object.freeze({
    byteOffset: 0xC,
    byteLength: 0x8
  }),
  minSrcExtent: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x8
  }),
  maxSrcExtent: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x8
  }),
  minDstPosition: Object.freeze({
    byteOffset: 0x24,
    byteLength: 0x8
  }),
  maxDstPosition: Object.freeze({
    byteOffset: 0x2C,
    byteLength: 0x8
  }),
  minDstExtent: Object.freeze({
    byteOffset: 0x34,
    byteLength: 0x8
  }),
  maxDstExtent: Object.freeze({
    byteOffset: 0x3C,
    byteLength: 0x8
  }),
});
/** VkDisplaySurfaceCreateInfoKHR **/
class VkDisplaySurfaceCreateInfoKHR {
  constructor(opts) {
    
    this._pNext = null;
    
    this._displayMode = null;
    
    
    
    
    
    this._imageExtent = null;
    this.memoryBuffer = new ArrayBuffer(VkDisplaySurfaceCreateInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.displayMode !== void 0) this.displayMode = opts.displayMode;
      if (opts.planeIndex !== void 0) this.planeIndex = opts.planeIndex;
      if (opts.planeStackIndex !== void 0) this.planeStackIndex = opts.planeStackIndex;
      if (opts.transform !== void 0) this.transform = opts.transform;
      if (opts.globalAlpha !== void 0) this.globalAlpha = opts.globalAlpha;
      if (opts.alphaMode !== void 0) this.alphaMode = opts.alphaMode;
      if (opts.imageExtent !== void 0) this.imageExtent = opts.imageExtent;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get flags() {
    return this.memoryView.getInt32(0x10);
  }
  set flags(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get displayMode() {
    return this._displayMode;
  }
  set displayMode(value) {
    if (value !== null && value.constructor === VkDisplayModeKHR) {
      value.flush();
      this._displayMode = value;
      this.memoryView.setBigInt64(0x18, value.memoryAddress);
    } else if (value === null) {
      this._displayMode = null;
    } else {
      throw new TypeError("Invalid type for 'VkDisplaySurfaceCreateInfoKHR.displayMode': Expected 'VkDisplayModeKHR' but got '" + value.constructor.name + "'");
    }
  }
  get planeIndex() {
    return this.memoryView.getUint32(0x20);
  }
  set planeIndex(value) {
    this.memoryView.setUint32(0x20, value);
  }
  get planeStackIndex() {
    return this.memoryView.getUint32(0x24);
  }
  set planeStackIndex(value) {
    this.memoryView.setUint32(0x24, value);
  }
  get transform() {
    return this.memoryView.getInt32(0x28);
  }
  set transform(value) {
    this.memoryView.setInt32(0x28, value);
  }
  get globalAlpha() {
    return this.memoryView.getFloat32(0x2C);
  }
  set globalAlpha(value) {
    this.memoryView.setFloat32(0x2C, value);
  }
  get alphaMode() {
    return this.memoryView.getInt32(0x30);
  }
  set alphaMode(value) {
    this.memoryView.setInt32(0x30, value);
  }
  get imageExtent() {
    return this._imageExtent;
  }
  set imageExtent(value) {
    if (value !== null && value.constructor === VkExtent2D) {
      value.flush();
      this._imageExtent = value;
      this.memoryView.setBigInt64(0x34, value.memoryAddress);
    } else if (value === null) {
      this._imageExtent = null;
    } else {
      throw new TypeError("Invalid type for 'VkDisplaySurfaceCreateInfoKHR.imageExtent': Expected 'VkExtent2D' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkDisplaySurfaceCreateInfoKHR.prototype.flush = function flush() {
  
  
  
  
  
  return true;
};

VkDisplaySurfaceCreateInfoKHR.byteLength = 0x40;

VkDisplaySurfaceCreateInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  displayMode: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  planeIndex: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  planeStackIndex: Object.freeze({
    byteOffset: 0x24,
    byteLength: 0x4
  }),
  transform: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x4
  }),
  globalAlpha: Object.freeze({
    byteOffset: 0x2C,
    byteLength: 0x4
  }),
  alphaMode: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  imageExtent: Object.freeze({
    byteOffset: 0x34,
    byteLength: 0x8
  }),
});
/** VkDisplayPresentInfoKHR **/
class VkDisplayPresentInfoKHR {
  constructor(opts) {
    
    this._pNext = null;
    this._srcRect = null;
    this._dstRect = null;
    
    this.memoryBuffer = new ArrayBuffer(VkDisplayPresentInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.srcRect !== void 0) this.srcRect = opts.srcRect;
      if (opts.dstRect !== void 0) this.dstRect = opts.dstRect;
      if (opts.persistent !== void 0) this.persistent = opts.persistent;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get srcRect() {
    return this._srcRect;
  }
  set srcRect(value) {
    if (value !== null && value.constructor === VkRect2D) {
      value.flush();
      this._srcRect = value;
      this.memoryView.setBigInt64(0x10, value.memoryAddress);
    } else if (value === null) {
      this._srcRect = null;
    } else {
      throw new TypeError("Invalid type for 'VkDisplayPresentInfoKHR.srcRect': Expected 'VkRect2D' but got '" + value.constructor.name + "'");
    }
  }
  get dstRect() {
    return this._dstRect;
  }
  set dstRect(value) {
    if (value !== null && value.constructor === VkRect2D) {
      value.flush();
      this._dstRect = value;
      this.memoryView.setBigInt64(0x20, value.memoryAddress);
    } else if (value === null) {
      this._dstRect = null;
    } else {
      throw new TypeError("Invalid type for 'VkDisplayPresentInfoKHR.dstRect': Expected 'VkRect2D' but got '" + value.constructor.name + "'");
    }
  }
  get persistent() {
    return this.memoryView.getUint32(0x30);
  }
  set persistent(value) {
    this.memoryView.setUint32(0x30, value);
  }
  
};

VkDisplayPresentInfoKHR.prototype.flush = function flush() {
  
  
  
  
  
  
  
  return true;
};

VkDisplayPresentInfoKHR.byteLength = 0x38;

VkDisplayPresentInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  srcRect: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x10
  }),
  dstRect: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x10
  }),
  persistent: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
});
/** VkSurfaceCapabilitiesKHR **/
class VkSurfaceCapabilitiesKHR {
  constructor(opts) {
    
    
    this._currentExtent = null;
    this._minImageExtent = null;
    this._maxImageExtent = null;
    
    
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkSurfaceCapabilitiesKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      
    }
  }
  get minImageCount() {
    return this.memoryView.getUint32(0x0);
  }
  get maxImageCount() {
    return this.memoryView.getUint32(0x4);
  }
  get currentExtent() {
    return this._currentExtent;
  }
  get minImageExtent() {
    return this._minImageExtent;
  }
  get maxImageExtent() {
    return this._maxImageExtent;
  }
  get maxImageArrayLayers() {
    return this.memoryView.getUint32(0x20);
  }
  get supportedTransforms() {
    return this.memoryView.getInt32(0x24);
  }
  get currentTransform() {
    return this.memoryView.getInt32(0x28);
  }
  get supportedCompositeAlpha() {
    return this.memoryView.getInt32(0x2C);
  }
  get supportedUsageFlags() {
    return this.memoryView.getInt32(0x30);
  }
  
};

VkSurfaceCapabilitiesKHR.prototype.flush = function flush() {
  
  
  
  
  
  
  
  return true;
};

VkSurfaceCapabilitiesKHR.byteLength = 0x34;

VkSurfaceCapabilitiesKHR.memoryLayout = Object.freeze({
  minImageCount: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  maxImageCount: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  currentExtent: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  minImageExtent: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  maxImageExtent: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  maxImageArrayLayers: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  supportedTransforms: Object.freeze({
    byteOffset: 0x24,
    byteLength: 0x4
  }),
  currentTransform: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x4
  }),
  supportedCompositeAlpha: Object.freeze({
    byteOffset: 0x2C,
    byteLength: 0x4
  }),
  supportedUsageFlags: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
});
/** VkWin32SurfaceCreateInfoKHR **/
class VkWin32SurfaceCreateInfoKHR {
  constructor(opts) {
    
    this._pNext = null;
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkWin32SurfaceCreateInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.hinstance !== void 0) this.hinstance = opts.hinstance;
      if (opts.hwnd !== void 0) this.hwnd = opts.hwnd;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get flags() {
    return this.memoryView.getInt32(0x10);
  }
  set flags(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get hinstance() {
    return this.memoryView.getBigInt64(0x18);
  }
  set hinstance(value) {
    this.memoryView.setBigInt64(0x18, value);
  }
  get hwnd() {
    return this.memoryView.getBigInt64(0x20);
  }
  set hwnd(value) {
    this.memoryView.setBigInt64(0x20, value);
  }
  
};

VkWin32SurfaceCreateInfoKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkWin32SurfaceCreateInfoKHR.byteLength = 0x28;

VkWin32SurfaceCreateInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  hinstance: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  hwnd: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
});
/** VkSurfaceFormatKHR **/
class VkSurfaceFormatKHR {
  constructor(opts) {
    
    
    this.memoryBuffer = new ArrayBuffer(VkSurfaceFormatKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      
    }
  }
  get format() {
    return this.memoryView.getInt32(0x0);
  }
  get colorSpace() {
    return this.memoryView.getInt32(0x4);
  }
  
};

VkSurfaceFormatKHR.prototype.flush = function flush() {
  
  return true;
};

VkSurfaceFormatKHR.byteLength = 0x8;

VkSurfaceFormatKHR.memoryLayout = Object.freeze({
  format: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  colorSpace: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
});
/** VkSwapchainCreateInfoKHR **/
class VkSwapchainCreateInfoKHR {
  constructor(opts) {
    
    this._pNext = null;
    
    this._surface = null;
    
    
    
    this._imageExtent = null;
    
    
    
    
    this._pQueueFamilyIndices = null;
    
    
    
    
    this._oldSwapchain = null;
    this.memoryBuffer = new ArrayBuffer(VkSwapchainCreateInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.surface !== void 0) this.surface = opts.surface;
      if (opts.minImageCount !== void 0) this.minImageCount = opts.minImageCount;
      if (opts.imageFormat !== void 0) this.imageFormat = opts.imageFormat;
      if (opts.imageColorSpace !== void 0) this.imageColorSpace = opts.imageColorSpace;
      if (opts.imageExtent !== void 0) this.imageExtent = opts.imageExtent;
      if (opts.imageArrayLayers !== void 0) this.imageArrayLayers = opts.imageArrayLayers;
      if (opts.imageUsage !== void 0) this.imageUsage = opts.imageUsage;
      if (opts.imageSharingMode !== void 0) this.imageSharingMode = opts.imageSharingMode;
      if (opts.queueFamilyIndexCount !== void 0) this.queueFamilyIndexCount = opts.queueFamilyIndexCount;
      if (opts.pQueueFamilyIndices !== void 0) this.pQueueFamilyIndices = opts.pQueueFamilyIndices;
      if (opts.preTransform !== void 0) this.preTransform = opts.preTransform;
      if (opts.compositeAlpha !== void 0) this.compositeAlpha = opts.compositeAlpha;
      if (opts.presentMode !== void 0) this.presentMode = opts.presentMode;
      if (opts.clipped !== void 0) this.clipped = opts.clipped;
      if (opts.oldSwapchain !== void 0) this.oldSwapchain = opts.oldSwapchain;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get flags() {
    return this.memoryView.getInt32(0x10);
  }
  set flags(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get surface() {
    return this._surface;
  }
  set surface(value) {
    if (value !== null && value.constructor === VkSurfaceKHR) {
      value.flush();
      this._surface = value;
      this.memoryView.setBigInt64(0x18, value.memoryAddress);
    } else if (value === null) {
      this._surface = null;
    } else {
      throw new TypeError("Invalid type for 'VkSwapchainCreateInfoKHR.surface': Expected 'VkSurfaceKHR' but got '" + value.constructor.name + "'");
    }
  }
  get minImageCount() {
    return this.memoryView.getUint32(0x20);
  }
  set minImageCount(value) {
    this.memoryView.setUint32(0x20, value);
  }
  get imageFormat() {
    return this.memoryView.getInt32(0x24);
  }
  set imageFormat(value) {
    this.memoryView.setInt32(0x24, value);
  }
  get imageColorSpace() {
    return this.memoryView.getInt32(0x28);
  }
  set imageColorSpace(value) {
    this.memoryView.setInt32(0x28, value);
  }
  get imageExtent() {
    return this._imageExtent;
  }
  set imageExtent(value) {
    if (value !== null && value.constructor === VkExtent2D) {
      value.flush();
      this._imageExtent = value;
      this.memoryView.setBigInt64(0x2C, value.memoryAddress);
    } else if (value === null) {
      this._imageExtent = null;
    } else {
      throw new TypeError("Invalid type for 'VkSwapchainCreateInfoKHR.imageExtent': Expected 'VkExtent2D' but got '" + value.constructor.name + "'");
    }
  }
  get imageArrayLayers() {
    return this.memoryView.getUint32(0x34);
  }
  set imageArrayLayers(value) {
    this.memoryView.setUint32(0x34, value);
  }
  get imageUsage() {
    return this.memoryView.getInt32(0x38);
  }
  set imageUsage(value) {
    this.memoryView.setInt32(0x38, value);
  }
  get imageSharingMode() {
    return this.memoryView.getInt32(0x3C);
  }
  set imageSharingMode(value) {
    this.memoryView.setInt32(0x3C, value);
  }
  get queueFamilyIndexCount() {
    return this.memoryView.getUint32(0x40);
  }
  set queueFamilyIndexCount(value) {
    this.memoryView.setUint32(0x40, value);
  }
  get pQueueFamilyIndices() {
    return this._pQueueFamilyIndices;
  }
  set pQueueFamilyIndices(value) {
    if (value !== null && value.constructor === Uint32Array) {
      this._pQueueFamilyIndices = value;
      this.memoryView.setBigInt64(0x48, getAddressFromArrayBuffer(value.buffer));
    } else if (value === null) {
      this._pQueueFamilyIndices = null;
    } else {
      throw new TypeError("Invalid type for 'VkSwapchainCreateInfoKHR.pQueueFamilyIndices': Expected 'Uint32Array' but got '" + value.constructor.name + "'");
    }
  }
  get preTransform() {
    return this.memoryView.getInt32(0x50);
  }
  set preTransform(value) {
    this.memoryView.setInt32(0x50, value);
  }
  get compositeAlpha() {
    return this.memoryView.getInt32(0x54);
  }
  set compositeAlpha(value) {
    this.memoryView.setInt32(0x54, value);
  }
  get presentMode() {
    return this.memoryView.getInt32(0x58);
  }
  set presentMode(value) {
    this.memoryView.setInt32(0x58, value);
  }
  get clipped() {
    return this.memoryView.getUint32(0x5C);
  }
  set clipped(value) {
    this.memoryView.setUint32(0x5C, value);
  }
  get oldSwapchain() {
    return this._oldSwapchain;
  }
  set oldSwapchain(value) {
    if (value !== null && value.constructor === VkSwapchainKHR) {
      value.flush();
      this._oldSwapchain = value;
      this.memoryView.setBigInt64(0x60, value.memoryAddress);
    } else if (value === null) {
      this._oldSwapchain = null;
    } else {
      throw new TypeError("Invalid type for 'VkSwapchainCreateInfoKHR.oldSwapchain': Expected 'VkSwapchainKHR' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkSwapchainCreateInfoKHR.prototype.flush = function flush() {
  
  
  
  
  
  return true;
};

VkSwapchainCreateInfoKHR.byteLength = 0x68;

VkSwapchainCreateInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  surface: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  minImageCount: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  imageFormat: Object.freeze({
    byteOffset: 0x24,
    byteLength: 0x4
  }),
  imageColorSpace: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x4
  }),
  imageExtent: Object.freeze({
    byteOffset: 0x2C,
    byteLength: 0x8
  }),
  imageArrayLayers: Object.freeze({
    byteOffset: 0x34,
    byteLength: 0x4
  }),
  imageUsage: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x4
  }),
  imageSharingMode: Object.freeze({
    byteOffset: 0x3C,
    byteLength: 0x4
  }),
  queueFamilyIndexCount: Object.freeze({
    byteOffset: 0x40,
    byteLength: 0x4
  }),
  pQueueFamilyIndices: Object.freeze({
    byteOffset: 0x48,
    byteLength: 0x8
  }),
  preTransform: Object.freeze({
    byteOffset: 0x50,
    byteLength: 0x4
  }),
  compositeAlpha: Object.freeze({
    byteOffset: 0x54,
    byteLength: 0x4
  }),
  presentMode: Object.freeze({
    byteOffset: 0x58,
    byteLength: 0x4
  }),
  clipped: Object.freeze({
    byteOffset: 0x5C,
    byteLength: 0x4
  }),
  oldSwapchain: Object.freeze({
    byteOffset: 0x60,
    byteLength: 0x8
  }),
});
/** VkPresentInfoKHR **/
class VkPresentInfoKHR {
  constructor(opts) {
    
    this._pNext = null;
    
    this._pWaitSemaphores = null;
    this._pWaitSemaphoresNative = null;
    
    this._pSwapchains = null;
    this._pSwapchainsNative = null;
    this._pImageIndices = null;
    this._pResults = null;
    this.memoryBuffer = new ArrayBuffer(VkPresentInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.waitSemaphoreCount !== void 0) this.waitSemaphoreCount = opts.waitSemaphoreCount;
      if (opts.pWaitSemaphores !== void 0) this.pWaitSemaphores = opts.pWaitSemaphores;
      if (opts.swapchainCount !== void 0) this.swapchainCount = opts.swapchainCount;
      if (opts.pSwapchains !== void 0) this.pSwapchains = opts.pSwapchains;
      if (opts.pImageIndices !== void 0) this.pImageIndices = opts.pImageIndices;
      if (opts.pResults !== void 0) this.pResults = opts.pResults;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get waitSemaphoreCount() {
    return this.memoryView.getUint32(0x10);
  }
  set waitSemaphoreCount(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get pWaitSemaphores() {
    return this._pWaitSemaphores;
  }
  set pWaitSemaphores(value) {
    if (value !== null && value.constructor === Array) {
      this._pWaitSemaphores = value;
    } else if (value === null) {
      this._pWaitSemaphores = null;
    } else {
      throw new TypeError("Invalid type for 'VkPresentInfoKHR.pWaitSemaphores': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get swapchainCount() {
    return this.memoryView.getUint32(0x20);
  }
  set swapchainCount(value) {
    this.memoryView.setUint32(0x20, value);
  }
  get pSwapchains() {
    return this._pSwapchains;
  }
  set pSwapchains(value) {
    if (value !== null && value.constructor === Array) {
      this._pSwapchains = value;
    } else if (value === null) {
      this._pSwapchains = null;
    } else {
      throw new TypeError("Invalid type for 'VkPresentInfoKHR.pSwapchains': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get pImageIndices() {
    return this._pImageIndices;
  }
  set pImageIndices(value) {
    if (value !== null && value.constructor === Uint32Array) {
      this._pImageIndices = value;
      this.memoryView.setBigInt64(0x30, getAddressFromArrayBuffer(value.buffer));
    } else if (value === null) {
      this._pImageIndices = null;
    } else {
      throw new TypeError("Invalid type for 'VkPresentInfoKHR.pImageIndices': Expected 'Uint32Array' but got '" + value.constructor.name + "'");
    }
  }
  get pResults() {
    return this._pResults;
  }
  set pResults(value) {
    if (value !== null && value.constructor === Int32Array) {
      this._pResults = value;
      this.memoryView.setBigInt64(0x38, getAddressFromArrayBuffer(value.buffer));
    } else if (value === null) {
      this._pResults = null;
    } else {
      throw new TypeError("Invalid type for 'VkPresentInfoKHR.pResults': Expected 'Int32Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkPresentInfoKHR.prototype.flush = function flush() {
  
  
  
  
  if (this._pWaitSemaphores !== null) {
    let nativeArray = new NativeObjectArray(this._pWaitSemaphores);
    this._pWaitSemaphoresNative = nativeArray;
    this.memoryView.setBigInt64(0x18, nativeArray.address);
  }
  
  
  if (this._pSwapchains !== null) {
    let nativeArray = new NativeObjectArray(this._pSwapchains);
    this._pSwapchainsNative = nativeArray;
    this.memoryView.setBigInt64(0x28, nativeArray.address);
  }
  
  return true;
};

VkPresentInfoKHR.byteLength = 0x40;

VkPresentInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  waitSemaphoreCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pWaitSemaphores: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  swapchainCount: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  pSwapchains: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
  pImageIndices: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x8
  }),
  pResults: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x8
  }),
});
/** VkDebugReportCallbackCreateInfoEXT **/
class VkDebugReportCallbackCreateInfoEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    this._pUserData = null;
    this.memoryBuffer = new ArrayBuffer(VkDebugReportCallbackCreateInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.pUserData !== void 0) this.pUserData = opts.pUserData;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get flags() {
    return this.memoryView.getInt32(0x10);
  }
  set flags(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get pUserData() {
    return this._pUserData;
  }
  set pUserData(value) {
    if (value !== null && value.constructor === ArrayBuffer) {
      this._pUserData = value;
      this.memoryView.setBigInt64(0x20, getAddressFromArrayBuffer(value.buffer));
    } else if (value === null) {
      this._pUserData = null;
    } else {
      throw new TypeError("Invalid type for 'VkDebugReportCallbackCreateInfoEXT.pUserData': Expected 'ArrayBuffer' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkDebugReportCallbackCreateInfoEXT.prototype.flush = function flush() {
  
  
  
  return true;
};

VkDebugReportCallbackCreateInfoEXT.byteLength = 0x28;

VkDebugReportCallbackCreateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pUserData: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
});
/** VkValidationFlagsEXT **/
class VkValidationFlagsEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    this._pDisabledValidationChecks = null;
    this.memoryBuffer = new ArrayBuffer(VkValidationFlagsEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.disabledValidationCheckCount !== void 0) this.disabledValidationCheckCount = opts.disabledValidationCheckCount;
      if (opts.pDisabledValidationChecks !== void 0) this.pDisabledValidationChecks = opts.pDisabledValidationChecks;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get disabledValidationCheckCount() {
    return this.memoryView.getUint32(0x10);
  }
  set disabledValidationCheckCount(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get pDisabledValidationChecks() {
    return this._pDisabledValidationChecks;
  }
  set pDisabledValidationChecks(value) {
    if (value !== null && value.constructor === Int32Array) {
      this._pDisabledValidationChecks = value;
      this.memoryView.setBigInt64(0x18, getAddressFromArrayBuffer(value.buffer));
    } else if (value === null) {
      this._pDisabledValidationChecks = null;
    } else {
      throw new TypeError("Invalid type for 'VkValidationFlagsEXT.pDisabledValidationChecks': Expected 'Int32Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkValidationFlagsEXT.prototype.flush = function flush() {
  
  
  
  return true;
};

VkValidationFlagsEXT.byteLength = 0x20;

VkValidationFlagsEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  disabledValidationCheckCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pDisabledValidationChecks: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkValidationFeaturesEXT **/
class VkValidationFeaturesEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    this._pEnabledValidationFeatures = null;
    
    this._pDisabledValidationFeatures = null;
    this.memoryBuffer = new ArrayBuffer(VkValidationFeaturesEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.enabledValidationFeatureCount !== void 0) this.enabledValidationFeatureCount = opts.enabledValidationFeatureCount;
      if (opts.pEnabledValidationFeatures !== void 0) this.pEnabledValidationFeatures = opts.pEnabledValidationFeatures;
      if (opts.disabledValidationFeatureCount !== void 0) this.disabledValidationFeatureCount = opts.disabledValidationFeatureCount;
      if (opts.pDisabledValidationFeatures !== void 0) this.pDisabledValidationFeatures = opts.pDisabledValidationFeatures;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get enabledValidationFeatureCount() {
    return this.memoryView.getUint32(0x10);
  }
  set enabledValidationFeatureCount(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get pEnabledValidationFeatures() {
    return this._pEnabledValidationFeatures;
  }
  set pEnabledValidationFeatures(value) {
    if (value !== null && value.constructor === Int32Array) {
      this._pEnabledValidationFeatures = value;
      this.memoryView.setBigInt64(0x18, getAddressFromArrayBuffer(value.buffer));
    } else if (value === null) {
      this._pEnabledValidationFeatures = null;
    } else {
      throw new TypeError("Invalid type for 'VkValidationFeaturesEXT.pEnabledValidationFeatures': Expected 'Int32Array' but got '" + value.constructor.name + "'");
    }
  }
  get disabledValidationFeatureCount() {
    return this.memoryView.getUint32(0x20);
  }
  set disabledValidationFeatureCount(value) {
    this.memoryView.setUint32(0x20, value);
  }
  get pDisabledValidationFeatures() {
    return this._pDisabledValidationFeatures;
  }
  set pDisabledValidationFeatures(value) {
    if (value !== null && value.constructor === Int32Array) {
      this._pDisabledValidationFeatures = value;
      this.memoryView.setBigInt64(0x28, getAddressFromArrayBuffer(value.buffer));
    } else if (value === null) {
      this._pDisabledValidationFeatures = null;
    } else {
      throw new TypeError("Invalid type for 'VkValidationFeaturesEXT.pDisabledValidationFeatures': Expected 'Int32Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkValidationFeaturesEXT.prototype.flush = function flush() {
  
  
  
  return true;
};

VkValidationFeaturesEXT.byteLength = 0x30;

VkValidationFeaturesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  enabledValidationFeatureCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pEnabledValidationFeatures: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  disabledValidationFeatureCount: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  pDisabledValidationFeatures: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
});
/** VkPipelineRasterizationStateRasterizationOrderAMD **/
class VkPipelineRasterizationStateRasterizationOrderAMD {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkPipelineRasterizationStateRasterizationOrderAMD.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.rasterizationOrder !== void 0) this.rasterizationOrder = opts.rasterizationOrder;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get rasterizationOrder() {
    return this.memoryView.getInt32(0x10);
  }
  set rasterizationOrder(value) {
    this.memoryView.setInt32(0x10, value);
  }
  
};

VkPipelineRasterizationStateRasterizationOrderAMD.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPipelineRasterizationStateRasterizationOrderAMD.byteLength = 0x18;

VkPipelineRasterizationStateRasterizationOrderAMD.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  rasterizationOrder: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkDebugMarkerObjectNameInfoEXT **/
class VkDebugMarkerObjectNameInfoEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    
    this._pObjectName = null;
    this.memoryBuffer = new ArrayBuffer(VkDebugMarkerObjectNameInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.objectType !== void 0) this.objectType = opts.objectType;
      if (opts.object !== void 0) this.object = opts.object;
      if (opts.pObjectName !== void 0) this.pObjectName = opts.pObjectName;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get objectType() {
    return this.memoryView.getInt32(0x10);
  }
  set objectType(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get object() {
    return this.memoryView.getBigUint64(0x18);
  }
  set object(value) {
    this.memoryView.setBigUint64(0x18, value);
  }
  get pObjectName() {
    if (this._pObjectName !== null) {
      let str = textDecoder.decode(this._pObjectName);
      return str.substr(0, str.length - 1);
    } else {
      return null;
    }
  }
  set pObjectName(value) {
    if (value !== null && value.constructor === String) {
      this._pObjectName = textEncoder.encode(value + String.fromCharCode(0x0)).buffer;
      this.memoryView.setBigInt64(0x20, getAddressFromArrayBuffer(this._pObjectName));
    } else if (value === null) {
      this._pObjectName = null;
      this.memoryView.setBigInt64(0x20, 0n);
    } else {
      throw new TypeError("Invalid type for 'VkDebugMarkerObjectNameInfoEXT.pObjectName': Expected 'String' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkDebugMarkerObjectNameInfoEXT.prototype.flush = function flush() {
  
  
  
  return true;
};

VkDebugMarkerObjectNameInfoEXT.byteLength = 0x28;

VkDebugMarkerObjectNameInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  objectType: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  object: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  pObjectName: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
});
/** VkDebugMarkerObjectTagInfoEXT **/
class VkDebugMarkerObjectTagInfoEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    
    
    
    this._pTag = null;
    this.memoryBuffer = new ArrayBuffer(VkDebugMarkerObjectTagInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.objectType !== void 0) this.objectType = opts.objectType;
      if (opts.object !== void 0) this.object = opts.object;
      if (opts.tagName !== void 0) this.tagName = opts.tagName;
      if (opts.tagSize !== void 0) this.tagSize = opts.tagSize;
      if (opts.pTag !== void 0) this.pTag = opts.pTag;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get objectType() {
    return this.memoryView.getInt32(0x10);
  }
  set objectType(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get object() {
    return this.memoryView.getBigUint64(0x18);
  }
  set object(value) {
    this.memoryView.setBigUint64(0x18, value);
  }
  get tagName() {
    return this.memoryView.getBigUint64(0x20);
  }
  set tagName(value) {
    this.memoryView.setBigUint64(0x20, value);
  }
  get tagSize() {
    return this.memoryView.getBigInt64(0x28);
  }
  set tagSize(value) {
    this.memoryView.setBigInt64(0x28, value);
  }
  get pTag() {
    return this._pTag;
  }
  set pTag(value) {
    if (value !== null && value.constructor === ArrayBuffer) {
      this._pTag = value;
      this.memoryView.setBigInt64(0x30, getAddressFromArrayBuffer(value.buffer));
    } else if (value === null) {
      this._pTag = null;
    } else {
      throw new TypeError("Invalid type for 'VkDebugMarkerObjectTagInfoEXT.pTag': Expected 'ArrayBuffer' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkDebugMarkerObjectTagInfoEXT.prototype.flush = function flush() {
  
  
  
  return true;
};

VkDebugMarkerObjectTagInfoEXT.byteLength = 0x38;

VkDebugMarkerObjectTagInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  objectType: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  object: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  tagName: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
  tagSize: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
  pTag: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x8
  }),
});
/** VkDebugMarkerMarkerInfoEXT **/
class VkDebugMarkerMarkerInfoEXT {
  constructor(opts) {
    
    this._pNext = null;
    this._pMarkerName = null;
    this._color = null;
    this.memoryBuffer = new ArrayBuffer(VkDebugMarkerMarkerInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.pMarkerName !== void 0) this.pMarkerName = opts.pMarkerName;
      if (opts.color !== void 0) this.color = opts.color;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get pMarkerName() {
    if (this._pMarkerName !== null) {
      let str = textDecoder.decode(this._pMarkerName);
      return str.substr(0, str.length - 1);
    } else {
      return null;
    }
  }
  set pMarkerName(value) {
    if (value !== null && value.constructor === String) {
      this._pMarkerName = textEncoder.encode(value + String.fromCharCode(0x0)).buffer;
      this.memoryView.setBigInt64(0x10, getAddressFromArrayBuffer(this._pMarkerName));
    } else if (value === null) {
      this._pMarkerName = null;
      this.memoryView.setBigInt64(0x10, 0n);
    } else {
      throw new TypeError("Invalid type for 'VkDebugMarkerMarkerInfoEXT.pMarkerName': Expected 'String' but got '" + value.constructor.name + "'");
    }
  }
  get color() {
    return this._color;
  }
  set color(value) {
    if (value !== null && value.constructor === Array) {
      this._color = value;
    } else if (value === null) {
      this._color = null;
    } else {
      throw new TypeError("Invalid type for 'VkDebugMarkerMarkerInfoEXT.color': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkDebugMarkerMarkerInfoEXT.prototype.flush = function flush() {
  
  
  
  
  if (this._color !== null) {
    let array = this._color;
    for (let ii = 0; ii < array.length; ++ii) {
      this.memoryView.setFloat32(0x18, array[ii]);
    };
  }
  
  return true;
};

VkDebugMarkerMarkerInfoEXT.byteLength = 0x28;

VkDebugMarkerMarkerInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  pMarkerName: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  color: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x10
  }),
});
/** VkDedicatedAllocationImageCreateInfoNV **/
class VkDedicatedAllocationImageCreateInfoNV {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkDedicatedAllocationImageCreateInfoNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.dedicatedAllocation !== void 0) this.dedicatedAllocation = opts.dedicatedAllocation;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get dedicatedAllocation() {
    return this.memoryView.getUint32(0x10);
  }
  set dedicatedAllocation(value) {
    this.memoryView.setUint32(0x10, value);
  }
  
};

VkDedicatedAllocationImageCreateInfoNV.prototype.flush = function flush() {
  
  
  
  return true;
};

VkDedicatedAllocationImageCreateInfoNV.byteLength = 0x18;

VkDedicatedAllocationImageCreateInfoNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  dedicatedAllocation: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkDedicatedAllocationBufferCreateInfoNV **/
class VkDedicatedAllocationBufferCreateInfoNV {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkDedicatedAllocationBufferCreateInfoNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.dedicatedAllocation !== void 0) this.dedicatedAllocation = opts.dedicatedAllocation;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get dedicatedAllocation() {
    return this.memoryView.getUint32(0x10);
  }
  set dedicatedAllocation(value) {
    this.memoryView.setUint32(0x10, value);
  }
  
};

VkDedicatedAllocationBufferCreateInfoNV.prototype.flush = function flush() {
  
  
  
  return true;
};

VkDedicatedAllocationBufferCreateInfoNV.byteLength = 0x18;

VkDedicatedAllocationBufferCreateInfoNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  dedicatedAllocation: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkDedicatedAllocationMemoryAllocateInfoNV **/
class VkDedicatedAllocationMemoryAllocateInfoNV {
  constructor(opts) {
    
    this._pNext = null;
    this._image = null;
    this._buffer = null;
    this.memoryBuffer = new ArrayBuffer(VkDedicatedAllocationMemoryAllocateInfoNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.image !== void 0) this.image = opts.image;
      if (opts.buffer !== void 0) this.buffer = opts.buffer;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get image() {
    return this._image;
  }
  set image(value) {
    if (value !== null && value.constructor === VkImage) {
      value.flush();
      this._image = value;
      this.memoryView.setBigInt64(0x10, value.memoryAddress);
    } else if (value === null) {
      this._image = null;
    } else {
      throw new TypeError("Invalid type for 'VkDedicatedAllocationMemoryAllocateInfoNV.image': Expected 'VkImage' but got '" + value.constructor.name + "'");
    }
  }
  get buffer() {
    return this._buffer;
  }
  set buffer(value) {
    if (value !== null && value.constructor === VkBuffer) {
      value.flush();
      this._buffer = value;
      this.memoryView.setBigInt64(0x18, value.memoryAddress);
    } else if (value === null) {
      this._buffer = null;
    } else {
      throw new TypeError("Invalid type for 'VkDedicatedAllocationMemoryAllocateInfoNV.buffer': Expected 'VkBuffer' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkDedicatedAllocationMemoryAllocateInfoNV.prototype.flush = function flush() {
  
  
  
  return true;
};

VkDedicatedAllocationMemoryAllocateInfoNV.byteLength = 0x20;

VkDedicatedAllocationMemoryAllocateInfoNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  image: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  buffer: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkExternalImageFormatPropertiesNV **/
class VkExternalImageFormatPropertiesNV {
  constructor(opts) {
    this._imageFormatProperties = null;
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkExternalImageFormatPropertiesNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      
    }
  }
  get imageFormatProperties() {
    return this._imageFormatProperties;
  }
  get externalMemoryFeatures() {
    return this.memoryView.getInt32(0x20);
  }
  get exportFromImportedHandleTypes() {
    return this.memoryView.getInt32(0x24);
  }
  get compatibleHandleTypes() {
    return this.memoryView.getInt32(0x28);
  }
  
};

VkExternalImageFormatPropertiesNV.prototype.flush = function flush() {
  
  
  
  return true;
};

VkExternalImageFormatPropertiesNV.byteLength = 0x30;

VkExternalImageFormatPropertiesNV.memoryLayout = Object.freeze({
  imageFormatProperties: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x20
  }),
  externalMemoryFeatures: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  exportFromImportedHandleTypes: Object.freeze({
    byteOffset: 0x24,
    byteLength: 0x4
  }),
  compatibleHandleTypes: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x4
  }),
});
/** VkExternalMemoryImageCreateInfoNV **/
class VkExternalMemoryImageCreateInfoNV {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkExternalMemoryImageCreateInfoNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleTypes !== void 0) this.handleTypes = opts.handleTypes;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get handleTypes() {
    return this.memoryView.getInt32(0x10);
  }
  set handleTypes(value) {
    this.memoryView.setInt32(0x10, value);
  }
  
};

VkExternalMemoryImageCreateInfoNV.prototype.flush = function flush() {
  
  
  
  return true;
};

VkExternalMemoryImageCreateInfoNV.byteLength = 0x18;

VkExternalMemoryImageCreateInfoNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  handleTypes: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkExportMemoryAllocateInfoNV **/
class VkExportMemoryAllocateInfoNV {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkExportMemoryAllocateInfoNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleTypes !== void 0) this.handleTypes = opts.handleTypes;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get handleTypes() {
    return this.memoryView.getInt32(0x10);
  }
  set handleTypes(value) {
    this.memoryView.setInt32(0x10, value);
  }
  
};

VkExportMemoryAllocateInfoNV.prototype.flush = function flush() {
  
  
  
  return true;
};

VkExportMemoryAllocateInfoNV.byteLength = 0x18;

VkExportMemoryAllocateInfoNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  handleTypes: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkImportMemoryWin32HandleInfoNV **/
class VkImportMemoryWin32HandleInfoNV {
  constructor(opts) {
    
    this._pNext = null;
    
    
    this.memoryBuffer = new ArrayBuffer(VkImportMemoryWin32HandleInfoNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      if (opts.handle !== void 0) this.handle = opts.handle;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get handleType() {
    return this.memoryView.getInt32(0x10);
  }
  set handleType(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get handle() {
    return this.memoryView.getBigInt64(0x18);
  }
  set handle(value) {
    this.memoryView.setBigInt64(0x18, value);
  }
  
};

VkImportMemoryWin32HandleInfoNV.prototype.flush = function flush() {
  
  
  
  return true;
};

VkImportMemoryWin32HandleInfoNV.byteLength = 0x20;

VkImportMemoryWin32HandleInfoNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  handleType: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  handle: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkExportMemoryWin32HandleInfoNV **/
class VkExportMemoryWin32HandleInfoNV {
  constructor(opts) {
    
    this._pNext = null;
    this.memoryBuffer = new ArrayBuffer(VkExportMemoryWin32HandleInfoNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  
};

VkExportMemoryWin32HandleInfoNV.prototype.flush = function flush() {
  
  
  
  return true;
};

VkExportMemoryWin32HandleInfoNV.byteLength = 0x20;

VkExportMemoryWin32HandleInfoNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
});
/** VkWin32KeyedMutexAcquireReleaseInfoNV **/
class VkWin32KeyedMutexAcquireReleaseInfoNV {
  constructor(opts) {
    
    this._pNext = null;
    
    this._pAcquireSyncs = null;
    this._pAcquireSyncsNative = null;
    this._pAcquireKeys = null;
    this._pAcquireTimeoutMilliseconds = null;
    
    this._pReleaseSyncs = null;
    this._pReleaseSyncsNative = null;
    this._pReleaseKeys = null;
    this.memoryBuffer = new ArrayBuffer(VkWin32KeyedMutexAcquireReleaseInfoNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.acquireCount !== void 0) this.acquireCount = opts.acquireCount;
      if (opts.pAcquireSyncs !== void 0) this.pAcquireSyncs = opts.pAcquireSyncs;
      if (opts.pAcquireKeys !== void 0) this.pAcquireKeys = opts.pAcquireKeys;
      if (opts.pAcquireTimeoutMilliseconds !== void 0) this.pAcquireTimeoutMilliseconds = opts.pAcquireTimeoutMilliseconds;
      if (opts.releaseCount !== void 0) this.releaseCount = opts.releaseCount;
      if (opts.pReleaseSyncs !== void 0) this.pReleaseSyncs = opts.pReleaseSyncs;
      if (opts.pReleaseKeys !== void 0) this.pReleaseKeys = opts.pReleaseKeys;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get acquireCount() {
    return this.memoryView.getUint32(0x10);
  }
  set acquireCount(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get pAcquireSyncs() {
    return this._pAcquireSyncs;
  }
  set pAcquireSyncs(value) {
    if (value !== null && value.constructor === Array) {
      this._pAcquireSyncs = value;
    } else if (value === null) {
      this._pAcquireSyncs = null;
    } else {
      throw new TypeError("Invalid type for 'VkWin32KeyedMutexAcquireReleaseInfoNV.pAcquireSyncs': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get pAcquireKeys() {
    return this._pAcquireKeys;
  }
  set pAcquireKeys(value) {
    if (value !== null && value.constructor === BigUint64Array) {
      this._pAcquireKeys = value;
      this.memoryView.setBigInt64(0x20, getAddressFromArrayBuffer(value.buffer));
    } else if (value === null) {
      this._pAcquireKeys = null;
    } else {
      throw new TypeError("Invalid type for 'VkWin32KeyedMutexAcquireReleaseInfoNV.pAcquireKeys': Expected 'BigUint64Array' but got '" + value.constructor.name + "'");
    }
  }
  get pAcquireTimeoutMilliseconds() {
    return this._pAcquireTimeoutMilliseconds;
  }
  set pAcquireTimeoutMilliseconds(value) {
    if (value !== null && value.constructor === Uint32Array) {
      this._pAcquireTimeoutMilliseconds = value;
      this.memoryView.setBigInt64(0x28, getAddressFromArrayBuffer(value.buffer));
    } else if (value === null) {
      this._pAcquireTimeoutMilliseconds = null;
    } else {
      throw new TypeError("Invalid type for 'VkWin32KeyedMutexAcquireReleaseInfoNV.pAcquireTimeoutMilliseconds': Expected 'Uint32Array' but got '" + value.constructor.name + "'");
    }
  }
  get releaseCount() {
    return this.memoryView.getUint32(0x30);
  }
  set releaseCount(value) {
    this.memoryView.setUint32(0x30, value);
  }
  get pReleaseSyncs() {
    return this._pReleaseSyncs;
  }
  set pReleaseSyncs(value) {
    if (value !== null && value.constructor === Array) {
      this._pReleaseSyncs = value;
    } else if (value === null) {
      this._pReleaseSyncs = null;
    } else {
      throw new TypeError("Invalid type for 'VkWin32KeyedMutexAcquireReleaseInfoNV.pReleaseSyncs': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get pReleaseKeys() {
    return this._pReleaseKeys;
  }
  set pReleaseKeys(value) {
    if (value !== null && value.constructor === BigUint64Array) {
      this._pReleaseKeys = value;
      this.memoryView.setBigInt64(0x40, getAddressFromArrayBuffer(value.buffer));
    } else if (value === null) {
      this._pReleaseKeys = null;
    } else {
      throw new TypeError("Invalid type for 'VkWin32KeyedMutexAcquireReleaseInfoNV.pReleaseKeys': Expected 'BigUint64Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkWin32KeyedMutexAcquireReleaseInfoNV.prototype.flush = function flush() {
  
  
  
  
  if (this._pAcquireSyncs !== null) {
    let nativeArray = new NativeObjectArray(this._pAcquireSyncs);
    this._pAcquireSyncsNative = nativeArray;
    this.memoryView.setBigInt64(0x18, nativeArray.address);
  }
  
  
  if (this._pReleaseSyncs !== null) {
    let nativeArray = new NativeObjectArray(this._pReleaseSyncs);
    this._pReleaseSyncsNative = nativeArray;
    this.memoryView.setBigInt64(0x38, nativeArray.address);
  }
  
  return true;
};

VkWin32KeyedMutexAcquireReleaseInfoNV.byteLength = 0x48;

VkWin32KeyedMutexAcquireReleaseInfoNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  acquireCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pAcquireSyncs: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  pAcquireKeys: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
  pAcquireTimeoutMilliseconds: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
  releaseCount: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  pReleaseSyncs: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x8
  }),
  pReleaseKeys: Object.freeze({
    byteOffset: 0x40,
    byteLength: 0x8
  }),
});
/** VkDeviceGeneratedCommandsFeaturesNVX **/
class VkDeviceGeneratedCommandsFeaturesNVX {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkDeviceGeneratedCommandsFeaturesNVX.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_FEATURES_NVX;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.computeBindingPointSupport !== void 0) this.computeBindingPointSupport = opts.computeBindingPointSupport;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get computeBindingPointSupport() {
    return this.memoryView.getUint32(0x10);
  }
  set computeBindingPointSupport(value) {
    this.memoryView.setUint32(0x10, value);
  }
  
};

VkDeviceGeneratedCommandsFeaturesNVX.prototype.flush = function flush() {
  
  
  
  return true;
};

VkDeviceGeneratedCommandsFeaturesNVX.byteLength = 0x18;

VkDeviceGeneratedCommandsFeaturesNVX.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  computeBindingPointSupport: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkDeviceGeneratedCommandsLimitsNVX **/
class VkDeviceGeneratedCommandsLimitsNVX {
  constructor(opts) {
    
    this._pNext = null;
    
    
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkDeviceGeneratedCommandsLimitsNVX.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_LIMITS_NVX;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.maxIndirectCommandsLayoutTokenCount !== void 0) this.maxIndirectCommandsLayoutTokenCount = opts.maxIndirectCommandsLayoutTokenCount;
      if (opts.maxObjectEntryCounts !== void 0) this.maxObjectEntryCounts = opts.maxObjectEntryCounts;
      if (opts.minSequenceCountBufferOffsetAlignment !== void 0) this.minSequenceCountBufferOffsetAlignment = opts.minSequenceCountBufferOffsetAlignment;
      if (opts.minSequenceIndexBufferOffsetAlignment !== void 0) this.minSequenceIndexBufferOffsetAlignment = opts.minSequenceIndexBufferOffsetAlignment;
      if (opts.minCommandsTokenBufferOffsetAlignment !== void 0) this.minCommandsTokenBufferOffsetAlignment = opts.minCommandsTokenBufferOffsetAlignment;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get maxIndirectCommandsLayoutTokenCount() {
    return this.memoryView.getUint32(0x10);
  }
  set maxIndirectCommandsLayoutTokenCount(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get maxObjectEntryCounts() {
    return this.memoryView.getUint32(0x14);
  }
  set maxObjectEntryCounts(value) {
    this.memoryView.setUint32(0x14, value);
  }
  get minSequenceCountBufferOffsetAlignment() {
    return this.memoryView.getUint32(0x18);
  }
  set minSequenceCountBufferOffsetAlignment(value) {
    this.memoryView.setUint32(0x18, value);
  }
  get minSequenceIndexBufferOffsetAlignment() {
    return this.memoryView.getUint32(0x1C);
  }
  set minSequenceIndexBufferOffsetAlignment(value) {
    this.memoryView.setUint32(0x1C, value);
  }
  get minCommandsTokenBufferOffsetAlignment() {
    return this.memoryView.getUint32(0x20);
  }
  set minCommandsTokenBufferOffsetAlignment(value) {
    this.memoryView.setUint32(0x20, value);
  }
  
};

VkDeviceGeneratedCommandsLimitsNVX.prototype.flush = function flush() {
  
  
  
  return true;
};

VkDeviceGeneratedCommandsLimitsNVX.byteLength = 0x28;

VkDeviceGeneratedCommandsLimitsNVX.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  maxIndirectCommandsLayoutTokenCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  maxObjectEntryCounts: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  minSequenceCountBufferOffsetAlignment: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  minSequenceIndexBufferOffsetAlignment: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  minCommandsTokenBufferOffsetAlignment: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
});
/** VkIndirectCommandsTokenNVX **/
class VkIndirectCommandsTokenNVX {
  constructor(opts) {
    
    this._buffer = null;
    
    this.memoryBuffer = new ArrayBuffer(VkIndirectCommandsTokenNVX.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.tokenType !== void 0) this.tokenType = opts.tokenType;
      if (opts.buffer !== void 0) this.buffer = opts.buffer;
      if (opts.offset !== void 0) this.offset = opts.offset;
      
    }
  }
  get tokenType() {
    return this.memoryView.getInt32(0x0);
  }
  set tokenType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get buffer() {
    return this._buffer;
  }
  set buffer(value) {
    if (value !== null && value.constructor === VkBuffer) {
      value.flush();
      this._buffer = value;
      this.memoryView.setBigInt64(0x8, value.memoryAddress);
    } else if (value === null) {
      this._buffer = null;
    } else {
      throw new TypeError("Invalid type for 'VkIndirectCommandsTokenNVX.buffer': Expected 'VkBuffer' but got '" + value.constructor.name + "'");
    }
  }
  get offset() {
    return this.memoryView.getBigUint64(0x10);
  }
  set offset(value) {
    this.memoryView.setBigUint64(0x10, value);
  }
  
};

VkIndirectCommandsTokenNVX.prototype.flush = function flush() {
  
  return true;
};

VkIndirectCommandsTokenNVX.byteLength = 0x18;

VkIndirectCommandsTokenNVX.memoryLayout = Object.freeze({
  tokenType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  buffer: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  offset: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
});
/** VkIndirectCommandsLayoutTokenNVX **/
class VkIndirectCommandsLayoutTokenNVX {
  constructor(opts) {
    
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkIndirectCommandsLayoutTokenNVX.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.tokenType !== void 0) this.tokenType = opts.tokenType;
      if (opts.bindingUnit !== void 0) this.bindingUnit = opts.bindingUnit;
      if (opts.dynamicCount !== void 0) this.dynamicCount = opts.dynamicCount;
      if (opts.divisor !== void 0) this.divisor = opts.divisor;
      
    }
  }
  get tokenType() {
    return this.memoryView.getInt32(0x0);
  }
  set tokenType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get bindingUnit() {
    return this.memoryView.getUint32(0x4);
  }
  set bindingUnit(value) {
    this.memoryView.setUint32(0x4, value);
  }
  get dynamicCount() {
    return this.memoryView.getUint32(0x8);
  }
  set dynamicCount(value) {
    this.memoryView.setUint32(0x8, value);
  }
  get divisor() {
    return this.memoryView.getUint32(0xC);
  }
  set divisor(value) {
    this.memoryView.setUint32(0xC, value);
  }
  
};

VkIndirectCommandsLayoutTokenNVX.prototype.flush = function flush() {
  
  return true;
};

VkIndirectCommandsLayoutTokenNVX.byteLength = 0x10;

VkIndirectCommandsLayoutTokenNVX.memoryLayout = Object.freeze({
  tokenType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  bindingUnit: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  dynamicCount: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
  divisor: Object.freeze({
    byteOffset: 0xC,
    byteLength: 0x4
  }),
});
/** VkIndirectCommandsLayoutCreateInfoNVX **/
class VkIndirectCommandsLayoutCreateInfoNVX {
  constructor(opts) {
    
    this._pNext = null;
    
    
    
    this._pTokens = null;
    this._pTokensNative = null;
    this.memoryBuffer = new ArrayBuffer(VkIndirectCommandsLayoutCreateInfoNVX.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NVX;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.pipelineBindPoint !== void 0) this.pipelineBindPoint = opts.pipelineBindPoint;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.tokenCount !== void 0) this.tokenCount = opts.tokenCount;
      if (opts.pTokens !== void 0) this.pTokens = opts.pTokens;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get pipelineBindPoint() {
    return this.memoryView.getInt32(0x10);
  }
  set pipelineBindPoint(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get flags() {
    return this.memoryView.getInt32(0x14);
  }
  set flags(value) {
    this.memoryView.setInt32(0x14, value);
  }
  get tokenCount() {
    return this.memoryView.getUint32(0x18);
  }
  set tokenCount(value) {
    this.memoryView.setUint32(0x18, value);
  }
  get pTokens() {
    return this._pTokens;
  }
  set pTokens(value) {
    if (value !== null && value.constructor === Array) {
      this._pTokens = value;
    } else if (value === null) {
      this._pTokens = null;
    } else {
      throw new TypeError("Invalid type for 'VkIndirectCommandsLayoutCreateInfoNVX.pTokens': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkIndirectCommandsLayoutCreateInfoNVX.prototype.flush = function flush() {
  
  
  
  
  if (this._pTokens !== null) {
    let nativeArray = new NativeObjectArray(this._pTokens);
    this._pTokensNative = nativeArray;
    this.memoryView.setBigInt64(0x20, nativeArray.address);
  }
  
  return true;
};

VkIndirectCommandsLayoutCreateInfoNVX.byteLength = 0x28;

VkIndirectCommandsLayoutCreateInfoNVX.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  pipelineBindPoint: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  flags: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  tokenCount: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  pTokens: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
});
/** VkCmdProcessCommandsInfoNVX **/
class VkCmdProcessCommandsInfoNVX {
  constructor(opts) {
    
    this._pNext = null;
    this._objectTable = null;
    this._indirectCommandsLayout = null;
    
    this._pIndirectCommandsTokens = null;
    this._pIndirectCommandsTokensNative = null;
    
    this._targetCommandBuffer = null;
    this._sequencesCountBuffer = null;
    
    this._sequencesIndexBuffer = null;
    
    this.memoryBuffer = new ArrayBuffer(VkCmdProcessCommandsInfoNVX.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_CMD_PROCESS_COMMANDS_INFO_NVX;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.objectTable !== void 0) this.objectTable = opts.objectTable;
      if (opts.indirectCommandsLayout !== void 0) this.indirectCommandsLayout = opts.indirectCommandsLayout;
      if (opts.indirectCommandsTokenCount !== void 0) this.indirectCommandsTokenCount = opts.indirectCommandsTokenCount;
      if (opts.pIndirectCommandsTokens !== void 0) this.pIndirectCommandsTokens = opts.pIndirectCommandsTokens;
      if (opts.maxSequencesCount !== void 0) this.maxSequencesCount = opts.maxSequencesCount;
      if (opts.targetCommandBuffer !== void 0) this.targetCommandBuffer = opts.targetCommandBuffer;
      if (opts.sequencesCountBuffer !== void 0) this.sequencesCountBuffer = opts.sequencesCountBuffer;
      if (opts.sequencesCountOffset !== void 0) this.sequencesCountOffset = opts.sequencesCountOffset;
      if (opts.sequencesIndexBuffer !== void 0) this.sequencesIndexBuffer = opts.sequencesIndexBuffer;
      if (opts.sequencesIndexOffset !== void 0) this.sequencesIndexOffset = opts.sequencesIndexOffset;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get objectTable() {
    return this._objectTable;
  }
  set objectTable(value) {
    if (value !== null && value.constructor === VkObjectTableNVX) {
      value.flush();
      this._objectTable = value;
      this.memoryView.setBigInt64(0x10, value.memoryAddress);
    } else if (value === null) {
      this._objectTable = null;
    } else {
      throw new TypeError("Invalid type for 'VkCmdProcessCommandsInfoNVX.objectTable': Expected 'VkObjectTableNVX' but got '" + value.constructor.name + "'");
    }
  }
  get indirectCommandsLayout() {
    return this._indirectCommandsLayout;
  }
  set indirectCommandsLayout(value) {
    if (value !== null && value.constructor === VkIndirectCommandsLayoutNVX) {
      value.flush();
      this._indirectCommandsLayout = value;
      this.memoryView.setBigInt64(0x18, value.memoryAddress);
    } else if (value === null) {
      this._indirectCommandsLayout = null;
    } else {
      throw new TypeError("Invalid type for 'VkCmdProcessCommandsInfoNVX.indirectCommandsLayout': Expected 'VkIndirectCommandsLayoutNVX' but got '" + value.constructor.name + "'");
    }
  }
  get indirectCommandsTokenCount() {
    return this.memoryView.getUint32(0x20);
  }
  set indirectCommandsTokenCount(value) {
    this.memoryView.setUint32(0x20, value);
  }
  get pIndirectCommandsTokens() {
    return this._pIndirectCommandsTokens;
  }
  set pIndirectCommandsTokens(value) {
    if (value !== null && value.constructor === Array) {
      this._pIndirectCommandsTokens = value;
    } else if (value === null) {
      this._pIndirectCommandsTokens = null;
    } else {
      throw new TypeError("Invalid type for 'VkCmdProcessCommandsInfoNVX.pIndirectCommandsTokens': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get maxSequencesCount() {
    return this.memoryView.getUint32(0x30);
  }
  set maxSequencesCount(value) {
    this.memoryView.setUint32(0x30, value);
  }
  get targetCommandBuffer() {
    return this._targetCommandBuffer;
  }
  set targetCommandBuffer(value) {
    if (value !== null && value.constructor === VkCommandBuffer) {
      value.flush();
      this._targetCommandBuffer = value;
      this.memoryView.setBigInt64(0x38, value.memoryAddress);
    } else if (value === null) {
      this._targetCommandBuffer = null;
    } else {
      throw new TypeError("Invalid type for 'VkCmdProcessCommandsInfoNVX.targetCommandBuffer': Expected 'VkCommandBuffer' but got '" + value.constructor.name + "'");
    }
  }
  get sequencesCountBuffer() {
    return this._sequencesCountBuffer;
  }
  set sequencesCountBuffer(value) {
    if (value !== null && value.constructor === VkBuffer) {
      value.flush();
      this._sequencesCountBuffer = value;
      this.memoryView.setBigInt64(0x40, value.memoryAddress);
    } else if (value === null) {
      this._sequencesCountBuffer = null;
    } else {
      throw new TypeError("Invalid type for 'VkCmdProcessCommandsInfoNVX.sequencesCountBuffer': Expected 'VkBuffer' but got '" + value.constructor.name + "'");
    }
  }
  get sequencesCountOffset() {
    return this.memoryView.getBigUint64(0x48);
  }
  set sequencesCountOffset(value) {
    this.memoryView.setBigUint64(0x48, value);
  }
  get sequencesIndexBuffer() {
    return this._sequencesIndexBuffer;
  }
  set sequencesIndexBuffer(value) {
    if (value !== null && value.constructor === VkBuffer) {
      value.flush();
      this._sequencesIndexBuffer = value;
      this.memoryView.setBigInt64(0x50, value.memoryAddress);
    } else if (value === null) {
      this._sequencesIndexBuffer = null;
    } else {
      throw new TypeError("Invalid type for 'VkCmdProcessCommandsInfoNVX.sequencesIndexBuffer': Expected 'VkBuffer' but got '" + value.constructor.name + "'");
    }
  }
  get sequencesIndexOffset() {
    return this.memoryView.getBigUint64(0x58);
  }
  set sequencesIndexOffset(value) {
    this.memoryView.setBigUint64(0x58, value);
  }
  
};

VkCmdProcessCommandsInfoNVX.prototype.flush = function flush() {
  
  
  
  
  if (this._pIndirectCommandsTokens !== null) {
    let nativeArray = new NativeObjectArray(this._pIndirectCommandsTokens);
    this._pIndirectCommandsTokensNative = nativeArray;
    this.memoryView.setBigInt64(0x28, nativeArray.address);
  }
  
  return true;
};

VkCmdProcessCommandsInfoNVX.byteLength = 0x60;

VkCmdProcessCommandsInfoNVX.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  objectTable: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  indirectCommandsLayout: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  indirectCommandsTokenCount: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  pIndirectCommandsTokens: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
  maxSequencesCount: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  targetCommandBuffer: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x8
  }),
  sequencesCountBuffer: Object.freeze({
    byteOffset: 0x40,
    byteLength: 0x8
  }),
  sequencesCountOffset: Object.freeze({
    byteOffset: 0x48,
    byteLength: 0x8
  }),
  sequencesIndexBuffer: Object.freeze({
    byteOffset: 0x50,
    byteLength: 0x8
  }),
  sequencesIndexOffset: Object.freeze({
    byteOffset: 0x58,
    byteLength: 0x8
  }),
});
/** VkCmdReserveSpaceForCommandsInfoNVX **/
class VkCmdReserveSpaceForCommandsInfoNVX {
  constructor(opts) {
    
    this._pNext = null;
    this._objectTable = null;
    this._indirectCommandsLayout = null;
    
    this.memoryBuffer = new ArrayBuffer(VkCmdReserveSpaceForCommandsInfoNVX.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_CMD_RESERVE_SPACE_FOR_COMMANDS_INFO_NVX;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.objectTable !== void 0) this.objectTable = opts.objectTable;
      if (opts.indirectCommandsLayout !== void 0) this.indirectCommandsLayout = opts.indirectCommandsLayout;
      if (opts.maxSequencesCount !== void 0) this.maxSequencesCount = opts.maxSequencesCount;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get objectTable() {
    return this._objectTable;
  }
  set objectTable(value) {
    if (value !== null && value.constructor === VkObjectTableNVX) {
      value.flush();
      this._objectTable = value;
      this.memoryView.setBigInt64(0x10, value.memoryAddress);
    } else if (value === null) {
      this._objectTable = null;
    } else {
      throw new TypeError("Invalid type for 'VkCmdReserveSpaceForCommandsInfoNVX.objectTable': Expected 'VkObjectTableNVX' but got '" + value.constructor.name + "'");
    }
  }
  get indirectCommandsLayout() {
    return this._indirectCommandsLayout;
  }
  set indirectCommandsLayout(value) {
    if (value !== null && value.constructor === VkIndirectCommandsLayoutNVX) {
      value.flush();
      this._indirectCommandsLayout = value;
      this.memoryView.setBigInt64(0x18, value.memoryAddress);
    } else if (value === null) {
      this._indirectCommandsLayout = null;
    } else {
      throw new TypeError("Invalid type for 'VkCmdReserveSpaceForCommandsInfoNVX.indirectCommandsLayout': Expected 'VkIndirectCommandsLayoutNVX' but got '" + value.constructor.name + "'");
    }
  }
  get maxSequencesCount() {
    return this.memoryView.getUint32(0x20);
  }
  set maxSequencesCount(value) {
    this.memoryView.setUint32(0x20, value);
  }
  
};

VkCmdReserveSpaceForCommandsInfoNVX.prototype.flush = function flush() {
  
  
  
  return true;
};

VkCmdReserveSpaceForCommandsInfoNVX.byteLength = 0x28;

VkCmdReserveSpaceForCommandsInfoNVX.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  objectTable: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  indirectCommandsLayout: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  maxSequencesCount: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
});
/** VkObjectTableCreateInfoNVX **/
class VkObjectTableCreateInfoNVX {
  constructor(opts) {
    
    this._pNext = null;
    
    this._pObjectEntryTypes = null;
    this._pObjectEntryCounts = null;
    this._pObjectEntryUsageFlags = null;
    
    
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkObjectTableCreateInfoNVX.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_OBJECT_TABLE_CREATE_INFO_NVX;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.objectCount !== void 0) this.objectCount = opts.objectCount;
      if (opts.pObjectEntryTypes !== void 0) this.pObjectEntryTypes = opts.pObjectEntryTypes;
      if (opts.pObjectEntryCounts !== void 0) this.pObjectEntryCounts = opts.pObjectEntryCounts;
      if (opts.pObjectEntryUsageFlags !== void 0) this.pObjectEntryUsageFlags = opts.pObjectEntryUsageFlags;
      if (opts.maxUniformBuffersPerDescriptor !== void 0) this.maxUniformBuffersPerDescriptor = opts.maxUniformBuffersPerDescriptor;
      if (opts.maxStorageBuffersPerDescriptor !== void 0) this.maxStorageBuffersPerDescriptor = opts.maxStorageBuffersPerDescriptor;
      if (opts.maxStorageImagesPerDescriptor !== void 0) this.maxStorageImagesPerDescriptor = opts.maxStorageImagesPerDescriptor;
      if (opts.maxSampledImagesPerDescriptor !== void 0) this.maxSampledImagesPerDescriptor = opts.maxSampledImagesPerDescriptor;
      if (opts.maxPipelineLayouts !== void 0) this.maxPipelineLayouts = opts.maxPipelineLayouts;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get objectCount() {
    return this.memoryView.getUint32(0x10);
  }
  set objectCount(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get pObjectEntryTypes() {
    return this._pObjectEntryTypes;
  }
  set pObjectEntryTypes(value) {
    if (value !== null && value.constructor === Int32Array) {
      this._pObjectEntryTypes = value;
      this.memoryView.setBigInt64(0x18, getAddressFromArrayBuffer(value.buffer));
    } else if (value === null) {
      this._pObjectEntryTypes = null;
    } else {
      throw new TypeError("Invalid type for 'VkObjectTableCreateInfoNVX.pObjectEntryTypes': Expected 'Int32Array' but got '" + value.constructor.name + "'");
    }
  }
  get pObjectEntryCounts() {
    return this._pObjectEntryCounts;
  }
  set pObjectEntryCounts(value) {
    if (value !== null && value.constructor === Uint32Array) {
      this._pObjectEntryCounts = value;
      this.memoryView.setBigInt64(0x20, getAddressFromArrayBuffer(value.buffer));
    } else if (value === null) {
      this._pObjectEntryCounts = null;
    } else {
      throw new TypeError("Invalid type for 'VkObjectTableCreateInfoNVX.pObjectEntryCounts': Expected 'Uint32Array' but got '" + value.constructor.name + "'");
    }
  }
  get pObjectEntryUsageFlags() {
    return this._pObjectEntryUsageFlags;
  }
  set pObjectEntryUsageFlags(value) {
    if (value !== null && value.constructor === Int32Array) {
      this._pObjectEntryUsageFlags = value;
      this.memoryView.setBigInt64(0x28, getAddressFromArrayBuffer(value.buffer));
    } else if (value === null) {
      this._pObjectEntryUsageFlags = null;
    } else {
      throw new TypeError("Invalid type for 'VkObjectTableCreateInfoNVX.pObjectEntryUsageFlags': Expected 'Int32Array' but got '" + value.constructor.name + "'");
    }
  }
  get maxUniformBuffersPerDescriptor() {
    return this.memoryView.getUint32(0x30);
  }
  set maxUniformBuffersPerDescriptor(value) {
    this.memoryView.setUint32(0x30, value);
  }
  get maxStorageBuffersPerDescriptor() {
    return this.memoryView.getUint32(0x34);
  }
  set maxStorageBuffersPerDescriptor(value) {
    this.memoryView.setUint32(0x34, value);
  }
  get maxStorageImagesPerDescriptor() {
    return this.memoryView.getUint32(0x38);
  }
  set maxStorageImagesPerDescriptor(value) {
    this.memoryView.setUint32(0x38, value);
  }
  get maxSampledImagesPerDescriptor() {
    return this.memoryView.getUint32(0x3C);
  }
  set maxSampledImagesPerDescriptor(value) {
    this.memoryView.setUint32(0x3C, value);
  }
  get maxPipelineLayouts() {
    return this.memoryView.getUint32(0x40);
  }
  set maxPipelineLayouts(value) {
    this.memoryView.setUint32(0x40, value);
  }
  
};

VkObjectTableCreateInfoNVX.prototype.flush = function flush() {
  
  
  
  return true;
};

VkObjectTableCreateInfoNVX.byteLength = 0x48;

VkObjectTableCreateInfoNVX.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  objectCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pObjectEntryTypes: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  pObjectEntryCounts: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
  pObjectEntryUsageFlags: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
  maxUniformBuffersPerDescriptor: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  maxStorageBuffersPerDescriptor: Object.freeze({
    byteOffset: 0x34,
    byteLength: 0x4
  }),
  maxStorageImagesPerDescriptor: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x4
  }),
  maxSampledImagesPerDescriptor: Object.freeze({
    byteOffset: 0x3C,
    byteLength: 0x4
  }),
  maxPipelineLayouts: Object.freeze({
    byteOffset: 0x40,
    byteLength: 0x4
  }),
});
/** VkObjectTableEntryNVX **/
class VkObjectTableEntryNVX {
  constructor(opts) {
    
    
    this.memoryBuffer = new ArrayBuffer(VkObjectTableEntryNVX.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.type !== void 0) this.type = opts.type;
      if (opts.flags !== void 0) this.flags = opts.flags;
      
    }
  }
  get type() {
    return this.memoryView.getInt32(0x0);
  }
  set type(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get flags() {
    return this.memoryView.getInt32(0x4);
  }
  set flags(value) {
    this.memoryView.setInt32(0x4, value);
  }
  
};

VkObjectTableEntryNVX.prototype.flush = function flush() {
  
  return true;
};

VkObjectTableEntryNVX.byteLength = 0x8;

VkObjectTableEntryNVX.memoryLayout = Object.freeze({
  type: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  flags: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
});
/** VkObjectTablePipelineEntryNVX **/
class VkObjectTablePipelineEntryNVX {
  constructor(opts) {
    
    
    this._pipeline = null;
    this.memoryBuffer = new ArrayBuffer(VkObjectTablePipelineEntryNVX.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.type !== void 0) this.type = opts.type;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.pipeline !== void 0) this.pipeline = opts.pipeline;
      
    }
  }
  get type() {
    return this.memoryView.getInt32(0x0);
  }
  set type(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get flags() {
    return this.memoryView.getInt32(0x4);
  }
  set flags(value) {
    this.memoryView.setInt32(0x4, value);
  }
  get pipeline() {
    return this._pipeline;
  }
  set pipeline(value) {
    if (value !== null && value.constructor === VkPipeline) {
      value.flush();
      this._pipeline = value;
      this.memoryView.setBigInt64(0x8, value.memoryAddress);
    } else if (value === null) {
      this._pipeline = null;
    } else {
      throw new TypeError("Invalid type for 'VkObjectTablePipelineEntryNVX.pipeline': Expected 'VkPipeline' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkObjectTablePipelineEntryNVX.prototype.flush = function flush() {
  
  return true;
};

VkObjectTablePipelineEntryNVX.byteLength = 0x10;

VkObjectTablePipelineEntryNVX.memoryLayout = Object.freeze({
  type: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  flags: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  pipeline: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
});
/** VkObjectTableDescriptorSetEntryNVX **/
class VkObjectTableDescriptorSetEntryNVX {
  constructor(opts) {
    
    
    this._pipelineLayout = null;
    this._descriptorSet = null;
    this.memoryBuffer = new ArrayBuffer(VkObjectTableDescriptorSetEntryNVX.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.type !== void 0) this.type = opts.type;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.pipelineLayout !== void 0) this.pipelineLayout = opts.pipelineLayout;
      if (opts.descriptorSet !== void 0) this.descriptorSet = opts.descriptorSet;
      
    }
  }
  get type() {
    return this.memoryView.getInt32(0x0);
  }
  set type(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get flags() {
    return this.memoryView.getInt32(0x4);
  }
  set flags(value) {
    this.memoryView.setInt32(0x4, value);
  }
  get pipelineLayout() {
    return this._pipelineLayout;
  }
  set pipelineLayout(value) {
    if (value !== null && value.constructor === VkPipelineLayout) {
      value.flush();
      this._pipelineLayout = value;
      this.memoryView.setBigInt64(0x8, value.memoryAddress);
    } else if (value === null) {
      this._pipelineLayout = null;
    } else {
      throw new TypeError("Invalid type for 'VkObjectTableDescriptorSetEntryNVX.pipelineLayout': Expected 'VkPipelineLayout' but got '" + value.constructor.name + "'");
    }
  }
  get descriptorSet() {
    return this._descriptorSet;
  }
  set descriptorSet(value) {
    if (value !== null && value.constructor === VkDescriptorSet) {
      value.flush();
      this._descriptorSet = value;
      this.memoryView.setBigInt64(0x10, value.memoryAddress);
    } else if (value === null) {
      this._descriptorSet = null;
    } else {
      throw new TypeError("Invalid type for 'VkObjectTableDescriptorSetEntryNVX.descriptorSet': Expected 'VkDescriptorSet' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkObjectTableDescriptorSetEntryNVX.prototype.flush = function flush() {
  
  return true;
};

VkObjectTableDescriptorSetEntryNVX.byteLength = 0x18;

VkObjectTableDescriptorSetEntryNVX.memoryLayout = Object.freeze({
  type: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  flags: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  pipelineLayout: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  descriptorSet: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
});
/** VkObjectTableVertexBufferEntryNVX **/
class VkObjectTableVertexBufferEntryNVX {
  constructor(opts) {
    
    
    this._buffer = null;
    this.memoryBuffer = new ArrayBuffer(VkObjectTableVertexBufferEntryNVX.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.type !== void 0) this.type = opts.type;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.buffer !== void 0) this.buffer = opts.buffer;
      
    }
  }
  get type() {
    return this.memoryView.getInt32(0x0);
  }
  set type(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get flags() {
    return this.memoryView.getInt32(0x4);
  }
  set flags(value) {
    this.memoryView.setInt32(0x4, value);
  }
  get buffer() {
    return this._buffer;
  }
  set buffer(value) {
    if (value !== null && value.constructor === VkBuffer) {
      value.flush();
      this._buffer = value;
      this.memoryView.setBigInt64(0x8, value.memoryAddress);
    } else if (value === null) {
      this._buffer = null;
    } else {
      throw new TypeError("Invalid type for 'VkObjectTableVertexBufferEntryNVX.buffer': Expected 'VkBuffer' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkObjectTableVertexBufferEntryNVX.prototype.flush = function flush() {
  
  return true;
};

VkObjectTableVertexBufferEntryNVX.byteLength = 0x10;

VkObjectTableVertexBufferEntryNVX.memoryLayout = Object.freeze({
  type: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  flags: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  buffer: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
});
/** VkObjectTableIndexBufferEntryNVX **/
class VkObjectTableIndexBufferEntryNVX {
  constructor(opts) {
    
    
    this._buffer = null;
    
    this.memoryBuffer = new ArrayBuffer(VkObjectTableIndexBufferEntryNVX.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.type !== void 0) this.type = opts.type;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.buffer !== void 0) this.buffer = opts.buffer;
      if (opts.indexType !== void 0) this.indexType = opts.indexType;
      
    }
  }
  get type() {
    return this.memoryView.getInt32(0x0);
  }
  set type(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get flags() {
    return this.memoryView.getInt32(0x4);
  }
  set flags(value) {
    this.memoryView.setInt32(0x4, value);
  }
  get buffer() {
    return this._buffer;
  }
  set buffer(value) {
    if (value !== null && value.constructor === VkBuffer) {
      value.flush();
      this._buffer = value;
      this.memoryView.setBigInt64(0x8, value.memoryAddress);
    } else if (value === null) {
      this._buffer = null;
    } else {
      throw new TypeError("Invalid type for 'VkObjectTableIndexBufferEntryNVX.buffer': Expected 'VkBuffer' but got '" + value.constructor.name + "'");
    }
  }
  get indexType() {
    return this.memoryView.getInt32(0x10);
  }
  set indexType(value) {
    this.memoryView.setInt32(0x10, value);
  }
  
};

VkObjectTableIndexBufferEntryNVX.prototype.flush = function flush() {
  
  return true;
};

VkObjectTableIndexBufferEntryNVX.byteLength = 0x18;

VkObjectTableIndexBufferEntryNVX.memoryLayout = Object.freeze({
  type: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  flags: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  buffer: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  indexType: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkObjectTablePushConstantEntryNVX **/
class VkObjectTablePushConstantEntryNVX {
  constructor(opts) {
    
    
    this._pipelineLayout = null;
    
    this.memoryBuffer = new ArrayBuffer(VkObjectTablePushConstantEntryNVX.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.type !== void 0) this.type = opts.type;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.pipelineLayout !== void 0) this.pipelineLayout = opts.pipelineLayout;
      if (opts.stageFlags !== void 0) this.stageFlags = opts.stageFlags;
      
    }
  }
  get type() {
    return this.memoryView.getInt32(0x0);
  }
  set type(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get flags() {
    return this.memoryView.getInt32(0x4);
  }
  set flags(value) {
    this.memoryView.setInt32(0x4, value);
  }
  get pipelineLayout() {
    return this._pipelineLayout;
  }
  set pipelineLayout(value) {
    if (value !== null && value.constructor === VkPipelineLayout) {
      value.flush();
      this._pipelineLayout = value;
      this.memoryView.setBigInt64(0x8, value.memoryAddress);
    } else if (value === null) {
      this._pipelineLayout = null;
    } else {
      throw new TypeError("Invalid type for 'VkObjectTablePushConstantEntryNVX.pipelineLayout': Expected 'VkPipelineLayout' but got '" + value.constructor.name + "'");
    }
  }
  get stageFlags() {
    return this.memoryView.getInt32(0x10);
  }
  set stageFlags(value) {
    this.memoryView.setInt32(0x10, value);
  }
  
};

VkObjectTablePushConstantEntryNVX.prototype.flush = function flush() {
  
  return true;
};

VkObjectTablePushConstantEntryNVX.byteLength = 0x18;

VkObjectTablePushConstantEntryNVX.memoryLayout = Object.freeze({
  type: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  flags: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  pipelineLayout: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  stageFlags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceFeatures2 **/
class VkPhysicalDeviceFeatures2 {
  constructor(opts) {
    
    this._pNext = null;
    this._features = null;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceFeatures2.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.features !== void 0) this.features = opts.features;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get features() {
    return this._features;
  }
  set features(value) {
    if (value !== null && value.constructor === VkPhysicalDeviceFeatures) {
      value.flush();
      this._features = value;
      this.memoryView.setBigInt64(0x10, value.memoryAddress);
    } else if (value === null) {
      this._features = null;
    } else {
      throw new TypeError("Invalid type for 'VkPhysicalDeviceFeatures2.features': Expected 'VkPhysicalDeviceFeatures' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkPhysicalDeviceFeatures2.prototype.flush = function flush() {
  
  
  
  
  
  return true;
};

VkPhysicalDeviceFeatures2.byteLength = 0xF0;

VkPhysicalDeviceFeatures2.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  features: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0xDC
  }),
});
/** VkPhysicalDeviceFeatures2KHR **/
class VkPhysicalDeviceFeatures2KHR {
  constructor(opts) {
    
    this._pNext = null;
    this._features = null;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceFeatures2KHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.features !== void 0) this.features = opts.features;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get features() {
    return this._features;
  }
  set features(value) {
    if (value !== null && value.constructor === VkPhysicalDeviceFeatures) {
      value.flush();
      this._features = value;
      this.memoryView.setBigInt64(0x10, value.memoryAddress);
    } else if (value === null) {
      this._features = null;
    } else {
      throw new TypeError("Invalid type for 'VkPhysicalDeviceFeatures2KHR.features': Expected 'VkPhysicalDeviceFeatures' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkPhysicalDeviceFeatures2KHR.prototype.flush = function flush() {
  
  
  
  
  
  return true;
};

VkPhysicalDeviceFeatures2KHR.byteLength = 0xF0;

VkPhysicalDeviceFeatures2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  features: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0xDC
  }),
});
/** VkPhysicalDeviceProperties2 **/
class VkPhysicalDeviceProperties2 {
  constructor(opts) {
    
    this._pNext = null;
    this._properties = null;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceProperties2.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get properties() {
    return this._properties;
  }
  
};

VkPhysicalDeviceProperties2.prototype.flush = function flush() {
  
  
  
  
  
  return true;
};

VkPhysicalDeviceProperties2.byteLength = 0x348;

VkPhysicalDeviceProperties2.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  properties: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x338
  }),
});
/** VkPhysicalDeviceProperties2KHR **/
class VkPhysicalDeviceProperties2KHR {
  constructor(opts) {
    
    this._pNext = null;
    this._properties = null;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceProperties2KHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get properties() {
    return this._properties;
  }
  
};

VkPhysicalDeviceProperties2KHR.prototype.flush = function flush() {
  
  
  
  
  
  return true;
};

VkPhysicalDeviceProperties2KHR.byteLength = 0x348;

VkPhysicalDeviceProperties2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  properties: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x338
  }),
});
/** VkFormatProperties2 **/
class VkFormatProperties2 {
  constructor(opts) {
    
    this._pNext = null;
    this._formatProperties = null;
    this.memoryBuffer = new ArrayBuffer(VkFormatProperties2.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get formatProperties() {
    return this._formatProperties;
  }
  
};

VkFormatProperties2.prototype.flush = function flush() {
  
  
  
  
  
  return true;
};

VkFormatProperties2.byteLength = 0x20;

VkFormatProperties2.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  formatProperties: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0xC
  }),
});
/** VkFormatProperties2KHR **/
class VkFormatProperties2KHR {
  constructor(opts) {
    
    this._pNext = null;
    this._formatProperties = null;
    this.memoryBuffer = new ArrayBuffer(VkFormatProperties2KHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get formatProperties() {
    return this._formatProperties;
  }
  
};

VkFormatProperties2KHR.prototype.flush = function flush() {
  
  
  
  
  
  return true;
};

VkFormatProperties2KHR.byteLength = 0x20;

VkFormatProperties2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  formatProperties: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0xC
  }),
});
/** VkImageFormatProperties2 **/
class VkImageFormatProperties2 {
  constructor(opts) {
    
    this._pNext = null;
    this._imageFormatProperties = null;
    this.memoryBuffer = new ArrayBuffer(VkImageFormatProperties2.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get imageFormatProperties() {
    return this._imageFormatProperties;
  }
  
};

VkImageFormatProperties2.prototype.flush = function flush() {
  
  
  
  
  
  return true;
};

VkImageFormatProperties2.byteLength = 0x30;

VkImageFormatProperties2.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  imageFormatProperties: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x20
  }),
});
/** VkImageFormatProperties2KHR **/
class VkImageFormatProperties2KHR {
  constructor(opts) {
    
    this._pNext = null;
    this._imageFormatProperties = null;
    this.memoryBuffer = new ArrayBuffer(VkImageFormatProperties2KHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get imageFormatProperties() {
    return this._imageFormatProperties;
  }
  
};

VkImageFormatProperties2KHR.prototype.flush = function flush() {
  
  
  
  
  
  return true;
};

VkImageFormatProperties2KHR.byteLength = 0x30;

VkImageFormatProperties2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  imageFormatProperties: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x20
  }),
});
/** VkPhysicalDeviceImageFormatInfo2 **/
class VkPhysicalDeviceImageFormatInfo2 {
  constructor(opts) {
    
    this._pNext = null;
    
    
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceImageFormatInfo2.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.format !== void 0) this.format = opts.format;
      if (opts.type !== void 0) this.type = opts.type;
      if (opts.tiling !== void 0) this.tiling = opts.tiling;
      if (opts.usage !== void 0) this.usage = opts.usage;
      if (opts.flags !== void 0) this.flags = opts.flags;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get format() {
    return this.memoryView.getInt32(0x10);
  }
  set format(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get type() {
    return this.memoryView.getInt32(0x14);
  }
  set type(value) {
    this.memoryView.setInt32(0x14, value);
  }
  get tiling() {
    return this.memoryView.getInt32(0x18);
  }
  set tiling(value) {
    this.memoryView.setInt32(0x18, value);
  }
  get usage() {
    return this.memoryView.getInt32(0x1C);
  }
  set usage(value) {
    this.memoryView.setInt32(0x1C, value);
  }
  get flags() {
    return this.memoryView.getInt32(0x20);
  }
  set flags(value) {
    this.memoryView.setInt32(0x20, value);
  }
  
};

VkPhysicalDeviceImageFormatInfo2.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceImageFormatInfo2.byteLength = 0x28;

VkPhysicalDeviceImageFormatInfo2.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  format: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  type: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  tiling: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  usage: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  flags: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceImageFormatInfo2KHR **/
class VkPhysicalDeviceImageFormatInfo2KHR {
  constructor(opts) {
    
    this._pNext = null;
    
    
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceImageFormatInfo2KHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.format !== void 0) this.format = opts.format;
      if (opts.type !== void 0) this.type = opts.type;
      if (opts.tiling !== void 0) this.tiling = opts.tiling;
      if (opts.usage !== void 0) this.usage = opts.usage;
      if (opts.flags !== void 0) this.flags = opts.flags;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get format() {
    return this.memoryView.getInt32(0x10);
  }
  set format(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get type() {
    return this.memoryView.getInt32(0x14);
  }
  set type(value) {
    this.memoryView.setInt32(0x14, value);
  }
  get tiling() {
    return this.memoryView.getInt32(0x18);
  }
  set tiling(value) {
    this.memoryView.setInt32(0x18, value);
  }
  get usage() {
    return this.memoryView.getInt32(0x1C);
  }
  set usage(value) {
    this.memoryView.setInt32(0x1C, value);
  }
  get flags() {
    return this.memoryView.getInt32(0x20);
  }
  set flags(value) {
    this.memoryView.setInt32(0x20, value);
  }
  
};

VkPhysicalDeviceImageFormatInfo2KHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceImageFormatInfo2KHR.byteLength = 0x28;

VkPhysicalDeviceImageFormatInfo2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  format: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  type: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  tiling: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  usage: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  flags: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
});
/** VkQueueFamilyProperties2 **/
class VkQueueFamilyProperties2 {
  constructor(opts) {
    
    this._pNext = null;
    this._queueFamilyProperties = null;
    this.memoryBuffer = new ArrayBuffer(VkQueueFamilyProperties2.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get queueFamilyProperties() {
    return this._queueFamilyProperties;
  }
  
};

VkQueueFamilyProperties2.prototype.flush = function flush() {
  
  
  
  
  
  return true;
};

VkQueueFamilyProperties2.byteLength = 0x28;

VkQueueFamilyProperties2.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  queueFamilyProperties: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x18
  }),
});
/** VkQueueFamilyProperties2KHR **/
class VkQueueFamilyProperties2KHR {
  constructor(opts) {
    
    this._pNext = null;
    this._queueFamilyProperties = null;
    this.memoryBuffer = new ArrayBuffer(VkQueueFamilyProperties2KHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get queueFamilyProperties() {
    return this._queueFamilyProperties;
  }
  
};

VkQueueFamilyProperties2KHR.prototype.flush = function flush() {
  
  
  
  
  
  return true;
};

VkQueueFamilyProperties2KHR.byteLength = 0x28;

VkQueueFamilyProperties2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  queueFamilyProperties: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x18
  }),
});
/** VkPhysicalDeviceMemoryProperties2 **/
class VkPhysicalDeviceMemoryProperties2 {
  constructor(opts) {
    
    this._pNext = null;
    this._memoryProperties = null;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceMemoryProperties2.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get memoryProperties() {
    return this._memoryProperties;
  }
  
};

VkPhysicalDeviceMemoryProperties2.prototype.flush = function flush() {
  
  
  
  
  
  return true;
};

VkPhysicalDeviceMemoryProperties2.byteLength = 0x218;

VkPhysicalDeviceMemoryProperties2.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  memoryProperties: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x208
  }),
});
/** VkPhysicalDeviceMemoryProperties2KHR **/
class VkPhysicalDeviceMemoryProperties2KHR {
  constructor(opts) {
    
    this._pNext = null;
    this._memoryProperties = null;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceMemoryProperties2KHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get memoryProperties() {
    return this._memoryProperties;
  }
  
};

VkPhysicalDeviceMemoryProperties2KHR.prototype.flush = function flush() {
  
  
  
  
  
  return true;
};

VkPhysicalDeviceMemoryProperties2KHR.byteLength = 0x218;

VkPhysicalDeviceMemoryProperties2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  memoryProperties: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x208
  }),
});
/** VkSparseImageFormatProperties2 **/
class VkSparseImageFormatProperties2 {
  constructor(opts) {
    
    this._pNext = null;
    this._properties = null;
    this.memoryBuffer = new ArrayBuffer(VkSparseImageFormatProperties2.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get properties() {
    return this._properties;
  }
  
};

VkSparseImageFormatProperties2.prototype.flush = function flush() {
  
  
  
  
  
  return true;
};

VkSparseImageFormatProperties2.byteLength = 0x28;

VkSparseImageFormatProperties2.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  properties: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x14
  }),
});
/** VkSparseImageFormatProperties2KHR **/
class VkSparseImageFormatProperties2KHR {
  constructor(opts) {
    
    this._pNext = null;
    this._properties = null;
    this.memoryBuffer = new ArrayBuffer(VkSparseImageFormatProperties2KHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get properties() {
    return this._properties;
  }
  
};

VkSparseImageFormatProperties2KHR.prototype.flush = function flush() {
  
  
  
  
  
  return true;
};

VkSparseImageFormatProperties2KHR.byteLength = 0x28;

VkSparseImageFormatProperties2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  properties: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x14
  }),
});
/** VkPhysicalDeviceSparseImageFormatInfo2 **/
class VkPhysicalDeviceSparseImageFormatInfo2 {
  constructor(opts) {
    
    this._pNext = null;
    
    
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceSparseImageFormatInfo2.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.format !== void 0) this.format = opts.format;
      if (opts.type !== void 0) this.type = opts.type;
      if (opts.samples !== void 0) this.samples = opts.samples;
      if (opts.usage !== void 0) this.usage = opts.usage;
      if (opts.tiling !== void 0) this.tiling = opts.tiling;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get format() {
    return this.memoryView.getInt32(0x10);
  }
  set format(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get type() {
    return this.memoryView.getInt32(0x14);
  }
  set type(value) {
    this.memoryView.setInt32(0x14, value);
  }
  get samples() {
    return this.memoryView.getInt32(0x18);
  }
  set samples(value) {
    this.memoryView.setInt32(0x18, value);
  }
  get usage() {
    return this.memoryView.getInt32(0x1C);
  }
  set usage(value) {
    this.memoryView.setInt32(0x1C, value);
  }
  get tiling() {
    return this.memoryView.getInt32(0x20);
  }
  set tiling(value) {
    this.memoryView.setInt32(0x20, value);
  }
  
};

VkPhysicalDeviceSparseImageFormatInfo2.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceSparseImageFormatInfo2.byteLength = 0x28;

VkPhysicalDeviceSparseImageFormatInfo2.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  format: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  type: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  samples: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  usage: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  tiling: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceSparseImageFormatInfo2KHR **/
class VkPhysicalDeviceSparseImageFormatInfo2KHR {
  constructor(opts) {
    
    this._pNext = null;
    
    
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceSparseImageFormatInfo2KHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.format !== void 0) this.format = opts.format;
      if (opts.type !== void 0) this.type = opts.type;
      if (opts.samples !== void 0) this.samples = opts.samples;
      if (opts.usage !== void 0) this.usage = opts.usage;
      if (opts.tiling !== void 0) this.tiling = opts.tiling;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get format() {
    return this.memoryView.getInt32(0x10);
  }
  set format(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get type() {
    return this.memoryView.getInt32(0x14);
  }
  set type(value) {
    this.memoryView.setInt32(0x14, value);
  }
  get samples() {
    return this.memoryView.getInt32(0x18);
  }
  set samples(value) {
    this.memoryView.setInt32(0x18, value);
  }
  get usage() {
    return this.memoryView.getInt32(0x1C);
  }
  set usage(value) {
    this.memoryView.setInt32(0x1C, value);
  }
  get tiling() {
    return this.memoryView.getInt32(0x20);
  }
  set tiling(value) {
    this.memoryView.setInt32(0x20, value);
  }
  
};

VkPhysicalDeviceSparseImageFormatInfo2KHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceSparseImageFormatInfo2KHR.byteLength = 0x28;

VkPhysicalDeviceSparseImageFormatInfo2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  format: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  type: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  samples: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  usage: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  tiling: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
});
/** VkPhysicalDevicePushDescriptorPropertiesKHR **/
class VkPhysicalDevicePushDescriptorPropertiesKHR {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDevicePushDescriptorPropertiesKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get maxPushDescriptors() {
    return this.memoryView.getUint32(0x10);
  }
  
};

VkPhysicalDevicePushDescriptorPropertiesKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDevicePushDescriptorPropertiesKHR.byteLength = 0x18;

VkPhysicalDevicePushDescriptorPropertiesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  maxPushDescriptors: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkConformanceVersionKHR **/
class VkConformanceVersionKHR {
  constructor(opts) {
    
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkConformanceVersionKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.major !== void 0) this.major = opts.major;
      if (opts.minor !== void 0) this.minor = opts.minor;
      if (opts.subminor !== void 0) this.subminor = opts.subminor;
      if (opts.patch !== void 0) this.patch = opts.patch;
      
    }
  }
  get major() {
    return this.memoryView.getUint8(0x0);
  }
  set major(value) {
    this.memoryView.setUint8(0x0, value);
  }
  get minor() {
    return this.memoryView.getUint8(0x1);
  }
  set minor(value) {
    this.memoryView.setUint8(0x1, value);
  }
  get subminor() {
    return this.memoryView.getUint8(0x2);
  }
  set subminor(value) {
    this.memoryView.setUint8(0x2, value);
  }
  get patch() {
    return this.memoryView.getUint8(0x3);
  }
  set patch(value) {
    this.memoryView.setUint8(0x3, value);
  }
  
};

VkConformanceVersionKHR.prototype.flush = function flush() {
  
  return true;
};

VkConformanceVersionKHR.byteLength = 0x4;

VkConformanceVersionKHR.memoryLayout = Object.freeze({
  major: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x1
  }),
  minor: Object.freeze({
    byteOffset: 0x1,
    byteLength: 0x1
  }),
  subminor: Object.freeze({
    byteOffset: 0x2,
    byteLength: 0x1
  }),
  patch: Object.freeze({
    byteOffset: 0x3,
    byteLength: 0x1
  }),
});
/** VkPhysicalDeviceDriverPropertiesKHR **/
class VkPhysicalDeviceDriverPropertiesKHR {
  constructor(opts) {
    
    this._pNext = null;
    
    this._driverName = null;
    this._driverInfo = null;
    this._conformanceVersion = null;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceDriverPropertiesKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get driverID() {
    return this.memoryView.getInt32(0x10);
  }
  get driverName() {
    if (this._driverName !== null) {
      let str = textDecoder.decode(this._driverName);
      return str.substr(0, str.length - 1);
    } else {
      return null;
    }
  }
  get driverInfo() {
    if (this._driverInfo !== null) {
      let str = textDecoder.decode(this._driverInfo);
      return str.substr(0, str.length - 1);
    } else {
      return null;
    }
  }
  get conformanceVersion() {
    return this._conformanceVersion;
  }
  
};

VkPhysicalDeviceDriverPropertiesKHR.prototype.flush = function flush() {
  
  
  
  
  
  return true;
};

VkPhysicalDeviceDriverPropertiesKHR.byteLength = 0x218;

VkPhysicalDeviceDriverPropertiesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  driverID: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  driverName: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x100
  }),
  driverInfo: Object.freeze({
    byteOffset: 0x114,
    byteLength: 0x100
  }),
  conformanceVersion: Object.freeze({
    byteOffset: 0x214,
    byteLength: 0x4
  }),
});
/** VkPresentRegionsKHR **/
class VkPresentRegionsKHR {
  constructor(opts) {
    
    this._pNext = null;
    
    this._pRegions = null;
    this._pRegionsNative = null;
    this.memoryBuffer = new ArrayBuffer(VkPresentRegionsKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.swapchainCount !== void 0) this.swapchainCount = opts.swapchainCount;
      if (opts.pRegions !== void 0) this.pRegions = opts.pRegions;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get swapchainCount() {
    return this.memoryView.getUint32(0x10);
  }
  set swapchainCount(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get pRegions() {
    return this._pRegions;
  }
  set pRegions(value) {
    if (value !== null && value.constructor === Array) {
      this._pRegions = value;
    } else if (value === null) {
      this._pRegions = null;
    } else {
      throw new TypeError("Invalid type for 'VkPresentRegionsKHR.pRegions': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkPresentRegionsKHR.prototype.flush = function flush() {
  
  
  
  
  if (this._pRegions !== null) {
    let nativeArray = new NativeObjectArray(this._pRegions);
    this._pRegionsNative = nativeArray;
    this.memoryView.setBigInt64(0x18, nativeArray.address);
  }
  
  return true;
};

VkPresentRegionsKHR.byteLength = 0x20;

VkPresentRegionsKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  swapchainCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pRegions: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkPresentRegionKHR **/
class VkPresentRegionKHR {
  constructor(opts) {
    
    this._pRectangles = null;
    this._pRectanglesNative = null;
    this.memoryBuffer = new ArrayBuffer(VkPresentRegionKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.rectangleCount !== void 0) this.rectangleCount = opts.rectangleCount;
      if (opts.pRectangles !== void 0) this.pRectangles = opts.pRectangles;
      
    }
  }
  get rectangleCount() {
    return this.memoryView.getUint32(0x0);
  }
  set rectangleCount(value) {
    this.memoryView.setUint32(0x0, value);
  }
  get pRectangles() {
    return this._pRectangles;
  }
  set pRectangles(value) {
    if (value !== null && value.constructor === Array) {
      this._pRectangles = value;
    } else if (value === null) {
      this._pRectangles = null;
    } else {
      throw new TypeError("Invalid type for 'VkPresentRegionKHR.pRectangles': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkPresentRegionKHR.prototype.flush = function flush() {
  
  
  if (this._pRectangles !== null) {
    let nativeArray = new NativeObjectArray(this._pRectangles);
    this._pRectanglesNative = nativeArray;
    this.memoryView.setBigInt64(0x8, nativeArray.address);
  }
  
  return true;
};

VkPresentRegionKHR.byteLength = 0x10;

VkPresentRegionKHR.memoryLayout = Object.freeze({
  rectangleCount: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pRectangles: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
});
/** VkRectLayerKHR **/
class VkRectLayerKHR {
  constructor(opts) {
    this._offset = null;
    this._extent = null;
    
    this.memoryBuffer = new ArrayBuffer(VkRectLayerKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.offset !== void 0) this.offset = opts.offset;
      if (opts.extent !== void 0) this.extent = opts.extent;
      if (opts.layer !== void 0) this.layer = opts.layer;
      
    }
  }
  get offset() {
    return this._offset;
  }
  set offset(value) {
    if (value !== null && value.constructor === VkOffset2D) {
      value.flush();
      this._offset = value;
      this.memoryView.setBigInt64(0x0, value.memoryAddress);
    } else if (value === null) {
      this._offset = null;
    } else {
      throw new TypeError("Invalid type for 'VkRectLayerKHR.offset': Expected 'VkOffset2D' but got '" + value.constructor.name + "'");
    }
  }
  get extent() {
    return this._extent;
  }
  set extent(value) {
    if (value !== null && value.constructor === VkExtent2D) {
      value.flush();
      this._extent = value;
      this.memoryView.setBigInt64(0x8, value.memoryAddress);
    } else if (value === null) {
      this._extent = null;
    } else {
      throw new TypeError("Invalid type for 'VkRectLayerKHR.extent': Expected 'VkExtent2D' but got '" + value.constructor.name + "'");
    }
  }
  get layer() {
    return this.memoryView.getUint32(0x10);
  }
  set layer(value) {
    this.memoryView.setUint32(0x10, value);
  }
  
};

VkRectLayerKHR.prototype.flush = function flush() {
  
  
  
  
  
  return true;
};

VkRectLayerKHR.byteLength = 0x14;

VkRectLayerKHR.memoryLayout = Object.freeze({
  offset: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x8
  }),
  extent: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  layer: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceVariablePointerFeatures **/
class VkPhysicalDeviceVariablePointerFeatures {
  constructor(opts) {
    
    this._pNext = null;
    
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceVariablePointerFeatures.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.variablePointersStorageBuffer !== void 0) this.variablePointersStorageBuffer = opts.variablePointersStorageBuffer;
      if (opts.variablePointers !== void 0) this.variablePointers = opts.variablePointers;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get variablePointersStorageBuffer() {
    return this.memoryView.getUint32(0x10);
  }
  set variablePointersStorageBuffer(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get variablePointers() {
    return this.memoryView.getUint32(0x14);
  }
  set variablePointers(value) {
    this.memoryView.setUint32(0x14, value);
  }
  
};

VkPhysicalDeviceVariablePointerFeatures.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceVariablePointerFeatures.byteLength = 0x18;

VkPhysicalDeviceVariablePointerFeatures.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  variablePointersStorageBuffer: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  variablePointers: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceVariablePointerFeaturesKHR **/
class VkPhysicalDeviceVariablePointerFeaturesKHR {
  constructor(opts) {
    
    this._pNext = null;
    
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceVariablePointerFeaturesKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.variablePointersStorageBuffer !== void 0) this.variablePointersStorageBuffer = opts.variablePointersStorageBuffer;
      if (opts.variablePointers !== void 0) this.variablePointers = opts.variablePointers;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get variablePointersStorageBuffer() {
    return this.memoryView.getUint32(0x10);
  }
  set variablePointersStorageBuffer(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get variablePointers() {
    return this.memoryView.getUint32(0x14);
  }
  set variablePointers(value) {
    this.memoryView.setUint32(0x14, value);
  }
  
};

VkPhysicalDeviceVariablePointerFeaturesKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceVariablePointerFeaturesKHR.byteLength = 0x18;

VkPhysicalDeviceVariablePointerFeaturesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  variablePointersStorageBuffer: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  variablePointers: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
});
/** VkExternalMemoryProperties **/
class VkExternalMemoryProperties {
  constructor(opts) {
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkExternalMemoryProperties.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      
    }
  }
  get externalMemoryFeatures() {
    return this.memoryView.getInt32(0x0);
  }
  get exportFromImportedHandleTypes() {
    return this.memoryView.getInt32(0x4);
  }
  get compatibleHandleTypes() {
    return this.memoryView.getInt32(0x8);
  }
  
};

VkExternalMemoryProperties.prototype.flush = function flush() {
  
  return true;
};

VkExternalMemoryProperties.byteLength = 0xC;

VkExternalMemoryProperties.memoryLayout = Object.freeze({
  externalMemoryFeatures: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  exportFromImportedHandleTypes: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  compatibleHandleTypes: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
});
/** VkExternalMemoryPropertiesKHR **/
class VkExternalMemoryPropertiesKHR {
  constructor(opts) {
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkExternalMemoryPropertiesKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      
    }
  }
  get externalMemoryFeatures() {
    return this.memoryView.getInt32(0x0);
  }
  get exportFromImportedHandleTypes() {
    return this.memoryView.getInt32(0x4);
  }
  get compatibleHandleTypes() {
    return this.memoryView.getInt32(0x8);
  }
  
};

VkExternalMemoryPropertiesKHR.prototype.flush = function flush() {
  
  return true;
};

VkExternalMemoryPropertiesKHR.byteLength = 0xC;

VkExternalMemoryPropertiesKHR.memoryLayout = Object.freeze({
  externalMemoryFeatures: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  exportFromImportedHandleTypes: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  compatibleHandleTypes: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceExternalImageFormatInfo **/
class VkPhysicalDeviceExternalImageFormatInfo {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceExternalImageFormatInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get handleType() {
    return this.memoryView.getInt32(0x10);
  }
  set handleType(value) {
    this.memoryView.setInt32(0x10, value);
  }
  
};

VkPhysicalDeviceExternalImageFormatInfo.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceExternalImageFormatInfo.byteLength = 0x18;

VkPhysicalDeviceExternalImageFormatInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  handleType: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceExternalImageFormatInfoKHR **/
class VkPhysicalDeviceExternalImageFormatInfoKHR {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceExternalImageFormatInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get handleType() {
    return this.memoryView.getInt32(0x10);
  }
  set handleType(value) {
    this.memoryView.setInt32(0x10, value);
  }
  
};

VkPhysicalDeviceExternalImageFormatInfoKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceExternalImageFormatInfoKHR.byteLength = 0x18;

VkPhysicalDeviceExternalImageFormatInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  handleType: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkExternalImageFormatProperties **/
class VkExternalImageFormatProperties {
  constructor(opts) {
    
    this._pNext = null;
    this._externalMemoryProperties = null;
    this.memoryBuffer = new ArrayBuffer(VkExternalImageFormatProperties.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get externalMemoryProperties() {
    return this._externalMemoryProperties;
  }
  
};

VkExternalImageFormatProperties.prototype.flush = function flush() {
  
  
  
  
  
  return true;
};

VkExternalImageFormatProperties.byteLength = 0x20;

VkExternalImageFormatProperties.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  externalMemoryProperties: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0xC
  }),
});
/** VkExternalImageFormatPropertiesKHR **/
class VkExternalImageFormatPropertiesKHR {
  constructor(opts) {
    
    this._pNext = null;
    this._externalMemoryProperties = null;
    this.memoryBuffer = new ArrayBuffer(VkExternalImageFormatPropertiesKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get externalMemoryProperties() {
    return this._externalMemoryProperties;
  }
  
};

VkExternalImageFormatPropertiesKHR.prototype.flush = function flush() {
  
  
  
  
  
  return true;
};

VkExternalImageFormatPropertiesKHR.byteLength = 0x20;

VkExternalImageFormatPropertiesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  externalMemoryProperties: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0xC
  }),
});
/** VkPhysicalDeviceExternalBufferInfo **/
class VkPhysicalDeviceExternalBufferInfo {
  constructor(opts) {
    
    this._pNext = null;
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceExternalBufferInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.usage !== void 0) this.usage = opts.usage;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get flags() {
    return this.memoryView.getInt32(0x10);
  }
  set flags(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get usage() {
    return this.memoryView.getInt32(0x14);
  }
  set usage(value) {
    this.memoryView.setInt32(0x14, value);
  }
  get handleType() {
    return this.memoryView.getInt32(0x18);
  }
  set handleType(value) {
    this.memoryView.setInt32(0x18, value);
  }
  
};

VkPhysicalDeviceExternalBufferInfo.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceExternalBufferInfo.byteLength = 0x20;

VkPhysicalDeviceExternalBufferInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  usage: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  handleType: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceExternalBufferInfoKHR **/
class VkPhysicalDeviceExternalBufferInfoKHR {
  constructor(opts) {
    
    this._pNext = null;
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceExternalBufferInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.usage !== void 0) this.usage = opts.usage;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get flags() {
    return this.memoryView.getInt32(0x10);
  }
  set flags(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get usage() {
    return this.memoryView.getInt32(0x14);
  }
  set usage(value) {
    this.memoryView.setInt32(0x14, value);
  }
  get handleType() {
    return this.memoryView.getInt32(0x18);
  }
  set handleType(value) {
    this.memoryView.setInt32(0x18, value);
  }
  
};

VkPhysicalDeviceExternalBufferInfoKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceExternalBufferInfoKHR.byteLength = 0x20;

VkPhysicalDeviceExternalBufferInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  usage: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  handleType: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
});
/** VkExternalBufferProperties **/
class VkExternalBufferProperties {
  constructor(opts) {
    
    this._pNext = null;
    this._externalMemoryProperties = null;
    this.memoryBuffer = new ArrayBuffer(VkExternalBufferProperties.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get externalMemoryProperties() {
    return this._externalMemoryProperties;
  }
  
};

VkExternalBufferProperties.prototype.flush = function flush() {
  
  
  
  
  
  return true;
};

VkExternalBufferProperties.byteLength = 0x20;

VkExternalBufferProperties.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  externalMemoryProperties: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0xC
  }),
});
/** VkExternalBufferPropertiesKHR **/
class VkExternalBufferPropertiesKHR {
  constructor(opts) {
    
    this._pNext = null;
    this._externalMemoryProperties = null;
    this.memoryBuffer = new ArrayBuffer(VkExternalBufferPropertiesKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get externalMemoryProperties() {
    return this._externalMemoryProperties;
  }
  
};

VkExternalBufferPropertiesKHR.prototype.flush = function flush() {
  
  
  
  
  
  return true;
};

VkExternalBufferPropertiesKHR.byteLength = 0x20;

VkExternalBufferPropertiesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  externalMemoryProperties: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0xC
  }),
});
/** VkPhysicalDeviceIDProperties **/
class VkPhysicalDeviceIDProperties {
  constructor(opts) {
    
    this._pNext = null;
    this._deviceUUID = null;
    this._driverUUID = null;
    this._deviceLUID = null;
    
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceIDProperties.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get deviceUUID() {
    return this._deviceUUID;
  }
  get driverUUID() {
    return this._driverUUID;
  }
  get deviceLUID() {
    return this._deviceLUID;
  }
  get deviceNodeMask() {
    return this.memoryView.getUint32(0x38);
  }
  get deviceLUIDValid() {
    return this.memoryView.getUint32(0x3C);
  }
  
};

VkPhysicalDeviceIDProperties.prototype.flush = function flush() {
  
  
  
  
  if (this._deviceUUID !== null) {
    let array = this._deviceUUID;
    for (let ii = 0; ii < array.length; ++ii) {
      this.memoryView.setUint8(0x10, array[ii]);
    };
  }
  
  
  if (this._driverUUID !== null) {
    let array = this._driverUUID;
    for (let ii = 0; ii < array.length; ++ii) {
      this.memoryView.setUint8(0x20, array[ii]);
    };
  }
  
  
  if (this._deviceLUID !== null) {
    let array = this._deviceLUID;
    for (let ii = 0; ii < array.length; ++ii) {
      this.memoryView.setUint8(0x30, array[ii]);
    };
  }
  
  return true;
};

VkPhysicalDeviceIDProperties.byteLength = 0x40;

VkPhysicalDeviceIDProperties.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  deviceUUID: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x10
  }),
  driverUUID: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x10
  }),
  deviceLUID: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x8
  }),
  deviceNodeMask: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x4
  }),
  deviceLUIDValid: Object.freeze({
    byteOffset: 0x3C,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceIDPropertiesKHR **/
class VkPhysicalDeviceIDPropertiesKHR {
  constructor(opts) {
    
    this._pNext = null;
    this._deviceUUID = null;
    this._driverUUID = null;
    this._deviceLUID = null;
    
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceIDPropertiesKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get deviceUUID() {
    return this._deviceUUID;
  }
  get driverUUID() {
    return this._driverUUID;
  }
  get deviceLUID() {
    return this._deviceLUID;
  }
  get deviceNodeMask() {
    return this.memoryView.getUint32(0x38);
  }
  get deviceLUIDValid() {
    return this.memoryView.getUint32(0x3C);
  }
  
};

VkPhysicalDeviceIDPropertiesKHR.prototype.flush = function flush() {
  
  
  
  
  if (this._deviceUUID !== null) {
    let array = this._deviceUUID;
    for (let ii = 0; ii < array.length; ++ii) {
      this.memoryView.setUint8(0x10, array[ii]);
    };
  }
  
  
  if (this._driverUUID !== null) {
    let array = this._driverUUID;
    for (let ii = 0; ii < array.length; ++ii) {
      this.memoryView.setUint8(0x20, array[ii]);
    };
  }
  
  
  if (this._deviceLUID !== null) {
    let array = this._deviceLUID;
    for (let ii = 0; ii < array.length; ++ii) {
      this.memoryView.setUint8(0x30, array[ii]);
    };
  }
  
  return true;
};

VkPhysicalDeviceIDPropertiesKHR.byteLength = 0x40;

VkPhysicalDeviceIDPropertiesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  deviceUUID: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x10
  }),
  driverUUID: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x10
  }),
  deviceLUID: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x8
  }),
  deviceNodeMask: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x4
  }),
  deviceLUIDValid: Object.freeze({
    byteOffset: 0x3C,
    byteLength: 0x4
  }),
});
/** VkExternalMemoryImageCreateInfo **/
class VkExternalMemoryImageCreateInfo {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkExternalMemoryImageCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleTypes !== void 0) this.handleTypes = opts.handleTypes;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get handleTypes() {
    return this.memoryView.getInt32(0x10);
  }
  set handleTypes(value) {
    this.memoryView.setInt32(0x10, value);
  }
  
};

VkExternalMemoryImageCreateInfo.prototype.flush = function flush() {
  
  
  
  return true;
};

VkExternalMemoryImageCreateInfo.byteLength = 0x18;

VkExternalMemoryImageCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  handleTypes: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkExternalMemoryImageCreateInfoKHR **/
class VkExternalMemoryImageCreateInfoKHR {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkExternalMemoryImageCreateInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleTypes !== void 0) this.handleTypes = opts.handleTypes;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get handleTypes() {
    return this.memoryView.getInt32(0x10);
  }
  set handleTypes(value) {
    this.memoryView.setInt32(0x10, value);
  }
  
};

VkExternalMemoryImageCreateInfoKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkExternalMemoryImageCreateInfoKHR.byteLength = 0x18;

VkExternalMemoryImageCreateInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  handleTypes: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkExternalMemoryBufferCreateInfo **/
class VkExternalMemoryBufferCreateInfo {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkExternalMemoryBufferCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleTypes !== void 0) this.handleTypes = opts.handleTypes;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get handleTypes() {
    return this.memoryView.getInt32(0x10);
  }
  set handleTypes(value) {
    this.memoryView.setInt32(0x10, value);
  }
  
};

VkExternalMemoryBufferCreateInfo.prototype.flush = function flush() {
  
  
  
  return true;
};

VkExternalMemoryBufferCreateInfo.byteLength = 0x18;

VkExternalMemoryBufferCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  handleTypes: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkExternalMemoryBufferCreateInfoKHR **/
class VkExternalMemoryBufferCreateInfoKHR {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkExternalMemoryBufferCreateInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleTypes !== void 0) this.handleTypes = opts.handleTypes;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get handleTypes() {
    return this.memoryView.getInt32(0x10);
  }
  set handleTypes(value) {
    this.memoryView.setInt32(0x10, value);
  }
  
};

VkExternalMemoryBufferCreateInfoKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkExternalMemoryBufferCreateInfoKHR.byteLength = 0x18;

VkExternalMemoryBufferCreateInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  handleTypes: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkExportMemoryAllocateInfo **/
class VkExportMemoryAllocateInfo {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkExportMemoryAllocateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleTypes !== void 0) this.handleTypes = opts.handleTypes;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get handleTypes() {
    return this.memoryView.getInt32(0x10);
  }
  set handleTypes(value) {
    this.memoryView.setInt32(0x10, value);
  }
  
};

VkExportMemoryAllocateInfo.prototype.flush = function flush() {
  
  
  
  return true;
};

VkExportMemoryAllocateInfo.byteLength = 0x18;

VkExportMemoryAllocateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  handleTypes: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkExportMemoryAllocateInfoKHR **/
class VkExportMemoryAllocateInfoKHR {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkExportMemoryAllocateInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleTypes !== void 0) this.handleTypes = opts.handleTypes;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get handleTypes() {
    return this.memoryView.getInt32(0x10);
  }
  set handleTypes(value) {
    this.memoryView.setInt32(0x10, value);
  }
  
};

VkExportMemoryAllocateInfoKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkExportMemoryAllocateInfoKHR.byteLength = 0x18;

VkExportMemoryAllocateInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  handleTypes: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkImportMemoryWin32HandleInfoKHR **/
class VkImportMemoryWin32HandleInfoKHR {
  constructor(opts) {
    
    this._pNext = null;
    
    
    this._name = null;
    this.memoryBuffer = new ArrayBuffer(VkImportMemoryWin32HandleInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      if (opts.handle !== void 0) this.handle = opts.handle;
      if (opts.name !== void 0) this.name = opts.name;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get handleType() {
    return this.memoryView.getInt32(0x10);
  }
  set handleType(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get handle() {
    return this.memoryView.getBigInt64(0x18);
  }
  set handle(value) {
    this.memoryView.setBigInt64(0x18, value);
  }
  get name() {
    if (this._name !== null) {
      let str = textDecoder.decode(this._name);
      return str.substr(0, str.length - 1);
    } else {
      return null;
    }
  }
  set name(value) {
    if (value !== null && value.constructor === String) {
      this._name = textEncoder.encode(value + String.fromCharCode(0x0)).buffer;
      this.memoryView.setBigInt64(0x20, getAddressFromArrayBuffer(this._name));
    } else if (value === null) {
      this._name = null;
      this.memoryView.setBigInt64(0x20, 0n);
    } else {
      throw new TypeError("Invalid type for 'VkImportMemoryWin32HandleInfoKHR.name': Expected 'String' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkImportMemoryWin32HandleInfoKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkImportMemoryWin32HandleInfoKHR.byteLength = 0x28;

VkImportMemoryWin32HandleInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  handleType: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  handle: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  name: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
});
/** VkExportMemoryWin32HandleInfoKHR **/
class VkExportMemoryWin32HandleInfoKHR {
  constructor(opts) {
    
    this._pNext = null;
    this._name = null;
    this.memoryBuffer = new ArrayBuffer(VkExportMemoryWin32HandleInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.name !== void 0) this.name = opts.name;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get name() {
    if (this._name !== null) {
      let str = textDecoder.decode(this._name);
      return str.substr(0, str.length - 1);
    } else {
      return null;
    }
  }
  set name(value) {
    if (value !== null && value.constructor === String) {
      this._name = textEncoder.encode(value + String.fromCharCode(0x0)).buffer;
      this.memoryView.setBigInt64(0x20, getAddressFromArrayBuffer(this._name));
    } else if (value === null) {
      this._name = null;
      this.memoryView.setBigInt64(0x20, 0n);
    } else {
      throw new TypeError("Invalid type for 'VkExportMemoryWin32HandleInfoKHR.name': Expected 'String' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkExportMemoryWin32HandleInfoKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkExportMemoryWin32HandleInfoKHR.byteLength = 0x28;

VkExportMemoryWin32HandleInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  name: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
});
/** VkMemoryWin32HandlePropertiesKHR **/
class VkMemoryWin32HandlePropertiesKHR {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkMemoryWin32HandlePropertiesKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get memoryTypeBits() {
    return this.memoryView.getUint32(0x10);
  }
  
};

VkMemoryWin32HandlePropertiesKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkMemoryWin32HandlePropertiesKHR.byteLength = 0x18;

VkMemoryWin32HandlePropertiesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  memoryTypeBits: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkMemoryGetWin32HandleInfoKHR **/
class VkMemoryGetWin32HandleInfoKHR {
  constructor(opts) {
    
    this._pNext = null;
    this._memory = null;
    
    this.memoryBuffer = new ArrayBuffer(VkMemoryGetWin32HandleInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.memory !== void 0) this.memory = opts.memory;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get memory() {
    return this._memory;
  }
  set memory(value) {
    if (value !== null && value.constructor === VkDeviceMemory) {
      value.flush();
      this._memory = value;
      this.memoryView.setBigInt64(0x10, value.memoryAddress);
    } else if (value === null) {
      this._memory = null;
    } else {
      throw new TypeError("Invalid type for 'VkMemoryGetWin32HandleInfoKHR.memory': Expected 'VkDeviceMemory' but got '" + value.constructor.name + "'");
    }
  }
  get handleType() {
    return this.memoryView.getInt32(0x18);
  }
  set handleType(value) {
    this.memoryView.setInt32(0x18, value);
  }
  
};

VkMemoryGetWin32HandleInfoKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkMemoryGetWin32HandleInfoKHR.byteLength = 0x20;

VkMemoryGetWin32HandleInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  memory: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  handleType: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
});
/** VkImportMemoryFdInfoKHR **/
class VkImportMemoryFdInfoKHR {
  constructor(opts) {
    
    this._pNext = null;
    
    
    this.memoryBuffer = new ArrayBuffer(VkImportMemoryFdInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      if (opts.fd !== void 0) this.fd = opts.fd;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get handleType() {
    return this.memoryView.getInt32(0x10);
  }
  set handleType(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get fd() {
    return this.memoryView.getInt32(0x14);
  }
  set fd(value) {
    this.memoryView.setInt32(0x14, value);
  }
  
};

VkImportMemoryFdInfoKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkImportMemoryFdInfoKHR.byteLength = 0x18;

VkImportMemoryFdInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  handleType: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  fd: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
});
/** VkMemoryFdPropertiesKHR **/
class VkMemoryFdPropertiesKHR {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkMemoryFdPropertiesKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get memoryTypeBits() {
    return this.memoryView.getUint32(0x10);
  }
  
};

VkMemoryFdPropertiesKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkMemoryFdPropertiesKHR.byteLength = 0x18;

VkMemoryFdPropertiesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  memoryTypeBits: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkMemoryGetFdInfoKHR **/
class VkMemoryGetFdInfoKHR {
  constructor(opts) {
    
    this._pNext = null;
    this._memory = null;
    
    this.memoryBuffer = new ArrayBuffer(VkMemoryGetFdInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.memory !== void 0) this.memory = opts.memory;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get memory() {
    return this._memory;
  }
  set memory(value) {
    if (value !== null && value.constructor === VkDeviceMemory) {
      value.flush();
      this._memory = value;
      this.memoryView.setBigInt64(0x10, value.memoryAddress);
    } else if (value === null) {
      this._memory = null;
    } else {
      throw new TypeError("Invalid type for 'VkMemoryGetFdInfoKHR.memory': Expected 'VkDeviceMemory' but got '" + value.constructor.name + "'");
    }
  }
  get handleType() {
    return this.memoryView.getInt32(0x18);
  }
  set handleType(value) {
    this.memoryView.setInt32(0x18, value);
  }
  
};

VkMemoryGetFdInfoKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkMemoryGetFdInfoKHR.byteLength = 0x20;

VkMemoryGetFdInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  memory: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  handleType: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
});
/** VkWin32KeyedMutexAcquireReleaseInfoKHR **/
class VkWin32KeyedMutexAcquireReleaseInfoKHR {
  constructor(opts) {
    
    this._pNext = null;
    
    this._pAcquireSyncs = null;
    this._pAcquireSyncsNative = null;
    this._pAcquireKeys = null;
    this._pAcquireTimeouts = null;
    
    this._pReleaseSyncs = null;
    this._pReleaseSyncsNative = null;
    this._pReleaseKeys = null;
    this.memoryBuffer = new ArrayBuffer(VkWin32KeyedMutexAcquireReleaseInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.acquireCount !== void 0) this.acquireCount = opts.acquireCount;
      if (opts.pAcquireSyncs !== void 0) this.pAcquireSyncs = opts.pAcquireSyncs;
      if (opts.pAcquireKeys !== void 0) this.pAcquireKeys = opts.pAcquireKeys;
      if (opts.pAcquireTimeouts !== void 0) this.pAcquireTimeouts = opts.pAcquireTimeouts;
      if (opts.releaseCount !== void 0) this.releaseCount = opts.releaseCount;
      if (opts.pReleaseSyncs !== void 0) this.pReleaseSyncs = opts.pReleaseSyncs;
      if (opts.pReleaseKeys !== void 0) this.pReleaseKeys = opts.pReleaseKeys;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get acquireCount() {
    return this.memoryView.getUint32(0x10);
  }
  set acquireCount(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get pAcquireSyncs() {
    return this._pAcquireSyncs;
  }
  set pAcquireSyncs(value) {
    if (value !== null && value.constructor === Array) {
      this._pAcquireSyncs = value;
    } else if (value === null) {
      this._pAcquireSyncs = null;
    } else {
      throw new TypeError("Invalid type for 'VkWin32KeyedMutexAcquireReleaseInfoKHR.pAcquireSyncs': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get pAcquireKeys() {
    return this._pAcquireKeys;
  }
  set pAcquireKeys(value) {
    if (value !== null && value.constructor === BigUint64Array) {
      this._pAcquireKeys = value;
      this.memoryView.setBigInt64(0x20, getAddressFromArrayBuffer(value.buffer));
    } else if (value === null) {
      this._pAcquireKeys = null;
    } else {
      throw new TypeError("Invalid type for 'VkWin32KeyedMutexAcquireReleaseInfoKHR.pAcquireKeys': Expected 'BigUint64Array' but got '" + value.constructor.name + "'");
    }
  }
  get pAcquireTimeouts() {
    return this._pAcquireTimeouts;
  }
  set pAcquireTimeouts(value) {
    if (value !== null && value.constructor === Uint32Array) {
      this._pAcquireTimeouts = value;
      this.memoryView.setBigInt64(0x28, getAddressFromArrayBuffer(value.buffer));
    } else if (value === null) {
      this._pAcquireTimeouts = null;
    } else {
      throw new TypeError("Invalid type for 'VkWin32KeyedMutexAcquireReleaseInfoKHR.pAcquireTimeouts': Expected 'Uint32Array' but got '" + value.constructor.name + "'");
    }
  }
  get releaseCount() {
    return this.memoryView.getUint32(0x30);
  }
  set releaseCount(value) {
    this.memoryView.setUint32(0x30, value);
  }
  get pReleaseSyncs() {
    return this._pReleaseSyncs;
  }
  set pReleaseSyncs(value) {
    if (value !== null && value.constructor === Array) {
      this._pReleaseSyncs = value;
    } else if (value === null) {
      this._pReleaseSyncs = null;
    } else {
      throw new TypeError("Invalid type for 'VkWin32KeyedMutexAcquireReleaseInfoKHR.pReleaseSyncs': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get pReleaseKeys() {
    return this._pReleaseKeys;
  }
  set pReleaseKeys(value) {
    if (value !== null && value.constructor === BigUint64Array) {
      this._pReleaseKeys = value;
      this.memoryView.setBigInt64(0x40, getAddressFromArrayBuffer(value.buffer));
    } else if (value === null) {
      this._pReleaseKeys = null;
    } else {
      throw new TypeError("Invalid type for 'VkWin32KeyedMutexAcquireReleaseInfoKHR.pReleaseKeys': Expected 'BigUint64Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkWin32KeyedMutexAcquireReleaseInfoKHR.prototype.flush = function flush() {
  
  
  
  
  if (this._pAcquireSyncs !== null) {
    let nativeArray = new NativeObjectArray(this._pAcquireSyncs);
    this._pAcquireSyncsNative = nativeArray;
    this.memoryView.setBigInt64(0x18, nativeArray.address);
  }
  
  
  if (this._pReleaseSyncs !== null) {
    let nativeArray = new NativeObjectArray(this._pReleaseSyncs);
    this._pReleaseSyncsNative = nativeArray;
    this.memoryView.setBigInt64(0x38, nativeArray.address);
  }
  
  return true;
};

VkWin32KeyedMutexAcquireReleaseInfoKHR.byteLength = 0x48;

VkWin32KeyedMutexAcquireReleaseInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  acquireCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pAcquireSyncs: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  pAcquireKeys: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
  pAcquireTimeouts: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
  releaseCount: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  pReleaseSyncs: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x8
  }),
  pReleaseKeys: Object.freeze({
    byteOffset: 0x40,
    byteLength: 0x8
  }),
});
/** VkPhysicalDeviceExternalSemaphoreInfo **/
class VkPhysicalDeviceExternalSemaphoreInfo {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceExternalSemaphoreInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get handleType() {
    return this.memoryView.getInt32(0x10);
  }
  set handleType(value) {
    this.memoryView.setInt32(0x10, value);
  }
  
};

VkPhysicalDeviceExternalSemaphoreInfo.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceExternalSemaphoreInfo.byteLength = 0x18;

VkPhysicalDeviceExternalSemaphoreInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  handleType: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceExternalSemaphoreInfoKHR **/
class VkPhysicalDeviceExternalSemaphoreInfoKHR {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceExternalSemaphoreInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get handleType() {
    return this.memoryView.getInt32(0x10);
  }
  set handleType(value) {
    this.memoryView.setInt32(0x10, value);
  }
  
};

VkPhysicalDeviceExternalSemaphoreInfoKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceExternalSemaphoreInfoKHR.byteLength = 0x18;

VkPhysicalDeviceExternalSemaphoreInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  handleType: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkExternalSemaphoreProperties **/
class VkExternalSemaphoreProperties {
  constructor(opts) {
    
    this._pNext = null;
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkExternalSemaphoreProperties.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get exportFromImportedHandleTypes() {
    return this.memoryView.getInt32(0x10);
  }
  get compatibleHandleTypes() {
    return this.memoryView.getInt32(0x14);
  }
  get externalSemaphoreFeatures() {
    return this.memoryView.getInt32(0x18);
  }
  
};

VkExternalSemaphoreProperties.prototype.flush = function flush() {
  
  
  
  return true;
};

VkExternalSemaphoreProperties.byteLength = 0x20;

VkExternalSemaphoreProperties.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  exportFromImportedHandleTypes: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  compatibleHandleTypes: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  externalSemaphoreFeatures: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
});
/** VkExternalSemaphorePropertiesKHR **/
class VkExternalSemaphorePropertiesKHR {
  constructor(opts) {
    
    this._pNext = null;
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkExternalSemaphorePropertiesKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get exportFromImportedHandleTypes() {
    return this.memoryView.getInt32(0x10);
  }
  get compatibleHandleTypes() {
    return this.memoryView.getInt32(0x14);
  }
  get externalSemaphoreFeatures() {
    return this.memoryView.getInt32(0x18);
  }
  
};

VkExternalSemaphorePropertiesKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkExternalSemaphorePropertiesKHR.byteLength = 0x20;

VkExternalSemaphorePropertiesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  exportFromImportedHandleTypes: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  compatibleHandleTypes: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  externalSemaphoreFeatures: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
});
/** VkExportSemaphoreCreateInfo **/
class VkExportSemaphoreCreateInfo {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkExportSemaphoreCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleTypes !== void 0) this.handleTypes = opts.handleTypes;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get handleTypes() {
    return this.memoryView.getInt32(0x10);
  }
  set handleTypes(value) {
    this.memoryView.setInt32(0x10, value);
  }
  
};

VkExportSemaphoreCreateInfo.prototype.flush = function flush() {
  
  
  
  return true;
};

VkExportSemaphoreCreateInfo.byteLength = 0x18;

VkExportSemaphoreCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  handleTypes: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkExportSemaphoreCreateInfoKHR **/
class VkExportSemaphoreCreateInfoKHR {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkExportSemaphoreCreateInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleTypes !== void 0) this.handleTypes = opts.handleTypes;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get handleTypes() {
    return this.memoryView.getInt32(0x10);
  }
  set handleTypes(value) {
    this.memoryView.setInt32(0x10, value);
  }
  
};

VkExportSemaphoreCreateInfoKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkExportSemaphoreCreateInfoKHR.byteLength = 0x18;

VkExportSemaphoreCreateInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  handleTypes: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkImportSemaphoreWin32HandleInfoKHR **/
class VkImportSemaphoreWin32HandleInfoKHR {
  constructor(opts) {
    
    this._pNext = null;
    this._semaphore = null;
    
    
    
    this._name = null;
    this.memoryBuffer = new ArrayBuffer(VkImportSemaphoreWin32HandleInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.semaphore !== void 0) this.semaphore = opts.semaphore;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      if (opts.handle !== void 0) this.handle = opts.handle;
      if (opts.name !== void 0) this.name = opts.name;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get semaphore() {
    return this._semaphore;
  }
  set semaphore(value) {
    if (value !== null && value.constructor === VkSemaphore) {
      value.flush();
      this._semaphore = value;
      this.memoryView.setBigInt64(0x10, value.memoryAddress);
    } else if (value === null) {
      this._semaphore = null;
    } else {
      throw new TypeError("Invalid type for 'VkImportSemaphoreWin32HandleInfoKHR.semaphore': Expected 'VkSemaphore' but got '" + value.constructor.name + "'");
    }
  }
  get flags() {
    return this.memoryView.getInt32(0x18);
  }
  set flags(value) {
    this.memoryView.setInt32(0x18, value);
  }
  get handleType() {
    return this.memoryView.getInt32(0x1C);
  }
  set handleType(value) {
    this.memoryView.setInt32(0x1C, value);
  }
  get handle() {
    return this.memoryView.getBigInt64(0x20);
  }
  set handle(value) {
    this.memoryView.setBigInt64(0x20, value);
  }
  get name() {
    if (this._name !== null) {
      let str = textDecoder.decode(this._name);
      return str.substr(0, str.length - 1);
    } else {
      return null;
    }
  }
  set name(value) {
    if (value !== null && value.constructor === String) {
      this._name = textEncoder.encode(value + String.fromCharCode(0x0)).buffer;
      this.memoryView.setBigInt64(0x28, getAddressFromArrayBuffer(this._name));
    } else if (value === null) {
      this._name = null;
      this.memoryView.setBigInt64(0x28, 0n);
    } else {
      throw new TypeError("Invalid type for 'VkImportSemaphoreWin32HandleInfoKHR.name': Expected 'String' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkImportSemaphoreWin32HandleInfoKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkImportSemaphoreWin32HandleInfoKHR.byteLength = 0x30;

VkImportSemaphoreWin32HandleInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  semaphore: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  handleType: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  handle: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
  name: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
});
/** VkExportSemaphoreWin32HandleInfoKHR **/
class VkExportSemaphoreWin32HandleInfoKHR {
  constructor(opts) {
    
    this._pNext = null;
    this._name = null;
    this.memoryBuffer = new ArrayBuffer(VkExportSemaphoreWin32HandleInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.name !== void 0) this.name = opts.name;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get name() {
    if (this._name !== null) {
      let str = textDecoder.decode(this._name);
      return str.substr(0, str.length - 1);
    } else {
      return null;
    }
  }
  set name(value) {
    if (value !== null && value.constructor === String) {
      this._name = textEncoder.encode(value + String.fromCharCode(0x0)).buffer;
      this.memoryView.setBigInt64(0x20, getAddressFromArrayBuffer(this._name));
    } else if (value === null) {
      this._name = null;
      this.memoryView.setBigInt64(0x20, 0n);
    } else {
      throw new TypeError("Invalid type for 'VkExportSemaphoreWin32HandleInfoKHR.name': Expected 'String' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkExportSemaphoreWin32HandleInfoKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkExportSemaphoreWin32HandleInfoKHR.byteLength = 0x28;

VkExportSemaphoreWin32HandleInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  name: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
});
/** VkD3D12FenceSubmitInfoKHR **/
class VkD3D12FenceSubmitInfoKHR {
  constructor(opts) {
    
    this._pNext = null;
    
    this._pWaitSemaphoreValues = null;
    
    this._pSignalSemaphoreValues = null;
    this.memoryBuffer = new ArrayBuffer(VkD3D12FenceSubmitInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.waitSemaphoreValuesCount !== void 0) this.waitSemaphoreValuesCount = opts.waitSemaphoreValuesCount;
      if (opts.pWaitSemaphoreValues !== void 0) this.pWaitSemaphoreValues = opts.pWaitSemaphoreValues;
      if (opts.signalSemaphoreValuesCount !== void 0) this.signalSemaphoreValuesCount = opts.signalSemaphoreValuesCount;
      if (opts.pSignalSemaphoreValues !== void 0) this.pSignalSemaphoreValues = opts.pSignalSemaphoreValues;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get waitSemaphoreValuesCount() {
    return this.memoryView.getUint32(0x10);
  }
  set waitSemaphoreValuesCount(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get pWaitSemaphoreValues() {
    return this._pWaitSemaphoreValues;
  }
  set pWaitSemaphoreValues(value) {
    if (value !== null && value.constructor === BigUint64Array) {
      this._pWaitSemaphoreValues = value;
      this.memoryView.setBigInt64(0x18, getAddressFromArrayBuffer(value.buffer));
    } else if (value === null) {
      this._pWaitSemaphoreValues = null;
    } else {
      throw new TypeError("Invalid type for 'VkD3D12FenceSubmitInfoKHR.pWaitSemaphoreValues': Expected 'BigUint64Array' but got '" + value.constructor.name + "'");
    }
  }
  get signalSemaphoreValuesCount() {
    return this.memoryView.getUint32(0x20);
  }
  set signalSemaphoreValuesCount(value) {
    this.memoryView.setUint32(0x20, value);
  }
  get pSignalSemaphoreValues() {
    return this._pSignalSemaphoreValues;
  }
  set pSignalSemaphoreValues(value) {
    if (value !== null && value.constructor === BigUint64Array) {
      this._pSignalSemaphoreValues = value;
      this.memoryView.setBigInt64(0x28, getAddressFromArrayBuffer(value.buffer));
    } else if (value === null) {
      this._pSignalSemaphoreValues = null;
    } else {
      throw new TypeError("Invalid type for 'VkD3D12FenceSubmitInfoKHR.pSignalSemaphoreValues': Expected 'BigUint64Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkD3D12FenceSubmitInfoKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkD3D12FenceSubmitInfoKHR.byteLength = 0x30;

VkD3D12FenceSubmitInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  waitSemaphoreValuesCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pWaitSemaphoreValues: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  signalSemaphoreValuesCount: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  pSignalSemaphoreValues: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
});
/** VkSemaphoreGetWin32HandleInfoKHR **/
class VkSemaphoreGetWin32HandleInfoKHR {
  constructor(opts) {
    
    this._pNext = null;
    this._semaphore = null;
    
    this.memoryBuffer = new ArrayBuffer(VkSemaphoreGetWin32HandleInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.semaphore !== void 0) this.semaphore = opts.semaphore;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get semaphore() {
    return this._semaphore;
  }
  set semaphore(value) {
    if (value !== null && value.constructor === VkSemaphore) {
      value.flush();
      this._semaphore = value;
      this.memoryView.setBigInt64(0x10, value.memoryAddress);
    } else if (value === null) {
      this._semaphore = null;
    } else {
      throw new TypeError("Invalid type for 'VkSemaphoreGetWin32HandleInfoKHR.semaphore': Expected 'VkSemaphore' but got '" + value.constructor.name + "'");
    }
  }
  get handleType() {
    return this.memoryView.getInt32(0x18);
  }
  set handleType(value) {
    this.memoryView.setInt32(0x18, value);
  }
  
};

VkSemaphoreGetWin32HandleInfoKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkSemaphoreGetWin32HandleInfoKHR.byteLength = 0x20;

VkSemaphoreGetWin32HandleInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  semaphore: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  handleType: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
});
/** VkImportSemaphoreFdInfoKHR **/
class VkImportSemaphoreFdInfoKHR {
  constructor(opts) {
    
    this._pNext = null;
    this._semaphore = null;
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkImportSemaphoreFdInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.semaphore !== void 0) this.semaphore = opts.semaphore;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      if (opts.fd !== void 0) this.fd = opts.fd;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get semaphore() {
    return this._semaphore;
  }
  set semaphore(value) {
    if (value !== null && value.constructor === VkSemaphore) {
      value.flush();
      this._semaphore = value;
      this.memoryView.setBigInt64(0x10, value.memoryAddress);
    } else if (value === null) {
      this._semaphore = null;
    } else {
      throw new TypeError("Invalid type for 'VkImportSemaphoreFdInfoKHR.semaphore': Expected 'VkSemaphore' but got '" + value.constructor.name + "'");
    }
  }
  get flags() {
    return this.memoryView.getInt32(0x18);
  }
  set flags(value) {
    this.memoryView.setInt32(0x18, value);
  }
  get handleType() {
    return this.memoryView.getInt32(0x1C);
  }
  set handleType(value) {
    this.memoryView.setInt32(0x1C, value);
  }
  get fd() {
    return this.memoryView.getInt32(0x20);
  }
  set fd(value) {
    this.memoryView.setInt32(0x20, value);
  }
  
};

VkImportSemaphoreFdInfoKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkImportSemaphoreFdInfoKHR.byteLength = 0x28;

VkImportSemaphoreFdInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  semaphore: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  handleType: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  fd: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
});
/** VkSemaphoreGetFdInfoKHR **/
class VkSemaphoreGetFdInfoKHR {
  constructor(opts) {
    
    this._pNext = null;
    this._semaphore = null;
    
    this.memoryBuffer = new ArrayBuffer(VkSemaphoreGetFdInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.semaphore !== void 0) this.semaphore = opts.semaphore;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get semaphore() {
    return this._semaphore;
  }
  set semaphore(value) {
    if (value !== null && value.constructor === VkSemaphore) {
      value.flush();
      this._semaphore = value;
      this.memoryView.setBigInt64(0x10, value.memoryAddress);
    } else if (value === null) {
      this._semaphore = null;
    } else {
      throw new TypeError("Invalid type for 'VkSemaphoreGetFdInfoKHR.semaphore': Expected 'VkSemaphore' but got '" + value.constructor.name + "'");
    }
  }
  get handleType() {
    return this.memoryView.getInt32(0x18);
  }
  set handleType(value) {
    this.memoryView.setInt32(0x18, value);
  }
  
};

VkSemaphoreGetFdInfoKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkSemaphoreGetFdInfoKHR.byteLength = 0x20;

VkSemaphoreGetFdInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  semaphore: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  handleType: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceExternalFenceInfo **/
class VkPhysicalDeviceExternalFenceInfo {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceExternalFenceInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get handleType() {
    return this.memoryView.getInt32(0x10);
  }
  set handleType(value) {
    this.memoryView.setInt32(0x10, value);
  }
  
};

VkPhysicalDeviceExternalFenceInfo.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceExternalFenceInfo.byteLength = 0x18;

VkPhysicalDeviceExternalFenceInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  handleType: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceExternalFenceInfoKHR **/
class VkPhysicalDeviceExternalFenceInfoKHR {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceExternalFenceInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get handleType() {
    return this.memoryView.getInt32(0x10);
  }
  set handleType(value) {
    this.memoryView.setInt32(0x10, value);
  }
  
};

VkPhysicalDeviceExternalFenceInfoKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceExternalFenceInfoKHR.byteLength = 0x18;

VkPhysicalDeviceExternalFenceInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  handleType: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkExternalFenceProperties **/
class VkExternalFenceProperties {
  constructor(opts) {
    
    this._pNext = null;
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkExternalFenceProperties.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get exportFromImportedHandleTypes() {
    return this.memoryView.getInt32(0x10);
  }
  get compatibleHandleTypes() {
    return this.memoryView.getInt32(0x14);
  }
  get externalFenceFeatures() {
    return this.memoryView.getInt32(0x18);
  }
  
};

VkExternalFenceProperties.prototype.flush = function flush() {
  
  
  
  return true;
};

VkExternalFenceProperties.byteLength = 0x20;

VkExternalFenceProperties.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  exportFromImportedHandleTypes: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  compatibleHandleTypes: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  externalFenceFeatures: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
});
/** VkExternalFencePropertiesKHR **/
class VkExternalFencePropertiesKHR {
  constructor(opts) {
    
    this._pNext = null;
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkExternalFencePropertiesKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get exportFromImportedHandleTypes() {
    return this.memoryView.getInt32(0x10);
  }
  get compatibleHandleTypes() {
    return this.memoryView.getInt32(0x14);
  }
  get externalFenceFeatures() {
    return this.memoryView.getInt32(0x18);
  }
  
};

VkExternalFencePropertiesKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkExternalFencePropertiesKHR.byteLength = 0x20;

VkExternalFencePropertiesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  exportFromImportedHandleTypes: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  compatibleHandleTypes: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  externalFenceFeatures: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
});
/** VkExportFenceCreateInfo **/
class VkExportFenceCreateInfo {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkExportFenceCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleTypes !== void 0) this.handleTypes = opts.handleTypes;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get handleTypes() {
    return this.memoryView.getInt32(0x10);
  }
  set handleTypes(value) {
    this.memoryView.setInt32(0x10, value);
  }
  
};

VkExportFenceCreateInfo.prototype.flush = function flush() {
  
  
  
  return true;
};

VkExportFenceCreateInfo.byteLength = 0x18;

VkExportFenceCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  handleTypes: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkExportFenceCreateInfoKHR **/
class VkExportFenceCreateInfoKHR {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkExportFenceCreateInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleTypes !== void 0) this.handleTypes = opts.handleTypes;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get handleTypes() {
    return this.memoryView.getInt32(0x10);
  }
  set handleTypes(value) {
    this.memoryView.setInt32(0x10, value);
  }
  
};

VkExportFenceCreateInfoKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkExportFenceCreateInfoKHR.byteLength = 0x18;

VkExportFenceCreateInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  handleTypes: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkImportFenceWin32HandleInfoKHR **/
class VkImportFenceWin32HandleInfoKHR {
  constructor(opts) {
    
    this._pNext = null;
    this._fence = null;
    
    
    
    this._name = null;
    this.memoryBuffer = new ArrayBuffer(VkImportFenceWin32HandleInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.fence !== void 0) this.fence = opts.fence;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      if (opts.handle !== void 0) this.handle = opts.handle;
      if (opts.name !== void 0) this.name = opts.name;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get fence() {
    return this._fence;
  }
  set fence(value) {
    if (value !== null && value.constructor === VkFence) {
      value.flush();
      this._fence = value;
      this.memoryView.setBigInt64(0x10, value.memoryAddress);
    } else if (value === null) {
      this._fence = null;
    } else {
      throw new TypeError("Invalid type for 'VkImportFenceWin32HandleInfoKHR.fence': Expected 'VkFence' but got '" + value.constructor.name + "'");
    }
  }
  get flags() {
    return this.memoryView.getInt32(0x18);
  }
  set flags(value) {
    this.memoryView.setInt32(0x18, value);
  }
  get handleType() {
    return this.memoryView.getInt32(0x1C);
  }
  set handleType(value) {
    this.memoryView.setInt32(0x1C, value);
  }
  get handle() {
    return this.memoryView.getBigInt64(0x20);
  }
  set handle(value) {
    this.memoryView.setBigInt64(0x20, value);
  }
  get name() {
    if (this._name !== null) {
      let str = textDecoder.decode(this._name);
      return str.substr(0, str.length - 1);
    } else {
      return null;
    }
  }
  set name(value) {
    if (value !== null && value.constructor === String) {
      this._name = textEncoder.encode(value + String.fromCharCode(0x0)).buffer;
      this.memoryView.setBigInt64(0x28, getAddressFromArrayBuffer(this._name));
    } else if (value === null) {
      this._name = null;
      this.memoryView.setBigInt64(0x28, 0n);
    } else {
      throw new TypeError("Invalid type for 'VkImportFenceWin32HandleInfoKHR.name': Expected 'String' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkImportFenceWin32HandleInfoKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkImportFenceWin32HandleInfoKHR.byteLength = 0x30;

VkImportFenceWin32HandleInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  fence: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  handleType: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  handle: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
  name: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
});
/** VkExportFenceWin32HandleInfoKHR **/
class VkExportFenceWin32HandleInfoKHR {
  constructor(opts) {
    
    this._pNext = null;
    this._name = null;
    this.memoryBuffer = new ArrayBuffer(VkExportFenceWin32HandleInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.name !== void 0) this.name = opts.name;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get name() {
    if (this._name !== null) {
      let str = textDecoder.decode(this._name);
      return str.substr(0, str.length - 1);
    } else {
      return null;
    }
  }
  set name(value) {
    if (value !== null && value.constructor === String) {
      this._name = textEncoder.encode(value + String.fromCharCode(0x0)).buffer;
      this.memoryView.setBigInt64(0x20, getAddressFromArrayBuffer(this._name));
    } else if (value === null) {
      this._name = null;
      this.memoryView.setBigInt64(0x20, 0n);
    } else {
      throw new TypeError("Invalid type for 'VkExportFenceWin32HandleInfoKHR.name': Expected 'String' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkExportFenceWin32HandleInfoKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkExportFenceWin32HandleInfoKHR.byteLength = 0x28;

VkExportFenceWin32HandleInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  name: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
});
/** VkFenceGetWin32HandleInfoKHR **/
class VkFenceGetWin32HandleInfoKHR {
  constructor(opts) {
    
    this._pNext = null;
    this._fence = null;
    
    this.memoryBuffer = new ArrayBuffer(VkFenceGetWin32HandleInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.fence !== void 0) this.fence = opts.fence;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get fence() {
    return this._fence;
  }
  set fence(value) {
    if (value !== null && value.constructor === VkFence) {
      value.flush();
      this._fence = value;
      this.memoryView.setBigInt64(0x10, value.memoryAddress);
    } else if (value === null) {
      this._fence = null;
    } else {
      throw new TypeError("Invalid type for 'VkFenceGetWin32HandleInfoKHR.fence': Expected 'VkFence' but got '" + value.constructor.name + "'");
    }
  }
  get handleType() {
    return this.memoryView.getInt32(0x18);
  }
  set handleType(value) {
    this.memoryView.setInt32(0x18, value);
  }
  
};

VkFenceGetWin32HandleInfoKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkFenceGetWin32HandleInfoKHR.byteLength = 0x20;

VkFenceGetWin32HandleInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  fence: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  handleType: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
});
/** VkImportFenceFdInfoKHR **/
class VkImportFenceFdInfoKHR {
  constructor(opts) {
    
    this._pNext = null;
    this._fence = null;
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkImportFenceFdInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.fence !== void 0) this.fence = opts.fence;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      if (opts.fd !== void 0) this.fd = opts.fd;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get fence() {
    return this._fence;
  }
  set fence(value) {
    if (value !== null && value.constructor === VkFence) {
      value.flush();
      this._fence = value;
      this.memoryView.setBigInt64(0x10, value.memoryAddress);
    } else if (value === null) {
      this._fence = null;
    } else {
      throw new TypeError("Invalid type for 'VkImportFenceFdInfoKHR.fence': Expected 'VkFence' but got '" + value.constructor.name + "'");
    }
  }
  get flags() {
    return this.memoryView.getInt32(0x18);
  }
  set flags(value) {
    this.memoryView.setInt32(0x18, value);
  }
  get handleType() {
    return this.memoryView.getInt32(0x1C);
  }
  set handleType(value) {
    this.memoryView.setInt32(0x1C, value);
  }
  get fd() {
    return this.memoryView.getInt32(0x20);
  }
  set fd(value) {
    this.memoryView.setInt32(0x20, value);
  }
  
};

VkImportFenceFdInfoKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkImportFenceFdInfoKHR.byteLength = 0x28;

VkImportFenceFdInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  fence: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  handleType: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  fd: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
});
/** VkFenceGetFdInfoKHR **/
class VkFenceGetFdInfoKHR {
  constructor(opts) {
    
    this._pNext = null;
    this._fence = null;
    
    this.memoryBuffer = new ArrayBuffer(VkFenceGetFdInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.fence !== void 0) this.fence = opts.fence;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get fence() {
    return this._fence;
  }
  set fence(value) {
    if (value !== null && value.constructor === VkFence) {
      value.flush();
      this._fence = value;
      this.memoryView.setBigInt64(0x10, value.memoryAddress);
    } else if (value === null) {
      this._fence = null;
    } else {
      throw new TypeError("Invalid type for 'VkFenceGetFdInfoKHR.fence': Expected 'VkFence' but got '" + value.constructor.name + "'");
    }
  }
  get handleType() {
    return this.memoryView.getInt32(0x18);
  }
  set handleType(value) {
    this.memoryView.setInt32(0x18, value);
  }
  
};

VkFenceGetFdInfoKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkFenceGetFdInfoKHR.byteLength = 0x20;

VkFenceGetFdInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  fence: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  handleType: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceMultiviewFeatures **/
class VkPhysicalDeviceMultiviewFeatures {
  constructor(opts) {
    
    this._pNext = null;
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceMultiviewFeatures.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.multiview !== void 0) this.multiview = opts.multiview;
      if (opts.multiviewGeometryShader !== void 0) this.multiviewGeometryShader = opts.multiviewGeometryShader;
      if (opts.multiviewTessellationShader !== void 0) this.multiviewTessellationShader = opts.multiviewTessellationShader;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get multiview() {
    return this.memoryView.getUint32(0x10);
  }
  set multiview(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get multiviewGeometryShader() {
    return this.memoryView.getUint32(0x14);
  }
  set multiviewGeometryShader(value) {
    this.memoryView.setUint32(0x14, value);
  }
  get multiviewTessellationShader() {
    return this.memoryView.getUint32(0x18);
  }
  set multiviewTessellationShader(value) {
    this.memoryView.setUint32(0x18, value);
  }
  
};

VkPhysicalDeviceMultiviewFeatures.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceMultiviewFeatures.byteLength = 0x20;

VkPhysicalDeviceMultiviewFeatures.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  multiview: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  multiviewGeometryShader: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  multiviewTessellationShader: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceMultiviewFeaturesKHR **/
class VkPhysicalDeviceMultiviewFeaturesKHR {
  constructor(opts) {
    
    this._pNext = null;
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceMultiviewFeaturesKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.multiview !== void 0) this.multiview = opts.multiview;
      if (opts.multiviewGeometryShader !== void 0) this.multiviewGeometryShader = opts.multiviewGeometryShader;
      if (opts.multiviewTessellationShader !== void 0) this.multiviewTessellationShader = opts.multiviewTessellationShader;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get multiview() {
    return this.memoryView.getUint32(0x10);
  }
  set multiview(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get multiviewGeometryShader() {
    return this.memoryView.getUint32(0x14);
  }
  set multiviewGeometryShader(value) {
    this.memoryView.setUint32(0x14, value);
  }
  get multiviewTessellationShader() {
    return this.memoryView.getUint32(0x18);
  }
  set multiviewTessellationShader(value) {
    this.memoryView.setUint32(0x18, value);
  }
  
};

VkPhysicalDeviceMultiviewFeaturesKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceMultiviewFeaturesKHR.byteLength = 0x20;

VkPhysicalDeviceMultiviewFeaturesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  multiview: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  multiviewGeometryShader: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  multiviewTessellationShader: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceMultiviewProperties **/
class VkPhysicalDeviceMultiviewProperties {
  constructor(opts) {
    
    this._pNext = null;
    
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceMultiviewProperties.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get maxMultiviewViewCount() {
    return this.memoryView.getUint32(0x10);
  }
  get maxMultiviewInstanceIndex() {
    return this.memoryView.getUint32(0x14);
  }
  
};

VkPhysicalDeviceMultiviewProperties.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceMultiviewProperties.byteLength = 0x18;

VkPhysicalDeviceMultiviewProperties.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  maxMultiviewViewCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  maxMultiviewInstanceIndex: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceMultiviewPropertiesKHR **/
class VkPhysicalDeviceMultiviewPropertiesKHR {
  constructor(opts) {
    
    this._pNext = null;
    
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceMultiviewPropertiesKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get maxMultiviewViewCount() {
    return this.memoryView.getUint32(0x10);
  }
  get maxMultiviewInstanceIndex() {
    return this.memoryView.getUint32(0x14);
  }
  
};

VkPhysicalDeviceMultiviewPropertiesKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceMultiviewPropertiesKHR.byteLength = 0x18;

VkPhysicalDeviceMultiviewPropertiesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  maxMultiviewViewCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  maxMultiviewInstanceIndex: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
});
/** VkRenderPassMultiviewCreateInfo **/
class VkRenderPassMultiviewCreateInfo {
  constructor(opts) {
    
    this._pNext = null;
    
    this._pViewMasks = null;
    
    this._pViewOffsets = null;
    
    this._pCorrelationMasks = null;
    this.memoryBuffer = new ArrayBuffer(VkRenderPassMultiviewCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.subpassCount !== void 0) this.subpassCount = opts.subpassCount;
      if (opts.pViewMasks !== void 0) this.pViewMasks = opts.pViewMasks;
      if (opts.dependencyCount !== void 0) this.dependencyCount = opts.dependencyCount;
      if (opts.pViewOffsets !== void 0) this.pViewOffsets = opts.pViewOffsets;
      if (opts.correlationMaskCount !== void 0) this.correlationMaskCount = opts.correlationMaskCount;
      if (opts.pCorrelationMasks !== void 0) this.pCorrelationMasks = opts.pCorrelationMasks;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get subpassCount() {
    return this.memoryView.getUint32(0x10);
  }
  set subpassCount(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get pViewMasks() {
    return this._pViewMasks;
  }
  set pViewMasks(value) {
    if (value !== null && value.constructor === Uint32Array) {
      this._pViewMasks = value;
      this.memoryView.setBigInt64(0x18, getAddressFromArrayBuffer(value.buffer));
    } else if (value === null) {
      this._pViewMasks = null;
    } else {
      throw new TypeError("Invalid type for 'VkRenderPassMultiviewCreateInfo.pViewMasks': Expected 'Uint32Array' but got '" + value.constructor.name + "'");
    }
  }
  get dependencyCount() {
    return this.memoryView.getUint32(0x20);
  }
  set dependencyCount(value) {
    this.memoryView.setUint32(0x20, value);
  }
  get pViewOffsets() {
    return this._pViewOffsets;
  }
  set pViewOffsets(value) {
    if (value !== null && value.constructor === Int32Array) {
      this._pViewOffsets = value;
      this.memoryView.setBigInt64(0x28, getAddressFromArrayBuffer(value.buffer));
    } else if (value === null) {
      this._pViewOffsets = null;
    } else {
      throw new TypeError("Invalid type for 'VkRenderPassMultiviewCreateInfo.pViewOffsets': Expected 'Int32Array' but got '" + value.constructor.name + "'");
    }
  }
  get correlationMaskCount() {
    return this.memoryView.getUint32(0x30);
  }
  set correlationMaskCount(value) {
    this.memoryView.setUint32(0x30, value);
  }
  get pCorrelationMasks() {
    return this._pCorrelationMasks;
  }
  set pCorrelationMasks(value) {
    if (value !== null && value.constructor === Uint32Array) {
      this._pCorrelationMasks = value;
      this.memoryView.setBigInt64(0x38, getAddressFromArrayBuffer(value.buffer));
    } else if (value === null) {
      this._pCorrelationMasks = null;
    } else {
      throw new TypeError("Invalid type for 'VkRenderPassMultiviewCreateInfo.pCorrelationMasks': Expected 'Uint32Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkRenderPassMultiviewCreateInfo.prototype.flush = function flush() {
  
  
  
  return true;
};

VkRenderPassMultiviewCreateInfo.byteLength = 0x40;

VkRenderPassMultiviewCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  subpassCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pViewMasks: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  dependencyCount: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  pViewOffsets: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
  correlationMaskCount: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  pCorrelationMasks: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x8
  }),
});
/** VkRenderPassMultiviewCreateInfoKHR **/
class VkRenderPassMultiviewCreateInfoKHR {
  constructor(opts) {
    
    this._pNext = null;
    
    this._pViewMasks = null;
    
    this._pViewOffsets = null;
    
    this._pCorrelationMasks = null;
    this.memoryBuffer = new ArrayBuffer(VkRenderPassMultiviewCreateInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.subpassCount !== void 0) this.subpassCount = opts.subpassCount;
      if (opts.pViewMasks !== void 0) this.pViewMasks = opts.pViewMasks;
      if (opts.dependencyCount !== void 0) this.dependencyCount = opts.dependencyCount;
      if (opts.pViewOffsets !== void 0) this.pViewOffsets = opts.pViewOffsets;
      if (opts.correlationMaskCount !== void 0) this.correlationMaskCount = opts.correlationMaskCount;
      if (opts.pCorrelationMasks !== void 0) this.pCorrelationMasks = opts.pCorrelationMasks;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get subpassCount() {
    return this.memoryView.getUint32(0x10);
  }
  set subpassCount(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get pViewMasks() {
    return this._pViewMasks;
  }
  set pViewMasks(value) {
    if (value !== null && value.constructor === Uint32Array) {
      this._pViewMasks = value;
      this.memoryView.setBigInt64(0x18, getAddressFromArrayBuffer(value.buffer));
    } else if (value === null) {
      this._pViewMasks = null;
    } else {
      throw new TypeError("Invalid type for 'VkRenderPassMultiviewCreateInfoKHR.pViewMasks': Expected 'Uint32Array' but got '" + value.constructor.name + "'");
    }
  }
  get dependencyCount() {
    return this.memoryView.getUint32(0x20);
  }
  set dependencyCount(value) {
    this.memoryView.setUint32(0x20, value);
  }
  get pViewOffsets() {
    return this._pViewOffsets;
  }
  set pViewOffsets(value) {
    if (value !== null && value.constructor === Int32Array) {
      this._pViewOffsets = value;
      this.memoryView.setBigInt64(0x28, getAddressFromArrayBuffer(value.buffer));
    } else if (value === null) {
      this._pViewOffsets = null;
    } else {
      throw new TypeError("Invalid type for 'VkRenderPassMultiviewCreateInfoKHR.pViewOffsets': Expected 'Int32Array' but got '" + value.constructor.name + "'");
    }
  }
  get correlationMaskCount() {
    return this.memoryView.getUint32(0x30);
  }
  set correlationMaskCount(value) {
    this.memoryView.setUint32(0x30, value);
  }
  get pCorrelationMasks() {
    return this._pCorrelationMasks;
  }
  set pCorrelationMasks(value) {
    if (value !== null && value.constructor === Uint32Array) {
      this._pCorrelationMasks = value;
      this.memoryView.setBigInt64(0x38, getAddressFromArrayBuffer(value.buffer));
    } else if (value === null) {
      this._pCorrelationMasks = null;
    } else {
      throw new TypeError("Invalid type for 'VkRenderPassMultiviewCreateInfoKHR.pCorrelationMasks': Expected 'Uint32Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkRenderPassMultiviewCreateInfoKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkRenderPassMultiviewCreateInfoKHR.byteLength = 0x40;

VkRenderPassMultiviewCreateInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  subpassCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pViewMasks: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  dependencyCount: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  pViewOffsets: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
  correlationMaskCount: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  pCorrelationMasks: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x8
  }),
});
/** VkSurfaceCapabilities2EXT **/
class VkSurfaceCapabilities2EXT {
  constructor(opts) {
    
    this._pNext = null;
    
    
    this._currentExtent = null;
    this._minImageExtent = null;
    this._maxImageExtent = null;
    
    
    
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkSurfaceCapabilities2EXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get minImageCount() {
    return this.memoryView.getUint32(0x10);
  }
  get maxImageCount() {
    return this.memoryView.getUint32(0x14);
  }
  get currentExtent() {
    return this._currentExtent;
  }
  get minImageExtent() {
    return this._minImageExtent;
  }
  get maxImageExtent() {
    return this._maxImageExtent;
  }
  get maxImageArrayLayers() {
    return this.memoryView.getUint32(0x30);
  }
  get supportedTransforms() {
    return this.memoryView.getInt32(0x34);
  }
  get currentTransform() {
    return this.memoryView.getInt32(0x38);
  }
  get supportedCompositeAlpha() {
    return this.memoryView.getInt32(0x3C);
  }
  get supportedUsageFlags() {
    return this.memoryView.getInt32(0x40);
  }
  get supportedSurfaceCounters() {
    return this.memoryView.getInt32(0x44);
  }
  
};

VkSurfaceCapabilities2EXT.prototype.flush = function flush() {
  
  
  
  
  
  
  
  
  
  return true;
};

VkSurfaceCapabilities2EXT.byteLength = 0x48;

VkSurfaceCapabilities2EXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  minImageCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  maxImageCount: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  currentExtent: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  minImageExtent: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
  maxImageExtent: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
  maxImageArrayLayers: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  supportedTransforms: Object.freeze({
    byteOffset: 0x34,
    byteLength: 0x4
  }),
  currentTransform: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x4
  }),
  supportedCompositeAlpha: Object.freeze({
    byteOffset: 0x3C,
    byteLength: 0x4
  }),
  supportedUsageFlags: Object.freeze({
    byteOffset: 0x40,
    byteLength: 0x4
  }),
  supportedSurfaceCounters: Object.freeze({
    byteOffset: 0x44,
    byteLength: 0x4
  }),
});
/** VkDisplayPowerInfoEXT **/
class VkDisplayPowerInfoEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkDisplayPowerInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.powerState !== void 0) this.powerState = opts.powerState;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get powerState() {
    return this.memoryView.getInt32(0x10);
  }
  set powerState(value) {
    this.memoryView.setInt32(0x10, value);
  }
  
};

VkDisplayPowerInfoEXT.prototype.flush = function flush() {
  
  
  
  return true;
};

VkDisplayPowerInfoEXT.byteLength = 0x18;

VkDisplayPowerInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  powerState: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkDeviceEventInfoEXT **/
class VkDeviceEventInfoEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkDeviceEventInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.deviceEvent !== void 0) this.deviceEvent = opts.deviceEvent;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get deviceEvent() {
    return this.memoryView.getInt32(0x10);
  }
  set deviceEvent(value) {
    this.memoryView.setInt32(0x10, value);
  }
  
};

VkDeviceEventInfoEXT.prototype.flush = function flush() {
  
  
  
  return true;
};

VkDeviceEventInfoEXT.byteLength = 0x18;

VkDeviceEventInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  deviceEvent: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkDisplayEventInfoEXT **/
class VkDisplayEventInfoEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkDisplayEventInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.displayEvent !== void 0) this.displayEvent = opts.displayEvent;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get displayEvent() {
    return this.memoryView.getInt32(0x10);
  }
  set displayEvent(value) {
    this.memoryView.setInt32(0x10, value);
  }
  
};

VkDisplayEventInfoEXT.prototype.flush = function flush() {
  
  
  
  return true;
};

VkDisplayEventInfoEXT.byteLength = 0x18;

VkDisplayEventInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  displayEvent: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkSwapchainCounterCreateInfoEXT **/
class VkSwapchainCounterCreateInfoEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkSwapchainCounterCreateInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.surfaceCounters !== void 0) this.surfaceCounters = opts.surfaceCounters;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get surfaceCounters() {
    return this.memoryView.getInt32(0x10);
  }
  set surfaceCounters(value) {
    this.memoryView.setInt32(0x10, value);
  }
  
};

VkSwapchainCounterCreateInfoEXT.prototype.flush = function flush() {
  
  
  
  return true;
};

VkSwapchainCounterCreateInfoEXT.byteLength = 0x18;

VkSwapchainCounterCreateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  surfaceCounters: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceGroupProperties **/
class VkPhysicalDeviceGroupProperties {
  constructor(opts) {
    
    this._pNext = null;
    
    this._physicalDevices = null;
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceGroupProperties.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get physicalDeviceCount() {
    return this.memoryView.getUint32(0x10);
  }
  get physicalDevices() {
    return this._physicalDevices;
  }
  get subsetAllocation() {
    return this.memoryView.getUint32(0x118);
  }
  
};

VkPhysicalDeviceGroupProperties.prototype.flush = function flush() {
  
  
  
  
  if (this._physicalDevices !== null) {
    let nativeArray = new NativeObjectArray(this._physicalDevices);
    this._physicalDevicesNative = nativeArray;
    this.memoryView.setBigInt64(0x18, nativeArray.address);
  }
  
  return true;
};

VkPhysicalDeviceGroupProperties.byteLength = 0x120;

VkPhysicalDeviceGroupProperties.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  physicalDeviceCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  physicalDevices: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x100
  }),
  subsetAllocation: Object.freeze({
    byteOffset: 0x118,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceGroupPropertiesKHR **/
class VkPhysicalDeviceGroupPropertiesKHR {
  constructor(opts) {
    
    this._pNext = null;
    
    this._physicalDevices = null;
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceGroupPropertiesKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get physicalDeviceCount() {
    return this.memoryView.getUint32(0x10);
  }
  get physicalDevices() {
    return this._physicalDevices;
  }
  get subsetAllocation() {
    return this.memoryView.getUint32(0x118);
  }
  
};

VkPhysicalDeviceGroupPropertiesKHR.prototype.flush = function flush() {
  
  
  
  
  if (this._physicalDevices !== null) {
    let nativeArray = new NativeObjectArray(this._physicalDevices);
    this._physicalDevicesNative = nativeArray;
    this.memoryView.setBigInt64(0x18, nativeArray.address);
  }
  
  return true;
};

VkPhysicalDeviceGroupPropertiesKHR.byteLength = 0x120;

VkPhysicalDeviceGroupPropertiesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  physicalDeviceCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  physicalDevices: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x100
  }),
  subsetAllocation: Object.freeze({
    byteOffset: 0x118,
    byteLength: 0x4
  }),
});
/** VkMemoryAllocateFlagsInfo **/
class VkMemoryAllocateFlagsInfo {
  constructor(opts) {
    
    this._pNext = null;
    
    
    this.memoryBuffer = new ArrayBuffer(VkMemoryAllocateFlagsInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.deviceMask !== void 0) this.deviceMask = opts.deviceMask;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get flags() {
    return this.memoryView.getInt32(0x10);
  }
  set flags(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get deviceMask() {
    return this.memoryView.getUint32(0x14);
  }
  set deviceMask(value) {
    this.memoryView.setUint32(0x14, value);
  }
  
};

VkMemoryAllocateFlagsInfo.prototype.flush = function flush() {
  
  
  
  return true;
};

VkMemoryAllocateFlagsInfo.byteLength = 0x18;

VkMemoryAllocateFlagsInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  deviceMask: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
});
/** VkMemoryAllocateFlagsInfoKHR **/
class VkMemoryAllocateFlagsInfoKHR {
  constructor(opts) {
    
    this._pNext = null;
    
    
    this.memoryBuffer = new ArrayBuffer(VkMemoryAllocateFlagsInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.deviceMask !== void 0) this.deviceMask = opts.deviceMask;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get flags() {
    return this.memoryView.getInt32(0x10);
  }
  set flags(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get deviceMask() {
    return this.memoryView.getUint32(0x14);
  }
  set deviceMask(value) {
    this.memoryView.setUint32(0x14, value);
  }
  
};

VkMemoryAllocateFlagsInfoKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkMemoryAllocateFlagsInfoKHR.byteLength = 0x18;

VkMemoryAllocateFlagsInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  deviceMask: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
});
/** VkBindBufferMemoryInfo **/
class VkBindBufferMemoryInfo {
  constructor(opts) {
    
    this._pNext = null;
    this._buffer = null;
    this._memory = null;
    
    this.memoryBuffer = new ArrayBuffer(VkBindBufferMemoryInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.buffer !== void 0) this.buffer = opts.buffer;
      if (opts.memory !== void 0) this.memory = opts.memory;
      if (opts.memoryOffset !== void 0) this.memoryOffset = opts.memoryOffset;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get buffer() {
    return this._buffer;
  }
  set buffer(value) {
    if (value !== null && value.constructor === VkBuffer) {
      value.flush();
      this._buffer = value;
      this.memoryView.setBigInt64(0x10, value.memoryAddress);
    } else if (value === null) {
      this._buffer = null;
    } else {
      throw new TypeError("Invalid type for 'VkBindBufferMemoryInfo.buffer': Expected 'VkBuffer' but got '" + value.constructor.name + "'");
    }
  }
  get memory() {
    return this._memory;
  }
  set memory(value) {
    if (value !== null && value.constructor === VkDeviceMemory) {
      value.flush();
      this._memory = value;
      this.memoryView.setBigInt64(0x18, value.memoryAddress);
    } else if (value === null) {
      this._memory = null;
    } else {
      throw new TypeError("Invalid type for 'VkBindBufferMemoryInfo.memory': Expected 'VkDeviceMemory' but got '" + value.constructor.name + "'");
    }
  }
  get memoryOffset() {
    return this.memoryView.getBigUint64(0x20);
  }
  set memoryOffset(value) {
    this.memoryView.setBigUint64(0x20, value);
  }
  
};

VkBindBufferMemoryInfo.prototype.flush = function flush() {
  
  
  
  return true;
};

VkBindBufferMemoryInfo.byteLength = 0x28;

VkBindBufferMemoryInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  buffer: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  memory: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  memoryOffset: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
});
/** VkBindBufferMemoryInfoKHR **/
class VkBindBufferMemoryInfoKHR {
  constructor(opts) {
    
    this._pNext = null;
    this._buffer = null;
    this._memory = null;
    
    this.memoryBuffer = new ArrayBuffer(VkBindBufferMemoryInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.buffer !== void 0) this.buffer = opts.buffer;
      if (opts.memory !== void 0) this.memory = opts.memory;
      if (opts.memoryOffset !== void 0) this.memoryOffset = opts.memoryOffset;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get buffer() {
    return this._buffer;
  }
  set buffer(value) {
    if (value !== null && value.constructor === VkBuffer) {
      value.flush();
      this._buffer = value;
      this.memoryView.setBigInt64(0x10, value.memoryAddress);
    } else if (value === null) {
      this._buffer = null;
    } else {
      throw new TypeError("Invalid type for 'VkBindBufferMemoryInfoKHR.buffer': Expected 'VkBuffer' but got '" + value.constructor.name + "'");
    }
  }
  get memory() {
    return this._memory;
  }
  set memory(value) {
    if (value !== null && value.constructor === VkDeviceMemory) {
      value.flush();
      this._memory = value;
      this.memoryView.setBigInt64(0x18, value.memoryAddress);
    } else if (value === null) {
      this._memory = null;
    } else {
      throw new TypeError("Invalid type for 'VkBindBufferMemoryInfoKHR.memory': Expected 'VkDeviceMemory' but got '" + value.constructor.name + "'");
    }
  }
  get memoryOffset() {
    return this.memoryView.getBigUint64(0x20);
  }
  set memoryOffset(value) {
    this.memoryView.setBigUint64(0x20, value);
  }
  
};

VkBindBufferMemoryInfoKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkBindBufferMemoryInfoKHR.byteLength = 0x28;

VkBindBufferMemoryInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  buffer: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  memory: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  memoryOffset: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
});
/** VkBindBufferMemoryDeviceGroupInfo **/
class VkBindBufferMemoryDeviceGroupInfo {
  constructor(opts) {
    
    this._pNext = null;
    
    this._pDeviceIndices = null;
    this.memoryBuffer = new ArrayBuffer(VkBindBufferMemoryDeviceGroupInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.deviceIndexCount !== void 0) this.deviceIndexCount = opts.deviceIndexCount;
      if (opts.pDeviceIndices !== void 0) this.pDeviceIndices = opts.pDeviceIndices;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get deviceIndexCount() {
    return this.memoryView.getUint32(0x10);
  }
  set deviceIndexCount(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get pDeviceIndices() {
    return this._pDeviceIndices;
  }
  set pDeviceIndices(value) {
    if (value !== null && value.constructor === Uint32Array) {
      this._pDeviceIndices = value;
      this.memoryView.setBigInt64(0x18, getAddressFromArrayBuffer(value.buffer));
    } else if (value === null) {
      this._pDeviceIndices = null;
    } else {
      throw new TypeError("Invalid type for 'VkBindBufferMemoryDeviceGroupInfo.pDeviceIndices': Expected 'Uint32Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkBindBufferMemoryDeviceGroupInfo.prototype.flush = function flush() {
  
  
  
  return true;
};

VkBindBufferMemoryDeviceGroupInfo.byteLength = 0x20;

VkBindBufferMemoryDeviceGroupInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  deviceIndexCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pDeviceIndices: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkBindBufferMemoryDeviceGroupInfoKHR **/
class VkBindBufferMemoryDeviceGroupInfoKHR {
  constructor(opts) {
    
    this._pNext = null;
    
    this._pDeviceIndices = null;
    this.memoryBuffer = new ArrayBuffer(VkBindBufferMemoryDeviceGroupInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.deviceIndexCount !== void 0) this.deviceIndexCount = opts.deviceIndexCount;
      if (opts.pDeviceIndices !== void 0) this.pDeviceIndices = opts.pDeviceIndices;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get deviceIndexCount() {
    return this.memoryView.getUint32(0x10);
  }
  set deviceIndexCount(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get pDeviceIndices() {
    return this._pDeviceIndices;
  }
  set pDeviceIndices(value) {
    if (value !== null && value.constructor === Uint32Array) {
      this._pDeviceIndices = value;
      this.memoryView.setBigInt64(0x18, getAddressFromArrayBuffer(value.buffer));
    } else if (value === null) {
      this._pDeviceIndices = null;
    } else {
      throw new TypeError("Invalid type for 'VkBindBufferMemoryDeviceGroupInfoKHR.pDeviceIndices': Expected 'Uint32Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkBindBufferMemoryDeviceGroupInfoKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkBindBufferMemoryDeviceGroupInfoKHR.byteLength = 0x20;

VkBindBufferMemoryDeviceGroupInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  deviceIndexCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pDeviceIndices: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkBindImageMemoryInfo **/
class VkBindImageMemoryInfo {
  constructor(opts) {
    
    this._pNext = null;
    this._image = null;
    this._memory = null;
    
    this.memoryBuffer = new ArrayBuffer(VkBindImageMemoryInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.image !== void 0) this.image = opts.image;
      if (opts.memory !== void 0) this.memory = opts.memory;
      if (opts.memoryOffset !== void 0) this.memoryOffset = opts.memoryOffset;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get image() {
    return this._image;
  }
  set image(value) {
    if (value !== null && value.constructor === VkImage) {
      value.flush();
      this._image = value;
      this.memoryView.setBigInt64(0x10, value.memoryAddress);
    } else if (value === null) {
      this._image = null;
    } else {
      throw new TypeError("Invalid type for 'VkBindImageMemoryInfo.image': Expected 'VkImage' but got '" + value.constructor.name + "'");
    }
  }
  get memory() {
    return this._memory;
  }
  set memory(value) {
    if (value !== null && value.constructor === VkDeviceMemory) {
      value.flush();
      this._memory = value;
      this.memoryView.setBigInt64(0x18, value.memoryAddress);
    } else if (value === null) {
      this._memory = null;
    } else {
      throw new TypeError("Invalid type for 'VkBindImageMemoryInfo.memory': Expected 'VkDeviceMemory' but got '" + value.constructor.name + "'");
    }
  }
  get memoryOffset() {
    return this.memoryView.getBigUint64(0x20);
  }
  set memoryOffset(value) {
    this.memoryView.setBigUint64(0x20, value);
  }
  
};

VkBindImageMemoryInfo.prototype.flush = function flush() {
  
  
  
  return true;
};

VkBindImageMemoryInfo.byteLength = 0x28;

VkBindImageMemoryInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  image: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  memory: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  memoryOffset: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
});
/** VkBindImageMemoryInfoKHR **/
class VkBindImageMemoryInfoKHR {
  constructor(opts) {
    
    this._pNext = null;
    this._image = null;
    this._memory = null;
    
    this.memoryBuffer = new ArrayBuffer(VkBindImageMemoryInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.image !== void 0) this.image = opts.image;
      if (opts.memory !== void 0) this.memory = opts.memory;
      if (opts.memoryOffset !== void 0) this.memoryOffset = opts.memoryOffset;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get image() {
    return this._image;
  }
  set image(value) {
    if (value !== null && value.constructor === VkImage) {
      value.flush();
      this._image = value;
      this.memoryView.setBigInt64(0x10, value.memoryAddress);
    } else if (value === null) {
      this._image = null;
    } else {
      throw new TypeError("Invalid type for 'VkBindImageMemoryInfoKHR.image': Expected 'VkImage' but got '" + value.constructor.name + "'");
    }
  }
  get memory() {
    return this._memory;
  }
  set memory(value) {
    if (value !== null && value.constructor === VkDeviceMemory) {
      value.flush();
      this._memory = value;
      this.memoryView.setBigInt64(0x18, value.memoryAddress);
    } else if (value === null) {
      this._memory = null;
    } else {
      throw new TypeError("Invalid type for 'VkBindImageMemoryInfoKHR.memory': Expected 'VkDeviceMemory' but got '" + value.constructor.name + "'");
    }
  }
  get memoryOffset() {
    return this.memoryView.getBigUint64(0x20);
  }
  set memoryOffset(value) {
    this.memoryView.setBigUint64(0x20, value);
  }
  
};

VkBindImageMemoryInfoKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkBindImageMemoryInfoKHR.byteLength = 0x28;

VkBindImageMemoryInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  image: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  memory: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  memoryOffset: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
});
/** VkBindImageMemoryDeviceGroupInfo **/
class VkBindImageMemoryDeviceGroupInfo {
  constructor(opts) {
    
    this._pNext = null;
    
    this._pDeviceIndices = null;
    
    this._pSplitInstanceBindRegions = null;
    this._pSplitInstanceBindRegionsNative = null;
    this.memoryBuffer = new ArrayBuffer(VkBindImageMemoryDeviceGroupInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.deviceIndexCount !== void 0) this.deviceIndexCount = opts.deviceIndexCount;
      if (opts.pDeviceIndices !== void 0) this.pDeviceIndices = opts.pDeviceIndices;
      if (opts.splitInstanceBindRegionCount !== void 0) this.splitInstanceBindRegionCount = opts.splitInstanceBindRegionCount;
      if (opts.pSplitInstanceBindRegions !== void 0) this.pSplitInstanceBindRegions = opts.pSplitInstanceBindRegions;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get deviceIndexCount() {
    return this.memoryView.getUint32(0x10);
  }
  set deviceIndexCount(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get pDeviceIndices() {
    return this._pDeviceIndices;
  }
  set pDeviceIndices(value) {
    if (value !== null && value.constructor === Uint32Array) {
      this._pDeviceIndices = value;
      this.memoryView.setBigInt64(0x18, getAddressFromArrayBuffer(value.buffer));
    } else if (value === null) {
      this._pDeviceIndices = null;
    } else {
      throw new TypeError("Invalid type for 'VkBindImageMemoryDeviceGroupInfo.pDeviceIndices': Expected 'Uint32Array' but got '" + value.constructor.name + "'");
    }
  }
  get splitInstanceBindRegionCount() {
    return this.memoryView.getUint32(0x20);
  }
  set splitInstanceBindRegionCount(value) {
    this.memoryView.setUint32(0x20, value);
  }
  get pSplitInstanceBindRegions() {
    return this._pSplitInstanceBindRegions;
  }
  set pSplitInstanceBindRegions(value) {
    if (value !== null && value.constructor === Array) {
      this._pSplitInstanceBindRegions = value;
    } else if (value === null) {
      this._pSplitInstanceBindRegions = null;
    } else {
      throw new TypeError("Invalid type for 'VkBindImageMemoryDeviceGroupInfo.pSplitInstanceBindRegions': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkBindImageMemoryDeviceGroupInfo.prototype.flush = function flush() {
  
  
  
  
  if (this._pSplitInstanceBindRegions !== null) {
    let nativeArray = new NativeObjectArray(this._pSplitInstanceBindRegions);
    this._pSplitInstanceBindRegionsNative = nativeArray;
    this.memoryView.setBigInt64(0x28, nativeArray.address);
  }
  
  return true;
};

VkBindImageMemoryDeviceGroupInfo.byteLength = 0x30;

VkBindImageMemoryDeviceGroupInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  deviceIndexCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pDeviceIndices: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  splitInstanceBindRegionCount: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  pSplitInstanceBindRegions: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
});
/** VkBindImageMemoryDeviceGroupInfoKHR **/
class VkBindImageMemoryDeviceGroupInfoKHR {
  constructor(opts) {
    
    this._pNext = null;
    
    this._pDeviceIndices = null;
    
    this._pSplitInstanceBindRegions = null;
    this._pSplitInstanceBindRegionsNative = null;
    this.memoryBuffer = new ArrayBuffer(VkBindImageMemoryDeviceGroupInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.deviceIndexCount !== void 0) this.deviceIndexCount = opts.deviceIndexCount;
      if (opts.pDeviceIndices !== void 0) this.pDeviceIndices = opts.pDeviceIndices;
      if (opts.splitInstanceBindRegionCount !== void 0) this.splitInstanceBindRegionCount = opts.splitInstanceBindRegionCount;
      if (opts.pSplitInstanceBindRegions !== void 0) this.pSplitInstanceBindRegions = opts.pSplitInstanceBindRegions;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get deviceIndexCount() {
    return this.memoryView.getUint32(0x10);
  }
  set deviceIndexCount(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get pDeviceIndices() {
    return this._pDeviceIndices;
  }
  set pDeviceIndices(value) {
    if (value !== null && value.constructor === Uint32Array) {
      this._pDeviceIndices = value;
      this.memoryView.setBigInt64(0x18, getAddressFromArrayBuffer(value.buffer));
    } else if (value === null) {
      this._pDeviceIndices = null;
    } else {
      throw new TypeError("Invalid type for 'VkBindImageMemoryDeviceGroupInfoKHR.pDeviceIndices': Expected 'Uint32Array' but got '" + value.constructor.name + "'");
    }
  }
  get splitInstanceBindRegionCount() {
    return this.memoryView.getUint32(0x20);
  }
  set splitInstanceBindRegionCount(value) {
    this.memoryView.setUint32(0x20, value);
  }
  get pSplitInstanceBindRegions() {
    return this._pSplitInstanceBindRegions;
  }
  set pSplitInstanceBindRegions(value) {
    if (value !== null && value.constructor === Array) {
      this._pSplitInstanceBindRegions = value;
    } else if (value === null) {
      this._pSplitInstanceBindRegions = null;
    } else {
      throw new TypeError("Invalid type for 'VkBindImageMemoryDeviceGroupInfoKHR.pSplitInstanceBindRegions': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkBindImageMemoryDeviceGroupInfoKHR.prototype.flush = function flush() {
  
  
  
  
  if (this._pSplitInstanceBindRegions !== null) {
    let nativeArray = new NativeObjectArray(this._pSplitInstanceBindRegions);
    this._pSplitInstanceBindRegionsNative = nativeArray;
    this.memoryView.setBigInt64(0x28, nativeArray.address);
  }
  
  return true;
};

VkBindImageMemoryDeviceGroupInfoKHR.byteLength = 0x30;

VkBindImageMemoryDeviceGroupInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  deviceIndexCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pDeviceIndices: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  splitInstanceBindRegionCount: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  pSplitInstanceBindRegions: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
});
/** VkDeviceGroupRenderPassBeginInfo **/
class VkDeviceGroupRenderPassBeginInfo {
  constructor(opts) {
    
    this._pNext = null;
    
    
    this._pDeviceRenderAreas = null;
    this._pDeviceRenderAreasNative = null;
    this.memoryBuffer = new ArrayBuffer(VkDeviceGroupRenderPassBeginInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.deviceMask !== void 0) this.deviceMask = opts.deviceMask;
      if (opts.deviceRenderAreaCount !== void 0) this.deviceRenderAreaCount = opts.deviceRenderAreaCount;
      if (opts.pDeviceRenderAreas !== void 0) this.pDeviceRenderAreas = opts.pDeviceRenderAreas;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get deviceMask() {
    return this.memoryView.getUint32(0x10);
  }
  set deviceMask(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get deviceRenderAreaCount() {
    return this.memoryView.getUint32(0x14);
  }
  set deviceRenderAreaCount(value) {
    this.memoryView.setUint32(0x14, value);
  }
  get pDeviceRenderAreas() {
    return this._pDeviceRenderAreas;
  }
  set pDeviceRenderAreas(value) {
    if (value !== null && value.constructor === Array) {
      this._pDeviceRenderAreas = value;
    } else if (value === null) {
      this._pDeviceRenderAreas = null;
    } else {
      throw new TypeError("Invalid type for 'VkDeviceGroupRenderPassBeginInfo.pDeviceRenderAreas': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkDeviceGroupRenderPassBeginInfo.prototype.flush = function flush() {
  
  
  
  
  if (this._pDeviceRenderAreas !== null) {
    let nativeArray = new NativeObjectArray(this._pDeviceRenderAreas);
    this._pDeviceRenderAreasNative = nativeArray;
    this.memoryView.setBigInt64(0x18, nativeArray.address);
  }
  
  return true;
};

VkDeviceGroupRenderPassBeginInfo.byteLength = 0x20;

VkDeviceGroupRenderPassBeginInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  deviceMask: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  deviceRenderAreaCount: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  pDeviceRenderAreas: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkDeviceGroupRenderPassBeginInfoKHR **/
class VkDeviceGroupRenderPassBeginInfoKHR {
  constructor(opts) {
    
    this._pNext = null;
    
    
    this._pDeviceRenderAreas = null;
    this._pDeviceRenderAreasNative = null;
    this.memoryBuffer = new ArrayBuffer(VkDeviceGroupRenderPassBeginInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.deviceMask !== void 0) this.deviceMask = opts.deviceMask;
      if (opts.deviceRenderAreaCount !== void 0) this.deviceRenderAreaCount = opts.deviceRenderAreaCount;
      if (opts.pDeviceRenderAreas !== void 0) this.pDeviceRenderAreas = opts.pDeviceRenderAreas;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get deviceMask() {
    return this.memoryView.getUint32(0x10);
  }
  set deviceMask(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get deviceRenderAreaCount() {
    return this.memoryView.getUint32(0x14);
  }
  set deviceRenderAreaCount(value) {
    this.memoryView.setUint32(0x14, value);
  }
  get pDeviceRenderAreas() {
    return this._pDeviceRenderAreas;
  }
  set pDeviceRenderAreas(value) {
    if (value !== null && value.constructor === Array) {
      this._pDeviceRenderAreas = value;
    } else if (value === null) {
      this._pDeviceRenderAreas = null;
    } else {
      throw new TypeError("Invalid type for 'VkDeviceGroupRenderPassBeginInfoKHR.pDeviceRenderAreas': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkDeviceGroupRenderPassBeginInfoKHR.prototype.flush = function flush() {
  
  
  
  
  if (this._pDeviceRenderAreas !== null) {
    let nativeArray = new NativeObjectArray(this._pDeviceRenderAreas);
    this._pDeviceRenderAreasNative = nativeArray;
    this.memoryView.setBigInt64(0x18, nativeArray.address);
  }
  
  return true;
};

VkDeviceGroupRenderPassBeginInfoKHR.byteLength = 0x20;

VkDeviceGroupRenderPassBeginInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  deviceMask: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  deviceRenderAreaCount: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  pDeviceRenderAreas: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkDeviceGroupCommandBufferBeginInfo **/
class VkDeviceGroupCommandBufferBeginInfo {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkDeviceGroupCommandBufferBeginInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.deviceMask !== void 0) this.deviceMask = opts.deviceMask;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get deviceMask() {
    return this.memoryView.getUint32(0x10);
  }
  set deviceMask(value) {
    this.memoryView.setUint32(0x10, value);
  }
  
};

VkDeviceGroupCommandBufferBeginInfo.prototype.flush = function flush() {
  
  
  
  return true;
};

VkDeviceGroupCommandBufferBeginInfo.byteLength = 0x18;

VkDeviceGroupCommandBufferBeginInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  deviceMask: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkDeviceGroupCommandBufferBeginInfoKHR **/
class VkDeviceGroupCommandBufferBeginInfoKHR {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkDeviceGroupCommandBufferBeginInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.deviceMask !== void 0) this.deviceMask = opts.deviceMask;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get deviceMask() {
    return this.memoryView.getUint32(0x10);
  }
  set deviceMask(value) {
    this.memoryView.setUint32(0x10, value);
  }
  
};

VkDeviceGroupCommandBufferBeginInfoKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkDeviceGroupCommandBufferBeginInfoKHR.byteLength = 0x18;

VkDeviceGroupCommandBufferBeginInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  deviceMask: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkDeviceGroupSubmitInfo **/
class VkDeviceGroupSubmitInfo {
  constructor(opts) {
    
    this._pNext = null;
    
    this._pWaitSemaphoreDeviceIndices = null;
    
    this._pCommandBufferDeviceMasks = null;
    
    this._pSignalSemaphoreDeviceIndices = null;
    this.memoryBuffer = new ArrayBuffer(VkDeviceGroupSubmitInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.waitSemaphoreCount !== void 0) this.waitSemaphoreCount = opts.waitSemaphoreCount;
      if (opts.pWaitSemaphoreDeviceIndices !== void 0) this.pWaitSemaphoreDeviceIndices = opts.pWaitSemaphoreDeviceIndices;
      if (opts.commandBufferCount !== void 0) this.commandBufferCount = opts.commandBufferCount;
      if (opts.pCommandBufferDeviceMasks !== void 0) this.pCommandBufferDeviceMasks = opts.pCommandBufferDeviceMasks;
      if (opts.signalSemaphoreCount !== void 0) this.signalSemaphoreCount = opts.signalSemaphoreCount;
      if (opts.pSignalSemaphoreDeviceIndices !== void 0) this.pSignalSemaphoreDeviceIndices = opts.pSignalSemaphoreDeviceIndices;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get waitSemaphoreCount() {
    return this.memoryView.getUint32(0x10);
  }
  set waitSemaphoreCount(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get pWaitSemaphoreDeviceIndices() {
    return this._pWaitSemaphoreDeviceIndices;
  }
  set pWaitSemaphoreDeviceIndices(value) {
    if (value !== null && value.constructor === Uint32Array) {
      this._pWaitSemaphoreDeviceIndices = value;
      this.memoryView.setBigInt64(0x18, getAddressFromArrayBuffer(value.buffer));
    } else if (value === null) {
      this._pWaitSemaphoreDeviceIndices = null;
    } else {
      throw new TypeError("Invalid type for 'VkDeviceGroupSubmitInfo.pWaitSemaphoreDeviceIndices': Expected 'Uint32Array' but got '" + value.constructor.name + "'");
    }
  }
  get commandBufferCount() {
    return this.memoryView.getUint32(0x20);
  }
  set commandBufferCount(value) {
    this.memoryView.setUint32(0x20, value);
  }
  get pCommandBufferDeviceMasks() {
    return this._pCommandBufferDeviceMasks;
  }
  set pCommandBufferDeviceMasks(value) {
    if (value !== null && value.constructor === Uint32Array) {
      this._pCommandBufferDeviceMasks = value;
      this.memoryView.setBigInt64(0x28, getAddressFromArrayBuffer(value.buffer));
    } else if (value === null) {
      this._pCommandBufferDeviceMasks = null;
    } else {
      throw new TypeError("Invalid type for 'VkDeviceGroupSubmitInfo.pCommandBufferDeviceMasks': Expected 'Uint32Array' but got '" + value.constructor.name + "'");
    }
  }
  get signalSemaphoreCount() {
    return this.memoryView.getUint32(0x30);
  }
  set signalSemaphoreCount(value) {
    this.memoryView.setUint32(0x30, value);
  }
  get pSignalSemaphoreDeviceIndices() {
    return this._pSignalSemaphoreDeviceIndices;
  }
  set pSignalSemaphoreDeviceIndices(value) {
    if (value !== null && value.constructor === Uint32Array) {
      this._pSignalSemaphoreDeviceIndices = value;
      this.memoryView.setBigInt64(0x38, getAddressFromArrayBuffer(value.buffer));
    } else if (value === null) {
      this._pSignalSemaphoreDeviceIndices = null;
    } else {
      throw new TypeError("Invalid type for 'VkDeviceGroupSubmitInfo.pSignalSemaphoreDeviceIndices': Expected 'Uint32Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkDeviceGroupSubmitInfo.prototype.flush = function flush() {
  
  
  
  return true;
};

VkDeviceGroupSubmitInfo.byteLength = 0x40;

VkDeviceGroupSubmitInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  waitSemaphoreCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pWaitSemaphoreDeviceIndices: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  commandBufferCount: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  pCommandBufferDeviceMasks: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
  signalSemaphoreCount: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  pSignalSemaphoreDeviceIndices: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x8
  }),
});
/** VkDeviceGroupSubmitInfoKHR **/
class VkDeviceGroupSubmitInfoKHR {
  constructor(opts) {
    
    this._pNext = null;
    
    this._pWaitSemaphoreDeviceIndices = null;
    
    this._pCommandBufferDeviceMasks = null;
    
    this._pSignalSemaphoreDeviceIndices = null;
    this.memoryBuffer = new ArrayBuffer(VkDeviceGroupSubmitInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.waitSemaphoreCount !== void 0) this.waitSemaphoreCount = opts.waitSemaphoreCount;
      if (opts.pWaitSemaphoreDeviceIndices !== void 0) this.pWaitSemaphoreDeviceIndices = opts.pWaitSemaphoreDeviceIndices;
      if (opts.commandBufferCount !== void 0) this.commandBufferCount = opts.commandBufferCount;
      if (opts.pCommandBufferDeviceMasks !== void 0) this.pCommandBufferDeviceMasks = opts.pCommandBufferDeviceMasks;
      if (opts.signalSemaphoreCount !== void 0) this.signalSemaphoreCount = opts.signalSemaphoreCount;
      if (opts.pSignalSemaphoreDeviceIndices !== void 0) this.pSignalSemaphoreDeviceIndices = opts.pSignalSemaphoreDeviceIndices;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get waitSemaphoreCount() {
    return this.memoryView.getUint32(0x10);
  }
  set waitSemaphoreCount(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get pWaitSemaphoreDeviceIndices() {
    return this._pWaitSemaphoreDeviceIndices;
  }
  set pWaitSemaphoreDeviceIndices(value) {
    if (value !== null && value.constructor === Uint32Array) {
      this._pWaitSemaphoreDeviceIndices = value;
      this.memoryView.setBigInt64(0x18, getAddressFromArrayBuffer(value.buffer));
    } else if (value === null) {
      this._pWaitSemaphoreDeviceIndices = null;
    } else {
      throw new TypeError("Invalid type for 'VkDeviceGroupSubmitInfoKHR.pWaitSemaphoreDeviceIndices': Expected 'Uint32Array' but got '" + value.constructor.name + "'");
    }
  }
  get commandBufferCount() {
    return this.memoryView.getUint32(0x20);
  }
  set commandBufferCount(value) {
    this.memoryView.setUint32(0x20, value);
  }
  get pCommandBufferDeviceMasks() {
    return this._pCommandBufferDeviceMasks;
  }
  set pCommandBufferDeviceMasks(value) {
    if (value !== null && value.constructor === Uint32Array) {
      this._pCommandBufferDeviceMasks = value;
      this.memoryView.setBigInt64(0x28, getAddressFromArrayBuffer(value.buffer));
    } else if (value === null) {
      this._pCommandBufferDeviceMasks = null;
    } else {
      throw new TypeError("Invalid type for 'VkDeviceGroupSubmitInfoKHR.pCommandBufferDeviceMasks': Expected 'Uint32Array' but got '" + value.constructor.name + "'");
    }
  }
  get signalSemaphoreCount() {
    return this.memoryView.getUint32(0x30);
  }
  set signalSemaphoreCount(value) {
    this.memoryView.setUint32(0x30, value);
  }
  get pSignalSemaphoreDeviceIndices() {
    return this._pSignalSemaphoreDeviceIndices;
  }
  set pSignalSemaphoreDeviceIndices(value) {
    if (value !== null && value.constructor === Uint32Array) {
      this._pSignalSemaphoreDeviceIndices = value;
      this.memoryView.setBigInt64(0x38, getAddressFromArrayBuffer(value.buffer));
    } else if (value === null) {
      this._pSignalSemaphoreDeviceIndices = null;
    } else {
      throw new TypeError("Invalid type for 'VkDeviceGroupSubmitInfoKHR.pSignalSemaphoreDeviceIndices': Expected 'Uint32Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkDeviceGroupSubmitInfoKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkDeviceGroupSubmitInfoKHR.byteLength = 0x40;

VkDeviceGroupSubmitInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  waitSemaphoreCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pWaitSemaphoreDeviceIndices: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  commandBufferCount: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  pCommandBufferDeviceMasks: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
  signalSemaphoreCount: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  pSignalSemaphoreDeviceIndices: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x8
  }),
});
/** VkDeviceGroupBindSparseInfo **/
class VkDeviceGroupBindSparseInfo {
  constructor(opts) {
    
    this._pNext = null;
    
    
    this.memoryBuffer = new ArrayBuffer(VkDeviceGroupBindSparseInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.resourceDeviceIndex !== void 0) this.resourceDeviceIndex = opts.resourceDeviceIndex;
      if (opts.memoryDeviceIndex !== void 0) this.memoryDeviceIndex = opts.memoryDeviceIndex;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get resourceDeviceIndex() {
    return this.memoryView.getUint32(0x10);
  }
  set resourceDeviceIndex(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get memoryDeviceIndex() {
    return this.memoryView.getUint32(0x14);
  }
  set memoryDeviceIndex(value) {
    this.memoryView.setUint32(0x14, value);
  }
  
};

VkDeviceGroupBindSparseInfo.prototype.flush = function flush() {
  
  
  
  return true;
};

VkDeviceGroupBindSparseInfo.byteLength = 0x18;

VkDeviceGroupBindSparseInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  resourceDeviceIndex: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  memoryDeviceIndex: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
});
/** VkDeviceGroupBindSparseInfoKHR **/
class VkDeviceGroupBindSparseInfoKHR {
  constructor(opts) {
    
    this._pNext = null;
    
    
    this.memoryBuffer = new ArrayBuffer(VkDeviceGroupBindSparseInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.resourceDeviceIndex !== void 0) this.resourceDeviceIndex = opts.resourceDeviceIndex;
      if (opts.memoryDeviceIndex !== void 0) this.memoryDeviceIndex = opts.memoryDeviceIndex;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get resourceDeviceIndex() {
    return this.memoryView.getUint32(0x10);
  }
  set resourceDeviceIndex(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get memoryDeviceIndex() {
    return this.memoryView.getUint32(0x14);
  }
  set memoryDeviceIndex(value) {
    this.memoryView.setUint32(0x14, value);
  }
  
};

VkDeviceGroupBindSparseInfoKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkDeviceGroupBindSparseInfoKHR.byteLength = 0x18;

VkDeviceGroupBindSparseInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  resourceDeviceIndex: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  memoryDeviceIndex: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
});
/** VkDeviceGroupPresentCapabilitiesKHR **/
class VkDeviceGroupPresentCapabilitiesKHR {
  constructor(opts) {
    
    this._pNext = null;
    this._presentMask = null;
    
    this.memoryBuffer = new ArrayBuffer(VkDeviceGroupPresentCapabilitiesKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get presentMask() {
    return this._presentMask;
  }
  get modes() {
    return this.memoryView.getInt32(0x90);
  }
  
};

VkDeviceGroupPresentCapabilitiesKHR.prototype.flush = function flush() {
  
  
  
  
  if (this._presentMask !== null) {
    let array = this._presentMask;
    for (let ii = 0; ii < array.length; ++ii) {
      this.memoryView.setUint32(0x10, array[ii]);
    };
  }
  
  return true;
};

VkDeviceGroupPresentCapabilitiesKHR.byteLength = 0x98;

VkDeviceGroupPresentCapabilitiesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  presentMask: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x80
  }),
  modes: Object.freeze({
    byteOffset: 0x90,
    byteLength: 0x4
  }),
});
/** VkImageSwapchainCreateInfoKHR **/
class VkImageSwapchainCreateInfoKHR {
  constructor(opts) {
    
    this._pNext = null;
    this._swapchain = null;
    this.memoryBuffer = new ArrayBuffer(VkImageSwapchainCreateInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.swapchain !== void 0) this.swapchain = opts.swapchain;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get swapchain() {
    return this._swapchain;
  }
  set swapchain(value) {
    if (value !== null && value.constructor === VkSwapchainKHR) {
      value.flush();
      this._swapchain = value;
      this.memoryView.setBigInt64(0x10, value.memoryAddress);
    } else if (value === null) {
      this._swapchain = null;
    } else {
      throw new TypeError("Invalid type for 'VkImageSwapchainCreateInfoKHR.swapchain': Expected 'VkSwapchainKHR' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkImageSwapchainCreateInfoKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkImageSwapchainCreateInfoKHR.byteLength = 0x18;

VkImageSwapchainCreateInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  swapchain: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
});
/** VkBindImageMemorySwapchainInfoKHR **/
class VkBindImageMemorySwapchainInfoKHR {
  constructor(opts) {
    
    this._pNext = null;
    this._swapchain = null;
    
    this.memoryBuffer = new ArrayBuffer(VkBindImageMemorySwapchainInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.swapchain !== void 0) this.swapchain = opts.swapchain;
      if (opts.imageIndex !== void 0) this.imageIndex = opts.imageIndex;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get swapchain() {
    return this._swapchain;
  }
  set swapchain(value) {
    if (value !== null && value.constructor === VkSwapchainKHR) {
      value.flush();
      this._swapchain = value;
      this.memoryView.setBigInt64(0x10, value.memoryAddress);
    } else if (value === null) {
      this._swapchain = null;
    } else {
      throw new TypeError("Invalid type for 'VkBindImageMemorySwapchainInfoKHR.swapchain': Expected 'VkSwapchainKHR' but got '" + value.constructor.name + "'");
    }
  }
  get imageIndex() {
    return this.memoryView.getUint32(0x18);
  }
  set imageIndex(value) {
    this.memoryView.setUint32(0x18, value);
  }
  
};

VkBindImageMemorySwapchainInfoKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkBindImageMemorySwapchainInfoKHR.byteLength = 0x20;

VkBindImageMemorySwapchainInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  swapchain: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  imageIndex: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
});
/** VkAcquireNextImageInfoKHR **/
class VkAcquireNextImageInfoKHR {
  constructor(opts) {
    
    this._pNext = null;
    this._swapchain = null;
    
    this._semaphore = null;
    this._fence = null;
    
    this.memoryBuffer = new ArrayBuffer(VkAcquireNextImageInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.swapchain !== void 0) this.swapchain = opts.swapchain;
      if (opts.timeout !== void 0) this.timeout = opts.timeout;
      if (opts.semaphore !== void 0) this.semaphore = opts.semaphore;
      if (opts.fence !== void 0) this.fence = opts.fence;
      if (opts.deviceMask !== void 0) this.deviceMask = opts.deviceMask;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get swapchain() {
    return this._swapchain;
  }
  set swapchain(value) {
    if (value !== null && value.constructor === VkSwapchainKHR) {
      value.flush();
      this._swapchain = value;
      this.memoryView.setBigInt64(0x10, value.memoryAddress);
    } else if (value === null) {
      this._swapchain = null;
    } else {
      throw new TypeError("Invalid type for 'VkAcquireNextImageInfoKHR.swapchain': Expected 'VkSwapchainKHR' but got '" + value.constructor.name + "'");
    }
  }
  get timeout() {
    return this.memoryView.getBigUint64(0x18);
  }
  set timeout(value) {
    this.memoryView.setBigUint64(0x18, value);
  }
  get semaphore() {
    return this._semaphore;
  }
  set semaphore(value) {
    if (value !== null && value.constructor === VkSemaphore) {
      value.flush();
      this._semaphore = value;
      this.memoryView.setBigInt64(0x20, value.memoryAddress);
    } else if (value === null) {
      this._semaphore = null;
    } else {
      throw new TypeError("Invalid type for 'VkAcquireNextImageInfoKHR.semaphore': Expected 'VkSemaphore' but got '" + value.constructor.name + "'");
    }
  }
  get fence() {
    return this._fence;
  }
  set fence(value) {
    if (value !== null && value.constructor === VkFence) {
      value.flush();
      this._fence = value;
      this.memoryView.setBigInt64(0x28, value.memoryAddress);
    } else if (value === null) {
      this._fence = null;
    } else {
      throw new TypeError("Invalid type for 'VkAcquireNextImageInfoKHR.fence': Expected 'VkFence' but got '" + value.constructor.name + "'");
    }
  }
  get deviceMask() {
    return this.memoryView.getUint32(0x30);
  }
  set deviceMask(value) {
    this.memoryView.setUint32(0x30, value);
  }
  
};

VkAcquireNextImageInfoKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkAcquireNextImageInfoKHR.byteLength = 0x38;

VkAcquireNextImageInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  swapchain: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  timeout: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  semaphore: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
  fence: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
  deviceMask: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
});
/** VkDeviceGroupPresentInfoKHR **/
class VkDeviceGroupPresentInfoKHR {
  constructor(opts) {
    
    this._pNext = null;
    
    this._pDeviceMasks = null;
    
    this.memoryBuffer = new ArrayBuffer(VkDeviceGroupPresentInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.swapchainCount !== void 0) this.swapchainCount = opts.swapchainCount;
      if (opts.pDeviceMasks !== void 0) this.pDeviceMasks = opts.pDeviceMasks;
      if (opts.mode !== void 0) this.mode = opts.mode;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get swapchainCount() {
    return this.memoryView.getUint32(0x10);
  }
  set swapchainCount(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get pDeviceMasks() {
    return this._pDeviceMasks;
  }
  set pDeviceMasks(value) {
    if (value !== null && value.constructor === Uint32Array) {
      this._pDeviceMasks = value;
      this.memoryView.setBigInt64(0x18, getAddressFromArrayBuffer(value.buffer));
    } else if (value === null) {
      this._pDeviceMasks = null;
    } else {
      throw new TypeError("Invalid type for 'VkDeviceGroupPresentInfoKHR.pDeviceMasks': Expected 'Uint32Array' but got '" + value.constructor.name + "'");
    }
  }
  get mode() {
    return this.memoryView.getInt32(0x20);
  }
  set mode(value) {
    this.memoryView.setInt32(0x20, value);
  }
  
};

VkDeviceGroupPresentInfoKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkDeviceGroupPresentInfoKHR.byteLength = 0x28;

VkDeviceGroupPresentInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  swapchainCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pDeviceMasks: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  mode: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
});
/** VkDeviceGroupDeviceCreateInfo **/
class VkDeviceGroupDeviceCreateInfo {
  constructor(opts) {
    
    this._pNext = null;
    
    this._pPhysicalDevices = null;
    this._pPhysicalDevicesNative = null;
    this.memoryBuffer = new ArrayBuffer(VkDeviceGroupDeviceCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.physicalDeviceCount !== void 0) this.physicalDeviceCount = opts.physicalDeviceCount;
      if (opts.pPhysicalDevices !== void 0) this.pPhysicalDevices = opts.pPhysicalDevices;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get physicalDeviceCount() {
    return this.memoryView.getUint32(0x10);
  }
  set physicalDeviceCount(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get pPhysicalDevices() {
    return this._pPhysicalDevices;
  }
  set pPhysicalDevices(value) {
    if (value !== null && value.constructor === Array) {
      this._pPhysicalDevices = value;
    } else if (value === null) {
      this._pPhysicalDevices = null;
    } else {
      throw new TypeError("Invalid type for 'VkDeviceGroupDeviceCreateInfo.pPhysicalDevices': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkDeviceGroupDeviceCreateInfo.prototype.flush = function flush() {
  
  
  
  
  if (this._pPhysicalDevices !== null) {
    let nativeArray = new NativeObjectArray(this._pPhysicalDevices);
    this._pPhysicalDevicesNative = nativeArray;
    this.memoryView.setBigInt64(0x18, nativeArray.address);
  }
  
  return true;
};

VkDeviceGroupDeviceCreateInfo.byteLength = 0x20;

VkDeviceGroupDeviceCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  physicalDeviceCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pPhysicalDevices: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkDeviceGroupDeviceCreateInfoKHR **/
class VkDeviceGroupDeviceCreateInfoKHR {
  constructor(opts) {
    
    this._pNext = null;
    
    this._pPhysicalDevices = null;
    this._pPhysicalDevicesNative = null;
    this.memoryBuffer = new ArrayBuffer(VkDeviceGroupDeviceCreateInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.physicalDeviceCount !== void 0) this.physicalDeviceCount = opts.physicalDeviceCount;
      if (opts.pPhysicalDevices !== void 0) this.pPhysicalDevices = opts.pPhysicalDevices;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get physicalDeviceCount() {
    return this.memoryView.getUint32(0x10);
  }
  set physicalDeviceCount(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get pPhysicalDevices() {
    return this._pPhysicalDevices;
  }
  set pPhysicalDevices(value) {
    if (value !== null && value.constructor === Array) {
      this._pPhysicalDevices = value;
    } else if (value === null) {
      this._pPhysicalDevices = null;
    } else {
      throw new TypeError("Invalid type for 'VkDeviceGroupDeviceCreateInfoKHR.pPhysicalDevices': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkDeviceGroupDeviceCreateInfoKHR.prototype.flush = function flush() {
  
  
  
  
  if (this._pPhysicalDevices !== null) {
    let nativeArray = new NativeObjectArray(this._pPhysicalDevices);
    this._pPhysicalDevicesNative = nativeArray;
    this.memoryView.setBigInt64(0x18, nativeArray.address);
  }
  
  return true;
};

VkDeviceGroupDeviceCreateInfoKHR.byteLength = 0x20;

VkDeviceGroupDeviceCreateInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  physicalDeviceCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pPhysicalDevices: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkDeviceGroupSwapchainCreateInfoKHR **/
class VkDeviceGroupSwapchainCreateInfoKHR {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkDeviceGroupSwapchainCreateInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.modes !== void 0) this.modes = opts.modes;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get modes() {
    return this.memoryView.getInt32(0x10);
  }
  set modes(value) {
    this.memoryView.setInt32(0x10, value);
  }
  
};

VkDeviceGroupSwapchainCreateInfoKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkDeviceGroupSwapchainCreateInfoKHR.byteLength = 0x18;

VkDeviceGroupSwapchainCreateInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  modes: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkDescriptorUpdateTemplateEntry **/
class VkDescriptorUpdateTemplateEntry {
  constructor(opts) {
    
    
    
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkDescriptorUpdateTemplateEntry.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.dstBinding !== void 0) this.dstBinding = opts.dstBinding;
      if (opts.dstArrayElement !== void 0) this.dstArrayElement = opts.dstArrayElement;
      if (opts.descriptorCount !== void 0) this.descriptorCount = opts.descriptorCount;
      if (opts.descriptorType !== void 0) this.descriptorType = opts.descriptorType;
      if (opts.offset !== void 0) this.offset = opts.offset;
      if (opts.stride !== void 0) this.stride = opts.stride;
      
    }
  }
  get dstBinding() {
    return this.memoryView.getUint32(0x0);
  }
  set dstBinding(value) {
    this.memoryView.setUint32(0x0, value);
  }
  get dstArrayElement() {
    return this.memoryView.getUint32(0x4);
  }
  set dstArrayElement(value) {
    this.memoryView.setUint32(0x4, value);
  }
  get descriptorCount() {
    return this.memoryView.getUint32(0x8);
  }
  set descriptorCount(value) {
    this.memoryView.setUint32(0x8, value);
  }
  get descriptorType() {
    return this.memoryView.getInt32(0xC);
  }
  set descriptorType(value) {
    this.memoryView.setInt32(0xC, value);
  }
  get offset() {
    return this.memoryView.getBigInt64(0x10);
  }
  set offset(value) {
    this.memoryView.setBigInt64(0x10, value);
  }
  get stride() {
    return this.memoryView.getBigInt64(0x18);
  }
  set stride(value) {
    this.memoryView.setBigInt64(0x18, value);
  }
  
};

VkDescriptorUpdateTemplateEntry.prototype.flush = function flush() {
  
  return true;
};

VkDescriptorUpdateTemplateEntry.byteLength = 0x20;

VkDescriptorUpdateTemplateEntry.memoryLayout = Object.freeze({
  dstBinding: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  dstArrayElement: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  descriptorCount: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
  descriptorType: Object.freeze({
    byteOffset: 0xC,
    byteLength: 0x4
  }),
  offset: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  stride: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkDescriptorUpdateTemplateEntryKHR **/
class VkDescriptorUpdateTemplateEntryKHR {
  constructor(opts) {
    
    
    
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkDescriptorUpdateTemplateEntryKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.dstBinding !== void 0) this.dstBinding = opts.dstBinding;
      if (opts.dstArrayElement !== void 0) this.dstArrayElement = opts.dstArrayElement;
      if (opts.descriptorCount !== void 0) this.descriptorCount = opts.descriptorCount;
      if (opts.descriptorType !== void 0) this.descriptorType = opts.descriptorType;
      if (opts.offset !== void 0) this.offset = opts.offset;
      if (opts.stride !== void 0) this.stride = opts.stride;
      
    }
  }
  get dstBinding() {
    return this.memoryView.getUint32(0x0);
  }
  set dstBinding(value) {
    this.memoryView.setUint32(0x0, value);
  }
  get dstArrayElement() {
    return this.memoryView.getUint32(0x4);
  }
  set dstArrayElement(value) {
    this.memoryView.setUint32(0x4, value);
  }
  get descriptorCount() {
    return this.memoryView.getUint32(0x8);
  }
  set descriptorCount(value) {
    this.memoryView.setUint32(0x8, value);
  }
  get descriptorType() {
    return this.memoryView.getInt32(0xC);
  }
  set descriptorType(value) {
    this.memoryView.setInt32(0xC, value);
  }
  get offset() {
    return this.memoryView.getBigInt64(0x10);
  }
  set offset(value) {
    this.memoryView.setBigInt64(0x10, value);
  }
  get stride() {
    return this.memoryView.getBigInt64(0x18);
  }
  set stride(value) {
    this.memoryView.setBigInt64(0x18, value);
  }
  
};

VkDescriptorUpdateTemplateEntryKHR.prototype.flush = function flush() {
  
  return true;
};

VkDescriptorUpdateTemplateEntryKHR.byteLength = 0x20;

VkDescriptorUpdateTemplateEntryKHR.memoryLayout = Object.freeze({
  dstBinding: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  dstArrayElement: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  descriptorCount: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
  descriptorType: Object.freeze({
    byteOffset: 0xC,
    byteLength: 0x4
  }),
  offset: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  stride: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkDescriptorUpdateTemplateCreateInfo **/
class VkDescriptorUpdateTemplateCreateInfo {
  constructor(opts) {
    
    this._pNext = null;
    
    
    this._pDescriptorUpdateEntries = null;
    this._pDescriptorUpdateEntriesNative = null;
    
    this._descriptorSetLayout = null;
    
    this._pipelineLayout = null;
    
    this.memoryBuffer = new ArrayBuffer(VkDescriptorUpdateTemplateCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.descriptorUpdateEntryCount !== void 0) this.descriptorUpdateEntryCount = opts.descriptorUpdateEntryCount;
      if (opts.pDescriptorUpdateEntries !== void 0) this.pDescriptorUpdateEntries = opts.pDescriptorUpdateEntries;
      if (opts.templateType !== void 0) this.templateType = opts.templateType;
      if (opts.descriptorSetLayout !== void 0) this.descriptorSetLayout = opts.descriptorSetLayout;
      if (opts.pipelineBindPoint !== void 0) this.pipelineBindPoint = opts.pipelineBindPoint;
      if (opts.pipelineLayout !== void 0) this.pipelineLayout = opts.pipelineLayout;
      if (opts.set !== void 0) this.set = opts.set;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get flags() {
    return this.memoryView.getInt32(0x10);
  }
  set flags(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get descriptorUpdateEntryCount() {
    return this.memoryView.getUint32(0x14);
  }
  set descriptorUpdateEntryCount(value) {
    this.memoryView.setUint32(0x14, value);
  }
  get pDescriptorUpdateEntries() {
    return this._pDescriptorUpdateEntries;
  }
  set pDescriptorUpdateEntries(value) {
    if (value !== null && value.constructor === Array) {
      this._pDescriptorUpdateEntries = value;
    } else if (value === null) {
      this._pDescriptorUpdateEntries = null;
    } else {
      throw new TypeError("Invalid type for 'VkDescriptorUpdateTemplateCreateInfo.pDescriptorUpdateEntries': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get templateType() {
    return this.memoryView.getInt32(0x20);
  }
  set templateType(value) {
    this.memoryView.setInt32(0x20, value);
  }
  get descriptorSetLayout() {
    return this._descriptorSetLayout;
  }
  set descriptorSetLayout(value) {
    if (value !== null && value.constructor === VkDescriptorSetLayout) {
      value.flush();
      this._descriptorSetLayout = value;
      this.memoryView.setBigInt64(0x28, value.memoryAddress);
    } else if (value === null) {
      this._descriptorSetLayout = null;
    } else {
      throw new TypeError("Invalid type for 'VkDescriptorUpdateTemplateCreateInfo.descriptorSetLayout': Expected 'VkDescriptorSetLayout' but got '" + value.constructor.name + "'");
    }
  }
  get pipelineBindPoint() {
    return this.memoryView.getInt32(0x30);
  }
  set pipelineBindPoint(value) {
    this.memoryView.setInt32(0x30, value);
  }
  get pipelineLayout() {
    return this._pipelineLayout;
  }
  set pipelineLayout(value) {
    if (value !== null && value.constructor === VkPipelineLayout) {
      value.flush();
      this._pipelineLayout = value;
      this.memoryView.setBigInt64(0x38, value.memoryAddress);
    } else if (value === null) {
      this._pipelineLayout = null;
    } else {
      throw new TypeError("Invalid type for 'VkDescriptorUpdateTemplateCreateInfo.pipelineLayout': Expected 'VkPipelineLayout' but got '" + value.constructor.name + "'");
    }
  }
  get set() {
    return this.memoryView.getUint32(0x40);
  }
  set set(value) {
    this.memoryView.setUint32(0x40, value);
  }
  
};

VkDescriptorUpdateTemplateCreateInfo.prototype.flush = function flush() {
  
  
  
  
  if (this._pDescriptorUpdateEntries !== null) {
    let nativeArray = new NativeObjectArray(this._pDescriptorUpdateEntries);
    this._pDescriptorUpdateEntriesNative = nativeArray;
    this.memoryView.setBigInt64(0x18, nativeArray.address);
  }
  
  return true;
};

VkDescriptorUpdateTemplateCreateInfo.byteLength = 0x48;

VkDescriptorUpdateTemplateCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  descriptorUpdateEntryCount: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  pDescriptorUpdateEntries: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  templateType: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  descriptorSetLayout: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
  pipelineBindPoint: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  pipelineLayout: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x8
  }),
  set: Object.freeze({
    byteOffset: 0x40,
    byteLength: 0x4
  }),
});
/** VkDescriptorUpdateTemplateCreateInfoKHR **/
class VkDescriptorUpdateTemplateCreateInfoKHR {
  constructor(opts) {
    
    this._pNext = null;
    
    
    this._pDescriptorUpdateEntries = null;
    this._pDescriptorUpdateEntriesNative = null;
    
    this._descriptorSetLayout = null;
    
    this._pipelineLayout = null;
    
    this.memoryBuffer = new ArrayBuffer(VkDescriptorUpdateTemplateCreateInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.descriptorUpdateEntryCount !== void 0) this.descriptorUpdateEntryCount = opts.descriptorUpdateEntryCount;
      if (opts.pDescriptorUpdateEntries !== void 0) this.pDescriptorUpdateEntries = opts.pDescriptorUpdateEntries;
      if (opts.templateType !== void 0) this.templateType = opts.templateType;
      if (opts.descriptorSetLayout !== void 0) this.descriptorSetLayout = opts.descriptorSetLayout;
      if (opts.pipelineBindPoint !== void 0) this.pipelineBindPoint = opts.pipelineBindPoint;
      if (opts.pipelineLayout !== void 0) this.pipelineLayout = opts.pipelineLayout;
      if (opts.set !== void 0) this.set = opts.set;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get flags() {
    return this.memoryView.getInt32(0x10);
  }
  set flags(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get descriptorUpdateEntryCount() {
    return this.memoryView.getUint32(0x14);
  }
  set descriptorUpdateEntryCount(value) {
    this.memoryView.setUint32(0x14, value);
  }
  get pDescriptorUpdateEntries() {
    return this._pDescriptorUpdateEntries;
  }
  set pDescriptorUpdateEntries(value) {
    if (value !== null && value.constructor === Array) {
      this._pDescriptorUpdateEntries = value;
    } else if (value === null) {
      this._pDescriptorUpdateEntries = null;
    } else {
      throw new TypeError("Invalid type for 'VkDescriptorUpdateTemplateCreateInfoKHR.pDescriptorUpdateEntries': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get templateType() {
    return this.memoryView.getInt32(0x20);
  }
  set templateType(value) {
    this.memoryView.setInt32(0x20, value);
  }
  get descriptorSetLayout() {
    return this._descriptorSetLayout;
  }
  set descriptorSetLayout(value) {
    if (value !== null && value.constructor === VkDescriptorSetLayout) {
      value.flush();
      this._descriptorSetLayout = value;
      this.memoryView.setBigInt64(0x28, value.memoryAddress);
    } else if (value === null) {
      this._descriptorSetLayout = null;
    } else {
      throw new TypeError("Invalid type for 'VkDescriptorUpdateTemplateCreateInfoKHR.descriptorSetLayout': Expected 'VkDescriptorSetLayout' but got '" + value.constructor.name + "'");
    }
  }
  get pipelineBindPoint() {
    return this.memoryView.getInt32(0x30);
  }
  set pipelineBindPoint(value) {
    this.memoryView.setInt32(0x30, value);
  }
  get pipelineLayout() {
    return this._pipelineLayout;
  }
  set pipelineLayout(value) {
    if (value !== null && value.constructor === VkPipelineLayout) {
      value.flush();
      this._pipelineLayout = value;
      this.memoryView.setBigInt64(0x38, value.memoryAddress);
    } else if (value === null) {
      this._pipelineLayout = null;
    } else {
      throw new TypeError("Invalid type for 'VkDescriptorUpdateTemplateCreateInfoKHR.pipelineLayout': Expected 'VkPipelineLayout' but got '" + value.constructor.name + "'");
    }
  }
  get set() {
    return this.memoryView.getUint32(0x40);
  }
  set set(value) {
    this.memoryView.setUint32(0x40, value);
  }
  
};

VkDescriptorUpdateTemplateCreateInfoKHR.prototype.flush = function flush() {
  
  
  
  
  if (this._pDescriptorUpdateEntries !== null) {
    let nativeArray = new NativeObjectArray(this._pDescriptorUpdateEntries);
    this._pDescriptorUpdateEntriesNative = nativeArray;
    this.memoryView.setBigInt64(0x18, nativeArray.address);
  }
  
  return true;
};

VkDescriptorUpdateTemplateCreateInfoKHR.byteLength = 0x48;

VkDescriptorUpdateTemplateCreateInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  descriptorUpdateEntryCount: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  pDescriptorUpdateEntries: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  templateType: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  descriptorSetLayout: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
  pipelineBindPoint: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  pipelineLayout: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x8
  }),
  set: Object.freeze({
    byteOffset: 0x40,
    byteLength: 0x4
  }),
});
/** VkXYColorEXT **/
class VkXYColorEXT {
  constructor(opts) {
    
    
    this.memoryBuffer = new ArrayBuffer(VkXYColorEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.x !== void 0) this.x = opts.x;
      if (opts.y !== void 0) this.y = opts.y;
      
    }
  }
  get x() {
    return this.memoryView.getFloat32(0x0);
  }
  set x(value) {
    this.memoryView.setFloat32(0x0, value);
  }
  get y() {
    return this.memoryView.getFloat32(0x4);
  }
  set y(value) {
    this.memoryView.setFloat32(0x4, value);
  }
  
};

VkXYColorEXT.prototype.flush = function flush() {
  
  return true;
};

VkXYColorEXT.byteLength = 0x8;

VkXYColorEXT.memoryLayout = Object.freeze({
  x: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  y: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
});
/** VkHdrMetadataEXT **/
class VkHdrMetadataEXT {
  constructor(opts) {
    
    this._pNext = null;
    this._displayPrimaryRed = null;
    this._displayPrimaryGreen = null;
    this._displayPrimaryBlue = null;
    this._whitePoint = null;
    
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkHdrMetadataEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_HDR_METADATA_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.displayPrimaryRed !== void 0) this.displayPrimaryRed = opts.displayPrimaryRed;
      if (opts.displayPrimaryGreen !== void 0) this.displayPrimaryGreen = opts.displayPrimaryGreen;
      if (opts.displayPrimaryBlue !== void 0) this.displayPrimaryBlue = opts.displayPrimaryBlue;
      if (opts.whitePoint !== void 0) this.whitePoint = opts.whitePoint;
      if (opts.maxLuminance !== void 0) this.maxLuminance = opts.maxLuminance;
      if (opts.minLuminance !== void 0) this.minLuminance = opts.minLuminance;
      if (opts.maxContentLightLevel !== void 0) this.maxContentLightLevel = opts.maxContentLightLevel;
      if (opts.maxFrameAverageLightLevel !== void 0) this.maxFrameAverageLightLevel = opts.maxFrameAverageLightLevel;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get displayPrimaryRed() {
    return this._displayPrimaryRed;
  }
  set displayPrimaryRed(value) {
    if (value !== null && value.constructor === VkXYColorEXT) {
      value.flush();
      this._displayPrimaryRed = value;
      this.memoryView.setBigInt64(0x10, value.memoryAddress);
    } else if (value === null) {
      this._displayPrimaryRed = null;
    } else {
      throw new TypeError("Invalid type for 'VkHdrMetadataEXT.displayPrimaryRed': Expected 'VkXYColorEXT' but got '" + value.constructor.name + "'");
    }
  }
  get displayPrimaryGreen() {
    return this._displayPrimaryGreen;
  }
  set displayPrimaryGreen(value) {
    if (value !== null && value.constructor === VkXYColorEXT) {
      value.flush();
      this._displayPrimaryGreen = value;
      this.memoryView.setBigInt64(0x18, value.memoryAddress);
    } else if (value === null) {
      this._displayPrimaryGreen = null;
    } else {
      throw new TypeError("Invalid type for 'VkHdrMetadataEXT.displayPrimaryGreen': Expected 'VkXYColorEXT' but got '" + value.constructor.name + "'");
    }
  }
  get displayPrimaryBlue() {
    return this._displayPrimaryBlue;
  }
  set displayPrimaryBlue(value) {
    if (value !== null && value.constructor === VkXYColorEXT) {
      value.flush();
      this._displayPrimaryBlue = value;
      this.memoryView.setBigInt64(0x20, value.memoryAddress);
    } else if (value === null) {
      this._displayPrimaryBlue = null;
    } else {
      throw new TypeError("Invalid type for 'VkHdrMetadataEXT.displayPrimaryBlue': Expected 'VkXYColorEXT' but got '" + value.constructor.name + "'");
    }
  }
  get whitePoint() {
    return this._whitePoint;
  }
  set whitePoint(value) {
    if (value !== null && value.constructor === VkXYColorEXT) {
      value.flush();
      this._whitePoint = value;
      this.memoryView.setBigInt64(0x28, value.memoryAddress);
    } else if (value === null) {
      this._whitePoint = null;
    } else {
      throw new TypeError("Invalid type for 'VkHdrMetadataEXT.whitePoint': Expected 'VkXYColorEXT' but got '" + value.constructor.name + "'");
    }
  }
  get maxLuminance() {
    return this.memoryView.getFloat32(0x30);
  }
  set maxLuminance(value) {
    this.memoryView.setFloat32(0x30, value);
  }
  get minLuminance() {
    return this.memoryView.getFloat32(0x34);
  }
  set minLuminance(value) {
    this.memoryView.setFloat32(0x34, value);
  }
  get maxContentLightLevel() {
    return this.memoryView.getFloat32(0x38);
  }
  set maxContentLightLevel(value) {
    this.memoryView.setFloat32(0x38, value);
  }
  get maxFrameAverageLightLevel() {
    return this.memoryView.getFloat32(0x3C);
  }
  set maxFrameAverageLightLevel(value) {
    this.memoryView.setFloat32(0x3C, value);
  }
  
};

VkHdrMetadataEXT.prototype.flush = function flush() {
  
  
  
  
  
  
  
  
  
  
  
  return true;
};

VkHdrMetadataEXT.byteLength = 0x40;

VkHdrMetadataEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  displayPrimaryRed: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  displayPrimaryGreen: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  displayPrimaryBlue: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
  whitePoint: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
  maxLuminance: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  minLuminance: Object.freeze({
    byteOffset: 0x34,
    byteLength: 0x4
  }),
  maxContentLightLevel: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x4
  }),
  maxFrameAverageLightLevel: Object.freeze({
    byteOffset: 0x3C,
    byteLength: 0x4
  }),
});
/** VkRefreshCycleDurationGOOGLE **/
class VkRefreshCycleDurationGOOGLE {
  constructor(opts) {
    
    this.memoryBuffer = new ArrayBuffer(VkRefreshCycleDurationGOOGLE.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      
    }
  }
  get refreshDuration() {
    return this.memoryView.getBigUint64(0x0);
  }
  
};

VkRefreshCycleDurationGOOGLE.prototype.flush = function flush() {
  
  return true;
};

VkRefreshCycleDurationGOOGLE.byteLength = 0x8;

VkRefreshCycleDurationGOOGLE.memoryLayout = Object.freeze({
  refreshDuration: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x8
  }),
});
/** VkPastPresentationTimingGOOGLE **/
class VkPastPresentationTimingGOOGLE {
  constructor(opts) {
    
    
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkPastPresentationTimingGOOGLE.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      
    }
  }
  get presentID() {
    return this.memoryView.getUint32(0x0);
  }
  get desiredPresentTime() {
    return this.memoryView.getBigUint64(0x8);
  }
  get actualPresentTime() {
    return this.memoryView.getBigUint64(0x10);
  }
  get earliestPresentTime() {
    return this.memoryView.getBigUint64(0x18);
  }
  get presentMargin() {
    return this.memoryView.getBigUint64(0x20);
  }
  
};

VkPastPresentationTimingGOOGLE.prototype.flush = function flush() {
  
  return true;
};

VkPastPresentationTimingGOOGLE.byteLength = 0x28;

VkPastPresentationTimingGOOGLE.memoryLayout = Object.freeze({
  presentID: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  desiredPresentTime: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  actualPresentTime: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  earliestPresentTime: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  presentMargin: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
});
/** VkPresentTimesInfoGOOGLE **/
class VkPresentTimesInfoGOOGLE {
  constructor(opts) {
    
    this._pNext = null;
    
    this._pTimes = null;
    this._pTimesNative = null;
    this.memoryBuffer = new ArrayBuffer(VkPresentTimesInfoGOOGLE.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.swapchainCount !== void 0) this.swapchainCount = opts.swapchainCount;
      if (opts.pTimes !== void 0) this.pTimes = opts.pTimes;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get swapchainCount() {
    return this.memoryView.getUint32(0x10);
  }
  set swapchainCount(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get pTimes() {
    return this._pTimes;
  }
  set pTimes(value) {
    if (value !== null && value.constructor === Array) {
      this._pTimes = value;
    } else if (value === null) {
      this._pTimes = null;
    } else {
      throw new TypeError("Invalid type for 'VkPresentTimesInfoGOOGLE.pTimes': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkPresentTimesInfoGOOGLE.prototype.flush = function flush() {
  
  
  
  
  if (this._pTimes !== null) {
    let nativeArray = new NativeObjectArray(this._pTimes);
    this._pTimesNative = nativeArray;
    this.memoryView.setBigInt64(0x18, nativeArray.address);
  }
  
  return true;
};

VkPresentTimesInfoGOOGLE.byteLength = 0x20;

VkPresentTimesInfoGOOGLE.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  swapchainCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pTimes: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkPresentTimeGOOGLE **/
class VkPresentTimeGOOGLE {
  constructor(opts) {
    
    
    this.memoryBuffer = new ArrayBuffer(VkPresentTimeGOOGLE.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.presentID !== void 0) this.presentID = opts.presentID;
      if (opts.desiredPresentTime !== void 0) this.desiredPresentTime = opts.desiredPresentTime;
      
    }
  }
  get presentID() {
    return this.memoryView.getUint32(0x0);
  }
  set presentID(value) {
    this.memoryView.setUint32(0x0, value);
  }
  get desiredPresentTime() {
    return this.memoryView.getBigUint64(0x8);
  }
  set desiredPresentTime(value) {
    this.memoryView.setBigUint64(0x8, value);
  }
  
};

VkPresentTimeGOOGLE.prototype.flush = function flush() {
  
  return true;
};

VkPresentTimeGOOGLE.byteLength = 0x10;

VkPresentTimeGOOGLE.memoryLayout = Object.freeze({
  presentID: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  desiredPresentTime: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
});
/** VkViewportWScalingNV **/
class VkViewportWScalingNV {
  constructor(opts) {
    
    
    this.memoryBuffer = new ArrayBuffer(VkViewportWScalingNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.xcoeff !== void 0) this.xcoeff = opts.xcoeff;
      if (opts.ycoeff !== void 0) this.ycoeff = opts.ycoeff;
      
    }
  }
  get xcoeff() {
    return this.memoryView.getFloat32(0x0);
  }
  set xcoeff(value) {
    this.memoryView.setFloat32(0x0, value);
  }
  get ycoeff() {
    return this.memoryView.getFloat32(0x4);
  }
  set ycoeff(value) {
    this.memoryView.setFloat32(0x4, value);
  }
  
};

VkViewportWScalingNV.prototype.flush = function flush() {
  
  return true;
};

VkViewportWScalingNV.byteLength = 0x8;

VkViewportWScalingNV.memoryLayout = Object.freeze({
  xcoeff: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  ycoeff: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
});
/** VkPipelineViewportWScalingStateCreateInfoNV **/
class VkPipelineViewportWScalingStateCreateInfoNV {
  constructor(opts) {
    
    this._pNext = null;
    
    
    this._pViewportWScalings = null;
    this._pViewportWScalingsNative = null;
    this.memoryBuffer = new ArrayBuffer(VkPipelineViewportWScalingStateCreateInfoNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.viewportWScalingEnable !== void 0) this.viewportWScalingEnable = opts.viewportWScalingEnable;
      if (opts.viewportCount !== void 0) this.viewportCount = opts.viewportCount;
      if (opts.pViewportWScalings !== void 0) this.pViewportWScalings = opts.pViewportWScalings;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get viewportWScalingEnable() {
    return this.memoryView.getUint32(0x10);
  }
  set viewportWScalingEnable(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get viewportCount() {
    return this.memoryView.getUint32(0x14);
  }
  set viewportCount(value) {
    this.memoryView.setUint32(0x14, value);
  }
  get pViewportWScalings() {
    return this._pViewportWScalings;
  }
  set pViewportWScalings(value) {
    if (value !== null && value.constructor === Array) {
      this._pViewportWScalings = value;
    } else if (value === null) {
      this._pViewportWScalings = null;
    } else {
      throw new TypeError("Invalid type for 'VkPipelineViewportWScalingStateCreateInfoNV.pViewportWScalings': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkPipelineViewportWScalingStateCreateInfoNV.prototype.flush = function flush() {
  
  
  
  
  if (this._pViewportWScalings !== null) {
    let nativeArray = new NativeObjectArray(this._pViewportWScalings);
    this._pViewportWScalingsNative = nativeArray;
    this.memoryView.setBigInt64(0x18, nativeArray.address);
  }
  
  return true;
};

VkPipelineViewportWScalingStateCreateInfoNV.byteLength = 0x20;

VkPipelineViewportWScalingStateCreateInfoNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  viewportWScalingEnable: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  viewportCount: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  pViewportWScalings: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkViewportSwizzleNV **/
class VkViewportSwizzleNV {
  constructor(opts) {
    
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkViewportSwizzleNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.x !== void 0) this.x = opts.x;
      if (opts.y !== void 0) this.y = opts.y;
      if (opts.z !== void 0) this.z = opts.z;
      if (opts.w !== void 0) this.w = opts.w;
      
    }
  }
  get x() {
    return this.memoryView.getInt32(0x0);
  }
  set x(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get y() {
    return this.memoryView.getInt32(0x4);
  }
  set y(value) {
    this.memoryView.setInt32(0x4, value);
  }
  get z() {
    return this.memoryView.getInt32(0x8);
  }
  set z(value) {
    this.memoryView.setInt32(0x8, value);
  }
  get w() {
    return this.memoryView.getInt32(0xC);
  }
  set w(value) {
    this.memoryView.setInt32(0xC, value);
  }
  
};

VkViewportSwizzleNV.prototype.flush = function flush() {
  
  return true;
};

VkViewportSwizzleNV.byteLength = 0x10;

VkViewportSwizzleNV.memoryLayout = Object.freeze({
  x: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  y: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  z: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
  w: Object.freeze({
    byteOffset: 0xC,
    byteLength: 0x4
  }),
});
/** VkPipelineViewportSwizzleStateCreateInfoNV **/
class VkPipelineViewportSwizzleStateCreateInfoNV {
  constructor(opts) {
    
    this._pNext = null;
    
    
    this._pViewportSwizzles = null;
    this._pViewportSwizzlesNative = null;
    this.memoryBuffer = new ArrayBuffer(VkPipelineViewportSwizzleStateCreateInfoNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.viewportCount !== void 0) this.viewportCount = opts.viewportCount;
      if (opts.pViewportSwizzles !== void 0) this.pViewportSwizzles = opts.pViewportSwizzles;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get flags() {
    return this.memoryView.getInt32(0x10);
  }
  set flags(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get viewportCount() {
    return this.memoryView.getUint32(0x14);
  }
  set viewportCount(value) {
    this.memoryView.setUint32(0x14, value);
  }
  get pViewportSwizzles() {
    return this._pViewportSwizzles;
  }
  set pViewportSwizzles(value) {
    if (value !== null && value.constructor === Array) {
      this._pViewportSwizzles = value;
    } else if (value === null) {
      this._pViewportSwizzles = null;
    } else {
      throw new TypeError("Invalid type for 'VkPipelineViewportSwizzleStateCreateInfoNV.pViewportSwizzles': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkPipelineViewportSwizzleStateCreateInfoNV.prototype.flush = function flush() {
  
  
  
  
  if (this._pViewportSwizzles !== null) {
    let nativeArray = new NativeObjectArray(this._pViewportSwizzles);
    this._pViewportSwizzlesNative = nativeArray;
    this.memoryView.setBigInt64(0x18, nativeArray.address);
  }
  
  return true;
};

VkPipelineViewportSwizzleStateCreateInfoNV.byteLength = 0x20;

VkPipelineViewportSwizzleStateCreateInfoNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  viewportCount: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  pViewportSwizzles: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkPhysicalDeviceDiscardRectanglePropertiesEXT **/
class VkPhysicalDeviceDiscardRectanglePropertiesEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceDiscardRectanglePropertiesEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get maxDiscardRectangles() {
    return this.memoryView.getUint32(0x10);
  }
  
};

VkPhysicalDeviceDiscardRectanglePropertiesEXT.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceDiscardRectanglePropertiesEXT.byteLength = 0x18;

VkPhysicalDeviceDiscardRectanglePropertiesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  maxDiscardRectangles: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPipelineDiscardRectangleStateCreateInfoEXT **/
class VkPipelineDiscardRectangleStateCreateInfoEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    
    
    this._pDiscardRectangles = null;
    this._pDiscardRectanglesNative = null;
    this.memoryBuffer = new ArrayBuffer(VkPipelineDiscardRectangleStateCreateInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.discardRectangleMode !== void 0) this.discardRectangleMode = opts.discardRectangleMode;
      if (opts.discardRectangleCount !== void 0) this.discardRectangleCount = opts.discardRectangleCount;
      if (opts.pDiscardRectangles !== void 0) this.pDiscardRectangles = opts.pDiscardRectangles;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get flags() {
    return this.memoryView.getInt32(0x10);
  }
  set flags(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get discardRectangleMode() {
    return this.memoryView.getInt32(0x14);
  }
  set discardRectangleMode(value) {
    this.memoryView.setInt32(0x14, value);
  }
  get discardRectangleCount() {
    return this.memoryView.getUint32(0x18);
  }
  set discardRectangleCount(value) {
    this.memoryView.setUint32(0x18, value);
  }
  get pDiscardRectangles() {
    return this._pDiscardRectangles;
  }
  set pDiscardRectangles(value) {
    if (value !== null && value.constructor === Array) {
      this._pDiscardRectangles = value;
    } else if (value === null) {
      this._pDiscardRectangles = null;
    } else {
      throw new TypeError("Invalid type for 'VkPipelineDiscardRectangleStateCreateInfoEXT.pDiscardRectangles': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkPipelineDiscardRectangleStateCreateInfoEXT.prototype.flush = function flush() {
  
  
  
  
  if (this._pDiscardRectangles !== null) {
    let nativeArray = new NativeObjectArray(this._pDiscardRectangles);
    this._pDiscardRectanglesNative = nativeArray;
    this.memoryView.setBigInt64(0x20, nativeArray.address);
  }
  
  return true;
};

VkPipelineDiscardRectangleStateCreateInfoEXT.byteLength = 0x28;

VkPipelineDiscardRectangleStateCreateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  discardRectangleMode: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  discardRectangleCount: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  pDiscardRectangles: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
});
/** VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX **/
class VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get perViewPositionAllComponents() {
    return this.memoryView.getUint32(0x10);
  }
  
};

VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX.byteLength = 0x18;

VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  perViewPositionAllComponents: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkInputAttachmentAspectReference **/
class VkInputAttachmentAspectReference {
  constructor(opts) {
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkInputAttachmentAspectReference.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.subpass !== void 0) this.subpass = opts.subpass;
      if (opts.inputAttachmentIndex !== void 0) this.inputAttachmentIndex = opts.inputAttachmentIndex;
      if (opts.aspectMask !== void 0) this.aspectMask = opts.aspectMask;
      
    }
  }
  get subpass() {
    return this.memoryView.getUint32(0x0);
  }
  set subpass(value) {
    this.memoryView.setUint32(0x0, value);
  }
  get inputAttachmentIndex() {
    return this.memoryView.getUint32(0x4);
  }
  set inputAttachmentIndex(value) {
    this.memoryView.setUint32(0x4, value);
  }
  get aspectMask() {
    return this.memoryView.getInt32(0x8);
  }
  set aspectMask(value) {
    this.memoryView.setInt32(0x8, value);
  }
  
};

VkInputAttachmentAspectReference.prototype.flush = function flush() {
  
  return true;
};

VkInputAttachmentAspectReference.byteLength = 0xC;

VkInputAttachmentAspectReference.memoryLayout = Object.freeze({
  subpass: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  inputAttachmentIndex: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  aspectMask: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
});
/** VkInputAttachmentAspectReferenceKHR **/
class VkInputAttachmentAspectReferenceKHR {
  constructor(opts) {
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkInputAttachmentAspectReferenceKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.subpass !== void 0) this.subpass = opts.subpass;
      if (opts.inputAttachmentIndex !== void 0) this.inputAttachmentIndex = opts.inputAttachmentIndex;
      if (opts.aspectMask !== void 0) this.aspectMask = opts.aspectMask;
      
    }
  }
  get subpass() {
    return this.memoryView.getUint32(0x0);
  }
  set subpass(value) {
    this.memoryView.setUint32(0x0, value);
  }
  get inputAttachmentIndex() {
    return this.memoryView.getUint32(0x4);
  }
  set inputAttachmentIndex(value) {
    this.memoryView.setUint32(0x4, value);
  }
  get aspectMask() {
    return this.memoryView.getInt32(0x8);
  }
  set aspectMask(value) {
    this.memoryView.setInt32(0x8, value);
  }
  
};

VkInputAttachmentAspectReferenceKHR.prototype.flush = function flush() {
  
  return true;
};

VkInputAttachmentAspectReferenceKHR.byteLength = 0xC;

VkInputAttachmentAspectReferenceKHR.memoryLayout = Object.freeze({
  subpass: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  inputAttachmentIndex: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  aspectMask: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
});
/** VkRenderPassInputAttachmentAspectCreateInfo **/
class VkRenderPassInputAttachmentAspectCreateInfo {
  constructor(opts) {
    
    this._pNext = null;
    
    this._pAspectReferences = null;
    this._pAspectReferencesNative = null;
    this.memoryBuffer = new ArrayBuffer(VkRenderPassInputAttachmentAspectCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.aspectReferenceCount !== void 0) this.aspectReferenceCount = opts.aspectReferenceCount;
      if (opts.pAspectReferences !== void 0) this.pAspectReferences = opts.pAspectReferences;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get aspectReferenceCount() {
    return this.memoryView.getUint32(0x10);
  }
  set aspectReferenceCount(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get pAspectReferences() {
    return this._pAspectReferences;
  }
  set pAspectReferences(value) {
    if (value !== null && value.constructor === Array) {
      this._pAspectReferences = value;
    } else if (value === null) {
      this._pAspectReferences = null;
    } else {
      throw new TypeError("Invalid type for 'VkRenderPassInputAttachmentAspectCreateInfo.pAspectReferences': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkRenderPassInputAttachmentAspectCreateInfo.prototype.flush = function flush() {
  
  
  
  
  if (this._pAspectReferences !== null) {
    let nativeArray = new NativeObjectArray(this._pAspectReferences);
    this._pAspectReferencesNative = nativeArray;
    this.memoryView.setBigInt64(0x18, nativeArray.address);
  }
  
  return true;
};

VkRenderPassInputAttachmentAspectCreateInfo.byteLength = 0x20;

VkRenderPassInputAttachmentAspectCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  aspectReferenceCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pAspectReferences: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkRenderPassInputAttachmentAspectCreateInfoKHR **/
class VkRenderPassInputAttachmentAspectCreateInfoKHR {
  constructor(opts) {
    
    this._pNext = null;
    
    this._pAspectReferences = null;
    this._pAspectReferencesNative = null;
    this.memoryBuffer = new ArrayBuffer(VkRenderPassInputAttachmentAspectCreateInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.aspectReferenceCount !== void 0) this.aspectReferenceCount = opts.aspectReferenceCount;
      if (opts.pAspectReferences !== void 0) this.pAspectReferences = opts.pAspectReferences;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get aspectReferenceCount() {
    return this.memoryView.getUint32(0x10);
  }
  set aspectReferenceCount(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get pAspectReferences() {
    return this._pAspectReferences;
  }
  set pAspectReferences(value) {
    if (value !== null && value.constructor === Array) {
      this._pAspectReferences = value;
    } else if (value === null) {
      this._pAspectReferences = null;
    } else {
      throw new TypeError("Invalid type for 'VkRenderPassInputAttachmentAspectCreateInfoKHR.pAspectReferences': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkRenderPassInputAttachmentAspectCreateInfoKHR.prototype.flush = function flush() {
  
  
  
  
  if (this._pAspectReferences !== null) {
    let nativeArray = new NativeObjectArray(this._pAspectReferences);
    this._pAspectReferencesNative = nativeArray;
    this.memoryView.setBigInt64(0x18, nativeArray.address);
  }
  
  return true;
};

VkRenderPassInputAttachmentAspectCreateInfoKHR.byteLength = 0x20;

VkRenderPassInputAttachmentAspectCreateInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  aspectReferenceCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pAspectReferences: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkPhysicalDeviceSurfaceInfo2KHR **/
class VkPhysicalDeviceSurfaceInfo2KHR {
  constructor(opts) {
    
    this._pNext = null;
    this._surface = null;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceSurfaceInfo2KHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.surface !== void 0) this.surface = opts.surface;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get surface() {
    return this._surface;
  }
  set surface(value) {
    if (value !== null && value.constructor === VkSurfaceKHR) {
      value.flush();
      this._surface = value;
      this.memoryView.setBigInt64(0x10, value.memoryAddress);
    } else if (value === null) {
      this._surface = null;
    } else {
      throw new TypeError("Invalid type for 'VkPhysicalDeviceSurfaceInfo2KHR.surface': Expected 'VkSurfaceKHR' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkPhysicalDeviceSurfaceInfo2KHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceSurfaceInfo2KHR.byteLength = 0x18;

VkPhysicalDeviceSurfaceInfo2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  surface: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
});
/** VkSurfaceCapabilities2KHR **/
class VkSurfaceCapabilities2KHR {
  constructor(opts) {
    
    this._pNext = null;
    this._surfaceCapabilities = null;
    this.memoryBuffer = new ArrayBuffer(VkSurfaceCapabilities2KHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get surfaceCapabilities() {
    return this._surfaceCapabilities;
  }
  
};

VkSurfaceCapabilities2KHR.prototype.flush = function flush() {
  
  
  
  
  
  return true;
};

VkSurfaceCapabilities2KHR.byteLength = 0x48;

VkSurfaceCapabilities2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  surfaceCapabilities: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x34
  }),
});
/** VkSurfaceFormat2KHR **/
class VkSurfaceFormat2KHR {
  constructor(opts) {
    
    this._pNext = null;
    this._surfaceFormat = null;
    this.memoryBuffer = new ArrayBuffer(VkSurfaceFormat2KHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get surfaceFormat() {
    return this._surfaceFormat;
  }
  
};

VkSurfaceFormat2KHR.prototype.flush = function flush() {
  
  
  
  
  
  return true;
};

VkSurfaceFormat2KHR.byteLength = 0x18;

VkSurfaceFormat2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  surfaceFormat: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
});
/** VkDisplayProperties2KHR **/
class VkDisplayProperties2KHR {
  constructor(opts) {
    
    this._pNext = null;
    this._displayProperties = null;
    this.memoryBuffer = new ArrayBuffer(VkDisplayProperties2KHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get displayProperties() {
    return this._displayProperties;
  }
  
};

VkDisplayProperties2KHR.prototype.flush = function flush() {
  
  
  
  
  
  return true;
};

VkDisplayProperties2KHR.byteLength = 0x40;

VkDisplayProperties2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  displayProperties: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x30
  }),
});
/** VkDisplayPlaneProperties2KHR **/
class VkDisplayPlaneProperties2KHR {
  constructor(opts) {
    
    this._pNext = null;
    this._displayPlaneProperties = null;
    this.memoryBuffer = new ArrayBuffer(VkDisplayPlaneProperties2KHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get displayPlaneProperties() {
    return this._displayPlaneProperties;
  }
  
};

VkDisplayPlaneProperties2KHR.prototype.flush = function flush() {
  
  
  
  
  
  return true;
};

VkDisplayPlaneProperties2KHR.byteLength = 0x20;

VkDisplayPlaneProperties2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  displayPlaneProperties: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x10
  }),
});
/** VkDisplayModeProperties2KHR **/
class VkDisplayModeProperties2KHR {
  constructor(opts) {
    
    this._pNext = null;
    this._displayModeProperties = null;
    this.memoryBuffer = new ArrayBuffer(VkDisplayModeProperties2KHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get displayModeProperties() {
    return this._displayModeProperties;
  }
  
};

VkDisplayModeProperties2KHR.prototype.flush = function flush() {
  
  
  
  
  
  return true;
};

VkDisplayModeProperties2KHR.byteLength = 0x28;

VkDisplayModeProperties2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  displayModeProperties: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x18
  }),
});
/** VkDisplayPlaneInfo2KHR **/
class VkDisplayPlaneInfo2KHR {
  constructor(opts) {
    
    this._pNext = null;
    this._mode = null;
    
    this.memoryBuffer = new ArrayBuffer(VkDisplayPlaneInfo2KHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.mode !== void 0) this.mode = opts.mode;
      if (opts.planeIndex !== void 0) this.planeIndex = opts.planeIndex;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get mode() {
    return this._mode;
  }
  set mode(value) {
    if (value !== null && value.constructor === VkDisplayModeKHR) {
      value.flush();
      this._mode = value;
      this.memoryView.setBigInt64(0x10, value.memoryAddress);
    } else if (value === null) {
      this._mode = null;
    } else {
      throw new TypeError("Invalid type for 'VkDisplayPlaneInfo2KHR.mode': Expected 'VkDisplayModeKHR' but got '" + value.constructor.name + "'");
    }
  }
  get planeIndex() {
    return this.memoryView.getUint32(0x18);
  }
  set planeIndex(value) {
    this.memoryView.setUint32(0x18, value);
  }
  
};

VkDisplayPlaneInfo2KHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkDisplayPlaneInfo2KHR.byteLength = 0x20;

VkDisplayPlaneInfo2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  mode: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  planeIndex: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
});
/** VkDisplayPlaneCapabilities2KHR **/
class VkDisplayPlaneCapabilities2KHR {
  constructor(opts) {
    
    this._pNext = null;
    this._capabilities = null;
    this.memoryBuffer = new ArrayBuffer(VkDisplayPlaneCapabilities2KHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get capabilities() {
    return this._capabilities;
  }
  
};

VkDisplayPlaneCapabilities2KHR.prototype.flush = function flush() {
  
  
  
  
  
  return true;
};

VkDisplayPlaneCapabilities2KHR.byteLength = 0x58;

VkDisplayPlaneCapabilities2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  capabilities: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x44
  }),
});
/** VkSharedPresentSurfaceCapabilitiesKHR **/
class VkSharedPresentSurfaceCapabilitiesKHR {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkSharedPresentSurfaceCapabilitiesKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get sharedPresentSupportedUsageFlags() {
    return this.memoryView.getInt32(0x10);
  }
  
};

VkSharedPresentSurfaceCapabilitiesKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkSharedPresentSurfaceCapabilitiesKHR.byteLength = 0x18;

VkSharedPresentSurfaceCapabilitiesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  sharedPresentSupportedUsageFlags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPhysicalDevice16BitStorageFeatures **/
class VkPhysicalDevice16BitStorageFeatures {
  constructor(opts) {
    
    this._pNext = null;
    
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDevice16BitStorageFeatures.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.storageBuffer16BitAccess !== void 0) this.storageBuffer16BitAccess = opts.storageBuffer16BitAccess;
      if (opts.uniformAndStorageBuffer16BitAccess !== void 0) this.uniformAndStorageBuffer16BitAccess = opts.uniformAndStorageBuffer16BitAccess;
      if (opts.storagePushConstant16 !== void 0) this.storagePushConstant16 = opts.storagePushConstant16;
      if (opts.storageInputOutput16 !== void 0) this.storageInputOutput16 = opts.storageInputOutput16;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get storageBuffer16BitAccess() {
    return this.memoryView.getUint32(0x10);
  }
  set storageBuffer16BitAccess(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get uniformAndStorageBuffer16BitAccess() {
    return this.memoryView.getUint32(0x14);
  }
  set uniformAndStorageBuffer16BitAccess(value) {
    this.memoryView.setUint32(0x14, value);
  }
  get storagePushConstant16() {
    return this.memoryView.getUint32(0x18);
  }
  set storagePushConstant16(value) {
    this.memoryView.setUint32(0x18, value);
  }
  get storageInputOutput16() {
    return this.memoryView.getUint32(0x1C);
  }
  set storageInputOutput16(value) {
    this.memoryView.setUint32(0x1C, value);
  }
  
};

VkPhysicalDevice16BitStorageFeatures.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDevice16BitStorageFeatures.byteLength = 0x20;

VkPhysicalDevice16BitStorageFeatures.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  storageBuffer16BitAccess: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  uniformAndStorageBuffer16BitAccess: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  storagePushConstant16: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  storageInputOutput16: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
});
/** VkPhysicalDevice16BitStorageFeaturesKHR **/
class VkPhysicalDevice16BitStorageFeaturesKHR {
  constructor(opts) {
    
    this._pNext = null;
    
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDevice16BitStorageFeaturesKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.storageBuffer16BitAccess !== void 0) this.storageBuffer16BitAccess = opts.storageBuffer16BitAccess;
      if (opts.uniformAndStorageBuffer16BitAccess !== void 0) this.uniformAndStorageBuffer16BitAccess = opts.uniformAndStorageBuffer16BitAccess;
      if (opts.storagePushConstant16 !== void 0) this.storagePushConstant16 = opts.storagePushConstant16;
      if (opts.storageInputOutput16 !== void 0) this.storageInputOutput16 = opts.storageInputOutput16;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get storageBuffer16BitAccess() {
    return this.memoryView.getUint32(0x10);
  }
  set storageBuffer16BitAccess(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get uniformAndStorageBuffer16BitAccess() {
    return this.memoryView.getUint32(0x14);
  }
  set uniformAndStorageBuffer16BitAccess(value) {
    this.memoryView.setUint32(0x14, value);
  }
  get storagePushConstant16() {
    return this.memoryView.getUint32(0x18);
  }
  set storagePushConstant16(value) {
    this.memoryView.setUint32(0x18, value);
  }
  get storageInputOutput16() {
    return this.memoryView.getUint32(0x1C);
  }
  set storageInputOutput16(value) {
    this.memoryView.setUint32(0x1C, value);
  }
  
};

VkPhysicalDevice16BitStorageFeaturesKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDevice16BitStorageFeaturesKHR.byteLength = 0x20;

VkPhysicalDevice16BitStorageFeaturesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  storageBuffer16BitAccess: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  uniformAndStorageBuffer16BitAccess: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  storagePushConstant16: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  storageInputOutput16: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceSubgroupProperties **/
class VkPhysicalDeviceSubgroupProperties {
  constructor(opts) {
    
    this._pNext = null;
    
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceSubgroupProperties.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get subgroupSize() {
    return this.memoryView.getUint32(0x10);
  }
  get supportedStages() {
    return this.memoryView.getInt32(0x14);
  }
  get supportedOperations() {
    return this.memoryView.getInt32(0x18);
  }
  get quadOperationsInAllStages() {
    return this.memoryView.getUint32(0x1C);
  }
  
};

VkPhysicalDeviceSubgroupProperties.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceSubgroupProperties.byteLength = 0x20;

VkPhysicalDeviceSubgroupProperties.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  subgroupSize: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  supportedStages: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  supportedOperations: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  quadOperationsInAllStages: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
});
/** VkBufferMemoryRequirementsInfo2 **/
class VkBufferMemoryRequirementsInfo2 {
  constructor(opts) {
    
    this._pNext = null;
    this._buffer = null;
    this.memoryBuffer = new ArrayBuffer(VkBufferMemoryRequirementsInfo2.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.buffer !== void 0) this.buffer = opts.buffer;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get buffer() {
    return this._buffer;
  }
  set buffer(value) {
    if (value !== null && value.constructor === VkBuffer) {
      value.flush();
      this._buffer = value;
      this.memoryView.setBigInt64(0x10, value.memoryAddress);
    } else if (value === null) {
      this._buffer = null;
    } else {
      throw new TypeError("Invalid type for 'VkBufferMemoryRequirementsInfo2.buffer': Expected 'VkBuffer' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkBufferMemoryRequirementsInfo2.prototype.flush = function flush() {
  
  
  
  return true;
};

VkBufferMemoryRequirementsInfo2.byteLength = 0x18;

VkBufferMemoryRequirementsInfo2.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  buffer: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
});
/** VkBufferMemoryRequirementsInfo2KHR **/
class VkBufferMemoryRequirementsInfo2KHR {
  constructor(opts) {
    
    this._pNext = null;
    this._buffer = null;
    this.memoryBuffer = new ArrayBuffer(VkBufferMemoryRequirementsInfo2KHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.buffer !== void 0) this.buffer = opts.buffer;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get buffer() {
    return this._buffer;
  }
  set buffer(value) {
    if (value !== null && value.constructor === VkBuffer) {
      value.flush();
      this._buffer = value;
      this.memoryView.setBigInt64(0x10, value.memoryAddress);
    } else if (value === null) {
      this._buffer = null;
    } else {
      throw new TypeError("Invalid type for 'VkBufferMemoryRequirementsInfo2KHR.buffer': Expected 'VkBuffer' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkBufferMemoryRequirementsInfo2KHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkBufferMemoryRequirementsInfo2KHR.byteLength = 0x18;

VkBufferMemoryRequirementsInfo2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  buffer: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
});
/** VkImageMemoryRequirementsInfo2 **/
class VkImageMemoryRequirementsInfo2 {
  constructor(opts) {
    
    this._pNext = null;
    this._image = null;
    this.memoryBuffer = new ArrayBuffer(VkImageMemoryRequirementsInfo2.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.image !== void 0) this.image = opts.image;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get image() {
    return this._image;
  }
  set image(value) {
    if (value !== null && value.constructor === VkImage) {
      value.flush();
      this._image = value;
      this.memoryView.setBigInt64(0x10, value.memoryAddress);
    } else if (value === null) {
      this._image = null;
    } else {
      throw new TypeError("Invalid type for 'VkImageMemoryRequirementsInfo2.image': Expected 'VkImage' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkImageMemoryRequirementsInfo2.prototype.flush = function flush() {
  
  
  
  return true;
};

VkImageMemoryRequirementsInfo2.byteLength = 0x18;

VkImageMemoryRequirementsInfo2.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  image: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
});
/** VkImageMemoryRequirementsInfo2KHR **/
class VkImageMemoryRequirementsInfo2KHR {
  constructor(opts) {
    
    this._pNext = null;
    this._image = null;
    this.memoryBuffer = new ArrayBuffer(VkImageMemoryRequirementsInfo2KHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.image !== void 0) this.image = opts.image;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get image() {
    return this._image;
  }
  set image(value) {
    if (value !== null && value.constructor === VkImage) {
      value.flush();
      this._image = value;
      this.memoryView.setBigInt64(0x10, value.memoryAddress);
    } else if (value === null) {
      this._image = null;
    } else {
      throw new TypeError("Invalid type for 'VkImageMemoryRequirementsInfo2KHR.image': Expected 'VkImage' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkImageMemoryRequirementsInfo2KHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkImageMemoryRequirementsInfo2KHR.byteLength = 0x18;

VkImageMemoryRequirementsInfo2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  image: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
});
/** VkImageSparseMemoryRequirementsInfo2 **/
class VkImageSparseMemoryRequirementsInfo2 {
  constructor(opts) {
    
    this._pNext = null;
    this._image = null;
    this.memoryBuffer = new ArrayBuffer(VkImageSparseMemoryRequirementsInfo2.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.image !== void 0) this.image = opts.image;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get image() {
    return this._image;
  }
  set image(value) {
    if (value !== null && value.constructor === VkImage) {
      value.flush();
      this._image = value;
      this.memoryView.setBigInt64(0x10, value.memoryAddress);
    } else if (value === null) {
      this._image = null;
    } else {
      throw new TypeError("Invalid type for 'VkImageSparseMemoryRequirementsInfo2.image': Expected 'VkImage' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkImageSparseMemoryRequirementsInfo2.prototype.flush = function flush() {
  
  
  
  return true;
};

VkImageSparseMemoryRequirementsInfo2.byteLength = 0x18;

VkImageSparseMemoryRequirementsInfo2.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  image: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
});
/** VkImageSparseMemoryRequirementsInfo2KHR **/
class VkImageSparseMemoryRequirementsInfo2KHR {
  constructor(opts) {
    
    this._pNext = null;
    this._image = null;
    this.memoryBuffer = new ArrayBuffer(VkImageSparseMemoryRequirementsInfo2KHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.image !== void 0) this.image = opts.image;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get image() {
    return this._image;
  }
  set image(value) {
    if (value !== null && value.constructor === VkImage) {
      value.flush();
      this._image = value;
      this.memoryView.setBigInt64(0x10, value.memoryAddress);
    } else if (value === null) {
      this._image = null;
    } else {
      throw new TypeError("Invalid type for 'VkImageSparseMemoryRequirementsInfo2KHR.image': Expected 'VkImage' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkImageSparseMemoryRequirementsInfo2KHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkImageSparseMemoryRequirementsInfo2KHR.byteLength = 0x18;

VkImageSparseMemoryRequirementsInfo2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  image: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
});
/** VkMemoryRequirements2 **/
class VkMemoryRequirements2 {
  constructor(opts) {
    
    this._pNext = null;
    this._memoryRequirements = null;
    this.memoryBuffer = new ArrayBuffer(VkMemoryRequirements2.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get memoryRequirements() {
    return this._memoryRequirements;
  }
  
};

VkMemoryRequirements2.prototype.flush = function flush() {
  
  
  
  
  
  return true;
};

VkMemoryRequirements2.byteLength = 0x28;

VkMemoryRequirements2.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  memoryRequirements: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x18
  }),
});
/** VkMemoryRequirements2KHR **/
class VkMemoryRequirements2KHR {
  constructor(opts) {
    
    this._pNext = null;
    this._memoryRequirements = null;
    this.memoryBuffer = new ArrayBuffer(VkMemoryRequirements2KHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get memoryRequirements() {
    return this._memoryRequirements;
  }
  
};

VkMemoryRequirements2KHR.prototype.flush = function flush() {
  
  
  
  
  
  return true;
};

VkMemoryRequirements2KHR.byteLength = 0x28;

VkMemoryRequirements2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  memoryRequirements: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x18
  }),
});
/** VkSparseImageMemoryRequirements2 **/
class VkSparseImageMemoryRequirements2 {
  constructor(opts) {
    
    this._pNext = null;
    this._memoryRequirements = null;
    this.memoryBuffer = new ArrayBuffer(VkSparseImageMemoryRequirements2.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get memoryRequirements() {
    return this._memoryRequirements;
  }
  
};

VkSparseImageMemoryRequirements2.prototype.flush = function flush() {
  
  
  
  
  
  return true;
};

VkSparseImageMemoryRequirements2.byteLength = 0x40;

VkSparseImageMemoryRequirements2.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  memoryRequirements: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x30
  }),
});
/** VkSparseImageMemoryRequirements2KHR **/
class VkSparseImageMemoryRequirements2KHR {
  constructor(opts) {
    
    this._pNext = null;
    this._memoryRequirements = null;
    this.memoryBuffer = new ArrayBuffer(VkSparseImageMemoryRequirements2KHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get memoryRequirements() {
    return this._memoryRequirements;
  }
  
};

VkSparseImageMemoryRequirements2KHR.prototype.flush = function flush() {
  
  
  
  
  
  return true;
};

VkSparseImageMemoryRequirements2KHR.byteLength = 0x40;

VkSparseImageMemoryRequirements2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  memoryRequirements: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x30
  }),
});
/** VkPhysicalDevicePointClippingProperties **/
class VkPhysicalDevicePointClippingProperties {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDevicePointClippingProperties.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get pointClippingBehavior() {
    return this.memoryView.getInt32(0x10);
  }
  
};

VkPhysicalDevicePointClippingProperties.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDevicePointClippingProperties.byteLength = 0x18;

VkPhysicalDevicePointClippingProperties.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  pointClippingBehavior: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPhysicalDevicePointClippingPropertiesKHR **/
class VkPhysicalDevicePointClippingPropertiesKHR {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDevicePointClippingPropertiesKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get pointClippingBehavior() {
    return this.memoryView.getInt32(0x10);
  }
  
};

VkPhysicalDevicePointClippingPropertiesKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDevicePointClippingPropertiesKHR.byteLength = 0x18;

VkPhysicalDevicePointClippingPropertiesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  pointClippingBehavior: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkMemoryDedicatedRequirements **/
class VkMemoryDedicatedRequirements {
  constructor(opts) {
    
    this._pNext = null;
    
    
    this.memoryBuffer = new ArrayBuffer(VkMemoryDedicatedRequirements.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get prefersDedicatedAllocation() {
    return this.memoryView.getUint32(0x10);
  }
  get requiresDedicatedAllocation() {
    return this.memoryView.getUint32(0x14);
  }
  
};

VkMemoryDedicatedRequirements.prototype.flush = function flush() {
  
  
  
  return true;
};

VkMemoryDedicatedRequirements.byteLength = 0x18;

VkMemoryDedicatedRequirements.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  prefersDedicatedAllocation: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  requiresDedicatedAllocation: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
});
/** VkMemoryDedicatedRequirementsKHR **/
class VkMemoryDedicatedRequirementsKHR {
  constructor(opts) {
    
    this._pNext = null;
    
    
    this.memoryBuffer = new ArrayBuffer(VkMemoryDedicatedRequirementsKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get prefersDedicatedAllocation() {
    return this.memoryView.getUint32(0x10);
  }
  get requiresDedicatedAllocation() {
    return this.memoryView.getUint32(0x14);
  }
  
};

VkMemoryDedicatedRequirementsKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkMemoryDedicatedRequirementsKHR.byteLength = 0x18;

VkMemoryDedicatedRequirementsKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  prefersDedicatedAllocation: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  requiresDedicatedAllocation: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
});
/** VkMemoryDedicatedAllocateInfo **/
class VkMemoryDedicatedAllocateInfo {
  constructor(opts) {
    
    this._pNext = null;
    this._image = null;
    this._buffer = null;
    this.memoryBuffer = new ArrayBuffer(VkMemoryDedicatedAllocateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.image !== void 0) this.image = opts.image;
      if (opts.buffer !== void 0) this.buffer = opts.buffer;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get image() {
    return this._image;
  }
  set image(value) {
    if (value !== null && value.constructor === VkImage) {
      value.flush();
      this._image = value;
      this.memoryView.setBigInt64(0x10, value.memoryAddress);
    } else if (value === null) {
      this._image = null;
    } else {
      throw new TypeError("Invalid type for 'VkMemoryDedicatedAllocateInfo.image': Expected 'VkImage' but got '" + value.constructor.name + "'");
    }
  }
  get buffer() {
    return this._buffer;
  }
  set buffer(value) {
    if (value !== null && value.constructor === VkBuffer) {
      value.flush();
      this._buffer = value;
      this.memoryView.setBigInt64(0x18, value.memoryAddress);
    } else if (value === null) {
      this._buffer = null;
    } else {
      throw new TypeError("Invalid type for 'VkMemoryDedicatedAllocateInfo.buffer': Expected 'VkBuffer' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkMemoryDedicatedAllocateInfo.prototype.flush = function flush() {
  
  
  
  return true;
};

VkMemoryDedicatedAllocateInfo.byteLength = 0x20;

VkMemoryDedicatedAllocateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  image: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  buffer: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkMemoryDedicatedAllocateInfoKHR **/
class VkMemoryDedicatedAllocateInfoKHR {
  constructor(opts) {
    
    this._pNext = null;
    this._image = null;
    this._buffer = null;
    this.memoryBuffer = new ArrayBuffer(VkMemoryDedicatedAllocateInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.image !== void 0) this.image = opts.image;
      if (opts.buffer !== void 0) this.buffer = opts.buffer;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get image() {
    return this._image;
  }
  set image(value) {
    if (value !== null && value.constructor === VkImage) {
      value.flush();
      this._image = value;
      this.memoryView.setBigInt64(0x10, value.memoryAddress);
    } else if (value === null) {
      this._image = null;
    } else {
      throw new TypeError("Invalid type for 'VkMemoryDedicatedAllocateInfoKHR.image': Expected 'VkImage' but got '" + value.constructor.name + "'");
    }
  }
  get buffer() {
    return this._buffer;
  }
  set buffer(value) {
    if (value !== null && value.constructor === VkBuffer) {
      value.flush();
      this._buffer = value;
      this.memoryView.setBigInt64(0x18, value.memoryAddress);
    } else if (value === null) {
      this._buffer = null;
    } else {
      throw new TypeError("Invalid type for 'VkMemoryDedicatedAllocateInfoKHR.buffer': Expected 'VkBuffer' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkMemoryDedicatedAllocateInfoKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkMemoryDedicatedAllocateInfoKHR.byteLength = 0x20;

VkMemoryDedicatedAllocateInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  image: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  buffer: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkImageViewUsageCreateInfo **/
class VkImageViewUsageCreateInfo {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkImageViewUsageCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.usage !== void 0) this.usage = opts.usage;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get usage() {
    return this.memoryView.getInt32(0x10);
  }
  set usage(value) {
    this.memoryView.setInt32(0x10, value);
  }
  
};

VkImageViewUsageCreateInfo.prototype.flush = function flush() {
  
  
  
  return true;
};

VkImageViewUsageCreateInfo.byteLength = 0x18;

VkImageViewUsageCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  usage: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkImageViewUsageCreateInfoKHR **/
class VkImageViewUsageCreateInfoKHR {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkImageViewUsageCreateInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.usage !== void 0) this.usage = opts.usage;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get usage() {
    return this.memoryView.getInt32(0x10);
  }
  set usage(value) {
    this.memoryView.setInt32(0x10, value);
  }
  
};

VkImageViewUsageCreateInfoKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkImageViewUsageCreateInfoKHR.byteLength = 0x18;

VkImageViewUsageCreateInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  usage: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPipelineTessellationDomainOriginStateCreateInfo **/
class VkPipelineTessellationDomainOriginStateCreateInfo {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkPipelineTessellationDomainOriginStateCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.domainOrigin !== void 0) this.domainOrigin = opts.domainOrigin;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get domainOrigin() {
    return this.memoryView.getInt32(0x10);
  }
  set domainOrigin(value) {
    this.memoryView.setInt32(0x10, value);
  }
  
};

VkPipelineTessellationDomainOriginStateCreateInfo.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPipelineTessellationDomainOriginStateCreateInfo.byteLength = 0x18;

VkPipelineTessellationDomainOriginStateCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  domainOrigin: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPipelineTessellationDomainOriginStateCreateInfoKHR **/
class VkPipelineTessellationDomainOriginStateCreateInfoKHR {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkPipelineTessellationDomainOriginStateCreateInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.domainOrigin !== void 0) this.domainOrigin = opts.domainOrigin;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get domainOrigin() {
    return this.memoryView.getInt32(0x10);
  }
  set domainOrigin(value) {
    this.memoryView.setInt32(0x10, value);
  }
  
};

VkPipelineTessellationDomainOriginStateCreateInfoKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPipelineTessellationDomainOriginStateCreateInfoKHR.byteLength = 0x18;

VkPipelineTessellationDomainOriginStateCreateInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  domainOrigin: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkSamplerYcbcrConversionInfo **/
class VkSamplerYcbcrConversionInfo {
  constructor(opts) {
    
    this._pNext = null;
    this._conversion = null;
    this.memoryBuffer = new ArrayBuffer(VkSamplerYcbcrConversionInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.conversion !== void 0) this.conversion = opts.conversion;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get conversion() {
    return this._conversion;
  }
  set conversion(value) {
    if (value !== null && value.constructor === VkSamplerYcbcrConversion) {
      value.flush();
      this._conversion = value;
      this.memoryView.setBigInt64(0x10, value.memoryAddress);
    } else if (value === null) {
      this._conversion = null;
    } else {
      throw new TypeError("Invalid type for 'VkSamplerYcbcrConversionInfo.conversion': Expected 'VkSamplerYcbcrConversion' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkSamplerYcbcrConversionInfo.prototype.flush = function flush() {
  
  
  
  return true;
};

VkSamplerYcbcrConversionInfo.byteLength = 0x18;

VkSamplerYcbcrConversionInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  conversion: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
});
/** VkSamplerYcbcrConversionInfoKHR **/
class VkSamplerYcbcrConversionInfoKHR {
  constructor(opts) {
    
    this._pNext = null;
    this._conversion = null;
    this.memoryBuffer = new ArrayBuffer(VkSamplerYcbcrConversionInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.conversion !== void 0) this.conversion = opts.conversion;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get conversion() {
    return this._conversion;
  }
  set conversion(value) {
    if (value !== null && value.constructor === VkSamplerYcbcrConversion) {
      value.flush();
      this._conversion = value;
      this.memoryView.setBigInt64(0x10, value.memoryAddress);
    } else if (value === null) {
      this._conversion = null;
    } else {
      throw new TypeError("Invalid type for 'VkSamplerYcbcrConversionInfoKHR.conversion': Expected 'VkSamplerYcbcrConversion' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkSamplerYcbcrConversionInfoKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkSamplerYcbcrConversionInfoKHR.byteLength = 0x18;

VkSamplerYcbcrConversionInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  conversion: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
});
/** VkSamplerYcbcrConversionCreateInfo **/
class VkSamplerYcbcrConversionCreateInfo {
  constructor(opts) {
    
    this._pNext = null;
    
    
    
    this._components = null;
    
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkSamplerYcbcrConversionCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.format !== void 0) this.format = opts.format;
      if (opts.ycbcrModel !== void 0) this.ycbcrModel = opts.ycbcrModel;
      if (opts.ycbcrRange !== void 0) this.ycbcrRange = opts.ycbcrRange;
      if (opts.components !== void 0) this.components = opts.components;
      if (opts.xChromaOffset !== void 0) this.xChromaOffset = opts.xChromaOffset;
      if (opts.yChromaOffset !== void 0) this.yChromaOffset = opts.yChromaOffset;
      if (opts.chromaFilter !== void 0) this.chromaFilter = opts.chromaFilter;
      if (opts.forceExplicitReconstruction !== void 0) this.forceExplicitReconstruction = opts.forceExplicitReconstruction;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get format() {
    return this.memoryView.getInt32(0x10);
  }
  set format(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get ycbcrModel() {
    return this.memoryView.getInt32(0x14);
  }
  set ycbcrModel(value) {
    this.memoryView.setInt32(0x14, value);
  }
  get ycbcrRange() {
    return this.memoryView.getInt32(0x18);
  }
  set ycbcrRange(value) {
    this.memoryView.setInt32(0x18, value);
  }
  get components() {
    return this._components;
  }
  set components(value) {
    if (value !== null && value.constructor === VkComponentMapping) {
      value.flush();
      this._components = value;
      this.memoryView.setBigInt64(0x1C, value.memoryAddress);
    } else if (value === null) {
      this._components = null;
    } else {
      throw new TypeError("Invalid type for 'VkSamplerYcbcrConversionCreateInfo.components': Expected 'VkComponentMapping' but got '" + value.constructor.name + "'");
    }
  }
  get xChromaOffset() {
    return this.memoryView.getInt32(0x2C);
  }
  set xChromaOffset(value) {
    this.memoryView.setInt32(0x2C, value);
  }
  get yChromaOffset() {
    return this.memoryView.getInt32(0x30);
  }
  set yChromaOffset(value) {
    this.memoryView.setInt32(0x30, value);
  }
  get chromaFilter() {
    return this.memoryView.getInt32(0x34);
  }
  set chromaFilter(value) {
    this.memoryView.setInt32(0x34, value);
  }
  get forceExplicitReconstruction() {
    return this.memoryView.getUint32(0x38);
  }
  set forceExplicitReconstruction(value) {
    this.memoryView.setUint32(0x38, value);
  }
  
};

VkSamplerYcbcrConversionCreateInfo.prototype.flush = function flush() {
  
  
  
  
  
  return true;
};

VkSamplerYcbcrConversionCreateInfo.byteLength = 0x40;

VkSamplerYcbcrConversionCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  format: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  ycbcrModel: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  ycbcrRange: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  components: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x10
  }),
  xChromaOffset: Object.freeze({
    byteOffset: 0x2C,
    byteLength: 0x4
  }),
  yChromaOffset: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  chromaFilter: Object.freeze({
    byteOffset: 0x34,
    byteLength: 0x4
  }),
  forceExplicitReconstruction: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x4
  }),
});
/** VkSamplerYcbcrConversionCreateInfoKHR **/
class VkSamplerYcbcrConversionCreateInfoKHR {
  constructor(opts) {
    
    this._pNext = null;
    
    
    
    this._components = null;
    
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkSamplerYcbcrConversionCreateInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.format !== void 0) this.format = opts.format;
      if (opts.ycbcrModel !== void 0) this.ycbcrModel = opts.ycbcrModel;
      if (opts.ycbcrRange !== void 0) this.ycbcrRange = opts.ycbcrRange;
      if (opts.components !== void 0) this.components = opts.components;
      if (opts.xChromaOffset !== void 0) this.xChromaOffset = opts.xChromaOffset;
      if (opts.yChromaOffset !== void 0) this.yChromaOffset = opts.yChromaOffset;
      if (opts.chromaFilter !== void 0) this.chromaFilter = opts.chromaFilter;
      if (opts.forceExplicitReconstruction !== void 0) this.forceExplicitReconstruction = opts.forceExplicitReconstruction;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get format() {
    return this.memoryView.getInt32(0x10);
  }
  set format(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get ycbcrModel() {
    return this.memoryView.getInt32(0x14);
  }
  set ycbcrModel(value) {
    this.memoryView.setInt32(0x14, value);
  }
  get ycbcrRange() {
    return this.memoryView.getInt32(0x18);
  }
  set ycbcrRange(value) {
    this.memoryView.setInt32(0x18, value);
  }
  get components() {
    return this._components;
  }
  set components(value) {
    if (value !== null && value.constructor === VkComponentMapping) {
      value.flush();
      this._components = value;
      this.memoryView.setBigInt64(0x1C, value.memoryAddress);
    } else if (value === null) {
      this._components = null;
    } else {
      throw new TypeError("Invalid type for 'VkSamplerYcbcrConversionCreateInfoKHR.components': Expected 'VkComponentMapping' but got '" + value.constructor.name + "'");
    }
  }
  get xChromaOffset() {
    return this.memoryView.getInt32(0x2C);
  }
  set xChromaOffset(value) {
    this.memoryView.setInt32(0x2C, value);
  }
  get yChromaOffset() {
    return this.memoryView.getInt32(0x30);
  }
  set yChromaOffset(value) {
    this.memoryView.setInt32(0x30, value);
  }
  get chromaFilter() {
    return this.memoryView.getInt32(0x34);
  }
  set chromaFilter(value) {
    this.memoryView.setInt32(0x34, value);
  }
  get forceExplicitReconstruction() {
    return this.memoryView.getUint32(0x38);
  }
  set forceExplicitReconstruction(value) {
    this.memoryView.setUint32(0x38, value);
  }
  
};

VkSamplerYcbcrConversionCreateInfoKHR.prototype.flush = function flush() {
  
  
  
  
  
  return true;
};

VkSamplerYcbcrConversionCreateInfoKHR.byteLength = 0x40;

VkSamplerYcbcrConversionCreateInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  format: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  ycbcrModel: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  ycbcrRange: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  components: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x10
  }),
  xChromaOffset: Object.freeze({
    byteOffset: 0x2C,
    byteLength: 0x4
  }),
  yChromaOffset: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  chromaFilter: Object.freeze({
    byteOffset: 0x34,
    byteLength: 0x4
  }),
  forceExplicitReconstruction: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x4
  }),
});
/** VkBindImagePlaneMemoryInfo **/
class VkBindImagePlaneMemoryInfo {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkBindImagePlaneMemoryInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.planeAspect !== void 0) this.planeAspect = opts.planeAspect;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get planeAspect() {
    return this.memoryView.getInt32(0x10);
  }
  set planeAspect(value) {
    this.memoryView.setInt32(0x10, value);
  }
  
};

VkBindImagePlaneMemoryInfo.prototype.flush = function flush() {
  
  
  
  return true;
};

VkBindImagePlaneMemoryInfo.byteLength = 0x18;

VkBindImagePlaneMemoryInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  planeAspect: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkBindImagePlaneMemoryInfoKHR **/
class VkBindImagePlaneMemoryInfoKHR {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkBindImagePlaneMemoryInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.planeAspect !== void 0) this.planeAspect = opts.planeAspect;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get planeAspect() {
    return this.memoryView.getInt32(0x10);
  }
  set planeAspect(value) {
    this.memoryView.setInt32(0x10, value);
  }
  
};

VkBindImagePlaneMemoryInfoKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkBindImagePlaneMemoryInfoKHR.byteLength = 0x18;

VkBindImagePlaneMemoryInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  planeAspect: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkImagePlaneMemoryRequirementsInfo **/
class VkImagePlaneMemoryRequirementsInfo {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkImagePlaneMemoryRequirementsInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.planeAspect !== void 0) this.planeAspect = opts.planeAspect;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get planeAspect() {
    return this.memoryView.getInt32(0x10);
  }
  set planeAspect(value) {
    this.memoryView.setInt32(0x10, value);
  }
  
};

VkImagePlaneMemoryRequirementsInfo.prototype.flush = function flush() {
  
  
  
  return true;
};

VkImagePlaneMemoryRequirementsInfo.byteLength = 0x18;

VkImagePlaneMemoryRequirementsInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  planeAspect: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkImagePlaneMemoryRequirementsInfoKHR **/
class VkImagePlaneMemoryRequirementsInfoKHR {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkImagePlaneMemoryRequirementsInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.planeAspect !== void 0) this.planeAspect = opts.planeAspect;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get planeAspect() {
    return this.memoryView.getInt32(0x10);
  }
  set planeAspect(value) {
    this.memoryView.setInt32(0x10, value);
  }
  
};

VkImagePlaneMemoryRequirementsInfoKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkImagePlaneMemoryRequirementsInfoKHR.byteLength = 0x18;

VkImagePlaneMemoryRequirementsInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  planeAspect: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceSamplerYcbcrConversionFeatures **/
class VkPhysicalDeviceSamplerYcbcrConversionFeatures {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceSamplerYcbcrConversionFeatures.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.samplerYcbcrConversion !== void 0) this.samplerYcbcrConversion = opts.samplerYcbcrConversion;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get samplerYcbcrConversion() {
    return this.memoryView.getUint32(0x10);
  }
  set samplerYcbcrConversion(value) {
    this.memoryView.setUint32(0x10, value);
  }
  
};

VkPhysicalDeviceSamplerYcbcrConversionFeatures.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceSamplerYcbcrConversionFeatures.byteLength = 0x18;

VkPhysicalDeviceSamplerYcbcrConversionFeatures.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  samplerYcbcrConversion: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR **/
class VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.samplerYcbcrConversion !== void 0) this.samplerYcbcrConversion = opts.samplerYcbcrConversion;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get samplerYcbcrConversion() {
    return this.memoryView.getUint32(0x10);
  }
  set samplerYcbcrConversion(value) {
    this.memoryView.setUint32(0x10, value);
  }
  
};

VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR.byteLength = 0x18;

VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  samplerYcbcrConversion: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkSamplerYcbcrConversionImageFormatProperties **/
class VkSamplerYcbcrConversionImageFormatProperties {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkSamplerYcbcrConversionImageFormatProperties.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get combinedImageSamplerDescriptorCount() {
    return this.memoryView.getUint32(0x10);
  }
  
};

VkSamplerYcbcrConversionImageFormatProperties.prototype.flush = function flush() {
  
  
  
  return true;
};

VkSamplerYcbcrConversionImageFormatProperties.byteLength = 0x18;

VkSamplerYcbcrConversionImageFormatProperties.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  combinedImageSamplerDescriptorCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkSamplerYcbcrConversionImageFormatPropertiesKHR **/
class VkSamplerYcbcrConversionImageFormatPropertiesKHR {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkSamplerYcbcrConversionImageFormatPropertiesKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get combinedImageSamplerDescriptorCount() {
    return this.memoryView.getUint32(0x10);
  }
  
};

VkSamplerYcbcrConversionImageFormatPropertiesKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkSamplerYcbcrConversionImageFormatPropertiesKHR.byteLength = 0x18;

VkSamplerYcbcrConversionImageFormatPropertiesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  combinedImageSamplerDescriptorCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkTextureLODGatherFormatPropertiesAMD **/
class VkTextureLODGatherFormatPropertiesAMD {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkTextureLODGatherFormatPropertiesAMD.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get supportsTextureGatherLODBiasAMD() {
    return this.memoryView.getUint32(0x10);
  }
  
};

VkTextureLODGatherFormatPropertiesAMD.prototype.flush = function flush() {
  
  
  
  return true;
};

VkTextureLODGatherFormatPropertiesAMD.byteLength = 0x18;

VkTextureLODGatherFormatPropertiesAMD.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  supportsTextureGatherLODBiasAMD: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkConditionalRenderingBeginInfoEXT **/
class VkConditionalRenderingBeginInfoEXT {
  constructor(opts) {
    
    this._pNext = null;
    this._buffer = null;
    
    
    this.memoryBuffer = new ArrayBuffer(VkConditionalRenderingBeginInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.buffer !== void 0) this.buffer = opts.buffer;
      if (opts.offset !== void 0) this.offset = opts.offset;
      if (opts.flags !== void 0) this.flags = opts.flags;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get buffer() {
    return this._buffer;
  }
  set buffer(value) {
    if (value !== null && value.constructor === VkBuffer) {
      value.flush();
      this._buffer = value;
      this.memoryView.setBigInt64(0x10, value.memoryAddress);
    } else if (value === null) {
      this._buffer = null;
    } else {
      throw new TypeError("Invalid type for 'VkConditionalRenderingBeginInfoEXT.buffer': Expected 'VkBuffer' but got '" + value.constructor.name + "'");
    }
  }
  get offset() {
    return this.memoryView.getBigUint64(0x18);
  }
  set offset(value) {
    this.memoryView.setBigUint64(0x18, value);
  }
  get flags() {
    return this.memoryView.getInt32(0x20);
  }
  set flags(value) {
    this.memoryView.setInt32(0x20, value);
  }
  
};

VkConditionalRenderingBeginInfoEXT.prototype.flush = function flush() {
  
  
  
  return true;
};

VkConditionalRenderingBeginInfoEXT.byteLength = 0x28;

VkConditionalRenderingBeginInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  buffer: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  offset: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
});
/** VkProtectedSubmitInfo **/
class VkProtectedSubmitInfo {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkProtectedSubmitInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.protectedSubmit !== void 0) this.protectedSubmit = opts.protectedSubmit;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get protectedSubmit() {
    return this.memoryView.getUint32(0x10);
  }
  set protectedSubmit(value) {
    this.memoryView.setUint32(0x10, value);
  }
  
};

VkProtectedSubmitInfo.prototype.flush = function flush() {
  
  
  
  return true;
};

VkProtectedSubmitInfo.byteLength = 0x18;

VkProtectedSubmitInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  protectedSubmit: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceProtectedMemoryFeatures **/
class VkPhysicalDeviceProtectedMemoryFeatures {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceProtectedMemoryFeatures.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.protectedMemory !== void 0) this.protectedMemory = opts.protectedMemory;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get protectedMemory() {
    return this.memoryView.getUint32(0x10);
  }
  set protectedMemory(value) {
    this.memoryView.setUint32(0x10, value);
  }
  
};

VkPhysicalDeviceProtectedMemoryFeatures.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceProtectedMemoryFeatures.byteLength = 0x18;

VkPhysicalDeviceProtectedMemoryFeatures.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  protectedMemory: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceProtectedMemoryProperties **/
class VkPhysicalDeviceProtectedMemoryProperties {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceProtectedMemoryProperties.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get protectedNoFault() {
    return this.memoryView.getUint32(0x10);
  }
  
};

VkPhysicalDeviceProtectedMemoryProperties.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceProtectedMemoryProperties.byteLength = 0x18;

VkPhysicalDeviceProtectedMemoryProperties.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  protectedNoFault: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkDeviceQueueInfo2 **/
class VkDeviceQueueInfo2 {
  constructor(opts) {
    
    this._pNext = null;
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkDeviceQueueInfo2.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.queueFamilyIndex !== void 0) this.queueFamilyIndex = opts.queueFamilyIndex;
      if (opts.queueIndex !== void 0) this.queueIndex = opts.queueIndex;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get flags() {
    return this.memoryView.getInt32(0x10);
  }
  set flags(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get queueFamilyIndex() {
    return this.memoryView.getUint32(0x14);
  }
  set queueFamilyIndex(value) {
    this.memoryView.setUint32(0x14, value);
  }
  get queueIndex() {
    return this.memoryView.getUint32(0x18);
  }
  set queueIndex(value) {
    this.memoryView.setUint32(0x18, value);
  }
  
};

VkDeviceQueueInfo2.prototype.flush = function flush() {
  
  
  
  return true;
};

VkDeviceQueueInfo2.byteLength = 0x20;

VkDeviceQueueInfo2.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  queueFamilyIndex: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  queueIndex: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
});
/** VkPipelineCoverageToColorStateCreateInfoNV **/
class VkPipelineCoverageToColorStateCreateInfoNV {
  constructor(opts) {
    
    this._pNext = null;
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkPipelineCoverageToColorStateCreateInfoNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.coverageToColorEnable !== void 0) this.coverageToColorEnable = opts.coverageToColorEnable;
      if (opts.coverageToColorLocation !== void 0) this.coverageToColorLocation = opts.coverageToColorLocation;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get flags() {
    return this.memoryView.getInt32(0x10);
  }
  set flags(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get coverageToColorEnable() {
    return this.memoryView.getUint32(0x14);
  }
  set coverageToColorEnable(value) {
    this.memoryView.setUint32(0x14, value);
  }
  get coverageToColorLocation() {
    return this.memoryView.getUint32(0x18);
  }
  set coverageToColorLocation(value) {
    this.memoryView.setUint32(0x18, value);
  }
  
};

VkPipelineCoverageToColorStateCreateInfoNV.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPipelineCoverageToColorStateCreateInfoNV.byteLength = 0x20;

VkPipelineCoverageToColorStateCreateInfoNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  coverageToColorEnable: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  coverageToColorLocation: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT **/
class VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get filterMinmaxSingleComponentFormats() {
    return this.memoryView.getUint32(0x10);
  }
  get filterMinmaxImageComponentMapping() {
    return this.memoryView.getUint32(0x14);
  }
  
};

VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT.byteLength = 0x18;

VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  filterMinmaxSingleComponentFormats: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  filterMinmaxImageComponentMapping: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
});
/** VkSampleLocationEXT **/
class VkSampleLocationEXT {
  constructor(opts) {
    
    
    this.memoryBuffer = new ArrayBuffer(VkSampleLocationEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.x !== void 0) this.x = opts.x;
      if (opts.y !== void 0) this.y = opts.y;
      
    }
  }
  get x() {
    return this.memoryView.getFloat32(0x0);
  }
  set x(value) {
    this.memoryView.setFloat32(0x0, value);
  }
  get y() {
    return this.memoryView.getFloat32(0x4);
  }
  set y(value) {
    this.memoryView.setFloat32(0x4, value);
  }
  
};

VkSampleLocationEXT.prototype.flush = function flush() {
  
  return true;
};

VkSampleLocationEXT.byteLength = 0x8;

VkSampleLocationEXT.memoryLayout = Object.freeze({
  x: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  y: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
});
/** VkSampleLocationsInfoEXT **/
class VkSampleLocationsInfoEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    this._sampleLocationGridSize = null;
    
    this._pSampleLocations = null;
    this._pSampleLocationsNative = null;
    this.memoryBuffer = new ArrayBuffer(VkSampleLocationsInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.sampleLocationsPerPixel !== void 0) this.sampleLocationsPerPixel = opts.sampleLocationsPerPixel;
      if (opts.sampleLocationGridSize !== void 0) this.sampleLocationGridSize = opts.sampleLocationGridSize;
      if (opts.sampleLocationsCount !== void 0) this.sampleLocationsCount = opts.sampleLocationsCount;
      if (opts.pSampleLocations !== void 0) this.pSampleLocations = opts.pSampleLocations;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get sampleLocationsPerPixel() {
    return this.memoryView.getInt32(0x10);
  }
  set sampleLocationsPerPixel(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get sampleLocationGridSize() {
    return this._sampleLocationGridSize;
  }
  set sampleLocationGridSize(value) {
    if (value !== null && value.constructor === VkExtent2D) {
      value.flush();
      this._sampleLocationGridSize = value;
      this.memoryView.setBigInt64(0x14, value.memoryAddress);
    } else if (value === null) {
      this._sampleLocationGridSize = null;
    } else {
      throw new TypeError("Invalid type for 'VkSampleLocationsInfoEXT.sampleLocationGridSize': Expected 'VkExtent2D' but got '" + value.constructor.name + "'");
    }
  }
  get sampleLocationsCount() {
    return this.memoryView.getUint32(0x1C);
  }
  set sampleLocationsCount(value) {
    this.memoryView.setUint32(0x1C, value);
  }
  get pSampleLocations() {
    return this._pSampleLocations;
  }
  set pSampleLocations(value) {
    if (value !== null && value.constructor === Array) {
      this._pSampleLocations = value;
    } else if (value === null) {
      this._pSampleLocations = null;
    } else {
      throw new TypeError("Invalid type for 'VkSampleLocationsInfoEXT.pSampleLocations': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkSampleLocationsInfoEXT.prototype.flush = function flush() {
  
  
  
  
  
  
  if (this._pSampleLocations !== null) {
    let nativeArray = new NativeObjectArray(this._pSampleLocations);
    this._pSampleLocationsNative = nativeArray;
    this.memoryView.setBigInt64(0x20, nativeArray.address);
  }
  
  return true;
};

VkSampleLocationsInfoEXT.byteLength = 0x28;

VkSampleLocationsInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  sampleLocationsPerPixel: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  sampleLocationGridSize: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x8
  }),
  sampleLocationsCount: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  pSampleLocations: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
});
/** VkAttachmentSampleLocationsEXT **/
class VkAttachmentSampleLocationsEXT {
  constructor(opts) {
    
    this._sampleLocationsInfo = null;
    this.memoryBuffer = new ArrayBuffer(VkAttachmentSampleLocationsEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.attachmentIndex !== void 0) this.attachmentIndex = opts.attachmentIndex;
      if (opts.sampleLocationsInfo !== void 0) this.sampleLocationsInfo = opts.sampleLocationsInfo;
      
    }
  }
  get attachmentIndex() {
    return this.memoryView.getUint32(0x0);
  }
  set attachmentIndex(value) {
    this.memoryView.setUint32(0x0, value);
  }
  get sampleLocationsInfo() {
    return this._sampleLocationsInfo;
  }
  set sampleLocationsInfo(value) {
    if (value !== null && value.constructor === VkSampleLocationsInfoEXT) {
      value.flush();
      this._sampleLocationsInfo = value;
      this.memoryView.setBigInt64(0x8, value.memoryAddress);
    } else if (value === null) {
      this._sampleLocationsInfo = null;
    } else {
      throw new TypeError("Invalid type for 'VkAttachmentSampleLocationsEXT.sampleLocationsInfo': Expected 'VkSampleLocationsInfoEXT' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkAttachmentSampleLocationsEXT.prototype.flush = function flush() {
  
  
  
  return true;
};

VkAttachmentSampleLocationsEXT.byteLength = 0x30;

VkAttachmentSampleLocationsEXT.memoryLayout = Object.freeze({
  attachmentIndex: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  sampleLocationsInfo: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x28
  }),
});
/** VkSubpassSampleLocationsEXT **/
class VkSubpassSampleLocationsEXT {
  constructor(opts) {
    
    this._sampleLocationsInfo = null;
    this.memoryBuffer = new ArrayBuffer(VkSubpassSampleLocationsEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.subpassIndex !== void 0) this.subpassIndex = opts.subpassIndex;
      if (opts.sampleLocationsInfo !== void 0) this.sampleLocationsInfo = opts.sampleLocationsInfo;
      
    }
  }
  get subpassIndex() {
    return this.memoryView.getUint32(0x0);
  }
  set subpassIndex(value) {
    this.memoryView.setUint32(0x0, value);
  }
  get sampleLocationsInfo() {
    return this._sampleLocationsInfo;
  }
  set sampleLocationsInfo(value) {
    if (value !== null && value.constructor === VkSampleLocationsInfoEXT) {
      value.flush();
      this._sampleLocationsInfo = value;
      this.memoryView.setBigInt64(0x8, value.memoryAddress);
    } else if (value === null) {
      this._sampleLocationsInfo = null;
    } else {
      throw new TypeError("Invalid type for 'VkSubpassSampleLocationsEXT.sampleLocationsInfo': Expected 'VkSampleLocationsInfoEXT' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkSubpassSampleLocationsEXT.prototype.flush = function flush() {
  
  
  
  return true;
};

VkSubpassSampleLocationsEXT.byteLength = 0x30;

VkSubpassSampleLocationsEXT.memoryLayout = Object.freeze({
  subpassIndex: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  sampleLocationsInfo: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x28
  }),
});
/** VkRenderPassSampleLocationsBeginInfoEXT **/
class VkRenderPassSampleLocationsBeginInfoEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    this._pAttachmentInitialSampleLocations = null;
    this._pAttachmentInitialSampleLocationsNative = null;
    
    this._pPostSubpassSampleLocations = null;
    this._pPostSubpassSampleLocationsNative = null;
    this.memoryBuffer = new ArrayBuffer(VkRenderPassSampleLocationsBeginInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.attachmentInitialSampleLocationsCount !== void 0) this.attachmentInitialSampleLocationsCount = opts.attachmentInitialSampleLocationsCount;
      if (opts.pAttachmentInitialSampleLocations !== void 0) this.pAttachmentInitialSampleLocations = opts.pAttachmentInitialSampleLocations;
      if (opts.postSubpassSampleLocationsCount !== void 0) this.postSubpassSampleLocationsCount = opts.postSubpassSampleLocationsCount;
      if (opts.pPostSubpassSampleLocations !== void 0) this.pPostSubpassSampleLocations = opts.pPostSubpassSampleLocations;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get attachmentInitialSampleLocationsCount() {
    return this.memoryView.getUint32(0x10);
  }
  set attachmentInitialSampleLocationsCount(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get pAttachmentInitialSampleLocations() {
    return this._pAttachmentInitialSampleLocations;
  }
  set pAttachmentInitialSampleLocations(value) {
    if (value !== null && value.constructor === Array) {
      this._pAttachmentInitialSampleLocations = value;
    } else if (value === null) {
      this._pAttachmentInitialSampleLocations = null;
    } else {
      throw new TypeError("Invalid type for 'VkRenderPassSampleLocationsBeginInfoEXT.pAttachmentInitialSampleLocations': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get postSubpassSampleLocationsCount() {
    return this.memoryView.getUint32(0x20);
  }
  set postSubpassSampleLocationsCount(value) {
    this.memoryView.setUint32(0x20, value);
  }
  get pPostSubpassSampleLocations() {
    return this._pPostSubpassSampleLocations;
  }
  set pPostSubpassSampleLocations(value) {
    if (value !== null && value.constructor === Array) {
      this._pPostSubpassSampleLocations = value;
    } else if (value === null) {
      this._pPostSubpassSampleLocations = null;
    } else {
      throw new TypeError("Invalid type for 'VkRenderPassSampleLocationsBeginInfoEXT.pPostSubpassSampleLocations': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkRenderPassSampleLocationsBeginInfoEXT.prototype.flush = function flush() {
  
  
  
  
  if (this._pAttachmentInitialSampleLocations !== null) {
    let nativeArray = new NativeObjectArray(this._pAttachmentInitialSampleLocations);
    this._pAttachmentInitialSampleLocationsNative = nativeArray;
    this.memoryView.setBigInt64(0x18, nativeArray.address);
  }
  
  
  if (this._pPostSubpassSampleLocations !== null) {
    let nativeArray = new NativeObjectArray(this._pPostSubpassSampleLocations);
    this._pPostSubpassSampleLocationsNative = nativeArray;
    this.memoryView.setBigInt64(0x28, nativeArray.address);
  }
  
  return true;
};

VkRenderPassSampleLocationsBeginInfoEXT.byteLength = 0x30;

VkRenderPassSampleLocationsBeginInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  attachmentInitialSampleLocationsCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pAttachmentInitialSampleLocations: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  postSubpassSampleLocationsCount: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  pPostSubpassSampleLocations: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
});
/** VkPipelineSampleLocationsStateCreateInfoEXT **/
class VkPipelineSampleLocationsStateCreateInfoEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    this._sampleLocationsInfo = null;
    this.memoryBuffer = new ArrayBuffer(VkPipelineSampleLocationsStateCreateInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.sampleLocationsEnable !== void 0) this.sampleLocationsEnable = opts.sampleLocationsEnable;
      if (opts.sampleLocationsInfo !== void 0) this.sampleLocationsInfo = opts.sampleLocationsInfo;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get sampleLocationsEnable() {
    return this.memoryView.getUint32(0x10);
  }
  set sampleLocationsEnable(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get sampleLocationsInfo() {
    return this._sampleLocationsInfo;
  }
  set sampleLocationsInfo(value) {
    if (value !== null && value.constructor === VkSampleLocationsInfoEXT) {
      value.flush();
      this._sampleLocationsInfo = value;
      this.memoryView.setBigInt64(0x18, value.memoryAddress);
    } else if (value === null) {
      this._sampleLocationsInfo = null;
    } else {
      throw new TypeError("Invalid type for 'VkPipelineSampleLocationsStateCreateInfoEXT.sampleLocationsInfo': Expected 'VkSampleLocationsInfoEXT' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkPipelineSampleLocationsStateCreateInfoEXT.prototype.flush = function flush() {
  
  
  
  
  
  return true;
};

VkPipelineSampleLocationsStateCreateInfoEXT.byteLength = 0x40;

VkPipelineSampleLocationsStateCreateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  sampleLocationsEnable: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  sampleLocationsInfo: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x28
  }),
});
/** VkPhysicalDeviceSampleLocationsPropertiesEXT **/
class VkPhysicalDeviceSampleLocationsPropertiesEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    this._maxSampleLocationGridSize = null;
    this._sampleLocationCoordinateRange = null;
    
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceSampleLocationsPropertiesEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get sampleLocationSampleCounts() {
    return this.memoryView.getInt32(0x10);
  }
  get maxSampleLocationGridSize() {
    return this._maxSampleLocationGridSize;
  }
  get sampleLocationCoordinateRange() {
    return this._sampleLocationCoordinateRange;
  }
  get sampleLocationSubPixelBits() {
    return this.memoryView.getUint32(0x24);
  }
  get variableSampleLocations() {
    return this.memoryView.getUint32(0x28);
  }
  
};

VkPhysicalDeviceSampleLocationsPropertiesEXT.prototype.flush = function flush() {
  
  
  
  
  
  
  if (this._sampleLocationCoordinateRange !== null) {
    let array = this._sampleLocationCoordinateRange;
    for (let ii = 0; ii < array.length; ++ii) {
      this.memoryView.setFloat32(0x1C, array[ii]);
    };
  }
  
  return true;
};

VkPhysicalDeviceSampleLocationsPropertiesEXT.byteLength = 0x30;

VkPhysicalDeviceSampleLocationsPropertiesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  sampleLocationSampleCounts: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  maxSampleLocationGridSize: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x8
  }),
  sampleLocationCoordinateRange: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x8
  }),
  sampleLocationSubPixelBits: Object.freeze({
    byteOffset: 0x24,
    byteLength: 0x4
  }),
  variableSampleLocations: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x4
  }),
});
/** VkMultisamplePropertiesEXT **/
class VkMultisamplePropertiesEXT {
  constructor(opts) {
    
    this._pNext = null;
    this._maxSampleLocationGridSize = null;
    this.memoryBuffer = new ArrayBuffer(VkMultisamplePropertiesEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get maxSampleLocationGridSize() {
    return this._maxSampleLocationGridSize;
  }
  
};

VkMultisamplePropertiesEXT.prototype.flush = function flush() {
  
  
  
  
  
  return true;
};

VkMultisamplePropertiesEXT.byteLength = 0x18;

VkMultisamplePropertiesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  maxSampleLocationGridSize: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
});
/** VkSamplerReductionModeCreateInfoEXT **/
class VkSamplerReductionModeCreateInfoEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkSamplerReductionModeCreateInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.reductionMode !== void 0) this.reductionMode = opts.reductionMode;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get reductionMode() {
    return this.memoryView.getInt32(0x10);
  }
  set reductionMode(value) {
    this.memoryView.setInt32(0x10, value);
  }
  
};

VkSamplerReductionModeCreateInfoEXT.prototype.flush = function flush() {
  
  
  
  return true;
};

VkSamplerReductionModeCreateInfoEXT.byteLength = 0x18;

VkSamplerReductionModeCreateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  reductionMode: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT **/
class VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.advancedBlendCoherentOperations !== void 0) this.advancedBlendCoherentOperations = opts.advancedBlendCoherentOperations;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get advancedBlendCoherentOperations() {
    return this.memoryView.getUint32(0x10);
  }
  set advancedBlendCoherentOperations(value) {
    this.memoryView.setUint32(0x10, value);
  }
  
};

VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT.byteLength = 0x18;

VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  advancedBlendCoherentOperations: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT **/
class VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    
    
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get advancedBlendMaxColorAttachments() {
    return this.memoryView.getUint32(0x10);
  }
  get advancedBlendIndependentBlend() {
    return this.memoryView.getUint32(0x14);
  }
  get advancedBlendNonPremultipliedSrcColor() {
    return this.memoryView.getUint32(0x18);
  }
  get advancedBlendNonPremultipliedDstColor() {
    return this.memoryView.getUint32(0x1C);
  }
  get advancedBlendCorrelatedOverlap() {
    return this.memoryView.getUint32(0x20);
  }
  get advancedBlendAllOperations() {
    return this.memoryView.getUint32(0x24);
  }
  
};

VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.byteLength = 0x28;

VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  advancedBlendMaxColorAttachments: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  advancedBlendIndependentBlend: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  advancedBlendNonPremultipliedSrcColor: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  advancedBlendNonPremultipliedDstColor: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  advancedBlendCorrelatedOverlap: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  advancedBlendAllOperations: Object.freeze({
    byteOffset: 0x24,
    byteLength: 0x4
  }),
});
/** VkPipelineColorBlendAdvancedStateCreateInfoEXT **/
class VkPipelineColorBlendAdvancedStateCreateInfoEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkPipelineColorBlendAdvancedStateCreateInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.srcPremultiplied !== void 0) this.srcPremultiplied = opts.srcPremultiplied;
      if (opts.dstPremultiplied !== void 0) this.dstPremultiplied = opts.dstPremultiplied;
      if (opts.blendOverlap !== void 0) this.blendOverlap = opts.blendOverlap;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get srcPremultiplied() {
    return this.memoryView.getUint32(0x10);
  }
  set srcPremultiplied(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get dstPremultiplied() {
    return this.memoryView.getUint32(0x14);
  }
  set dstPremultiplied(value) {
    this.memoryView.setUint32(0x14, value);
  }
  get blendOverlap() {
    return this.memoryView.getInt32(0x18);
  }
  set blendOverlap(value) {
    this.memoryView.setInt32(0x18, value);
  }
  
};

VkPipelineColorBlendAdvancedStateCreateInfoEXT.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPipelineColorBlendAdvancedStateCreateInfoEXT.byteLength = 0x20;

VkPipelineColorBlendAdvancedStateCreateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  srcPremultiplied: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  dstPremultiplied: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  blendOverlap: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceInlineUniformBlockFeaturesEXT **/
class VkPhysicalDeviceInlineUniformBlockFeaturesEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceInlineUniformBlockFeaturesEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.inlineUniformBlock !== void 0) this.inlineUniformBlock = opts.inlineUniformBlock;
      if (opts.descriptorBindingInlineUniformBlockUpdateAfterBind !== void 0) this.descriptorBindingInlineUniformBlockUpdateAfterBind = opts.descriptorBindingInlineUniformBlockUpdateAfterBind;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get inlineUniformBlock() {
    return this.memoryView.getUint32(0x10);
  }
  set inlineUniformBlock(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get descriptorBindingInlineUniformBlockUpdateAfterBind() {
    return this.memoryView.getUint32(0x14);
  }
  set descriptorBindingInlineUniformBlockUpdateAfterBind(value) {
    this.memoryView.setUint32(0x14, value);
  }
  
};

VkPhysicalDeviceInlineUniformBlockFeaturesEXT.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceInlineUniformBlockFeaturesEXT.byteLength = 0x18;

VkPhysicalDeviceInlineUniformBlockFeaturesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  inlineUniformBlock: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  descriptorBindingInlineUniformBlockUpdateAfterBind: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceInlineUniformBlockPropertiesEXT **/
class VkPhysicalDeviceInlineUniformBlockPropertiesEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceInlineUniformBlockPropertiesEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get maxInlineUniformBlockSize() {
    return this.memoryView.getUint32(0x10);
  }
  get maxPerStageDescriptorInlineUniformBlocks() {
    return this.memoryView.getUint32(0x14);
  }
  get maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks() {
    return this.memoryView.getUint32(0x18);
  }
  get maxDescriptorSetInlineUniformBlocks() {
    return this.memoryView.getUint32(0x1C);
  }
  get maxDescriptorSetUpdateAfterBindInlineUniformBlocks() {
    return this.memoryView.getUint32(0x20);
  }
  
};

VkPhysicalDeviceInlineUniformBlockPropertiesEXT.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceInlineUniformBlockPropertiesEXT.byteLength = 0x28;

VkPhysicalDeviceInlineUniformBlockPropertiesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  maxInlineUniformBlockSize: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  maxPerStageDescriptorInlineUniformBlocks: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  maxDescriptorSetInlineUniformBlocks: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  maxDescriptorSetUpdateAfterBindInlineUniformBlocks: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
});
/** VkWriteDescriptorSetInlineUniformBlockEXT **/
class VkWriteDescriptorSetInlineUniformBlockEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    this._pData = null;
    this.memoryBuffer = new ArrayBuffer(VkWriteDescriptorSetInlineUniformBlockEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.dataSize !== void 0) this.dataSize = opts.dataSize;
      if (opts.pData !== void 0) this.pData = opts.pData;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get dataSize() {
    return this.memoryView.getUint32(0x10);
  }
  set dataSize(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get pData() {
    return this._pData;
  }
  set pData(value) {
    if (value !== null && value.constructor === ArrayBuffer) {
      this._pData = value;
      this.memoryView.setBigInt64(0x18, getAddressFromArrayBuffer(value.buffer));
    } else if (value === null) {
      this._pData = null;
    } else {
      throw new TypeError("Invalid type for 'VkWriteDescriptorSetInlineUniformBlockEXT.pData': Expected 'ArrayBuffer' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkWriteDescriptorSetInlineUniformBlockEXT.prototype.flush = function flush() {
  
  
  
  return true;
};

VkWriteDescriptorSetInlineUniformBlockEXT.byteLength = 0x20;

VkWriteDescriptorSetInlineUniformBlockEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  dataSize: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pData: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkDescriptorPoolInlineUniformBlockCreateInfoEXT **/
class VkDescriptorPoolInlineUniformBlockCreateInfoEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkDescriptorPoolInlineUniformBlockCreateInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.maxInlineUniformBlockBindings !== void 0) this.maxInlineUniformBlockBindings = opts.maxInlineUniformBlockBindings;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get maxInlineUniformBlockBindings() {
    return this.memoryView.getUint32(0x10);
  }
  set maxInlineUniformBlockBindings(value) {
    this.memoryView.setUint32(0x10, value);
  }
  
};

VkDescriptorPoolInlineUniformBlockCreateInfoEXT.prototype.flush = function flush() {
  
  
  
  return true;
};

VkDescriptorPoolInlineUniformBlockCreateInfoEXT.byteLength = 0x18;

VkDescriptorPoolInlineUniformBlockCreateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  maxInlineUniformBlockBindings: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPipelineCoverageModulationStateCreateInfoNV **/
class VkPipelineCoverageModulationStateCreateInfoNV {
  constructor(opts) {
    
    this._pNext = null;
    
    
    
    
    this._pCoverageModulationTable = null;
    this.memoryBuffer = new ArrayBuffer(VkPipelineCoverageModulationStateCreateInfoNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.coverageModulationMode !== void 0) this.coverageModulationMode = opts.coverageModulationMode;
      if (opts.coverageModulationTableEnable !== void 0) this.coverageModulationTableEnable = opts.coverageModulationTableEnable;
      if (opts.coverageModulationTableCount !== void 0) this.coverageModulationTableCount = opts.coverageModulationTableCount;
      if (opts.pCoverageModulationTable !== void 0) this.pCoverageModulationTable = opts.pCoverageModulationTable;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get flags() {
    return this.memoryView.getInt32(0x10);
  }
  set flags(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get coverageModulationMode() {
    return this.memoryView.getInt32(0x14);
  }
  set coverageModulationMode(value) {
    this.memoryView.setInt32(0x14, value);
  }
  get coverageModulationTableEnable() {
    return this.memoryView.getUint32(0x18);
  }
  set coverageModulationTableEnable(value) {
    this.memoryView.setUint32(0x18, value);
  }
  get coverageModulationTableCount() {
    return this.memoryView.getUint32(0x1C);
  }
  set coverageModulationTableCount(value) {
    this.memoryView.setUint32(0x1C, value);
  }
  get pCoverageModulationTable() {
    return this._pCoverageModulationTable;
  }
  set pCoverageModulationTable(value) {
    if (value !== null && value.constructor === Float32Array) {
      this._pCoverageModulationTable = value;
      this.memoryView.setBigInt64(0x20, getAddressFromArrayBuffer(value.buffer));
    } else if (value === null) {
      this._pCoverageModulationTable = null;
    } else {
      throw new TypeError("Invalid type for 'VkPipelineCoverageModulationStateCreateInfoNV.pCoverageModulationTable': Expected 'Float32Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkPipelineCoverageModulationStateCreateInfoNV.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPipelineCoverageModulationStateCreateInfoNV.byteLength = 0x28;

VkPipelineCoverageModulationStateCreateInfoNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  coverageModulationMode: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  coverageModulationTableEnable: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  coverageModulationTableCount: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  pCoverageModulationTable: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
});
/** VkImageFormatListCreateInfoKHR **/
class VkImageFormatListCreateInfoKHR {
  constructor(opts) {
    
    this._pNext = null;
    
    this._pViewFormats = null;
    this.memoryBuffer = new ArrayBuffer(VkImageFormatListCreateInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.viewFormatCount !== void 0) this.viewFormatCount = opts.viewFormatCount;
      if (opts.pViewFormats !== void 0) this.pViewFormats = opts.pViewFormats;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get viewFormatCount() {
    return this.memoryView.getUint32(0x10);
  }
  set viewFormatCount(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get pViewFormats() {
    return this._pViewFormats;
  }
  set pViewFormats(value) {
    if (value !== null && value.constructor === Int32Array) {
      this._pViewFormats = value;
      this.memoryView.setBigInt64(0x18, getAddressFromArrayBuffer(value.buffer));
    } else if (value === null) {
      this._pViewFormats = null;
    } else {
      throw new TypeError("Invalid type for 'VkImageFormatListCreateInfoKHR.pViewFormats': Expected 'Int32Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkImageFormatListCreateInfoKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkImageFormatListCreateInfoKHR.byteLength = 0x20;

VkImageFormatListCreateInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  viewFormatCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pViewFormats: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkValidationCacheCreateInfoEXT **/
class VkValidationCacheCreateInfoEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    
    this._pInitialData = null;
    this.memoryBuffer = new ArrayBuffer(VkValidationCacheCreateInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.initialDataSize !== void 0) this.initialDataSize = opts.initialDataSize;
      if (opts.pInitialData !== void 0) this.pInitialData = opts.pInitialData;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get flags() {
    return this.memoryView.getInt32(0x10);
  }
  set flags(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get initialDataSize() {
    return this.memoryView.getBigInt64(0x18);
  }
  set initialDataSize(value) {
    this.memoryView.setBigInt64(0x18, value);
  }
  get pInitialData() {
    return this._pInitialData;
  }
  set pInitialData(value) {
    if (value !== null && value.constructor === ArrayBuffer) {
      this._pInitialData = value;
      this.memoryView.setBigInt64(0x20, getAddressFromArrayBuffer(value.buffer));
    } else if (value === null) {
      this._pInitialData = null;
    } else {
      throw new TypeError("Invalid type for 'VkValidationCacheCreateInfoEXT.pInitialData': Expected 'ArrayBuffer' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkValidationCacheCreateInfoEXT.prototype.flush = function flush() {
  
  
  
  return true;
};

VkValidationCacheCreateInfoEXT.byteLength = 0x28;

VkValidationCacheCreateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  initialDataSize: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  pInitialData: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
});
/** VkShaderModuleValidationCacheCreateInfoEXT **/
class VkShaderModuleValidationCacheCreateInfoEXT {
  constructor(opts) {
    
    this._pNext = null;
    this._validationCache = null;
    this.memoryBuffer = new ArrayBuffer(VkShaderModuleValidationCacheCreateInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.validationCache !== void 0) this.validationCache = opts.validationCache;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get validationCache() {
    return this._validationCache;
  }
  set validationCache(value) {
    if (value !== null && value.constructor === VkValidationCacheEXT) {
      value.flush();
      this._validationCache = value;
      this.memoryView.setBigInt64(0x10, value.memoryAddress);
    } else if (value === null) {
      this._validationCache = null;
    } else {
      throw new TypeError("Invalid type for 'VkShaderModuleValidationCacheCreateInfoEXT.validationCache': Expected 'VkValidationCacheEXT' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkShaderModuleValidationCacheCreateInfoEXT.prototype.flush = function flush() {
  
  
  
  return true;
};

VkShaderModuleValidationCacheCreateInfoEXT.byteLength = 0x18;

VkShaderModuleValidationCacheCreateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  validationCache: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
});
/** VkPhysicalDeviceMaintenance3Properties **/
class VkPhysicalDeviceMaintenance3Properties {
  constructor(opts) {
    
    this._pNext = null;
    
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceMaintenance3Properties.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get maxPerSetDescriptors() {
    return this.memoryView.getUint32(0x10);
  }
  get maxMemoryAllocationSize() {
    return this.memoryView.getBigUint64(0x18);
  }
  
};

VkPhysicalDeviceMaintenance3Properties.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceMaintenance3Properties.byteLength = 0x20;

VkPhysicalDeviceMaintenance3Properties.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  maxPerSetDescriptors: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  maxMemoryAllocationSize: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkPhysicalDeviceMaintenance3PropertiesKHR **/
class VkPhysicalDeviceMaintenance3PropertiesKHR {
  constructor(opts) {
    
    this._pNext = null;
    
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceMaintenance3PropertiesKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get maxPerSetDescriptors() {
    return this.memoryView.getUint32(0x10);
  }
  get maxMemoryAllocationSize() {
    return this.memoryView.getBigUint64(0x18);
  }
  
};

VkPhysicalDeviceMaintenance3PropertiesKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceMaintenance3PropertiesKHR.byteLength = 0x20;

VkPhysicalDeviceMaintenance3PropertiesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  maxPerSetDescriptors: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  maxMemoryAllocationSize: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkDescriptorSetLayoutSupport **/
class VkDescriptorSetLayoutSupport {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkDescriptorSetLayoutSupport.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get supported() {
    return this.memoryView.getUint32(0x10);
  }
  
};

VkDescriptorSetLayoutSupport.prototype.flush = function flush() {
  
  
  
  return true;
};

VkDescriptorSetLayoutSupport.byteLength = 0x18;

VkDescriptorSetLayoutSupport.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  supported: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkDescriptorSetLayoutSupportKHR **/
class VkDescriptorSetLayoutSupportKHR {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkDescriptorSetLayoutSupportKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get supported() {
    return this.memoryView.getUint32(0x10);
  }
  
};

VkDescriptorSetLayoutSupportKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkDescriptorSetLayoutSupportKHR.byteLength = 0x18;

VkDescriptorSetLayoutSupportKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  supported: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceShaderDrawParameterFeatures **/
class VkPhysicalDeviceShaderDrawParameterFeatures {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceShaderDrawParameterFeatures.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.shaderDrawParameters !== void 0) this.shaderDrawParameters = opts.shaderDrawParameters;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get shaderDrawParameters() {
    return this.memoryView.getUint32(0x10);
  }
  set shaderDrawParameters(value) {
    this.memoryView.setUint32(0x10, value);
  }
  
};

VkPhysicalDeviceShaderDrawParameterFeatures.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceShaderDrawParameterFeatures.byteLength = 0x18;

VkPhysicalDeviceShaderDrawParameterFeatures.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  shaderDrawParameters: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceFloat16Int8FeaturesKHR **/
class VkPhysicalDeviceFloat16Int8FeaturesKHR {
  constructor(opts) {
    
    this._pNext = null;
    
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceFloat16Int8FeaturesKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.shaderFloat16 !== void 0) this.shaderFloat16 = opts.shaderFloat16;
      if (opts.shaderInt8 !== void 0) this.shaderInt8 = opts.shaderInt8;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get shaderFloat16() {
    return this.memoryView.getUint32(0x10);
  }
  set shaderFloat16(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get shaderInt8() {
    return this.memoryView.getUint32(0x14);
  }
  set shaderInt8(value) {
    this.memoryView.setUint32(0x14, value);
  }
  
};

VkPhysicalDeviceFloat16Int8FeaturesKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceFloat16Int8FeaturesKHR.byteLength = 0x18;

VkPhysicalDeviceFloat16Int8FeaturesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  shaderFloat16: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  shaderInt8: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceFloatControlsPropertiesKHR **/
class VkPhysicalDeviceFloatControlsPropertiesKHR {
  constructor(opts) {
    
    this._pNext = null;
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceFloatControlsPropertiesKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get separateDenormSettings() {
    return this.memoryView.getUint32(0x10);
  }
  get separateRoundingModeSettings() {
    return this.memoryView.getUint32(0x14);
  }
  get shaderSignedZeroInfNanPreserveFloat16() {
    return this.memoryView.getUint32(0x18);
  }
  get shaderSignedZeroInfNanPreserveFloat32() {
    return this.memoryView.getUint32(0x1C);
  }
  get shaderSignedZeroInfNanPreserveFloat64() {
    return this.memoryView.getUint32(0x20);
  }
  get shaderDenormPreserveFloat16() {
    return this.memoryView.getUint32(0x24);
  }
  get shaderDenormPreserveFloat32() {
    return this.memoryView.getUint32(0x28);
  }
  get shaderDenormPreserveFloat64() {
    return this.memoryView.getUint32(0x2C);
  }
  get shaderDenormFlushToZeroFloat16() {
    return this.memoryView.getUint32(0x30);
  }
  get shaderDenormFlushToZeroFloat32() {
    return this.memoryView.getUint32(0x34);
  }
  get shaderDenormFlushToZeroFloat64() {
    return this.memoryView.getUint32(0x38);
  }
  get shaderRoundingModeRTEFloat16() {
    return this.memoryView.getUint32(0x3C);
  }
  get shaderRoundingModeRTEFloat32() {
    return this.memoryView.getUint32(0x40);
  }
  get shaderRoundingModeRTEFloat64() {
    return this.memoryView.getUint32(0x44);
  }
  get shaderRoundingModeRTZFloat16() {
    return this.memoryView.getUint32(0x48);
  }
  get shaderRoundingModeRTZFloat32() {
    return this.memoryView.getUint32(0x4C);
  }
  get shaderRoundingModeRTZFloat64() {
    return this.memoryView.getUint32(0x50);
  }
  
};

VkPhysicalDeviceFloatControlsPropertiesKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceFloatControlsPropertiesKHR.byteLength = 0x58;

VkPhysicalDeviceFloatControlsPropertiesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  separateDenormSettings: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  separateRoundingModeSettings: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  shaderSignedZeroInfNanPreserveFloat16: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  shaderSignedZeroInfNanPreserveFloat32: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  shaderSignedZeroInfNanPreserveFloat64: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  shaderDenormPreserveFloat16: Object.freeze({
    byteOffset: 0x24,
    byteLength: 0x4
  }),
  shaderDenormPreserveFloat32: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x4
  }),
  shaderDenormPreserveFloat64: Object.freeze({
    byteOffset: 0x2C,
    byteLength: 0x4
  }),
  shaderDenormFlushToZeroFloat16: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  shaderDenormFlushToZeroFloat32: Object.freeze({
    byteOffset: 0x34,
    byteLength: 0x4
  }),
  shaderDenormFlushToZeroFloat64: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x4
  }),
  shaderRoundingModeRTEFloat16: Object.freeze({
    byteOffset: 0x3C,
    byteLength: 0x4
  }),
  shaderRoundingModeRTEFloat32: Object.freeze({
    byteOffset: 0x40,
    byteLength: 0x4
  }),
  shaderRoundingModeRTEFloat64: Object.freeze({
    byteOffset: 0x44,
    byteLength: 0x4
  }),
  shaderRoundingModeRTZFloat16: Object.freeze({
    byteOffset: 0x48,
    byteLength: 0x4
  }),
  shaderRoundingModeRTZFloat32: Object.freeze({
    byteOffset: 0x4C,
    byteLength: 0x4
  }),
  shaderRoundingModeRTZFloat64: Object.freeze({
    byteOffset: 0x50,
    byteLength: 0x4
  }),
});
/** VkShaderResourceUsageAMD **/
class VkShaderResourceUsageAMD {
  constructor(opts) {
    
    
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkShaderResourceUsageAMD.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      
    }
  }
  get numUsedVgprs() {
    return this.memoryView.getUint32(0x0);
  }
  get numUsedSgprs() {
    return this.memoryView.getUint32(0x4);
  }
  get ldsSizePerLocalWorkGroup() {
    return this.memoryView.getUint32(0x8);
  }
  get ldsUsageSizeInBytes() {
    return this.memoryView.getBigInt64(0x10);
  }
  get scratchMemUsageInBytes() {
    return this.memoryView.getBigInt64(0x18);
  }
  
};

VkShaderResourceUsageAMD.prototype.flush = function flush() {
  
  return true;
};

VkShaderResourceUsageAMD.byteLength = 0x20;

VkShaderResourceUsageAMD.memoryLayout = Object.freeze({
  numUsedVgprs: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  numUsedSgprs: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  ldsSizePerLocalWorkGroup: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
  ldsUsageSizeInBytes: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  scratchMemUsageInBytes: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkShaderStatisticsInfoAMD **/
class VkShaderStatisticsInfoAMD {
  constructor(opts) {
    
    this._resourceUsage = null;
    
    
    
    
    this._computeWorkGroupSize = null;
    this.memoryBuffer = new ArrayBuffer(VkShaderStatisticsInfoAMD.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      
    }
  }
  get shaderStageMask() {
    return this.memoryView.getInt32(0x0);
  }
  get resourceUsage() {
    return this._resourceUsage;
  }
  get numPhysicalVgprs() {
    return this.memoryView.getUint32(0x28);
  }
  get numPhysicalSgprs() {
    return this.memoryView.getUint32(0x2C);
  }
  get numAvailableVgprs() {
    return this.memoryView.getUint32(0x30);
  }
  get numAvailableSgprs() {
    return this.memoryView.getUint32(0x34);
  }
  get computeWorkGroupSize() {
    return this._computeWorkGroupSize;
  }
  
};

VkShaderStatisticsInfoAMD.prototype.flush = function flush() {
  
  
  
  
  if (this._computeWorkGroupSize !== null) {
    let array = this._computeWorkGroupSize;
    for (let ii = 0; ii < array.length; ++ii) {
      this.memoryView.setUint32(0x38, array[ii]);
    };
  }
  
  return true;
};

VkShaderStatisticsInfoAMD.byteLength = 0x48;

VkShaderStatisticsInfoAMD.memoryLayout = Object.freeze({
  shaderStageMask: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  resourceUsage: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x20
  }),
  numPhysicalVgprs: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x4
  }),
  numPhysicalSgprs: Object.freeze({
    byteOffset: 0x2C,
    byteLength: 0x4
  }),
  numAvailableVgprs: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  numAvailableSgprs: Object.freeze({
    byteOffset: 0x34,
    byteLength: 0x4
  }),
  computeWorkGroupSize: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0xC
  }),
});
/** VkDeviceQueueGlobalPriorityCreateInfoEXT **/
class VkDeviceQueueGlobalPriorityCreateInfoEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkDeviceQueueGlobalPriorityCreateInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.globalPriority !== void 0) this.globalPriority = opts.globalPriority;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get globalPriority() {
    return this.memoryView.getInt32(0x10);
  }
  set globalPriority(value) {
    this.memoryView.setInt32(0x10, value);
  }
  
};

VkDeviceQueueGlobalPriorityCreateInfoEXT.prototype.flush = function flush() {
  
  
  
  return true;
};

VkDeviceQueueGlobalPriorityCreateInfoEXT.byteLength = 0x18;

VkDeviceQueueGlobalPriorityCreateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  globalPriority: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkDebugUtilsObjectNameInfoEXT **/
class VkDebugUtilsObjectNameInfoEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    
    this._pObjectName = null;
    this.memoryBuffer = new ArrayBuffer(VkDebugUtilsObjectNameInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.objectType !== void 0) this.objectType = opts.objectType;
      if (opts.objectHandle !== void 0) this.objectHandle = opts.objectHandle;
      if (opts.pObjectName !== void 0) this.pObjectName = opts.pObjectName;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get objectType() {
    return this.memoryView.getInt32(0x10);
  }
  set objectType(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get objectHandle() {
    return this.memoryView.getBigUint64(0x18);
  }
  set objectHandle(value) {
    this.memoryView.setBigUint64(0x18, value);
  }
  get pObjectName() {
    if (this._pObjectName !== null) {
      let str = textDecoder.decode(this._pObjectName);
      return str.substr(0, str.length - 1);
    } else {
      return null;
    }
  }
  set pObjectName(value) {
    if (value !== null && value.constructor === String) {
      this._pObjectName = textEncoder.encode(value + String.fromCharCode(0x0)).buffer;
      this.memoryView.setBigInt64(0x20, getAddressFromArrayBuffer(this._pObjectName));
    } else if (value === null) {
      this._pObjectName = null;
      this.memoryView.setBigInt64(0x20, 0n);
    } else {
      throw new TypeError("Invalid type for 'VkDebugUtilsObjectNameInfoEXT.pObjectName': Expected 'String' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkDebugUtilsObjectNameInfoEXT.prototype.flush = function flush() {
  
  
  
  return true;
};

VkDebugUtilsObjectNameInfoEXT.byteLength = 0x28;

VkDebugUtilsObjectNameInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  objectType: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  objectHandle: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  pObjectName: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
});
/** VkDebugUtilsObjectTagInfoEXT **/
class VkDebugUtilsObjectTagInfoEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    
    
    
    this._pTag = null;
    this.memoryBuffer = new ArrayBuffer(VkDebugUtilsObjectTagInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.objectType !== void 0) this.objectType = opts.objectType;
      if (opts.objectHandle !== void 0) this.objectHandle = opts.objectHandle;
      if (opts.tagName !== void 0) this.tagName = opts.tagName;
      if (opts.tagSize !== void 0) this.tagSize = opts.tagSize;
      if (opts.pTag !== void 0) this.pTag = opts.pTag;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get objectType() {
    return this.memoryView.getInt32(0x10);
  }
  set objectType(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get objectHandle() {
    return this.memoryView.getBigUint64(0x18);
  }
  set objectHandle(value) {
    this.memoryView.setBigUint64(0x18, value);
  }
  get tagName() {
    return this.memoryView.getBigUint64(0x20);
  }
  set tagName(value) {
    this.memoryView.setBigUint64(0x20, value);
  }
  get tagSize() {
    return this.memoryView.getBigInt64(0x28);
  }
  set tagSize(value) {
    this.memoryView.setBigInt64(0x28, value);
  }
  get pTag() {
    return this._pTag;
  }
  set pTag(value) {
    if (value !== null && value.constructor === ArrayBuffer) {
      this._pTag = value;
      this.memoryView.setBigInt64(0x30, getAddressFromArrayBuffer(value.buffer));
    } else if (value === null) {
      this._pTag = null;
    } else {
      throw new TypeError("Invalid type for 'VkDebugUtilsObjectTagInfoEXT.pTag': Expected 'ArrayBuffer' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkDebugUtilsObjectTagInfoEXT.prototype.flush = function flush() {
  
  
  
  return true;
};

VkDebugUtilsObjectTagInfoEXT.byteLength = 0x38;

VkDebugUtilsObjectTagInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  objectType: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  objectHandle: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  tagName: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
  tagSize: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
  pTag: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x8
  }),
});
/** VkDebugUtilsLabelEXT **/
class VkDebugUtilsLabelEXT {
  constructor(opts) {
    
    this._pNext = null;
    this._pLabelName = null;
    this._color = null;
    this.memoryBuffer = new ArrayBuffer(VkDebugUtilsLabelEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.pLabelName !== void 0) this.pLabelName = opts.pLabelName;
      if (opts.color !== void 0) this.color = opts.color;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get pLabelName() {
    if (this._pLabelName !== null) {
      let str = textDecoder.decode(this._pLabelName);
      return str.substr(0, str.length - 1);
    } else {
      return null;
    }
  }
  set pLabelName(value) {
    if (value !== null && value.constructor === String) {
      this._pLabelName = textEncoder.encode(value + String.fromCharCode(0x0)).buffer;
      this.memoryView.setBigInt64(0x10, getAddressFromArrayBuffer(this._pLabelName));
    } else if (value === null) {
      this._pLabelName = null;
      this.memoryView.setBigInt64(0x10, 0n);
    } else {
      throw new TypeError("Invalid type for 'VkDebugUtilsLabelEXT.pLabelName': Expected 'String' but got '" + value.constructor.name + "'");
    }
  }
  get color() {
    return this._color;
  }
  set color(value) {
    if (value !== null && value.constructor === Array) {
      this._color = value;
    } else if (value === null) {
      this._color = null;
    } else {
      throw new TypeError("Invalid type for 'VkDebugUtilsLabelEXT.color': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkDebugUtilsLabelEXT.prototype.flush = function flush() {
  
  
  
  
  if (this._color !== null) {
    let array = this._color;
    for (let ii = 0; ii < array.length; ++ii) {
      this.memoryView.setFloat32(0x18, array[ii]);
    };
  }
  
  return true;
};

VkDebugUtilsLabelEXT.byteLength = 0x28;

VkDebugUtilsLabelEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  pLabelName: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  color: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x10
  }),
});
/** VkDebugUtilsMessengerCreateInfoEXT **/
class VkDebugUtilsMessengerCreateInfoEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    
    
    this._pUserData = null;
    this.memoryBuffer = new ArrayBuffer(VkDebugUtilsMessengerCreateInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.messageSeverity !== void 0) this.messageSeverity = opts.messageSeverity;
      if (opts.messageType !== void 0) this.messageType = opts.messageType;
      if (opts.pUserData !== void 0) this.pUserData = opts.pUserData;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get flags() {
    return this.memoryView.getInt32(0x10);
  }
  set flags(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get messageSeverity() {
    return this.memoryView.getInt32(0x14);
  }
  set messageSeverity(value) {
    this.memoryView.setInt32(0x14, value);
  }
  get messageType() {
    return this.memoryView.getInt32(0x18);
  }
  set messageType(value) {
    this.memoryView.setInt32(0x18, value);
  }
  get pUserData() {
    return this._pUserData;
  }
  set pUserData(value) {
    if (value !== null && value.constructor === ArrayBuffer) {
      this._pUserData = value;
      this.memoryView.setBigInt64(0x28, getAddressFromArrayBuffer(value.buffer));
    } else if (value === null) {
      this._pUserData = null;
    } else {
      throw new TypeError("Invalid type for 'VkDebugUtilsMessengerCreateInfoEXT.pUserData': Expected 'ArrayBuffer' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkDebugUtilsMessengerCreateInfoEXT.prototype.flush = function flush() {
  
  
  
  return true;
};

VkDebugUtilsMessengerCreateInfoEXT.byteLength = 0x30;

VkDebugUtilsMessengerCreateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  messageSeverity: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  messageType: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  pUserData: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
});
/** VkDebugUtilsMessengerCallbackDataEXT **/
class VkDebugUtilsMessengerCallbackDataEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    this._pMessageIdName = null;
    
    this._pMessage = null;
    
    this._pQueueLabels = null;
    this._pQueueLabelsNative = null;
    
    this._pCmdBufLabels = null;
    this._pCmdBufLabelsNative = null;
    
    this._pObjects = null;
    this._pObjectsNative = null;
    this.memoryBuffer = new ArrayBuffer(VkDebugUtilsMessengerCallbackDataEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.pMessageIdName !== void 0) this.pMessageIdName = opts.pMessageIdName;
      if (opts.messageIdNumber !== void 0) this.messageIdNumber = opts.messageIdNumber;
      if (opts.pMessage !== void 0) this.pMessage = opts.pMessage;
      if (opts.queueLabelCount !== void 0) this.queueLabelCount = opts.queueLabelCount;
      if (opts.pQueueLabels !== void 0) this.pQueueLabels = opts.pQueueLabels;
      if (opts.cmdBufLabelCount !== void 0) this.cmdBufLabelCount = opts.cmdBufLabelCount;
      if (opts.pCmdBufLabels !== void 0) this.pCmdBufLabels = opts.pCmdBufLabels;
      if (opts.objectCount !== void 0) this.objectCount = opts.objectCount;
      if (opts.pObjects !== void 0) this.pObjects = opts.pObjects;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get flags() {
    return this.memoryView.getInt32(0x10);
  }
  set flags(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get pMessageIdName() {
    if (this._pMessageIdName !== null) {
      let str = textDecoder.decode(this._pMessageIdName);
      return str.substr(0, str.length - 1);
    } else {
      return null;
    }
  }
  set pMessageIdName(value) {
    if (value !== null && value.constructor === String) {
      this._pMessageIdName = textEncoder.encode(value + String.fromCharCode(0x0)).buffer;
      this.memoryView.setBigInt64(0x18, getAddressFromArrayBuffer(this._pMessageIdName));
    } else if (value === null) {
      this._pMessageIdName = null;
      this.memoryView.setBigInt64(0x18, 0n);
    } else {
      throw new TypeError("Invalid type for 'VkDebugUtilsMessengerCallbackDataEXT.pMessageIdName': Expected 'String' but got '" + value.constructor.name + "'");
    }
  }
  get messageIdNumber() {
    return this.memoryView.getInt32(0x20);
  }
  set messageIdNumber(value) {
    this.memoryView.setInt32(0x20, value);
  }
  get pMessage() {
    if (this._pMessage !== null) {
      let str = textDecoder.decode(this._pMessage);
      return str.substr(0, str.length - 1);
    } else {
      return null;
    }
  }
  set pMessage(value) {
    if (value !== null && value.constructor === String) {
      this._pMessage = textEncoder.encode(value + String.fromCharCode(0x0)).buffer;
      this.memoryView.setBigInt64(0x28, getAddressFromArrayBuffer(this._pMessage));
    } else if (value === null) {
      this._pMessage = null;
      this.memoryView.setBigInt64(0x28, 0n);
    } else {
      throw new TypeError("Invalid type for 'VkDebugUtilsMessengerCallbackDataEXT.pMessage': Expected 'String' but got '" + value.constructor.name + "'");
    }
  }
  get queueLabelCount() {
    return this.memoryView.getUint32(0x30);
  }
  set queueLabelCount(value) {
    this.memoryView.setUint32(0x30, value);
  }
  get pQueueLabels() {
    return this._pQueueLabels;
  }
  set pQueueLabels(value) {
    if (value !== null && value.constructor === Array) {
      this._pQueueLabels = value;
    } else if (value === null) {
      this._pQueueLabels = null;
    } else {
      throw new TypeError("Invalid type for 'VkDebugUtilsMessengerCallbackDataEXT.pQueueLabels': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get cmdBufLabelCount() {
    return this.memoryView.getUint32(0x40);
  }
  set cmdBufLabelCount(value) {
    this.memoryView.setUint32(0x40, value);
  }
  get pCmdBufLabels() {
    return this._pCmdBufLabels;
  }
  set pCmdBufLabels(value) {
    if (value !== null && value.constructor === Array) {
      this._pCmdBufLabels = value;
    } else if (value === null) {
      this._pCmdBufLabels = null;
    } else {
      throw new TypeError("Invalid type for 'VkDebugUtilsMessengerCallbackDataEXT.pCmdBufLabels': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get objectCount() {
    return this.memoryView.getUint32(0x50);
  }
  set objectCount(value) {
    this.memoryView.setUint32(0x50, value);
  }
  get pObjects() {
    return this._pObjects;
  }
  set pObjects(value) {
    if (value !== null && value.constructor === Array) {
      this._pObjects = value;
    } else if (value === null) {
      this._pObjects = null;
    } else {
      throw new TypeError("Invalid type for 'VkDebugUtilsMessengerCallbackDataEXT.pObjects': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkDebugUtilsMessengerCallbackDataEXT.prototype.flush = function flush() {
  
  
  
  
  if (this._pQueueLabels !== null) {
    let nativeArray = new NativeObjectArray(this._pQueueLabels);
    this._pQueueLabelsNative = nativeArray;
    this.memoryView.setBigInt64(0x38, nativeArray.address);
  }
  
  
  if (this._pCmdBufLabels !== null) {
    let nativeArray = new NativeObjectArray(this._pCmdBufLabels);
    this._pCmdBufLabelsNative = nativeArray;
    this.memoryView.setBigInt64(0x48, nativeArray.address);
  }
  
  
  if (this._pObjects !== null) {
    let nativeArray = new NativeObjectArray(this._pObjects);
    this._pObjectsNative = nativeArray;
    this.memoryView.setBigInt64(0x58, nativeArray.address);
  }
  
  return true;
};

VkDebugUtilsMessengerCallbackDataEXT.byteLength = 0x60;

VkDebugUtilsMessengerCallbackDataEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pMessageIdName: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  messageIdNumber: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  pMessage: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
  queueLabelCount: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  pQueueLabels: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x8
  }),
  cmdBufLabelCount: Object.freeze({
    byteOffset: 0x40,
    byteLength: 0x4
  }),
  pCmdBufLabels: Object.freeze({
    byteOffset: 0x48,
    byteLength: 0x8
  }),
  objectCount: Object.freeze({
    byteOffset: 0x50,
    byteLength: 0x4
  }),
  pObjects: Object.freeze({
    byteOffset: 0x58,
    byteLength: 0x8
  }),
});
/** VkImportMemoryHostPointerInfoEXT **/
class VkImportMemoryHostPointerInfoEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    this._pHostPointer = null;
    this.memoryBuffer = new ArrayBuffer(VkImportMemoryHostPointerInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      if (opts.pHostPointer !== void 0) this.pHostPointer = opts.pHostPointer;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get handleType() {
    return this.memoryView.getInt32(0x10);
  }
  set handleType(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get pHostPointer() {
    return this._pHostPointer;
  }
  set pHostPointer(value) {
    if (value !== null && value.constructor === ArrayBuffer) {
      this._pHostPointer = value;
      this.memoryView.setBigInt64(0x18, getAddressFromArrayBuffer(value.buffer));
    } else if (value === null) {
      this._pHostPointer = null;
    } else {
      throw new TypeError("Invalid type for 'VkImportMemoryHostPointerInfoEXT.pHostPointer': Expected 'ArrayBuffer' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkImportMemoryHostPointerInfoEXT.prototype.flush = function flush() {
  
  
  
  return true;
};

VkImportMemoryHostPointerInfoEXT.byteLength = 0x20;

VkImportMemoryHostPointerInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  handleType: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pHostPointer: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkMemoryHostPointerPropertiesEXT **/
class VkMemoryHostPointerPropertiesEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkMemoryHostPointerPropertiesEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get memoryTypeBits() {
    return this.memoryView.getUint32(0x10);
  }
  
};

VkMemoryHostPointerPropertiesEXT.prototype.flush = function flush() {
  
  
  
  return true;
};

VkMemoryHostPointerPropertiesEXT.byteLength = 0x18;

VkMemoryHostPointerPropertiesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  memoryTypeBits: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceExternalMemoryHostPropertiesEXT **/
class VkPhysicalDeviceExternalMemoryHostPropertiesEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceExternalMemoryHostPropertiesEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get minImportedHostPointerAlignment() {
    return this.memoryView.getBigUint64(0x10);
  }
  
};

VkPhysicalDeviceExternalMemoryHostPropertiesEXT.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceExternalMemoryHostPropertiesEXT.byteLength = 0x18;

VkPhysicalDeviceExternalMemoryHostPropertiesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  minImportedHostPointerAlignment: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
});
/** VkPhysicalDeviceConservativeRasterizationPropertiesEXT **/
class VkPhysicalDeviceConservativeRasterizationPropertiesEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    
    
    
    
    
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceConservativeRasterizationPropertiesEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get primitiveOverestimationSize() {
    return this.memoryView.getFloat32(0x10);
  }
  get maxExtraPrimitiveOverestimationSize() {
    return this.memoryView.getFloat32(0x14);
  }
  get extraPrimitiveOverestimationSizeGranularity() {
    return this.memoryView.getFloat32(0x18);
  }
  get primitiveUnderestimation() {
    return this.memoryView.getUint32(0x1C);
  }
  get conservativePointAndLineRasterization() {
    return this.memoryView.getUint32(0x20);
  }
  get degenerateTrianglesRasterized() {
    return this.memoryView.getUint32(0x24);
  }
  get degenerateLinesRasterized() {
    return this.memoryView.getUint32(0x28);
  }
  get fullyCoveredFragmentShaderInputVariable() {
    return this.memoryView.getUint32(0x2C);
  }
  get conservativeRasterizationPostDepthCoverage() {
    return this.memoryView.getUint32(0x30);
  }
  
};

VkPhysicalDeviceConservativeRasterizationPropertiesEXT.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceConservativeRasterizationPropertiesEXT.byteLength = 0x38;

VkPhysicalDeviceConservativeRasterizationPropertiesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  primitiveOverestimationSize: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  maxExtraPrimitiveOverestimationSize: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  extraPrimitiveOverestimationSizeGranularity: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  primitiveUnderestimation: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  conservativePointAndLineRasterization: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  degenerateTrianglesRasterized: Object.freeze({
    byteOffset: 0x24,
    byteLength: 0x4
  }),
  degenerateLinesRasterized: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x4
  }),
  fullyCoveredFragmentShaderInputVariable: Object.freeze({
    byteOffset: 0x2C,
    byteLength: 0x4
  }),
  conservativeRasterizationPostDepthCoverage: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
});
/** VkCalibratedTimestampInfoEXT **/
class VkCalibratedTimestampInfoEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkCalibratedTimestampInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.timeDomain !== void 0) this.timeDomain = opts.timeDomain;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get timeDomain() {
    return this.memoryView.getInt32(0x10);
  }
  set timeDomain(value) {
    this.memoryView.setInt32(0x10, value);
  }
  
};

VkCalibratedTimestampInfoEXT.prototype.flush = function flush() {
  
  
  
  return true;
};

VkCalibratedTimestampInfoEXT.byteLength = 0x18;

VkCalibratedTimestampInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  timeDomain: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceShaderCorePropertiesAMD **/
class VkPhysicalDeviceShaderCorePropertiesAMD {
  constructor(opts) {
    
    this._pNext = null;
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceShaderCorePropertiesAMD.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get shaderEngineCount() {
    return this.memoryView.getUint32(0x10);
  }
  get shaderArraysPerEngineCount() {
    return this.memoryView.getUint32(0x14);
  }
  get computeUnitsPerShaderArray() {
    return this.memoryView.getUint32(0x18);
  }
  get simdPerComputeUnit() {
    return this.memoryView.getUint32(0x1C);
  }
  get wavefrontsPerSimd() {
    return this.memoryView.getUint32(0x20);
  }
  get wavefrontSize() {
    return this.memoryView.getUint32(0x24);
  }
  get sgprsPerSimd() {
    return this.memoryView.getUint32(0x28);
  }
  get minSgprAllocation() {
    return this.memoryView.getUint32(0x2C);
  }
  get maxSgprAllocation() {
    return this.memoryView.getUint32(0x30);
  }
  get sgprAllocationGranularity() {
    return this.memoryView.getUint32(0x34);
  }
  get vgprsPerSimd() {
    return this.memoryView.getUint32(0x38);
  }
  get minVgprAllocation() {
    return this.memoryView.getUint32(0x3C);
  }
  get maxVgprAllocation() {
    return this.memoryView.getUint32(0x40);
  }
  get vgprAllocationGranularity() {
    return this.memoryView.getUint32(0x44);
  }
  
};

VkPhysicalDeviceShaderCorePropertiesAMD.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceShaderCorePropertiesAMD.byteLength = 0x48;

VkPhysicalDeviceShaderCorePropertiesAMD.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  shaderEngineCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  shaderArraysPerEngineCount: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  computeUnitsPerShaderArray: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  simdPerComputeUnit: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  wavefrontsPerSimd: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  wavefrontSize: Object.freeze({
    byteOffset: 0x24,
    byteLength: 0x4
  }),
  sgprsPerSimd: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x4
  }),
  minSgprAllocation: Object.freeze({
    byteOffset: 0x2C,
    byteLength: 0x4
  }),
  maxSgprAllocation: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  sgprAllocationGranularity: Object.freeze({
    byteOffset: 0x34,
    byteLength: 0x4
  }),
  vgprsPerSimd: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x4
  }),
  minVgprAllocation: Object.freeze({
    byteOffset: 0x3C,
    byteLength: 0x4
  }),
  maxVgprAllocation: Object.freeze({
    byteOffset: 0x40,
    byteLength: 0x4
  }),
  vgprAllocationGranularity: Object.freeze({
    byteOffset: 0x44,
    byteLength: 0x4
  }),
});
/** VkPipelineRasterizationConservativeStateCreateInfoEXT **/
class VkPipelineRasterizationConservativeStateCreateInfoEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkPipelineRasterizationConservativeStateCreateInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.conservativeRasterizationMode !== void 0) this.conservativeRasterizationMode = opts.conservativeRasterizationMode;
      if (opts.extraPrimitiveOverestimationSize !== void 0) this.extraPrimitiveOverestimationSize = opts.extraPrimitiveOverestimationSize;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get flags() {
    return this.memoryView.getInt32(0x10);
  }
  set flags(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get conservativeRasterizationMode() {
    return this.memoryView.getInt32(0x14);
  }
  set conservativeRasterizationMode(value) {
    this.memoryView.setInt32(0x14, value);
  }
  get extraPrimitiveOverestimationSize() {
    return this.memoryView.getFloat32(0x18);
  }
  set extraPrimitiveOverestimationSize(value) {
    this.memoryView.setFloat32(0x18, value);
  }
  
};

VkPipelineRasterizationConservativeStateCreateInfoEXT.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPipelineRasterizationConservativeStateCreateInfoEXT.byteLength = 0x20;

VkPipelineRasterizationConservativeStateCreateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  conservativeRasterizationMode: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  extraPrimitiveOverestimationSize: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceDescriptorIndexingFeaturesEXT **/
class VkPhysicalDeviceDescriptorIndexingFeaturesEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceDescriptorIndexingFeaturesEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.shaderInputAttachmentArrayDynamicIndexing !== void 0) this.shaderInputAttachmentArrayDynamicIndexing = opts.shaderInputAttachmentArrayDynamicIndexing;
      if (opts.shaderUniformTexelBufferArrayDynamicIndexing !== void 0) this.shaderUniformTexelBufferArrayDynamicIndexing = opts.shaderUniformTexelBufferArrayDynamicIndexing;
      if (opts.shaderStorageTexelBufferArrayDynamicIndexing !== void 0) this.shaderStorageTexelBufferArrayDynamicIndexing = opts.shaderStorageTexelBufferArrayDynamicIndexing;
      if (opts.shaderUniformBufferArrayNonUniformIndexing !== void 0) this.shaderUniformBufferArrayNonUniformIndexing = opts.shaderUniformBufferArrayNonUniformIndexing;
      if (opts.shaderSampledImageArrayNonUniformIndexing !== void 0) this.shaderSampledImageArrayNonUniformIndexing = opts.shaderSampledImageArrayNonUniformIndexing;
      if (opts.shaderStorageBufferArrayNonUniformIndexing !== void 0) this.shaderStorageBufferArrayNonUniformIndexing = opts.shaderStorageBufferArrayNonUniformIndexing;
      if (opts.shaderStorageImageArrayNonUniformIndexing !== void 0) this.shaderStorageImageArrayNonUniformIndexing = opts.shaderStorageImageArrayNonUniformIndexing;
      if (opts.shaderInputAttachmentArrayNonUniformIndexing !== void 0) this.shaderInputAttachmentArrayNonUniformIndexing = opts.shaderInputAttachmentArrayNonUniformIndexing;
      if (opts.shaderUniformTexelBufferArrayNonUniformIndexing !== void 0) this.shaderUniformTexelBufferArrayNonUniformIndexing = opts.shaderUniformTexelBufferArrayNonUniformIndexing;
      if (opts.shaderStorageTexelBufferArrayNonUniformIndexing !== void 0) this.shaderStorageTexelBufferArrayNonUniformIndexing = opts.shaderStorageTexelBufferArrayNonUniformIndexing;
      if (opts.descriptorBindingUniformBufferUpdateAfterBind !== void 0) this.descriptorBindingUniformBufferUpdateAfterBind = opts.descriptorBindingUniformBufferUpdateAfterBind;
      if (opts.descriptorBindingSampledImageUpdateAfterBind !== void 0) this.descriptorBindingSampledImageUpdateAfterBind = opts.descriptorBindingSampledImageUpdateAfterBind;
      if (opts.descriptorBindingStorageImageUpdateAfterBind !== void 0) this.descriptorBindingStorageImageUpdateAfterBind = opts.descriptorBindingStorageImageUpdateAfterBind;
      if (opts.descriptorBindingStorageBufferUpdateAfterBind !== void 0) this.descriptorBindingStorageBufferUpdateAfterBind = opts.descriptorBindingStorageBufferUpdateAfterBind;
      if (opts.descriptorBindingUniformTexelBufferUpdateAfterBind !== void 0) this.descriptorBindingUniformTexelBufferUpdateAfterBind = opts.descriptorBindingUniformTexelBufferUpdateAfterBind;
      if (opts.descriptorBindingStorageTexelBufferUpdateAfterBind !== void 0) this.descriptorBindingStorageTexelBufferUpdateAfterBind = opts.descriptorBindingStorageTexelBufferUpdateAfterBind;
      if (opts.descriptorBindingUpdateUnusedWhilePending !== void 0) this.descriptorBindingUpdateUnusedWhilePending = opts.descriptorBindingUpdateUnusedWhilePending;
      if (opts.descriptorBindingPartiallyBound !== void 0) this.descriptorBindingPartiallyBound = opts.descriptorBindingPartiallyBound;
      if (opts.descriptorBindingVariableDescriptorCount !== void 0) this.descriptorBindingVariableDescriptorCount = opts.descriptorBindingVariableDescriptorCount;
      if (opts.runtimeDescriptorArray !== void 0) this.runtimeDescriptorArray = opts.runtimeDescriptorArray;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get shaderInputAttachmentArrayDynamicIndexing() {
    return this.memoryView.getUint32(0x10);
  }
  set shaderInputAttachmentArrayDynamicIndexing(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get shaderUniformTexelBufferArrayDynamicIndexing() {
    return this.memoryView.getUint32(0x14);
  }
  set shaderUniformTexelBufferArrayDynamicIndexing(value) {
    this.memoryView.setUint32(0x14, value);
  }
  get shaderStorageTexelBufferArrayDynamicIndexing() {
    return this.memoryView.getUint32(0x18);
  }
  set shaderStorageTexelBufferArrayDynamicIndexing(value) {
    this.memoryView.setUint32(0x18, value);
  }
  get shaderUniformBufferArrayNonUniformIndexing() {
    return this.memoryView.getUint32(0x1C);
  }
  set shaderUniformBufferArrayNonUniformIndexing(value) {
    this.memoryView.setUint32(0x1C, value);
  }
  get shaderSampledImageArrayNonUniformIndexing() {
    return this.memoryView.getUint32(0x20);
  }
  set shaderSampledImageArrayNonUniformIndexing(value) {
    this.memoryView.setUint32(0x20, value);
  }
  get shaderStorageBufferArrayNonUniformIndexing() {
    return this.memoryView.getUint32(0x24);
  }
  set shaderStorageBufferArrayNonUniformIndexing(value) {
    this.memoryView.setUint32(0x24, value);
  }
  get shaderStorageImageArrayNonUniformIndexing() {
    return this.memoryView.getUint32(0x28);
  }
  set shaderStorageImageArrayNonUniformIndexing(value) {
    this.memoryView.setUint32(0x28, value);
  }
  get shaderInputAttachmentArrayNonUniformIndexing() {
    return this.memoryView.getUint32(0x2C);
  }
  set shaderInputAttachmentArrayNonUniformIndexing(value) {
    this.memoryView.setUint32(0x2C, value);
  }
  get shaderUniformTexelBufferArrayNonUniformIndexing() {
    return this.memoryView.getUint32(0x30);
  }
  set shaderUniformTexelBufferArrayNonUniformIndexing(value) {
    this.memoryView.setUint32(0x30, value);
  }
  get shaderStorageTexelBufferArrayNonUniformIndexing() {
    return this.memoryView.getUint32(0x34);
  }
  set shaderStorageTexelBufferArrayNonUniformIndexing(value) {
    this.memoryView.setUint32(0x34, value);
  }
  get descriptorBindingUniformBufferUpdateAfterBind() {
    return this.memoryView.getUint32(0x38);
  }
  set descriptorBindingUniformBufferUpdateAfterBind(value) {
    this.memoryView.setUint32(0x38, value);
  }
  get descriptorBindingSampledImageUpdateAfterBind() {
    return this.memoryView.getUint32(0x3C);
  }
  set descriptorBindingSampledImageUpdateAfterBind(value) {
    this.memoryView.setUint32(0x3C, value);
  }
  get descriptorBindingStorageImageUpdateAfterBind() {
    return this.memoryView.getUint32(0x40);
  }
  set descriptorBindingStorageImageUpdateAfterBind(value) {
    this.memoryView.setUint32(0x40, value);
  }
  get descriptorBindingStorageBufferUpdateAfterBind() {
    return this.memoryView.getUint32(0x44);
  }
  set descriptorBindingStorageBufferUpdateAfterBind(value) {
    this.memoryView.setUint32(0x44, value);
  }
  get descriptorBindingUniformTexelBufferUpdateAfterBind() {
    return this.memoryView.getUint32(0x48);
  }
  set descriptorBindingUniformTexelBufferUpdateAfterBind(value) {
    this.memoryView.setUint32(0x48, value);
  }
  get descriptorBindingStorageTexelBufferUpdateAfterBind() {
    return this.memoryView.getUint32(0x4C);
  }
  set descriptorBindingStorageTexelBufferUpdateAfterBind(value) {
    this.memoryView.setUint32(0x4C, value);
  }
  get descriptorBindingUpdateUnusedWhilePending() {
    return this.memoryView.getUint32(0x50);
  }
  set descriptorBindingUpdateUnusedWhilePending(value) {
    this.memoryView.setUint32(0x50, value);
  }
  get descriptorBindingPartiallyBound() {
    return this.memoryView.getUint32(0x54);
  }
  set descriptorBindingPartiallyBound(value) {
    this.memoryView.setUint32(0x54, value);
  }
  get descriptorBindingVariableDescriptorCount() {
    return this.memoryView.getUint32(0x58);
  }
  set descriptorBindingVariableDescriptorCount(value) {
    this.memoryView.setUint32(0x58, value);
  }
  get runtimeDescriptorArray() {
    return this.memoryView.getUint32(0x5C);
  }
  set runtimeDescriptorArray(value) {
    this.memoryView.setUint32(0x5C, value);
  }
  
};

VkPhysicalDeviceDescriptorIndexingFeaturesEXT.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceDescriptorIndexingFeaturesEXT.byteLength = 0x60;

VkPhysicalDeviceDescriptorIndexingFeaturesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  shaderInputAttachmentArrayDynamicIndexing: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  shaderUniformTexelBufferArrayDynamicIndexing: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  shaderStorageTexelBufferArrayDynamicIndexing: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  shaderUniformBufferArrayNonUniformIndexing: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  shaderSampledImageArrayNonUniformIndexing: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  shaderStorageBufferArrayNonUniformIndexing: Object.freeze({
    byteOffset: 0x24,
    byteLength: 0x4
  }),
  shaderStorageImageArrayNonUniformIndexing: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x4
  }),
  shaderInputAttachmentArrayNonUniformIndexing: Object.freeze({
    byteOffset: 0x2C,
    byteLength: 0x4
  }),
  shaderUniformTexelBufferArrayNonUniformIndexing: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  shaderStorageTexelBufferArrayNonUniformIndexing: Object.freeze({
    byteOffset: 0x34,
    byteLength: 0x4
  }),
  descriptorBindingUniformBufferUpdateAfterBind: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x4
  }),
  descriptorBindingSampledImageUpdateAfterBind: Object.freeze({
    byteOffset: 0x3C,
    byteLength: 0x4
  }),
  descriptorBindingStorageImageUpdateAfterBind: Object.freeze({
    byteOffset: 0x40,
    byteLength: 0x4
  }),
  descriptorBindingStorageBufferUpdateAfterBind: Object.freeze({
    byteOffset: 0x44,
    byteLength: 0x4
  }),
  descriptorBindingUniformTexelBufferUpdateAfterBind: Object.freeze({
    byteOffset: 0x48,
    byteLength: 0x4
  }),
  descriptorBindingStorageTexelBufferUpdateAfterBind: Object.freeze({
    byteOffset: 0x4C,
    byteLength: 0x4
  }),
  descriptorBindingUpdateUnusedWhilePending: Object.freeze({
    byteOffset: 0x50,
    byteLength: 0x4
  }),
  descriptorBindingPartiallyBound: Object.freeze({
    byteOffset: 0x54,
    byteLength: 0x4
  }),
  descriptorBindingVariableDescriptorCount: Object.freeze({
    byteOffset: 0x58,
    byteLength: 0x4
  }),
  runtimeDescriptorArray: Object.freeze({
    byteOffset: 0x5C,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceDescriptorIndexingPropertiesEXT **/
class VkPhysicalDeviceDescriptorIndexingPropertiesEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceDescriptorIndexingPropertiesEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get maxUpdateAfterBindDescriptorsInAllPools() {
    return this.memoryView.getUint32(0x10);
  }
  get shaderUniformBufferArrayNonUniformIndexingNative() {
    return this.memoryView.getUint32(0x14);
  }
  get shaderSampledImageArrayNonUniformIndexingNative() {
    return this.memoryView.getUint32(0x18);
  }
  get shaderStorageBufferArrayNonUniformIndexingNative() {
    return this.memoryView.getUint32(0x1C);
  }
  get shaderStorageImageArrayNonUniformIndexingNative() {
    return this.memoryView.getUint32(0x20);
  }
  get shaderInputAttachmentArrayNonUniformIndexingNative() {
    return this.memoryView.getUint32(0x24);
  }
  get robustBufferAccessUpdateAfterBind() {
    return this.memoryView.getUint32(0x28);
  }
  get quadDivergentImplicitLod() {
    return this.memoryView.getUint32(0x2C);
  }
  get maxPerStageDescriptorUpdateAfterBindSamplers() {
    return this.memoryView.getUint32(0x30);
  }
  get maxPerStageDescriptorUpdateAfterBindUniformBuffers() {
    return this.memoryView.getUint32(0x34);
  }
  get maxPerStageDescriptorUpdateAfterBindStorageBuffers() {
    return this.memoryView.getUint32(0x38);
  }
  get maxPerStageDescriptorUpdateAfterBindSampledImages() {
    return this.memoryView.getUint32(0x3C);
  }
  get maxPerStageDescriptorUpdateAfterBindStorageImages() {
    return this.memoryView.getUint32(0x40);
  }
  get maxPerStageDescriptorUpdateAfterBindInputAttachments() {
    return this.memoryView.getUint32(0x44);
  }
  get maxPerStageUpdateAfterBindResources() {
    return this.memoryView.getUint32(0x48);
  }
  get maxDescriptorSetUpdateAfterBindSamplers() {
    return this.memoryView.getUint32(0x4C);
  }
  get maxDescriptorSetUpdateAfterBindUniformBuffers() {
    return this.memoryView.getUint32(0x50);
  }
  get maxDescriptorSetUpdateAfterBindUniformBuffersDynamic() {
    return this.memoryView.getUint32(0x54);
  }
  get maxDescriptorSetUpdateAfterBindStorageBuffers() {
    return this.memoryView.getUint32(0x58);
  }
  get maxDescriptorSetUpdateAfterBindStorageBuffersDynamic() {
    return this.memoryView.getUint32(0x5C);
  }
  get maxDescriptorSetUpdateAfterBindSampledImages() {
    return this.memoryView.getUint32(0x60);
  }
  get maxDescriptorSetUpdateAfterBindStorageImages() {
    return this.memoryView.getUint32(0x64);
  }
  get maxDescriptorSetUpdateAfterBindInputAttachments() {
    return this.memoryView.getUint32(0x68);
  }
  
};

VkPhysicalDeviceDescriptorIndexingPropertiesEXT.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceDescriptorIndexingPropertiesEXT.byteLength = 0x70;

VkPhysicalDeviceDescriptorIndexingPropertiesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  maxUpdateAfterBindDescriptorsInAllPools: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  shaderUniformBufferArrayNonUniformIndexingNative: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  shaderSampledImageArrayNonUniformIndexingNative: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  shaderStorageBufferArrayNonUniformIndexingNative: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  shaderStorageImageArrayNonUniformIndexingNative: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  shaderInputAttachmentArrayNonUniformIndexingNative: Object.freeze({
    byteOffset: 0x24,
    byteLength: 0x4
  }),
  robustBufferAccessUpdateAfterBind: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x4
  }),
  quadDivergentImplicitLod: Object.freeze({
    byteOffset: 0x2C,
    byteLength: 0x4
  }),
  maxPerStageDescriptorUpdateAfterBindSamplers: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  maxPerStageDescriptorUpdateAfterBindUniformBuffers: Object.freeze({
    byteOffset: 0x34,
    byteLength: 0x4
  }),
  maxPerStageDescriptorUpdateAfterBindStorageBuffers: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x4
  }),
  maxPerStageDescriptorUpdateAfterBindSampledImages: Object.freeze({
    byteOffset: 0x3C,
    byteLength: 0x4
  }),
  maxPerStageDescriptorUpdateAfterBindStorageImages: Object.freeze({
    byteOffset: 0x40,
    byteLength: 0x4
  }),
  maxPerStageDescriptorUpdateAfterBindInputAttachments: Object.freeze({
    byteOffset: 0x44,
    byteLength: 0x4
  }),
  maxPerStageUpdateAfterBindResources: Object.freeze({
    byteOffset: 0x48,
    byteLength: 0x4
  }),
  maxDescriptorSetUpdateAfterBindSamplers: Object.freeze({
    byteOffset: 0x4C,
    byteLength: 0x4
  }),
  maxDescriptorSetUpdateAfterBindUniformBuffers: Object.freeze({
    byteOffset: 0x50,
    byteLength: 0x4
  }),
  maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: Object.freeze({
    byteOffset: 0x54,
    byteLength: 0x4
  }),
  maxDescriptorSetUpdateAfterBindStorageBuffers: Object.freeze({
    byteOffset: 0x58,
    byteLength: 0x4
  }),
  maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: Object.freeze({
    byteOffset: 0x5C,
    byteLength: 0x4
  }),
  maxDescriptorSetUpdateAfterBindSampledImages: Object.freeze({
    byteOffset: 0x60,
    byteLength: 0x4
  }),
  maxDescriptorSetUpdateAfterBindStorageImages: Object.freeze({
    byteOffset: 0x64,
    byteLength: 0x4
  }),
  maxDescriptorSetUpdateAfterBindInputAttachments: Object.freeze({
    byteOffset: 0x68,
    byteLength: 0x4
  }),
});
/** VkDescriptorSetLayoutBindingFlagsCreateInfoEXT **/
class VkDescriptorSetLayoutBindingFlagsCreateInfoEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    this._pBindingFlags = null;
    this.memoryBuffer = new ArrayBuffer(VkDescriptorSetLayoutBindingFlagsCreateInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.bindingCount !== void 0) this.bindingCount = opts.bindingCount;
      if (opts.pBindingFlags !== void 0) this.pBindingFlags = opts.pBindingFlags;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get bindingCount() {
    return this.memoryView.getUint32(0x10);
  }
  set bindingCount(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get pBindingFlags() {
    return this._pBindingFlags;
  }
  set pBindingFlags(value) {
    if (value !== null && value.constructor === Int32Array) {
      this._pBindingFlags = value;
      this.memoryView.setBigInt64(0x18, getAddressFromArrayBuffer(value.buffer));
    } else if (value === null) {
      this._pBindingFlags = null;
    } else {
      throw new TypeError("Invalid type for 'VkDescriptorSetLayoutBindingFlagsCreateInfoEXT.pBindingFlags': Expected 'Int32Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkDescriptorSetLayoutBindingFlagsCreateInfoEXT.prototype.flush = function flush() {
  
  
  
  return true;
};

VkDescriptorSetLayoutBindingFlagsCreateInfoEXT.byteLength = 0x20;

VkDescriptorSetLayoutBindingFlagsCreateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  bindingCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pBindingFlags: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkDescriptorSetVariableDescriptorCountAllocateInfoEXT **/
class VkDescriptorSetVariableDescriptorCountAllocateInfoEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    this._pDescriptorCounts = null;
    this.memoryBuffer = new ArrayBuffer(VkDescriptorSetVariableDescriptorCountAllocateInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.descriptorSetCount !== void 0) this.descriptorSetCount = opts.descriptorSetCount;
      if (opts.pDescriptorCounts !== void 0) this.pDescriptorCounts = opts.pDescriptorCounts;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get descriptorSetCount() {
    return this.memoryView.getUint32(0x10);
  }
  set descriptorSetCount(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get pDescriptorCounts() {
    return this._pDescriptorCounts;
  }
  set pDescriptorCounts(value) {
    if (value !== null && value.constructor === Uint32Array) {
      this._pDescriptorCounts = value;
      this.memoryView.setBigInt64(0x18, getAddressFromArrayBuffer(value.buffer));
    } else if (value === null) {
      this._pDescriptorCounts = null;
    } else {
      throw new TypeError("Invalid type for 'VkDescriptorSetVariableDescriptorCountAllocateInfoEXT.pDescriptorCounts': Expected 'Uint32Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkDescriptorSetVariableDescriptorCountAllocateInfoEXT.prototype.flush = function flush() {
  
  
  
  return true;
};

VkDescriptorSetVariableDescriptorCountAllocateInfoEXT.byteLength = 0x20;

VkDescriptorSetVariableDescriptorCountAllocateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  descriptorSetCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pDescriptorCounts: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkDescriptorSetVariableDescriptorCountLayoutSupportEXT **/
class VkDescriptorSetVariableDescriptorCountLayoutSupportEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkDescriptorSetVariableDescriptorCountLayoutSupportEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get maxVariableDescriptorCount() {
    return this.memoryView.getUint32(0x10);
  }
  
};

VkDescriptorSetVariableDescriptorCountLayoutSupportEXT.prototype.flush = function flush() {
  
  
  
  return true;
};

VkDescriptorSetVariableDescriptorCountLayoutSupportEXT.byteLength = 0x18;

VkDescriptorSetVariableDescriptorCountLayoutSupportEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  maxVariableDescriptorCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkAttachmentDescription2KHR **/
class VkAttachmentDescription2KHR {
  constructor(opts) {
    
    this._pNext = null;
    
    
    
    
    
    
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkAttachmentDescription2KHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.format !== void 0) this.format = opts.format;
      if (opts.samples !== void 0) this.samples = opts.samples;
      if (opts.loadOp !== void 0) this.loadOp = opts.loadOp;
      if (opts.storeOp !== void 0) this.storeOp = opts.storeOp;
      if (opts.stencilLoadOp !== void 0) this.stencilLoadOp = opts.stencilLoadOp;
      if (opts.stencilStoreOp !== void 0) this.stencilStoreOp = opts.stencilStoreOp;
      if (opts.initialLayout !== void 0) this.initialLayout = opts.initialLayout;
      if (opts.finalLayout !== void 0) this.finalLayout = opts.finalLayout;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get flags() {
    return this.memoryView.getInt32(0x10);
  }
  set flags(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get format() {
    return this.memoryView.getInt32(0x14);
  }
  set format(value) {
    this.memoryView.setInt32(0x14, value);
  }
  get samples() {
    return this.memoryView.getInt32(0x18);
  }
  set samples(value) {
    this.memoryView.setInt32(0x18, value);
  }
  get loadOp() {
    return this.memoryView.getInt32(0x1C);
  }
  set loadOp(value) {
    this.memoryView.setInt32(0x1C, value);
  }
  get storeOp() {
    return this.memoryView.getInt32(0x20);
  }
  set storeOp(value) {
    this.memoryView.setInt32(0x20, value);
  }
  get stencilLoadOp() {
    return this.memoryView.getInt32(0x24);
  }
  set stencilLoadOp(value) {
    this.memoryView.setInt32(0x24, value);
  }
  get stencilStoreOp() {
    return this.memoryView.getInt32(0x28);
  }
  set stencilStoreOp(value) {
    this.memoryView.setInt32(0x28, value);
  }
  get initialLayout() {
    return this.memoryView.getInt32(0x2C);
  }
  set initialLayout(value) {
    this.memoryView.setInt32(0x2C, value);
  }
  get finalLayout() {
    return this.memoryView.getInt32(0x30);
  }
  set finalLayout(value) {
    this.memoryView.setInt32(0x30, value);
  }
  
};

VkAttachmentDescription2KHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkAttachmentDescription2KHR.byteLength = 0x38;

VkAttachmentDescription2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  format: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  samples: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  loadOp: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  storeOp: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  stencilLoadOp: Object.freeze({
    byteOffset: 0x24,
    byteLength: 0x4
  }),
  stencilStoreOp: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x4
  }),
  initialLayout: Object.freeze({
    byteOffset: 0x2C,
    byteLength: 0x4
  }),
  finalLayout: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
});
/** VkAttachmentReference2KHR **/
class VkAttachmentReference2KHR {
  constructor(opts) {
    
    this._pNext = null;
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkAttachmentReference2KHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.attachment !== void 0) this.attachment = opts.attachment;
      if (opts.layout !== void 0) this.layout = opts.layout;
      if (opts.aspectMask !== void 0) this.aspectMask = opts.aspectMask;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get attachment() {
    return this.memoryView.getUint32(0x10);
  }
  set attachment(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get layout() {
    return this.memoryView.getInt32(0x14);
  }
  set layout(value) {
    this.memoryView.setInt32(0x14, value);
  }
  get aspectMask() {
    return this.memoryView.getInt32(0x18);
  }
  set aspectMask(value) {
    this.memoryView.setInt32(0x18, value);
  }
  
};

VkAttachmentReference2KHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkAttachmentReference2KHR.byteLength = 0x20;

VkAttachmentReference2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  attachment: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  layout: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  aspectMask: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
});
/** VkSubpassDescription2KHR **/
class VkSubpassDescription2KHR {
  constructor(opts) {
    
    this._pNext = null;
    
    
    
    
    this._pInputAttachments = null;
    this._pInputAttachmentsNative = null;
    
    this._pColorAttachments = null;
    this._pColorAttachmentsNative = null;
    this._pResolveAttachments = null;
    this._pResolveAttachmentsNative = null;
    this._pDepthStencilAttachment = null;
    
    this._pPreserveAttachments = null;
    this.memoryBuffer = new ArrayBuffer(VkSubpassDescription2KHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.pipelineBindPoint !== void 0) this.pipelineBindPoint = opts.pipelineBindPoint;
      if (opts.viewMask !== void 0) this.viewMask = opts.viewMask;
      if (opts.inputAttachmentCount !== void 0) this.inputAttachmentCount = opts.inputAttachmentCount;
      if (opts.pInputAttachments !== void 0) this.pInputAttachments = opts.pInputAttachments;
      if (opts.colorAttachmentCount !== void 0) this.colorAttachmentCount = opts.colorAttachmentCount;
      if (opts.pColorAttachments !== void 0) this.pColorAttachments = opts.pColorAttachments;
      if (opts.pResolveAttachments !== void 0) this.pResolveAttachments = opts.pResolveAttachments;
      if (opts.pDepthStencilAttachment !== void 0) this.pDepthStencilAttachment = opts.pDepthStencilAttachment;
      if (opts.preserveAttachmentCount !== void 0) this.preserveAttachmentCount = opts.preserveAttachmentCount;
      if (opts.pPreserveAttachments !== void 0) this.pPreserveAttachments = opts.pPreserveAttachments;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get flags() {
    return this.memoryView.getInt32(0x10);
  }
  set flags(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get pipelineBindPoint() {
    return this.memoryView.getInt32(0x14);
  }
  set pipelineBindPoint(value) {
    this.memoryView.setInt32(0x14, value);
  }
  get viewMask() {
    return this.memoryView.getUint32(0x18);
  }
  set viewMask(value) {
    this.memoryView.setUint32(0x18, value);
  }
  get inputAttachmentCount() {
    return this.memoryView.getUint32(0x1C);
  }
  set inputAttachmentCount(value) {
    this.memoryView.setUint32(0x1C, value);
  }
  get pInputAttachments() {
    return this._pInputAttachments;
  }
  set pInputAttachments(value) {
    if (value !== null && value.constructor === Array) {
      this._pInputAttachments = value;
    } else if (value === null) {
      this._pInputAttachments = null;
    } else {
      throw new TypeError("Invalid type for 'VkSubpassDescription2KHR.pInputAttachments': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get colorAttachmentCount() {
    return this.memoryView.getUint32(0x28);
  }
  set colorAttachmentCount(value) {
    this.memoryView.setUint32(0x28, value);
  }
  get pColorAttachments() {
    return this._pColorAttachments;
  }
  set pColorAttachments(value) {
    if (value !== null && value.constructor === Array) {
      this._pColorAttachments = value;
    } else if (value === null) {
      this._pColorAttachments = null;
    } else {
      throw new TypeError("Invalid type for 'VkSubpassDescription2KHR.pColorAttachments': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get pResolveAttachments() {
    return this._pResolveAttachments;
  }
  set pResolveAttachments(value) {
    if (value !== null && value.constructor === Array) {
      this._pResolveAttachments = value;
    } else if (value === null) {
      this._pResolveAttachments = null;
    } else {
      throw new TypeError("Invalid type for 'VkSubpassDescription2KHR.pResolveAttachments': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get pDepthStencilAttachment() {
    return this._pDepthStencilAttachment;
  }
  set pDepthStencilAttachment(value) {
    if (value !== null && value.constructor === VkAttachmentReference2KHR) {
      value.flush();
      this._pDepthStencilAttachment = value;
      this.memoryView.setBigInt64(0x40, value.memoryAddress);
    } else if (value === null) {
      this._pDepthStencilAttachment = null;
    } else {
      throw new TypeError("Invalid type for 'VkSubpassDescription2KHR.pDepthStencilAttachment': Expected 'VkAttachmentReference2KHR' but got '" + value.constructor.name + "'");
    }
  }
  get preserveAttachmentCount() {
    return this.memoryView.getUint32(0x48);
  }
  set preserveAttachmentCount(value) {
    this.memoryView.setUint32(0x48, value);
  }
  get pPreserveAttachments() {
    return this._pPreserveAttachments;
  }
  set pPreserveAttachments(value) {
    if (value !== null && value.constructor === Uint32Array) {
      this._pPreserveAttachments = value;
      this.memoryView.setBigInt64(0x50, getAddressFromArrayBuffer(value.buffer));
    } else if (value === null) {
      this._pPreserveAttachments = null;
    } else {
      throw new TypeError("Invalid type for 'VkSubpassDescription2KHR.pPreserveAttachments': Expected 'Uint32Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkSubpassDescription2KHR.prototype.flush = function flush() {
  
  
  
  
  if (this._pInputAttachments !== null) {
    let nativeArray = new NativeObjectArray(this._pInputAttachments);
    this._pInputAttachmentsNative = nativeArray;
    this.memoryView.setBigInt64(0x20, nativeArray.address);
  }
  
  
  if (this._pColorAttachments !== null) {
    let nativeArray = new NativeObjectArray(this._pColorAttachments);
    this._pColorAttachmentsNative = nativeArray;
    this.memoryView.setBigInt64(0x30, nativeArray.address);
  }
  
  
  if (this._pResolveAttachments !== null) {
    let nativeArray = new NativeObjectArray(this._pResolveAttachments);
    this._pResolveAttachmentsNative = nativeArray;
    this.memoryView.setBigInt64(0x38, nativeArray.address);
  }
  
  return true;
};

VkSubpassDescription2KHR.byteLength = 0x58;

VkSubpassDescription2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pipelineBindPoint: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  viewMask: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  inputAttachmentCount: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  pInputAttachments: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
  colorAttachmentCount: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x4
  }),
  pColorAttachments: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x8
  }),
  pResolveAttachments: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x8
  }),
  pDepthStencilAttachment: Object.freeze({
    byteOffset: 0x40,
    byteLength: 0x8
  }),
  preserveAttachmentCount: Object.freeze({
    byteOffset: 0x48,
    byteLength: 0x4
  }),
  pPreserveAttachments: Object.freeze({
    byteOffset: 0x50,
    byteLength: 0x8
  }),
});
/** VkSubpassDependency2KHR **/
class VkSubpassDependency2KHR {
  constructor(opts) {
    
    this._pNext = null;
    
    
    
    
    
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkSubpassDependency2KHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.srcSubpass !== void 0) this.srcSubpass = opts.srcSubpass;
      if (opts.dstSubpass !== void 0) this.dstSubpass = opts.dstSubpass;
      if (opts.srcStageMask !== void 0) this.srcStageMask = opts.srcStageMask;
      if (opts.dstStageMask !== void 0) this.dstStageMask = opts.dstStageMask;
      if (opts.srcAccessMask !== void 0) this.srcAccessMask = opts.srcAccessMask;
      if (opts.dstAccessMask !== void 0) this.dstAccessMask = opts.dstAccessMask;
      if (opts.dependencyFlags !== void 0) this.dependencyFlags = opts.dependencyFlags;
      if (opts.viewOffset !== void 0) this.viewOffset = opts.viewOffset;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get srcSubpass() {
    return this.memoryView.getUint32(0x10);
  }
  set srcSubpass(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get dstSubpass() {
    return this.memoryView.getUint32(0x14);
  }
  set dstSubpass(value) {
    this.memoryView.setUint32(0x14, value);
  }
  get srcStageMask() {
    return this.memoryView.getInt32(0x18);
  }
  set srcStageMask(value) {
    this.memoryView.setInt32(0x18, value);
  }
  get dstStageMask() {
    return this.memoryView.getInt32(0x1C);
  }
  set dstStageMask(value) {
    this.memoryView.setInt32(0x1C, value);
  }
  get srcAccessMask() {
    return this.memoryView.getInt32(0x20);
  }
  set srcAccessMask(value) {
    this.memoryView.setInt32(0x20, value);
  }
  get dstAccessMask() {
    return this.memoryView.getInt32(0x24);
  }
  set dstAccessMask(value) {
    this.memoryView.setInt32(0x24, value);
  }
  get dependencyFlags() {
    return this.memoryView.getInt32(0x28);
  }
  set dependencyFlags(value) {
    this.memoryView.setInt32(0x28, value);
  }
  get viewOffset() {
    return this.memoryView.getInt32(0x2C);
  }
  set viewOffset(value) {
    this.memoryView.setInt32(0x2C, value);
  }
  
};

VkSubpassDependency2KHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkSubpassDependency2KHR.byteLength = 0x30;

VkSubpassDependency2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  srcSubpass: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  dstSubpass: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  srcStageMask: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  dstStageMask: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  srcAccessMask: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  dstAccessMask: Object.freeze({
    byteOffset: 0x24,
    byteLength: 0x4
  }),
  dependencyFlags: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x4
  }),
  viewOffset: Object.freeze({
    byteOffset: 0x2C,
    byteLength: 0x4
  }),
});
/** VkRenderPassCreateInfo2KHR **/
class VkRenderPassCreateInfo2KHR {
  constructor(opts) {
    
    this._pNext = null;
    
    
    this._pAttachments = null;
    this._pAttachmentsNative = null;
    
    this._pSubpasses = null;
    this._pSubpassesNative = null;
    
    this._pDependencies = null;
    this._pDependenciesNative = null;
    
    this._pCorrelatedViewMasks = null;
    this.memoryBuffer = new ArrayBuffer(VkRenderPassCreateInfo2KHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.attachmentCount !== void 0) this.attachmentCount = opts.attachmentCount;
      if (opts.pAttachments !== void 0) this.pAttachments = opts.pAttachments;
      if (opts.subpassCount !== void 0) this.subpassCount = opts.subpassCount;
      if (opts.pSubpasses !== void 0) this.pSubpasses = opts.pSubpasses;
      if (opts.dependencyCount !== void 0) this.dependencyCount = opts.dependencyCount;
      if (opts.pDependencies !== void 0) this.pDependencies = opts.pDependencies;
      if (opts.correlatedViewMaskCount !== void 0) this.correlatedViewMaskCount = opts.correlatedViewMaskCount;
      if (opts.pCorrelatedViewMasks !== void 0) this.pCorrelatedViewMasks = opts.pCorrelatedViewMasks;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get flags() {
    return this.memoryView.getInt32(0x10);
  }
  set flags(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get attachmentCount() {
    return this.memoryView.getUint32(0x14);
  }
  set attachmentCount(value) {
    this.memoryView.setUint32(0x14, value);
  }
  get pAttachments() {
    return this._pAttachments;
  }
  set pAttachments(value) {
    if (value !== null && value.constructor === Array) {
      this._pAttachments = value;
    } else if (value === null) {
      this._pAttachments = null;
    } else {
      throw new TypeError("Invalid type for 'VkRenderPassCreateInfo2KHR.pAttachments': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get subpassCount() {
    return this.memoryView.getUint32(0x20);
  }
  set subpassCount(value) {
    this.memoryView.setUint32(0x20, value);
  }
  get pSubpasses() {
    return this._pSubpasses;
  }
  set pSubpasses(value) {
    if (value !== null && value.constructor === Array) {
      this._pSubpasses = value;
    } else if (value === null) {
      this._pSubpasses = null;
    } else {
      throw new TypeError("Invalid type for 'VkRenderPassCreateInfo2KHR.pSubpasses': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get dependencyCount() {
    return this.memoryView.getUint32(0x30);
  }
  set dependencyCount(value) {
    this.memoryView.setUint32(0x30, value);
  }
  get pDependencies() {
    return this._pDependencies;
  }
  set pDependencies(value) {
    if (value !== null && value.constructor === Array) {
      this._pDependencies = value;
    } else if (value === null) {
      this._pDependencies = null;
    } else {
      throw new TypeError("Invalid type for 'VkRenderPassCreateInfo2KHR.pDependencies': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get correlatedViewMaskCount() {
    return this.memoryView.getUint32(0x40);
  }
  set correlatedViewMaskCount(value) {
    this.memoryView.setUint32(0x40, value);
  }
  get pCorrelatedViewMasks() {
    return this._pCorrelatedViewMasks;
  }
  set pCorrelatedViewMasks(value) {
    if (value !== null && value.constructor === Uint32Array) {
      this._pCorrelatedViewMasks = value;
      this.memoryView.setBigInt64(0x48, getAddressFromArrayBuffer(value.buffer));
    } else if (value === null) {
      this._pCorrelatedViewMasks = null;
    } else {
      throw new TypeError("Invalid type for 'VkRenderPassCreateInfo2KHR.pCorrelatedViewMasks': Expected 'Uint32Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkRenderPassCreateInfo2KHR.prototype.flush = function flush() {
  
  
  
  
  if (this._pAttachments !== null) {
    let nativeArray = new NativeObjectArray(this._pAttachments);
    this._pAttachmentsNative = nativeArray;
    this.memoryView.setBigInt64(0x18, nativeArray.address);
  }
  
  
  if (this._pSubpasses !== null) {
    let nativeArray = new NativeObjectArray(this._pSubpasses);
    this._pSubpassesNative = nativeArray;
    this.memoryView.setBigInt64(0x28, nativeArray.address);
  }
  
  
  if (this._pDependencies !== null) {
    let nativeArray = new NativeObjectArray(this._pDependencies);
    this._pDependenciesNative = nativeArray;
    this.memoryView.setBigInt64(0x38, nativeArray.address);
  }
  
  return true;
};

VkRenderPassCreateInfo2KHR.byteLength = 0x50;

VkRenderPassCreateInfo2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  attachmentCount: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  pAttachments: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  subpassCount: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  pSubpasses: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
  dependencyCount: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  pDependencies: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x8
  }),
  correlatedViewMaskCount: Object.freeze({
    byteOffset: 0x40,
    byteLength: 0x4
  }),
  pCorrelatedViewMasks: Object.freeze({
    byteOffset: 0x48,
    byteLength: 0x8
  }),
});
/** VkSubpassBeginInfoKHR **/
class VkSubpassBeginInfoKHR {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkSubpassBeginInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.contents !== void 0) this.contents = opts.contents;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get contents() {
    return this.memoryView.getInt32(0x10);
  }
  set contents(value) {
    this.memoryView.setInt32(0x10, value);
  }
  
};

VkSubpassBeginInfoKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkSubpassBeginInfoKHR.byteLength = 0x18;

VkSubpassBeginInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  contents: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkSubpassEndInfoKHR **/
class VkSubpassEndInfoKHR {
  constructor(opts) {
    
    this._pNext = null;
    this.memoryBuffer = new ArrayBuffer(VkSubpassEndInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  
};

VkSubpassEndInfoKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkSubpassEndInfoKHR.byteLength = 0x10;

VkSubpassEndInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
});
/** VkVertexInputBindingDivisorDescriptionEXT **/
class VkVertexInputBindingDivisorDescriptionEXT {
  constructor(opts) {
    
    
    this.memoryBuffer = new ArrayBuffer(VkVertexInputBindingDivisorDescriptionEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.binding !== void 0) this.binding = opts.binding;
      if (opts.divisor !== void 0) this.divisor = opts.divisor;
      
    }
  }
  get binding() {
    return this.memoryView.getUint32(0x0);
  }
  set binding(value) {
    this.memoryView.setUint32(0x0, value);
  }
  get divisor() {
    return this.memoryView.getUint32(0x4);
  }
  set divisor(value) {
    this.memoryView.setUint32(0x4, value);
  }
  
};

VkVertexInputBindingDivisorDescriptionEXT.prototype.flush = function flush() {
  
  return true;
};

VkVertexInputBindingDivisorDescriptionEXT.byteLength = 0x8;

VkVertexInputBindingDivisorDescriptionEXT.memoryLayout = Object.freeze({
  binding: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  divisor: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
});
/** VkPipelineVertexInputDivisorStateCreateInfoEXT **/
class VkPipelineVertexInputDivisorStateCreateInfoEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    this._pVertexBindingDivisors = null;
    this._pVertexBindingDivisorsNative = null;
    this.memoryBuffer = new ArrayBuffer(VkPipelineVertexInputDivisorStateCreateInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.vertexBindingDivisorCount !== void 0) this.vertexBindingDivisorCount = opts.vertexBindingDivisorCount;
      if (opts.pVertexBindingDivisors !== void 0) this.pVertexBindingDivisors = opts.pVertexBindingDivisors;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get vertexBindingDivisorCount() {
    return this.memoryView.getUint32(0x10);
  }
  set vertexBindingDivisorCount(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get pVertexBindingDivisors() {
    return this._pVertexBindingDivisors;
  }
  set pVertexBindingDivisors(value) {
    if (value !== null && value.constructor === Array) {
      this._pVertexBindingDivisors = value;
    } else if (value === null) {
      this._pVertexBindingDivisors = null;
    } else {
      throw new TypeError("Invalid type for 'VkPipelineVertexInputDivisorStateCreateInfoEXT.pVertexBindingDivisors': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkPipelineVertexInputDivisorStateCreateInfoEXT.prototype.flush = function flush() {
  
  
  
  
  if (this._pVertexBindingDivisors !== null) {
    let nativeArray = new NativeObjectArray(this._pVertexBindingDivisors);
    this._pVertexBindingDivisorsNative = nativeArray;
    this.memoryView.setBigInt64(0x18, nativeArray.address);
  }
  
  return true;
};

VkPipelineVertexInputDivisorStateCreateInfoEXT.byteLength = 0x20;

VkPipelineVertexInputDivisorStateCreateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  vertexBindingDivisorCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pVertexBindingDivisors: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT **/
class VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get maxVertexAttribDivisor() {
    return this.memoryView.getUint32(0x10);
  }
  
};

VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT.byteLength = 0x18;

VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  maxVertexAttribDivisor: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPhysicalDevicePCIBusInfoPropertiesEXT **/
class VkPhysicalDevicePCIBusInfoPropertiesEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDevicePCIBusInfoPropertiesEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get pciDomain() {
    return this.memoryView.getUint32(0x10);
  }
  get pciBus() {
    return this.memoryView.getUint32(0x14);
  }
  get pciDevice() {
    return this.memoryView.getUint32(0x18);
  }
  get pciFunction() {
    return this.memoryView.getUint32(0x1C);
  }
  
};

VkPhysicalDevicePCIBusInfoPropertiesEXT.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDevicePCIBusInfoPropertiesEXT.byteLength = 0x20;

VkPhysicalDevicePCIBusInfoPropertiesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  pciDomain: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pciBus: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  pciDevice: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  pciFunction: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
});
/** VkCommandBufferInheritanceConditionalRenderingInfoEXT **/
class VkCommandBufferInheritanceConditionalRenderingInfoEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkCommandBufferInheritanceConditionalRenderingInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.conditionalRenderingEnable !== void 0) this.conditionalRenderingEnable = opts.conditionalRenderingEnable;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get conditionalRenderingEnable() {
    return this.memoryView.getUint32(0x10);
  }
  set conditionalRenderingEnable(value) {
    this.memoryView.setUint32(0x10, value);
  }
  
};

VkCommandBufferInheritanceConditionalRenderingInfoEXT.prototype.flush = function flush() {
  
  
  
  return true;
};

VkCommandBufferInheritanceConditionalRenderingInfoEXT.byteLength = 0x18;

VkCommandBufferInheritanceConditionalRenderingInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  conditionalRenderingEnable: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPhysicalDevice8BitStorageFeaturesKHR **/
class VkPhysicalDevice8BitStorageFeaturesKHR {
  constructor(opts) {
    
    this._pNext = null;
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDevice8BitStorageFeaturesKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.storageBuffer8BitAccess !== void 0) this.storageBuffer8BitAccess = opts.storageBuffer8BitAccess;
      if (opts.uniformAndStorageBuffer8BitAccess !== void 0) this.uniformAndStorageBuffer8BitAccess = opts.uniformAndStorageBuffer8BitAccess;
      if (opts.storagePushConstant8 !== void 0) this.storagePushConstant8 = opts.storagePushConstant8;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get storageBuffer8BitAccess() {
    return this.memoryView.getUint32(0x10);
  }
  set storageBuffer8BitAccess(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get uniformAndStorageBuffer8BitAccess() {
    return this.memoryView.getUint32(0x14);
  }
  set uniformAndStorageBuffer8BitAccess(value) {
    this.memoryView.setUint32(0x14, value);
  }
  get storagePushConstant8() {
    return this.memoryView.getUint32(0x18);
  }
  set storagePushConstant8(value) {
    this.memoryView.setUint32(0x18, value);
  }
  
};

VkPhysicalDevice8BitStorageFeaturesKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDevice8BitStorageFeaturesKHR.byteLength = 0x20;

VkPhysicalDevice8BitStorageFeaturesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  storageBuffer8BitAccess: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  uniformAndStorageBuffer8BitAccess: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  storagePushConstant8: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceConditionalRenderingFeaturesEXT **/
class VkPhysicalDeviceConditionalRenderingFeaturesEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceConditionalRenderingFeaturesEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.conditionalRendering !== void 0) this.conditionalRendering = opts.conditionalRendering;
      if (opts.inheritedConditionalRendering !== void 0) this.inheritedConditionalRendering = opts.inheritedConditionalRendering;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get conditionalRendering() {
    return this.memoryView.getUint32(0x10);
  }
  set conditionalRendering(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get inheritedConditionalRendering() {
    return this.memoryView.getUint32(0x14);
  }
  set inheritedConditionalRendering(value) {
    this.memoryView.setUint32(0x14, value);
  }
  
};

VkPhysicalDeviceConditionalRenderingFeaturesEXT.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceConditionalRenderingFeaturesEXT.byteLength = 0x18;

VkPhysicalDeviceConditionalRenderingFeaturesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  conditionalRendering: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  inheritedConditionalRendering: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceVulkanMemoryModelFeaturesKHR **/
class VkPhysicalDeviceVulkanMemoryModelFeaturesKHR {
  constructor(opts) {
    
    this._pNext = null;
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceVulkanMemoryModelFeaturesKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.vulkanMemoryModel !== void 0) this.vulkanMemoryModel = opts.vulkanMemoryModel;
      if (opts.vulkanMemoryModelDeviceScope !== void 0) this.vulkanMemoryModelDeviceScope = opts.vulkanMemoryModelDeviceScope;
      if (opts.vulkanMemoryModelAvailabilityVisibilityChains !== void 0) this.vulkanMemoryModelAvailabilityVisibilityChains = opts.vulkanMemoryModelAvailabilityVisibilityChains;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get vulkanMemoryModel() {
    return this.memoryView.getUint32(0x10);
  }
  set vulkanMemoryModel(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get vulkanMemoryModelDeviceScope() {
    return this.memoryView.getUint32(0x14);
  }
  set vulkanMemoryModelDeviceScope(value) {
    this.memoryView.setUint32(0x14, value);
  }
  get vulkanMemoryModelAvailabilityVisibilityChains() {
    return this.memoryView.getUint32(0x18);
  }
  set vulkanMemoryModelAvailabilityVisibilityChains(value) {
    this.memoryView.setUint32(0x18, value);
  }
  
};

VkPhysicalDeviceVulkanMemoryModelFeaturesKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceVulkanMemoryModelFeaturesKHR.byteLength = 0x20;

VkPhysicalDeviceVulkanMemoryModelFeaturesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  vulkanMemoryModel: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  vulkanMemoryModelDeviceScope: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  vulkanMemoryModelAvailabilityVisibilityChains: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceShaderAtomicInt64FeaturesKHR **/
class VkPhysicalDeviceShaderAtomicInt64FeaturesKHR {
  constructor(opts) {
    
    this._pNext = null;
    
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceShaderAtomicInt64FeaturesKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.shaderBufferInt64Atomics !== void 0) this.shaderBufferInt64Atomics = opts.shaderBufferInt64Atomics;
      if (opts.shaderSharedInt64Atomics !== void 0) this.shaderSharedInt64Atomics = opts.shaderSharedInt64Atomics;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get shaderBufferInt64Atomics() {
    return this.memoryView.getUint32(0x10);
  }
  set shaderBufferInt64Atomics(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get shaderSharedInt64Atomics() {
    return this.memoryView.getUint32(0x14);
  }
  set shaderSharedInt64Atomics(value) {
    this.memoryView.setUint32(0x14, value);
  }
  
};

VkPhysicalDeviceShaderAtomicInt64FeaturesKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceShaderAtomicInt64FeaturesKHR.byteLength = 0x18;

VkPhysicalDeviceShaderAtomicInt64FeaturesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  shaderBufferInt64Atomics: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  shaderSharedInt64Atomics: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT **/
class VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.vertexAttributeInstanceRateDivisor !== void 0) this.vertexAttributeInstanceRateDivisor = opts.vertexAttributeInstanceRateDivisor;
      if (opts.vertexAttributeInstanceRateZeroDivisor !== void 0) this.vertexAttributeInstanceRateZeroDivisor = opts.vertexAttributeInstanceRateZeroDivisor;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get vertexAttributeInstanceRateDivisor() {
    return this.memoryView.getUint32(0x10);
  }
  set vertexAttributeInstanceRateDivisor(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get vertexAttributeInstanceRateZeroDivisor() {
    return this.memoryView.getUint32(0x14);
  }
  set vertexAttributeInstanceRateZeroDivisor(value) {
    this.memoryView.setUint32(0x14, value);
  }
  
};

VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT.byteLength = 0x18;

VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  vertexAttributeInstanceRateDivisor: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  vertexAttributeInstanceRateZeroDivisor: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
});
/** VkQueueFamilyCheckpointPropertiesNV **/
class VkQueueFamilyCheckpointPropertiesNV {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkQueueFamilyCheckpointPropertiesNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get checkpointExecutionStageMask() {
    return this.memoryView.getInt32(0x10);
  }
  
};

VkQueueFamilyCheckpointPropertiesNV.prototype.flush = function flush() {
  
  
  
  return true;
};

VkQueueFamilyCheckpointPropertiesNV.byteLength = 0x18;

VkQueueFamilyCheckpointPropertiesNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  checkpointExecutionStageMask: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkCheckpointDataNV **/
class VkCheckpointDataNV {
  constructor(opts) {
    
    this._pNext = null;
    
    this._pCheckpointMarker = null;
    this.memoryBuffer = new ArrayBuffer(VkCheckpointDataNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.pCheckpointMarker !== void 0) this.pCheckpointMarker = opts.pCheckpointMarker;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get stage() {
    return this.memoryView.getInt32(0x10);
  }
  get pCheckpointMarker() {
    return this._pCheckpointMarker;
  }
  set pCheckpointMarker(value) {
    if (value !== null && value.constructor === ArrayBuffer) {
      this._pCheckpointMarker = value;
      this.memoryView.setBigInt64(0x18, getAddressFromArrayBuffer(value.buffer));
    } else if (value === null) {
      this._pCheckpointMarker = null;
    } else {
      throw new TypeError("Invalid type for 'VkCheckpointDataNV.pCheckpointMarker': Expected 'ArrayBuffer' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkCheckpointDataNV.prototype.flush = function flush() {
  
  
  
  return true;
};

VkCheckpointDataNV.byteLength = 0x20;

VkCheckpointDataNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  stage: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pCheckpointMarker: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkPhysicalDeviceDepthStencilResolvePropertiesKHR **/
class VkPhysicalDeviceDepthStencilResolvePropertiesKHR {
  constructor(opts) {
    
    this._pNext = null;
    
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceDepthStencilResolvePropertiesKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get supportedDepthResolveModes() {
    return this.memoryView.getInt32(0x10);
  }
  get supportedStencilResolveModes() {
    return this.memoryView.getInt32(0x14);
  }
  get independentResolveNone() {
    return this.memoryView.getUint32(0x18);
  }
  get independentResolve() {
    return this.memoryView.getUint32(0x1C);
  }
  
};

VkPhysicalDeviceDepthStencilResolvePropertiesKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceDepthStencilResolvePropertiesKHR.byteLength = 0x20;

VkPhysicalDeviceDepthStencilResolvePropertiesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  supportedDepthResolveModes: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  supportedStencilResolveModes: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  independentResolveNone: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  independentResolve: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
});
/** VkSubpassDescriptionDepthStencilResolveKHR **/
class VkSubpassDescriptionDepthStencilResolveKHR {
  constructor(opts) {
    
    this._pNext = null;
    
    
    this._pDepthStencilResolveAttachment = null;
    this.memoryBuffer = new ArrayBuffer(VkSubpassDescriptionDepthStencilResolveKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.depthResolveMode !== void 0) this.depthResolveMode = opts.depthResolveMode;
      if (opts.stencilResolveMode !== void 0) this.stencilResolveMode = opts.stencilResolveMode;
      if (opts.pDepthStencilResolveAttachment !== void 0) this.pDepthStencilResolveAttachment = opts.pDepthStencilResolveAttachment;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get depthResolveMode() {
    return this.memoryView.getInt32(0x10);
  }
  set depthResolveMode(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get stencilResolveMode() {
    return this.memoryView.getInt32(0x14);
  }
  set stencilResolveMode(value) {
    this.memoryView.setInt32(0x14, value);
  }
  get pDepthStencilResolveAttachment() {
    return this._pDepthStencilResolveAttachment;
  }
  set pDepthStencilResolveAttachment(value) {
    if (value !== null && value.constructor === VkAttachmentReference2KHR) {
      value.flush();
      this._pDepthStencilResolveAttachment = value;
      this.memoryView.setBigInt64(0x18, value.memoryAddress);
    } else if (value === null) {
      this._pDepthStencilResolveAttachment = null;
    } else {
      throw new TypeError("Invalid type for 'VkSubpassDescriptionDepthStencilResolveKHR.pDepthStencilResolveAttachment': Expected 'VkAttachmentReference2KHR' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkSubpassDescriptionDepthStencilResolveKHR.prototype.flush = function flush() {
  
  
  
  return true;
};

VkSubpassDescriptionDepthStencilResolveKHR.byteLength = 0x20;

VkSubpassDescriptionDepthStencilResolveKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  depthResolveMode: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  stencilResolveMode: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  pDepthStencilResolveAttachment: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkImageViewASTCDecodeModeEXT **/
class VkImageViewASTCDecodeModeEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkImageViewASTCDecodeModeEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.decodeMode !== void 0) this.decodeMode = opts.decodeMode;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get decodeMode() {
    return this.memoryView.getInt32(0x10);
  }
  set decodeMode(value) {
    this.memoryView.setInt32(0x10, value);
  }
  
};

VkImageViewASTCDecodeModeEXT.prototype.flush = function flush() {
  
  
  
  return true;
};

VkImageViewASTCDecodeModeEXT.byteLength = 0x18;

VkImageViewASTCDecodeModeEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  decodeMode: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceASTCDecodeFeaturesEXT **/
class VkPhysicalDeviceASTCDecodeFeaturesEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceASTCDecodeFeaturesEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.decodeModeSharedExponent !== void 0) this.decodeModeSharedExponent = opts.decodeModeSharedExponent;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get decodeModeSharedExponent() {
    return this.memoryView.getUint32(0x10);
  }
  set decodeModeSharedExponent(value) {
    this.memoryView.setUint32(0x10, value);
  }
  
};

VkPhysicalDeviceASTCDecodeFeaturesEXT.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceASTCDecodeFeaturesEXT.byteLength = 0x18;

VkPhysicalDeviceASTCDecodeFeaturesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  decodeModeSharedExponent: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceTransformFeedbackFeaturesEXT **/
class VkPhysicalDeviceTransformFeedbackFeaturesEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceTransformFeedbackFeaturesEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.transformFeedback !== void 0) this.transformFeedback = opts.transformFeedback;
      if (opts.geometryStreams !== void 0) this.geometryStreams = opts.geometryStreams;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get transformFeedback() {
    return this.memoryView.getUint32(0x10);
  }
  set transformFeedback(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get geometryStreams() {
    return this.memoryView.getUint32(0x14);
  }
  set geometryStreams(value) {
    this.memoryView.setUint32(0x14, value);
  }
  
};

VkPhysicalDeviceTransformFeedbackFeaturesEXT.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceTransformFeedbackFeaturesEXT.byteLength = 0x18;

VkPhysicalDeviceTransformFeedbackFeaturesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  transformFeedback: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  geometryStreams: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceTransformFeedbackPropertiesEXT **/
class VkPhysicalDeviceTransformFeedbackPropertiesEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    
    
    
    
    
    
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceTransformFeedbackPropertiesEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get maxTransformFeedbackStreams() {
    return this.memoryView.getUint32(0x10);
  }
  get maxTransformFeedbackBuffers() {
    return this.memoryView.getUint32(0x14);
  }
  get maxTransformFeedbackBufferSize() {
    return this.memoryView.getBigUint64(0x18);
  }
  get maxTransformFeedbackStreamDataSize() {
    return this.memoryView.getUint32(0x20);
  }
  get maxTransformFeedbackBufferDataSize() {
    return this.memoryView.getUint32(0x24);
  }
  get maxTransformFeedbackBufferDataStride() {
    return this.memoryView.getUint32(0x28);
  }
  get transformFeedbackQueries() {
    return this.memoryView.getUint32(0x2C);
  }
  get transformFeedbackStreamsLinesTriangles() {
    return this.memoryView.getUint32(0x30);
  }
  get transformFeedbackRasterizationStreamSelect() {
    return this.memoryView.getUint32(0x34);
  }
  get transformFeedbackDraw() {
    return this.memoryView.getUint32(0x38);
  }
  
};

VkPhysicalDeviceTransformFeedbackPropertiesEXT.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceTransformFeedbackPropertiesEXT.byteLength = 0x40;

VkPhysicalDeviceTransformFeedbackPropertiesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  maxTransformFeedbackStreams: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  maxTransformFeedbackBuffers: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  maxTransformFeedbackBufferSize: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  maxTransformFeedbackStreamDataSize: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  maxTransformFeedbackBufferDataSize: Object.freeze({
    byteOffset: 0x24,
    byteLength: 0x4
  }),
  maxTransformFeedbackBufferDataStride: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x4
  }),
  transformFeedbackQueries: Object.freeze({
    byteOffset: 0x2C,
    byteLength: 0x4
  }),
  transformFeedbackStreamsLinesTriangles: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  transformFeedbackRasterizationStreamSelect: Object.freeze({
    byteOffset: 0x34,
    byteLength: 0x4
  }),
  transformFeedbackDraw: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x4
  }),
});
/** VkPipelineRasterizationStateStreamCreateInfoEXT **/
class VkPipelineRasterizationStateStreamCreateInfoEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    
    this.memoryBuffer = new ArrayBuffer(VkPipelineRasterizationStateStreamCreateInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.rasterizationStream !== void 0) this.rasterizationStream = opts.rasterizationStream;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get flags() {
    return this.memoryView.getInt32(0x10);
  }
  set flags(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get rasterizationStream() {
    return this.memoryView.getUint32(0x14);
  }
  set rasterizationStream(value) {
    this.memoryView.setUint32(0x14, value);
  }
  
};

VkPipelineRasterizationStateStreamCreateInfoEXT.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPipelineRasterizationStateStreamCreateInfoEXT.byteLength = 0x18;

VkPipelineRasterizationStateStreamCreateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  rasterizationStream: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV **/
class VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.representativeFragmentTest !== void 0) this.representativeFragmentTest = opts.representativeFragmentTest;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get representativeFragmentTest() {
    return this.memoryView.getUint32(0x10);
  }
  set representativeFragmentTest(value) {
    this.memoryView.setUint32(0x10, value);
  }
  
};

VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV.byteLength = 0x18;

VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  representativeFragmentTest: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPipelineRepresentativeFragmentTestStateCreateInfoNV **/
class VkPipelineRepresentativeFragmentTestStateCreateInfoNV {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkPipelineRepresentativeFragmentTestStateCreateInfoNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.representativeFragmentTestEnable !== void 0) this.representativeFragmentTestEnable = opts.representativeFragmentTestEnable;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get representativeFragmentTestEnable() {
    return this.memoryView.getUint32(0x10);
  }
  set representativeFragmentTestEnable(value) {
    this.memoryView.setUint32(0x10, value);
  }
  
};

VkPipelineRepresentativeFragmentTestStateCreateInfoNV.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPipelineRepresentativeFragmentTestStateCreateInfoNV.byteLength = 0x18;

VkPipelineRepresentativeFragmentTestStateCreateInfoNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  representativeFragmentTestEnable: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceExclusiveScissorFeaturesNV **/
class VkPhysicalDeviceExclusiveScissorFeaturesNV {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceExclusiveScissorFeaturesNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.exclusiveScissor !== void 0) this.exclusiveScissor = opts.exclusiveScissor;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get exclusiveScissor() {
    return this.memoryView.getUint32(0x10);
  }
  set exclusiveScissor(value) {
    this.memoryView.setUint32(0x10, value);
  }
  
};

VkPhysicalDeviceExclusiveScissorFeaturesNV.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceExclusiveScissorFeaturesNV.byteLength = 0x18;

VkPhysicalDeviceExclusiveScissorFeaturesNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  exclusiveScissor: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPipelineViewportExclusiveScissorStateCreateInfoNV **/
class VkPipelineViewportExclusiveScissorStateCreateInfoNV {
  constructor(opts) {
    
    this._pNext = null;
    
    this._pExclusiveScissors = null;
    this._pExclusiveScissorsNative = null;
    this.memoryBuffer = new ArrayBuffer(VkPipelineViewportExclusiveScissorStateCreateInfoNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.exclusiveScissorCount !== void 0) this.exclusiveScissorCount = opts.exclusiveScissorCount;
      if (opts.pExclusiveScissors !== void 0) this.pExclusiveScissors = opts.pExclusiveScissors;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get exclusiveScissorCount() {
    return this.memoryView.getUint32(0x10);
  }
  set exclusiveScissorCount(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get pExclusiveScissors() {
    return this._pExclusiveScissors;
  }
  set pExclusiveScissors(value) {
    if (value !== null && value.constructor === Array) {
      this._pExclusiveScissors = value;
    } else if (value === null) {
      this._pExclusiveScissors = null;
    } else {
      throw new TypeError("Invalid type for 'VkPipelineViewportExclusiveScissorStateCreateInfoNV.pExclusiveScissors': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkPipelineViewportExclusiveScissorStateCreateInfoNV.prototype.flush = function flush() {
  
  
  
  
  if (this._pExclusiveScissors !== null) {
    let nativeArray = new NativeObjectArray(this._pExclusiveScissors);
    this._pExclusiveScissorsNative = nativeArray;
    this.memoryView.setBigInt64(0x18, nativeArray.address);
  }
  
  return true;
};

VkPipelineViewportExclusiveScissorStateCreateInfoNV.byteLength = 0x20;

VkPipelineViewportExclusiveScissorStateCreateInfoNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  exclusiveScissorCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pExclusiveScissors: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkPhysicalDeviceCornerSampledImageFeaturesNV **/
class VkPhysicalDeviceCornerSampledImageFeaturesNV {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceCornerSampledImageFeaturesNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.cornerSampledImage !== void 0) this.cornerSampledImage = opts.cornerSampledImage;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get cornerSampledImage() {
    return this.memoryView.getUint32(0x10);
  }
  set cornerSampledImage(value) {
    this.memoryView.setUint32(0x10, value);
  }
  
};

VkPhysicalDeviceCornerSampledImageFeaturesNV.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceCornerSampledImageFeaturesNV.byteLength = 0x18;

VkPhysicalDeviceCornerSampledImageFeaturesNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  cornerSampledImage: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceComputeShaderDerivativesFeaturesNV **/
class VkPhysicalDeviceComputeShaderDerivativesFeaturesNV {
  constructor(opts) {
    
    this._pNext = null;
    
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceComputeShaderDerivativesFeaturesNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.computeDerivativeGroupQuads !== void 0) this.computeDerivativeGroupQuads = opts.computeDerivativeGroupQuads;
      if (opts.computeDerivativeGroupLinear !== void 0) this.computeDerivativeGroupLinear = opts.computeDerivativeGroupLinear;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get computeDerivativeGroupQuads() {
    return this.memoryView.getUint32(0x10);
  }
  set computeDerivativeGroupQuads(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get computeDerivativeGroupLinear() {
    return this.memoryView.getUint32(0x14);
  }
  set computeDerivativeGroupLinear(value) {
    this.memoryView.setUint32(0x14, value);
  }
  
};

VkPhysicalDeviceComputeShaderDerivativesFeaturesNV.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceComputeShaderDerivativesFeaturesNV.byteLength = 0x18;

VkPhysicalDeviceComputeShaderDerivativesFeaturesNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  computeDerivativeGroupQuads: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  computeDerivativeGroupLinear: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV **/
class VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.fragmentShaderBarycentric !== void 0) this.fragmentShaderBarycentric = opts.fragmentShaderBarycentric;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get fragmentShaderBarycentric() {
    return this.memoryView.getUint32(0x10);
  }
  set fragmentShaderBarycentric(value) {
    this.memoryView.setUint32(0x10, value);
  }
  
};

VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV.byteLength = 0x18;

VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  fragmentShaderBarycentric: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceShaderImageFootprintFeaturesNV **/
class VkPhysicalDeviceShaderImageFootprintFeaturesNV {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceShaderImageFootprintFeaturesNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.imageFootprint !== void 0) this.imageFootprint = opts.imageFootprint;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get imageFootprint() {
    return this.memoryView.getUint32(0x10);
  }
  set imageFootprint(value) {
    this.memoryView.setUint32(0x10, value);
  }
  
};

VkPhysicalDeviceShaderImageFootprintFeaturesNV.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceShaderImageFootprintFeaturesNV.byteLength = 0x18;

VkPhysicalDeviceShaderImageFootprintFeaturesNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  imageFootprint: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV **/
class VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.dedicatedAllocationImageAliasing !== void 0) this.dedicatedAllocationImageAliasing = opts.dedicatedAllocationImageAliasing;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get dedicatedAllocationImageAliasing() {
    return this.memoryView.getUint32(0x10);
  }
  set dedicatedAllocationImageAliasing(value) {
    this.memoryView.setUint32(0x10, value);
  }
  
};

VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV.byteLength = 0x18;

VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  dedicatedAllocationImageAliasing: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkShadingRatePaletteNV **/
class VkShadingRatePaletteNV {
  constructor(opts) {
    
    this._pShadingRatePaletteEntries = null;
    this.memoryBuffer = new ArrayBuffer(VkShadingRatePaletteNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.shadingRatePaletteEntryCount !== void 0) this.shadingRatePaletteEntryCount = opts.shadingRatePaletteEntryCount;
      if (opts.pShadingRatePaletteEntries !== void 0) this.pShadingRatePaletteEntries = opts.pShadingRatePaletteEntries;
      
    }
  }
  get shadingRatePaletteEntryCount() {
    return this.memoryView.getUint32(0x0);
  }
  set shadingRatePaletteEntryCount(value) {
    this.memoryView.setUint32(0x0, value);
  }
  get pShadingRatePaletteEntries() {
    return this._pShadingRatePaletteEntries;
  }
  set pShadingRatePaletteEntries(value) {
    if (value !== null && value.constructor === Int32Array) {
      this._pShadingRatePaletteEntries = value;
      this.memoryView.setBigInt64(0x8, getAddressFromArrayBuffer(value.buffer));
    } else if (value === null) {
      this._pShadingRatePaletteEntries = null;
    } else {
      throw new TypeError("Invalid type for 'VkShadingRatePaletteNV.pShadingRatePaletteEntries': Expected 'Int32Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkShadingRatePaletteNV.prototype.flush = function flush() {
  
  return true;
};

VkShadingRatePaletteNV.byteLength = 0x10;

VkShadingRatePaletteNV.memoryLayout = Object.freeze({
  shadingRatePaletteEntryCount: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pShadingRatePaletteEntries: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
});
/** VkPipelineViewportShadingRateImageStateCreateInfoNV **/
class VkPipelineViewportShadingRateImageStateCreateInfoNV {
  constructor(opts) {
    
    this._pNext = null;
    
    
    this._pShadingRatePalettes = null;
    this._pShadingRatePalettesNative = null;
    this.memoryBuffer = new ArrayBuffer(VkPipelineViewportShadingRateImageStateCreateInfoNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.shadingRateImageEnable !== void 0) this.shadingRateImageEnable = opts.shadingRateImageEnable;
      if (opts.viewportCount !== void 0) this.viewportCount = opts.viewportCount;
      if (opts.pShadingRatePalettes !== void 0) this.pShadingRatePalettes = opts.pShadingRatePalettes;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get shadingRateImageEnable() {
    return this.memoryView.getUint32(0x10);
  }
  set shadingRateImageEnable(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get viewportCount() {
    return this.memoryView.getUint32(0x14);
  }
  set viewportCount(value) {
    this.memoryView.setUint32(0x14, value);
  }
  get pShadingRatePalettes() {
    return this._pShadingRatePalettes;
  }
  set pShadingRatePalettes(value) {
    if (value !== null && value.constructor === Array) {
      this._pShadingRatePalettes = value;
    } else if (value === null) {
      this._pShadingRatePalettes = null;
    } else {
      throw new TypeError("Invalid type for 'VkPipelineViewportShadingRateImageStateCreateInfoNV.pShadingRatePalettes': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkPipelineViewportShadingRateImageStateCreateInfoNV.prototype.flush = function flush() {
  
  
  
  
  if (this._pShadingRatePalettes !== null) {
    let nativeArray = new NativeObjectArray(this._pShadingRatePalettes);
    this._pShadingRatePalettesNative = nativeArray;
    this.memoryView.setBigInt64(0x18, nativeArray.address);
  }
  
  return true;
};

VkPipelineViewportShadingRateImageStateCreateInfoNV.byteLength = 0x20;

VkPipelineViewportShadingRateImageStateCreateInfoNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  shadingRateImageEnable: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  viewportCount: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  pShadingRatePalettes: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkPhysicalDeviceShadingRateImageFeaturesNV **/
class VkPhysicalDeviceShadingRateImageFeaturesNV {
  constructor(opts) {
    
    this._pNext = null;
    
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceShadingRateImageFeaturesNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.shadingRateImage !== void 0) this.shadingRateImage = opts.shadingRateImage;
      if (opts.shadingRateCoarseSampleOrder !== void 0) this.shadingRateCoarseSampleOrder = opts.shadingRateCoarseSampleOrder;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get shadingRateImage() {
    return this.memoryView.getUint32(0x10);
  }
  set shadingRateImage(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get shadingRateCoarseSampleOrder() {
    return this.memoryView.getUint32(0x14);
  }
  set shadingRateCoarseSampleOrder(value) {
    this.memoryView.setUint32(0x14, value);
  }
  
};

VkPhysicalDeviceShadingRateImageFeaturesNV.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceShadingRateImageFeaturesNV.byteLength = 0x18;

VkPhysicalDeviceShadingRateImageFeaturesNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  shadingRateImage: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  shadingRateCoarseSampleOrder: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceShadingRateImagePropertiesNV **/
class VkPhysicalDeviceShadingRateImagePropertiesNV {
  constructor(opts) {
    
    this._pNext = null;
    this._shadingRateTexelSize = null;
    
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceShadingRateImagePropertiesNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get shadingRateTexelSize() {
    return this._shadingRateTexelSize;
  }
  get shadingRatePaletteSize() {
    return this.memoryView.getUint32(0x18);
  }
  get shadingRateMaxCoarseSamples() {
    return this.memoryView.getUint32(0x1C);
  }
  
};

VkPhysicalDeviceShadingRateImagePropertiesNV.prototype.flush = function flush() {
  
  
  
  
  
  return true;
};

VkPhysicalDeviceShadingRateImagePropertiesNV.byteLength = 0x20;

VkPhysicalDeviceShadingRateImagePropertiesNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  shadingRateTexelSize: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  shadingRatePaletteSize: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  shadingRateMaxCoarseSamples: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
});
/** VkCoarseSampleLocationNV **/
class VkCoarseSampleLocationNV {
  constructor(opts) {
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkCoarseSampleLocationNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.pixelX !== void 0) this.pixelX = opts.pixelX;
      if (opts.pixelY !== void 0) this.pixelY = opts.pixelY;
      if (opts.sample !== void 0) this.sample = opts.sample;
      
    }
  }
  get pixelX() {
    return this.memoryView.getUint32(0x0);
  }
  set pixelX(value) {
    this.memoryView.setUint32(0x0, value);
  }
  get pixelY() {
    return this.memoryView.getUint32(0x4);
  }
  set pixelY(value) {
    this.memoryView.setUint32(0x4, value);
  }
  get sample() {
    return this.memoryView.getUint32(0x8);
  }
  set sample(value) {
    this.memoryView.setUint32(0x8, value);
  }
  
};

VkCoarseSampleLocationNV.prototype.flush = function flush() {
  
  return true;
};

VkCoarseSampleLocationNV.byteLength = 0xC;

VkCoarseSampleLocationNV.memoryLayout = Object.freeze({
  pixelX: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pixelY: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  sample: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
});
/** VkCoarseSampleOrderCustomNV **/
class VkCoarseSampleOrderCustomNV {
  constructor(opts) {
    
    
    
    this._pSampleLocations = null;
    this._pSampleLocationsNative = null;
    this.memoryBuffer = new ArrayBuffer(VkCoarseSampleOrderCustomNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.shadingRate !== void 0) this.shadingRate = opts.shadingRate;
      if (opts.sampleCount !== void 0) this.sampleCount = opts.sampleCount;
      if (opts.sampleLocationCount !== void 0) this.sampleLocationCount = opts.sampleLocationCount;
      if (opts.pSampleLocations !== void 0) this.pSampleLocations = opts.pSampleLocations;
      
    }
  }
  get shadingRate() {
    return this.memoryView.getInt32(0x0);
  }
  set shadingRate(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get sampleCount() {
    return this.memoryView.getUint32(0x4);
  }
  set sampleCount(value) {
    this.memoryView.setUint32(0x4, value);
  }
  get sampleLocationCount() {
    return this.memoryView.getUint32(0x8);
  }
  set sampleLocationCount(value) {
    this.memoryView.setUint32(0x8, value);
  }
  get pSampleLocations() {
    return this._pSampleLocations;
  }
  set pSampleLocations(value) {
    if (value !== null && value.constructor === Array) {
      this._pSampleLocations = value;
    } else if (value === null) {
      this._pSampleLocations = null;
    } else {
      throw new TypeError("Invalid type for 'VkCoarseSampleOrderCustomNV.pSampleLocations': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkCoarseSampleOrderCustomNV.prototype.flush = function flush() {
  
  
  if (this._pSampleLocations !== null) {
    let nativeArray = new NativeObjectArray(this._pSampleLocations);
    this._pSampleLocationsNative = nativeArray;
    this.memoryView.setBigInt64(0x10, nativeArray.address);
  }
  
  return true;
};

VkCoarseSampleOrderCustomNV.byteLength = 0x18;

VkCoarseSampleOrderCustomNV.memoryLayout = Object.freeze({
  shadingRate: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  sampleCount: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  sampleLocationCount: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
  pSampleLocations: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
});
/** VkPipelineViewportCoarseSampleOrderStateCreateInfoNV **/
class VkPipelineViewportCoarseSampleOrderStateCreateInfoNV {
  constructor(opts) {
    
    this._pNext = null;
    
    
    this._pCustomSampleOrders = null;
    this._pCustomSampleOrdersNative = null;
    this.memoryBuffer = new ArrayBuffer(VkPipelineViewportCoarseSampleOrderStateCreateInfoNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.sampleOrderType !== void 0) this.sampleOrderType = opts.sampleOrderType;
      if (opts.customSampleOrderCount !== void 0) this.customSampleOrderCount = opts.customSampleOrderCount;
      if (opts.pCustomSampleOrders !== void 0) this.pCustomSampleOrders = opts.pCustomSampleOrders;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get sampleOrderType() {
    return this.memoryView.getInt32(0x10);
  }
  set sampleOrderType(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get customSampleOrderCount() {
    return this.memoryView.getUint32(0x14);
  }
  set customSampleOrderCount(value) {
    this.memoryView.setUint32(0x14, value);
  }
  get pCustomSampleOrders() {
    return this._pCustomSampleOrders;
  }
  set pCustomSampleOrders(value) {
    if (value !== null && value.constructor === Array) {
      this._pCustomSampleOrders = value;
    } else if (value === null) {
      this._pCustomSampleOrders = null;
    } else {
      throw new TypeError("Invalid type for 'VkPipelineViewportCoarseSampleOrderStateCreateInfoNV.pCustomSampleOrders': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkPipelineViewportCoarseSampleOrderStateCreateInfoNV.prototype.flush = function flush() {
  
  
  
  
  if (this._pCustomSampleOrders !== null) {
    let nativeArray = new NativeObjectArray(this._pCustomSampleOrders);
    this._pCustomSampleOrdersNative = nativeArray;
    this.memoryView.setBigInt64(0x18, nativeArray.address);
  }
  
  return true;
};

VkPipelineViewportCoarseSampleOrderStateCreateInfoNV.byteLength = 0x20;

VkPipelineViewportCoarseSampleOrderStateCreateInfoNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  sampleOrderType: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  customSampleOrderCount: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  pCustomSampleOrders: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkPhysicalDeviceMeshShaderFeaturesNV **/
class VkPhysicalDeviceMeshShaderFeaturesNV {
  constructor(opts) {
    
    this._pNext = null;
    
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceMeshShaderFeaturesNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.taskShader !== void 0) this.taskShader = opts.taskShader;
      if (opts.meshShader !== void 0) this.meshShader = opts.meshShader;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get taskShader() {
    return this.memoryView.getUint32(0x10);
  }
  set taskShader(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get meshShader() {
    return this.memoryView.getUint32(0x14);
  }
  set meshShader(value) {
    this.memoryView.setUint32(0x14, value);
  }
  
};

VkPhysicalDeviceMeshShaderFeaturesNV.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceMeshShaderFeaturesNV.byteLength = 0x18;

VkPhysicalDeviceMeshShaderFeaturesNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  taskShader: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  meshShader: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceMeshShaderPropertiesNV **/
class VkPhysicalDeviceMeshShaderPropertiesNV {
  constructor(opts) {
    
    this._pNext = null;
    
    
    this._maxTaskWorkGroupSize = null;
    
    
    
    this._maxMeshWorkGroupSize = null;
    
    
    
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceMeshShaderPropertiesNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get maxDrawMeshTasksCount() {
    return this.memoryView.getUint32(0x10);
  }
  get maxTaskWorkGroupInvocations() {
    return this.memoryView.getUint32(0x14);
  }
  get maxTaskWorkGroupSize() {
    return this._maxTaskWorkGroupSize;
  }
  get maxTaskTotalMemorySize() {
    return this.memoryView.getUint32(0x24);
  }
  get maxTaskOutputCount() {
    return this.memoryView.getUint32(0x28);
  }
  get maxMeshWorkGroupInvocations() {
    return this.memoryView.getUint32(0x2C);
  }
  get maxMeshWorkGroupSize() {
    return this._maxMeshWorkGroupSize;
  }
  get maxMeshTotalMemorySize() {
    return this.memoryView.getUint32(0x3C);
  }
  get maxMeshOutputVertices() {
    return this.memoryView.getUint32(0x40);
  }
  get maxMeshOutputPrimitives() {
    return this.memoryView.getUint32(0x44);
  }
  get maxMeshMultiviewViewCount() {
    return this.memoryView.getUint32(0x48);
  }
  get meshOutputPerVertexGranularity() {
    return this.memoryView.getUint32(0x4C);
  }
  get meshOutputPerPrimitiveGranularity() {
    return this.memoryView.getUint32(0x50);
  }
  
};

VkPhysicalDeviceMeshShaderPropertiesNV.prototype.flush = function flush() {
  
  
  
  
  if (this._maxTaskWorkGroupSize !== null) {
    let array = this._maxTaskWorkGroupSize;
    for (let ii = 0; ii < array.length; ++ii) {
      this.memoryView.setUint32(0x18, array[ii]);
    };
  }
  
  
  if (this._maxMeshWorkGroupSize !== null) {
    let array = this._maxMeshWorkGroupSize;
    for (let ii = 0; ii < array.length; ++ii) {
      this.memoryView.setUint32(0x30, array[ii]);
    };
  }
  
  return true;
};

VkPhysicalDeviceMeshShaderPropertiesNV.byteLength = 0x58;

VkPhysicalDeviceMeshShaderPropertiesNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  maxDrawMeshTasksCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  maxTaskWorkGroupInvocations: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  maxTaskWorkGroupSize: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0xC
  }),
  maxTaskTotalMemorySize: Object.freeze({
    byteOffset: 0x24,
    byteLength: 0x4
  }),
  maxTaskOutputCount: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x4
  }),
  maxMeshWorkGroupInvocations: Object.freeze({
    byteOffset: 0x2C,
    byteLength: 0x4
  }),
  maxMeshWorkGroupSize: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0xC
  }),
  maxMeshTotalMemorySize: Object.freeze({
    byteOffset: 0x3C,
    byteLength: 0x4
  }),
  maxMeshOutputVertices: Object.freeze({
    byteOffset: 0x40,
    byteLength: 0x4
  }),
  maxMeshOutputPrimitives: Object.freeze({
    byteOffset: 0x44,
    byteLength: 0x4
  }),
  maxMeshMultiviewViewCount: Object.freeze({
    byteOffset: 0x48,
    byteLength: 0x4
  }),
  meshOutputPerVertexGranularity: Object.freeze({
    byteOffset: 0x4C,
    byteLength: 0x4
  }),
  meshOutputPerPrimitiveGranularity: Object.freeze({
    byteOffset: 0x50,
    byteLength: 0x4
  }),
});
/** VkDrawMeshTasksIndirectCommandNV **/
class VkDrawMeshTasksIndirectCommandNV {
  constructor(opts) {
    
    
    this.memoryBuffer = new ArrayBuffer(VkDrawMeshTasksIndirectCommandNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.taskCount !== void 0) this.taskCount = opts.taskCount;
      if (opts.firstTask !== void 0) this.firstTask = opts.firstTask;
      
    }
  }
  get taskCount() {
    return this.memoryView.getUint32(0x0);
  }
  set taskCount(value) {
    this.memoryView.setUint32(0x0, value);
  }
  get firstTask() {
    return this.memoryView.getUint32(0x4);
  }
  set firstTask(value) {
    this.memoryView.setUint32(0x4, value);
  }
  
};

VkDrawMeshTasksIndirectCommandNV.prototype.flush = function flush() {
  
  return true;
};

VkDrawMeshTasksIndirectCommandNV.byteLength = 0x8;

VkDrawMeshTasksIndirectCommandNV.memoryLayout = Object.freeze({
  taskCount: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  firstTask: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
});
/** VkRayTracingShaderGroupCreateInfoNV **/
class VkRayTracingShaderGroupCreateInfoNV {
  constructor(opts) {
    
    this._pNext = null;
    
    
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkRayTracingShaderGroupCreateInfoNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.type !== void 0) this.type = opts.type;
      if (opts.generalShader !== void 0) this.generalShader = opts.generalShader;
      if (opts.closestHitShader !== void 0) this.closestHitShader = opts.closestHitShader;
      if (opts.anyHitShader !== void 0) this.anyHitShader = opts.anyHitShader;
      if (opts.intersectionShader !== void 0) this.intersectionShader = opts.intersectionShader;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get type() {
    return this.memoryView.getInt32(0x10);
  }
  set type(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get generalShader() {
    return this.memoryView.getUint32(0x14);
  }
  set generalShader(value) {
    this.memoryView.setUint32(0x14, value);
  }
  get closestHitShader() {
    return this.memoryView.getUint32(0x18);
  }
  set closestHitShader(value) {
    this.memoryView.setUint32(0x18, value);
  }
  get anyHitShader() {
    return this.memoryView.getUint32(0x1C);
  }
  set anyHitShader(value) {
    this.memoryView.setUint32(0x1C, value);
  }
  get intersectionShader() {
    return this.memoryView.getUint32(0x20);
  }
  set intersectionShader(value) {
    this.memoryView.setUint32(0x20, value);
  }
  
};

VkRayTracingShaderGroupCreateInfoNV.prototype.flush = function flush() {
  
  
  
  return true;
};

VkRayTracingShaderGroupCreateInfoNV.byteLength = 0x28;

VkRayTracingShaderGroupCreateInfoNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  type: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  generalShader: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  closestHitShader: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  anyHitShader: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  intersectionShader: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
});
/** VkRayTracingPipelineCreateInfoNV **/
class VkRayTracingPipelineCreateInfoNV {
  constructor(opts) {
    
    this._pNext = null;
    
    
    this._pStages = null;
    this._pStagesNative = null;
    
    this._pGroups = null;
    this._pGroupsNative = null;
    
    this._layout = null;
    this._basePipelineHandle = null;
    
    this.memoryBuffer = new ArrayBuffer(VkRayTracingPipelineCreateInfoNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.stageCount !== void 0) this.stageCount = opts.stageCount;
      if (opts.pStages !== void 0) this.pStages = opts.pStages;
      if (opts.groupCount !== void 0) this.groupCount = opts.groupCount;
      if (opts.pGroups !== void 0) this.pGroups = opts.pGroups;
      if (opts.maxRecursionDepth !== void 0) this.maxRecursionDepth = opts.maxRecursionDepth;
      if (opts.layout !== void 0) this.layout = opts.layout;
      if (opts.basePipelineHandle !== void 0) this.basePipelineHandle = opts.basePipelineHandle;
      if (opts.basePipelineIndex !== void 0) this.basePipelineIndex = opts.basePipelineIndex;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get flags() {
    return this.memoryView.getInt32(0x10);
  }
  set flags(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get stageCount() {
    return this.memoryView.getUint32(0x14);
  }
  set stageCount(value) {
    this.memoryView.setUint32(0x14, value);
  }
  get pStages() {
    return this._pStages;
  }
  set pStages(value) {
    if (value !== null && value.constructor === Array) {
      this._pStages = value;
    } else if (value === null) {
      this._pStages = null;
    } else {
      throw new TypeError("Invalid type for 'VkRayTracingPipelineCreateInfoNV.pStages': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get groupCount() {
    return this.memoryView.getUint32(0x20);
  }
  set groupCount(value) {
    this.memoryView.setUint32(0x20, value);
  }
  get pGroups() {
    return this._pGroups;
  }
  set pGroups(value) {
    if (value !== null && value.constructor === Array) {
      this._pGroups = value;
    } else if (value === null) {
      this._pGroups = null;
    } else {
      throw new TypeError("Invalid type for 'VkRayTracingPipelineCreateInfoNV.pGroups': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get maxRecursionDepth() {
    return this.memoryView.getUint32(0x30);
  }
  set maxRecursionDepth(value) {
    this.memoryView.setUint32(0x30, value);
  }
  get layout() {
    return this._layout;
  }
  set layout(value) {
    if (value !== null && value.constructor === VkPipelineLayout) {
      value.flush();
      this._layout = value;
      this.memoryView.setBigInt64(0x38, value.memoryAddress);
    } else if (value === null) {
      this._layout = null;
    } else {
      throw new TypeError("Invalid type for 'VkRayTracingPipelineCreateInfoNV.layout': Expected 'VkPipelineLayout' but got '" + value.constructor.name + "'");
    }
  }
  get basePipelineHandle() {
    return this._basePipelineHandle;
  }
  set basePipelineHandle(value) {
    if (value !== null && value.constructor === VkPipeline) {
      value.flush();
      this._basePipelineHandle = value;
      this.memoryView.setBigInt64(0x40, value.memoryAddress);
    } else if (value === null) {
      this._basePipelineHandle = null;
    } else {
      throw new TypeError("Invalid type for 'VkRayTracingPipelineCreateInfoNV.basePipelineHandle': Expected 'VkPipeline' but got '" + value.constructor.name + "'");
    }
  }
  get basePipelineIndex() {
    return this.memoryView.getInt32(0x48);
  }
  set basePipelineIndex(value) {
    this.memoryView.setInt32(0x48, value);
  }
  
};

VkRayTracingPipelineCreateInfoNV.prototype.flush = function flush() {
  
  
  
  
  if (this._pStages !== null) {
    let nativeArray = new NativeObjectArray(this._pStages);
    this._pStagesNative = nativeArray;
    this.memoryView.setBigInt64(0x18, nativeArray.address);
  }
  
  
  if (this._pGroups !== null) {
    let nativeArray = new NativeObjectArray(this._pGroups);
    this._pGroupsNative = nativeArray;
    this.memoryView.setBigInt64(0x28, nativeArray.address);
  }
  
  return true;
};

VkRayTracingPipelineCreateInfoNV.byteLength = 0x50;

VkRayTracingPipelineCreateInfoNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  stageCount: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  pStages: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  groupCount: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  pGroups: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
  maxRecursionDepth: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  layout: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x8
  }),
  basePipelineHandle: Object.freeze({
    byteOffset: 0x40,
    byteLength: 0x8
  }),
  basePipelineIndex: Object.freeze({
    byteOffset: 0x48,
    byteLength: 0x4
  }),
});
/** VkGeometryTrianglesNV **/
class VkGeometryTrianglesNV {
  constructor(opts) {
    
    this._pNext = null;
    this._vertexData = null;
    
    
    
    
    this._indexData = null;
    
    
    
    this._transformData = null;
    
    this.memoryBuffer = new ArrayBuffer(VkGeometryTrianglesNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.vertexData !== void 0) this.vertexData = opts.vertexData;
      if (opts.vertexOffset !== void 0) this.vertexOffset = opts.vertexOffset;
      if (opts.vertexCount !== void 0) this.vertexCount = opts.vertexCount;
      if (opts.vertexStride !== void 0) this.vertexStride = opts.vertexStride;
      if (opts.vertexFormat !== void 0) this.vertexFormat = opts.vertexFormat;
      if (opts.indexData !== void 0) this.indexData = opts.indexData;
      if (opts.indexOffset !== void 0) this.indexOffset = opts.indexOffset;
      if (opts.indexCount !== void 0) this.indexCount = opts.indexCount;
      if (opts.indexType !== void 0) this.indexType = opts.indexType;
      if (opts.transformData !== void 0) this.transformData = opts.transformData;
      if (opts.transformOffset !== void 0) this.transformOffset = opts.transformOffset;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get vertexData() {
    return this._vertexData;
  }
  set vertexData(value) {
    if (value !== null && value.constructor === VkBuffer) {
      value.flush();
      this._vertexData = value;
      this.memoryView.setBigInt64(0x10, value.memoryAddress);
    } else if (value === null) {
      this._vertexData = null;
    } else {
      throw new TypeError("Invalid type for 'VkGeometryTrianglesNV.vertexData': Expected 'VkBuffer' but got '" + value.constructor.name + "'");
    }
  }
  get vertexOffset() {
    return this.memoryView.getBigUint64(0x18);
  }
  set vertexOffset(value) {
    this.memoryView.setBigUint64(0x18, value);
  }
  get vertexCount() {
    return this.memoryView.getUint32(0x20);
  }
  set vertexCount(value) {
    this.memoryView.setUint32(0x20, value);
  }
  get vertexStride() {
    return this.memoryView.getBigUint64(0x28);
  }
  set vertexStride(value) {
    this.memoryView.setBigUint64(0x28, value);
  }
  get vertexFormat() {
    return this.memoryView.getInt32(0x30);
  }
  set vertexFormat(value) {
    this.memoryView.setInt32(0x30, value);
  }
  get indexData() {
    return this._indexData;
  }
  set indexData(value) {
    if (value !== null && value.constructor === VkBuffer) {
      value.flush();
      this._indexData = value;
      this.memoryView.setBigInt64(0x38, value.memoryAddress);
    } else if (value === null) {
      this._indexData = null;
    } else {
      throw new TypeError("Invalid type for 'VkGeometryTrianglesNV.indexData': Expected 'VkBuffer' but got '" + value.constructor.name + "'");
    }
  }
  get indexOffset() {
    return this.memoryView.getBigUint64(0x40);
  }
  set indexOffset(value) {
    this.memoryView.setBigUint64(0x40, value);
  }
  get indexCount() {
    return this.memoryView.getUint32(0x48);
  }
  set indexCount(value) {
    this.memoryView.setUint32(0x48, value);
  }
  get indexType() {
    return this.memoryView.getInt32(0x4C);
  }
  set indexType(value) {
    this.memoryView.setInt32(0x4C, value);
  }
  get transformData() {
    return this._transformData;
  }
  set transformData(value) {
    if (value !== null && value.constructor === VkBuffer) {
      value.flush();
      this._transformData = value;
      this.memoryView.setBigInt64(0x50, value.memoryAddress);
    } else if (value === null) {
      this._transformData = null;
    } else {
      throw new TypeError("Invalid type for 'VkGeometryTrianglesNV.transformData': Expected 'VkBuffer' but got '" + value.constructor.name + "'");
    }
  }
  get transformOffset() {
    return this.memoryView.getBigUint64(0x58);
  }
  set transformOffset(value) {
    this.memoryView.setBigUint64(0x58, value);
  }
  
};

VkGeometryTrianglesNV.prototype.flush = function flush() {
  
  
  
  return true;
};

VkGeometryTrianglesNV.byteLength = 0x60;

VkGeometryTrianglesNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  vertexData: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  vertexOffset: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  vertexCount: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  vertexStride: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
  vertexFormat: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  indexData: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x8
  }),
  indexOffset: Object.freeze({
    byteOffset: 0x40,
    byteLength: 0x8
  }),
  indexCount: Object.freeze({
    byteOffset: 0x48,
    byteLength: 0x4
  }),
  indexType: Object.freeze({
    byteOffset: 0x4C,
    byteLength: 0x4
  }),
  transformData: Object.freeze({
    byteOffset: 0x50,
    byteLength: 0x8
  }),
  transformOffset: Object.freeze({
    byteOffset: 0x58,
    byteLength: 0x8
  }),
});
/** VkGeometryAABBNV **/
class VkGeometryAABBNV {
  constructor(opts) {
    
    this._pNext = null;
    this._aabbData = null;
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkGeometryAABBNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.aabbData !== void 0) this.aabbData = opts.aabbData;
      if (opts.numAABBs !== void 0) this.numAABBs = opts.numAABBs;
      if (opts.stride !== void 0) this.stride = opts.stride;
      if (opts.offset !== void 0) this.offset = opts.offset;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get aabbData() {
    return this._aabbData;
  }
  set aabbData(value) {
    if (value !== null && value.constructor === VkBuffer) {
      value.flush();
      this._aabbData = value;
      this.memoryView.setBigInt64(0x10, value.memoryAddress);
    } else if (value === null) {
      this._aabbData = null;
    } else {
      throw new TypeError("Invalid type for 'VkGeometryAABBNV.aabbData': Expected 'VkBuffer' but got '" + value.constructor.name + "'");
    }
  }
  get numAABBs() {
    return this.memoryView.getUint32(0x18);
  }
  set numAABBs(value) {
    this.memoryView.setUint32(0x18, value);
  }
  get stride() {
    return this.memoryView.getUint32(0x1C);
  }
  set stride(value) {
    this.memoryView.setUint32(0x1C, value);
  }
  get offset() {
    return this.memoryView.getBigUint64(0x20);
  }
  set offset(value) {
    this.memoryView.setBigUint64(0x20, value);
  }
  
};

VkGeometryAABBNV.prototype.flush = function flush() {
  
  
  
  return true;
};

VkGeometryAABBNV.byteLength = 0x28;

VkGeometryAABBNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  aabbData: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  numAABBs: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  stride: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  offset: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
});
/** VkGeometryDataNV **/
class VkGeometryDataNV {
  constructor(opts) {
    this._triangles = null;
    this._aabbs = null;
    this.memoryBuffer = new ArrayBuffer(VkGeometryDataNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.triangles !== void 0) this.triangles = opts.triangles;
      if (opts.aabbs !== void 0) this.aabbs = opts.aabbs;
      
    }
  }
  get triangles() {
    return this._triangles;
  }
  set triangles(value) {
    if (value !== null && value.constructor === VkGeometryTrianglesNV) {
      value.flush();
      this._triangles = value;
      this.memoryView.setBigInt64(0x0, value.memoryAddress);
    } else if (value === null) {
      this._triangles = null;
    } else {
      throw new TypeError("Invalid type for 'VkGeometryDataNV.triangles': Expected 'VkGeometryTrianglesNV' but got '" + value.constructor.name + "'");
    }
  }
  get aabbs() {
    return this._aabbs;
  }
  set aabbs(value) {
    if (value !== null && value.constructor === VkGeometryAABBNV) {
      value.flush();
      this._aabbs = value;
      this.memoryView.setBigInt64(0x60, value.memoryAddress);
    } else if (value === null) {
      this._aabbs = null;
    } else {
      throw new TypeError("Invalid type for 'VkGeometryDataNV.aabbs': Expected 'VkGeometryAABBNV' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkGeometryDataNV.prototype.flush = function flush() {
  
  
  
  
  
  return true;
};

VkGeometryDataNV.byteLength = 0x88;

VkGeometryDataNV.memoryLayout = Object.freeze({
  triangles: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x60
  }),
  aabbs: Object.freeze({
    byteOffset: 0x60,
    byteLength: 0x28
  }),
});
/** VkGeometryNV **/
class VkGeometryNV {
  constructor(opts) {
    
    this._pNext = null;
    
    this._geometry = null;
    
    this.memoryBuffer = new ArrayBuffer(VkGeometryNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_GEOMETRY_NV;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.geometryType !== void 0) this.geometryType = opts.geometryType;
      if (opts.geometry !== void 0) this.geometry = opts.geometry;
      if (opts.flags !== void 0) this.flags = opts.flags;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get geometryType() {
    return this.memoryView.getInt32(0x10);
  }
  set geometryType(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get geometry() {
    return this._geometry;
  }
  set geometry(value) {
    if (value !== null && value.constructor === VkGeometryDataNV) {
      value.flush();
      this._geometry = value;
      this.memoryView.setBigInt64(0x18, value.memoryAddress);
    } else if (value === null) {
      this._geometry = null;
    } else {
      throw new TypeError("Invalid type for 'VkGeometryNV.geometry': Expected 'VkGeometryDataNV' but got '" + value.constructor.name + "'");
    }
  }
  get flags() {
    return this.memoryView.getInt32(0xA0);
  }
  set flags(value) {
    this.memoryView.setInt32(0xA0, value);
  }
  
};

VkGeometryNV.prototype.flush = function flush() {
  
  
  
  
  
  return true;
};

VkGeometryNV.byteLength = 0xA8;

VkGeometryNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  geometryType: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  geometry: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x88
  }),
  flags: Object.freeze({
    byteOffset: 0xA0,
    byteLength: 0x4
  }),
});
/** VkAccelerationStructureInfoNV **/
class VkAccelerationStructureInfoNV {
  constructor(opts) {
    
    this._pNext = null;
    
    
    
    
    this._pGeometries = null;
    this._pGeometriesNative = null;
    this.memoryBuffer = new ArrayBuffer(VkAccelerationStructureInfoNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.type !== void 0) this.type = opts.type;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.instanceCount !== void 0) this.instanceCount = opts.instanceCount;
      if (opts.geometryCount !== void 0) this.geometryCount = opts.geometryCount;
      if (opts.pGeometries !== void 0) this.pGeometries = opts.pGeometries;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get type() {
    return this.memoryView.getInt32(0x10);
  }
  set type(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get flags() {
    return this.memoryView.getInt32(0x14);
  }
  set flags(value) {
    this.memoryView.setInt32(0x14, value);
  }
  get instanceCount() {
    return this.memoryView.getUint32(0x18);
  }
  set instanceCount(value) {
    this.memoryView.setUint32(0x18, value);
  }
  get geometryCount() {
    return this.memoryView.getUint32(0x1C);
  }
  set geometryCount(value) {
    this.memoryView.setUint32(0x1C, value);
  }
  get pGeometries() {
    return this._pGeometries;
  }
  set pGeometries(value) {
    if (value !== null && value.constructor === Array) {
      this._pGeometries = value;
    } else if (value === null) {
      this._pGeometries = null;
    } else {
      throw new TypeError("Invalid type for 'VkAccelerationStructureInfoNV.pGeometries': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkAccelerationStructureInfoNV.prototype.flush = function flush() {
  
  
  
  
  if (this._pGeometries !== null) {
    let nativeArray = new NativeObjectArray(this._pGeometries);
    this._pGeometriesNative = nativeArray;
    this.memoryView.setBigInt64(0x20, nativeArray.address);
  }
  
  return true;
};

VkAccelerationStructureInfoNV.byteLength = 0x28;

VkAccelerationStructureInfoNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  type: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  flags: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  instanceCount: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  geometryCount: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  pGeometries: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
});
/** VkAccelerationStructureCreateInfoNV **/
class VkAccelerationStructureCreateInfoNV {
  constructor(opts) {
    
    this._pNext = null;
    
    this._info = null;
    this.memoryBuffer = new ArrayBuffer(VkAccelerationStructureCreateInfoNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.compactedSize !== void 0) this.compactedSize = opts.compactedSize;
      if (opts.info !== void 0) this.info = opts.info;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get compactedSize() {
    return this.memoryView.getBigUint64(0x10);
  }
  set compactedSize(value) {
    this.memoryView.setBigUint64(0x10, value);
  }
  get info() {
    return this._info;
  }
  set info(value) {
    if (value !== null && value.constructor === VkAccelerationStructureInfoNV) {
      value.flush();
      this._info = value;
      this.memoryView.setBigInt64(0x18, value.memoryAddress);
    } else if (value === null) {
      this._info = null;
    } else {
      throw new TypeError("Invalid type for 'VkAccelerationStructureCreateInfoNV.info': Expected 'VkAccelerationStructureInfoNV' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkAccelerationStructureCreateInfoNV.prototype.flush = function flush() {
  
  
  
  
  
  return true;
};

VkAccelerationStructureCreateInfoNV.byteLength = 0x40;

VkAccelerationStructureCreateInfoNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  compactedSize: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  info: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x28
  }),
});
/** VkBindAccelerationStructureMemoryInfoNV **/
class VkBindAccelerationStructureMemoryInfoNV {
  constructor(opts) {
    
    this._pNext = null;
    this._accelerationStructure = null;
    this._memory = null;
    
    
    this._pDeviceIndices = null;
    this.memoryBuffer = new ArrayBuffer(VkBindAccelerationStructureMemoryInfoNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.accelerationStructure !== void 0) this.accelerationStructure = opts.accelerationStructure;
      if (opts.memory !== void 0) this.memory = opts.memory;
      if (opts.memoryOffset !== void 0) this.memoryOffset = opts.memoryOffset;
      if (opts.deviceIndexCount !== void 0) this.deviceIndexCount = opts.deviceIndexCount;
      if (opts.pDeviceIndices !== void 0) this.pDeviceIndices = opts.pDeviceIndices;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get accelerationStructure() {
    return this._accelerationStructure;
  }
  set accelerationStructure(value) {
    if (value !== null && value.constructor === VkAccelerationStructureNV) {
      value.flush();
      this._accelerationStructure = value;
      this.memoryView.setBigInt64(0x10, value.memoryAddress);
    } else if (value === null) {
      this._accelerationStructure = null;
    } else {
      throw new TypeError("Invalid type for 'VkBindAccelerationStructureMemoryInfoNV.accelerationStructure': Expected 'VkAccelerationStructureNV' but got '" + value.constructor.name + "'");
    }
  }
  get memory() {
    return this._memory;
  }
  set memory(value) {
    if (value !== null && value.constructor === VkDeviceMemory) {
      value.flush();
      this._memory = value;
      this.memoryView.setBigInt64(0x18, value.memoryAddress);
    } else if (value === null) {
      this._memory = null;
    } else {
      throw new TypeError("Invalid type for 'VkBindAccelerationStructureMemoryInfoNV.memory': Expected 'VkDeviceMemory' but got '" + value.constructor.name + "'");
    }
  }
  get memoryOffset() {
    return this.memoryView.getBigUint64(0x20);
  }
  set memoryOffset(value) {
    this.memoryView.setBigUint64(0x20, value);
  }
  get deviceIndexCount() {
    return this.memoryView.getUint32(0x28);
  }
  set deviceIndexCount(value) {
    this.memoryView.setUint32(0x28, value);
  }
  get pDeviceIndices() {
    return this._pDeviceIndices;
  }
  set pDeviceIndices(value) {
    if (value !== null && value.constructor === Uint32Array) {
      this._pDeviceIndices = value;
      this.memoryView.setBigInt64(0x30, getAddressFromArrayBuffer(value.buffer));
    } else if (value === null) {
      this._pDeviceIndices = null;
    } else {
      throw new TypeError("Invalid type for 'VkBindAccelerationStructureMemoryInfoNV.pDeviceIndices': Expected 'Uint32Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkBindAccelerationStructureMemoryInfoNV.prototype.flush = function flush() {
  
  
  
  return true;
};

VkBindAccelerationStructureMemoryInfoNV.byteLength = 0x38;

VkBindAccelerationStructureMemoryInfoNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  accelerationStructure: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  memory: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  memoryOffset: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
  deviceIndexCount: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x4
  }),
  pDeviceIndices: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x8
  }),
});
/** VkWriteDescriptorSetAccelerationStructureNV **/
class VkWriteDescriptorSetAccelerationStructureNV {
  constructor(opts) {
    
    this._pNext = null;
    
    this._pAccelerationStructures = null;
    this._pAccelerationStructuresNative = null;
    this.memoryBuffer = new ArrayBuffer(VkWriteDescriptorSetAccelerationStructureNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.accelerationStructureCount !== void 0) this.accelerationStructureCount = opts.accelerationStructureCount;
      if (opts.pAccelerationStructures !== void 0) this.pAccelerationStructures = opts.pAccelerationStructures;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get accelerationStructureCount() {
    return this.memoryView.getUint32(0x10);
  }
  set accelerationStructureCount(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get pAccelerationStructures() {
    return this._pAccelerationStructures;
  }
  set pAccelerationStructures(value) {
    if (value !== null && value.constructor === Array) {
      this._pAccelerationStructures = value;
    } else if (value === null) {
      this._pAccelerationStructures = null;
    } else {
      throw new TypeError("Invalid type for 'VkWriteDescriptorSetAccelerationStructureNV.pAccelerationStructures': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkWriteDescriptorSetAccelerationStructureNV.prototype.flush = function flush() {
  
  
  
  
  if (this._pAccelerationStructures !== null) {
    let nativeArray = new NativeObjectArray(this._pAccelerationStructures);
    this._pAccelerationStructuresNative = nativeArray;
    this.memoryView.setBigInt64(0x18, nativeArray.address);
  }
  
  return true;
};

VkWriteDescriptorSetAccelerationStructureNV.byteLength = 0x20;

VkWriteDescriptorSetAccelerationStructureNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  accelerationStructureCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pAccelerationStructures: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkAccelerationStructureMemoryRequirementsInfoNV **/
class VkAccelerationStructureMemoryRequirementsInfoNV {
  constructor(opts) {
    
    this._pNext = null;
    
    this._accelerationStructure = null;
    this.memoryBuffer = new ArrayBuffer(VkAccelerationStructureMemoryRequirementsInfoNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.type !== void 0) this.type = opts.type;
      if (opts.accelerationStructure !== void 0) this.accelerationStructure = opts.accelerationStructure;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get type() {
    return this.memoryView.getInt32(0x10);
  }
  set type(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get accelerationStructure() {
    return this._accelerationStructure;
  }
  set accelerationStructure(value) {
    if (value !== null && value.constructor === VkAccelerationStructureNV) {
      value.flush();
      this._accelerationStructure = value;
      this.memoryView.setBigInt64(0x18, value.memoryAddress);
    } else if (value === null) {
      this._accelerationStructure = null;
    } else {
      throw new TypeError("Invalid type for 'VkAccelerationStructureMemoryRequirementsInfoNV.accelerationStructure': Expected 'VkAccelerationStructureNV' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkAccelerationStructureMemoryRequirementsInfoNV.prototype.flush = function flush() {
  
  
  
  return true;
};

VkAccelerationStructureMemoryRequirementsInfoNV.byteLength = 0x20;

VkAccelerationStructureMemoryRequirementsInfoNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  type: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  accelerationStructure: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkPhysicalDeviceRayTracingPropertiesNV **/
class VkPhysicalDeviceRayTracingPropertiesNV {
  constructor(opts) {
    
    this._pNext = null;
    
    
    
    
    
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceRayTracingPropertiesNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get shaderGroupHandleSize() {
    return this.memoryView.getUint32(0x10);
  }
  get maxRecursionDepth() {
    return this.memoryView.getUint32(0x14);
  }
  get maxShaderGroupStride() {
    return this.memoryView.getUint32(0x18);
  }
  get shaderGroupBaseAlignment() {
    return this.memoryView.getUint32(0x1C);
  }
  get maxGeometryCount() {
    return this.memoryView.getBigUint64(0x20);
  }
  get maxInstanceCount() {
    return this.memoryView.getBigUint64(0x28);
  }
  get maxTriangleCount() {
    return this.memoryView.getBigUint64(0x30);
  }
  get maxDescriptorSetAccelerationStructures() {
    return this.memoryView.getUint32(0x38);
  }
  
};

VkPhysicalDeviceRayTracingPropertiesNV.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceRayTracingPropertiesNV.byteLength = 0x40;

VkPhysicalDeviceRayTracingPropertiesNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  shaderGroupHandleSize: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  maxRecursionDepth: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  maxShaderGroupStride: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  shaderGroupBaseAlignment: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  maxGeometryCount: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
  maxInstanceCount: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
  maxTriangleCount: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x8
  }),
  maxDescriptorSetAccelerationStructures: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x4
  }),
});
/** VkDrmFormatModifierPropertiesListEXT **/
class VkDrmFormatModifierPropertiesListEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    this._pDrmFormatModifierProperties = null;
    this._pDrmFormatModifierPropertiesNative = null;
    this.memoryBuffer = new ArrayBuffer(VkDrmFormatModifierPropertiesListEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get drmFormatModifierCount() {
    return this.memoryView.getUint32(0x10);
  }
  get pDrmFormatModifierProperties() {
    return this._pDrmFormatModifierProperties;
  }
  
};

VkDrmFormatModifierPropertiesListEXT.prototype.flush = function flush() {
  
  
  
  
  if (this._pDrmFormatModifierProperties !== null) {
    let nativeArray = new NativeObjectArray(this._pDrmFormatModifierProperties);
    this._pDrmFormatModifierPropertiesNative = nativeArray;
    this.memoryView.setBigInt64(0x18, nativeArray.address);
  }
  
  return true;
};

VkDrmFormatModifierPropertiesListEXT.byteLength = 0x20;

VkDrmFormatModifierPropertiesListEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  drmFormatModifierCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pDrmFormatModifierProperties: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkDrmFormatModifierPropertiesEXT **/
class VkDrmFormatModifierPropertiesEXT {
  constructor(opts) {
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkDrmFormatModifierPropertiesEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      
    }
  }
  get drmFormatModifier() {
    return this.memoryView.getBigUint64(0x0);
  }
  get drmFormatModifierPlaneCount() {
    return this.memoryView.getUint32(0x8);
  }
  get drmFormatModifierTilingFeatures() {
    return this.memoryView.getInt32(0xC);
  }
  
};

VkDrmFormatModifierPropertiesEXT.prototype.flush = function flush() {
  
  return true;
};

VkDrmFormatModifierPropertiesEXT.byteLength = 0x10;

VkDrmFormatModifierPropertiesEXT.memoryLayout = Object.freeze({
  drmFormatModifier: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x8
  }),
  drmFormatModifierPlaneCount: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
  drmFormatModifierTilingFeatures: Object.freeze({
    byteOffset: 0xC,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceImageDrmFormatModifierInfoEXT **/
class VkPhysicalDeviceImageDrmFormatModifierInfoEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    
    
    this._pQueueFamilyIndices = null;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceImageDrmFormatModifierInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.drmFormatModifier !== void 0) this.drmFormatModifier = opts.drmFormatModifier;
      if (opts.sharingMode !== void 0) this.sharingMode = opts.sharingMode;
      if (opts.queueFamilyIndexCount !== void 0) this.queueFamilyIndexCount = opts.queueFamilyIndexCount;
      if (opts.pQueueFamilyIndices !== void 0) this.pQueueFamilyIndices = opts.pQueueFamilyIndices;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get drmFormatModifier() {
    return this.memoryView.getBigUint64(0x10);
  }
  set drmFormatModifier(value) {
    this.memoryView.setBigUint64(0x10, value);
  }
  get sharingMode() {
    return this.memoryView.getInt32(0x18);
  }
  set sharingMode(value) {
    this.memoryView.setInt32(0x18, value);
  }
  get queueFamilyIndexCount() {
    return this.memoryView.getUint32(0x1C);
  }
  set queueFamilyIndexCount(value) {
    this.memoryView.setUint32(0x1C, value);
  }
  get pQueueFamilyIndices() {
    return this._pQueueFamilyIndices;
  }
  set pQueueFamilyIndices(value) {
    if (value !== null && value.constructor === Uint32Array) {
      this._pQueueFamilyIndices = value;
      this.memoryView.setBigInt64(0x20, getAddressFromArrayBuffer(value.buffer));
    } else if (value === null) {
      this._pQueueFamilyIndices = null;
    } else {
      throw new TypeError("Invalid type for 'VkPhysicalDeviceImageDrmFormatModifierInfoEXT.pQueueFamilyIndices': Expected 'Uint32Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkPhysicalDeviceImageDrmFormatModifierInfoEXT.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceImageDrmFormatModifierInfoEXT.byteLength = 0x28;

VkPhysicalDeviceImageDrmFormatModifierInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  drmFormatModifier: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  sharingMode: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  queueFamilyIndexCount: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  pQueueFamilyIndices: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
});
/** VkImageDrmFormatModifierListCreateInfoEXT **/
class VkImageDrmFormatModifierListCreateInfoEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    this._pDrmFormatModifiers = null;
    this.memoryBuffer = new ArrayBuffer(VkImageDrmFormatModifierListCreateInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.drmFormatModifierCount !== void 0) this.drmFormatModifierCount = opts.drmFormatModifierCount;
      if (opts.pDrmFormatModifiers !== void 0) this.pDrmFormatModifiers = opts.pDrmFormatModifiers;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get drmFormatModifierCount() {
    return this.memoryView.getUint32(0x10);
  }
  set drmFormatModifierCount(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get pDrmFormatModifiers() {
    return this._pDrmFormatModifiers;
  }
  set pDrmFormatModifiers(value) {
    if (value !== null && value.constructor === BigUint64Array) {
      this._pDrmFormatModifiers = value;
      this.memoryView.setBigInt64(0x18, getAddressFromArrayBuffer(value.buffer));
    } else if (value === null) {
      this._pDrmFormatModifiers = null;
    } else {
      throw new TypeError("Invalid type for 'VkImageDrmFormatModifierListCreateInfoEXT.pDrmFormatModifiers': Expected 'BigUint64Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkImageDrmFormatModifierListCreateInfoEXT.prototype.flush = function flush() {
  
  
  
  return true;
};

VkImageDrmFormatModifierListCreateInfoEXT.byteLength = 0x20;

VkImageDrmFormatModifierListCreateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  drmFormatModifierCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pDrmFormatModifiers: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkImageDrmFormatModifierExplicitCreateInfoEXT **/
class VkImageDrmFormatModifierExplicitCreateInfoEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    
    this._pPlaneLayouts = null;
    this._pPlaneLayoutsNative = null;
    this.memoryBuffer = new ArrayBuffer(VkImageDrmFormatModifierExplicitCreateInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.drmFormatModifier !== void 0) this.drmFormatModifier = opts.drmFormatModifier;
      if (opts.drmFormatModifierPlaneCount !== void 0) this.drmFormatModifierPlaneCount = opts.drmFormatModifierPlaneCount;
      if (opts.pPlaneLayouts !== void 0) this.pPlaneLayouts = opts.pPlaneLayouts;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get drmFormatModifier() {
    return this.memoryView.getBigUint64(0x10);
  }
  set drmFormatModifier(value) {
    this.memoryView.setBigUint64(0x10, value);
  }
  get drmFormatModifierPlaneCount() {
    return this.memoryView.getUint32(0x18);
  }
  set drmFormatModifierPlaneCount(value) {
    this.memoryView.setUint32(0x18, value);
  }
  get pPlaneLayouts() {
    return this._pPlaneLayouts;
  }
  set pPlaneLayouts(value) {
    if (value !== null && value.constructor === Array) {
      this._pPlaneLayouts = value;
    } else if (value === null) {
      this._pPlaneLayouts = null;
    } else {
      throw new TypeError("Invalid type for 'VkImageDrmFormatModifierExplicitCreateInfoEXT.pPlaneLayouts': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkImageDrmFormatModifierExplicitCreateInfoEXT.prototype.flush = function flush() {
  
  
  
  
  if (this._pPlaneLayouts !== null) {
    let nativeArray = new NativeObjectArray(this._pPlaneLayouts);
    this._pPlaneLayoutsNative = nativeArray;
    this.memoryView.setBigInt64(0x20, nativeArray.address);
  }
  
  return true;
};

VkImageDrmFormatModifierExplicitCreateInfoEXT.byteLength = 0x28;

VkImageDrmFormatModifierExplicitCreateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  drmFormatModifier: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  drmFormatModifierPlaneCount: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  pPlaneLayouts: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
});
/** VkImageDrmFormatModifierPropertiesEXT **/
class VkImageDrmFormatModifierPropertiesEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkImageDrmFormatModifierPropertiesEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get drmFormatModifier() {
    return this.memoryView.getBigUint64(0x10);
  }
  
};

VkImageDrmFormatModifierPropertiesEXT.prototype.flush = function flush() {
  
  
  
  return true;
};

VkImageDrmFormatModifierPropertiesEXT.byteLength = 0x18;

VkImageDrmFormatModifierPropertiesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  drmFormatModifier: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
});
/** VkImageStencilUsageCreateInfoEXT **/
class VkImageStencilUsageCreateInfoEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkImageStencilUsageCreateInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.stencilUsage !== void 0) this.stencilUsage = opts.stencilUsage;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get stencilUsage() {
    return this.memoryView.getInt32(0x10);
  }
  set stencilUsage(value) {
    this.memoryView.setInt32(0x10, value);
  }
  
};

VkImageStencilUsageCreateInfoEXT.prototype.flush = function flush() {
  
  
  
  return true;
};

VkImageStencilUsageCreateInfoEXT.byteLength = 0x18;

VkImageStencilUsageCreateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  stencilUsage: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkDeviceMemoryOverallocationCreateInfoAMD **/
class VkDeviceMemoryOverallocationCreateInfoAMD {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkDeviceMemoryOverallocationCreateInfoAMD.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.overallocationBehavior !== void 0) this.overallocationBehavior = opts.overallocationBehavior;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get overallocationBehavior() {
    return this.memoryView.getInt32(0x10);
  }
  set overallocationBehavior(value) {
    this.memoryView.setInt32(0x10, value);
  }
  
};

VkDeviceMemoryOverallocationCreateInfoAMD.prototype.flush = function flush() {
  
  
  
  return true;
};

VkDeviceMemoryOverallocationCreateInfoAMD.byteLength = 0x18;

VkDeviceMemoryOverallocationCreateInfoAMD.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  overallocationBehavior: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceFragmentDensityMapFeaturesEXT **/
class VkPhysicalDeviceFragmentDensityMapFeaturesEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceFragmentDensityMapFeaturesEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get fragmentDensityMap() {
    return this.memoryView.getUint32(0x10);
  }
  get fragmentDensityMapDynamic() {
    return this.memoryView.getUint32(0x14);
  }
  get fragmentDensityMapNonSubsampledImages() {
    return this.memoryView.getUint32(0x18);
  }
  
};

VkPhysicalDeviceFragmentDensityMapFeaturesEXT.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceFragmentDensityMapFeaturesEXT.byteLength = 0x20;

VkPhysicalDeviceFragmentDensityMapFeaturesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  fragmentDensityMap: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  fragmentDensityMapDynamic: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  fragmentDensityMapNonSubsampledImages: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceFragmentDensityMapPropertiesEXT **/
class VkPhysicalDeviceFragmentDensityMapPropertiesEXT {
  constructor(opts) {
    
    this._pNext = null;
    this._minFragmentDensityTexelSize = null;
    this._maxFragmentDensityTexelSize = null;
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceFragmentDensityMapPropertiesEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get minFragmentDensityTexelSize() {
    return this._minFragmentDensityTexelSize;
  }
  get maxFragmentDensityTexelSize() {
    return this._maxFragmentDensityTexelSize;
  }
  get fragmentDensityInvocations() {
    return this.memoryView.getUint32(0x20);
  }
  
};

VkPhysicalDeviceFragmentDensityMapPropertiesEXT.prototype.flush = function flush() {
  
  
  
  
  
  
  
  return true;
};

VkPhysicalDeviceFragmentDensityMapPropertiesEXT.byteLength = 0x28;

VkPhysicalDeviceFragmentDensityMapPropertiesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  minFragmentDensityTexelSize: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  maxFragmentDensityTexelSize: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  fragmentDensityInvocations: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
});
/** VkRenderPassFragmentDensityMapCreateInfoEXT **/
class VkRenderPassFragmentDensityMapCreateInfoEXT {
  constructor(opts) {
    
    this._pNext = null;
    this._fragmentDensityMapAttachment = null;
    this.memoryBuffer = new ArrayBuffer(VkRenderPassFragmentDensityMapCreateInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.fragmentDensityMapAttachment !== void 0) this.fragmentDensityMapAttachment = opts.fragmentDensityMapAttachment;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get fragmentDensityMapAttachment() {
    return this._fragmentDensityMapAttachment;
  }
  set fragmentDensityMapAttachment(value) {
    if (value !== null && value.constructor === VkAttachmentReference) {
      value.flush();
      this._fragmentDensityMapAttachment = value;
      this.memoryView.setBigInt64(0x10, value.memoryAddress);
    } else if (value === null) {
      this._fragmentDensityMapAttachment = null;
    } else {
      throw new TypeError("Invalid type for 'VkRenderPassFragmentDensityMapCreateInfoEXT.fragmentDensityMapAttachment': Expected 'VkAttachmentReference' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkRenderPassFragmentDensityMapCreateInfoEXT.prototype.flush = function flush() {
  
  
  
  
  
  return true;
};

VkRenderPassFragmentDensityMapCreateInfoEXT.byteLength = 0x18;

VkRenderPassFragmentDensityMapCreateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  fragmentDensityMapAttachment: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
});
/** VkPhysicalDeviceScalarBlockLayoutFeaturesEXT **/
class VkPhysicalDeviceScalarBlockLayoutFeaturesEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceScalarBlockLayoutFeaturesEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.scalarBlockLayout !== void 0) this.scalarBlockLayout = opts.scalarBlockLayout;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get scalarBlockLayout() {
    return this.memoryView.getUint32(0x10);
  }
  set scalarBlockLayout(value) {
    this.memoryView.setUint32(0x10, value);
  }
  
};

VkPhysicalDeviceScalarBlockLayoutFeaturesEXT.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceScalarBlockLayoutFeaturesEXT.byteLength = 0x18;

VkPhysicalDeviceScalarBlockLayoutFeaturesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  scalarBlockLayout: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceDepthClipEnableFeaturesEXT **/
class VkPhysicalDeviceDepthClipEnableFeaturesEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceDepthClipEnableFeaturesEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.depthClipEnable !== void 0) this.depthClipEnable = opts.depthClipEnable;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get depthClipEnable() {
    return this.memoryView.getUint32(0x10);
  }
  set depthClipEnable(value) {
    this.memoryView.setUint32(0x10, value);
  }
  
};

VkPhysicalDeviceDepthClipEnableFeaturesEXT.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceDepthClipEnableFeaturesEXT.byteLength = 0x18;

VkPhysicalDeviceDepthClipEnableFeaturesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  depthClipEnable: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPipelineRasterizationDepthClipStateCreateInfoEXT **/
class VkPipelineRasterizationDepthClipStateCreateInfoEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    
    this.memoryBuffer = new ArrayBuffer(VkPipelineRasterizationDepthClipStateCreateInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.depthClipEnable !== void 0) this.depthClipEnable = opts.depthClipEnable;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get flags() {
    return this.memoryView.getInt32(0x10);
  }
  set flags(value) {
    this.memoryView.setInt32(0x10, value);
  }
  get depthClipEnable() {
    return this.memoryView.getUint32(0x14);
  }
  set depthClipEnable(value) {
    this.memoryView.setUint32(0x14, value);
  }
  
};

VkPipelineRasterizationDepthClipStateCreateInfoEXT.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPipelineRasterizationDepthClipStateCreateInfoEXT.byteLength = 0x18;

VkPipelineRasterizationDepthClipStateCreateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  depthClipEnable: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceMemoryBudgetPropertiesEXT **/
class VkPhysicalDeviceMemoryBudgetPropertiesEXT {
  constructor(opts) {
    
    this._pNext = null;
    this._heapBudget = null;
    this._heapUsage = null;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceMemoryBudgetPropertiesEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get heapBudget() {
    return this._heapBudget;
  }
  get heapUsage() {
    return this._heapUsage;
  }
  
};

VkPhysicalDeviceMemoryBudgetPropertiesEXT.prototype.flush = function flush() {
  
  
  
  
  if (this._heapBudget !== null) {
    let array = this._heapBudget;
    for (let ii = 0; ii < array.length; ++ii) {
      this.memoryView.setBigUint64(0x10, array[ii]);
    };
  }
  
  
  if (this._heapUsage !== null) {
    let array = this._heapUsage;
    for (let ii = 0; ii < array.length; ++ii) {
      this.memoryView.setBigUint64(0x90, array[ii]);
    };
  }
  
  return true;
};

VkPhysicalDeviceMemoryBudgetPropertiesEXT.byteLength = 0x110;

VkPhysicalDeviceMemoryBudgetPropertiesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  heapBudget: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x80
  }),
  heapUsage: Object.freeze({
    byteOffset: 0x90,
    byteLength: 0x80
  }),
});
/** VkPhysicalDeviceMemoryPriorityFeaturesEXT **/
class VkPhysicalDeviceMemoryPriorityFeaturesEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceMemoryPriorityFeaturesEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.memoryPriority !== void 0) this.memoryPriority = opts.memoryPriority;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get memoryPriority() {
    return this.memoryView.getUint32(0x10);
  }
  set memoryPriority(value) {
    this.memoryView.setUint32(0x10, value);
  }
  
};

VkPhysicalDeviceMemoryPriorityFeaturesEXT.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceMemoryPriorityFeaturesEXT.byteLength = 0x18;

VkPhysicalDeviceMemoryPriorityFeaturesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  memoryPriority: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkMemoryPriorityAllocateInfoEXT **/
class VkMemoryPriorityAllocateInfoEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkMemoryPriorityAllocateInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.priority !== void 0) this.priority = opts.priority;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get priority() {
    return this.memoryView.getFloat32(0x10);
  }
  set priority(value) {
    this.memoryView.setFloat32(0x10, value);
  }
  
};

VkMemoryPriorityAllocateInfoEXT.prototype.flush = function flush() {
  
  
  
  return true;
};

VkMemoryPriorityAllocateInfoEXT.byteLength = 0x18;

VkMemoryPriorityAllocateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  priority: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceBufferAddressFeaturesEXT **/
class VkPhysicalDeviceBufferAddressFeaturesEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceBufferAddressFeaturesEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.bufferDeviceAddress !== void 0) this.bufferDeviceAddress = opts.bufferDeviceAddress;
      if (opts.bufferDeviceAddressCaptureReplay !== void 0) this.bufferDeviceAddressCaptureReplay = opts.bufferDeviceAddressCaptureReplay;
      if (opts.bufferDeviceAddressMultiDevice !== void 0) this.bufferDeviceAddressMultiDevice = opts.bufferDeviceAddressMultiDevice;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get bufferDeviceAddress() {
    return this.memoryView.getUint32(0x10);
  }
  set bufferDeviceAddress(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get bufferDeviceAddressCaptureReplay() {
    return this.memoryView.getUint32(0x14);
  }
  set bufferDeviceAddressCaptureReplay(value) {
    this.memoryView.setUint32(0x14, value);
  }
  get bufferDeviceAddressMultiDevice() {
    return this.memoryView.getUint32(0x18);
  }
  set bufferDeviceAddressMultiDevice(value) {
    this.memoryView.setUint32(0x18, value);
  }
  
};

VkPhysicalDeviceBufferAddressFeaturesEXT.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceBufferAddressFeaturesEXT.byteLength = 0x20;

VkPhysicalDeviceBufferAddressFeaturesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  bufferDeviceAddress: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  bufferDeviceAddressCaptureReplay: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  bufferDeviceAddressMultiDevice: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
});
/** VkBufferDeviceAddressInfoEXT **/
class VkBufferDeviceAddressInfoEXT {
  constructor(opts) {
    
    this._pNext = null;
    this._buffer = null;
    this.memoryBuffer = new ArrayBuffer(VkBufferDeviceAddressInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.buffer !== void 0) this.buffer = opts.buffer;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get buffer() {
    return this._buffer;
  }
  set buffer(value) {
    if (value !== null && value.constructor === VkBuffer) {
      value.flush();
      this._buffer = value;
      this.memoryView.setBigInt64(0x10, value.memoryAddress);
    } else if (value === null) {
      this._buffer = null;
    } else {
      throw new TypeError("Invalid type for 'VkBufferDeviceAddressInfoEXT.buffer': Expected 'VkBuffer' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkBufferDeviceAddressInfoEXT.prototype.flush = function flush() {
  
  
  
  return true;
};

VkBufferDeviceAddressInfoEXT.byteLength = 0x18;

VkBufferDeviceAddressInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  buffer: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
});
/** VkBufferDeviceAddressCreateInfoEXT **/
class VkBufferDeviceAddressCreateInfoEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkBufferDeviceAddressCreateInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.deviceAddress !== void 0) this.deviceAddress = opts.deviceAddress;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get deviceAddress() {
    return this.memoryView.getBigUint64(0x10);
  }
  set deviceAddress(value) {
    this.memoryView.setBigUint64(0x10, value);
  }
  
};

VkBufferDeviceAddressCreateInfoEXT.prototype.flush = function flush() {
  
  
  
  return true;
};

VkBufferDeviceAddressCreateInfoEXT.byteLength = 0x18;

VkBufferDeviceAddressCreateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  deviceAddress: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
});
/** VkPhysicalDeviceImageViewImageFormatInfoEXT **/
class VkPhysicalDeviceImageViewImageFormatInfoEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceImageViewImageFormatInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.imageViewType !== void 0) this.imageViewType = opts.imageViewType;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get imageViewType() {
    return this.memoryView.getInt32(0x10);
  }
  set imageViewType(value) {
    this.memoryView.setInt32(0x10, value);
  }
  
};

VkPhysicalDeviceImageViewImageFormatInfoEXT.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceImageViewImageFormatInfoEXT.byteLength = 0x18;

VkPhysicalDeviceImageViewImageFormatInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  imageViewType: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkFilterCubicImageViewImageFormatPropertiesEXT **/
class VkFilterCubicImageViewImageFormatPropertiesEXT {
  constructor(opts) {
    
    this._pNext = null;
    
    
    this.memoryBuffer = new ArrayBuffer(VkFilterCubicImageViewImageFormatPropertiesEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get filterCubic() {
    return this.memoryView.getUint32(0x10);
  }
  get filterCubicMinmax() {
    return this.memoryView.getUint32(0x14);
  }
  
};

VkFilterCubicImageViewImageFormatPropertiesEXT.prototype.flush = function flush() {
  
  
  
  return true;
};

VkFilterCubicImageViewImageFormatPropertiesEXT.byteLength = 0x18;

VkFilterCubicImageViewImageFormatPropertiesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  filterCubic: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  filterCubicMinmax: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceCooperativeMatrixFeaturesNV **/
class VkPhysicalDeviceCooperativeMatrixFeaturesNV {
  constructor(opts) {
    
    this._pNext = null;
    
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceCooperativeMatrixFeaturesNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.cooperativeMatrix !== void 0) this.cooperativeMatrix = opts.cooperativeMatrix;
      if (opts.cooperativeMatrixRobustBufferAccess !== void 0) this.cooperativeMatrixRobustBufferAccess = opts.cooperativeMatrixRobustBufferAccess;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get cooperativeMatrix() {
    return this.memoryView.getUint32(0x10);
  }
  set cooperativeMatrix(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get cooperativeMatrixRobustBufferAccess() {
    return this.memoryView.getUint32(0x14);
  }
  set cooperativeMatrixRobustBufferAccess(value) {
    this.memoryView.setUint32(0x14, value);
  }
  
};

VkPhysicalDeviceCooperativeMatrixFeaturesNV.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceCooperativeMatrixFeaturesNV.byteLength = 0x18;

VkPhysicalDeviceCooperativeMatrixFeaturesNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  cooperativeMatrix: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  cooperativeMatrixRobustBufferAccess: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceCooperativeMatrixPropertiesNV **/
class VkPhysicalDeviceCooperativeMatrixPropertiesNV {
  constructor(opts) {
    
    this._pNext = null;
    
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceCooperativeMatrixPropertiesNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get cooperativeMatrixSupportedStages() {
    return this.memoryView.getInt32(0x10);
  }
  
};

VkPhysicalDeviceCooperativeMatrixPropertiesNV.prototype.flush = function flush() {
  
  
  
  return true;
};

VkPhysicalDeviceCooperativeMatrixPropertiesNV.byteLength = 0x18;

VkPhysicalDeviceCooperativeMatrixPropertiesNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  cooperativeMatrixSupportedStages: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkCooperativeMatrixPropertiesNV **/
class VkCooperativeMatrixPropertiesNV {
  constructor(opts) {
    
    this._pNext = null;
    
    
    
    
    
    
    
    
    this.memoryBuffer = new ArrayBuffer(VkCooperativeMatrixPropertiesNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this.sType = VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.MSize !== void 0) this.MSize = opts.MSize;
      if (opts.NSize !== void 0) this.NSize = opts.NSize;
      if (opts.KSize !== void 0) this.KSize = opts.KSize;
      if (opts.AType !== void 0) this.AType = opts.AType;
      if (opts.BType !== void 0) this.BType = opts.BType;
      if (opts.CType !== void 0) this.CType = opts.CType;
      if (opts.DType !== void 0) this.DType = opts.DType;
      if (opts.scope !== void 0) this.scope = opts.scope;
      
    }
  }
  get sType() {
    return this.memoryView.getInt32(0x0);
  }
  set sType(value) {
    this.memoryView.setInt32(0x0, value);
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
  }
  get MSize() {
    return this.memoryView.getUint32(0x10);
  }
  set MSize(value) {
    this.memoryView.setUint32(0x10, value);
  }
  get NSize() {
    return this.memoryView.getUint32(0x14);
  }
  set NSize(value) {
    this.memoryView.setUint32(0x14, value);
  }
  get KSize() {
    return this.memoryView.getUint32(0x18);
  }
  set KSize(value) {
    this.memoryView.setUint32(0x18, value);
  }
  get AType() {
    return this.memoryView.getInt32(0x1C);
  }
  set AType(value) {
    this.memoryView.setInt32(0x1C, value);
  }
  get BType() {
    return this.memoryView.getInt32(0x20);
  }
  set BType(value) {
    this.memoryView.setInt32(0x20, value);
  }
  get CType() {
    return this.memoryView.getInt32(0x24);
  }
  set CType(value) {
    this.memoryView.setInt32(0x24, value);
  }
  get DType() {
    return this.memoryView.getInt32(0x28);
  }
  set DType(value) {
    this.memoryView.setInt32(0x28, value);
  }
  get scope() {
    return this.memoryView.getInt32(0x2C);
  }
  set scope(value) {
    this.memoryView.setInt32(0x2C, value);
  }
  
};

VkCooperativeMatrixPropertiesNV.prototype.flush = function flush() {
  
  
  
  return true;
};

VkCooperativeMatrixPropertiesNV.byteLength = 0x30;

VkCooperativeMatrixPropertiesNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  MSize: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  NSize: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  KSize: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  AType: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  BType: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  CType: Object.freeze({
    byteOffset: 0x24,
    byteLength: 0x4
  }),
  DType: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x4
  }),
  scope: Object.freeze({
    byteOffset: 0x2C,
    byteLength: 0x4
  }),
});
/** VkClearColorValue **/
class VkClearColorValue {
  constructor(opts) {
    this._float32 = null;
    this._int32 = null;
    this._uint32 = null;
    this.memoryBuffer = new ArrayBuffer(VkClearColorValue.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.float32 !== void 0) this.float32 = opts.float32;
      if (opts.int32 !== void 0) this.int32 = opts.int32;
      if (opts.uint32 !== void 0) this.uint32 = opts.uint32;
      
    }
  }
  get float32() {
    return this._float32;
  }
  set float32(value) {
    if (value !== null && value.constructor === Array) {
      this._float32 = value;
    } else if (value === null) {
      this._float32 = null;
    } else {
      throw new TypeError("Invalid type for 'VkClearColorValue.float32': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get int32() {
    return this._int32;
  }
  set int32(value) {
    if (value !== null && value.constructor === Array) {
      this._int32 = value;
    } else if (value === null) {
      this._int32 = null;
    } else {
      throw new TypeError("Invalid type for 'VkClearColorValue.int32': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get uint32() {
    return this._uint32;
  }
  set uint32(value) {
    if (value !== null && value.constructor === Array) {
      this._uint32 = value;
    } else if (value === null) {
      this._uint32 = null;
    } else {
      throw new TypeError("Invalid type for 'VkClearColorValue.uint32': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkClearColorValue.prototype.flush = function flush() {
  
  
  if (this._float32 !== null) {
    let array = this._float32;
    for (let ii = 0; ii < array.length; ++ii) {
      this.memoryView.setFloat32(0x0, array[ii]);
    };
  }
  
  
  if (this._int32 !== null) {
    let array = this._int32;
    for (let ii = 0; ii < array.length; ++ii) {
      this.memoryView.setInt32(0x0, array[ii]);
    };
  }
  
  
  if (this._uint32 !== null) {
    let array = this._uint32;
    for (let ii = 0; ii < array.length; ++ii) {
      this.memoryView.setUint32(0x0, array[ii]);
    };
  }
  
  return true;
};

VkClearColorValue.byteLength = 0x10;

VkClearColorValue.memoryLayout = Object.freeze({
  float32: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x10
  }),
  int32: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x10
  }),
  uint32: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x10
  }),
});
/** VkClearValue **/
class VkClearValue {
  constructor(opts) {
    this._color = null;
    this._depthStencil = null;
    this.memoryBuffer = new ArrayBuffer(VkClearValue.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    if (typeof opts === "object") {
      if (opts.color !== void 0) this.color = opts.color;
      if (opts.depthStencil !== void 0) this.depthStencil = opts.depthStencil;
      
    }
  }
  get color() {
    return this._color;
  }
  set color(value) {
    if (value !== null && value.constructor === VkClearColorValue) {
      value.flush();
      this._color = value;
      this.memoryView.setBigInt64(0x0, value.memoryAddress);
    } else if (value === null) {
      this._color = null;
    } else {
      throw new TypeError("Invalid type for 'VkClearValue.color': Expected 'VkClearColorValue' but got '" + value.constructor.name + "'");
    }
  }
  get depthStencil() {
    return this._depthStencil;
  }
  set depthStencil(value) {
    if (value !== null && value.constructor === VkClearDepthStencilValue) {
      value.flush();
      this._depthStencil = value;
      this.memoryView.setBigInt64(0x0, value.memoryAddress);
    } else if (value === null) {
      this._depthStencil = null;
    } else {
      throw new TypeError("Invalid type for 'VkClearValue.depthStencil': Expected 'VkClearDepthStencilValue' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkClearValue.prototype.flush = function flush() {
  
  
  
  
  
  return true;
};

VkClearValue.byteLength = 0x10;

VkClearValue.memoryLayout = Object.freeze({
  color: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x10
  }),
  depthStencil: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x8
  }),
});
