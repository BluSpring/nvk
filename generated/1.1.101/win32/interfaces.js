/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY nvk v0.3.8
 */

"use strict";

const BI0 = BigInt(0);
const NULLT = String.fromCharCode(0x0);

const textEncoder = new TextEncoder();
const textDecoder = new TextDecoder();

function decodeNullTerminatedUTF8String(view) {
  let terminator = view.indexOf(0x0);
  let subview = view.subarray(0, terminator > -1 ? terminator : view.length);
  return textDecoder.decode(subview);
};

class NativeStringArray {
  constructor(array) {
    this.array = array;
    this.address = BI0;
    let stringBuffers = [];
    let addressView = new BigInt64Array(array.length);
    let addressBuffer = addressView.buffer;
    let addressBufferAddress = getAddressFromArrayBuffer(addressBuffer);
    for (let ii = 0; ii < array.length; ++ii) {
      let strBuffer = textEncoder.encode(array[ii] + NULLT).buffer;
      addressView[ii] = getAddressFromArrayBuffer(strBuffer);
      stringBuffers.push(strBuffer);
    };
    this.address = addressBufferAddress;
    // keep references to prevent deallocation
    this.addressBuffer = addressBuffer;
    this.stringBuffers = stringBuffers;
  }
};

class NativeObjectArray {
  constructor(array) {
    this.array = array;
    this.address = BI0;
    let byteStride = array[0].memoryBuffer.byteLength;
    let objectBuffer = new ArrayBuffer(array.length * byteStride);
    let objectBufferView = new Uint8Array(objectBuffer);
    let objectBufferAddress = getAddressFromArrayBuffer(objectBuffer);
    for (let ii = 0; ii < array.length; ++ii) {
      let byteOffset = ii * byteStride;
      let srcView = new Uint8Array(array[ii].memoryBuffer);
      let dstView = objectBufferView.subarray(byteOffset, byteOffset + byteStride);
      dstView.set(srcView, byteOffset);
    };
    this.address = objectBufferAddress;
    // keep reference to prevent deallocation
    this.objectBuffer = objectBuffer;
  }
};

class NativeObjectReferenceArray {
  constructor(array) {
    this.array = array;
    this.address = BI0;
    let addressView = new BigInt64Array(array.length);
    let addressBuffer = addressView.buffer;
    let addressBufferAddress = getAddressFromArrayBuffer(addressBuffer);
    for (let ii = 0; ii < array.length; ++ii) {
      let object = array[ii];
      let objectAddress = object.address;
      addressView[ii] = objectAddress;
    };
    this.address = addressBufferAddress;
    // keep reference to prevent deallocation
    this.addressBuffer = addressBuffer;
  }
};

const API_Extensions_Strings = {
  VK_AMD_BUFFER_MARKER_EXTENSION_NAME: "VK_AMD_buffer_marker",
  VK_AMD_DRAW_INDIRECT_COUNT_EXTENSION_NAME: "VK_AMD_draw_indirect_count",
  VK_AMD_EXTENSION_134_EXTENSION_NAME: "VK_AMD_extension_134",
  VK_AMD_EXTENSION_135_EXTENSION_NAME: "VK_AMD_extension_135",
  VK_AMD_EXTENSION_136_EXTENSION_NAME: "VK_AMD_extension_136",
  VK_AMD_EXTENSION_140_EXTENSION_NAME: "VK_AMD_extension_140",
  VK_AMD_EXTENSION_142_EXTENSION_NAME: "VK_AMD_extension_142",
  VK_AMD_EXTENSION_143_EXTENSION_NAME: "VK_AMD_extension_143",
  VK_AMD_EXTENSION_17_EXTENSION_NAME: "VK_AMD_extension_17",
  VK_AMD_EXTENSION_18_EXTENSION_NAME: "VK_AMD_extension_18",
  VK_AMD_EXTENSION_20_EXTENSION_NAME: "VK_AMD_extension_20",
  VK_AMD_EXTENSION_226_EXTENSION_NAME: "VK_AMD_extension_226",
  VK_AMD_EXTENSION_227_EXTENSION_NAME: "VK_AMD_extension_227",
  VK_AMD_EXTENSION_228_EXTENSION_NAME: "VK_AMD_extension_228",
  VK_AMD_EXTENSION_229_EXTENSION_NAME: "VK_AMD_extension_229",
  VK_AMD_EXTENSION_230_EXTENSION_NAME: "VK_AMD_extension_230",
  VK_AMD_EXTENSION_231_EXTENSION_NAME: "VK_AMD_extension_231",
  VK_AMD_EXTENSION_232_EXTENSION_NAME: "VK_AMD_extension_232",
  VK_AMD_EXTENSION_233_EXTENSION_NAME: "VK_AMD_extension_233",
  VK_AMD_EXTENSION_234_EXTENSION_NAME: "VK_AMD_extension_234",
  VK_AMD_EXTENSION_235_EXTENSION_NAME: "VK_AMD_extension_235",
  VK_AMD_EXTENSION_236_EXTENSION_NAME: "VK_AMD_extension_236",
  VK_AMD_EXTENSION_24_EXTENSION_NAME: "VK_AMD_extension_24",
  VK_AMD_EXTENSION_25_EXTENSION_NAME: "VK_AMD_extension_25",
  VK_AMD_EXTENSION_32_EXTENSION_NAME: "VK_AMD_extension_32",
  VK_AMD_EXTENSION_33_EXTENSION_NAME: "VK_AMD_extension_33",
  VK_AMD_EXTENSION_35_EXTENSION_NAME: "VK_AMD_extension_35",
  VK_AMD_EXTENSION_39_EXTENSION_NAME: "VK_AMD_extension_39",
  VK_AMD_EXTENSION_40_EXTENSION_NAME: "VK_AMD_extension_40",
  VK_AMD_EXTENSION_41_EXTENSION_NAME: "VK_AMD_extension_41",
  VK_AMD_EXTENSION_44_EXTENSION_NAME: "VK_AMD_extension_44",
  VK_AMD_EXTENSION_45_EXTENSION_NAME: "VK_AMD_extension_45",
  VK_AMD_EXTENSION_46_EXTENSION_NAME: "VK_AMD_extension_46",
  VK_AMD_GCN_SHADER_EXTENSION_NAME: "VK_AMD_gcn_shader",
  VK_AMD_GPU_SHADER_HALF_FLOAT_EXTENSION_NAME: "VK_AMD_gpu_shader_half_float",
  VK_AMD_GPU_SHADER_INT16_EXTENSION_NAME: "VK_AMD_gpu_shader_int16",
  VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_EXTENSION_NAME: "VK_AMD_memory_overallocation_behavior",
  VK_AMD_MIXED_ATTACHMENT_SAMPLES_EXTENSION_NAME: "VK_AMD_mixed_attachment_samples",
  VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_EXTENSION_NAME: "VK_AMD_negative_viewport_height",
  VK_AMD_RASTERIZATION_ORDER_EXTENSION_NAME: "VK_AMD_rasterization_order",
  VK_AMD_SHADER_BALLOT_EXTENSION_NAME: "VK_AMD_shader_ballot",
  VK_AMD_SHADER_CORE_PROPERTIES_EXTENSION_NAME: "VK_AMD_shader_core_properties",
  VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_EXTENSION_NAME: "VK_AMD_shader_explicit_vertex_parameter",
  VK_AMD_SHADER_FRAGMENT_MASK_EXTENSION_NAME: "VK_AMD_shader_fragment_mask",
  VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_EXTENSION_NAME: "VK_AMD_shader_image_load_store_lod",
  VK_AMD_SHADER_INFO_EXTENSION_NAME: "VK_AMD_shader_info",
  VK_AMD_SHADER_TRINARY_MINMAX_EXTENSION_NAME: "VK_AMD_shader_trinary_minmax",
  VK_AMD_TEXTURE_GATHER_BIAS_LOD_EXTENSION_NAME: "VK_AMD_texture_gather_bias_lod",
  VK_ANDROID_EXTERNAL_MEMORY_ANDROID_HARDWARE_BUFFER_EXTENSION_NAME: "VK_ANDROID_external_memory_android_hardware_buffer",
  VK_ANDROID_NATIVE_BUFFER_NAME: "VK_ANDROID_native_buffer",
  VK_ARM_EXTENSION_01_EXTENSION_NAME: "VK_ARM_extension_01",
  VK_EXT_ACQUIRE_XLIB_DISPLAY_EXTENSION_NAME: "VK_EXT_acquire_xlib_display",
  VK_EXT_ASTC_DECODE_MODE_EXTENSION_NAME: "VK_EXT_astc_decode_mode",
  VK_EXT_BLEND_OPERATION_ADVANCED_EXTENSION_NAME: "VK_EXT_blend_operation_advanced",
  VK_EXT_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME: "VK_EXT_buffer_device_address",
  VK_EXT_CALIBRATED_TIMESTAMPS_EXTENSION_NAME: "VK_EXT_calibrated_timestamps",
  VK_EXT_CONDITIONAL_RENDERING_EXTENSION_NAME: "VK_EXT_conditional_rendering",
  VK_EXT_CONSERVATIVE_RASTERIZATION_EXTENSION_NAME: "VK_EXT_conservative_rasterization",
  VK_EXT_DEBUG_MARKER_EXTENSION_NAME: "VK_EXT_debug_marker",
  VK_EXT_DEBUG_REPORT_EXTENSION_NAME: "VK_EXT_debug_report",
  VK_EXT_DEBUG_UTILS_EXTENSION_NAME: "VK_EXT_debug_utils",
  VK_EXT_DEPTH_CLIP_ENABLE_EXTENSION_NAME: "VK_EXT_depth_clip_enable",
  VK_EXT_DEPTH_RANGE_UNRESTRICTED_EXTENSION_NAME: "VK_EXT_depth_range_unrestricted",
  VK_EXT_DESCRIPTOR_INDEXING_EXTENSION_NAME: "VK_EXT_descriptor_indexing",
  VK_EXT_DIRECT_MODE_DISPLAY_EXTENSION_NAME: "VK_EXT_direct_mode_display",
  VK_EXT_DISCARD_RECTANGLES_EXTENSION_NAME: "VK_EXT_discard_rectangles",
  VK_EXT_DISPLAY_CONTROL_EXTENSION_NAME: "VK_EXT_display_control",
  VK_EXT_DISPLAY_SURFACE_COUNTER_EXTENSION_NAME: "VK_EXT_display_surface_counter",
  VK_EXT_EXTENSION_160_EXTENSION_NAME: "VK_EXT_extension_160",
  VK_EXT_EXTENSION_164_EXTENSION_NAME: "VK_NV_extension_164",
  VK_EXT_EXTENSION_168_EXTENSION_NAME: "VK_NV_extension_168",
  VK_EXT_EXTENSION_220_EXTENSION_NAME: "VK_EXT_extension_220",
  VK_EXT_EXTENSION_223_EXTENSION_NAME: "VK_EXT_extension_223",
  VK_EXT_EXTENSION_246_EXTENSION_NAME: "VK_EXT_extension_246",
  VK_EXT_EXTENSION_254_EXTENSION_NAME: "VK_EXT_extension_254",
  VK_EXT_EXTENSION_255_EXTENSION_NAME: "VK_EXT_extension_255",
  VK_EXT_EXTENSION_256_EXTENSION_NAME: "VK_EXT_extension_256",
  VK_EXT_EXTENSION_28_EXTENSION_NAME: "VK_NV_extension_28",
  VK_EXT_EXTERNAL_MEMORY_DMA_BUF_EXTENSION_NAME: "VK_EXT_external_memory_dma_buf",
  VK_EXT_EXTERNAL_MEMORY_HOST_EXTENSION_NAME: "VK_EXT_external_memory_host",
  VK_EXT_FILTER_CUBIC_EXTENSION_NAME: "VK_EXT_filter_cubic",
  VK_EXT_FRAGMENT_DENSITY_MAP_EXTENSION_NAME: "VK_EXT_fragment_density_map",
  VK_EXT_GLOBAL_PRIORITY_EXTENSION_NAME: "VK_EXT_global_priority",
  VK_EXT_HDR_METADATA_EXTENSION_NAME: "VK_EXT_hdr_metadata",
  VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_EXTENSION_NAME: "VK_EXT_image_drm_format_modifier",
  VK_EXT_INLINE_UNIFORM_BLOCK_EXTENSION_NAME: "VK_EXT_inline_uniform_block",
  VK_EXT_MACOS_IOS_WINDOW_EXTENSION_NAME: "VK_EXT_macos_ios_window",
  VK_EXT_MEMORY_BUDGET_EXTENSION_NAME: "VK_EXT_memory_budget",
  VK_EXT_MEMORY_PRIORITY_EXTENSION_NAME: "VK_EXT_memory_priority",
  VK_EXT_PCI_BUS_INFO_EXTENSION_NAME: "VK_EXT_pci_bus_info",
  VK_EXT_POST_DEPTH_COVERAGE_EXTENSION_NAME: "VK_EXT_post_depth_coverage",
  VK_EXT_QUEUE_FAMILY_FOREIGN_EXTENSION_NAME: "VK_EXT_queue_family_foreign",
  VK_EXT_SAMPLER_FILTER_MINMAX_EXTENSION_NAME: "VK_EXT_sampler_filter_minmax",
  VK_EXT_SAMPLE_LOCATIONS_EXTENSION_NAME: "VK_EXT_sample_locations",
  VK_EXT_SCALAR_BLOCK_LAYOUT_EXTENSION_NAME: "VK_EXT_scalar_block_layout",
  VK_EXT_SEPARATE_STENCIL_USAGE_EXTENSION_NAME: "VK_EXT_separate_stencil_usage",
  VK_EXT_SHADER_STENCIL_EXPORT_EXTENSION_NAME: "VK_EXT_shader_stencil_export",
  VK_EXT_SHADER_SUBGROUP_BALLOT_EXTENSION_NAME: "VK_EXT_shader_subgroup_ballot",
  VK_EXT_SHADER_SUBGROUP_VOTE_EXTENSION_NAME: "VK_EXT_shader_subgroup_vote",
  VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_EXTENSION_NAME: "VK_EXT_shader_viewport_index_layer",
  VK_EXT_SWAPCHAIN_COLOR_SPACE_EXTENSION_NAME: "VK_EXT_swapchain_colorspace",
  VK_EXT_TRANSFORM_FEEDBACK_EXTENSION_NAME: "VK_EXT_transform_feedback",
  VK_EXT_VALIDATION_CACHE_EXTENSION_NAME: "VK_EXT_validation_cache",
  VK_EXT_VALIDATION_FEATURES_EXTENSION_NAME: "VK_EXT_validation_features",
  VK_EXT_VALIDATION_FLAGS_EXTENSION_NAME: "VK_EXT_validation_flags",
  VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME: "VK_EXT_vertex_attribute_divisor",
  VK_FUCHSIA_IMAGEPIPE_SURFACE_EXTENSION_NAME: "VK_FUCHSIA_imagepipe_surface",
  VK_GOOGLE_DECORATE_STRING_EXTENSION_NAME: "VK_GOOGLE_decorate_string",
  VK_GOOGLE_DISPLAY_TIMING_EXTENSION_NAME: "VK_GOOGLE_display_timing",
  VK_GOOGLE_EXTENSION_192_EXTENSION_NAME: "VK_GOOGLE_extension_192",
  VK_GOOGLE_EXTENSION_193_EXTENSION_NAME: "VK_GOOGLE_extension_193",
  VK_GOOGLE_EXTENSION_194_EXTENSION_NAME: "VK_GOOGLE_extension_194",
  VK_GOOGLE_EXTENSION_195_EXTENSION_NAME: "VK_GOOGLE_extension_195",
  VK_GOOGLE_EXTENSION_196_EXTENSION_NAME: "VK_GOOGLE_extension_196",
  VK_GOOGLE_EXTENSION_49_EXTENSION_NAME: "VK_GOOGLE_extension_49",
  VK_GOOGLE_EXTENSION_50_EXTENSION_NAME: "VK_GOOGLE_extension_50",
  VK_GOOGLE_HLSL_FUNCTIONALITY1_EXTENSION_NAME: "VK_GOOGLE_hlsl_functionality1",
  VK_IMG_EXTENSION_107_EXTENSION_NAME: "VK_IMG_extension_107",
  VK_IMG_EXTENSION_108_EXTENSION_NAME: "VK_IMG_extension_108",
  VK_IMG_EXTENSION_109_EXTENSION_NAME: "VK_IMG_extension_109",
  VK_IMG_EXTENSION_111_EXTENSION_NAME: "VK_IMG_extension_111",
  VK_IMG_EXTENSION_69_EXTENSION_NAME: "VK_IMG_extension_69",
  VK_IMG_FILTER_CUBIC_EXTENSION_NAME: "VK_IMG_filter_cubic",
  VK_IMG_FORMAT_PVRTC_EXTENSION_NAME: "VK_IMG_format_pvrtc",
  VK_INTEL_EXTENSION_243_EXTENSION_NAME: "VK_INTEL_extension_243",
  VK_KHR_16BIT_STORAGE_EXTENSION_NAME: "VK_KHR_16bit_storage",
  VK_KHR_8BIT_STORAGE_EXTENSION_NAME: "VK_KHR_8bit_storage",
  VK_KHR_ANDROID_SURFACE_EXTENSION_NAME: "VK_KHR_android_surface",
  VK_KHR_BIND_MEMORY_2_EXTENSION_NAME: "VK_KHR_bind_memory2",
  VK_KHR_CREATE_RENDERPASS_2_EXTENSION_NAME: "VK_KHR_create_renderpass2",
  VK_KHR_DEDICATED_ALLOCATION_EXTENSION_NAME: "VK_KHR_dedicated_allocation",
  VK_KHR_DEPTH_STENCIL_RESOLVE_EXTENSION_NAME: "VK_KHR_depth_stencil_resolve",
  VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_EXTENSION_NAME: "VK_KHR_descriptor_update_template",
  VK_KHR_DEVICE_GROUP_CREATION_EXTENSION_NAME: "VK_KHR_device_group_creation",
  VK_KHR_DEVICE_GROUP_EXTENSION_NAME: "VK_KHR_device_group",
  VK_KHR_DISPLAY_EXTENSION_NAME: "VK_KHR_display",
  VK_KHR_DISPLAY_SWAPCHAIN_EXTENSION_NAME: "VK_KHR_display_swapchain",
  VK_KHR_DRAW_INDIRECT_COUNT_EXTENSION_NAME: "VK_KHR_draw_indirect_count",
  VK_KHR_DRIVER_PROPERTIES_EXTENSION_NAME: "VK_KHR_driver_properties",
  VK_KHR_EXTENSION_117_EXTENSION_NAME: "VK_KHR_extension_117",
  VK_KHR_EXTENSION_119_EXTENSION_NAME: "VK_KHR_extension_119",
  VK_KHR_EXTENSION_176_EXTENSION_NAME: "VK_KHR_extension_176",
  VK_KHR_EXTENSION_177_EXTENSION_NAME: "VK_KHR_extension_177",
  VK_KHR_EXTENSION_182_EXTENSION_NAME: "VK_AMD_extension_182",
  VK_KHR_EXTENSION_183_EXTENSION_NAME: "VK_AMD_extension_183",
  VK_KHR_EXTENSION_184_EXTENSION_NAME: "VK_AMD_extension_184",
  VK_KHR_EXTENSION_187_EXTENSION_NAME: "VK_AMD_extension_187",
  VK_KHR_EXTENSION_188_EXTENSION_NAME: "VK_AMD_extension_188",
  VK_KHR_EXTENSION_189_EXTENSION_NAME: "VK_AMD_extension_189",
  VK_KHR_EXTENSION_208_EXTENSION_NAME: "VK_KHR_extension_208",
  VK_KHR_EXTENSION_209_EXTENSION_NAME: "VK_KHR_extension_209",
  VK_KHR_EXTENSION_210_EXTENSION_NAME: "VK_KHR_extension_210",
  VK_KHR_EXTENSION_211_EXTENSION_NAME: "VK_KHR_extension_211",
  VK_KHR_EXTENSION_214_EXTENSION_NAME: "VK_KHR_extension_214",
  VK_KHR_EXTENSION_216_EXTENSION_NAME: "VK_KHR_extension_216",
  VK_KHR_EXTENSION_217_EXTENSION_NAME: "VK_KHR_extension_217",
  VK_KHR_EXTENSION_221_EXTENSION_NAME: "VK_KHR_extension_221",
  VK_KHR_EXTENSION_237_EXTENSION_NAME: "VK_KHR_extension_237",
  VK_KHR_EXTENSION_240_EXTENSION_NAME: "VK_KHR_extension_240",
  VK_KHR_EXTENSION_249_EXTENSION_NAME: "VK_KHR_extension_249",
  VK_KHR_EXTERNAL_FENCE_CAPABILITIES_EXTENSION_NAME: "VK_KHR_external_fence_capabilities",
  VK_KHR_EXTERNAL_FENCE_EXTENSION_NAME: "VK_KHR_external_fence",
  VK_KHR_EXTERNAL_FENCE_FD_EXTENSION_NAME: "VK_KHR_external_fence_fd",
  VK_KHR_EXTERNAL_FENCE_WIN32_EXTENSION_NAME: "VK_KHR_external_fence_win32",
  VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME: "VK_KHR_external_memory_capabilities",
  VK_KHR_EXTERNAL_MEMORY_EXTENSION_NAME: "VK_KHR_external_memory",
  VK_KHR_EXTERNAL_MEMORY_FD_EXTENSION_NAME: "VK_KHR_external_memory_fd",
  VK_KHR_EXTERNAL_MEMORY_WIN32_EXTENSION_NAME: "VK_KHR_external_memory_win32",
  VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_EXTENSION_NAME: "VK_KHR_external_semaphore_capabilities",
  VK_KHR_EXTERNAL_SEMAPHORE_EXTENSION_NAME: "VK_KHR_external_semaphore",
  VK_KHR_EXTERNAL_SEMAPHORE_FD_EXTENSION_NAME: "VK_KHR_external_semaphore_fd",
  VK_KHR_EXTERNAL_SEMAPHORE_WIN32_EXTENSION_NAME: "VK_KHR_external_semaphore_win32",
  VK_KHR_GET_DISPLAY_PROPERTIES_2_EXTENSION_NAME: "VK_KHR_get_display_properties2",
  VK_KHR_GET_MEMORY_REQUIREMENTS_2_EXTENSION_NAME: "VK_KHR_get_memory_requirements2",
  VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME: "VK_KHR_get_physical_device_properties2",
  VK_KHR_GET_SURFACE_CAPABILITIES_2_EXTENSION_NAME: "VK_KHR_get_surface_capabilities2",
  VK_KHR_IMAGE_FORMAT_LIST_EXTENSION_NAME: "VK_KHR_image_format_list",
  VK_KHR_INCREMENTAL_PRESENT_EXTENSION_NAME: "VK_KHR_incremental_present",
  VK_KHR_MAINTENANCE1_EXTENSION_NAME: "VK_KHR_maintenance1",
  VK_KHR_MAINTENANCE2_EXTENSION_NAME: "VK_KHR_maintenance2",
  VK_KHR_MAINTENANCE3_EXTENSION_NAME: "VK_KHR_maintenance3",
  VK_KHR_MIR_SURFACE_EXTENSION_NAME: "VK_KHR_mir_surface",
  VK_KHR_MULTIVIEW_EXTENSION_NAME: "VK_KHR_multiview",
  VK_KHR_PUSH_DESCRIPTOR_EXTENSION_NAME: "VK_KHR_push_descriptor",
  VK_KHR_RELAXED_BLOCK_LAYOUT_EXTENSION_NAME: "VK_KHR_relaxed_block_layout",
  VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_EXTENSION_NAME: "VK_KHR_sampler_mirror_clamp_to_edge",
  VK_KHR_SAMPLER_YCBCR_CONVERSION_EXTENSION_NAME: "VK_KHR_sampler_ycbcr_conversion",
  VK_KHR_SHADER_ATOMIC_INT64_EXTENSION_NAME: "VK_KHR_shader_atomic_int64",
  VK_KHR_SHADER_DRAW_PARAMETERS_EXTENSION_NAME: "VK_KHR_shader_draw_parameters",
  VK_KHR_SHADER_FLOAT16_INT8_EXTENSION_NAME: "VK_KHR_shader_float16_int8",
  VK_KHR_SHADER_FLOAT_CONTROLS_EXTENSION_NAME: "VK_KHR_shader_float_controls",
  VK_KHR_SHARED_PRESENTABLE_IMAGE_EXTENSION_NAME: "VK_KHR_shared_presentable_image",
  VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_EXTENSION_NAME: "VK_KHR_storage_buffer_storage_class",
  VK_KHR_SURFACE_EXTENSION_NAME: "VK_KHR_surface",
  VK_KHR_SWAPCHAIN_EXTENSION_NAME: "VK_KHR_swapchain",
  VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_EXTENSION_NAME: "VK_KHR_swapchain_mutable_format",
  VK_KHR_VARIABLE_POINTERS_EXTENSION_NAME: "VK_KHR_variable_pointers",
  VK_KHR_VULKAN_MEMORY_MODEL_EXTENSION_NAME: "VK_KHR_vulkan_memory_model",
  VK_KHR_WAYLAND_SURFACE_EXTENSION_NAME: "VK_KHR_wayland_surface",
  VK_KHR_WIN32_KEYED_MUTEX_EXTENSION_NAME: "VK_KHR_win32_keyed_mutex",
  VK_KHR_WIN32_SURFACE_EXTENSION_NAME: "VK_KHR_win32_surface",
  VK_KHR_XCB_SURFACE_EXTENSION_NAME: "VK_KHR_xcb_surface",
  VK_KHR_XLIB_SURFACE_EXTENSION_NAME: "VK_KHR_xlib_surface",
  VK_MESA_EXTENSION_244_EXTENSION_NAME: "VK_MESA_extension_244",
  VK_MVK_IOS_SURFACE_EXTENSION_NAME: "VK_MVK_ios_surface",
  VK_MVK_MACOS_SURFACE_EXTENSION_NAME: "VK_MVK_macos_surface",
  VK_MVK_MOLTENVK_EXTENSION_NAME: "VK_MVK_moltenvk",
  VK_NN_VI_SURFACE_EXTENSION_NAME: "VK_NN_vi_surface",
  VK_NVX_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME: "VK_NVX_device_generated_commands",
  VK_NVX_EXTENSION_30_EXTENSION_NAME: "VK_NVX_extension_30",
  VK_NVX_EXTENSION_31_EXTENSION_NAME: "VK_NVX_extension_31",
  VK_NVX_EXTENSION_48_EXTENSION_NAME: "VK_NVX_extension_48",
  VK_NVX_EXTENSION_52_EXTENSION_NAME: "VK_NVX_extension_52",
  VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_EXTENSION_NAME: "VK_NVX_multiview_per_view_attributes",
  VK_NV_CLIP_SPACE_W_SCALING_EXTENSION_NAME: "VK_NV_clip_space_w_scaling",
  VK_NV_COMPUTE_SHADER_DERIVATIVES_EXTENSION_NAME: "VK_NV_compute_shader_derivatives",
  VK_NV_COOPERATIVE_MATRIX_EXTENSION_NAME: "VK_NV_cooperative_matrix",
  VK_NV_CORNER_SAMPLED_IMAGE_EXTENSION_NAME: "VK_NV_corner_sampled_image",
  VK_NV_DEDICATED_ALLOCATION_EXTENSION_NAME: "VK_NV_dedicated_allocation",
  VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_EXTENSION_NAME: "VK_NV_dedicated_allocation_image_aliasing",
  VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_EXTENSION_NAME: "VK_NV_device_diagnostic_checkpoints",
  VK_NV_EXTENSION_101_EXTENSION_NAME: "VK_NV_extension_101",
  VK_NV_EXTENSION_104_EXTENSION_NAME: "VK_NV_extension_104",
  VK_NV_EXTENSION_151_EXTENSION_NAME: "VK_NV_extension_151",
  VK_NV_EXTENSION_152_EXTENSION_NAME: "VK_NV_extension_152",
  VK_NV_EXTENSION_155_EXTENSION_NAME: "VK_NV_extension_155",
  VK_NV_EXTENSION_242_EXTENSION_NAME: "VK_NV_extension_242",
  VK_NV_EXTENSION_251_EXTENSION_NAME: "VK_NV_extension_251",
  VK_NV_EXTENSION_252_EXTENSION_NAME: "VK_NV_extension_252",
  VK_NV_EXTENSION_253_EXTENSION_NAME: "VK_NV_extension_253",
  VK_NV_EXTENSION_53_EXTENSION_NAME: "VK_NV_extension_53",
  VK_NV_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME: "VK_NV_external_memory_capabilities",
  VK_NV_EXTERNAL_MEMORY_EXTENSION_NAME: "VK_NV_external_memory",
  VK_NV_EXTERNAL_MEMORY_WIN32_EXTENSION_NAME: "VK_NV_external_memory_win32",
  VK_NV_FILL_RECTANGLE_EXTENSION_NAME: "VK_NV_fill_rectangle",
  VK_NV_FRAGMENT_COVERAGE_TO_COLOR_EXTENSION_NAME: "VK_NV_fragment_coverage_to_color",
  VK_NV_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME: "VK_NV_fragment_shader_barycentric",
  VK_NV_FRAMEBUFFER_MIXED_SAMPLES_EXTENSION_NAME: "VK_NV_framebuffer_mixed_samples",
  VK_NV_GEOMETRY_SHADER_PASSTHROUGH_EXTENSION_NAME: "VK_NV_geometry_shader_passthrough",
  VK_NV_GLSL_SHADER_EXTENSION_NAME: "VK_NV_glsl_shader",
  VK_NV_MESH_SHADER_EXTENSION_NAME: "VK_NV_mesh_shader",
  VK_NV_RAY_TRACING_EXTENSION_NAME: "VK_NV_ray_tracing",
  VK_NV_REPRESENTATIVE_FRAGMENT_TEST_EXTENSION_NAME: "VK_NV_representative_fragment_test",
  VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_EXTENSION_NAME: "VK_NV_sample_mask_override_coverage",
  VK_NV_SCISSOR_EXCLUSIVE_EXTENSION_NAME: "VK_NV_scissor_exclusive",
  VK_NV_SHADER_IMAGE_FOOTPRINT_EXTENSION_NAME: "VK_NV_shader_image_footprint",
  VK_NV_SHADER_SUBGROUP_PARTITIONED_EXTENSION_NAME: "VK_NV_shader_subgroup_partitioned",
  VK_NV_SHADING_RATE_IMAGE_EXTENSION_NAME: "VK_NV_shading_rate_image",
  VK_NV_VIEWPORT_ARRAY2_EXTENSION_NAME: "VK_NV_viewport_array2",
  VK_NV_VIEWPORT_SWIZZLE_EXTENSION_NAME: "VK_NV_viewport_swizzle",
  VK_NV_WIN32_KEYED_MUTEX_EXTENSION_NAME: "VK_NV_win32_keyed_mutex",
  VK_QCOM_extension_172_EXTENSION_NAME: "VK_QCOM_extension_172",
  VK_QCOM_extension_173_EXTENSION_NAME: "VK_QCOM_extension_173",
  VK_QCOM_extension_174_EXTENSION_NAME: "VK_QCOM_extension_174"
};

const API_Extensions = {
  VK_AMD_BUFFER_MARKER_SPEC_VERSION: 1,
  VK_AMD_DRAW_INDIRECT_COUNT_SPEC_VERSION: 1,
  VK_AMD_EXTENSION_134_SPEC_VERSION: 0,
  VK_AMD_EXTENSION_135_SPEC_VERSION: 0,
  VK_AMD_EXTENSION_136_SPEC_VERSION: 0,
  VK_AMD_EXTENSION_140_SPEC_VERSION: 0,
  VK_AMD_EXTENSION_142_SPEC_VERSION: 0,
  VK_AMD_EXTENSION_143_SPEC_VERSION: 0,
  VK_AMD_EXTENSION_17_SPEC_VERSION: 0,
  VK_AMD_EXTENSION_18_SPEC_VERSION: 0,
  VK_AMD_EXTENSION_20_SPEC_VERSION: 0,
  VK_AMD_EXTENSION_226_SPEC_VERSION: 0,
  VK_AMD_EXTENSION_227_SPEC_VERSION: 0,
  VK_AMD_EXTENSION_228_SPEC_VERSION: 0,
  VK_AMD_EXTENSION_229_SPEC_VERSION: 0,
  VK_AMD_EXTENSION_230_SPEC_VERSION: 0,
  VK_AMD_EXTENSION_231_SPEC_VERSION: 0,
  VK_AMD_EXTENSION_232_SPEC_VERSION: 0,
  VK_AMD_EXTENSION_233_SPEC_VERSION: 0,
  VK_AMD_EXTENSION_234_SPEC_VERSION: 0,
  VK_AMD_EXTENSION_235_SPEC_VERSION: 0,
  VK_AMD_EXTENSION_236_SPEC_VERSION: 0,
  VK_AMD_EXTENSION_24_SPEC_VERSION: 0,
  VK_AMD_EXTENSION_25_SPEC_VERSION: 0,
  VK_AMD_EXTENSION_32_SPEC_VERSION: 0,
  VK_AMD_EXTENSION_33_SPEC_VERSION: 0,
  VK_AMD_EXTENSION_35_SPEC_VERSION: 0,
  VK_AMD_EXTENSION_39_SPEC_VERSION: 0,
  VK_AMD_EXTENSION_40_SPEC_VERSION: 0,
  VK_AMD_EXTENSION_41_SPEC_VERSION: 0,
  VK_AMD_EXTENSION_44_SPEC_VERSION: 0,
  VK_AMD_EXTENSION_45_SPEC_VERSION: 0,
  VK_AMD_EXTENSION_46_SPEC_VERSION: 0,
  VK_AMD_GCN_SHADER_SPEC_VERSION: 1,
  VK_AMD_GPU_SHADER_HALF_FLOAT_SPEC_VERSION: 1,
  VK_AMD_GPU_SHADER_INT16_SPEC_VERSION: 1,
  VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_SPEC_VERSION: 1,
  VK_AMD_MIXED_ATTACHMENT_SAMPLES_SPEC_VERSION: 1,
  VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_SPEC_VERSION: 1,
  VK_AMD_RASTERIZATION_ORDER_SPEC_VERSION: 1,
  VK_AMD_SHADER_BALLOT_SPEC_VERSION: 1,
  VK_AMD_SHADER_CORE_PROPERTIES_SPEC_VERSION: 1,
  VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_SPEC_VERSION: 1,
  VK_AMD_SHADER_FRAGMENT_MASK_SPEC_VERSION: 1,
  VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_SPEC_VERSION: 1,
  VK_AMD_SHADER_INFO_SPEC_VERSION: 1,
  VK_AMD_SHADER_TRINARY_MINMAX_SPEC_VERSION: 1,
  VK_AMD_TEXTURE_GATHER_BIAS_LOD_SPEC_VERSION: 1,
  VK_ANDROID_EXTERNAL_MEMORY_ANDROID_HARDWARE_BUFFER_SPEC_VERSION: 3,
  VK_ANDROID_NATIVE_BUFFER_NUMBER: 11,
  VK_ANDROID_NATIVE_BUFFER_SPEC_VERSION: 5,
  VK_ARM_EXTENSION_01_SPEC_VERSION: 0,
  VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR: 1,
  VK_EXT_ACQUIRE_XLIB_DISPLAY_SPEC_VERSION: 1,
  VK_EXT_ASTC_DECODE_MODE_SPEC_VERSION: 1,
  VK_EXT_BLEND_OPERATION_ADVANCED_SPEC_VERSION: 2,
  VK_EXT_BUFFER_DEVICE_ADDRESS_SPEC_VERSION: 2,
  VK_EXT_CALIBRATED_TIMESTAMPS_SPEC_VERSION: 1,
  VK_EXT_CONDITIONAL_RENDERING_SPEC_VERSION: 1,
  VK_EXT_CONSERVATIVE_RASTERIZATION_SPEC_VERSION: 1,
  VK_EXT_DEBUG_MARKER_SPEC_VERSION: 4,
  VK_EXT_DEBUG_REPORT_SPEC_VERSION: 9,
  VK_EXT_DEBUG_UTILS_SPEC_VERSION: 1,
  VK_EXT_DEPTH_CLIP_ENABLE_SPEC_VERSION: 1,
  VK_EXT_DEPTH_RANGE_UNRESTRICTED_SPEC_VERSION: 1,
  VK_EXT_DESCRIPTOR_INDEXING_SPEC_VERSION: 2,
  VK_EXT_DIRECT_MODE_DISPLAY_SPEC_VERSION: 1,
  VK_EXT_DISCARD_RECTANGLES_SPEC_VERSION: 1,
  VK_EXT_DISPLAY_CONTROL_SPEC_VERSION: 1,
  VK_EXT_DISPLAY_SURFACE_COUNTER_SPEC_VERSION: 1,
  VK_EXT_EXTENSION_160_SPEC_VERSION: 0,
  VK_EXT_EXTENSION_164_SPEC_VERSION: 0,
  VK_EXT_EXTENSION_168_SPEC_VERSION: 0,
  VK_EXT_EXTENSION_220_SPEC_VERSION: 0,
  VK_EXT_EXTENSION_223_SPEC_VERSION: 0,
  VK_EXT_EXTENSION_246_SPEC_VERSION: 0,
  VK_EXT_EXTENSION_254_SPEC_VERSION: 1,
  VK_EXT_EXTENSION_255_SPEC_VERSION: 0,
  VK_EXT_EXTENSION_256_SPEC_VERSION: 0,
  VK_EXT_EXTENSION_28_SPEC_VERSION: 0,
  VK_EXT_EXTERNAL_MEMORY_DMA_BUF_SPEC_VERSION: 1,
  VK_EXT_EXTERNAL_MEMORY_HOST_SPEC_VERSION: 1,
  VK_EXT_FILTER_CUBIC_SPEC_VERSION: 1,
  VK_EXT_FRAGMENT_DENSITY_MAP_SPEC_VERSION: 1,
  VK_EXT_GLOBAL_PRIORITY_SPEC_VERSION: 2,
  VK_EXT_HDR_METADATA_SPEC_VERSION: 1,
  VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_SPEC_VERSION: 1,
  VK_EXT_INLINE_UNIFORM_BLOCK_SPEC_VERSION: 1,
  VK_EXT_MACOS_IOS_WINDOW_SPEC_VERSION: 0,
  VK_EXT_MEMORY_BUDGET_SPEC_VERSION: 1,
  VK_EXT_MEMORY_PRIORITY_SPEC_VERSION: 1,
  VK_EXT_PCI_BUS_INFO_SPEC_VERSION: 2,
  VK_EXT_POST_DEPTH_COVERAGE_SPEC_VERSION: 1,
  VK_EXT_QUEUE_FAMILY_FOREIGN_SPEC_VERSION: 1,
  VK_EXT_SAMPLER_FILTER_MINMAX_SPEC_VERSION: 1,
  VK_EXT_SAMPLE_LOCATIONS_SPEC_VERSION: 1,
  VK_EXT_SCALAR_BLOCK_LAYOUT_SPEC_VERSION: 1,
  VK_EXT_SEPARATE_STENCIL_USAGE_SPEC_VERSION: 1,
  VK_EXT_SHADER_STENCIL_EXPORT_SPEC_VERSION: 1,
  VK_EXT_SHADER_SUBGROUP_BALLOT_SPEC_VERSION: 1,
  VK_EXT_SHADER_SUBGROUP_VOTE_SPEC_VERSION: 1,
  VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_SPEC_VERSION: 1,
  VK_EXT_SWAPCHAIN_COLOR_SPACE_SPEC_VERSION: 3,
  VK_EXT_TRANSFORM_FEEDBACK_SPEC_VERSION: 1,
  VK_EXT_VALIDATION_CACHE_SPEC_VERSION: 1,
  VK_EXT_VALIDATION_FEATURES_SPEC_VERSION: 1,
  VK_EXT_VALIDATION_FLAGS_SPEC_VERSION: 1,
  VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_SPEC_VERSION: 3,
  VK_FUCHSIA_IMAGEPIPE_SURFACE_SPEC_VERSION: 1,
  VK_GOOGLE_DECORATE_STRING_SPEC_VERSION: 1,
  VK_GOOGLE_DISPLAY_TIMING_SPEC_VERSION: 1,
  VK_GOOGLE_EXTENSION_192_SPEC_VERSION: 0,
  VK_GOOGLE_EXTENSION_193_SPEC_VERSION: 0,
  VK_GOOGLE_EXTENSION_194_SPEC_VERSION: 0,
  VK_GOOGLE_EXTENSION_195_SPEC_VERSION: 0,
  VK_GOOGLE_EXTENSION_196_SPEC_VERSION: 0,
  VK_GOOGLE_EXTENSION_49_SPEC_VERSION: 0,
  VK_GOOGLE_EXTENSION_50_SPEC_VERSION: 0,
  VK_GOOGLE_HLSL_FUNCTIONALITY1_SPEC_VERSION: 1,
  VK_IMG_EXTENSION_107_SPEC_VERSION: 0,
  VK_IMG_EXTENSION_108_SPEC_VERSION: 0,
  VK_IMG_EXTENSION_109_SPEC_VERSION: 0,
  VK_IMG_EXTENSION_111_SPEC_VERSION: 0,
  VK_IMG_EXTENSION_69_SPEC_VERSION: 0,
  VK_IMG_FILTER_CUBIC_SPEC_VERSION: 1,
  VK_IMG_FORMAT_PVRTC_SPEC_VERSION: 1,
  VK_INTEL_EXTENSION_243_SPEC_VERSION: 0,
  VK_KHR_16BIT_STORAGE_SPEC_VERSION: 1,
  VK_KHR_8BIT_STORAGE_SPEC_VERSION: 1,
  VK_KHR_ANDROID_SURFACE_SPEC_VERSION: 6,
  VK_KHR_BIND_MEMORY_2_SPEC_VERSION: 1,
  VK_KHR_CREATE_RENDERPASS_2_SPEC_VERSION: 1,
  VK_KHR_DEDICATED_ALLOCATION_SPEC_VERSION: 3,
  VK_KHR_DEPTH_STENCIL_RESOLVE_SPEC_VERSION: 1,
  VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_SPEC_VERSION: 1,
  VK_KHR_DEVICE_GROUP_CREATION_SPEC_VERSION: 1,
  VK_KHR_DEVICE_GROUP_SPEC_VERSION: 3,
  VK_KHR_DISPLAY_SPEC_VERSION: 21,
  VK_KHR_DISPLAY_SWAPCHAIN_SPEC_VERSION: 9,
  VK_KHR_DRAW_INDIRECT_COUNT_SPEC_VERSION: 1,
  VK_KHR_DRIVER_PROPERTIES_SPEC_VERSION: 1,
  VK_KHR_EXTENSION_117_SPEC_VERSION: 0,
  VK_KHR_EXTENSION_119_SPEC_VERSION: 0,
  VK_KHR_EXTENSION_176_SPEC_VERSION: 0,
  VK_KHR_EXTENSION_177_SPEC_VERSION: 0,
  VK_KHR_EXTENSION_182_SPEC_VERSION: 0,
  VK_KHR_EXTENSION_183_SPEC_VERSION: 0,
  VK_KHR_EXTENSION_184_SPEC_VERSION: 0,
  VK_KHR_EXTENSION_187_SPEC_VERSION: 0,
  VK_KHR_EXTENSION_188_SPEC_VERSION: 0,
  VK_KHR_EXTENSION_189_SPEC_VERSION: 0,
  VK_KHR_EXTENSION_208_SPEC_VERSION: 0,
  VK_KHR_EXTENSION_209_SPEC_VERSION: 0,
  VK_KHR_EXTENSION_210_SPEC_VERSION: 0,
  VK_KHR_EXTENSION_211_SPEC_VERSION: 0,
  VK_KHR_EXTENSION_214_SPEC_VERSION: 0,
  VK_KHR_EXTENSION_216_SPEC_VERSION: 0,
  VK_KHR_EXTENSION_217_SPEC_VERSION: 0,
  VK_KHR_EXTENSION_221_SPEC_VERSION: 0,
  VK_KHR_EXTENSION_237_SPEC_VERSION: 0,
  VK_KHR_EXTENSION_240_SPEC_VERSION: 0,
  VK_KHR_EXTENSION_249_SPEC_VERSION: 0,
  VK_KHR_EXTERNAL_FENCE_CAPABILITIES_SPEC_VERSION: 1,
  VK_KHR_EXTERNAL_FENCE_FD_SPEC_VERSION: 1,
  VK_KHR_EXTERNAL_FENCE_SPEC_VERSION: 1,
  VK_KHR_EXTERNAL_FENCE_WIN32_SPEC_VERSION: 1,
  VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION: 1,
  VK_KHR_EXTERNAL_MEMORY_FD_SPEC_VERSION: 1,
  VK_KHR_EXTERNAL_MEMORY_SPEC_VERSION: 1,
  VK_KHR_EXTERNAL_MEMORY_WIN32_SPEC_VERSION: 1,
  VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_SPEC_VERSION: 1,
  VK_KHR_EXTERNAL_SEMAPHORE_FD_SPEC_VERSION: 1,
  VK_KHR_EXTERNAL_SEMAPHORE_SPEC_VERSION: 1,
  VK_KHR_EXTERNAL_SEMAPHORE_WIN32_SPEC_VERSION: 1,
  VK_KHR_GET_DISPLAY_PROPERTIES_2_SPEC_VERSION: 1,
  VK_KHR_GET_MEMORY_REQUIREMENTS_2_SPEC_VERSION: 1,
  VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_SPEC_VERSION: 1,
  VK_KHR_GET_SURFACE_CAPABILITIES_2_SPEC_VERSION: 1,
  VK_KHR_IMAGE_FORMAT_LIST_SPEC_VERSION: 1,
  VK_KHR_INCREMENTAL_PRESENT_SPEC_VERSION: 1,
  VK_KHR_MAINTENANCE1_SPEC_VERSION: 2,
  VK_KHR_MAINTENANCE2_SPEC_VERSION: 1,
  VK_KHR_MAINTENANCE3_SPEC_VERSION: 1,
  VK_KHR_MIR_SURFACE_SPEC_VERSION: 4,
  VK_KHR_MULTIVIEW_SPEC_VERSION: 1,
  VK_KHR_PUSH_DESCRIPTOR_SPEC_VERSION: 2,
  VK_KHR_RELAXED_BLOCK_LAYOUT_SPEC_VERSION: 1,
  VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_SPEC_VERSION: 1,
  VK_KHR_SAMPLER_YCBCR_CONVERSION_SPEC_VERSION: 1,
  VK_KHR_SHADER_ATOMIC_INT64_SPEC_VERSION: 1,
  VK_KHR_SHADER_DRAW_PARAMETERS_SPEC_VERSION: 1,
  VK_KHR_SHADER_FLOAT16_INT8_SPEC_VERSION: 1,
  VK_KHR_SHADER_FLOAT_CONTROLS_SPEC_VERSION: 1,
  VK_KHR_SHARED_PRESENTABLE_IMAGE_SPEC_VERSION: 1,
  VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_SPEC_VERSION: 1,
  VK_KHR_SURFACE_SPEC_VERSION: 25,
  VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_SPEC_VERSION: 1,
  VK_KHR_SWAPCHAIN_SPEC_VERSION: 70,
  VK_KHR_VARIABLE_POINTERS_SPEC_VERSION: 1,
  VK_KHR_VULKAN_MEMORY_MODEL_SPEC_VERSION: 3,
  VK_KHR_WAYLAND_SURFACE_SPEC_VERSION: 6,
  VK_KHR_WIN32_KEYED_MUTEX_SPEC_VERSION: 1,
  VK_KHR_WIN32_SURFACE_SPEC_VERSION: 6,
  VK_KHR_XCB_SURFACE_SPEC_VERSION: 6,
  VK_KHR_XLIB_SURFACE_SPEC_VERSION: 6,
  VK_MESA_EXTENSION_244_SPEC_VERSION: 0,
  VK_MVK_IOS_SURFACE_SPEC_VERSION: 2,
  VK_MVK_MACOS_SURFACE_SPEC_VERSION: 2,
  VK_MVK_MOLTENVK_SPEC_VERSION: 0,
  VK_NN_VI_SURFACE_SPEC_VERSION: 1,
  VK_NVX_DEVICE_GENERATED_COMMANDS_SPEC_VERSION: 3,
  VK_NVX_EXTENSION_30_SPEC_VERSION: 0,
  VK_NVX_EXTENSION_31_SPEC_VERSION: 0,
  VK_NVX_EXTENSION_48_SPEC_VERSION: 0,
  VK_NVX_EXTENSION_52_SPEC_VERSION: 0,
  VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_SPEC_VERSION: 1,
  VK_NV_CLIP_SPACE_W_SCALING_SPEC_VERSION: 1,
  VK_NV_COMPUTE_SHADER_DERIVATIVES_SPEC_VERSION: 1,
  VK_NV_COOPERATIVE_MATRIX_SPEC_VERSION: 1,
  VK_NV_CORNER_SAMPLED_IMAGE_SPEC_VERSION: 2,
  VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_SPEC_VERSION: 1,
  VK_NV_DEDICATED_ALLOCATION_SPEC_VERSION: 1,
  VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_SPEC_VERSION: 2,
  VK_NV_EXTENSION_101_SPEC_VERSION: 0,
  VK_NV_EXTENSION_104_SPEC_VERSION: 0,
  VK_NV_EXTENSION_151_SPEC_VERSION: 0,
  VK_NV_EXTENSION_152_SPEC_VERSION: 0,
  VK_NV_EXTENSION_155_SPEC_VERSION: 0,
  VK_NV_EXTENSION_242_SPEC_VERSION: 0,
  VK_NV_EXTENSION_251_SPEC_VERSION: 0,
  VK_NV_EXTENSION_252_SPEC_VERSION: 0,
  VK_NV_EXTENSION_253_SPEC_VERSION: 0,
  VK_NV_EXTENSION_53_SPEC_VERSION: 0,
  VK_NV_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION: 1,
  VK_NV_EXTERNAL_MEMORY_SPEC_VERSION: 1,
  VK_NV_EXTERNAL_MEMORY_WIN32_SPEC_VERSION: 1,
  VK_NV_FILL_RECTANGLE_SPEC_VERSION: 1,
  VK_NV_FRAGMENT_COVERAGE_TO_COLOR_SPEC_VERSION: 1,
  VK_NV_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION: 1,
  VK_NV_FRAMEBUFFER_MIXED_SAMPLES_SPEC_VERSION: 1,
  VK_NV_GEOMETRY_SHADER_PASSTHROUGH_SPEC_VERSION: 1,
  VK_NV_GLSL_SHADER_SPEC_VERSION: 1,
  VK_NV_MESH_SHADER_SPEC_VERSION: 1,
  VK_NV_RAY_TRACING_SPEC_VERSION: 3,
  VK_NV_REPRESENTATIVE_FRAGMENT_TEST_SPEC_VERSION: 1,
  VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_SPEC_VERSION: 1,
  VK_NV_SCISSOR_EXCLUSIVE_SPEC_VERSION: 1,
  VK_NV_SHADER_IMAGE_FOOTPRINT_SPEC_VERSION: 1,
  VK_NV_SHADER_SUBGROUP_PARTITIONED_SPEC_VERSION: 1,
  VK_NV_SHADING_RATE_IMAGE_SPEC_VERSION: 3,
  VK_NV_VIEWPORT_ARRAY2_SPEC_VERSION: 1,
  VK_NV_VIEWPORT_SWIZZLE_SPEC_VERSION: 1,
  VK_NV_WIN32_KEYED_MUTEX_SPEC_VERSION: 1,
  VK_QCOM_extension_172_SPEC_VERSION: 0,
  VK_QCOM_extension_173_SPEC_VERSION: 0,
  VK_QCOM_extension_174_SPEC_VERSION: 0,
  VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE: 4
};

const API_Constants = {
  VK_ATTACHMENT_UNUSED: -1,
  VK_FALSE: 0,
  VK_LOD_CLAMP_NONE: 1000,
  VK_LUID_SIZE: 8,
  VK_LUID_SIZE_KHR: 8,
  VK_MAX_DESCRIPTION_SIZE: 256,
  VK_MAX_DEVICE_GROUP_SIZE: 32,
  VK_MAX_DEVICE_GROUP_SIZE_KHR: 32,
  VK_MAX_DRIVER_INFO_SIZE_KHR: 256,
  VK_MAX_DRIVER_NAME_SIZE_KHR: 256,
  VK_MAX_EXTENSION_NAME_SIZE: 256,
  VK_MAX_MEMORY_HEAPS: 16,
  VK_MAX_MEMORY_TYPES: 32,
  VK_MAX_PHYSICAL_DEVICE_NAME_SIZE: 256,
  VK_NULL_HANDLE: 0,
  VK_QUEUE_FAMILY_EXTERNAL: -2,
  VK_QUEUE_FAMILY_EXTERNAL_KHR: -2,
  VK_QUEUE_FAMILY_FOREIGN_EXT: -3,
  VK_QUEUE_FAMILY_IGNORED: -1,
  VK_REMAINING_ARRAY_LAYERS: -1,
  VK_REMAINING_MIP_LEVELS: -1,
  VK_SHADER_UNUSED_NV: -1,
  VK_SUBPASS_EXTERNAL: -1,
  VK_TRUE: 1,
  VK_UUID_SIZE: 16,
  VK_WHOLE_SIZE: -1
};

const VkImageLayout = {
  VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL: 2,
  VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR: 1000117001,
  VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR: 1000117000,
  VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL: 3,
  VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL: 4,
  VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT: 1000218000,
  VK_IMAGE_LAYOUT_GENERAL: 1,
  VK_IMAGE_LAYOUT_PREINITIALIZED: 8,
  VK_IMAGE_LAYOUT_PRESENT_SRC_KHR: 1000001002,
  VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL: 5,
  VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV: 1000164003,
  VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR: 1000111000,
  VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL: 7,
  VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL: 6,
  VK_IMAGE_LAYOUT_UNDEFINED: 0
};

const VkAttachmentLoadOp = {
  VK_ATTACHMENT_LOAD_OP_CLEAR: 1,
  VK_ATTACHMENT_LOAD_OP_DONT_CARE: 2,
  VK_ATTACHMENT_LOAD_OP_LOAD: 0
};

const VkAttachmentStoreOp = {
  VK_ATTACHMENT_STORE_OP_DONT_CARE: 1,
  VK_ATTACHMENT_STORE_OP_STORE: 0
};

const VkImageType = {
  VK_IMAGE_TYPE_1D: 0,
  VK_IMAGE_TYPE_2D: 1,
  VK_IMAGE_TYPE_3D: 2
};

const VkImageTiling = {
  VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT: 1000158000,
  VK_IMAGE_TILING_LINEAR: 1,
  VK_IMAGE_TILING_OPTIMAL: 0
};

const VkImageViewType = {
  VK_IMAGE_VIEW_TYPE_1D: 0,
  VK_IMAGE_VIEW_TYPE_1D_ARRAY: 4,
  VK_IMAGE_VIEW_TYPE_2D: 1,
  VK_IMAGE_VIEW_TYPE_2D_ARRAY: 5,
  VK_IMAGE_VIEW_TYPE_3D: 2,
  VK_IMAGE_VIEW_TYPE_CUBE: 3,
  VK_IMAGE_VIEW_TYPE_CUBE_ARRAY: 6
};

const VkCommandBufferLevel = {
  VK_COMMAND_BUFFER_LEVEL_PRIMARY: 0,
  VK_COMMAND_BUFFER_LEVEL_SECONDARY: 1
};

const VkComponentSwizzle = {
  VK_COMPONENT_SWIZZLE_A: 6,
  VK_COMPONENT_SWIZZLE_B: 5,
  VK_COMPONENT_SWIZZLE_G: 4,
  VK_COMPONENT_SWIZZLE_IDENTITY: 0,
  VK_COMPONENT_SWIZZLE_ONE: 2,
  VK_COMPONENT_SWIZZLE_R: 3,
  VK_COMPONENT_SWIZZLE_ZERO: 1
};

const VkDescriptorType = {
  VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV: 1000165000,
  VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER: 1,
  VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT: 1000138000,
  VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT: 10,
  VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE: 2,
  VK_DESCRIPTOR_TYPE_SAMPLER: 0,
  VK_DESCRIPTOR_TYPE_STORAGE_BUFFER: 7,
  VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC: 9,
  VK_DESCRIPTOR_TYPE_STORAGE_IMAGE: 3,
  VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER: 5,
  VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER: 6,
  VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC: 8,
  VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER: 4
};

const VkQueryType = {
  VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV: 1000165000,
  VK_QUERY_TYPE_OCCLUSION: 0,
  VK_QUERY_TYPE_PIPELINE_STATISTICS: 1,
  VK_QUERY_TYPE_RESERVED_4: 1000024004,
  VK_QUERY_TYPE_RESERVED_8: 1000023008,
  VK_QUERY_TYPE_TIMESTAMP: 2,
  VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT: 1000028004
};

const VkBorderColor = {
  VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK: 2,
  VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE: 4,
  VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK: 0,
  VK_BORDER_COLOR_INT_OPAQUE_BLACK: 3,
  VK_BORDER_COLOR_INT_OPAQUE_WHITE: 5,
  VK_BORDER_COLOR_INT_TRANSPARENT_BLACK: 1
};

const VkPipelineBindPoint = {
  VK_PIPELINE_BIND_POINT_COMPUTE: 1,
  VK_PIPELINE_BIND_POINT_GRAPHICS: 0,
  VK_PIPELINE_BIND_POINT_RAY_TRACING_NV: 1000165000
};

const VkPipelineCacheHeaderVersion = {
  VK_PIPELINE_CACHE_HEADER_VERSION_ONE: 1
};

const VkPrimitiveTopology = {
  VK_PRIMITIVE_TOPOLOGY_LINE_LIST: 1,
  VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY: 6,
  VK_PRIMITIVE_TOPOLOGY_LINE_STRIP: 2,
  VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY: 7,
  VK_PRIMITIVE_TOPOLOGY_PATCH_LIST: 10,
  VK_PRIMITIVE_TOPOLOGY_POINT_LIST: 0,
  VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN: 5,
  VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST: 3,
  VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY: 8,
  VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP: 4,
  VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY: 9
};

const VkSharingMode = {
  VK_SHARING_MODE_CONCURRENT: 1,
  VK_SHARING_MODE_EXCLUSIVE: 0
};

const VkIndexType = {
  VK_INDEX_TYPE_NONE_NV: 1000165000,
  VK_INDEX_TYPE_UINT16: 0,
  VK_INDEX_TYPE_UINT32: 1
};

const VkFilter = {
  VK_FILTER_CUBIC_EXT: 1000015000,
  VK_FILTER_CUBIC_IMG: 1000015000,
  VK_FILTER_LINEAR: 1,
  VK_FILTER_NEAREST: 0
};

const VkSamplerMipmapMode = {
  VK_SAMPLER_MIPMAP_MODE_LINEAR: 1,
  VK_SAMPLER_MIPMAP_MODE_NEAREST: 0
};

const VkSamplerAddressMode = {
  VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER: 3,
  VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE: 2,
  VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT: 1,
  VK_SAMPLER_ADDRESS_MODE_REPEAT: 0
};

const VkCompareOp = {
  VK_COMPARE_OP_ALWAYS: 7,
  VK_COMPARE_OP_EQUAL: 2,
  VK_COMPARE_OP_GREATER: 4,
  VK_COMPARE_OP_GREATER_OR_EQUAL: 6,
  VK_COMPARE_OP_LESS: 1,
  VK_COMPARE_OP_LESS_OR_EQUAL: 3,
  VK_COMPARE_OP_NEVER: 0,
  VK_COMPARE_OP_NOT_EQUAL: 5
};

const VkPolygonMode = {
  VK_POLYGON_MODE_FILL: 0,
  VK_POLYGON_MODE_FILL_RECTANGLE_NV: 1000153000,
  VK_POLYGON_MODE_LINE: 1,
  VK_POLYGON_MODE_POINT: 2
};

const VkFrontFace = {
  VK_FRONT_FACE_CLOCKWISE: 1,
  VK_FRONT_FACE_COUNTER_CLOCKWISE: 0
};

const VkBlendFactor = {
  VK_BLEND_FACTOR_CONSTANT_ALPHA: 12,
  VK_BLEND_FACTOR_CONSTANT_COLOR: 10,
  VK_BLEND_FACTOR_DST_ALPHA: 8,
  VK_BLEND_FACTOR_DST_COLOR: 4,
  VK_BLEND_FACTOR_ONE: 1,
  VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA: 13,
  VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR: 11,
  VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA: 9,
  VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR: 5,
  VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA: 18,
  VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR: 16,
  VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA: 7,
  VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR: 3,
  VK_BLEND_FACTOR_SRC1_ALPHA: 17,
  VK_BLEND_FACTOR_SRC1_COLOR: 15,
  VK_BLEND_FACTOR_SRC_ALPHA: 6,
  VK_BLEND_FACTOR_SRC_ALPHA_SATURATE: 14,
  VK_BLEND_FACTOR_SRC_COLOR: 2,
  VK_BLEND_FACTOR_ZERO: 0
};

const VkBlendOp = {
  VK_BLEND_OP_ADD: 0,
  VK_BLEND_OP_BLUE_EXT: 1000148045,
  VK_BLEND_OP_COLORBURN_EXT: 1000148018,
  VK_BLEND_OP_COLORDODGE_EXT: 1000148017,
  VK_BLEND_OP_CONTRAST_EXT: 1000148041,
  VK_BLEND_OP_DARKEN_EXT: 1000148015,
  VK_BLEND_OP_DIFFERENCE_EXT: 1000148021,
  VK_BLEND_OP_DST_ATOP_EXT: 1000148010,
  VK_BLEND_OP_DST_EXT: 1000148002,
  VK_BLEND_OP_DST_IN_EXT: 1000148006,
  VK_BLEND_OP_DST_OUT_EXT: 1000148008,
  VK_BLEND_OP_DST_OVER_EXT: 1000148004,
  VK_BLEND_OP_EXCLUSION_EXT: 1000148022,
  VK_BLEND_OP_GREEN_EXT: 1000148044,
  VK_BLEND_OP_HARDLIGHT_EXT: 1000148019,
  VK_BLEND_OP_HARDMIX_EXT: 1000148030,
  VK_BLEND_OP_HSL_COLOR_EXT: 1000148033,
  VK_BLEND_OP_HSL_HUE_EXT: 1000148031,
  VK_BLEND_OP_HSL_LUMINOSITY_EXT: 1000148034,
  VK_BLEND_OP_HSL_SATURATION_EXT: 1000148032,
  VK_BLEND_OP_INVERT_EXT: 1000148023,
  VK_BLEND_OP_INVERT_OVG_EXT: 1000148042,
  VK_BLEND_OP_INVERT_RGB_EXT: 1000148024,
  VK_BLEND_OP_LIGHTEN_EXT: 1000148016,
  VK_BLEND_OP_LINEARBURN_EXT: 1000148026,
  VK_BLEND_OP_LINEARDODGE_EXT: 1000148025,
  VK_BLEND_OP_LINEARLIGHT_EXT: 1000148028,
  VK_BLEND_OP_MAX: 4,
  VK_BLEND_OP_MIN: 3,
  VK_BLEND_OP_MINUS_CLAMPED_EXT: 1000148040,
  VK_BLEND_OP_MINUS_EXT: 1000148039,
  VK_BLEND_OP_MULTIPLY_EXT: 1000148012,
  VK_BLEND_OP_OVERLAY_EXT: 1000148014,
  VK_BLEND_OP_PINLIGHT_EXT: 1000148029,
  VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT: 1000148037,
  VK_BLEND_OP_PLUS_CLAMPED_EXT: 1000148036,
  VK_BLEND_OP_PLUS_DARKER_EXT: 1000148038,
  VK_BLEND_OP_PLUS_EXT: 1000148035,
  VK_BLEND_OP_RED_EXT: 1000148043,
  VK_BLEND_OP_REVERSE_SUBTRACT: 2,
  VK_BLEND_OP_SCREEN_EXT: 1000148013,
  VK_BLEND_OP_SOFTLIGHT_EXT: 1000148020,
  VK_BLEND_OP_SRC_ATOP_EXT: 1000148009,
  VK_BLEND_OP_SRC_EXT: 1000148001,
  VK_BLEND_OP_SRC_IN_EXT: 1000148005,
  VK_BLEND_OP_SRC_OUT_EXT: 1000148007,
  VK_BLEND_OP_SRC_OVER_EXT: 1000148003,
  VK_BLEND_OP_SUBTRACT: 1,
  VK_BLEND_OP_VIVIDLIGHT_EXT: 1000148027,
  VK_BLEND_OP_XOR_EXT: 1000148011,
  VK_BLEND_OP_ZERO_EXT: 1000148000
};

const VkStencilOp = {
  VK_STENCIL_OP_DECREMENT_AND_CLAMP: 4,
  VK_STENCIL_OP_DECREMENT_AND_WRAP: 7,
  VK_STENCIL_OP_INCREMENT_AND_CLAMP: 3,
  VK_STENCIL_OP_INCREMENT_AND_WRAP: 6,
  VK_STENCIL_OP_INVERT: 5,
  VK_STENCIL_OP_KEEP: 0,
  VK_STENCIL_OP_REPLACE: 2,
  VK_STENCIL_OP_ZERO: 1
};

const VkLogicOp = {
  VK_LOGIC_OP_AND: 1,
  VK_LOGIC_OP_AND_INVERTED: 4,
  VK_LOGIC_OP_AND_REVERSE: 2,
  VK_LOGIC_OP_CLEAR: 0,
  VK_LOGIC_OP_COPY: 3,
  VK_LOGIC_OP_COPY_INVERTED: 12,
  VK_LOGIC_OP_EQUIVALENT: 9,
  VK_LOGIC_OP_INVERT: 10,
  VK_LOGIC_OP_NAND: 14,
  VK_LOGIC_OP_NOR: 8,
  VK_LOGIC_OP_NO_OP: 5,
  VK_LOGIC_OP_OR: 7,
  VK_LOGIC_OP_OR_INVERTED: 13,
  VK_LOGIC_OP_OR_REVERSE: 11,
  VK_LOGIC_OP_SET: 15,
  VK_LOGIC_OP_XOR: 6
};

const VkInternalAllocationType = {
  VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE: 0
};

const VkSystemAllocationScope = {
  VK_SYSTEM_ALLOCATION_SCOPE_CACHE: 2,
  VK_SYSTEM_ALLOCATION_SCOPE_COMMAND: 0,
  VK_SYSTEM_ALLOCATION_SCOPE_DEVICE: 3,
  VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE: 4,
  VK_SYSTEM_ALLOCATION_SCOPE_OBJECT: 1
};

const VkPhysicalDeviceType = {
  VK_PHYSICAL_DEVICE_TYPE_CPU: 4,
  VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU: 2,
  VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU: 1,
  VK_PHYSICAL_DEVICE_TYPE_OTHER: 0,
  VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU: 3
};

const VkVertexInputRate = {
  VK_VERTEX_INPUT_RATE_INSTANCE: 1,
  VK_VERTEX_INPUT_RATE_VERTEX: 0
};

const VkFormat = {
  VK_FORMAT_A1R5G5B5_UNORM_PACK16: 8,
  VK_FORMAT_A2B10G10R10_SINT_PACK32: 69,
  VK_FORMAT_A2B10G10R10_SNORM_PACK32: 65,
  VK_FORMAT_A2B10G10R10_SSCALED_PACK32: 67,
  VK_FORMAT_A2B10G10R10_UINT_PACK32: 68,
  VK_FORMAT_A2B10G10R10_UNORM_PACK32: 64,
  VK_FORMAT_A2B10G10R10_USCALED_PACK32: 66,
  VK_FORMAT_A2R10G10B10_SINT_PACK32: 63,
  VK_FORMAT_A2R10G10B10_SNORM_PACK32: 59,
  VK_FORMAT_A2R10G10B10_SSCALED_PACK32: 61,
  VK_FORMAT_A2R10G10B10_UINT_PACK32: 62,
  VK_FORMAT_A2R10G10B10_UNORM_PACK32: 58,
  VK_FORMAT_A2R10G10B10_USCALED_PACK32: 60,
  VK_FORMAT_A8B8G8R8_SINT_PACK32: 56,
  VK_FORMAT_A8B8G8R8_SNORM_PACK32: 52,
  VK_FORMAT_A8B8G8R8_SRGB_PACK32: 57,
  VK_FORMAT_A8B8G8R8_SSCALED_PACK32: 54,
  VK_FORMAT_A8B8G8R8_UINT_PACK32: 55,
  VK_FORMAT_A8B8G8R8_UNORM_PACK32: 51,
  VK_FORMAT_A8B8G8R8_USCALED_PACK32: 53,
  VK_FORMAT_ASTC_10x10_SRGB_BLOCK: 180,
  VK_FORMAT_ASTC_10x10_UNORM_BLOCK: 179,
  VK_FORMAT_ASTC_10x5_SRGB_BLOCK: 174,
  VK_FORMAT_ASTC_10x5_UNORM_BLOCK: 173,
  VK_FORMAT_ASTC_10x6_SRGB_BLOCK: 176,
  VK_FORMAT_ASTC_10x6_UNORM_BLOCK: 175,
  VK_FORMAT_ASTC_10x8_SRGB_BLOCK: 178,
  VK_FORMAT_ASTC_10x8_UNORM_BLOCK: 177,
  VK_FORMAT_ASTC_12x10_SRGB_BLOCK: 182,
  VK_FORMAT_ASTC_12x10_UNORM_BLOCK: 181,
  VK_FORMAT_ASTC_12x12_SRGB_BLOCK: 184,
  VK_FORMAT_ASTC_12x12_UNORM_BLOCK: 183,
  VK_FORMAT_ASTC_4x4_SRGB_BLOCK: 158,
  VK_FORMAT_ASTC_4x4_UNORM_BLOCK: 157,
  VK_FORMAT_ASTC_5x4_SRGB_BLOCK: 160,
  VK_FORMAT_ASTC_5x4_UNORM_BLOCK: 159,
  VK_FORMAT_ASTC_5x5_SRGB_BLOCK: 162,
  VK_FORMAT_ASTC_5x5_UNORM_BLOCK: 161,
  VK_FORMAT_ASTC_6x5_SRGB_BLOCK: 164,
  VK_FORMAT_ASTC_6x5_UNORM_BLOCK: 163,
  VK_FORMAT_ASTC_6x6_SRGB_BLOCK: 166,
  VK_FORMAT_ASTC_6x6_UNORM_BLOCK: 165,
  VK_FORMAT_ASTC_8x5_SRGB_BLOCK: 168,
  VK_FORMAT_ASTC_8x5_UNORM_BLOCK: 167,
  VK_FORMAT_ASTC_8x6_SRGB_BLOCK: 170,
  VK_FORMAT_ASTC_8x6_UNORM_BLOCK: 169,
  VK_FORMAT_ASTC_8x8_SRGB_BLOCK: 172,
  VK_FORMAT_ASTC_8x8_UNORM_BLOCK: 171,
  VK_FORMAT_B10G11R11_UFLOAT_PACK32: 122,
  VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR: 1000156011,
  VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR: 1000156021,
  VK_FORMAT_B16G16R16G16_422_UNORM_KHR: 1000156028,
  VK_FORMAT_B4G4R4A4_UNORM_PACK16: 3,
  VK_FORMAT_B5G5R5A1_UNORM_PACK16: 7,
  VK_FORMAT_B5G6R5_UNORM_PACK16: 5,
  VK_FORMAT_B8G8R8A8_SINT: 49,
  VK_FORMAT_B8G8R8A8_SNORM: 45,
  VK_FORMAT_B8G8R8A8_SRGB: 50,
  VK_FORMAT_B8G8R8A8_SSCALED: 47,
  VK_FORMAT_B8G8R8A8_UINT: 48,
  VK_FORMAT_B8G8R8A8_UNORM: 44,
  VK_FORMAT_B8G8R8A8_USCALED: 46,
  VK_FORMAT_B8G8R8G8_422_UNORM_KHR: 1000156001,
  VK_FORMAT_B8G8R8_SINT: 35,
  VK_FORMAT_B8G8R8_SNORM: 31,
  VK_FORMAT_B8G8R8_SRGB: 36,
  VK_FORMAT_B8G8R8_SSCALED: 33,
  VK_FORMAT_B8G8R8_UINT: 34,
  VK_FORMAT_B8G8R8_UNORM: 30,
  VK_FORMAT_B8G8R8_USCALED: 32,
  VK_FORMAT_BC1_RGBA_SRGB_BLOCK: 134,
  VK_FORMAT_BC1_RGBA_UNORM_BLOCK: 133,
  VK_FORMAT_BC1_RGB_SRGB_BLOCK: 132,
  VK_FORMAT_BC1_RGB_UNORM_BLOCK: 131,
  VK_FORMAT_BC2_SRGB_BLOCK: 136,
  VK_FORMAT_BC2_UNORM_BLOCK: 135,
  VK_FORMAT_BC3_SRGB_BLOCK: 138,
  VK_FORMAT_BC3_UNORM_BLOCK: 137,
  VK_FORMAT_BC4_SNORM_BLOCK: 140,
  VK_FORMAT_BC4_UNORM_BLOCK: 139,
  VK_FORMAT_BC5_SNORM_BLOCK: 142,
  VK_FORMAT_BC5_UNORM_BLOCK: 141,
  VK_FORMAT_BC6H_SFLOAT_BLOCK: 144,
  VK_FORMAT_BC6H_UFLOAT_BLOCK: 143,
  VK_FORMAT_BC7_SRGB_BLOCK: 146,
  VK_FORMAT_BC7_UNORM_BLOCK: 145,
  VK_FORMAT_D16_UNORM: 124,
  VK_FORMAT_D16_UNORM_S8_UINT: 128,
  VK_FORMAT_D24_UNORM_S8_UINT: 129,
  VK_FORMAT_D32_SFLOAT: 126,
  VK_FORMAT_D32_SFLOAT_S8_UINT: 130,
  VK_FORMAT_E5B9G9R9_UFLOAT_PACK32: 123,
  VK_FORMAT_EAC_R11G11_SNORM_BLOCK: 156,
  VK_FORMAT_EAC_R11G11_UNORM_BLOCK: 155,
  VK_FORMAT_EAC_R11_SNORM_BLOCK: 154,
  VK_FORMAT_EAC_R11_UNORM_BLOCK: 153,
  VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK: 150,
  VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK: 149,
  VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK: 152,
  VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK: 151,
  VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK: 148,
  VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK: 147,
  VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR: 1000156010,
  VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR: 1000156013,
  VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR: 1000156015,
  VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR: 1000156012,
  VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR: 1000156014,
  VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR: 1000156016,
  VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR: 1000156020,
  VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR: 1000156023,
  VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR: 1000156025,
  VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR: 1000156022,
  VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR: 1000156024,
  VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR: 1000156026,
  VK_FORMAT_G16B16G16R16_422_UNORM_KHR: 1000156027,
  VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR: 1000156030,
  VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR: 1000156032,
  VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR: 1000156029,
  VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR: 1000156031,
  VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR: 1000156033,
  VK_FORMAT_G8B8G8R8_422_UNORM_KHR: 1000156000,
  VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR: 1000156003,
  VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR: 1000156005,
  VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR: 1000156002,
  VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR: 1000156004,
  VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR: 1000156006,
  VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG: 1000054004,
  VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG: 1000054000,
  VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG: 1000054005,
  VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG: 1000054001,
  VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG: 1000054006,
  VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG: 1000054002,
  VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG: 1000054007,
  VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG: 1000054003,
  VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR: 1000156009,
  VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR: 1000156008,
  VK_FORMAT_R10X6_UNORM_PACK16_KHR: 1000156007,
  VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR: 1000156019,
  VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR: 1000156018,
  VK_FORMAT_R12X4_UNORM_PACK16_KHR: 1000156017,
  VK_FORMAT_R16G16B16A16_SFLOAT: 97,
  VK_FORMAT_R16G16B16A16_SINT: 96,
  VK_FORMAT_R16G16B16A16_SNORM: 92,
  VK_FORMAT_R16G16B16A16_SSCALED: 94,
  VK_FORMAT_R16G16B16A16_UINT: 95,
  VK_FORMAT_R16G16B16A16_UNORM: 91,
  VK_FORMAT_R16G16B16A16_USCALED: 93,
  VK_FORMAT_R16G16B16_SFLOAT: 90,
  VK_FORMAT_R16G16B16_SINT: 89,
  VK_FORMAT_R16G16B16_SNORM: 85,
  VK_FORMAT_R16G16B16_SSCALED: 87,
  VK_FORMAT_R16G16B16_UINT: 88,
  VK_FORMAT_R16G16B16_UNORM: 84,
  VK_FORMAT_R16G16B16_USCALED: 86,
  VK_FORMAT_R16G16_SFLOAT: 83,
  VK_FORMAT_R16G16_SINT: 82,
  VK_FORMAT_R16G16_SNORM: 78,
  VK_FORMAT_R16G16_SSCALED: 80,
  VK_FORMAT_R16G16_UINT: 81,
  VK_FORMAT_R16G16_UNORM: 77,
  VK_FORMAT_R16G16_USCALED: 79,
  VK_FORMAT_R16_SFLOAT: 76,
  VK_FORMAT_R16_SINT: 75,
  VK_FORMAT_R16_SNORM: 71,
  VK_FORMAT_R16_SSCALED: 73,
  VK_FORMAT_R16_UINT: 74,
  VK_FORMAT_R16_UNORM: 70,
  VK_FORMAT_R16_USCALED: 72,
  VK_FORMAT_R32G32B32A32_SFLOAT: 109,
  VK_FORMAT_R32G32B32A32_SINT: 108,
  VK_FORMAT_R32G32B32A32_UINT: 107,
  VK_FORMAT_R32G32B32_SFLOAT: 106,
  VK_FORMAT_R32G32B32_SINT: 105,
  VK_FORMAT_R32G32B32_UINT: 104,
  VK_FORMAT_R32G32_SFLOAT: 103,
  VK_FORMAT_R32G32_SINT: 102,
  VK_FORMAT_R32G32_UINT: 101,
  VK_FORMAT_R32_SFLOAT: 100,
  VK_FORMAT_R32_SINT: 99,
  VK_FORMAT_R32_UINT: 98,
  VK_FORMAT_R4G4B4A4_UNORM_PACK16: 2,
  VK_FORMAT_R4G4_UNORM_PACK8: 1,
  VK_FORMAT_R5G5B5A1_UNORM_PACK16: 6,
  VK_FORMAT_R5G6B5_UNORM_PACK16: 4,
  VK_FORMAT_R64G64B64A64_SFLOAT: 121,
  VK_FORMAT_R64G64B64A64_SINT: 120,
  VK_FORMAT_R64G64B64A64_UINT: 119,
  VK_FORMAT_R64G64B64_SFLOAT: 118,
  VK_FORMAT_R64G64B64_SINT: 117,
  VK_FORMAT_R64G64B64_UINT: 116,
  VK_FORMAT_R64G64_SFLOAT: 115,
  VK_FORMAT_R64G64_SINT: 114,
  VK_FORMAT_R64G64_UINT: 113,
  VK_FORMAT_R64_SFLOAT: 112,
  VK_FORMAT_R64_SINT: 111,
  VK_FORMAT_R64_UINT: 110,
  VK_FORMAT_R8G8B8A8_SINT: 42,
  VK_FORMAT_R8G8B8A8_SNORM: 38,
  VK_FORMAT_R8G8B8A8_SRGB: 43,
  VK_FORMAT_R8G8B8A8_SSCALED: 40,
  VK_FORMAT_R8G8B8A8_UINT: 41,
  VK_FORMAT_R8G8B8A8_UNORM: 37,
  VK_FORMAT_R8G8B8A8_USCALED: 39,
  VK_FORMAT_R8G8B8_SINT: 28,
  VK_FORMAT_R8G8B8_SNORM: 24,
  VK_FORMAT_R8G8B8_SRGB: 29,
  VK_FORMAT_R8G8B8_SSCALED: 26,
  VK_FORMAT_R8G8B8_UINT: 27,
  VK_FORMAT_R8G8B8_UNORM: 23,
  VK_FORMAT_R8G8B8_USCALED: 25,
  VK_FORMAT_R8G8_SINT: 21,
  VK_FORMAT_R8G8_SNORM: 17,
  VK_FORMAT_R8G8_SRGB: 22,
  VK_FORMAT_R8G8_SSCALED: 19,
  VK_FORMAT_R8G8_UINT: 20,
  VK_FORMAT_R8G8_UNORM: 16,
  VK_FORMAT_R8G8_USCALED: 18,
  VK_FORMAT_R8_SINT: 14,
  VK_FORMAT_R8_SNORM: 10,
  VK_FORMAT_R8_SRGB: 15,
  VK_FORMAT_R8_SSCALED: 12,
  VK_FORMAT_R8_UINT: 13,
  VK_FORMAT_R8_UNORM: 9,
  VK_FORMAT_R8_USCALED: 11,
  VK_FORMAT_S8_UINT: 127,
  VK_FORMAT_UNDEFINED: 0,
  VK_FORMAT_X8_D24_UNORM_PACK32: 125
};

const VkStructureType = {
  VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV: 1000165001,
  VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV: 1000165012,
  VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV: 1000165008,
  VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR: 1000060010,
  VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID: 1000129002,
  VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID: 1000129001,
  VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID: 1000129000,
  VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR: 1000008000,
  VK_STRUCTURE_TYPE_APPLICATION_INFO: 0,
  VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR: 1000109000,
  VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR: 1000109001,
  VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV: 1000165006,
  VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR: 1000060013,
  VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR: 1000157000,
  VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR: 1000060014,
  VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR: 1000157001,
  VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR: 1000060009,
  VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR: 1000156002,
  VK_STRUCTURE_TYPE_BIND_SPARSE_INFO: 7,
  VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO: 12,
  VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT: 1000244002,
  VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT: 1000244001,
  VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER: 44,
  VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR: 1000146000,
  VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO: 13,
  VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT: 1000184000,
  VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV: 1000206000,
  VK_STRUCTURE_TYPE_CMD_PROCESS_COMMANDS_INFO_NVX: 1000086002,
  VK_STRUCTURE_TYPE_CMD_RESERVE_SPACE_FOR_COMMANDS_INFO_NVX: 1000086003,
  VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO: 40,
  VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO: 42,
  VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT: 1000081000,
  VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO: 41,
  VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO: 39,
  VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO: 29,
  VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT: 1000081002,
  VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV: 1000249001,
  VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET: 36,
  VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR: 1000078002,
  VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT: 1000022002,
  VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT: 1000022000,
  VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT: 1000022001,
  VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT: 1000011000,
  VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT: 1000011000,
  VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT: 1000128002,
  VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT: 1000128003,
  VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT: 1000128004,
  VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT: 1000128000,
  VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT: 1000128001,
  VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV: 1000026001,
  VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV: 1000026000,
  VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV: 1000026002,
  VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO: 33,
  VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT: 1000138003,
  VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO: 34,
  VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT: 1000161000,
  VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO: 32,
  VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR: 1000168001,
  VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT: 1000161003,
  VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT: 1000161004,
  VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR: 1000085000,
  VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO: 3,
  VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT: 1000091001,
  VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_FEATURES_NVX: 1000086005,
  VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_LIMITS_NVX: 1000086004,
  VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR: 1000060006,
  VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR: 1000060004,
  VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR: 1000070001,
  VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR: 1000060007,
  VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR: 1000060011,
  VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR: 1000060003,
  VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR: 1000060005,
  VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR: 1000060012,
  VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD: 1000189000,
  VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO: 2,
  VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT: 1000174000,
  VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT: 1000091002,
  VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR: 1000002000,
  VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR: 1000121002,
  VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR: 1000121004,
  VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR: 1000121003,
  VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR: 1000121001,
  VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT: 1000091000,
  VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR: 1000003000,
  VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR: 1000121000,
  VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR: 1000002001,
  VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT: 1000158001,
  VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT: 1000158000,
  VK_STRUCTURE_TYPE_EVENT_CREATE_INFO: 10,
  VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR: 1000113000,
  VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR: 1000114001,
  VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR: 1000072002,
  VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV: 1000056001,
  VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR: 1000073001,
  VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV: 1000057001,
  VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR: 1000077000,
  VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR: 1000078001,
  VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR: 1000071003,
  VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR: 1000112001,
  VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID: 1000129005,
  VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR: 1000071001,
  VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR: 1000072000,
  VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR: 1000072001,
  VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV: 1000056000,
  VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR: 1000076001,
  VK_STRUCTURE_TYPE_FENCE_CREATE_INFO: 8,
  VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR: 1000115001,
  VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR: 1000114002,
  VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT: 1000170001,
  VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR: 1000059002,
  VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO: 37,
  VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV: 1000165005,
  VK_STRUCTURE_TYPE_GEOMETRY_NV: 1000165003,
  VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV: 1000165004,
  VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO: 28,
  VK_STRUCTURE_TYPE_HDR_METADATA_EXT: 1000105000,
  VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA: 1000214000,
  VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO: 14,
  VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT: 1000158004,
  VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT: 1000158003,
  VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT: 1000158005,
  VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR: 1000147000,
  VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR: 1000059003,
  VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER: 45,
  VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR: 1000146001,
  VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR: 1000156003,
  VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR: 1000146002,
  VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT: 1000246000,
  VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR: 1000060008,
  VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT: 1000067000,
  VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO: 15,
  VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR: 1000117002,
  VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID: 1000129003,
  VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR: 1000115000,
  VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR: 1000114000,
  VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR: 1000074000,
  VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT: 1000178000,
  VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR: 1000073000,
  VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV: 1000057000,
  VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR: 1000079000,
  VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR: 1000078000,
  VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NVX: 1000086001,
  VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO: 1,
  VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK: 1000122000,
  VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO: 48,
  VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO: 47,
  VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK: 1000123000,
  VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE: 6,
  VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR: 1000060000,
  VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO: 5,
  VK_STRUCTURE_TYPE_MEMORY_BARRIER: 46,
  VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR: 1000127001,
  VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR: 1000127000,
  VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR: 1000074001,
  VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID: 1000129004,
  VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR: 1000074002,
  VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR: 1000073003,
  VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT: 1000178001,
  VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT: 1000238001,
  VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR: 1000146003,
  VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR: 1000073002,
  VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT: 1000143004,
  VK_STRUCTURE_TYPE_NATIVE_BUFFER_ANDROID: 1000010000,
  VK_STRUCTURE_TYPE_OBJECT_TABLE_CREATE_INFO_NVX: 1000086000,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR: 1000083000,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR: 1000177000,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT: 1000067001,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT: 1000148000,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT: 1000148001,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT: 1000244000,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV: 1000201000,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT: 1000081001,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT: 1000101000,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV: 1000249000,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV: 1000249002,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV: 1000050000,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV: 1000240000,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT: 1000102000,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR: 1000199000,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT: 1000161001,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT: 1000161002,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT: 1000099000,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR: 1000196000,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV: 1000205002,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR: 1000071002,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR: 1000112000,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR: 1000071000,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT: 1000178002,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR: 1000076000,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR: 1000059000,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR: 1000082000,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR: 1000197000,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT: 1000218000,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT: 1000218001,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV: 1000203000,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR: 1000070000,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR: 1000071004,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT: 1000158002,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR: 1000059004,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT: 1000170000,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT: 1000138000,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT: 1000138001,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR: 1000168000,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT: 1000237000,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT: 1000238000,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR: 1000059006,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV: 1000202000,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV: 1000202001,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR: 1000053001,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX: 1000097000,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR: 1000053002,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT: 1000212000,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR: 1000117000,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR: 1000059001,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR: 1000080000,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV: 1000165009,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV: 1000166000,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT: 1000130000,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR: 1000156004,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT: 1000143003,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT: 1000221000,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR: 1000180000,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD: 1000185000,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV: 1000204000,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV: 1000164001,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV: 1000164002,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR: 1000059008,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR: 1000119000,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT: 1000028000,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT: 1000028001,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR: 1000120000,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT: 1000190002,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT: 1000190000,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR: 1000211000,
  VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO: 17,
  VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT: 1000148002,
  VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO: 26,
  VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV: 1000152000,
  VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV: 1000149000,
  VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO: 25,
  VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT: 1000099001,
  VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO: 27,
  VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO: 20,
  VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO: 30,
  VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO: 24,
  VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT: 1000101001,
  VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT: 1000102001,
  VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO: 23,
  VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD: 1000018000,
  VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT: 1000028002,
  VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV: 1000166001,
  VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT: 1000143002,
  VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO: 18,
  VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR: 1000117003,
  VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO: 21,
  VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT: 1000190001,
  VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO: 19,
  VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV: 1000164005,
  VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV: 1000205000,
  VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV: 1000164000,
  VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO: 22,
  VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV: 1000098000,
  VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV: 1000087000,
  VK_STRUCTURE_TYPE_PRESENT_INFO_KHR: 1000001001,
  VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR: 1000084000,
  VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE: 1000092000,
  VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO: 11,
  VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV: 1000206001,
  VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR: 1000059005,
  VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV: 1000165000,
  VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV: 1000165011,
  VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO: 43,
  VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO: 38,
  VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR: 1000109004,
  VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT: 1000218002,
  VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR: 1000117001,
  VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR: 1000053000,
  VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT: 1000143001,
  VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO: 31,
  VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT: 1000130001,
  VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR: 1000156000,
  VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR: 1000156005,
  VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR: 1000156001,
  VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT: 1000143000,
  VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO: 9,
  VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR: 1000079001,
  VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR: 1000078003,
  VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO: 16,
  VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT: 1000160001,
  VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR: 1000111000,
  VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR: 1000059007,
  VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR: 1000146004,
  VK_STRUCTURE_TYPE_SUBMIT_INFO: 4,
  VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR: 1000109005,
  VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR: 1000109003,
  VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR: 1000109002,
  VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR: 1000199001,
  VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR: 1000109006,
  VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT: 1000090000,
  VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT: 1000090000,
  VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR: 1000119001,
  VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR: 1000119002,
  VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT: 1000091003,
  VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR: 1000001000,
  VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD: 1000041000,
  VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT: 1000160000,
  VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT: 1000247000,
  VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT: 1000061000,
  VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN: 1000062000,
  VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR: 1000006000,
  VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR: 1000075000,
  VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV: 1000058000,
  VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR: 1000009000,
  VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET: 35,
  VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV: 1000165007,
  VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT: 1000138002,
  VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR: 1000005000,
  VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR: 1000004000
};

const VkSubpassContents = {
  VK_SUBPASS_CONTENTS_INLINE: 0,
  VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS: 1
};

const VkResult = {
  VK_ERROR_DEVICE_LOST: -4,
  VK_ERROR_EXTENSION_NOT_PRESENT: -7,
  VK_ERROR_FEATURE_NOT_PRESENT: -8,
  VK_ERROR_FORMAT_NOT_SUPPORTED: -11,
  VK_ERROR_FRAGMENTATION_EXT: -1000161000,
  VK_ERROR_FRAGMENTED_POOL: -12,
  VK_ERROR_INCOMPATIBLE_DISPLAY_KHR: -1000003001,
  VK_ERROR_INCOMPATIBLE_DRIVER: -9,
  VK_ERROR_INITIALIZATION_FAILED: -3,
  VK_ERROR_INVALID_DEVICE_ADDRESS_EXT: -1000244000,
  VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT: -1000158000,
  VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR: -1000072003,
  VK_ERROR_INVALID_SHADER_NV: -1000012000,
  VK_ERROR_LAYER_NOT_PRESENT: -6,
  VK_ERROR_MEMORY_MAP_FAILED: -5,
  VK_ERROR_NATIVE_WINDOW_IN_USE_KHR: -1000000001,
  VK_ERROR_NOT_PERMITTED_EXT: -1000174001,
  VK_ERROR_OUT_OF_DATE_KHR: -1000001004,
  VK_ERROR_OUT_OF_DEVICE_MEMORY: -2,
  VK_ERROR_OUT_OF_HOST_MEMORY: -1,
  VK_ERROR_OUT_OF_POOL_MEMORY_KHR: -1000069000,
  VK_ERROR_SURFACE_LOST_KHR: -1000000000,
  VK_ERROR_TOO_MANY_OBJECTS: -10,
  VK_ERROR_VALIDATION_FAILED_EXT: -1000011001,
  VK_EVENT_RESET: 4,
  VK_EVENT_SET: 3,
  VK_INCOMPLETE: 5,
  VK_NOT_READY: 1,
  VK_SUBOPTIMAL_KHR: 1000001003,
  VK_SUCCESS: 0,
  VK_TIMEOUT: 2
};

const VkDynamicState = {
  VK_DYNAMIC_STATE_BLEND_CONSTANTS: 4,
  VK_DYNAMIC_STATE_DEPTH_BIAS: 3,
  VK_DYNAMIC_STATE_DEPTH_BOUNDS: 5,
  VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT: 1000099000,
  VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV: 1000205001,
  VK_DYNAMIC_STATE_LINE_WIDTH: 2,
  VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT: 1000143000,
  VK_DYNAMIC_STATE_SCISSOR: 1,
  VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK: 6,
  VK_DYNAMIC_STATE_STENCIL_REFERENCE: 8,
  VK_DYNAMIC_STATE_STENCIL_WRITE_MASK: 7,
  VK_DYNAMIC_STATE_VIEWPORT: 0,
  VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV: 1000164006,
  VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV: 1000164004,
  VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV: 1000087000
};

const VkDescriptorUpdateTemplateType = {
  VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET: 0,
  VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR: 0
};

const VkObjectType = {
  VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV: 1000165000,
  VK_OBJECT_TYPE_BUFFER: 9,
  VK_OBJECT_TYPE_BUFFER_VIEW: 13,
  VK_OBJECT_TYPE_COMMAND_BUFFER: 6,
  VK_OBJECT_TYPE_COMMAND_POOL: 25,
  VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT: 1000011000,
  VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT: 1000128000,
  VK_OBJECT_TYPE_DESCRIPTOR_POOL: 22,
  VK_OBJECT_TYPE_DESCRIPTOR_SET: 23,
  VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT: 20,
  VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR: 1000085000,
  VK_OBJECT_TYPE_DEVICE: 3,
  VK_OBJECT_TYPE_DEVICE_MEMORY: 8,
  VK_OBJECT_TYPE_DISPLAY_KHR: 1000002000,
  VK_OBJECT_TYPE_DISPLAY_MODE_KHR: 1000002001,
  VK_OBJECT_TYPE_EVENT: 11,
  VK_OBJECT_TYPE_FENCE: 7,
  VK_OBJECT_TYPE_FRAMEBUFFER: 24,
  VK_OBJECT_TYPE_IMAGE: 10,
  VK_OBJECT_TYPE_IMAGE_VIEW: 14,
  VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NVX: 1000086001,
  VK_OBJECT_TYPE_INSTANCE: 1,
  VK_OBJECT_TYPE_OBJECT_TABLE_NVX: 1000086000,
  VK_OBJECT_TYPE_PHYSICAL_DEVICE: 2,
  VK_OBJECT_TYPE_PIPELINE: 19,
  VK_OBJECT_TYPE_PIPELINE_CACHE: 16,
  VK_OBJECT_TYPE_PIPELINE_LAYOUT: 17,
  VK_OBJECT_TYPE_QUERY_POOL: 12,
  VK_OBJECT_TYPE_QUEUE: 4,
  VK_OBJECT_TYPE_RENDER_PASS: 18,
  VK_OBJECT_TYPE_SAMPLER: 21,
  VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR: 1000156000,
  VK_OBJECT_TYPE_SEMAPHORE: 5,
  VK_OBJECT_TYPE_SHADER_MODULE: 15,
  VK_OBJECT_TYPE_SURFACE_KHR: 1000000000,
  VK_OBJECT_TYPE_SWAPCHAIN_KHR: 1000001000,
  VK_OBJECT_TYPE_UNKNOWN: 0,
  VK_OBJECT_TYPE_VALIDATION_CACHE_EXT: 1000160000
};

const VkPresentModeKHR = {
  VK_PRESENT_MODE_FIFO_KHR: 2,
  VK_PRESENT_MODE_FIFO_RELAXED_KHR: 3,
  VK_PRESENT_MODE_IMMEDIATE_KHR: 0,
  VK_PRESENT_MODE_MAILBOX_KHR: 1,
  VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR: 1000111001,
  VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR: 1000111000
};

const VkColorSpaceKHR = {
  VK_COLORSPACE_SRGB_NONLINEAR_KHR: 0,
  VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT: 1000104011,
  VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT: 1000104012,
  VK_COLOR_SPACE_BT2020_LINEAR_EXT: 1000104007,
  VK_COLOR_SPACE_BT709_LINEAR_EXT: 1000104005,
  VK_COLOR_SPACE_BT709_NONLINEAR_EXT: 1000104006,
  VK_COLOR_SPACE_DCI_P3_LINEAR_EXT: 1000104003,
  VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT: 1000104004,
  VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT: 1000104001,
  VK_COLOR_SPACE_DOLBYVISION_EXT: 1000104009,
  VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT: 1000104002,
  VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT: 1000104014,
  VK_COLOR_SPACE_HDR10_HLG_EXT: 1000104010,
  VK_COLOR_SPACE_HDR10_ST2084_EXT: 1000104008,
  VK_COLOR_SPACE_PASS_THROUGH_EXT: 1000104013,
  VK_COLOR_SPACE_SRGB_NONLINEAR_KHR: 0
};

const VkTimeDomainEXT = {
  VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT: 1,
  VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT: 2,
  VK_TIME_DOMAIN_DEVICE_EXT: 0,
  VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT: 3
};

const VkDebugReportObjectTypeEXT = {
  VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT: 1000165000,
  VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT: 9,
  VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT: 13,
  VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT: 6,
  VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT: 25,
  VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT: 28,
  VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT: 28,
  VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT: 22,
  VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT: 23,
  VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT: 20,
  VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT: 1000085000,
  VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT: 1000085000,
  VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT: 3,
  VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT: 8,
  VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT: 29,
  VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT: 30,
  VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT: 11,
  VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT: 7,
  VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT: 24,
  VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT: 10,
  VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT: 14,
  VK_DEBUG_REPORT_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NVX_EXT: 32,
  VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT: 1,
  VK_DEBUG_REPORT_OBJECT_TYPE_OBJECT_TABLE_NVX_EXT: 31,
  VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT: 2,
  VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT: 16,
  VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT: 19,
  VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT: 17,
  VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT: 12,
  VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT: 4,
  VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT: 18,
  VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT: 21,
  VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT: 1000156000,
  VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT: 1000156000,
  VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT: 5,
  VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT: 15,
  VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT: 26,
  VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT: 27,
  VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT: 0,
  VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT: 33,
  VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT: 33
};

const VkRasterizationOrderAMD = {
  VK_RASTERIZATION_ORDER_RELAXED_AMD: 1,
  VK_RASTERIZATION_ORDER_STRICT_AMD: 0
};

const VkValidationCheckEXT = {
  VK_VALIDATION_CHECK_ALL_EXT: 0,
  VK_VALIDATION_CHECK_SHADERS_EXT: 1
};

const VkValidationFeatureEnableEXT = {
  VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT: 0,
  VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT: 1
};

const VkValidationFeatureDisableEXT = {
  VK_VALIDATION_FEATURE_DISABLE_ALL_EXT: 0,
  VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT: 3,
  VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT: 5,
  VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT: 4,
  VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT: 1,
  VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT: 2,
  VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT: 6
};

const VkIndirectCommandsTokenTypeNVX = {
  VK_INDIRECT_COMMANDS_TOKEN_TYPE_DESCRIPTOR_SET_NVX: 1,
  VK_INDIRECT_COMMANDS_TOKEN_TYPE_DISPATCH_NVX: 7,
  VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NVX: 5,
  VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NVX: 6,
  VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NVX: 2,
  VK_INDIRECT_COMMANDS_TOKEN_TYPE_PIPELINE_NVX: 0,
  VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NVX: 4,
  VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NVX: 3
};

const VkObjectEntryTypeNVX = {
  VK_OBJECT_ENTRY_TYPE_DESCRIPTOR_SET_NVX: 0,
  VK_OBJECT_ENTRY_TYPE_INDEX_BUFFER_NVX: 2,
  VK_OBJECT_ENTRY_TYPE_PIPELINE_NVX: 1,
  VK_OBJECT_ENTRY_TYPE_PUSH_CONSTANT_NVX: 4,
  VK_OBJECT_ENTRY_TYPE_VERTEX_BUFFER_NVX: 3
};

const VkDisplayPowerStateEXT = {
  VK_DISPLAY_POWER_STATE_OFF_EXT: 0,
  VK_DISPLAY_POWER_STATE_ON_EXT: 2,
  VK_DISPLAY_POWER_STATE_SUSPEND_EXT: 1
};

const VkDeviceEventTypeEXT = {
  VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT: 0
};

const VkDisplayEventTypeEXT = {
  VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT: 0
};

const VkViewportCoordinateSwizzleNV = {
  VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV: 7,
  VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV: 1,
  VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV: 3,
  VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV: 5,
  VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV: 6,
  VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV: 0,
  VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV: 2,
  VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV: 4
};

const VkDiscardRectangleModeEXT = {
  VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT: 1,
  VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT: 0
};

const VkPointClippingBehavior = {
  VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES: 0,
  VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR: 0,
  VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY: 1,
  VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR: 1
};

const VkSamplerReductionModeEXT = {
  VK_SAMPLER_REDUCTION_MODE_MAX_EXT: 2,
  VK_SAMPLER_REDUCTION_MODE_MIN_EXT: 1,
  VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT: 0
};

const VkTessellationDomainOrigin = {
  VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT: 1,
  VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR: 1,
  VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT: 0,
  VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR: 0
};

const VkSamplerYcbcrModelConversion = {
  VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY: 0,
  VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR: 0,
  VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020: 4,
  VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR: 4,
  VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601: 3,
  VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR: 3,
  VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709: 2,
  VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR: 2,
  VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY: 1,
  VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR: 1
};

const VkSamplerYcbcrRange = {
  VK_SAMPLER_YCBCR_RANGE_ITU_FULL: 0,
  VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR: 0,
  VK_SAMPLER_YCBCR_RANGE_ITU_NARROW: 1,
  VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR: 1
};

const VkChromaLocation = {
  VK_CHROMA_LOCATION_COSITED_EVEN: 0,
  VK_CHROMA_LOCATION_COSITED_EVEN_KHR: 0,
  VK_CHROMA_LOCATION_MIDPOINT: 1,
  VK_CHROMA_LOCATION_MIDPOINT_KHR: 1
};

const VkBlendOverlapEXT = {
  VK_BLEND_OVERLAP_CONJOINT_EXT: 2,
  VK_BLEND_OVERLAP_DISJOINT_EXT: 1,
  VK_BLEND_OVERLAP_UNCORRELATED_EXT: 0
};

const VkCoverageModulationModeNV = {
  VK_COVERAGE_MODULATION_MODE_ALPHA_NV: 2,
  VK_COVERAGE_MODULATION_MODE_NONE_NV: 0,
  VK_COVERAGE_MODULATION_MODE_RGBA_NV: 3,
  VK_COVERAGE_MODULATION_MODE_RGB_NV: 1
};

const VkValidationCacheHeaderVersionEXT = {
  VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT: 1
};

const VkShaderInfoTypeAMD = {
  VK_SHADER_INFO_TYPE_BINARY_AMD: 1,
  VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD: 2,
  VK_SHADER_INFO_TYPE_STATISTICS_AMD: 0
};

const VkQueueGlobalPriorityEXT = {
  VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT: 512,
  VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT: 128,
  VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT: 256,
  VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT: 1024
};

const VkConservativeRasterizationModeEXT = {
  VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT: 0,
  VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT: 1,
  VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT: 2
};

const VkVendorId = {
  VK_VENDOR_ID_KAZAN: 65539,
  VK_VENDOR_ID_VIV: 65537,
  VK_VENDOR_ID_VSI: 65538
};

const VkDriverIdKHR = {
  VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR: 2,
  VK_DRIVER_ID_AMD_PROPRIETARY_KHR: 1,
  VK_DRIVER_ID_ARM_PROPRIETARY_KHR: 9,
  VK_DRIVER_ID_GOOGLE_PASTEL_KHR: 10,
  VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR: 7,
  VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR: 6,
  VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR: 5,
  VK_DRIVER_ID_MESA_RADV_KHR: 3,
  VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR: 4,
  VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR: 8
};

const VkShadingRatePaletteEntryNV = {
  VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV: 1,
  VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV: 7,
  VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV: 6,
  VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV: 8,
  VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV: 10,
  VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV: 9,
  VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV: 11,
  VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV: 5,
  VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV: 4,
  VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV: 3,
  VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV: 2,
  VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV: 0
};

const VkCoarseSampleOrderTypeNV = {
  VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV: 1,
  VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV: 0,
  VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV: 2,
  VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV: 3
};

const VkCopyAccelerationStructureModeNV = {
  VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV: 0,
  VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV: 1
};

const VkAccelerationStructureTypeNV = {
  VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV: 1,
  VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV: 0
};

const VkGeometryTypeNV = {
  VK_GEOMETRY_TYPE_AABBS_NV: 1,
  VK_GEOMETRY_TYPE_TRIANGLES_NV: 0
};

const VkAccelerationStructureMemoryRequirementsTypeNV = {
  VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV: 1,
  VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV: 0,
  VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV: 2
};

const VkRayTracingShaderGroupTypeNV = {
  VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV: 0,
  VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV: 2,
  VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV: 1
};

const VkMemoryOverallocationBehaviorAMD = {
  VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD: 1,
  VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD: 0,
  VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD: 2
};

const VkScopeNV = {
  VK_SCOPE_DEVICE_NV: 1,
  VK_SCOPE_QUEUE_FAMILY_NV: 5,
  VK_SCOPE_SUBGROUP_NV: 3,
  VK_SCOPE_WORKGROUP_NV: 2
};

const VkComponentTypeNV = {
  VK_COMPONENT_TYPE_FLOAT16_NV: 0,
  VK_COMPONENT_TYPE_FLOAT32_NV: 1,
  VK_COMPONENT_TYPE_FLOAT64_NV: 2,
  VK_COMPONENT_TYPE_SINT16_NV: 4,
  VK_COMPONENT_TYPE_SINT32_NV: 5,
  VK_COMPONENT_TYPE_SINT64_NV: 6,
  VK_COMPONENT_TYPE_SINT8_NV: 3,
  VK_COMPONENT_TYPE_UINT16_NV: 8,
  VK_COMPONENT_TYPE_UINT32_NV: 9,
  VK_COMPONENT_TYPE_UINT64_NV: 10,
  VK_COMPONENT_TYPE_UINT8_NV: 7
};

const VkCullModeFlagBits = {
  VK_CULL_MODE_BACK_BIT: 2,
  VK_CULL_MODE_FRONT_AND_BACK: 3,
  VK_CULL_MODE_FRONT_BIT: 1,
  VK_CULL_MODE_NONE: 0
};

const VkQueueFlagBits = {
  VK_QUEUE_COMPUTE_BIT: 2,
  VK_QUEUE_GRAPHICS_BIT: 1,
  VK_QUEUE_RESERVED_5_BIT_KHR: 32,
  VK_QUEUE_RESERVED_6_BIT_KHR: 64,
  VK_QUEUE_SPARSE_BINDING_BIT: 8,
  VK_QUEUE_TRANSFER_BIT: 4
};

const VkRenderPassCreateFlagBits = {
  VK_RENDER_PASS_CREATE_RESERVED_0_BIT_KHR: 1
};

const VkDeviceQueueCreateFlagBits = {};

const VkMemoryPropertyFlagBits = {
  VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT: 1,
  VK_MEMORY_PROPERTY_HOST_CACHED_BIT: 8,
  VK_MEMORY_PROPERTY_HOST_COHERENT_BIT: 4,
  VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT: 2,
  VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT: 16
};

const VkMemoryHeapFlagBits = {
  VK_MEMORY_HEAP_DEVICE_LOCAL_BIT: 1,
  VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR: 2
};

const VkAccessFlagBits = {
  VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV: 2097152,
  VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV: 4194304,
  VK_ACCESS_COLOR_ATTACHMENT_READ_BIT: 128,
  VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT: 524288,
  VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT: 256,
  VK_ACCESS_COMMAND_PROCESS_READ_BIT_NVX: 131072,
  VK_ACCESS_COMMAND_PROCESS_WRITE_BIT_NVX: 262144,
  VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT: 1048576,
  VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT: 512,
  VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT: 1024,
  VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT: 16777216,
  VK_ACCESS_HOST_READ_BIT: 8192,
  VK_ACCESS_HOST_WRITE_BIT: 16384,
  VK_ACCESS_INDEX_READ_BIT: 2,
  VK_ACCESS_INDIRECT_COMMAND_READ_BIT: 1,
  VK_ACCESS_INPUT_ATTACHMENT_READ_BIT: 16,
  VK_ACCESS_MEMORY_READ_BIT: 32768,
  VK_ACCESS_MEMORY_WRITE_BIT: 65536,
  VK_ACCESS_RESERVED_28_BIT_KHR: 268435456,
  VK_ACCESS_RESERVED_29_BIT_KHR: 536870912,
  VK_ACCESS_RESERVED_30_BIT_KHR: 1073741824,
  VK_ACCESS_RESERVED_31_BIT_KHR: -2147483648,
  VK_ACCESS_SHADER_READ_BIT: 32,
  VK_ACCESS_SHADER_WRITE_BIT: 64,
  VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV: 8388608,
  VK_ACCESS_TRANSFER_READ_BIT: 2048,
  VK_ACCESS_TRANSFER_WRITE_BIT: 4096,
  VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT: 67108864,
  VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT: 134217728,
  VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT: 33554432,
  VK_ACCESS_UNIFORM_READ_BIT: 8,
  VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT: 4
};

const VkBufferUsageFlagBits = {
  VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT: 512,
  VK_BUFFER_USAGE_INDEX_BUFFER_BIT: 64,
  VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT: 256,
  VK_BUFFER_USAGE_RAY_TRACING_BIT_NV: 1024,
  VK_BUFFER_USAGE_RESERVED_13_BIT_KHR: 8192,
  VK_BUFFER_USAGE_RESERVED_14_BIT_KHR: 16384,
  VK_BUFFER_USAGE_RESERVED_15_BIT_KHR: 32768,
  VK_BUFFER_USAGE_RESERVED_16_BIT_KHR: 65536,
  VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT: 131072,
  VK_BUFFER_USAGE_STORAGE_BUFFER_BIT: 32,
  VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT: 8,
  VK_BUFFER_USAGE_TRANSFER_DST_BIT: 2,
  VK_BUFFER_USAGE_TRANSFER_SRC_BIT: 1,
  VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT: 2048,
  VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT: 4096,
  VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT: 16,
  VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT: 4,
  VK_BUFFER_USAGE_VERTEX_BUFFER_BIT: 128
};

const VkBufferCreateFlagBits = {
  VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT: 16,
  VK_BUFFER_CREATE_SPARSE_ALIASED_BIT: 4,
  VK_BUFFER_CREATE_SPARSE_BINDING_BIT: 1,
  VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT: 2
};

const VkShaderStageFlagBits = {
  VK_SHADER_STAGE_ALL: 2147483647,
  VK_SHADER_STAGE_ALL_GRAPHICS: 31,
  VK_SHADER_STAGE_ANY_HIT_BIT_NV: 512,
  VK_SHADER_STAGE_CALLABLE_BIT_NV: 8192,
  VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV: 1024,
  VK_SHADER_STAGE_COMPUTE_BIT: 32,
  VK_SHADER_STAGE_FRAGMENT_BIT: 16,
  VK_SHADER_STAGE_GEOMETRY_BIT: 8,
  VK_SHADER_STAGE_INTERSECTION_BIT_NV: 4096,
  VK_SHADER_STAGE_MESH_BIT_NV: 128,
  VK_SHADER_STAGE_MISS_BIT_NV: 2048,
  VK_SHADER_STAGE_RAYGEN_BIT_NV: 256,
  VK_SHADER_STAGE_TASK_BIT_NV: 64,
  VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT: 2,
  VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT: 4,
  VK_SHADER_STAGE_VERTEX_BIT: 1
};

const VkImageUsageFlagBits = {
  VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT: 16,
  VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT: 32,
  VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT: 512,
  VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT: 128,
  VK_IMAGE_USAGE_RESERVED_10_BIT_KHR: 1024,
  VK_IMAGE_USAGE_RESERVED_11_BIT_KHR: 2048,
  VK_IMAGE_USAGE_RESERVED_12_BIT_KHR: 4096,
  VK_IMAGE_USAGE_RESERVED_13_BIT_KHR: 8192,
  VK_IMAGE_USAGE_RESERVED_14_BIT_KHR: 16384,
  VK_IMAGE_USAGE_RESERVED_15_BIT_KHR: 32768,
  VK_IMAGE_USAGE_SAMPLED_BIT: 4,
  VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV: 256,
  VK_IMAGE_USAGE_STORAGE_BIT: 8,
  VK_IMAGE_USAGE_TRANSFER_DST_BIT: 2,
  VK_IMAGE_USAGE_TRANSFER_SRC_BIT: 1,
  VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT: 64
};

const VkImageCreateFlagBits = {
  VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR: 32,
  VK_IMAGE_CREATE_ALIAS_BIT_KHR: 1024,
  VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR: 128,
  VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV: 8192,
  VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT: 16,
  VK_IMAGE_CREATE_DISJOINT_BIT_KHR: 512,
  VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR: 256,
  VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT: 8,
  VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT: 4096,
  VK_IMAGE_CREATE_SPARSE_ALIASED_BIT: 4,
  VK_IMAGE_CREATE_SPARSE_BINDING_BIT: 1,
  VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT: 2,
  VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR: 64,
  VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT: 16384
};

const VkImageViewCreateFlagBits = {
  VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT: 1
};

const VkSamplerCreateFlagBits = {
  VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT: 1,
  VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT: 2
};

const VkPipelineCreateFlagBits = {
  VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT: 2,
  VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV: 32,
  VK_PIPELINE_CREATE_DERIVATIVE_BIT: 4,
  VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT: 1,
  VK_PIPELINE_CREATE_DISPATCH_BASE_KHR: 16,
  VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR: 8
};

const VkColorComponentFlagBits = {
  VK_COLOR_COMPONENT_A_BIT: 8,
  VK_COLOR_COMPONENT_B_BIT: 4,
  VK_COLOR_COMPONENT_G_BIT: 2,
  VK_COLOR_COMPONENT_R_BIT: 1
};

const VkFenceCreateFlagBits = {
  VK_FENCE_CREATE_SIGNALED_BIT: 1
};

const VkFormatFeatureFlagBits = {
  VK_FORMAT_FEATURE_BLIT_DST_BIT: 2048,
  VK_FORMAT_FEATURE_BLIT_SRC_BIT: 1024,
  VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT: 128,
  VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT: 256,
  VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR: 8388608,
  VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT: 512,
  VK_FORMAT_FEATURE_DISJOINT_BIT_KHR: 4194304,
  VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT: 16777216,
  VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR: 131072,
  VK_FORMAT_FEATURE_RESERVED_25_BIT_KHR: 33554432,
  VK_FORMAT_FEATURE_RESERVED_26_BIT_KHR: 67108864,
  VK_FORMAT_FEATURE_RESERVED_27_BIT_KHR: 134217728,
  VK_FORMAT_FEATURE_RESERVED_28_BIT_KHR: 268435456,
  VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT: 1,
  VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT: 8192,
  VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG: 8192,
  VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT: 4096,
  VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT: 65536,
  VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR: 1048576,
  VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR: 2097152,
  VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR: 262144,
  VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR: 524288,
  VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT: 4,
  VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT: 2,
  VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT: 32,
  VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT: 16,
  VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR: 32768,
  VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR: 16384,
  VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT: 8,
  VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT: 64
};

const VkQueryControlFlagBits = {
  VK_QUERY_CONTROL_PRECISE_BIT: 1
};

const VkQueryResultFlagBits = {
  VK_QUERY_RESULT_64_BIT: 1,
  VK_QUERY_RESULT_PARTIAL_BIT: 8,
  VK_QUERY_RESULT_WAIT_BIT: 2,
  VK_QUERY_RESULT_WITH_AVAILABILITY_BIT: 4
};

const VkCommandBufferUsageFlagBits = {
  VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT: 1,
  VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT: 2,
  VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT: 4
};

const VkQueryPipelineStatisticFlagBits = {
  VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT: 32,
  VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT: 64,
  VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT: 1024,
  VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT: 128,
  VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT: 8,
  VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT: 16,
  VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT: 2,
  VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT: 1,
  VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT: 256,
  VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT: 512,
  VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT: 4
};

const VkImageAspectFlagBits = {
  VK_IMAGE_ASPECT_COLOR_BIT: 1,
  VK_IMAGE_ASPECT_DEPTH_BIT: 2,
  VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT: 128,
  VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT: 256,
  VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT: 512,
  VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT: 1024,
  VK_IMAGE_ASPECT_METADATA_BIT: 8,
  VK_IMAGE_ASPECT_PLANE_0_BIT_KHR: 16,
  VK_IMAGE_ASPECT_PLANE_1_BIT_KHR: 32,
  VK_IMAGE_ASPECT_PLANE_2_BIT_KHR: 64,
  VK_IMAGE_ASPECT_STENCIL_BIT: 4
};

const VkSparseImageFormatFlagBits = {
  VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT: 2,
  VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT: 4,
  VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT: 1
};

const VkSparseMemoryBindFlagBits = {
  VK_SPARSE_MEMORY_BIND_METADATA_BIT: 1
};

const VkPipelineStageFlagBits = {
  VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV: 33554432,
  VK_PIPELINE_STAGE_ALL_COMMANDS_BIT: 65536,
  VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT: 32768,
  VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT: 8192,
  VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT: 1024,
  VK_PIPELINE_STAGE_COMMAND_PROCESS_BIT_NVX: 131072,
  VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT: 2048,
  VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT: 262144,
  VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT: 2,
  VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT: 256,
  VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT: 8388608,
  VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT: 128,
  VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT: 64,
  VK_PIPELINE_STAGE_HOST_BIT: 16384,
  VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT: 512,
  VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV: 1048576,
  VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV: 2097152,
  VK_PIPELINE_STAGE_RESERVED_26_BIT_KHR: 67108864,
  VK_PIPELINE_STAGE_RESERVED_27_BIT_KHR: 134217728,
  VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV: 4194304,
  VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV: 524288,
  VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT: 16,
  VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT: 32,
  VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT: 1,
  VK_PIPELINE_STAGE_TRANSFER_BIT: 4096,
  VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT: 16777216,
  VK_PIPELINE_STAGE_VERTEX_INPUT_BIT: 4,
  VK_PIPELINE_STAGE_VERTEX_SHADER_BIT: 8
};

const VkCommandPoolCreateFlagBits = {
  VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT: 2,
  VK_COMMAND_POOL_CREATE_TRANSIENT_BIT: 1
};

const VkCommandPoolResetFlagBits = {
  VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT: 1
};

const VkCommandBufferResetFlagBits = {
  VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT: 1
};

const VkSampleCountFlagBits = {
  VK_SAMPLE_COUNT_16_BIT: 16,
  VK_SAMPLE_COUNT_1_BIT: 1,
  VK_SAMPLE_COUNT_2_BIT: 2,
  VK_SAMPLE_COUNT_32_BIT: 32,
  VK_SAMPLE_COUNT_4_BIT: 4,
  VK_SAMPLE_COUNT_64_BIT: 64,
  VK_SAMPLE_COUNT_8_BIT: 8
};

const VkAttachmentDescriptionFlagBits = {
  VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT: 1
};

const VkStencilFaceFlagBits = {
  VK_STENCIL_FACE_BACK_BIT: 2,
  VK_STENCIL_FACE_FRONT_BIT: 1,
  VK_STENCIL_FRONT_AND_BACK: 3
};

const VkDescriptorPoolCreateFlagBits = {
  VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT: 1,
  VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT: 2
};

const VkDependencyFlagBits = {
  VK_DEPENDENCY_BY_REGION_BIT: 1,
  VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR: 4,
  VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR: 2
};

const VkDisplayPlaneAlphaFlagBitsKHR = {
  VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR: 2,
  VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR: 1,
  VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR: 4,
  VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR: 8
};

const VkCompositeAlphaFlagBitsKHR = {
  VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR: 8,
  VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR: 1,
  VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR: 4,
  VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR: 2
};

const VkSurfaceTransformFlagBitsKHR = {
  VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR: 16,
  VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR: 64,
  VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR: 128,
  VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR: 32,
  VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR: 1,
  VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR: 256,
  VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR: 4,
  VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR: 8,
  VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR: 2
};

const VkDebugReportFlagBitsEXT = {
  VK_DEBUG_REPORT_DEBUG_BIT_EXT: 16,
  VK_DEBUG_REPORT_ERROR_BIT_EXT: 8,
  VK_DEBUG_REPORT_INFORMATION_BIT_EXT: 1,
  VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT: 4,
  VK_DEBUG_REPORT_WARNING_BIT_EXT: 2
};

const VkExternalMemoryHandleTypeFlagBitsNV = {
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV: 4,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV: 8,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV: 1,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV: 2
};

const VkExternalMemoryFeatureFlagBitsNV = {
  VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV: 1,
  VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV: 2,
  VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV: 4
};

const VkSubgroupFeatureFlagBits = {
  VK_SUBGROUP_FEATURE_ARITHMETIC_BIT: 4,
  VK_SUBGROUP_FEATURE_BALLOT_BIT: 8,
  VK_SUBGROUP_FEATURE_BASIC_BIT: 1,
  VK_SUBGROUP_FEATURE_CLUSTERED_BIT: 64,
  VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV: 256,
  VK_SUBGROUP_FEATURE_QUAD_BIT: 128,
  VK_SUBGROUP_FEATURE_SHUFFLE_BIT: 16,
  VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT: 32,
  VK_SUBGROUP_FEATURE_VOTE_BIT: 2
};

const VkIndirectCommandsLayoutUsageFlagBitsNVX = {
  VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EMPTY_EXECUTIONS_BIT_NVX: 4,
  VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NVX: 8,
  VK_INDIRECT_COMMANDS_LAYOUT_USAGE_SPARSE_SEQUENCES_BIT_NVX: 2,
  VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NVX: 1
};

const VkObjectEntryUsageFlagBitsNVX = {
  VK_OBJECT_ENTRY_USAGE_COMPUTE_BIT_NVX: 2,
  VK_OBJECT_ENTRY_USAGE_GRAPHICS_BIT_NVX: 1
};

const VkDescriptorSetLayoutCreateFlagBits = {
  VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR: 1,
  VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT: 2
};

const VkExternalMemoryHandleTypeFlagBits = {
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID: 1024,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT: 8,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR: 8,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT: 16,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR: 16,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT: 32,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR: 32,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT: 64,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR: 64,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT: 512,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT: 128,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT: 256,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT: 1,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR: 1,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT: 2,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR: 2,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT: 4,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR: 4
};

const VkExternalMemoryFeatureFlagBits = {
  VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT: 1,
  VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR: 1,
  VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT: 2,
  VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR: 2,
  VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT: 4,
  VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR: 4
};

const VkExternalSemaphoreHandleTypeFlagBits = {
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT: 8,
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR: 8,
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT: 1,
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR: 1,
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT: 2,
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR: 2,
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT: 4,
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR: 4,
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT: 16,
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR: 16
};

const VkExternalSemaphoreFeatureFlagBits = {
  VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT: 1,
  VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR: 1,
  VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT: 2,
  VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR: 2
};

const VkSemaphoreImportFlagBits = {
  VK_SEMAPHORE_IMPORT_TEMPORARY_BIT: 1,
  VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR: 1
};

const VkExternalFenceHandleTypeFlagBits = {
  VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT: 1,
  VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR: 1,
  VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT: 2,
  VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR: 2,
  VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT: 4,
  VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR: 4,
  VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT: 8,
  VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR: 8
};

const VkExternalFenceFeatureFlagBits = {
  VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT: 1,
  VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR: 1,
  VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT: 2,
  VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR: 2
};

const VkFenceImportFlagBits = {
  VK_FENCE_IMPORT_TEMPORARY_BIT: 1,
  VK_FENCE_IMPORT_TEMPORARY_BIT_KHR: 1
};

const VkSurfaceCounterFlagBitsEXT = {
  VK_SURFACE_COUNTER_VBLANK_EXT: 1
};

const VkPeerMemoryFeatureFlagBits = {
  VK_PEER_MEMORY_FEATURE_COPY_DST_BIT: 2,
  VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR: 2,
  VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT: 1,
  VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR: 1,
  VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT: 8,
  VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR: 8,
  VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT: 4,
  VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR: 4
};

const VkMemoryAllocateFlagBits = {
  VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT: 1,
  VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR: 1
};

const VkDeviceGroupPresentModeFlagBitsKHR = {
  VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR: 1,
  VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR: 8,
  VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR: 2,
  VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR: 4
};

const VkSwapchainCreateFlagBitsKHR = {
  VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR: 4,
  VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR: 2,
  VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR: 1
};

const VkSubpassDescriptionFlagBits = {
  VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX: 1,
  VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX: 2
};

const VkDebugUtilsMessageSeverityFlagBitsEXT = {
  VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT: 4096,
  VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT: 16,
  VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT: 1,
  VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT: 256
};

const VkDebugUtilsMessageTypeFlagBitsEXT = {
  VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT: 1,
  VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT: 4,
  VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT: 2
};

const VkDescriptorBindingFlagBitsEXT = {
  VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT: 4,
  VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT: 1,
  VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT: 2,
  VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT: 8
};

const VkConditionalRenderingFlagBitsEXT = {
  VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT: 1
};

const VkResolveModeFlagBitsKHR = {
  VK_RESOLVE_MODE_AVERAGE_BIT_KHR: 2,
  VK_RESOLVE_MODE_MAX_BIT_KHR: 8,
  VK_RESOLVE_MODE_MIN_BIT_KHR: 4,
  VK_RESOLVE_MODE_NONE_KHR: 0,
  VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR: 1
};

const VkGeometryInstanceFlagBitsNV = {
  VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV: 8,
  VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV: 4,
  VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV: 1,
  VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV: 2
};

const VkGeometryFlagBitsNV = {
  VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV: 2,
  VK_GEOMETRY_OPAQUE_BIT_NV: 1
};

const VkBuildAccelerationStructureFlagBitsNV = {
  VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV: 2,
  VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV: 1,
  VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV: 16,
  VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV: 8,
  VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV: 4
};
/** VkInstance **/
class VkInstance {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkInstance' doesn't take any arguments");
    }
  }
};

VkInstance.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x8);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkInstance"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkInstance.byteLength = 0x8;
/** VkPhysicalDevice **/
class VkPhysicalDevice {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkPhysicalDevice' doesn't take any arguments");
    }
  }
};

VkPhysicalDevice.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x8);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDevice"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkPhysicalDevice.byteLength = 0x8;
/** VkDevice **/
class VkDevice {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkDevice' doesn't take any arguments");
    }
  }
};

VkDevice.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x8);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDevice"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkDevice.byteLength = 0x8;
/** VkQueue **/
class VkQueue {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkQueue' doesn't take any arguments");
    }
  }
};

VkQueue.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x8);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkQueue"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkQueue.byteLength = 0x8;
/** VkCommandBuffer **/
class VkCommandBuffer {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkCommandBuffer' doesn't take any arguments");
    }
  }
};

VkCommandBuffer.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x8);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkCommandBuffer"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkCommandBuffer.byteLength = 0x8;
/** VkDeviceMemory **/
class VkDeviceMemory {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkDeviceMemory' doesn't take any arguments");
    }
  }
};

VkDeviceMemory.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x8);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDeviceMemory"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkDeviceMemory.byteLength = 0x8;
/** VkCommandPool **/
class VkCommandPool {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkCommandPool' doesn't take any arguments");
    }
  }
};

VkCommandPool.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x8);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkCommandPool"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkCommandPool.byteLength = 0x8;
/** VkBuffer **/
class VkBuffer {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkBuffer' doesn't take any arguments");
    }
  }
};

VkBuffer.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x8);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkBuffer"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkBuffer.byteLength = 0x8;
/** VkBufferView **/
class VkBufferView {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkBufferView' doesn't take any arguments");
    }
  }
};

VkBufferView.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x8);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkBufferView"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkBufferView.byteLength = 0x8;
/** VkImage **/
class VkImage {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkImage' doesn't take any arguments");
    }
  }
};

VkImage.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x8);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkImage"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkImage.byteLength = 0x8;
/** VkImageView **/
class VkImageView {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkImageView' doesn't take any arguments");
    }
  }
};

VkImageView.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x8);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkImageView"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkImageView.byteLength = 0x8;
/** VkShaderModule **/
class VkShaderModule {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkShaderModule' doesn't take any arguments");
    }
  }
};

VkShaderModule.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x8);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkShaderModule"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkShaderModule.byteLength = 0x8;
/** VkPipeline **/
class VkPipeline {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkPipeline' doesn't take any arguments");
    }
  }
};

VkPipeline.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x8);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPipeline"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkPipeline.byteLength = 0x8;
/** VkPipelineLayout **/
class VkPipelineLayout {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkPipelineLayout' doesn't take any arguments");
    }
  }
};

VkPipelineLayout.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x8);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPipelineLayout"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkPipelineLayout.byteLength = 0x8;
/** VkSampler **/
class VkSampler {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkSampler' doesn't take any arguments");
    }
  }
};

VkSampler.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x8);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkSampler"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkSampler.byteLength = 0x8;
/** VkDescriptorSet **/
class VkDescriptorSet {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkDescriptorSet' doesn't take any arguments");
    }
  }
};

VkDescriptorSet.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x8);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDescriptorSet"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkDescriptorSet.byteLength = 0x8;
/** VkDescriptorSetLayout **/
class VkDescriptorSetLayout {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkDescriptorSetLayout' doesn't take any arguments");
    }
  }
};

VkDescriptorSetLayout.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x8);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDescriptorSetLayout"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkDescriptorSetLayout.byteLength = 0x8;
/** VkDescriptorPool **/
class VkDescriptorPool {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkDescriptorPool' doesn't take any arguments");
    }
  }
};

VkDescriptorPool.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x8);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDescriptorPool"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkDescriptorPool.byteLength = 0x8;
/** VkFence **/
class VkFence {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkFence' doesn't take any arguments");
    }
  }
};

VkFence.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x8);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkFence"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkFence.byteLength = 0x8;
/** VkSemaphore **/
class VkSemaphore {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkSemaphore' doesn't take any arguments");
    }
  }
};

VkSemaphore.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x8);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkSemaphore"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkSemaphore.byteLength = 0x8;
/** VkEvent **/
class VkEvent {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkEvent' doesn't take any arguments");
    }
  }
};

VkEvent.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x8);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkEvent"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkEvent.byteLength = 0x8;
/** VkQueryPool **/
class VkQueryPool {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkQueryPool' doesn't take any arguments");
    }
  }
};

VkQueryPool.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x8);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkQueryPool"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkQueryPool.byteLength = 0x8;
/** VkFramebuffer **/
class VkFramebuffer {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkFramebuffer' doesn't take any arguments");
    }
  }
};

VkFramebuffer.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x8);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkFramebuffer"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkFramebuffer.byteLength = 0x8;
/** VkRenderPass **/
class VkRenderPass {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkRenderPass' doesn't take any arguments");
    }
  }
};

VkRenderPass.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x8);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkRenderPass"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkRenderPass.byteLength = 0x8;
/** VkPipelineCache **/
class VkPipelineCache {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkPipelineCache' doesn't take any arguments");
    }
  }
};

VkPipelineCache.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x8);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPipelineCache"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkPipelineCache.byteLength = 0x8;
/** VkObjectTableNVX **/
class VkObjectTableNVX {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkObjectTableNVX' doesn't take any arguments");
    }
  }
};

VkObjectTableNVX.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x8);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkObjectTableNVX"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkObjectTableNVX.byteLength = 0x8;
/** VkIndirectCommandsLayoutNVX **/
class VkIndirectCommandsLayoutNVX {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkIndirectCommandsLayoutNVX' doesn't take any arguments");
    }
  }
};

VkIndirectCommandsLayoutNVX.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x8);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkIndirectCommandsLayoutNVX"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkIndirectCommandsLayoutNVX.byteLength = 0x8;
/** VkDescriptorUpdateTemplate **/
class VkDescriptorUpdateTemplate {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkDescriptorUpdateTemplate' doesn't take any arguments");
    }
  }
};

VkDescriptorUpdateTemplate.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x8);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDescriptorUpdateTemplate"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkDescriptorUpdateTemplate.byteLength = 0x8;
/** VkSamplerYcbcrConversion **/
class VkSamplerYcbcrConversion {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkSamplerYcbcrConversion' doesn't take any arguments");
    }
  }
};

VkSamplerYcbcrConversion.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x8);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkSamplerYcbcrConversion"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkSamplerYcbcrConversion.byteLength = 0x8;
/** VkValidationCacheEXT **/
class VkValidationCacheEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkValidationCacheEXT' doesn't take any arguments");
    }
  }
};

VkValidationCacheEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x8);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkValidationCacheEXT"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkValidationCacheEXT.byteLength = 0x8;
/** VkAccelerationStructureNV **/
class VkAccelerationStructureNV {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkAccelerationStructureNV' doesn't take any arguments");
    }
  }
};

VkAccelerationStructureNV.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x8);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkAccelerationStructureNV"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkAccelerationStructureNV.byteLength = 0x8;
/** VkDisplayKHR **/
class VkDisplayKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkDisplayKHR' doesn't take any arguments");
    }
  }
};

VkDisplayKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x8);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDisplayKHR"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkDisplayKHR.byteLength = 0x8;
/** VkDisplayModeKHR **/
class VkDisplayModeKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkDisplayModeKHR' doesn't take any arguments");
    }
  }
};

VkDisplayModeKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x8);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDisplayModeKHR"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkDisplayModeKHR.byteLength = 0x8;
/** VkSurfaceKHR **/
class VkSurfaceKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkSurfaceKHR' doesn't take any arguments");
    }
  }
};

VkSurfaceKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x8);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkSurfaceKHR"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkSurfaceKHR.byteLength = 0x8;
/** VkSwapchainKHR **/
class VkSwapchainKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkSwapchainKHR' doesn't take any arguments");
    }
  }
};

VkSwapchainKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x8);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkSwapchainKHR"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkSwapchainKHR.byteLength = 0x8;
/** VkDebugReportCallbackEXT **/
class VkDebugReportCallbackEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkDebugReportCallbackEXT' doesn't take any arguments");
    }
  }
};

VkDebugReportCallbackEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x8);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDebugReportCallbackEXT"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkDebugReportCallbackEXT.byteLength = 0x8;
/** VkDebugUtilsMessengerEXT **/
class VkDebugUtilsMessengerEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") {
      throw new Error("'VkDebugUtilsMessengerEXT' doesn't take any arguments");
    }
  }
};

VkDebugUtilsMessengerEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x8);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDebugUtilsMessengerEXT"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView, 0x0);
};

VkDebugUtilsMessengerEXT.byteLength = 0x8;
/** VkBaseOutStructure **/
class VkBaseOutStructure {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x10);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null && value.constructor === VkBaseOutStructure) {
      value.flush();
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
      
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkBaseOutStructure.pNext': Expected 'VkBaseOutStructure' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkBaseOutStructure.prototype.flush = function flush() {
  //console.log(`Flushing: "VkBaseOutStructure"`);
  
  return true;
};

VkBaseOutStructure.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x10);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkBaseOutStructure"`, this.memoryAddress, memoryAddress);
  
};

VkBaseOutStructure.byteLength = 0x10;

VkBaseOutStructure.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
});
/** VkBaseInStructure **/
class VkBaseInStructure {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x10);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null && value.constructor === VkBaseInStructure) {
      value.flush();
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
      
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkBaseInStructure.pNext': Expected 'VkBaseInStructure' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkBaseInStructure.prototype.flush = function flush() {
  //console.log(`Flushing: "VkBaseInStructure"`);
  
  return true;
};

VkBaseInStructure.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x10);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkBaseInStructure"`, this.memoryAddress, memoryAddress);
  
};

VkBaseInStructure.byteLength = 0x10;

VkBaseInStructure.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
});
/** VkOffset2D **/
class VkOffset2D {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x8);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    
    
    if (typeof opts === "object") {
      if (opts.x !== void 0) this.x = opts.x;
      if (opts.y !== void 0) this.y = opts.y;
      
    }
  }
  get x() {
    return this.memoryViewInt32[0x0];
  }
  set x(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get y() {
    return this.memoryViewInt32[0x1];
  }
  set y(value) {
    this.memoryViewInt32[0x1] = value;
  }
  
};

VkOffset2D.prototype.flush = function flush() {
  //console.log(`Flushing: "VkOffset2D"`);
  
  return true;
};

VkOffset2D.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x8);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkOffset2D"`, this.memoryAddress, memoryAddress);
  
};

VkOffset2D.byteLength = 0x8;

VkOffset2D.memoryLayout = Object.freeze({
  x: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  y: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
});
/** VkOffset3D **/
class VkOffset3D {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0xC);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    
    
    
    if (typeof opts === "object") {
      if (opts.x !== void 0) this.x = opts.x;
      if (opts.y !== void 0) this.y = opts.y;
      if (opts.z !== void 0) this.z = opts.z;
      
    }
  }
  get x() {
    return this.memoryViewInt32[0x0];
  }
  set x(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get y() {
    return this.memoryViewInt32[0x1];
  }
  set y(value) {
    this.memoryViewInt32[0x1] = value;
  }
  get z() {
    return this.memoryViewInt32[0x2];
  }
  set z(value) {
    this.memoryViewInt32[0x2] = value;
  }
  
};

VkOffset3D.prototype.flush = function flush() {
  //console.log(`Flushing: "VkOffset3D"`);
  
  return true;
};

VkOffset3D.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0xC);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkOffset3D"`, this.memoryAddress, memoryAddress);
  
};

VkOffset3D.byteLength = 0xC;

VkOffset3D.memoryLayout = Object.freeze({
  x: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  y: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  z: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
});
/** VkExtent2D **/
class VkExtent2D {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x8);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    
    
    if (typeof opts === "object") {
      if (opts.width !== void 0) this.width = opts.width;
      if (opts.height !== void 0) this.height = opts.height;
      
    }
  }
  get width() {
    return this.memoryViewUint32[0x0];
  }
  set width(value) {
    this.memoryViewUint32[0x0] = value;
  }
  get height() {
    return this.memoryViewUint32[0x1];
  }
  set height(value) {
    this.memoryViewUint32[0x1] = value;
  }
  
};

VkExtent2D.prototype.flush = function flush() {
  //console.log(`Flushing: "VkExtent2D"`);
  
  return true;
};

VkExtent2D.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x8);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkExtent2D"`, this.memoryAddress, memoryAddress);
  
};

VkExtent2D.byteLength = 0x8;

VkExtent2D.memoryLayout = Object.freeze({
  width: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  height: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
});
/** VkExtent3D **/
class VkExtent3D {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0xC);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    
    
    
    if (typeof opts === "object") {
      if (opts.width !== void 0) this.width = opts.width;
      if (opts.height !== void 0) this.height = opts.height;
      if (opts.depth !== void 0) this.depth = opts.depth;
      
    }
  }
  get width() {
    return this.memoryViewUint32[0x0];
  }
  set width(value) {
    this.memoryViewUint32[0x0] = value;
  }
  get height() {
    return this.memoryViewUint32[0x1];
  }
  set height(value) {
    this.memoryViewUint32[0x1] = value;
  }
  get depth() {
    return this.memoryViewUint32[0x2];
  }
  set depth(value) {
    this.memoryViewUint32[0x2] = value;
  }
  
};

VkExtent3D.prototype.flush = function flush() {
  //console.log(`Flushing: "VkExtent3D"`);
  
  return true;
};

VkExtent3D.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0xC);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkExtent3D"`, this.memoryAddress, memoryAddress);
  
};

VkExtent3D.byteLength = 0xC;

VkExtent3D.memoryLayout = Object.freeze({
  width: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  height: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  depth: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
});
/** VkViewport **/
class VkViewport {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewFloat32 = new Float32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    
    
    
    
    
    
    if (typeof opts === "object") {
      if (opts.x !== void 0) this.x = opts.x;
      if (opts.y !== void 0) this.y = opts.y;
      if (opts.width !== void 0) this.width = opts.width;
      if (opts.height !== void 0) this.height = opts.height;
      if (opts.minDepth !== void 0) this.minDepth = opts.minDepth;
      if (opts.maxDepth !== void 0) this.maxDepth = opts.maxDepth;
      
    }
  }
  get x() {
    return this.memoryViewFloat32[0x0];
  }
  set x(value) {
    this.memoryViewFloat32[0x0] = value;
  }
  get y() {
    return this.memoryViewFloat32[0x1];
  }
  set y(value) {
    this.memoryViewFloat32[0x1] = value;
  }
  get width() {
    return this.memoryViewFloat32[0x2];
  }
  set width(value) {
    this.memoryViewFloat32[0x2] = value;
  }
  get height() {
    return this.memoryViewFloat32[0x3];
  }
  set height(value) {
    this.memoryViewFloat32[0x3] = value;
  }
  get minDepth() {
    return this.memoryViewFloat32[0x4];
  }
  set minDepth(value) {
    this.memoryViewFloat32[0x4] = value;
  }
  get maxDepth() {
    return this.memoryViewFloat32[0x5];
  }
  set maxDepth(value) {
    this.memoryViewFloat32[0x5] = value;
  }
  
};

VkViewport.prototype.flush = function flush() {
  //console.log(`Flushing: "VkViewport"`);
  
  return true;
};

VkViewport.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkViewport"`, this.memoryAddress, memoryAddress);
  
};

VkViewport.byteLength = 0x18;

VkViewport.memoryLayout = Object.freeze({
  x: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  y: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  width: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
  height: Object.freeze({
    byteOffset: 0xC,
    byteLength: 0x4
  }),
  minDepth: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  maxDepth: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
});
/** VkRect2D **/
class VkRect2D {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x10);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this._offset = new VkOffset2D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x0 });
    this._extent = new VkExtent2D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x8 });
    
    if (typeof opts === "object") {
      if (opts.offset !== void 0) this.offset = opts.offset;
      if (opts.extent !== void 0) this.extent = opts.extent;
      
    }
  }
  get offset() {
    return this._offset;
  }
  set offset(value) {
    if (value !== null && value.constructor === VkOffset2D) {
      value.flush();
      this._offset = value;
      this.memoryViewBigInt64[0x0] = value.memoryAddress;
      
    } else if (value === null) {
      this._offset = null;
      this.memoryViewBigInt64[0x0] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkRect2D.offset': Expected 'VkOffset2D' but got '" + value.constructor.name + "'");
    }
  }
  get extent() {
    return this._extent;
  }
  set extent(value) {
    if (value !== null && value.constructor === VkExtent2D) {
      value.flush();
      this._extent = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
      
    } else if (value === null) {
      this._extent = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkRect2D.extent': Expected 'VkExtent2D' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkRect2D.prototype.flush = function flush() {
  //console.log(`Flushing: "VkRect2D"`);
  
  
  
  
  
  return true;
};

VkRect2D.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x10);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkRect2D"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
};

VkRect2D.byteLength = 0x10;

VkRect2D.memoryLayout = Object.freeze({
  offset: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x8
  }),
  extent: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
});
/** VkClearRect **/
class VkClearRect {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this._rect = new VkRect2D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x0 });
    
    
    
    if (typeof opts === "object") {
      if (opts.rect !== void 0) this.rect = opts.rect;
      if (opts.baseArrayLayer !== void 0) this.baseArrayLayer = opts.baseArrayLayer;
      if (opts.layerCount !== void 0) this.layerCount = opts.layerCount;
      
    }
  }
  get rect() {
    return this._rect;
  }
  set rect(value) {
    if (value !== null && value.constructor === VkRect2D) {
      value.flush();
      this._rect = value;
      this.memoryViewBigInt64[0x0] = value.memoryAddress;
      
    } else if (value === null) {
      this._rect = null;
      this.memoryViewBigInt64[0x0] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkClearRect.rect': Expected 'VkRect2D' but got '" + value.constructor.name + "'");
    }
  }
  get baseArrayLayer() {
    return this.memoryViewUint32[0x4];
  }
  set baseArrayLayer(value) {
    this.memoryViewUint32[0x4] = value;
  }
  get layerCount() {
    return this.memoryViewUint32[0x5];
  }
  set layerCount(value) {
    this.memoryViewUint32[0x5] = value;
  }
  
};

VkClearRect.prototype.flush = function flush() {
  //console.log(`Flushing: "VkClearRect"`);
  
  
  
  return true;
};

VkClearRect.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkClearRect"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkClearRect.byteLength = 0x18;

VkClearRect.memoryLayout = Object.freeze({
  rect: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x10
  }),
  baseArrayLayer: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  layerCount: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
});
/** VkComponentMapping **/
class VkComponentMapping {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x10);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    
    
    
    
    if (typeof opts === "object") {
      if (opts.r !== void 0) this.r = opts.r;
      if (opts.g !== void 0) this.g = opts.g;
      if (opts.b !== void 0) this.b = opts.b;
      if (opts.a !== void 0) this.a = opts.a;
      
    }
  }
  get r() {
    return this.memoryViewInt32[0x0];
  }
  set r(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get g() {
    return this.memoryViewInt32[0x1];
  }
  set g(value) {
    this.memoryViewInt32[0x1] = value;
  }
  get b() {
    return this.memoryViewInt32[0x2];
  }
  set b(value) {
    this.memoryViewInt32[0x2] = value;
  }
  get a() {
    return this.memoryViewInt32[0x3];
  }
  set a(value) {
    this.memoryViewInt32[0x3] = value;
  }
  
};

VkComponentMapping.prototype.flush = function flush() {
  //console.log(`Flushing: "VkComponentMapping"`);
  
  return true;
};

VkComponentMapping.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x10);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkComponentMapping"`, this.memoryAddress, memoryAddress);
  
};

VkComponentMapping.byteLength = 0x10;

VkComponentMapping.memoryLayout = Object.freeze({
  r: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  g: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  b: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
  a: Object.freeze({
    byteOffset: 0xC,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceProperties **/
class VkPhysicalDeviceProperties {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x338);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewUint8 = new Uint8Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x338) / 0x4);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x338) / 0x4);
      this.memoryViewUint8 = new Uint8Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x1, (opts.$memoryOffset + 0x338) / 0x1);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    
    
    
    
    
    this._pipelineCacheUUID = [...Array(16)].fill(0x0);
    this._limits = new VkPhysicalDeviceLimits({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x128 });
    this._sparseProperties = new VkPhysicalDeviceSparseProperties({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x320 });
    
    if (typeof opts === "object") {
      
    }
  }
  get apiVersion() {
    return this.memoryViewUint32[0x0];
  }
  get driverVersion() {
    return this.memoryViewUint32[0x1];
  }
  get vendorID() {
    return this.memoryViewUint32[0x2];
  }
  get deviceID() {
    return this.memoryViewUint32[0x3];
  }
  get deviceType() {
    return this.memoryViewInt32[0x4];
  }
  get deviceName() {
    return decodeNullTerminatedUTF8String(
      new Uint8Array(this.memoryBuffer).subarray(0x14, 0x128)
    ) || null;
  }
  get pipelineCacheUUID() {
    return [
      this.memoryViewUint8[0x114],
      this.memoryViewUint8[0x115],
      this.memoryViewUint8[0x116],
      this.memoryViewUint8[0x117],
      this.memoryViewUint8[0x118],
      this.memoryViewUint8[0x119],
      this.memoryViewUint8[0x11A],
      this.memoryViewUint8[0x11B],
      this.memoryViewUint8[0x11C],
      this.memoryViewUint8[0x11D],
      this.memoryViewUint8[0x11E],
      this.memoryViewUint8[0x11F],
      this.memoryViewUint8[0x120],
      this.memoryViewUint8[0x121],
      this.memoryViewUint8[0x122],
      this.memoryViewUint8[0x123]
    ];
  }
  get limits() {
    return this._limits;
  }
  get sparseProperties() {
    return this._sparseProperties;
  }
  
};

VkPhysicalDeviceProperties.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceProperties"`);
  
  return true;
};

VkPhysicalDeviceProperties.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x338);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceProperties"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x338), 0x0);
  
  
  
  
  
  
};

VkPhysicalDeviceProperties.byteLength = 0x338;

VkPhysicalDeviceProperties.memoryLayout = Object.freeze({
  apiVersion: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  driverVersion: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  vendorID: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
  deviceID: Object.freeze({
    byteOffset: 0xC,
    byteLength: 0x4
  }),
  deviceType: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  deviceName: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x100
  }),
  pipelineCacheUUID: Object.freeze({
    byteOffset: 0x114,
    byteLength: 0x10
  }),
  limits: Object.freeze({
    byteOffset: 0x128,
    byteLength: 0x1F8
  }),
  sparseProperties: Object.freeze({
    byteOffset: 0x320,
    byteLength: 0x14
  }),
});
/** VkExtensionProperties **/
class VkExtensionProperties {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x104);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x104) / 0x4);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    
    
    if (typeof opts === "object") {
      
    }
  }
  get extensionName() {
    return decodeNullTerminatedUTF8String(
      new Uint8Array(this.memoryBuffer).subarray(0x0, 0x100)
    ) || null;
  }
  get specVersion() {
    return this.memoryViewUint32[0x40];
  }
  
};

VkExtensionProperties.prototype.flush = function flush() {
  //console.log(`Flushing: "VkExtensionProperties"`);
  
  return true;
};

VkExtensionProperties.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x104);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkExtensionProperties"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x104), 0x0);
};

VkExtensionProperties.byteLength = 0x104;

VkExtensionProperties.memoryLayout = Object.freeze({
  extensionName: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x100
  }),
  specVersion: Object.freeze({
    byteOffset: 0x100,
    byteLength: 0x4
  }),
});
/** VkLayerProperties **/
class VkLayerProperties {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x208);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x208) / 0x4);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    
    
    
    
    if (typeof opts === "object") {
      
    }
  }
  get layerName() {
    return decodeNullTerminatedUTF8String(
      new Uint8Array(this.memoryBuffer).subarray(0x0, 0x100)
    ) || null;
  }
  get specVersion() {
    return this.memoryViewUint32[0x40];
  }
  get implementationVersion() {
    return this.memoryViewUint32[0x41];
  }
  get description() {
    return decodeNullTerminatedUTF8String(
      new Uint8Array(this.memoryBuffer).subarray(0x108, 0x310)
    ) || null;
  }
  
};

VkLayerProperties.prototype.flush = function flush() {
  //console.log(`Flushing: "VkLayerProperties"`);
  
  return true;
};

VkLayerProperties.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x208);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkLayerProperties"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x208), 0x0);
};

VkLayerProperties.byteLength = 0x208;

VkLayerProperties.memoryLayout = Object.freeze({
  layerName: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x100
  }),
  specVersion: Object.freeze({
    byteOffset: 0x100,
    byteLength: 0x4
  }),
  implementationVersion: Object.freeze({
    byteOffset: 0x104,
    byteLength: 0x4
  }),
  description: Object.freeze({
    byteOffset: 0x108,
    byteLength: 0x100
  }),
});
/** VkApplicationInfo **/
class VkApplicationInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x30);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    this._pApplicationName = null;
    
    this._pEngineName = null;
    
    
    this.sType = 0x0;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.pApplicationName !== void 0) this.pApplicationName = opts.pApplicationName;
      if (opts.applicationVersion !== void 0) this.applicationVersion = opts.applicationVersion;
      if (opts.pEngineName !== void 0) this.pEngineName = opts.pEngineName;
      if (opts.engineVersion !== void 0) this.engineVersion = opts.engineVersion;
      if (opts.apiVersion !== void 0) this.apiVersion = opts.apiVersion;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkApplicationInfo.pNext' isn't allowed to be filled");
  }
  get pApplicationName() {
    if (this._pApplicationName !== null) {
      let str = textDecoder.decode(this._pApplicationName);
      return str.substr(0, str.length - 1);
    } else {
      return null;
    }
  }
  set pApplicationName(value) {
    if (value !== null && value.constructor === String) {
      this._pApplicationName = textEncoder.encode(value + NULLT).buffer;
      this.memoryViewBigInt64[0x2] = getAddressFromArrayBuffer(this._pApplicationName);
    } else if (value === null) {
      this._pApplicationName = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkApplicationInfo.pApplicationName': Expected 'String' but got '" + value.constructor.name + "'");
    }
  }
  get applicationVersion() {
    return this.memoryViewUint32[0x6];
  }
  set applicationVersion(value) {
    this.memoryViewUint32[0x6] = value;
  }
  get pEngineName() {
    if (this._pEngineName !== null) {
      let str = textDecoder.decode(this._pEngineName);
      return str.substr(0, str.length - 1);
    } else {
      return null;
    }
  }
  set pEngineName(value) {
    if (value !== null && value.constructor === String) {
      this._pEngineName = textEncoder.encode(value + NULLT).buffer;
      this.memoryViewBigInt64[0x4] = getAddressFromArrayBuffer(this._pEngineName);
    } else if (value === null) {
      this._pEngineName = null;
      this.memoryViewBigInt64[0x4] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkApplicationInfo.pEngineName': Expected 'String' but got '" + value.constructor.name + "'");
    }
  }
  get engineVersion() {
    return this.memoryViewUint32[0xA];
  }
  set engineVersion(value) {
    this.memoryViewUint32[0xA] = value;
  }
  get apiVersion() {
    return this.memoryViewUint32[0xB];
  }
  set apiVersion(value) {
    this.memoryViewUint32[0xB] = value;
  }
  
};

VkApplicationInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkApplicationInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkApplicationInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x30);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkApplicationInfo"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkApplicationInfo.byteLength = 0x30;

VkApplicationInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  pApplicationName: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  applicationVersion: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  pEngineName: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
  engineVersion: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x4
  }),
  apiVersion: Object.freeze({
    byteOffset: 0x2C,
    byteLength: 0x4
  }),
});
/** VkAllocationCallbacks **/
class VkAllocationCallbacks {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x30);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this._pUserData = null;
    
    if (typeof opts === "object") {
      if (opts.pUserData !== void 0) this.pUserData = opts.pUserData;
      
    }
  }
  get pUserData() {
    return this._pUserData;
  }
  set pUserData(value) {
    if (value !== null && value.constructor === ArrayBuffer) {
      this._pUserData = value;
      this.memoryViewBigInt64[0x0] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pUserData = null;
      this.memoryViewBigInt64[0x0] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkAllocationCallbacks.pUserData': Expected 'ArrayBuffer' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkAllocationCallbacks.prototype.flush = function flush() {
  //console.log(`Flushing: "VkAllocationCallbacks"`);
  
  return true;
};

VkAllocationCallbacks.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x30);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkAllocationCallbacks"`, this.memoryAddress, memoryAddress);
  
};

VkAllocationCallbacks.byteLength = 0x30;

VkAllocationCallbacks.memoryLayout = Object.freeze({
  pUserData: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x8
  }),
});
/** VkDeviceQueueCreateInfo **/
class VkDeviceQueueCreateInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x28);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    
    this._pQueuePriorities = null;
    this.sType = 0x2;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.queueFamilyIndex !== void 0) this.queueFamilyIndex = opts.queueFamilyIndex;
      if (opts.queueCount !== void 0) this.queueCount = opts.queueCount;
      if (opts.pQueuePriorities !== void 0) this.pQueuePriorities = opts.pQueuePriorities;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null && (value instanceof Object)) {
      let {sType} = value;
      if (sType <= -1) throw new TypeError("Invalid type for 'VkDeviceQueueCreateInfo.pNext'");
      switch (sType) {
          
        case 0x3B9D71B0:
          break;
        default:
          throw new TypeError("Invalid type for 'VkDeviceQueueCreateInfo.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkDeviceQueueCreateInfo.pNext'");
    }
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get queueFamilyIndex() {
    return this.memoryViewUint32[0x5];
  }
  set queueFamilyIndex(value) {
    this.memoryViewUint32[0x5] = value;
  }
  get queueCount() {
    return this.memoryViewUint32[0x6];
  }
  set queueCount(value) {
    this.memoryViewUint32[0x6] = value;
  }
  get pQueuePriorities() {
    return this._pQueuePriorities;
  }
  set pQueuePriorities(value) {
    if (value !== null && value.constructor === Float32Array) {
      this._pQueuePriorities = value;
      this.memoryViewBigInt64[0x4] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pQueuePriorities = null;
      this.memoryViewBigInt64[0x4] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkDeviceQueueCreateInfo.pQueuePriorities': Expected 'Float32Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkDeviceQueueCreateInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDeviceQueueCreateInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDeviceQueueCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x28);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDeviceQueueCreateInfo"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkDeviceQueueCreateInfo.byteLength = 0x28;

VkDeviceQueueCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  queueFamilyIndex: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  queueCount: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  pQueuePriorities: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
});
/** VkDeviceCreateInfo **/
class VkDeviceCreateInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x48);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    this._pQueueCreateInfos = null;
    this._pQueueCreateInfosNative = null;
    
    this._ppEnabledLayerNames = null;
    this._ppEnabledLayerNamesNative = null;
    
    this._ppEnabledExtensionNames = null;
    this._ppEnabledExtensionNamesNative = null;
    this._pEnabledFeatures = null;
    this.sType = 0x3;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.queueCreateInfoCount !== void 0) this.queueCreateInfoCount = opts.queueCreateInfoCount;
      if (opts.pQueueCreateInfos !== void 0) this.pQueueCreateInfos = opts.pQueueCreateInfos;
      if (opts.enabledLayerCount !== void 0) this.enabledLayerCount = opts.enabledLayerCount;
      if (opts.ppEnabledLayerNames !== void 0) this.ppEnabledLayerNames = opts.ppEnabledLayerNames;
      if (opts.enabledExtensionCount !== void 0) this.enabledExtensionCount = opts.enabledExtensionCount;
      if (opts.ppEnabledExtensionNames !== void 0) this.ppEnabledExtensionNames = opts.ppEnabledExtensionNames;
      if (opts.pEnabledFeatures !== void 0) this.pEnabledFeatures = opts.pEnabledFeatures;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null && (value instanceof Object)) {
      let {sType} = value;
      if (sType <= -1) throw new TypeError("Invalid type for 'VkDeviceCreateInfo.pNext'");
      switch (sType) {
          
        case 0x3B9BB078:
        case 0x3B9C9EC0:
        case 0x3B9B9909:
        case 0x3B9BDB71:
        case 0x3B9C0E38:
        case 0x3B9D2B64:
        case VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES:
        case 0x3B9D0C20:
        case 0x3B9CE510:
        case VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES:
        case 0x3B9C0A50:
        case 0x3B9D3EE9:
        case 0x3B9D7D68:
        case 0x3B9C0669:
        case 0x3B9E0238:
        case 0x3B9D8920:
        case 0x3B9DB032:
        case 0x3B9BCFB9:
        case 0x3B9B3760:
        case 0x3B9D5270:
        case 0x3B9DEACA:
        case 0x3B9B8D50:
        case 0x3B9DDB28:
        case 0x3B9DE2F8:
        case 0x3B9DE6E0:
        case 0x3B9E7380:
        case 0x3B9D4AA1:
        case 0x3B9DDF10:
        case 0x3B9DAC48:
        case 0x3B9E1D90:
        case 0x3B9E2948:
        case 0x3B9C5870:
        case 0x3B9E6BB0:
        case 0x3B9E8320:
        case 0x3B9E96A8:
          break;
        default:
          throw new TypeError("Invalid type for 'VkDeviceCreateInfo.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkDeviceCreateInfo.pNext'");
    }
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get queueCreateInfoCount() {
    return this.memoryViewUint32[0x5];
  }
  set queueCreateInfoCount(value) {
    this.memoryViewUint32[0x5] = value;
  }
  get pQueueCreateInfos() {
    return this._pQueueCreateInfos;
  }
  set pQueueCreateInfos(value) {
    if (value !== null && value.constructor === Array) {
      this._pQueueCreateInfos = value;
    } else if (value === null) {
      this._pQueueCreateInfos = null;
    } else {
      throw new TypeError("Invalid type for 'VkDeviceCreateInfo.pQueueCreateInfos': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get enabledLayerCount() {
    return this.memoryViewUint32[0x8];
  }
  set enabledLayerCount(value) {
    this.memoryViewUint32[0x8] = value;
  }
  get ppEnabledLayerNames() {
    return this._ppEnabledLayerNames;
  }
  set ppEnabledLayerNames(value) {
    if (value !== null && value.constructor === Array) {
      this._ppEnabledLayerNames = value;
    } else if (value === null) {
      this._ppEnabledLayerNames = null;
    } else {
      throw new TypeError("Invalid type for 'VkDeviceCreateInfo.ppEnabledLayerNames': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get enabledExtensionCount() {
    return this.memoryViewUint32[0xC];
  }
  set enabledExtensionCount(value) {
    this.memoryViewUint32[0xC] = value;
  }
  get ppEnabledExtensionNames() {
    return this._ppEnabledExtensionNames;
  }
  set ppEnabledExtensionNames(value) {
    if (value !== null && value.constructor === Array) {
      this._ppEnabledExtensionNames = value;
    } else if (value === null) {
      this._ppEnabledExtensionNames = null;
    } else {
      throw new TypeError("Invalid type for 'VkDeviceCreateInfo.ppEnabledExtensionNames': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get pEnabledFeatures() {
    return this._pEnabledFeatures;
  }
  set pEnabledFeatures(value) {
    if (value !== null && value.constructor === VkPhysicalDeviceFeatures) {
      value.flush();
      this._pEnabledFeatures = value;
      this.memoryViewBigInt64[0x8] = value.memoryAddress;
      
    } else if (value === null) {
      this._pEnabledFeatures = null;
      this.memoryViewBigInt64[0x8] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkDeviceCreateInfo.pEnabledFeatures': Expected 'VkPhysicalDeviceFeatures' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkDeviceCreateInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDeviceCreateInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pQueueCreateInfos !== null) {
    let array = this._pQueueCreateInfos;
    if (array.length !== this.queueCreateInfoCount) {
      throw new RangeError("Invalid array length, expected length of 'queueCreateInfoCount' for 'VkDeviceCreateInfo.pQueueCreateInfos'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkDeviceQueueCreateInfo) {
        throw new TypeError("Invalid type for 'VkDeviceCreateInfo.pQueueCreateInfos[" + ii + "]': Expected 'VkDeviceQueueCreateInfo' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pQueueCreateInfosNative = nativeArray;
    this.memoryViewBigInt64[0x3] = nativeArray.address;
  }
  
  
  if (this._ppEnabledLayerNames !== null) {
    let array = this._ppEnabledLayerNames;
    // validate length
    if (array.length !== this.enabledLayerCount) {
      throw new RangeError("Invalid array length, expected length of 'enabledLayerCount' for 'VkDeviceCreateInfo.ppEnabledLayerNames'");
      return false;
    }
    // validate type
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== String) {
        throw new TypeError("Invalid type for 'VkDeviceCreateInfo.ppEnabledLayerNames[" + ii + "]': Expected 'String' but got '" + array[ii].constructor.name + "'");
        return false;
      }
    };
    let nativeArray = new NativeStringArray(this._ppEnabledLayerNames);
    this._ppEnabledLayerNamesNative = nativeArray;
    this.memoryViewBigInt64[0x5] = nativeArray.address;
  } else {
    this.memoryViewBigInt64[0x5] = BI0;
  }
  
  
  if (this._ppEnabledExtensionNames !== null) {
    let array = this._ppEnabledExtensionNames;
    // validate length
    if (array.length !== this.enabledExtensionCount) {
      throw new RangeError("Invalid array length, expected length of 'enabledExtensionCount' for 'VkDeviceCreateInfo.ppEnabledExtensionNames'");
      return false;
    }
    // validate type
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== String) {
        throw new TypeError("Invalid type for 'VkDeviceCreateInfo.ppEnabledExtensionNames[" + ii + "]': Expected 'String' but got '" + array[ii].constructor.name + "'");
        return false;
      }
    };
    let nativeArray = new NativeStringArray(this._ppEnabledExtensionNames);
    this._ppEnabledExtensionNamesNative = nativeArray;
    this.memoryViewBigInt64[0x7] = nativeArray.address;
  } else {
    this.memoryViewBigInt64[0x7] = BI0;
  }
  
  return true;
};

VkDeviceCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x48);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDeviceCreateInfo"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
  
  
  
  
};

VkDeviceCreateInfo.byteLength = 0x48;

VkDeviceCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  queueCreateInfoCount: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  pQueueCreateInfos: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  enabledLayerCount: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  ppEnabledLayerNames: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
  enabledExtensionCount: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  ppEnabledExtensionNames: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x8
  }),
  pEnabledFeatures: Object.freeze({
    byteOffset: 0x40,
    byteLength: 0x8
  }),
});
/** VkInstanceCreateInfo **/
class VkInstanceCreateInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x40);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this._pApplicationInfo = null;
    
    this._ppEnabledLayerNames = null;
    this._ppEnabledLayerNamesNative = null;
    
    this._ppEnabledExtensionNames = null;
    this._ppEnabledExtensionNamesNative = null;
    this.sType = 0x1;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.pApplicationInfo !== void 0) this.pApplicationInfo = opts.pApplicationInfo;
      if (opts.enabledLayerCount !== void 0) this.enabledLayerCount = opts.enabledLayerCount;
      if (opts.ppEnabledLayerNames !== void 0) this.ppEnabledLayerNames = opts.ppEnabledLayerNames;
      if (opts.enabledExtensionCount !== void 0) this.enabledExtensionCount = opts.enabledExtensionCount;
      if (opts.ppEnabledExtensionNames !== void 0) this.ppEnabledExtensionNames = opts.ppEnabledExtensionNames;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null && (value instanceof Object)) {
      let {sType} = value;
      if (sType <= -1) throw new TypeError("Invalid type for 'VkInstanceCreateInfo.pNext'");
      switch (sType) {
          
        case 0x3B9AF4F8:
        case 0x3B9BB848:
        case 0x3B9E8ED8:
        case 0x3B9CBE04:
          break;
        default:
          throw new TypeError("Invalid type for 'VkInstanceCreateInfo.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkInstanceCreateInfo.pNext'");
    }
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get pApplicationInfo() {
    return this._pApplicationInfo;
  }
  set pApplicationInfo(value) {
    if (value !== null && value.constructor === VkApplicationInfo) {
      value.flush();
      this._pApplicationInfo = value;
      this.memoryViewBigInt64[0x3] = value.memoryAddress;
      
    } else if (value === null) {
      this._pApplicationInfo = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkInstanceCreateInfo.pApplicationInfo': Expected 'VkApplicationInfo' but got '" + value.constructor.name + "'");
    }
  }
  get enabledLayerCount() {
    return this.memoryViewUint32[0x8];
  }
  set enabledLayerCount(value) {
    this.memoryViewUint32[0x8] = value;
  }
  get ppEnabledLayerNames() {
    return this._ppEnabledLayerNames;
  }
  set ppEnabledLayerNames(value) {
    if (value !== null && value.constructor === Array) {
      this._ppEnabledLayerNames = value;
    } else if (value === null) {
      this._ppEnabledLayerNames = null;
    } else {
      throw new TypeError("Invalid type for 'VkInstanceCreateInfo.ppEnabledLayerNames': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get enabledExtensionCount() {
    return this.memoryViewUint32[0xC];
  }
  set enabledExtensionCount(value) {
    this.memoryViewUint32[0xC] = value;
  }
  get ppEnabledExtensionNames() {
    return this._ppEnabledExtensionNames;
  }
  set ppEnabledExtensionNames(value) {
    if (value !== null && value.constructor === Array) {
      this._ppEnabledExtensionNames = value;
    } else if (value === null) {
      this._ppEnabledExtensionNames = null;
    } else {
      throw new TypeError("Invalid type for 'VkInstanceCreateInfo.ppEnabledExtensionNames': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkInstanceCreateInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkInstanceCreateInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._ppEnabledLayerNames !== null) {
    let array = this._ppEnabledLayerNames;
    // validate length
    if (array.length !== this.enabledLayerCount) {
      throw new RangeError("Invalid array length, expected length of 'enabledLayerCount' for 'VkInstanceCreateInfo.ppEnabledLayerNames'");
      return false;
    }
    // validate type
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== String) {
        throw new TypeError("Invalid type for 'VkInstanceCreateInfo.ppEnabledLayerNames[" + ii + "]': Expected 'String' but got '" + array[ii].constructor.name + "'");
        return false;
      }
    };
    let nativeArray = new NativeStringArray(this._ppEnabledLayerNames);
    this._ppEnabledLayerNamesNative = nativeArray;
    this.memoryViewBigInt64[0x5] = nativeArray.address;
  } else {
    this.memoryViewBigInt64[0x5] = BI0;
  }
  
  
  if (this._ppEnabledExtensionNames !== null) {
    let array = this._ppEnabledExtensionNames;
    // validate length
    if (array.length !== this.enabledExtensionCount) {
      throw new RangeError("Invalid array length, expected length of 'enabledExtensionCount' for 'VkInstanceCreateInfo.ppEnabledExtensionNames'");
      return false;
    }
    // validate type
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== String) {
        throw new TypeError("Invalid type for 'VkInstanceCreateInfo.ppEnabledExtensionNames[" + ii + "]': Expected 'String' but got '" + array[ii].constructor.name + "'");
        return false;
      }
    };
    let nativeArray = new NativeStringArray(this._ppEnabledExtensionNames);
    this._ppEnabledExtensionNamesNative = nativeArray;
    this.memoryViewBigInt64[0x7] = nativeArray.address;
  } else {
    this.memoryViewBigInt64[0x7] = BI0;
  }
  
  return true;
};

VkInstanceCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x40);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkInstanceCreateInfo"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
  
  
};

VkInstanceCreateInfo.byteLength = 0x40;

VkInstanceCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pApplicationInfo: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  enabledLayerCount: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  ppEnabledLayerNames: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
  enabledExtensionCount: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  ppEnabledExtensionNames: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x8
  }),
});
/** VkQueueFamilyProperties **/
class VkQueueFamilyProperties {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    
    
    this._minImageTransferGranularity = new VkExtent3D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0xC });
    
    if (typeof opts === "object") {
      
    }
  }
  get queueFlags() {
    return this.memoryViewInt32[0x0];
  }
  get queueCount() {
    return this.memoryViewUint32[0x1];
  }
  get timestampValidBits() {
    return this.memoryViewUint32[0x2];
  }
  get minImageTransferGranularity() {
    return this._minImageTransferGranularity;
  }
  
};

VkQueueFamilyProperties.prototype.flush = function flush() {
  //console.log(`Flushing: "VkQueueFamilyProperties"`);
  
  return true;
};

VkQueueFamilyProperties.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkQueueFamilyProperties"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x18), 0x0);
  
  
};

VkQueueFamilyProperties.byteLength = 0x18;

VkQueueFamilyProperties.memoryLayout = Object.freeze({
  queueFlags: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  queueCount: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  timestampValidBits: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
  minImageTransferGranularity: Object.freeze({
    byteOffset: 0xC,
    byteLength: 0xC
  }),
});
/** VkPhysicalDeviceMemoryProperties **/
class VkPhysicalDeviceMemoryProperties {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x208);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x208) / 0x4);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    
    
    
    
    if (typeof opts === "object") {
      
    }
  }
  get memoryTypeCount() {
    return this.memoryViewUint32[0x0];
  }
  get memoryTypes() {
    return this._memoryTypes;
  }
  get memoryHeapCount() {
    return this.memoryViewUint32[0x41];
  }
  get memoryHeaps() {
    return this._memoryHeaps;
  }
  
};

VkPhysicalDeviceMemoryProperties.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceMemoryProperties"`);
  
  return true;
};

VkPhysicalDeviceMemoryProperties.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x208);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceMemoryProperties"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x208), 0x0);
  
  
  
  
};

VkPhysicalDeviceMemoryProperties.byteLength = 0x208;

VkPhysicalDeviceMemoryProperties.memoryLayout = Object.freeze({
  memoryTypeCount: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  memoryTypes: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x100
  }),
  memoryHeapCount: Object.freeze({
    byteOffset: 0x104,
    byteLength: 0x4
  }),
  memoryHeaps: Object.freeze({
    byteOffset: 0x108,
    byteLength: 0x100
  }),
});
/** VkMemoryAllocateInfo **/
class VkMemoryAllocateInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    this.sType = 0x5;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.allocationSize !== void 0) this.allocationSize = opts.allocationSize;
      if (opts.memoryTypeIndex !== void 0) this.memoryTypeIndex = opts.memoryTypeIndex;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null && (value instanceof Object)) {
      let {sType} = value;
      if (sType <= -1) throw new TypeError("Invalid type for 'VkMemoryAllocateInfo.pNext'");
      switch (sType) {
          
        case 0x3B9B2F92:
        case 0x3B9BA4C1:
        case 0x3B9BA8A8:
        case 0x3B9BA8A9:
        case 0x3B9BE342:
        case 0x3B9BE728:
        case 0x3B9BE729:
        case 0x3B9BEB10:
        case 0x3B9BB460:
        case 0x3B9CBA19:
        case 0x3B9D8150:
        case 0x3B9CC1EB:
        case 0x3B9E6BB1:
          break;
        default:
          throw new TypeError("Invalid type for 'VkMemoryAllocateInfo.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkMemoryAllocateInfo.pNext'");
    }
  }
  get allocationSize() {
    return this.memoryViewBigUint64[0x2];
  }
  set allocationSize(value) {
    this.memoryViewBigUint64[0x2] = value;
  }
  get memoryTypeIndex() {
    return this.memoryViewUint32[0x6];
  }
  set memoryTypeIndex(value) {
    this.memoryViewUint32[0x6] = value;
  }
  
};

VkMemoryAllocateInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkMemoryAllocateInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkMemoryAllocateInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkMemoryAllocateInfo"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkMemoryAllocateInfo.byteLength = 0x20;

VkMemoryAllocateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  allocationSize: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  memoryTypeIndex: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
});
/** VkMemoryRequirements **/
class VkMemoryRequirements {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x18);
    this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    
    
    
    if (typeof opts === "object") {
      
    }
  }
  get size() {
    return this.memoryViewBigUint64[0x0];
  }
  get alignment() {
    return this.memoryViewBigUint64[0x1];
  }
  get memoryTypeBits() {
    return this.memoryViewUint32[0x4];
  }
  
};

VkMemoryRequirements.prototype.flush = function flush() {
  //console.log(`Flushing: "VkMemoryRequirements"`);
  
  return true;
};

VkMemoryRequirements.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkMemoryRequirements"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x18), 0x0);
};

VkMemoryRequirements.byteLength = 0x18;

VkMemoryRequirements.memoryLayout = Object.freeze({
  size: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x8
  }),
  alignment: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  memoryTypeBits: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkSparseImageFormatProperties **/
class VkSparseImageFormatProperties {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x14);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x14) / 0x4);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._imageGranularity = new VkExtent3D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x4 });
    
    
    if (typeof opts === "object") {
      
    }
  }
  get aspectMask() {
    return this.memoryViewInt32[0x0];
  }
  get imageGranularity() {
    return this._imageGranularity;
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  
};

VkSparseImageFormatProperties.prototype.flush = function flush() {
  //console.log(`Flushing: "VkSparseImageFormatProperties"`);
  
  return true;
};

VkSparseImageFormatProperties.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x14);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkSparseImageFormatProperties"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x14), 0x0);
  
  
};

VkSparseImageFormatProperties.byteLength = 0x14;

VkSparseImageFormatProperties.memoryLayout = Object.freeze({
  aspectMask: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  imageGranularity: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0xC
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkSparseImageMemoryRequirements **/
class VkSparseImageMemoryRequirements {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x30);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
    this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x30) / 0x4);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x30) / 0x8);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);this._formatProperties = new VkSparseImageFormatProperties({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x0 });
    
    
    
    
    
    if (typeof opts === "object") {
      
    }
  }
  get formatProperties() {
    return this._formatProperties;
  }
  get imageMipTailFirstLod() {
    return this.memoryViewUint32[0x5];
  }
  get imageMipTailSize() {
    return this.memoryViewBigUint64[0x3];
  }
  get imageMipTailOffset() {
    return this.memoryViewBigUint64[0x4];
  }
  get imageMipTailStride() {
    return this.memoryViewBigUint64[0x5];
  }
  
};

VkSparseImageMemoryRequirements.prototype.flush = function flush() {
  //console.log(`Flushing: "VkSparseImageMemoryRequirements"`);
  
  return true;
};

VkSparseImageMemoryRequirements.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x30);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkSparseImageMemoryRequirements"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x30), 0x0);
  
  
};

VkSparseImageMemoryRequirements.byteLength = 0x30;

VkSparseImageMemoryRequirements.memoryLayout = Object.freeze({
  formatProperties: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x14
  }),
  imageMipTailFirstLod: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  imageMipTailSize: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  imageMipTailOffset: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
  imageMipTailStride: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
});
/** VkMemoryType **/
class VkMemoryType {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x8);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x8) / 0x4);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x8) / 0x4);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    
    
    if (typeof opts === "object") {
      
    }
  }
  get propertyFlags() {
    return this.memoryViewInt32[0x0];
  }
  get heapIndex() {
    return this.memoryViewUint32[0x1];
  }
  
};

VkMemoryType.prototype.flush = function flush() {
  //console.log(`Flushing: "VkMemoryType"`);
  
  return true;
};

VkMemoryType.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x8);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkMemoryType"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x8), 0x0);
};

VkMemoryType.byteLength = 0x8;

VkMemoryType.memoryLayout = Object.freeze({
  propertyFlags: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  heapIndex: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
});
/** VkMemoryHeap **/
class VkMemoryHeap {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x10);
    this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x10) / 0x8);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x10) / 0x4);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    
    
    if (typeof opts === "object") {
      
    }
  }
  get size() {
    return this.memoryViewBigUint64[0x0];
  }
  get flags() {
    return this.memoryViewInt32[0x2];
  }
  
};

VkMemoryHeap.prototype.flush = function flush() {
  //console.log(`Flushing: "VkMemoryHeap"`);
  
  return true;
};

VkMemoryHeap.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x10);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkMemoryHeap"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x10), 0x0);
};

VkMemoryHeap.byteLength = 0x10;

VkMemoryHeap.memoryLayout = Object.freeze({
  size: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
});
/** VkMappedMemoryRange **/
class VkMappedMemoryRange {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x28);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    this._memory = null;
    
    
    this.sType = 0x6;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.memory !== void 0) this.memory = opts.memory;
      if (opts.offset !== void 0) this.offset = opts.offset;
      if (opts.size !== void 0) this.size = opts.size;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkMappedMemoryRange.pNext' isn't allowed to be filled");
  }
  get memory() {
    return this._memory;
  }
  set memory(value) {
    if (value !== null && value.constructor === VkDeviceMemory) {
      
      this._memory = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._memory = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkMappedMemoryRange.memory': Expected 'VkDeviceMemory' but got '" + value.constructor.name + "'");
    }
  }
  get offset() {
    return this.memoryViewBigUint64[0x3];
  }
  set offset(value) {
    this.memoryViewBigUint64[0x3] = value;
  }
  get size() {
    return this.memoryViewBigUint64[0x4];
  }
  set size(value) {
    this.memoryViewBigUint64[0x4] = value;
  }
  
};

VkMappedMemoryRange.prototype.flush = function flush() {
  //console.log(`Flushing: "VkMappedMemoryRange"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkMappedMemoryRange.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x28);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkMappedMemoryRange"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkMappedMemoryRange.byteLength = 0x28;

VkMappedMemoryRange.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  memory: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  offset: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  size: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
});
/** VkFormatProperties **/
class VkFormatProperties {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0xC);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0xC) / 0x4);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    
    
    
    if (typeof opts === "object") {
      
    }
  }
  get linearTilingFeatures() {
    return this.memoryViewInt32[0x0];
  }
  get optimalTilingFeatures() {
    return this.memoryViewInt32[0x1];
  }
  get bufferFeatures() {
    return this.memoryViewInt32[0x2];
  }
  
};

VkFormatProperties.prototype.flush = function flush() {
  //console.log(`Flushing: "VkFormatProperties"`);
  
  return true;
};

VkFormatProperties.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0xC);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkFormatProperties"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0xC), 0x0);
};

VkFormatProperties.byteLength = 0xC;

VkFormatProperties.memoryLayout = Object.freeze({
  linearTilingFeatures: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  optimalTilingFeatures: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  bufferFeatures: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
});
/** VkImageFormatProperties **/
class VkImageFormatProperties {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x20);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);this._maxExtent = new VkExtent3D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x0 });
    
    
    
    
    
    if (typeof opts === "object") {
      
    }
  }
  get maxExtent() {
    return this._maxExtent;
  }
  get maxMipLevels() {
    return this.memoryViewUint32[0x3];
  }
  get maxArrayLayers() {
    return this.memoryViewUint32[0x4];
  }
  get sampleCounts() {
    return this.memoryViewInt32[0x5];
  }
  get maxResourceSize() {
    return this.memoryViewBigUint64[0x3];
  }
  
};

VkImageFormatProperties.prototype.flush = function flush() {
  //console.log(`Flushing: "VkImageFormatProperties"`);
  
  return true;
};

VkImageFormatProperties.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkImageFormatProperties"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x20), 0x0);
  
  
};

VkImageFormatProperties.byteLength = 0x20;

VkImageFormatProperties.memoryLayout = Object.freeze({
  maxExtent: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0xC
  }),
  maxMipLevels: Object.freeze({
    byteOffset: 0xC,
    byteLength: 0x4
  }),
  maxArrayLayers: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  sampleCounts: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  maxResourceSize: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkDescriptorBufferInfo **/
class VkDescriptorBufferInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this._buffer = null;
    
    
    
    if (typeof opts === "object") {
      if (opts.buffer !== void 0) this.buffer = opts.buffer;
      if (opts.offset !== void 0) this.offset = opts.offset;
      if (opts.range !== void 0) this.range = opts.range;
      
    }
  }
  get buffer() {
    return this._buffer;
  }
  set buffer(value) {
    if (value !== null && value.constructor === VkBuffer) {
      
      this._buffer = value;
      
      this.memoryViewBigInt64[0x0] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._buffer = null;
      this.memoryViewBigInt64[0x0] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkDescriptorBufferInfo.buffer': Expected 'VkBuffer' but got '" + value.constructor.name + "'");
    }
  }
  get offset() {
    return this.memoryViewBigUint64[0x1];
  }
  set offset(value) {
    this.memoryViewBigUint64[0x1] = value;
  }
  get range() {
    return this.memoryViewBigUint64[0x2];
  }
  set range(value) {
    this.memoryViewBigUint64[0x2] = value;
  }
  
};

VkDescriptorBufferInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDescriptorBufferInfo"`);
  
  return true;
};

VkDescriptorBufferInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDescriptorBufferInfo"`, this.memoryAddress, memoryAddress);
  
};

VkDescriptorBufferInfo.byteLength = 0x18;

VkDescriptorBufferInfo.memoryLayout = Object.freeze({
  buffer: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x8
  }),
  offset: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  range: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
});
/** VkDescriptorImageInfo **/
class VkDescriptorImageInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this._sampler = null;
    this._imageView = null;
    
    
    if (typeof opts === "object") {
      if (opts.sampler !== void 0) this.sampler = opts.sampler;
      if (opts.imageView !== void 0) this.imageView = opts.imageView;
      if (opts.imageLayout !== void 0) this.imageLayout = opts.imageLayout;
      
    }
  }
  get sampler() {
    return this._sampler;
  }
  set sampler(value) {
    if (value !== null && value.constructor === VkSampler) {
      
      this._sampler = value;
      
      this.memoryViewBigInt64[0x0] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._sampler = null;
      this.memoryViewBigInt64[0x0] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkDescriptorImageInfo.sampler': Expected 'VkSampler' but got '" + value.constructor.name + "'");
    }
  }
  get imageView() {
    return this._imageView;
  }
  set imageView(value) {
    if (value !== null && value.constructor === VkImageView) {
      
      this._imageView = value;
      
      this.memoryViewBigInt64[0x1] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._imageView = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkDescriptorImageInfo.imageView': Expected 'VkImageView' but got '" + value.constructor.name + "'");
    }
  }
  get imageLayout() {
    return this.memoryViewInt32[0x4];
  }
  set imageLayout(value) {
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkDescriptorImageInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDescriptorImageInfo"`);
  
  return true;
};

VkDescriptorImageInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDescriptorImageInfo"`, this.memoryAddress, memoryAddress);
  
};

VkDescriptorImageInfo.byteLength = 0x18;

VkDescriptorImageInfo.memoryLayout = Object.freeze({
  sampler: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x8
  }),
  imageView: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  imageLayout: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkWriteDescriptorSet **/
class VkWriteDescriptorSet {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x40);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    this._dstSet = null;
    
    
    
    
    this._pImageInfo = null;
    this._pImageInfoNative = null;
    this._pBufferInfo = null;
    this._pBufferInfoNative = null;
    this._pTexelBufferView = null;
    this._pTexelBufferViewNative = null;
    this.sType = 0x23;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.dstSet !== void 0) this.dstSet = opts.dstSet;
      if (opts.dstBinding !== void 0) this.dstBinding = opts.dstBinding;
      if (opts.dstArrayElement !== void 0) this.dstArrayElement = opts.dstArrayElement;
      if (opts.descriptorCount !== void 0) this.descriptorCount = opts.descriptorCount;
      if (opts.descriptorType !== void 0) this.descriptorType = opts.descriptorType;
      if (opts.pImageInfo !== void 0) this.pImageInfo = opts.pImageInfo;
      if (opts.pBufferInfo !== void 0) this.pBufferInfo = opts.pBufferInfo;
      if (opts.pTexelBufferView !== void 0) this.pTexelBufferView = opts.pTexelBufferView;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null && (value instanceof Object)) {
      let {sType} = value;
      if (sType <= -1) throw new TypeError("Invalid type for 'VkWriteDescriptorSet.pNext'");
      switch (sType) {
          
        case 0x3B9CE512:
        case 0x3B9D4E8F:
          break;
        default:
          throw new TypeError("Invalid type for 'VkWriteDescriptorSet.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkWriteDescriptorSet.pNext'");
    }
  }
  get dstSet() {
    return this._dstSet;
  }
  set dstSet(value) {
    if (value !== null && value.constructor === VkDescriptorSet) {
      
      this._dstSet = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._dstSet = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkWriteDescriptorSet.dstSet': Expected 'VkDescriptorSet' but got '" + value.constructor.name + "'");
    }
  }
  get dstBinding() {
    return this.memoryViewUint32[0x6];
  }
  set dstBinding(value) {
    this.memoryViewUint32[0x6] = value;
  }
  get dstArrayElement() {
    return this.memoryViewUint32[0x7];
  }
  set dstArrayElement(value) {
    this.memoryViewUint32[0x7] = value;
  }
  get descriptorCount() {
    return this.memoryViewUint32[0x8];
  }
  set descriptorCount(value) {
    this.memoryViewUint32[0x8] = value;
  }
  get descriptorType() {
    return this.memoryViewInt32[0x9];
  }
  set descriptorType(value) {
    this.memoryViewInt32[0x9] = value;
  }
  get pImageInfo() {
    return this._pImageInfo;
  }
  set pImageInfo(value) {
    if (value !== null && value.constructor === Array) {
      this._pImageInfo = value;
    } else if (value === null) {
      this._pImageInfo = null;
    } else {
      throw new TypeError("Invalid type for 'VkWriteDescriptorSet.pImageInfo': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get pBufferInfo() {
    return this._pBufferInfo;
  }
  set pBufferInfo(value) {
    if (value !== null && value.constructor === Array) {
      this._pBufferInfo = value;
    } else if (value === null) {
      this._pBufferInfo = null;
    } else {
      throw new TypeError("Invalid type for 'VkWriteDescriptorSet.pBufferInfo': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get pTexelBufferView() {
    return this._pTexelBufferView;
  }
  set pTexelBufferView(value) {
    if (value !== null && value.constructor === Array) {
      this._pTexelBufferView = value;
    } else if (value === null) {
      this._pTexelBufferView = null;
    } else {
      throw new TypeError("Invalid type for 'VkWriteDescriptorSet.pTexelBufferView': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkWriteDescriptorSet.prototype.flush = function flush() {
  //console.log(`Flushing: "VkWriteDescriptorSet"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pImageInfo !== null) {
    let array = this._pImageInfo;
    if (array.length !== this.descriptorCount) {
      throw new RangeError("Invalid array length, expected length of 'descriptorCount' for 'VkWriteDescriptorSet.pImageInfo'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkDescriptorImageInfo) {
        throw new TypeError("Invalid type for 'VkWriteDescriptorSet.pImageInfo[" + ii + "]': Expected 'VkDescriptorImageInfo' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pImageInfoNative = nativeArray;
    this.memoryViewBigInt64[0x5] = nativeArray.address;
  }
  
  
  if (this._pBufferInfo !== null) {
    let array = this._pBufferInfo;
    if (array.length !== this.descriptorCount) {
      throw new RangeError("Invalid array length, expected length of 'descriptorCount' for 'VkWriteDescriptorSet.pBufferInfo'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkDescriptorBufferInfo) {
        throw new TypeError("Invalid type for 'VkWriteDescriptorSet.pBufferInfo[" + ii + "]': Expected 'VkDescriptorBufferInfo' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pBufferInfoNative = nativeArray;
    this.memoryViewBigInt64[0x6] = nativeArray.address;
  }
  
  
  if (this._pTexelBufferView !== null) {
    let array = this._pTexelBufferView;
    if (array.length !== this.descriptorCount) {
      throw new RangeError("Invalid array length, expected length of 'descriptorCount' for 'VkWriteDescriptorSet.pTexelBufferView'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkBufferView) {
        throw new TypeError("Invalid type for 'VkWriteDescriptorSet.pTexelBufferView[" + ii + "]': Expected 'VkBufferView' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pTexelBufferViewNative = nativeArray;
    this.memoryViewBigInt64[0x7] = nativeArray.address;
  }
  
  return true;
};

VkWriteDescriptorSet.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x40);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkWriteDescriptorSet"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
  
  
  
  
};

VkWriteDescriptorSet.byteLength = 0x40;

VkWriteDescriptorSet.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  dstSet: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  dstBinding: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  dstArrayElement: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  descriptorCount: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  descriptorType: Object.freeze({
    byteOffset: 0x24,
    byteLength: 0x4
  }),
  pImageInfo: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
  pBufferInfo: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x8
  }),
  pTexelBufferView: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x8
  }),
});
/** VkCopyDescriptorSet **/
class VkCopyDescriptorSet {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x38);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    this._srcSet = null;
    
    
    this._dstSet = null;
    
    
    
    this.sType = 0x24;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.srcSet !== void 0) this.srcSet = opts.srcSet;
      if (opts.srcBinding !== void 0) this.srcBinding = opts.srcBinding;
      if (opts.srcArrayElement !== void 0) this.srcArrayElement = opts.srcArrayElement;
      if (opts.dstSet !== void 0) this.dstSet = opts.dstSet;
      if (opts.dstBinding !== void 0) this.dstBinding = opts.dstBinding;
      if (opts.dstArrayElement !== void 0) this.dstArrayElement = opts.dstArrayElement;
      if (opts.descriptorCount !== void 0) this.descriptorCount = opts.descriptorCount;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkCopyDescriptorSet.pNext' isn't allowed to be filled");
  }
  get srcSet() {
    return this._srcSet;
  }
  set srcSet(value) {
    if (value !== null && value.constructor === VkDescriptorSet) {
      
      this._srcSet = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._srcSet = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkCopyDescriptorSet.srcSet': Expected 'VkDescriptorSet' but got '" + value.constructor.name + "'");
    }
  }
  get srcBinding() {
    return this.memoryViewUint32[0x6];
  }
  set srcBinding(value) {
    this.memoryViewUint32[0x6] = value;
  }
  get srcArrayElement() {
    return this.memoryViewUint32[0x7];
  }
  set srcArrayElement(value) {
    this.memoryViewUint32[0x7] = value;
  }
  get dstSet() {
    return this._dstSet;
  }
  set dstSet(value) {
    if (value !== null && value.constructor === VkDescriptorSet) {
      
      this._dstSet = value;
      
      this.memoryViewBigInt64[0x4] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._dstSet = null;
      this.memoryViewBigInt64[0x4] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkCopyDescriptorSet.dstSet': Expected 'VkDescriptorSet' but got '" + value.constructor.name + "'");
    }
  }
  get dstBinding() {
    return this.memoryViewUint32[0xA];
  }
  set dstBinding(value) {
    this.memoryViewUint32[0xA] = value;
  }
  get dstArrayElement() {
    return this.memoryViewUint32[0xB];
  }
  set dstArrayElement(value) {
    this.memoryViewUint32[0xB] = value;
  }
  get descriptorCount() {
    return this.memoryViewUint32[0xC];
  }
  set descriptorCount(value) {
    this.memoryViewUint32[0xC] = value;
  }
  
};

VkCopyDescriptorSet.prototype.flush = function flush() {
  //console.log(`Flushing: "VkCopyDescriptorSet"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkCopyDescriptorSet.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x38);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkCopyDescriptorSet"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkCopyDescriptorSet.byteLength = 0x38;

VkCopyDescriptorSet.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  srcSet: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  srcBinding: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  srcArrayElement: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  dstSet: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
  dstBinding: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x4
  }),
  dstArrayElement: Object.freeze({
    byteOffset: 0x2C,
    byteLength: 0x4
  }),
  descriptorCount: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
});
/** VkBufferCreateInfo **/
class VkBufferCreateInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x38);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    
    
    
    this._pQueueFamilyIndices = null;
    this.sType = 0xC;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.size !== void 0) this.size = opts.size;
      if (opts.usage !== void 0) this.usage = opts.usage;
      if (opts.sharingMode !== void 0) this.sharingMode = opts.sharingMode;
      if (opts.queueFamilyIndexCount !== void 0) this.queueFamilyIndexCount = opts.queueFamilyIndexCount;
      if (opts.pQueueFamilyIndices !== void 0) this.pQueueFamilyIndices = opts.pQueueFamilyIndices;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null && (value instanceof Object)) {
      let {sType} = value;
      if (sType <= -1) throw new TypeError("Invalid type for 'VkBufferCreateInfo.pNext'");
      switch (sType) {
          
        case 0x3B9B2F91:
        case 0x3B9BE340:
        case 0x3B9E8322:
          break;
        default:
          throw new TypeError("Invalid type for 'VkBufferCreateInfo.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkBufferCreateInfo.pNext'");
    }
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get size() {
    return this.memoryViewBigUint64[0x3];
  }
  set size(value) {
    this.memoryViewBigUint64[0x3] = value;
  }
  get usage() {
    return this.memoryViewInt32[0x8];
  }
  set usage(value) {
    this.memoryViewInt32[0x8] = value;
  }
  get sharingMode() {
    return this.memoryViewInt32[0x9];
  }
  set sharingMode(value) {
    this.memoryViewInt32[0x9] = value;
  }
  get queueFamilyIndexCount() {
    return this.memoryViewUint32[0xA];
  }
  set queueFamilyIndexCount(value) {
    this.memoryViewUint32[0xA] = value;
  }
  get pQueueFamilyIndices() {
    return this._pQueueFamilyIndices;
  }
  set pQueueFamilyIndices(value) {
    if (value !== null && value.constructor === Uint32Array) {
      this._pQueueFamilyIndices = value;
      this.memoryViewBigInt64[0x6] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pQueueFamilyIndices = null;
      this.memoryViewBigInt64[0x6] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkBufferCreateInfo.pQueueFamilyIndices': Expected 'Uint32Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkBufferCreateInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkBufferCreateInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkBufferCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x38);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkBufferCreateInfo"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkBufferCreateInfo.byteLength = 0x38;

VkBufferCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  size: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  usage: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  sharingMode: Object.freeze({
    byteOffset: 0x24,
    byteLength: 0x4
  }),
  queueFamilyIndexCount: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x4
  }),
  pQueueFamilyIndices: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x8
  }),
});
/** VkBufferViewCreateInfo **/
class VkBufferViewCreateInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x38);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this._buffer = null;
    
    
    
    this.sType = 0xD;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.buffer !== void 0) this.buffer = opts.buffer;
      if (opts.format !== void 0) this.format = opts.format;
      if (opts.offset !== void 0) this.offset = opts.offset;
      if (opts.range !== void 0) this.range = opts.range;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkBufferViewCreateInfo.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get buffer() {
    return this._buffer;
  }
  set buffer(value) {
    if (value !== null && value.constructor === VkBuffer) {
      
      this._buffer = value;
      
      this.memoryViewBigInt64[0x3] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._buffer = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkBufferViewCreateInfo.buffer': Expected 'VkBuffer' but got '" + value.constructor.name + "'");
    }
  }
  get format() {
    return this.memoryViewInt32[0x8];
  }
  set format(value) {
    this.memoryViewInt32[0x8] = value;
  }
  get offset() {
    return this.memoryViewBigUint64[0x5];
  }
  set offset(value) {
    this.memoryViewBigUint64[0x5] = value;
  }
  get range() {
    return this.memoryViewBigUint64[0x6];
  }
  set range(value) {
    this.memoryViewBigUint64[0x6] = value;
  }
  
};

VkBufferViewCreateInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkBufferViewCreateInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkBufferViewCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x38);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkBufferViewCreateInfo"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkBufferViewCreateInfo.byteLength = 0x38;

VkBufferViewCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  buffer: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  format: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  offset: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
  range: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x8
  }),
});
/** VkImageSubresource **/
class VkImageSubresource {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0xC);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    
    
    
    if (typeof opts === "object") {
      if (opts.aspectMask !== void 0) this.aspectMask = opts.aspectMask;
      if (opts.mipLevel !== void 0) this.mipLevel = opts.mipLevel;
      if (opts.arrayLayer !== void 0) this.arrayLayer = opts.arrayLayer;
      
    }
  }
  get aspectMask() {
    return this.memoryViewInt32[0x0];
  }
  set aspectMask(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get mipLevel() {
    return this.memoryViewUint32[0x1];
  }
  set mipLevel(value) {
    this.memoryViewUint32[0x1] = value;
  }
  get arrayLayer() {
    return this.memoryViewUint32[0x2];
  }
  set arrayLayer(value) {
    this.memoryViewUint32[0x2] = value;
  }
  
};

VkImageSubresource.prototype.flush = function flush() {
  //console.log(`Flushing: "VkImageSubresource"`);
  
  return true;
};

VkImageSubresource.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0xC);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkImageSubresource"`, this.memoryAddress, memoryAddress);
  
};

VkImageSubresource.byteLength = 0xC;

VkImageSubresource.memoryLayout = Object.freeze({
  aspectMask: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  mipLevel: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  arrayLayer: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
});
/** VkImageSubresourceLayers **/
class VkImageSubresourceLayers {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x10);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    
    
    
    
    if (typeof opts === "object") {
      if (opts.aspectMask !== void 0) this.aspectMask = opts.aspectMask;
      if (opts.mipLevel !== void 0) this.mipLevel = opts.mipLevel;
      if (opts.baseArrayLayer !== void 0) this.baseArrayLayer = opts.baseArrayLayer;
      if (opts.layerCount !== void 0) this.layerCount = opts.layerCount;
      
    }
  }
  get aspectMask() {
    return this.memoryViewInt32[0x0];
  }
  set aspectMask(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get mipLevel() {
    return this.memoryViewUint32[0x1];
  }
  set mipLevel(value) {
    this.memoryViewUint32[0x1] = value;
  }
  get baseArrayLayer() {
    return this.memoryViewUint32[0x2];
  }
  set baseArrayLayer(value) {
    this.memoryViewUint32[0x2] = value;
  }
  get layerCount() {
    return this.memoryViewUint32[0x3];
  }
  set layerCount(value) {
    this.memoryViewUint32[0x3] = value;
  }
  
};

VkImageSubresourceLayers.prototype.flush = function flush() {
  //console.log(`Flushing: "VkImageSubresourceLayers"`);
  
  return true;
};

VkImageSubresourceLayers.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x10);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkImageSubresourceLayers"`, this.memoryAddress, memoryAddress);
  
};

VkImageSubresourceLayers.byteLength = 0x10;

VkImageSubresourceLayers.memoryLayout = Object.freeze({
  aspectMask: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  mipLevel: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  baseArrayLayer: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
  layerCount: Object.freeze({
    byteOffset: 0xC,
    byteLength: 0x4
  }),
});
/** VkImageSubresourceRange **/
class VkImageSubresourceRange {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x14);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    
    
    
    
    
    if (typeof opts === "object") {
      if (opts.aspectMask !== void 0) this.aspectMask = opts.aspectMask;
      if (opts.baseMipLevel !== void 0) this.baseMipLevel = opts.baseMipLevel;
      if (opts.levelCount !== void 0) this.levelCount = opts.levelCount;
      if (opts.baseArrayLayer !== void 0) this.baseArrayLayer = opts.baseArrayLayer;
      if (opts.layerCount !== void 0) this.layerCount = opts.layerCount;
      
    }
  }
  get aspectMask() {
    return this.memoryViewInt32[0x0];
  }
  set aspectMask(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get baseMipLevel() {
    return this.memoryViewUint32[0x1];
  }
  set baseMipLevel(value) {
    this.memoryViewUint32[0x1] = value;
  }
  get levelCount() {
    return this.memoryViewUint32[0x2];
  }
  set levelCount(value) {
    this.memoryViewUint32[0x2] = value;
  }
  get baseArrayLayer() {
    return this.memoryViewUint32[0x3];
  }
  set baseArrayLayer(value) {
    this.memoryViewUint32[0x3] = value;
  }
  get layerCount() {
    return this.memoryViewUint32[0x4];
  }
  set layerCount(value) {
    this.memoryViewUint32[0x4] = value;
  }
  
};

VkImageSubresourceRange.prototype.flush = function flush() {
  //console.log(`Flushing: "VkImageSubresourceRange"`);
  
  return true;
};

VkImageSubresourceRange.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x14);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkImageSubresourceRange"`, this.memoryAddress, memoryAddress);
  
};

VkImageSubresourceRange.byteLength = 0x14;

VkImageSubresourceRange.memoryLayout = Object.freeze({
  aspectMask: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  baseMipLevel: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  levelCount: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
  baseArrayLayer: Object.freeze({
    byteOffset: 0xC,
    byteLength: 0x4
  }),
  layerCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkMemoryBarrier **/
class VkMemoryBarrier {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    this.sType = 0x2E;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.srcAccessMask !== void 0) this.srcAccessMask = opts.srcAccessMask;
      if (opts.dstAccessMask !== void 0) this.dstAccessMask = opts.dstAccessMask;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkMemoryBarrier.pNext' isn't allowed to be filled");
  }
  get srcAccessMask() {
    return this.memoryViewInt32[0x4];
  }
  set srcAccessMask(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get dstAccessMask() {
    return this.memoryViewInt32[0x5];
  }
  set dstAccessMask(value) {
    this.memoryViewInt32[0x5] = value;
  }
  
};

VkMemoryBarrier.prototype.flush = function flush() {
  //console.log(`Flushing: "VkMemoryBarrier"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkMemoryBarrier.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkMemoryBarrier"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkMemoryBarrier.byteLength = 0x18;

VkMemoryBarrier.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  srcAccessMask: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  dstAccessMask: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
});
/** VkBufferMemoryBarrier **/
class VkBufferMemoryBarrier {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x38);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
    this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    
    
    this._buffer = null;
    
    
    this.sType = 0x2C;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.srcAccessMask !== void 0) this.srcAccessMask = opts.srcAccessMask;
      if (opts.dstAccessMask !== void 0) this.dstAccessMask = opts.dstAccessMask;
      if (opts.srcQueueFamilyIndex !== void 0) this.srcQueueFamilyIndex = opts.srcQueueFamilyIndex;
      if (opts.dstQueueFamilyIndex !== void 0) this.dstQueueFamilyIndex = opts.dstQueueFamilyIndex;
      if (opts.buffer !== void 0) this.buffer = opts.buffer;
      if (opts.offset !== void 0) this.offset = opts.offset;
      if (opts.size !== void 0) this.size = opts.size;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkBufferMemoryBarrier.pNext' isn't allowed to be filled");
  }
  get srcAccessMask() {
    return this.memoryViewInt32[0x4];
  }
  set srcAccessMask(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get dstAccessMask() {
    return this.memoryViewInt32[0x5];
  }
  set dstAccessMask(value) {
    this.memoryViewInt32[0x5] = value;
  }
  get srcQueueFamilyIndex() {
    return this.memoryViewUint32[0x6];
  }
  set srcQueueFamilyIndex(value) {
    this.memoryViewUint32[0x6] = value;
  }
  get dstQueueFamilyIndex() {
    return this.memoryViewUint32[0x7];
  }
  set dstQueueFamilyIndex(value) {
    this.memoryViewUint32[0x7] = value;
  }
  get buffer() {
    return this._buffer;
  }
  set buffer(value) {
    if (value !== null && value.constructor === VkBuffer) {
      
      this._buffer = value;
      
      this.memoryViewBigInt64[0x4] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._buffer = null;
      this.memoryViewBigInt64[0x4] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkBufferMemoryBarrier.buffer': Expected 'VkBuffer' but got '" + value.constructor.name + "'");
    }
  }
  get offset() {
    return this.memoryViewBigUint64[0x5];
  }
  set offset(value) {
    this.memoryViewBigUint64[0x5] = value;
  }
  get size() {
    return this.memoryViewBigUint64[0x6];
  }
  set size(value) {
    this.memoryViewBigUint64[0x6] = value;
  }
  
};

VkBufferMemoryBarrier.prototype.flush = function flush() {
  //console.log(`Flushing: "VkBufferMemoryBarrier"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkBufferMemoryBarrier.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x38);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkBufferMemoryBarrier"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkBufferMemoryBarrier.byteLength = 0x38;

VkBufferMemoryBarrier.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  srcAccessMask: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  dstAccessMask: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  srcQueueFamilyIndex: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  dstQueueFamilyIndex: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  buffer: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
  offset: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
  size: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x8
  }),
});
/** VkImageMemoryBarrier **/
class VkImageMemoryBarrier {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x48);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    
    
    
    
    this._image = null;
    this._subresourceRange = new VkImageSubresourceRange({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x30 });
    this.sType = 0x2D;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.srcAccessMask !== void 0) this.srcAccessMask = opts.srcAccessMask;
      if (opts.dstAccessMask !== void 0) this.dstAccessMask = opts.dstAccessMask;
      if (opts.oldLayout !== void 0) this.oldLayout = opts.oldLayout;
      if (opts.newLayout !== void 0) this.newLayout = opts.newLayout;
      if (opts.srcQueueFamilyIndex !== void 0) this.srcQueueFamilyIndex = opts.srcQueueFamilyIndex;
      if (opts.dstQueueFamilyIndex !== void 0) this.dstQueueFamilyIndex = opts.dstQueueFamilyIndex;
      if (opts.image !== void 0) this.image = opts.image;
      if (opts.subresourceRange !== void 0) this.subresourceRange = opts.subresourceRange;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null && (value instanceof Object)) {
      let {sType} = value;
      if (sType <= -1) throw new TypeError("Invalid type for 'VkImageMemoryBarrier.pNext'");
      switch (sType) {
          
        case 0x3B9CF898:
          break;
        default:
          throw new TypeError("Invalid type for 'VkImageMemoryBarrier.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkImageMemoryBarrier.pNext'");
    }
  }
  get srcAccessMask() {
    return this.memoryViewInt32[0x4];
  }
  set srcAccessMask(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get dstAccessMask() {
    return this.memoryViewInt32[0x5];
  }
  set dstAccessMask(value) {
    this.memoryViewInt32[0x5] = value;
  }
  get oldLayout() {
    return this.memoryViewInt32[0x6];
  }
  set oldLayout(value) {
    this.memoryViewInt32[0x6] = value;
  }
  get newLayout() {
    return this.memoryViewInt32[0x7];
  }
  set newLayout(value) {
    this.memoryViewInt32[0x7] = value;
  }
  get srcQueueFamilyIndex() {
    return this.memoryViewUint32[0x8];
  }
  set srcQueueFamilyIndex(value) {
    this.memoryViewUint32[0x8] = value;
  }
  get dstQueueFamilyIndex() {
    return this.memoryViewUint32[0x9];
  }
  set dstQueueFamilyIndex(value) {
    this.memoryViewUint32[0x9] = value;
  }
  get image() {
    return this._image;
  }
  set image(value) {
    if (value !== null && value.constructor === VkImage) {
      
      this._image = value;
      
      this.memoryViewBigInt64[0x5] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._image = null;
      this.memoryViewBigInt64[0x5] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkImageMemoryBarrier.image': Expected 'VkImage' but got '" + value.constructor.name + "'");
    }
  }
  get subresourceRange() {
    return this._subresourceRange;
  }
  set subresourceRange(value) {
    if (value !== null && value.constructor === VkImageSubresourceRange) {
      value.flush();
      this._subresourceRange = value;
      this.memoryViewBigInt64[0x6] = value.memoryAddress;
      
    } else if (value === null) {
      this._subresourceRange = null;
      this.memoryViewBigInt64[0x6] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkImageMemoryBarrier.subresourceRange': Expected 'VkImageSubresourceRange' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkImageMemoryBarrier.prototype.flush = function flush() {
  //console.log(`Flushing: "VkImageMemoryBarrier"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  
  return true;
};

VkImageMemoryBarrier.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x48);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkImageMemoryBarrier"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
};

VkImageMemoryBarrier.byteLength = 0x48;

VkImageMemoryBarrier.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  srcAccessMask: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  dstAccessMask: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  oldLayout: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  newLayout: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  srcQueueFamilyIndex: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  dstQueueFamilyIndex: Object.freeze({
    byteOffset: 0x24,
    byteLength: 0x4
  }),
  image: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
  subresourceRange: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x14
  }),
});
/** VkImageCreateInfo **/
class VkImageCreateInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x58);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    
    this._extent = new VkExtent3D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x1C });
    
    
    
    
    
    
    
    this._pQueueFamilyIndices = null;
    
    this.sType = 0xE;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.imageType !== void 0) this.imageType = opts.imageType;
      if (opts.format !== void 0) this.format = opts.format;
      if (opts.extent !== void 0) this.extent = opts.extent;
      if (opts.mipLevels !== void 0) this.mipLevels = opts.mipLevels;
      if (opts.arrayLayers !== void 0) this.arrayLayers = opts.arrayLayers;
      if (opts.samples !== void 0) this.samples = opts.samples;
      if (opts.tiling !== void 0) this.tiling = opts.tiling;
      if (opts.usage !== void 0) this.usage = opts.usage;
      if (opts.sharingMode !== void 0) this.sharingMode = opts.sharingMode;
      if (opts.queueFamilyIndexCount !== void 0) this.queueFamilyIndexCount = opts.queueFamilyIndexCount;
      if (opts.pQueueFamilyIndices !== void 0) this.pQueueFamilyIndices = opts.pQueueFamilyIndices;
      if (opts.initialLayout !== void 0) this.initialLayout = opts.initialLayout;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null && (value instanceof Object)) {
      let {sType} = value;
      if (sType <= -1) throw new TypeError("Invalid type for 'VkImageCreateInfo.pNext'");
      switch (sType) {
          
        case 0x3B9B2F90:
        case 0x3B9BA4C0:
        case 0x3B9BE341:
        case 0x3B9BB468:
        case 0x3B9D0838:
        case 0x3B9CC1ED:
        case 0x3B9D3333:
        case 0x3B9D3334:
        case 0x3B9E8AF0:
          break;
        default:
          throw new TypeError("Invalid type for 'VkImageCreateInfo.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkImageCreateInfo.pNext'");
    }
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get imageType() {
    return this.memoryViewInt32[0x5];
  }
  set imageType(value) {
    this.memoryViewInt32[0x5] = value;
  }
  get format() {
    return this.memoryViewInt32[0x6];
  }
  set format(value) {
    this.memoryViewInt32[0x6] = value;
  }
  get extent() {
    return this._extent;
  }
  set extent(value) {
    if (value !== null && value.constructor === VkExtent3D) {
      value.flush();
      this._extent = value;
      this.memoryViewBigInt64[0x4] = value.memoryAddress;
      
    } else if (value === null) {
      this._extent = null;
      this.memoryViewBigInt64[0x4] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkImageCreateInfo.extent': Expected 'VkExtent3D' but got '" + value.constructor.name + "'");
    }
  }
  get mipLevels() {
    return this.memoryViewUint32[0xA];
  }
  set mipLevels(value) {
    this.memoryViewUint32[0xA] = value;
  }
  get arrayLayers() {
    return this.memoryViewUint32[0xB];
  }
  set arrayLayers(value) {
    this.memoryViewUint32[0xB] = value;
  }
  get samples() {
    return this.memoryViewInt32[0xC];
  }
  set samples(value) {
    this.memoryViewInt32[0xC] = value;
  }
  get tiling() {
    return this.memoryViewInt32[0xD];
  }
  set tiling(value) {
    this.memoryViewInt32[0xD] = value;
  }
  get usage() {
    return this.memoryViewInt32[0xE];
  }
  set usage(value) {
    this.memoryViewInt32[0xE] = value;
  }
  get sharingMode() {
    return this.memoryViewInt32[0xF];
  }
  set sharingMode(value) {
    this.memoryViewInt32[0xF] = value;
  }
  get queueFamilyIndexCount() {
    return this.memoryViewUint32[0x10];
  }
  set queueFamilyIndexCount(value) {
    this.memoryViewUint32[0x10] = value;
  }
  get pQueueFamilyIndices() {
    return this._pQueueFamilyIndices;
  }
  set pQueueFamilyIndices(value) {
    if (value !== null && value.constructor === Uint32Array) {
      this._pQueueFamilyIndices = value;
      this.memoryViewBigInt64[0x9] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pQueueFamilyIndices = null;
      this.memoryViewBigInt64[0x9] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkImageCreateInfo.pQueueFamilyIndices': Expected 'Uint32Array' but got '" + value.constructor.name + "'");
    }
  }
  get initialLayout() {
    return this.memoryViewInt32[0x14];
  }
  set initialLayout(value) {
    this.memoryViewInt32[0x14] = value;
  }
  
};

VkImageCreateInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkImageCreateInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  
  return true;
};

VkImageCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x58);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkImageCreateInfo"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
};

VkImageCreateInfo.byteLength = 0x58;

VkImageCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  imageType: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  format: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  extent: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0xC
  }),
  mipLevels: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x4
  }),
  arrayLayers: Object.freeze({
    byteOffset: 0x2C,
    byteLength: 0x4
  }),
  samples: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  tiling: Object.freeze({
    byteOffset: 0x34,
    byteLength: 0x4
  }),
  usage: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x4
  }),
  sharingMode: Object.freeze({
    byteOffset: 0x3C,
    byteLength: 0x4
  }),
  queueFamilyIndexCount: Object.freeze({
    byteOffset: 0x40,
    byteLength: 0x4
  }),
  pQueueFamilyIndices: Object.freeze({
    byteOffset: 0x48,
    byteLength: 0x8
  }),
  initialLayout: Object.freeze({
    byteOffset: 0x50,
    byteLength: 0x4
  }),
});
/** VkSubresourceLayout **/
class VkSubresourceLayout {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x28);
    this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    
    
    
    
    
    if (typeof opts === "object") {
      
    }
  }
  get offset() {
    return this.memoryViewBigUint64[0x0];
  }
  get size() {
    return this.memoryViewBigUint64[0x1];
  }
  get rowPitch() {
    return this.memoryViewBigUint64[0x2];
  }
  get arrayPitch() {
    return this.memoryViewBigUint64[0x3];
  }
  get depthPitch() {
    return this.memoryViewBigUint64[0x4];
  }
  
};

VkSubresourceLayout.prototype.flush = function flush() {
  //console.log(`Flushing: "VkSubresourceLayout"`);
  
  return true;
};

VkSubresourceLayout.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x28);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkSubresourceLayout"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x28), 0x0);
};

VkSubresourceLayout.byteLength = 0x28;

VkSubresourceLayout.memoryLayout = Object.freeze({
  offset: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x8
  }),
  size: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  rowPitch: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  arrayPitch: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  depthPitch: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
});
/** VkImageViewCreateInfo **/
class VkImageViewCreateInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x50);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this._image = null;
    
    
    this._components = new VkComponentMapping({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x28 });
    this._subresourceRange = new VkImageSubresourceRange({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x38 });
    this.sType = 0xF;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.image !== void 0) this.image = opts.image;
      if (opts.viewType !== void 0) this.viewType = opts.viewType;
      if (opts.format !== void 0) this.format = opts.format;
      if (opts.components !== void 0) this.components = opts.components;
      if (opts.subresourceRange !== void 0) this.subresourceRange = opts.subresourceRange;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null && (value instanceof Object)) {
      let {sType} = value;
      if (sType <= -1) throw new TypeError("Invalid type for 'VkImageViewCreateInfo.pNext'");
      switch (sType) {
          
        case 0x3B9C930A:
        case 0x3B9D2B61:
        case 0x3B9BCFB8:
          break;
        default:
          throw new TypeError("Invalid type for 'VkImageViewCreateInfo.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkImageViewCreateInfo.pNext'");
    }
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get image() {
    return this._image;
  }
  set image(value) {
    if (value !== null && value.constructor === VkImage) {
      
      this._image = value;
      
      this.memoryViewBigInt64[0x3] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._image = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkImageViewCreateInfo.image': Expected 'VkImage' but got '" + value.constructor.name + "'");
    }
  }
  get viewType() {
    return this.memoryViewInt32[0x8];
  }
  set viewType(value) {
    this.memoryViewInt32[0x8] = value;
  }
  get format() {
    return this.memoryViewInt32[0x9];
  }
  set format(value) {
    this.memoryViewInt32[0x9] = value;
  }
  get components() {
    return this._components;
  }
  set components(value) {
    if (value !== null && value.constructor === VkComponentMapping) {
      value.flush();
      this._components = value;
      this.memoryViewBigInt64[0x5] = value.memoryAddress;
      
    } else if (value === null) {
      this._components = null;
      this.memoryViewBigInt64[0x5] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkImageViewCreateInfo.components': Expected 'VkComponentMapping' but got '" + value.constructor.name + "'");
    }
  }
  get subresourceRange() {
    return this._subresourceRange;
  }
  set subresourceRange(value) {
    if (value !== null && value.constructor === VkImageSubresourceRange) {
      value.flush();
      this._subresourceRange = value;
      this.memoryViewBigInt64[0x7] = value.memoryAddress;
      
    } else if (value === null) {
      this._subresourceRange = null;
      this.memoryViewBigInt64[0x7] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkImageViewCreateInfo.subresourceRange': Expected 'VkImageSubresourceRange' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkImageViewCreateInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkImageViewCreateInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  
  
  
  return true;
};

VkImageViewCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x50);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkImageViewCreateInfo"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
  
  
};

VkImageViewCreateInfo.byteLength = 0x50;

VkImageViewCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  image: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  viewType: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  format: Object.freeze({
    byteOffset: 0x24,
    byteLength: 0x4
  }),
  components: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x10
  }),
  subresourceRange: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x14
  }),
});
/** VkBufferCopy **/
class VkBufferCopy {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    
    
    
    if (typeof opts === "object") {
      if (opts.srcOffset !== void 0) this.srcOffset = opts.srcOffset;
      if (opts.dstOffset !== void 0) this.dstOffset = opts.dstOffset;
      if (opts.size !== void 0) this.size = opts.size;
      
    }
  }
  get srcOffset() {
    return this.memoryViewBigUint64[0x0];
  }
  set srcOffset(value) {
    this.memoryViewBigUint64[0x0] = value;
  }
  get dstOffset() {
    return this.memoryViewBigUint64[0x1];
  }
  set dstOffset(value) {
    this.memoryViewBigUint64[0x1] = value;
  }
  get size() {
    return this.memoryViewBigUint64[0x2];
  }
  set size(value) {
    this.memoryViewBigUint64[0x2] = value;
  }
  
};

VkBufferCopy.prototype.flush = function flush() {
  //console.log(`Flushing: "VkBufferCopy"`);
  
  return true;
};

VkBufferCopy.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkBufferCopy"`, this.memoryAddress, memoryAddress);
  
};

VkBufferCopy.byteLength = 0x18;

VkBufferCopy.memoryLayout = Object.freeze({
  srcOffset: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x8
  }),
  dstOffset: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  size: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
});
/** VkSparseMemoryBind **/
class VkSparseMemoryBind {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x28);
    this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    
    this._memory = null;
    
    
    
    if (typeof opts === "object") {
      if (opts.resourceOffset !== void 0) this.resourceOffset = opts.resourceOffset;
      if (opts.size !== void 0) this.size = opts.size;
      if (opts.memory !== void 0) this.memory = opts.memory;
      if (opts.memoryOffset !== void 0) this.memoryOffset = opts.memoryOffset;
      if (opts.flags !== void 0) this.flags = opts.flags;
      
    }
  }
  get resourceOffset() {
    return this.memoryViewBigUint64[0x0];
  }
  set resourceOffset(value) {
    this.memoryViewBigUint64[0x0] = value;
  }
  get size() {
    return this.memoryViewBigUint64[0x1];
  }
  set size(value) {
    this.memoryViewBigUint64[0x1] = value;
  }
  get memory() {
    return this._memory;
  }
  set memory(value) {
    if (value !== null && value.constructor === VkDeviceMemory) {
      
      this._memory = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._memory = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkSparseMemoryBind.memory': Expected 'VkDeviceMemory' but got '" + value.constructor.name + "'");
    }
  }
  get memoryOffset() {
    return this.memoryViewBigUint64[0x3];
  }
  set memoryOffset(value) {
    this.memoryViewBigUint64[0x3] = value;
  }
  get flags() {
    return this.memoryViewInt32[0x8];
  }
  set flags(value) {
    this.memoryViewInt32[0x8] = value;
  }
  
};

VkSparseMemoryBind.prototype.flush = function flush() {
  //console.log(`Flushing: "VkSparseMemoryBind"`);
  
  return true;
};

VkSparseMemoryBind.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x28);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkSparseMemoryBind"`, this.memoryAddress, memoryAddress);
  
};

VkSparseMemoryBind.byteLength = 0x28;

VkSparseMemoryBind.memoryLayout = Object.freeze({
  resourceOffset: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x8
  }),
  size: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  memory: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  memoryOffset: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
});
/** VkSparseImageMemoryBind **/
class VkSparseImageMemoryBind {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x40);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this._subresource = new VkImageSubresource({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x0 });
    this._offset = new VkOffset3D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0xC });
    this._extent = new VkExtent3D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x18 });
    this._memory = null;
    
    
    
    if (typeof opts === "object") {
      if (opts.subresource !== void 0) this.subresource = opts.subresource;
      if (opts.offset !== void 0) this.offset = opts.offset;
      if (opts.extent !== void 0) this.extent = opts.extent;
      if (opts.memory !== void 0) this.memory = opts.memory;
      if (opts.memoryOffset !== void 0) this.memoryOffset = opts.memoryOffset;
      if (opts.flags !== void 0) this.flags = opts.flags;
      
    }
  }
  get subresource() {
    return this._subresource;
  }
  set subresource(value) {
    if (value !== null && value.constructor === VkImageSubresource) {
      value.flush();
      this._subresource = value;
      this.memoryViewBigInt64[0x0] = value.memoryAddress;
      
    } else if (value === null) {
      this._subresource = null;
      this.memoryViewBigInt64[0x0] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkSparseImageMemoryBind.subresource': Expected 'VkImageSubresource' but got '" + value.constructor.name + "'");
    }
  }
  get offset() {
    return this._offset;
  }
  set offset(value) {
    if (value !== null && value.constructor === VkOffset3D) {
      value.flush();
      this._offset = value;
      this.memoryViewBigInt64[0x2] = value.memoryAddress;
      
    } else if (value === null) {
      this._offset = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkSparseImageMemoryBind.offset': Expected 'VkOffset3D' but got '" + value.constructor.name + "'");
    }
  }
  get extent() {
    return this._extent;
  }
  set extent(value) {
    if (value !== null && value.constructor === VkExtent3D) {
      value.flush();
      this._extent = value;
      this.memoryViewBigInt64[0x3] = value.memoryAddress;
      
    } else if (value === null) {
      this._extent = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkSparseImageMemoryBind.extent': Expected 'VkExtent3D' but got '" + value.constructor.name + "'");
    }
  }
  get memory() {
    return this._memory;
  }
  set memory(value) {
    if (value !== null && value.constructor === VkDeviceMemory) {
      
      this._memory = value;
      
      this.memoryViewBigInt64[0x5] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._memory = null;
      this.memoryViewBigInt64[0x5] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkSparseImageMemoryBind.memory': Expected 'VkDeviceMemory' but got '" + value.constructor.name + "'");
    }
  }
  get memoryOffset() {
    return this.memoryViewBigUint64[0x6];
  }
  set memoryOffset(value) {
    this.memoryViewBigUint64[0x6] = value;
  }
  get flags() {
    return this.memoryViewInt32[0xE];
  }
  set flags(value) {
    this.memoryViewInt32[0xE] = value;
  }
  
};

VkSparseImageMemoryBind.prototype.flush = function flush() {
  //console.log(`Flushing: "VkSparseImageMemoryBind"`);
  
  
  
  
  
  
  
  return true;
};

VkSparseImageMemoryBind.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x40);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkSparseImageMemoryBind"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
  
  
};

VkSparseImageMemoryBind.byteLength = 0x40;

VkSparseImageMemoryBind.memoryLayout = Object.freeze({
  subresource: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0xC
  }),
  offset: Object.freeze({
    byteOffset: 0xC,
    byteLength: 0xC
  }),
  extent: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0xC
  }),
  memory: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
  memoryOffset: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x4
  }),
});
/** VkSparseBufferMemoryBindInfo **/
class VkSparseBufferMemoryBindInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this._buffer = null;
    
    this._pBinds = null;
    this._pBindsNative = null;
    
    if (typeof opts === "object") {
      if (opts.buffer !== void 0) this.buffer = opts.buffer;
      if (opts.bindCount !== void 0) this.bindCount = opts.bindCount;
      if (opts.pBinds !== void 0) this.pBinds = opts.pBinds;
      
    }
  }
  get buffer() {
    return this._buffer;
  }
  set buffer(value) {
    if (value !== null && value.constructor === VkBuffer) {
      
      this._buffer = value;
      
      this.memoryViewBigInt64[0x0] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._buffer = null;
      this.memoryViewBigInt64[0x0] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkSparseBufferMemoryBindInfo.buffer': Expected 'VkBuffer' but got '" + value.constructor.name + "'");
    }
  }
  get bindCount() {
    return this.memoryViewUint32[0x2];
  }
  set bindCount(value) {
    this.memoryViewUint32[0x2] = value;
  }
  get pBinds() {
    return this._pBinds;
  }
  set pBinds(value) {
    if (value !== null && value.constructor === Array) {
      this._pBinds = value;
    } else if (value === null) {
      this._pBinds = null;
    } else {
      throw new TypeError("Invalid type for 'VkSparseBufferMemoryBindInfo.pBinds': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkSparseBufferMemoryBindInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkSparseBufferMemoryBindInfo"`);
  
  
  if (this._pBinds !== null) {
    let array = this._pBinds;
    if (array.length !== this.bindCount) {
      throw new RangeError("Invalid array length, expected length of 'bindCount' for 'VkSparseBufferMemoryBindInfo.pBinds'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkSparseMemoryBind) {
        throw new TypeError("Invalid type for 'VkSparseBufferMemoryBindInfo.pBinds[" + ii + "]': Expected 'VkSparseMemoryBind' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pBindsNative = nativeArray;
    this.memoryViewBigInt64[0x2] = nativeArray.address;
  }
  
  return true;
};

VkSparseBufferMemoryBindInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkSparseBufferMemoryBindInfo"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkSparseBufferMemoryBindInfo.byteLength = 0x18;

VkSparseBufferMemoryBindInfo.memoryLayout = Object.freeze({
  buffer: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x8
  }),
  bindCount: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
  pBinds: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
});
/** VkSparseImageOpaqueMemoryBindInfo **/
class VkSparseImageOpaqueMemoryBindInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this._image = null;
    
    this._pBinds = null;
    this._pBindsNative = null;
    
    if (typeof opts === "object") {
      if (opts.image !== void 0) this.image = opts.image;
      if (opts.bindCount !== void 0) this.bindCount = opts.bindCount;
      if (opts.pBinds !== void 0) this.pBinds = opts.pBinds;
      
    }
  }
  get image() {
    return this._image;
  }
  set image(value) {
    if (value !== null && value.constructor === VkImage) {
      
      this._image = value;
      
      this.memoryViewBigInt64[0x0] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._image = null;
      this.memoryViewBigInt64[0x0] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkSparseImageOpaqueMemoryBindInfo.image': Expected 'VkImage' but got '" + value.constructor.name + "'");
    }
  }
  get bindCount() {
    return this.memoryViewUint32[0x2];
  }
  set bindCount(value) {
    this.memoryViewUint32[0x2] = value;
  }
  get pBinds() {
    return this._pBinds;
  }
  set pBinds(value) {
    if (value !== null && value.constructor === Array) {
      this._pBinds = value;
    } else if (value === null) {
      this._pBinds = null;
    } else {
      throw new TypeError("Invalid type for 'VkSparseImageOpaqueMemoryBindInfo.pBinds': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkSparseImageOpaqueMemoryBindInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkSparseImageOpaqueMemoryBindInfo"`);
  
  
  if (this._pBinds !== null) {
    let array = this._pBinds;
    if (array.length !== this.bindCount) {
      throw new RangeError("Invalid array length, expected length of 'bindCount' for 'VkSparseImageOpaqueMemoryBindInfo.pBinds'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkSparseMemoryBind) {
        throw new TypeError("Invalid type for 'VkSparseImageOpaqueMemoryBindInfo.pBinds[" + ii + "]': Expected 'VkSparseMemoryBind' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pBindsNative = nativeArray;
    this.memoryViewBigInt64[0x2] = nativeArray.address;
  }
  
  return true;
};

VkSparseImageOpaqueMemoryBindInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkSparseImageOpaqueMemoryBindInfo"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkSparseImageOpaqueMemoryBindInfo.byteLength = 0x18;

VkSparseImageOpaqueMemoryBindInfo.memoryLayout = Object.freeze({
  image: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x8
  }),
  bindCount: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
  pBinds: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
});
/** VkSparseImageMemoryBindInfo **/
class VkSparseImageMemoryBindInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this._image = null;
    
    this._pBinds = null;
    this._pBindsNative = null;
    
    if (typeof opts === "object") {
      if (opts.image !== void 0) this.image = opts.image;
      if (opts.bindCount !== void 0) this.bindCount = opts.bindCount;
      if (opts.pBinds !== void 0) this.pBinds = opts.pBinds;
      
    }
  }
  get image() {
    return this._image;
  }
  set image(value) {
    if (value !== null && value.constructor === VkImage) {
      
      this._image = value;
      
      this.memoryViewBigInt64[0x0] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._image = null;
      this.memoryViewBigInt64[0x0] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkSparseImageMemoryBindInfo.image': Expected 'VkImage' but got '" + value.constructor.name + "'");
    }
  }
  get bindCount() {
    return this.memoryViewUint32[0x2];
  }
  set bindCount(value) {
    this.memoryViewUint32[0x2] = value;
  }
  get pBinds() {
    return this._pBinds;
  }
  set pBinds(value) {
    if (value !== null && value.constructor === Array) {
      this._pBinds = value;
    } else if (value === null) {
      this._pBinds = null;
    } else {
      throw new TypeError("Invalid type for 'VkSparseImageMemoryBindInfo.pBinds': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkSparseImageMemoryBindInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkSparseImageMemoryBindInfo"`);
  
  
  if (this._pBinds !== null) {
    let array = this._pBinds;
    if (array.length !== this.bindCount) {
      throw new RangeError("Invalid array length, expected length of 'bindCount' for 'VkSparseImageMemoryBindInfo.pBinds'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkSparseImageMemoryBind) {
        throw new TypeError("Invalid type for 'VkSparseImageMemoryBindInfo.pBinds[" + ii + "]': Expected 'VkSparseImageMemoryBind' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pBindsNative = nativeArray;
    this.memoryViewBigInt64[0x2] = nativeArray.address;
  }
  
  return true;
};

VkSparseImageMemoryBindInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkSparseImageMemoryBindInfo"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkSparseImageMemoryBindInfo.byteLength = 0x18;

VkSparseImageMemoryBindInfo.memoryLayout = Object.freeze({
  image: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x8
  }),
  bindCount: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
  pBinds: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
});
/** VkBindSparseInfo **/
class VkBindSparseInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x60);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this._pWaitSemaphores = null;
    this._pWaitSemaphoresNative = null;
    
    this._pBufferBinds = null;
    this._pBufferBindsNative = null;
    
    this._pImageOpaqueBinds = null;
    this._pImageOpaqueBindsNative = null;
    
    this._pImageBinds = null;
    this._pImageBindsNative = null;
    
    this._pSignalSemaphores = null;
    this._pSignalSemaphoresNative = null;
    this.sType = 0x7;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.waitSemaphoreCount !== void 0) this.waitSemaphoreCount = opts.waitSemaphoreCount;
      if (opts.pWaitSemaphores !== void 0) this.pWaitSemaphores = opts.pWaitSemaphores;
      if (opts.bufferBindCount !== void 0) this.bufferBindCount = opts.bufferBindCount;
      if (opts.pBufferBinds !== void 0) this.pBufferBinds = opts.pBufferBinds;
      if (opts.imageOpaqueBindCount !== void 0) this.imageOpaqueBindCount = opts.imageOpaqueBindCount;
      if (opts.pImageOpaqueBinds !== void 0) this.pImageOpaqueBinds = opts.pImageOpaqueBinds;
      if (opts.imageBindCount !== void 0) this.imageBindCount = opts.imageBindCount;
      if (opts.pImageBinds !== void 0) this.pImageBinds = opts.pImageBinds;
      if (opts.signalSemaphoreCount !== void 0) this.signalSemaphoreCount = opts.signalSemaphoreCount;
      if (opts.pSignalSemaphores !== void 0) this.pSignalSemaphores = opts.pSignalSemaphores;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null && (value instanceof Object)) {
      let {sType} = value;
      if (sType <= -1) throw new TypeError("Invalid type for 'VkBindSparseInfo.pNext'");
      switch (sType) {
          
        case 0x3B9BB466:
          break;
        default:
          throw new TypeError("Invalid type for 'VkBindSparseInfo.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkBindSparseInfo.pNext'");
    }
  }
  get waitSemaphoreCount() {
    return this.memoryViewUint32[0x4];
  }
  set waitSemaphoreCount(value) {
    this.memoryViewUint32[0x4] = value;
  }
  get pWaitSemaphores() {
    return this._pWaitSemaphores;
  }
  set pWaitSemaphores(value) {
    if (value !== null && value.constructor === Array) {
      this._pWaitSemaphores = value;
    } else if (value === null) {
      this._pWaitSemaphores = null;
    } else {
      throw new TypeError("Invalid type for 'VkBindSparseInfo.pWaitSemaphores': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get bufferBindCount() {
    return this.memoryViewUint32[0x8];
  }
  set bufferBindCount(value) {
    this.memoryViewUint32[0x8] = value;
  }
  get pBufferBinds() {
    return this._pBufferBinds;
  }
  set pBufferBinds(value) {
    if (value !== null && value.constructor === Array) {
      this._pBufferBinds = value;
    } else if (value === null) {
      this._pBufferBinds = null;
    } else {
      throw new TypeError("Invalid type for 'VkBindSparseInfo.pBufferBinds': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get imageOpaqueBindCount() {
    return this.memoryViewUint32[0xC];
  }
  set imageOpaqueBindCount(value) {
    this.memoryViewUint32[0xC] = value;
  }
  get pImageOpaqueBinds() {
    return this._pImageOpaqueBinds;
  }
  set pImageOpaqueBinds(value) {
    if (value !== null && value.constructor === Array) {
      this._pImageOpaqueBinds = value;
    } else if (value === null) {
      this._pImageOpaqueBinds = null;
    } else {
      throw new TypeError("Invalid type for 'VkBindSparseInfo.pImageOpaqueBinds': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get imageBindCount() {
    return this.memoryViewUint32[0x10];
  }
  set imageBindCount(value) {
    this.memoryViewUint32[0x10] = value;
  }
  get pImageBinds() {
    return this._pImageBinds;
  }
  set pImageBinds(value) {
    if (value !== null && value.constructor === Array) {
      this._pImageBinds = value;
    } else if (value === null) {
      this._pImageBinds = null;
    } else {
      throw new TypeError("Invalid type for 'VkBindSparseInfo.pImageBinds': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get signalSemaphoreCount() {
    return this.memoryViewUint32[0x14];
  }
  set signalSemaphoreCount(value) {
    this.memoryViewUint32[0x14] = value;
  }
  get pSignalSemaphores() {
    return this._pSignalSemaphores;
  }
  set pSignalSemaphores(value) {
    if (value !== null && value.constructor === Array) {
      this._pSignalSemaphores = value;
    } else if (value === null) {
      this._pSignalSemaphores = null;
    } else {
      throw new TypeError("Invalid type for 'VkBindSparseInfo.pSignalSemaphores': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkBindSparseInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkBindSparseInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pWaitSemaphores !== null) {
    let array = this._pWaitSemaphores;
    if (array.length !== this.waitSemaphoreCount) {
      throw new RangeError("Invalid array length, expected length of 'waitSemaphoreCount' for 'VkBindSparseInfo.pWaitSemaphores'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkSemaphore) {
        throw new TypeError("Invalid type for 'VkBindSparseInfo.pWaitSemaphores[" + ii + "]': Expected 'VkSemaphore' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pWaitSemaphoresNative = nativeArray;
    this.memoryViewBigInt64[0x3] = nativeArray.address;
  }
  
  
  if (this._pBufferBinds !== null) {
    let array = this._pBufferBinds;
    if (array.length !== this.bufferBindCount) {
      throw new RangeError("Invalid array length, expected length of 'bufferBindCount' for 'VkBindSparseInfo.pBufferBinds'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkSparseBufferMemoryBindInfo) {
        throw new TypeError("Invalid type for 'VkBindSparseInfo.pBufferBinds[" + ii + "]': Expected 'VkSparseBufferMemoryBindInfo' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pBufferBindsNative = nativeArray;
    this.memoryViewBigInt64[0x5] = nativeArray.address;
  }
  
  
  if (this._pImageOpaqueBinds !== null) {
    let array = this._pImageOpaqueBinds;
    if (array.length !== this.imageOpaqueBindCount) {
      throw new RangeError("Invalid array length, expected length of 'imageOpaqueBindCount' for 'VkBindSparseInfo.pImageOpaqueBinds'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkSparseImageOpaqueMemoryBindInfo) {
        throw new TypeError("Invalid type for 'VkBindSparseInfo.pImageOpaqueBinds[" + ii + "]': Expected 'VkSparseImageOpaqueMemoryBindInfo' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pImageOpaqueBindsNative = nativeArray;
    this.memoryViewBigInt64[0x7] = nativeArray.address;
  }
  
  
  if (this._pImageBinds !== null) {
    let array = this._pImageBinds;
    if (array.length !== this.imageBindCount) {
      throw new RangeError("Invalid array length, expected length of 'imageBindCount' for 'VkBindSparseInfo.pImageBinds'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkSparseImageMemoryBindInfo) {
        throw new TypeError("Invalid type for 'VkBindSparseInfo.pImageBinds[" + ii + "]': Expected 'VkSparseImageMemoryBindInfo' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pImageBindsNative = nativeArray;
    this.memoryViewBigInt64[0x9] = nativeArray.address;
  }
  
  
  if (this._pSignalSemaphores !== null) {
    let array = this._pSignalSemaphores;
    if (array.length !== this.signalSemaphoreCount) {
      throw new RangeError("Invalid array length, expected length of 'signalSemaphoreCount' for 'VkBindSparseInfo.pSignalSemaphores'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkSemaphore) {
        throw new TypeError("Invalid type for 'VkBindSparseInfo.pSignalSemaphores[" + ii + "]': Expected 'VkSemaphore' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pSignalSemaphoresNative = nativeArray;
    this.memoryViewBigInt64[0xB] = nativeArray.address;
  }
  
  return true;
};

VkBindSparseInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x60);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkBindSparseInfo"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
  
  
  
  
  
  
  
  
};

VkBindSparseInfo.byteLength = 0x60;

VkBindSparseInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  waitSemaphoreCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pWaitSemaphores: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  bufferBindCount: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  pBufferBinds: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
  imageOpaqueBindCount: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  pImageOpaqueBinds: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x8
  }),
  imageBindCount: Object.freeze({
    byteOffset: 0x40,
    byteLength: 0x4
  }),
  pImageBinds: Object.freeze({
    byteOffset: 0x48,
    byteLength: 0x8
  }),
  signalSemaphoreCount: Object.freeze({
    byteOffset: 0x50,
    byteLength: 0x4
  }),
  pSignalSemaphores: Object.freeze({
    byteOffset: 0x58,
    byteLength: 0x8
  }),
});
/** VkImageCopy **/
class VkImageCopy {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x44);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this._srcSubresource = new VkImageSubresourceLayers({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x0 });
    this._srcOffset = new VkOffset3D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x10 });
    this._dstSubresource = new VkImageSubresourceLayers({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x1C });
    this._dstOffset = new VkOffset3D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x2C });
    this._extent = new VkExtent3D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x38 });
    
    if (typeof opts === "object") {
      if (opts.srcSubresource !== void 0) this.srcSubresource = opts.srcSubresource;
      if (opts.srcOffset !== void 0) this.srcOffset = opts.srcOffset;
      if (opts.dstSubresource !== void 0) this.dstSubresource = opts.dstSubresource;
      if (opts.dstOffset !== void 0) this.dstOffset = opts.dstOffset;
      if (opts.extent !== void 0) this.extent = opts.extent;
      
    }
  }
  get srcSubresource() {
    return this._srcSubresource;
  }
  set srcSubresource(value) {
    if (value !== null && value.constructor === VkImageSubresourceLayers) {
      value.flush();
      this._srcSubresource = value;
      this.memoryViewBigInt64[0x0] = value.memoryAddress;
      
    } else if (value === null) {
      this._srcSubresource = null;
      this.memoryViewBigInt64[0x0] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkImageCopy.srcSubresource': Expected 'VkImageSubresourceLayers' but got '" + value.constructor.name + "'");
    }
  }
  get srcOffset() {
    return this._srcOffset;
  }
  set srcOffset(value) {
    if (value !== null && value.constructor === VkOffset3D) {
      value.flush();
      this._srcOffset = value;
      this.memoryViewBigInt64[0x2] = value.memoryAddress;
      
    } else if (value === null) {
      this._srcOffset = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkImageCopy.srcOffset': Expected 'VkOffset3D' but got '" + value.constructor.name + "'");
    }
  }
  get dstSubresource() {
    return this._dstSubresource;
  }
  set dstSubresource(value) {
    if (value !== null && value.constructor === VkImageSubresourceLayers) {
      value.flush();
      this._dstSubresource = value;
      this.memoryViewBigInt64[0x4] = value.memoryAddress;
      
    } else if (value === null) {
      this._dstSubresource = null;
      this.memoryViewBigInt64[0x4] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkImageCopy.dstSubresource': Expected 'VkImageSubresourceLayers' but got '" + value.constructor.name + "'");
    }
  }
  get dstOffset() {
    return this._dstOffset;
  }
  set dstOffset(value) {
    if (value !== null && value.constructor === VkOffset3D) {
      value.flush();
      this._dstOffset = value;
      this.memoryViewBigInt64[0x6] = value.memoryAddress;
      
    } else if (value === null) {
      this._dstOffset = null;
      this.memoryViewBigInt64[0x6] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkImageCopy.dstOffset': Expected 'VkOffset3D' but got '" + value.constructor.name + "'");
    }
  }
  get extent() {
    return this._extent;
  }
  set extent(value) {
    if (value !== null && value.constructor === VkExtent3D) {
      value.flush();
      this._extent = value;
      this.memoryViewBigInt64[0x7] = value.memoryAddress;
      
    } else if (value === null) {
      this._extent = null;
      this.memoryViewBigInt64[0x7] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkImageCopy.extent': Expected 'VkExtent3D' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkImageCopy.prototype.flush = function flush() {
  //console.log(`Flushing: "VkImageCopy"`);
  
  
  
  
  
  
  
  
  
  
  
  return true;
};

VkImageCopy.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x44);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkImageCopy"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
  
  
  
  
  
  
};

VkImageCopy.byteLength = 0x44;

VkImageCopy.memoryLayout = Object.freeze({
  srcSubresource: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x10
  }),
  srcOffset: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0xC
  }),
  dstSubresource: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x10
  }),
  dstOffset: Object.freeze({
    byteOffset: 0x2C,
    byteLength: 0xC
  }),
  extent: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0xC
  }),
});
/** VkImageBlit **/
class VkImageBlit {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x50);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this._srcSubresource = new VkImageSubresourceLayers({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x0 });
    
    this._dstSubresource = new VkImageSubresourceLayers({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x28 });
    
    
    if (typeof opts === "object") {
      if (opts.srcSubresource !== void 0) this.srcSubresource = opts.srcSubresource;
      if (opts.srcOffsets !== void 0) this.srcOffsets = opts.srcOffsets;
      if (opts.dstSubresource !== void 0) this.dstSubresource = opts.dstSubresource;
      if (opts.dstOffsets !== void 0) this.dstOffsets = opts.dstOffsets;
      
    }
  }
  get srcSubresource() {
    return this._srcSubresource;
  }
  set srcSubresource(value) {
    if (value !== null && value.constructor === VkImageSubresourceLayers) {
      value.flush();
      this._srcSubresource = value;
      this.memoryViewBigInt64[0x0] = value.memoryAddress;
      
    } else if (value === null) {
      this._srcSubresource = null;
      this.memoryViewBigInt64[0x0] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkImageBlit.srcSubresource': Expected 'VkImageSubresourceLayers' but got '" + value.constructor.name + "'");
    }
  }
  get srcOffsets() {
    return this._srcOffsets;
  }
  set srcOffsets(value) {
    if (value !== null && value.constructor === Array) {
      this._srcOffsets = value;
    } else if (value === null) {
      this._srcOffsets = null;
    } else {
      throw new TypeError("Invalid type for 'VkImageBlit.srcOffsets': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get dstSubresource() {
    return this._dstSubresource;
  }
  set dstSubresource(value) {
    if (value !== null && value.constructor === VkImageSubresourceLayers) {
      value.flush();
      this._dstSubresource = value;
      this.memoryViewBigInt64[0x5] = value.memoryAddress;
      
    } else if (value === null) {
      this._dstSubresource = null;
      this.memoryViewBigInt64[0x5] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkImageBlit.dstSubresource': Expected 'VkImageSubresourceLayers' but got '" + value.constructor.name + "'");
    }
  }
  get dstOffsets() {
    return this._dstOffsets;
  }
  set dstOffsets(value) {
    if (value !== null && value.constructor === Array) {
      this._dstOffsets = value;
    } else if (value === null) {
      this._dstOffsets = null;
    } else {
      throw new TypeError("Invalid type for 'VkImageBlit.dstOffsets': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkImageBlit.prototype.flush = function flush() {
  //console.log(`Flushing: "VkImageBlit"`);
  
  
  
  
  if (this._srcOffsets !== null) {
    let array = this._srcOffsets;
    if (array.length !== 2) {
      throw new RangeError("Invalid array length, expected length of '2' for 'VkImageBlit.srcOffsets'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkOffset3D) {
        throw new TypeError("Invalid type for 'VkImageBlit.srcOffsets[" + ii + "]': Expected 'VkOffset3D' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let dstView = new Uint8Array(this.memoryBuffer);
    let byteOffset = 0x10;
    for (let ii = 0; ii < array.length; ++ii) {
      let srcView = new Uint8Array(array[ii].memoryBuffer);
      dstView.set(srcView, byteOffset);
      byteOffset += VkOffset3D.byteLength;
    };
  }
  
  
  
  
  if (this._dstOffsets !== null) {
    let array = this._dstOffsets;
    if (array.length !== 2) {
      throw new RangeError("Invalid array length, expected length of '2' for 'VkImageBlit.dstOffsets'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkOffset3D) {
        throw new TypeError("Invalid type for 'VkImageBlit.dstOffsets[" + ii + "]': Expected 'VkOffset3D' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let dstView = new Uint8Array(this.memoryBuffer);
    let byteOffset = 0x38;
    for (let ii = 0; ii < array.length; ++ii) {
      let srcView = new Uint8Array(array[ii].memoryBuffer);
      dstView.set(srcView, byteOffset);
      byteOffset += VkOffset3D.byteLength;
    };
  }
  
  return true;
};

VkImageBlit.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x50);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkImageBlit"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
  
  
  
  
};

VkImageBlit.byteLength = 0x50;

VkImageBlit.memoryLayout = Object.freeze({
  srcSubresource: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x10
  }),
  srcOffsets: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x18
  }),
  dstSubresource: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x10
  }),
  dstOffsets: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x18
  }),
});
/** VkBufferImageCopy **/
class VkBufferImageCopy {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x38);
    this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    
    
    this._imageSubresource = new VkImageSubresourceLayers({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x10 });
    this._imageOffset = new VkOffset3D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x20 });
    this._imageExtent = new VkExtent3D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x2C });
    
    if (typeof opts === "object") {
      if (opts.bufferOffset !== void 0) this.bufferOffset = opts.bufferOffset;
      if (opts.bufferRowLength !== void 0) this.bufferRowLength = opts.bufferRowLength;
      if (opts.bufferImageHeight !== void 0) this.bufferImageHeight = opts.bufferImageHeight;
      if (opts.imageSubresource !== void 0) this.imageSubresource = opts.imageSubresource;
      if (opts.imageOffset !== void 0) this.imageOffset = opts.imageOffset;
      if (opts.imageExtent !== void 0) this.imageExtent = opts.imageExtent;
      
    }
  }
  get bufferOffset() {
    return this.memoryViewBigUint64[0x0];
  }
  set bufferOffset(value) {
    this.memoryViewBigUint64[0x0] = value;
  }
  get bufferRowLength() {
    return this.memoryViewUint32[0x2];
  }
  set bufferRowLength(value) {
    this.memoryViewUint32[0x2] = value;
  }
  get bufferImageHeight() {
    return this.memoryViewUint32[0x3];
  }
  set bufferImageHeight(value) {
    this.memoryViewUint32[0x3] = value;
  }
  get imageSubresource() {
    return this._imageSubresource;
  }
  set imageSubresource(value) {
    if (value !== null && value.constructor === VkImageSubresourceLayers) {
      value.flush();
      this._imageSubresource = value;
      this.memoryViewBigInt64[0x2] = value.memoryAddress;
      
    } else if (value === null) {
      this._imageSubresource = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkBufferImageCopy.imageSubresource': Expected 'VkImageSubresourceLayers' but got '" + value.constructor.name + "'");
    }
  }
  get imageOffset() {
    return this._imageOffset;
  }
  set imageOffset(value) {
    if (value !== null && value.constructor === VkOffset3D) {
      value.flush();
      this._imageOffset = value;
      this.memoryViewBigInt64[0x4] = value.memoryAddress;
      
    } else if (value === null) {
      this._imageOffset = null;
      this.memoryViewBigInt64[0x4] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkBufferImageCopy.imageOffset': Expected 'VkOffset3D' but got '" + value.constructor.name + "'");
    }
  }
  get imageExtent() {
    return this._imageExtent;
  }
  set imageExtent(value) {
    if (value !== null && value.constructor === VkExtent3D) {
      value.flush();
      this._imageExtent = value;
      this.memoryViewBigInt64[0x6] = value.memoryAddress;
      
    } else if (value === null) {
      this._imageExtent = null;
      this.memoryViewBigInt64[0x6] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkBufferImageCopy.imageExtent': Expected 'VkExtent3D' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkBufferImageCopy.prototype.flush = function flush() {
  //console.log(`Flushing: "VkBufferImageCopy"`);
  
  
  
  
  
  
  
  return true;
};

VkBufferImageCopy.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x38);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkBufferImageCopy"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
  
  
};

VkBufferImageCopy.byteLength = 0x38;

VkBufferImageCopy.memoryLayout = Object.freeze({
  bufferOffset: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x8
  }),
  bufferRowLength: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
  bufferImageHeight: Object.freeze({
    byteOffset: 0xC,
    byteLength: 0x4
  }),
  imageSubresource: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x10
  }),
  imageOffset: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0xC
  }),
  imageExtent: Object.freeze({
    byteOffset: 0x2C,
    byteLength: 0xC
  }),
});
/** VkImageResolve **/
class VkImageResolve {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x44);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this._srcSubresource = new VkImageSubresourceLayers({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x0 });
    this._srcOffset = new VkOffset3D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x10 });
    this._dstSubresource = new VkImageSubresourceLayers({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x1C });
    this._dstOffset = new VkOffset3D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x2C });
    this._extent = new VkExtent3D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x38 });
    
    if (typeof opts === "object") {
      if (opts.srcSubresource !== void 0) this.srcSubresource = opts.srcSubresource;
      if (opts.srcOffset !== void 0) this.srcOffset = opts.srcOffset;
      if (opts.dstSubresource !== void 0) this.dstSubresource = opts.dstSubresource;
      if (opts.dstOffset !== void 0) this.dstOffset = opts.dstOffset;
      if (opts.extent !== void 0) this.extent = opts.extent;
      
    }
  }
  get srcSubresource() {
    return this._srcSubresource;
  }
  set srcSubresource(value) {
    if (value !== null && value.constructor === VkImageSubresourceLayers) {
      value.flush();
      this._srcSubresource = value;
      this.memoryViewBigInt64[0x0] = value.memoryAddress;
      
    } else if (value === null) {
      this._srcSubresource = null;
      this.memoryViewBigInt64[0x0] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkImageResolve.srcSubresource': Expected 'VkImageSubresourceLayers' but got '" + value.constructor.name + "'");
    }
  }
  get srcOffset() {
    return this._srcOffset;
  }
  set srcOffset(value) {
    if (value !== null && value.constructor === VkOffset3D) {
      value.flush();
      this._srcOffset = value;
      this.memoryViewBigInt64[0x2] = value.memoryAddress;
      
    } else if (value === null) {
      this._srcOffset = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkImageResolve.srcOffset': Expected 'VkOffset3D' but got '" + value.constructor.name + "'");
    }
  }
  get dstSubresource() {
    return this._dstSubresource;
  }
  set dstSubresource(value) {
    if (value !== null && value.constructor === VkImageSubresourceLayers) {
      value.flush();
      this._dstSubresource = value;
      this.memoryViewBigInt64[0x4] = value.memoryAddress;
      
    } else if (value === null) {
      this._dstSubresource = null;
      this.memoryViewBigInt64[0x4] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkImageResolve.dstSubresource': Expected 'VkImageSubresourceLayers' but got '" + value.constructor.name + "'");
    }
  }
  get dstOffset() {
    return this._dstOffset;
  }
  set dstOffset(value) {
    if (value !== null && value.constructor === VkOffset3D) {
      value.flush();
      this._dstOffset = value;
      this.memoryViewBigInt64[0x6] = value.memoryAddress;
      
    } else if (value === null) {
      this._dstOffset = null;
      this.memoryViewBigInt64[0x6] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkImageResolve.dstOffset': Expected 'VkOffset3D' but got '" + value.constructor.name + "'");
    }
  }
  get extent() {
    return this._extent;
  }
  set extent(value) {
    if (value !== null && value.constructor === VkExtent3D) {
      value.flush();
      this._extent = value;
      this.memoryViewBigInt64[0x7] = value.memoryAddress;
      
    } else if (value === null) {
      this._extent = null;
      this.memoryViewBigInt64[0x7] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkImageResolve.extent': Expected 'VkExtent3D' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkImageResolve.prototype.flush = function flush() {
  //console.log(`Flushing: "VkImageResolve"`);
  
  
  
  
  
  
  
  
  
  
  
  return true;
};

VkImageResolve.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x44);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkImageResolve"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
  
  
  
  
  
  
};

VkImageResolve.byteLength = 0x44;

VkImageResolve.memoryLayout = Object.freeze({
  srcSubresource: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x10
  }),
  srcOffset: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0xC
  }),
  dstSubresource: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x10
  }),
  dstOffset: Object.freeze({
    byteOffset: 0x2C,
    byteLength: 0xC
  }),
  extent: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0xC
  }),
});
/** VkShaderModuleCreateInfo **/
class VkShaderModuleCreateInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x28);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    this._pCode = null;
    this.sType = 0x10;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.codeSize !== void 0) this.codeSize = opts.codeSize;
      if (opts.pCode !== void 0) this.pCode = opts.pCode;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null && (value instanceof Object)) {
      let {sType} = value;
      if (sType <= -1) throw new TypeError("Invalid type for 'VkShaderModuleCreateInfo.pNext'");
      switch (sType) {
          
        case 0x3B9D3B01:
          break;
        default:
          throw new TypeError("Invalid type for 'VkShaderModuleCreateInfo.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkShaderModuleCreateInfo.pNext'");
    }
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get codeSize() {
    return this.memoryViewBigInt64[0x3];
  }
  set codeSize(value) {
    this.memoryViewBigInt64[0x3] = value;
  }
  get pCode() {
    return this._pCode;
  }
  set pCode(value) {
    if (value !== null && value.constructor === Uint8Array) {
      this._pCode = value;
      this.memoryViewBigInt64[0x4] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pCode = null;
      this.memoryViewBigInt64[0x4] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkShaderModuleCreateInfo.pCode': Expected 'Uint8Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkShaderModuleCreateInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkShaderModuleCreateInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkShaderModuleCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x28);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkShaderModuleCreateInfo"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkShaderModuleCreateInfo.byteLength = 0x28;

VkShaderModuleCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  codeSize: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  pCode: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
});
/** VkDescriptorSetLayoutBinding **/
class VkDescriptorSetLayoutBinding {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    
    
    
    this._pImmutableSamplers = null;
    this._pImmutableSamplersNative = null;
    
    if (typeof opts === "object") {
      if (opts.binding !== void 0) this.binding = opts.binding;
      if (opts.descriptorType !== void 0) this.descriptorType = opts.descriptorType;
      if (opts.descriptorCount !== void 0) this.descriptorCount = opts.descriptorCount;
      if (opts.stageFlags !== void 0) this.stageFlags = opts.stageFlags;
      if (opts.pImmutableSamplers !== void 0) this.pImmutableSamplers = opts.pImmutableSamplers;
      
    }
  }
  get binding() {
    return this.memoryViewUint32[0x0];
  }
  set binding(value) {
    this.memoryViewUint32[0x0] = value;
  }
  get descriptorType() {
    return this.memoryViewInt32[0x1];
  }
  set descriptorType(value) {
    this.memoryViewInt32[0x1] = value;
  }
  get descriptorCount() {
    return this.memoryViewUint32[0x2];
  }
  set descriptorCount(value) {
    this.memoryViewUint32[0x2] = value;
  }
  get stageFlags() {
    return this.memoryViewInt32[0x3];
  }
  set stageFlags(value) {
    this.memoryViewInt32[0x3] = value;
  }
  get pImmutableSamplers() {
    return this._pImmutableSamplers;
  }
  set pImmutableSamplers(value) {
    if (value !== null && value.constructor === Array) {
      this._pImmutableSamplers = value;
    } else if (value === null) {
      this._pImmutableSamplers = null;
    } else {
      throw new TypeError("Invalid type for 'VkDescriptorSetLayoutBinding.pImmutableSamplers': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkDescriptorSetLayoutBinding.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDescriptorSetLayoutBinding"`);
  
  
  if (this._pImmutableSamplers !== null) {
    let array = this._pImmutableSamplers;
    if (array.length !== this.descriptorCount) {
      throw new RangeError("Invalid array length, expected length of 'descriptorCount' for 'VkDescriptorSetLayoutBinding.pImmutableSamplers'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkSampler) {
        throw new TypeError("Invalid type for 'VkDescriptorSetLayoutBinding.pImmutableSamplers[" + ii + "]': Expected 'VkSampler' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pImmutableSamplersNative = nativeArray;
    this.memoryViewBigInt64[0x2] = nativeArray.address;
  }
  
  return true;
};

VkDescriptorSetLayoutBinding.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDescriptorSetLayoutBinding"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkDescriptorSetLayoutBinding.byteLength = 0x18;

VkDescriptorSetLayoutBinding.memoryLayout = Object.freeze({
  binding: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  descriptorType: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  descriptorCount: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
  stageFlags: Object.freeze({
    byteOffset: 0xC,
    byteLength: 0x4
  }),
  pImmutableSamplers: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
});
/** VkDescriptorSetLayoutCreateInfo **/
class VkDescriptorSetLayoutCreateInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    this._pBindings = null;
    this._pBindingsNative = null;
    this.sType = 0x20;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.bindingCount !== void 0) this.bindingCount = opts.bindingCount;
      if (opts.pBindings !== void 0) this.pBindings = opts.pBindings;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null && (value instanceof Object)) {
      let {sType} = value;
      if (sType <= -1) throw new TypeError("Invalid type for 'VkDescriptorSetLayoutCreateInfo.pNext'");
      switch (sType) {
          
        case 0x3B9D3EE8:
          break;
        default:
          throw new TypeError("Invalid type for 'VkDescriptorSetLayoutCreateInfo.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkDescriptorSetLayoutCreateInfo.pNext'");
    }
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get bindingCount() {
    return this.memoryViewUint32[0x5];
  }
  set bindingCount(value) {
    this.memoryViewUint32[0x5] = value;
  }
  get pBindings() {
    return this._pBindings;
  }
  set pBindings(value) {
    if (value !== null && value.constructor === Array) {
      this._pBindings = value;
    } else if (value === null) {
      this._pBindings = null;
    } else {
      throw new TypeError("Invalid type for 'VkDescriptorSetLayoutCreateInfo.pBindings': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkDescriptorSetLayoutCreateInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDescriptorSetLayoutCreateInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pBindings !== null) {
    let array = this._pBindings;
    if (array.length !== this.bindingCount) {
      throw new RangeError("Invalid array length, expected length of 'bindingCount' for 'VkDescriptorSetLayoutCreateInfo.pBindings'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkDescriptorSetLayoutBinding) {
        throw new TypeError("Invalid type for 'VkDescriptorSetLayoutCreateInfo.pBindings[" + ii + "]': Expected 'VkDescriptorSetLayoutBinding' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pBindingsNative = nativeArray;
    this.memoryViewBigInt64[0x3] = nativeArray.address;
  }
  
  return true;
};

VkDescriptorSetLayoutCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDescriptorSetLayoutCreateInfo"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
};

VkDescriptorSetLayoutCreateInfo.byteLength = 0x20;

VkDescriptorSetLayoutCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  bindingCount: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  pBindings: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkDescriptorPoolSize **/
class VkDescriptorPoolSize {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    
    
    if (typeof opts === "object") {
      if (opts.type !== void 0) this.type = opts.type;
      if (opts.descriptorCount !== void 0) this.descriptorCount = opts.descriptorCount;
      
    }
  }
  get type() {
    return this.memoryViewInt32[0x0];
  }
  set type(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get descriptorCount() {
    return this.memoryViewUint32[0x1];
  }
  set descriptorCount(value) {
    this.memoryViewUint32[0x1] = value;
  }
  
};

VkDescriptorPoolSize.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDescriptorPoolSize"`);
  
  return true;
};

VkDescriptorPoolSize.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x8);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDescriptorPoolSize"`, this.memoryAddress, memoryAddress);
  
};

VkDescriptorPoolSize.byteLength = 0x8;

VkDescriptorPoolSize.memoryLayout = Object.freeze({
  type: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  descriptorCount: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
});
/** VkDescriptorPoolCreateInfo **/
class VkDescriptorPoolCreateInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x28);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    
    this._pPoolSizes = null;
    this._pPoolSizesNative = null;
    this.sType = 0x21;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.maxSets !== void 0) this.maxSets = opts.maxSets;
      if (opts.poolSizeCount !== void 0) this.poolSizeCount = opts.poolSizeCount;
      if (opts.pPoolSizes !== void 0) this.pPoolSizes = opts.pPoolSizes;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null && (value instanceof Object)) {
      let {sType} = value;
      if (sType <= -1) throw new TypeError("Invalid type for 'VkDescriptorPoolCreateInfo.pNext'");
      switch (sType) {
          
        case 0x3B9CE513:
          break;
        default:
          throw new TypeError("Invalid type for 'VkDescriptorPoolCreateInfo.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkDescriptorPoolCreateInfo.pNext'");
    }
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get maxSets() {
    return this.memoryViewUint32[0x5];
  }
  set maxSets(value) {
    this.memoryViewUint32[0x5] = value;
  }
  get poolSizeCount() {
    return this.memoryViewUint32[0x6];
  }
  set poolSizeCount(value) {
    this.memoryViewUint32[0x6] = value;
  }
  get pPoolSizes() {
    return this._pPoolSizes;
  }
  set pPoolSizes(value) {
    if (value !== null && value.constructor === Array) {
      this._pPoolSizes = value;
    } else if (value === null) {
      this._pPoolSizes = null;
    } else {
      throw new TypeError("Invalid type for 'VkDescriptorPoolCreateInfo.pPoolSizes': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkDescriptorPoolCreateInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDescriptorPoolCreateInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pPoolSizes !== null) {
    let array = this._pPoolSizes;
    if (array.length !== this.poolSizeCount) {
      throw new RangeError("Invalid array length, expected length of 'poolSizeCount' for 'VkDescriptorPoolCreateInfo.pPoolSizes'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkDescriptorPoolSize) {
        throw new TypeError("Invalid type for 'VkDescriptorPoolCreateInfo.pPoolSizes[" + ii + "]': Expected 'VkDescriptorPoolSize' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pPoolSizesNative = nativeArray;
    this.memoryViewBigInt64[0x4] = nativeArray.address;
  }
  
  return true;
};

VkDescriptorPoolCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x28);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDescriptorPoolCreateInfo"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
};

VkDescriptorPoolCreateInfo.byteLength = 0x28;

VkDescriptorPoolCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  maxSets: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  poolSizeCount: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  pPoolSizes: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
});
/** VkDescriptorSetAllocateInfo **/
class VkDescriptorSetAllocateInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x28);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    this._descriptorPool = null;
    
    this._pSetLayouts = null;
    this._pSetLayoutsNative = null;
    this.sType = 0x22;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.descriptorPool !== void 0) this.descriptorPool = opts.descriptorPool;
      if (opts.descriptorSetCount !== void 0) this.descriptorSetCount = opts.descriptorSetCount;
      if (opts.pSetLayouts !== void 0) this.pSetLayouts = opts.pSetLayouts;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null && (value instanceof Object)) {
      let {sType} = value;
      if (sType <= -1) throw new TypeError("Invalid type for 'VkDescriptorSetAllocateInfo.pNext'");
      switch (sType) {
          
        case 0x3B9D3EEB:
          break;
        default:
          throw new TypeError("Invalid type for 'VkDescriptorSetAllocateInfo.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkDescriptorSetAllocateInfo.pNext'");
    }
  }
  get descriptorPool() {
    return this._descriptorPool;
  }
  set descriptorPool(value) {
    if (value !== null && value.constructor === VkDescriptorPool) {
      
      this._descriptorPool = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._descriptorPool = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkDescriptorSetAllocateInfo.descriptorPool': Expected 'VkDescriptorPool' but got '" + value.constructor.name + "'");
    }
  }
  get descriptorSetCount() {
    return this.memoryViewUint32[0x6];
  }
  set descriptorSetCount(value) {
    this.memoryViewUint32[0x6] = value;
  }
  get pSetLayouts() {
    return this._pSetLayouts;
  }
  set pSetLayouts(value) {
    if (value !== null && value.constructor === Array) {
      this._pSetLayouts = value;
    } else if (value === null) {
      this._pSetLayouts = null;
    } else {
      throw new TypeError("Invalid type for 'VkDescriptorSetAllocateInfo.pSetLayouts': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkDescriptorSetAllocateInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDescriptorSetAllocateInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pSetLayouts !== null) {
    let array = this._pSetLayouts;
    if (array.length !== this.descriptorSetCount) {
      throw new RangeError("Invalid array length, expected length of 'descriptorSetCount' for 'VkDescriptorSetAllocateInfo.pSetLayouts'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkDescriptorSetLayout) {
        throw new TypeError("Invalid type for 'VkDescriptorSetAllocateInfo.pSetLayouts[" + ii + "]': Expected 'VkDescriptorSetLayout' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pSetLayoutsNative = nativeArray;
    this.memoryViewBigInt64[0x4] = nativeArray.address;
  }
  
  return true;
};

VkDescriptorSetAllocateInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x28);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDescriptorSetAllocateInfo"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
};

VkDescriptorSetAllocateInfo.byteLength = 0x28;

VkDescriptorSetAllocateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  descriptorPool: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  descriptorSetCount: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  pSetLayouts: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
});
/** VkSpecializationMapEntry **/
class VkSpecializationMapEntry {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x10);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    
    
    
    if (typeof opts === "object") {
      if (opts.constantID !== void 0) this.constantID = opts.constantID;
      if (opts.offset !== void 0) this.offset = opts.offset;
      if (opts.size !== void 0) this.size = opts.size;
      
    }
  }
  get constantID() {
    return this.memoryViewUint32[0x0];
  }
  set constantID(value) {
    this.memoryViewUint32[0x0] = value;
  }
  get offset() {
    return this.memoryViewUint32[0x1];
  }
  set offset(value) {
    this.memoryViewUint32[0x1] = value;
  }
  get size() {
    return this.memoryViewBigInt64[0x1];
  }
  set size(value) {
    this.memoryViewBigInt64[0x1] = value;
  }
  
};

VkSpecializationMapEntry.prototype.flush = function flush() {
  //console.log(`Flushing: "VkSpecializationMapEntry"`);
  
  return true;
};

VkSpecializationMapEntry.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x10);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkSpecializationMapEntry"`, this.memoryAddress, memoryAddress);
  
};

VkSpecializationMapEntry.byteLength = 0x10;

VkSpecializationMapEntry.memoryLayout = Object.freeze({
  constantID: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  offset: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  size: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
});
/** VkSpecializationInfo **/
class VkSpecializationInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x20);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pMapEntries = null;
    this._pMapEntriesNative = null;
    
    this._pData = null;
    
    if (typeof opts === "object") {
      if (opts.mapEntryCount !== void 0) this.mapEntryCount = opts.mapEntryCount;
      if (opts.pMapEntries !== void 0) this.pMapEntries = opts.pMapEntries;
      if (opts.dataSize !== void 0) this.dataSize = opts.dataSize;
      if (opts.pData !== void 0) this.pData = opts.pData;
      
    }
  }
  get mapEntryCount() {
    return this.memoryViewUint32[0x0];
  }
  set mapEntryCount(value) {
    this.memoryViewUint32[0x0] = value;
  }
  get pMapEntries() {
    return this._pMapEntries;
  }
  set pMapEntries(value) {
    if (value !== null && value.constructor === Array) {
      this._pMapEntries = value;
    } else if (value === null) {
      this._pMapEntries = null;
    } else {
      throw new TypeError("Invalid type for 'VkSpecializationInfo.pMapEntries': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get dataSize() {
    return this.memoryViewBigInt64[0x2];
  }
  set dataSize(value) {
    this.memoryViewBigInt64[0x2] = value;
  }
  get pData() {
    return this._pData;
  }
  set pData(value) {
    if (value !== null && value.constructor === ArrayBuffer) {
      this._pData = value;
      this.memoryViewBigInt64[0x3] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pData = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkSpecializationInfo.pData': Expected 'ArrayBuffer' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkSpecializationInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkSpecializationInfo"`);
  
  
  if (this._pMapEntries !== null) {
    let array = this._pMapEntries;
    if (array.length !== this.mapEntryCount) {
      throw new RangeError("Invalid array length, expected length of 'mapEntryCount' for 'VkSpecializationInfo.pMapEntries'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkSpecializationMapEntry) {
        throw new TypeError("Invalid type for 'VkSpecializationInfo.pMapEntries[" + ii + "]': Expected 'VkSpecializationMapEntry' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pMapEntriesNative = nativeArray;
    this.memoryViewBigInt64[0x1] = nativeArray.address;
  }
  
  return true;
};

VkSpecializationInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkSpecializationInfo"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkSpecializationInfo.byteLength = 0x20;

VkSpecializationInfo.memoryLayout = Object.freeze({
  mapEntryCount: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pMapEntries: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  dataSize: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  pData: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkPipelineShaderStageCreateInfo **/
class VkPipelineShaderStageCreateInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x30);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    this._module = null;
    this._pName = null;
    this._pSpecializationInfo = null;
    this.sType = 0x12;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.stage !== void 0) this.stage = opts.stage;
      if (opts.module !== void 0) this.module = opts.module;
      if (opts.pName !== void 0) this.pName = opts.pName;
      if (opts.pSpecializationInfo !== void 0) this.pSpecializationInfo = opts.pSpecializationInfo;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPipelineShaderStageCreateInfo.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get stage() {
    return this.memoryViewInt32[0x5];
  }
  set stage(value) {
    this.memoryViewInt32[0x5] = value;
  }
  get module() {
    return this._module;
  }
  set module(value) {
    if (value !== null && value.constructor === VkShaderModule) {
      
      this._module = value;
      
      this.memoryViewBigInt64[0x3] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._module = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkPipelineShaderStageCreateInfo.module': Expected 'VkShaderModule' but got '" + value.constructor.name + "'");
    }
  }
  get pName() {
    if (this._pName !== null) {
      let str = textDecoder.decode(this._pName);
      return str.substr(0, str.length - 1);
    } else {
      return null;
    }
  }
  set pName(value) {
    if (value !== null && value.constructor === String) {
      this._pName = textEncoder.encode(value + NULLT).buffer;
      this.memoryViewBigInt64[0x4] = getAddressFromArrayBuffer(this._pName);
    } else if (value === null) {
      this._pName = null;
      this.memoryViewBigInt64[0x4] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkPipelineShaderStageCreateInfo.pName': Expected 'String' but got '" + value.constructor.name + "'");
    }
  }
  get pSpecializationInfo() {
    return this._pSpecializationInfo;
  }
  set pSpecializationInfo(value) {
    if (value !== null && value.constructor === VkSpecializationInfo) {
      value.flush();
      this._pSpecializationInfo = value;
      this.memoryViewBigInt64[0x5] = value.memoryAddress;
      
    } else if (value === null) {
      this._pSpecializationInfo = null;
      this.memoryViewBigInt64[0x5] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkPipelineShaderStageCreateInfo.pSpecializationInfo': Expected 'VkSpecializationInfo' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkPipelineShaderStageCreateInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPipelineShaderStageCreateInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPipelineShaderStageCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x30);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPipelineShaderStageCreateInfo"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPipelineShaderStageCreateInfo.byteLength = 0x30;

VkPipelineShaderStageCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  stage: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  module: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  pName: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
  pSpecializationInfo: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
});
/** VkComputePipelineCreateInfo **/
class VkComputePipelineCreateInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x60);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this._stage = new VkPipelineShaderStageCreateInfo({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x18 });
    this._layout = null;
    this._basePipelineHandle = null;
    
    this.sType = 0x1D;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.stage !== void 0) this.stage = opts.stage;
      if (opts.layout !== void 0) this.layout = opts.layout;
      if (opts.basePipelineHandle !== void 0) this.basePipelineHandle = opts.basePipelineHandle;
      if (opts.basePipelineIndex !== void 0) this.basePipelineIndex = opts.basePipelineIndex;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkComputePipelineCreateInfo.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get stage() {
    return this._stage;
  }
  set stage(value) {
    if (value !== null && value.constructor === VkPipelineShaderStageCreateInfo) {
      value.flush();
      this._stage = value;
      this.memoryViewBigInt64[0x3] = value.memoryAddress;
      
    } else if (value === null) {
      this._stage = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkComputePipelineCreateInfo.stage': Expected 'VkPipelineShaderStageCreateInfo' but got '" + value.constructor.name + "'");
    }
  }
  get layout() {
    return this._layout;
  }
  set layout(value) {
    if (value !== null && value.constructor === VkPipelineLayout) {
      
      this._layout = value;
      
      this.memoryViewBigInt64[0x9] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._layout = null;
      this.memoryViewBigInt64[0x9] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkComputePipelineCreateInfo.layout': Expected 'VkPipelineLayout' but got '" + value.constructor.name + "'");
    }
  }
  get basePipelineHandle() {
    return this._basePipelineHandle;
  }
  set basePipelineHandle(value) {
    if (value !== null && value.constructor === VkPipeline) {
      
      this._basePipelineHandle = value;
      
      this.memoryViewBigInt64[0xA] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._basePipelineHandle = null;
      this.memoryViewBigInt64[0xA] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkComputePipelineCreateInfo.basePipelineHandle': Expected 'VkPipeline' but got '" + value.constructor.name + "'");
    }
  }
  get basePipelineIndex() {
    return this.memoryViewInt32[0x16];
  }
  set basePipelineIndex(value) {
    this.memoryViewInt32[0x16] = value;
  }
  
};

VkComputePipelineCreateInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkComputePipelineCreateInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  
  return true;
};

VkComputePipelineCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x60);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkComputePipelineCreateInfo"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
};

VkComputePipelineCreateInfo.byteLength = 0x60;

VkComputePipelineCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  stage: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x30
  }),
  layout: Object.freeze({
    byteOffset: 0x48,
    byteLength: 0x8
  }),
  basePipelineHandle: Object.freeze({
    byteOffset: 0x50,
    byteLength: 0x8
  }),
  basePipelineIndex: Object.freeze({
    byteOffset: 0x58,
    byteLength: 0x4
  }),
});
/** VkVertexInputBindingDescription **/
class VkVertexInputBindingDescription {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0xC);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    
    
    
    if (typeof opts === "object") {
      if (opts.binding !== void 0) this.binding = opts.binding;
      if (opts.stride !== void 0) this.stride = opts.stride;
      if (opts.inputRate !== void 0) this.inputRate = opts.inputRate;
      
    }
  }
  get binding() {
    return this.memoryViewUint32[0x0];
  }
  set binding(value) {
    this.memoryViewUint32[0x0] = value;
  }
  get stride() {
    return this.memoryViewUint32[0x1];
  }
  set stride(value) {
    this.memoryViewUint32[0x1] = value;
  }
  get inputRate() {
    return this.memoryViewInt32[0x2];
  }
  set inputRate(value) {
    this.memoryViewInt32[0x2] = value;
  }
  
};

VkVertexInputBindingDescription.prototype.flush = function flush() {
  //console.log(`Flushing: "VkVertexInputBindingDescription"`);
  
  return true;
};

VkVertexInputBindingDescription.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0xC);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkVertexInputBindingDescription"`, this.memoryAddress, memoryAddress);
  
};

VkVertexInputBindingDescription.byteLength = 0xC;

VkVertexInputBindingDescription.memoryLayout = Object.freeze({
  binding: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  stride: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  inputRate: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
});
/** VkVertexInputAttributeDescription **/
class VkVertexInputAttributeDescription {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x10);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    
    
    
    
    if (typeof opts === "object") {
      if (opts.location !== void 0) this.location = opts.location;
      if (opts.binding !== void 0) this.binding = opts.binding;
      if (opts.format !== void 0) this.format = opts.format;
      if (opts.offset !== void 0) this.offset = opts.offset;
      
    }
  }
  get location() {
    return this.memoryViewUint32[0x0];
  }
  set location(value) {
    this.memoryViewUint32[0x0] = value;
  }
  get binding() {
    return this.memoryViewUint32[0x1];
  }
  set binding(value) {
    this.memoryViewUint32[0x1] = value;
  }
  get format() {
    return this.memoryViewInt32[0x2];
  }
  set format(value) {
    this.memoryViewInt32[0x2] = value;
  }
  get offset() {
    return this.memoryViewUint32[0x3];
  }
  set offset(value) {
    this.memoryViewUint32[0x3] = value;
  }
  
};

VkVertexInputAttributeDescription.prototype.flush = function flush() {
  //console.log(`Flushing: "VkVertexInputAttributeDescription"`);
  
  return true;
};

VkVertexInputAttributeDescription.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x10);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkVertexInputAttributeDescription"`, this.memoryAddress, memoryAddress);
  
};

VkVertexInputAttributeDescription.byteLength = 0x10;

VkVertexInputAttributeDescription.memoryLayout = Object.freeze({
  location: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  binding: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  format: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
  offset: Object.freeze({
    byteOffset: 0xC,
    byteLength: 0x4
  }),
});
/** VkPipelineVertexInputStateCreateInfo **/
class VkPipelineVertexInputStateCreateInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x30);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    this._pVertexBindingDescriptions = null;
    this._pVertexBindingDescriptionsNative = null;
    
    this._pVertexAttributeDescriptions = null;
    this._pVertexAttributeDescriptionsNative = null;
    this.sType = 0x13;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.vertexBindingDescriptionCount !== void 0) this.vertexBindingDescriptionCount = opts.vertexBindingDescriptionCount;
      if (opts.pVertexBindingDescriptions !== void 0) this.pVertexBindingDescriptions = opts.pVertexBindingDescriptions;
      if (opts.vertexAttributeDescriptionCount !== void 0) this.vertexAttributeDescriptionCount = opts.vertexAttributeDescriptionCount;
      if (opts.pVertexAttributeDescriptions !== void 0) this.pVertexAttributeDescriptions = opts.pVertexAttributeDescriptions;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null && (value instanceof Object)) {
      let {sType} = value;
      if (sType <= -1) throw new TypeError("Invalid type for 'VkPipelineVertexInputStateCreateInfo.pNext'");
      switch (sType) {
          
        case 0x3B9DB031:
          break;
        default:
          throw new TypeError("Invalid type for 'VkPipelineVertexInputStateCreateInfo.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkPipelineVertexInputStateCreateInfo.pNext'");
    }
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get vertexBindingDescriptionCount() {
    return this.memoryViewUint32[0x5];
  }
  set vertexBindingDescriptionCount(value) {
    this.memoryViewUint32[0x5] = value;
  }
  get pVertexBindingDescriptions() {
    return this._pVertexBindingDescriptions;
  }
  set pVertexBindingDescriptions(value) {
    if (value !== null && value.constructor === Array) {
      this._pVertexBindingDescriptions = value;
    } else if (value === null) {
      this._pVertexBindingDescriptions = null;
    } else {
      throw new TypeError("Invalid type for 'VkPipelineVertexInputStateCreateInfo.pVertexBindingDescriptions': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get vertexAttributeDescriptionCount() {
    return this.memoryViewUint32[0x8];
  }
  set vertexAttributeDescriptionCount(value) {
    this.memoryViewUint32[0x8] = value;
  }
  get pVertexAttributeDescriptions() {
    return this._pVertexAttributeDescriptions;
  }
  set pVertexAttributeDescriptions(value) {
    if (value !== null && value.constructor === Array) {
      this._pVertexAttributeDescriptions = value;
    } else if (value === null) {
      this._pVertexAttributeDescriptions = null;
    } else {
      throw new TypeError("Invalid type for 'VkPipelineVertexInputStateCreateInfo.pVertexAttributeDescriptions': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkPipelineVertexInputStateCreateInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPipelineVertexInputStateCreateInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pVertexBindingDescriptions !== null) {
    let array = this._pVertexBindingDescriptions;
    if (array.length !== this.vertexBindingDescriptionCount) {
      throw new RangeError("Invalid array length, expected length of 'vertexBindingDescriptionCount' for 'VkPipelineVertexInputStateCreateInfo.pVertexBindingDescriptions'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkVertexInputBindingDescription) {
        throw new TypeError("Invalid type for 'VkPipelineVertexInputStateCreateInfo.pVertexBindingDescriptions[" + ii + "]': Expected 'VkVertexInputBindingDescription' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pVertexBindingDescriptionsNative = nativeArray;
    this.memoryViewBigInt64[0x3] = nativeArray.address;
  }
  
  
  if (this._pVertexAttributeDescriptions !== null) {
    let array = this._pVertexAttributeDescriptions;
    if (array.length !== this.vertexAttributeDescriptionCount) {
      throw new RangeError("Invalid array length, expected length of 'vertexAttributeDescriptionCount' for 'VkPipelineVertexInputStateCreateInfo.pVertexAttributeDescriptions'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkVertexInputAttributeDescription) {
        throw new TypeError("Invalid type for 'VkPipelineVertexInputStateCreateInfo.pVertexAttributeDescriptions[" + ii + "]': Expected 'VkVertexInputAttributeDescription' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pVertexAttributeDescriptionsNative = nativeArray;
    this.memoryViewBigInt64[0x5] = nativeArray.address;
  }
  
  return true;
};

VkPipelineVertexInputStateCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x30);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPipelineVertexInputStateCreateInfo"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
  
  
};

VkPipelineVertexInputStateCreateInfo.byteLength = 0x30;

VkPipelineVertexInputStateCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  vertexBindingDescriptionCount: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  pVertexBindingDescriptions: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  vertexAttributeDescriptionCount: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  pVertexAttributeDescriptions: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
});
/** VkPipelineInputAssemblyStateCreateInfo **/
class VkPipelineInputAssemblyStateCreateInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    
    this.sType = 0x14;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.topology !== void 0) this.topology = opts.topology;
      if (opts.primitiveRestartEnable !== void 0) this.primitiveRestartEnable = opts.primitiveRestartEnable;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPipelineInputAssemblyStateCreateInfo.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get topology() {
    return this.memoryViewInt32[0x5];
  }
  set topology(value) {
    this.memoryViewInt32[0x5] = value;
  }
  get primitiveRestartEnable() {
    return this.memoryViewUint32[0x6] !== 0;
  }
  set primitiveRestartEnable(value) {
    this.memoryViewUint32[0x6] = value | 0;
  }
  
};

VkPipelineInputAssemblyStateCreateInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPipelineInputAssemblyStateCreateInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPipelineInputAssemblyStateCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPipelineInputAssemblyStateCreateInfo"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPipelineInputAssemblyStateCreateInfo.byteLength = 0x20;

VkPipelineInputAssemblyStateCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  topology: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  primitiveRestartEnable: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
});
/** VkPipelineTessellationStateCreateInfo **/
class VkPipelineTessellationStateCreateInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    this.sType = 0x15;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.patchControlPoints !== void 0) this.patchControlPoints = opts.patchControlPoints;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null && (value instanceof Object)) {
      let {sType} = value;
      if (sType <= -1) throw new TypeError("Invalid type for 'VkPipelineTessellationStateCreateInfo.pNext'");
      switch (sType) {
          
        case 0x3B9C930B:
          break;
        default:
          throw new TypeError("Invalid type for 'VkPipelineTessellationStateCreateInfo.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkPipelineTessellationStateCreateInfo.pNext'");
    }
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get patchControlPoints() {
    return this.memoryViewUint32[0x5];
  }
  set patchControlPoints(value) {
    this.memoryViewUint32[0x5] = value;
  }
  
};

VkPipelineTessellationStateCreateInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPipelineTessellationStateCreateInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPipelineTessellationStateCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPipelineTessellationStateCreateInfo"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPipelineTessellationStateCreateInfo.byteLength = 0x18;

VkPipelineTessellationStateCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  patchControlPoints: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
});
/** VkPipelineViewportStateCreateInfo **/
class VkPipelineViewportStateCreateInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x30);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    this._pViewports = null;
    this._pViewportsNative = null;
    
    this._pScissors = null;
    this._pScissorsNative = null;
    this.sType = 0x16;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.viewportCount !== void 0) this.viewportCount = opts.viewportCount;
      if (opts.pViewports !== void 0) this.pViewports = opts.pViewports;
      if (opts.scissorCount !== void 0) this.scissorCount = opts.scissorCount;
      if (opts.pScissors !== void 0) this.pScissors = opts.pScissors;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null && (value instanceof Object)) {
      let {sType} = value;
      if (sType <= -1) throw new TypeError("Invalid type for 'VkPipelineViewportStateCreateInfo.pNext'");
      switch (sType) {
          
        case 0x3B9C1DD8:
        case 0x3B9C48D0:
        case 0x3B9DEAC8:
        case 0x3B9D4AA0:
        case 0x3B9D4AA5:
          break;
        default:
          throw new TypeError("Invalid type for 'VkPipelineViewportStateCreateInfo.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkPipelineViewportStateCreateInfo.pNext'");
    }
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get viewportCount() {
    return this.memoryViewUint32[0x5];
  }
  set viewportCount(value) {
    this.memoryViewUint32[0x5] = value;
  }
  get pViewports() {
    return this._pViewports;
  }
  set pViewports(value) {
    if (value !== null && value.constructor === Array) {
      this._pViewports = value;
    } else if (value === null) {
      this._pViewports = null;
    } else {
      throw new TypeError("Invalid type for 'VkPipelineViewportStateCreateInfo.pViewports': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get scissorCount() {
    return this.memoryViewUint32[0x8];
  }
  set scissorCount(value) {
    this.memoryViewUint32[0x8] = value;
  }
  get pScissors() {
    return this._pScissors;
  }
  set pScissors(value) {
    if (value !== null && value.constructor === Array) {
      this._pScissors = value;
    } else if (value === null) {
      this._pScissors = null;
    } else {
      throw new TypeError("Invalid type for 'VkPipelineViewportStateCreateInfo.pScissors': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkPipelineViewportStateCreateInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPipelineViewportStateCreateInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pViewports !== null) {
    let array = this._pViewports;
    if (array.length !== this.viewportCount) {
      throw new RangeError("Invalid array length, expected length of 'viewportCount' for 'VkPipelineViewportStateCreateInfo.pViewports'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkViewport) {
        throw new TypeError("Invalid type for 'VkPipelineViewportStateCreateInfo.pViewports[" + ii + "]': Expected 'VkViewport' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pViewportsNative = nativeArray;
    this.memoryViewBigInt64[0x3] = nativeArray.address;
  }
  
  
  if (this._pScissors !== null) {
    let array = this._pScissors;
    if (array.length !== this.scissorCount) {
      throw new RangeError("Invalid array length, expected length of 'scissorCount' for 'VkPipelineViewportStateCreateInfo.pScissors'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkRect2D) {
        throw new TypeError("Invalid type for 'VkPipelineViewportStateCreateInfo.pScissors[" + ii + "]': Expected 'VkRect2D' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pScissorsNative = nativeArray;
    this.memoryViewBigInt64[0x5] = nativeArray.address;
  }
  
  return true;
};

VkPipelineViewportStateCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x30);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPipelineViewportStateCreateInfo"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
  
  
};

VkPipelineViewportStateCreateInfo.byteLength = 0x30;

VkPipelineViewportStateCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  viewportCount: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  pViewports: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  scissorCount: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  pScissors: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
});
/** VkPipelineRasterizationStateCreateInfo **/
class VkPipelineRasterizationStateCreateInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x40);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
    this.memoryViewFloat32 = new Float32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    
    
    
    
    
    
    
    
    
    this.sType = 0x17;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.depthClampEnable !== void 0) this.depthClampEnable = opts.depthClampEnable;
      if (opts.rasterizerDiscardEnable !== void 0) this.rasterizerDiscardEnable = opts.rasterizerDiscardEnable;
      if (opts.polygonMode !== void 0) this.polygonMode = opts.polygonMode;
      if (opts.cullMode !== void 0) this.cullMode = opts.cullMode;
      if (opts.frontFace !== void 0) this.frontFace = opts.frontFace;
      if (opts.depthBiasEnable !== void 0) this.depthBiasEnable = opts.depthBiasEnable;
      if (opts.depthBiasConstantFactor !== void 0) this.depthBiasConstantFactor = opts.depthBiasConstantFactor;
      if (opts.depthBiasClamp !== void 0) this.depthBiasClamp = opts.depthBiasClamp;
      if (opts.depthBiasSlopeFactor !== void 0) this.depthBiasSlopeFactor = opts.depthBiasSlopeFactor;
      if (opts.lineWidth !== void 0) this.lineWidth = opts.lineWidth;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null && (value instanceof Object)) {
      let {sType} = value;
      if (sType <= -1) throw new TypeError("Invalid type for 'VkPipelineRasterizationStateCreateInfo.pNext'");
      switch (sType) {
          
        case 0x3B9B1050:
        case 0x3B9C5489:
        case 0x3B9B3762:
        case 0x3B9C5871:
          break;
        default:
          throw new TypeError("Invalid type for 'VkPipelineRasterizationStateCreateInfo.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkPipelineRasterizationStateCreateInfo.pNext'");
    }
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get depthClampEnable() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  set depthClampEnable(value) {
    this.memoryViewUint32[0x5] = value | 0;
  }
  get rasterizerDiscardEnable() {
    return this.memoryViewUint32[0x6] !== 0;
  }
  set rasterizerDiscardEnable(value) {
    this.memoryViewUint32[0x6] = value | 0;
  }
  get polygonMode() {
    return this.memoryViewInt32[0x7];
  }
  set polygonMode(value) {
    this.memoryViewInt32[0x7] = value;
  }
  get cullMode() {
    return this.memoryViewInt32[0x8];
  }
  set cullMode(value) {
    this.memoryViewInt32[0x8] = value;
  }
  get frontFace() {
    return this.memoryViewInt32[0x9];
  }
  set frontFace(value) {
    this.memoryViewInt32[0x9] = value;
  }
  get depthBiasEnable() {
    return this.memoryViewUint32[0xA] !== 0;
  }
  set depthBiasEnable(value) {
    this.memoryViewUint32[0xA] = value | 0;
  }
  get depthBiasConstantFactor() {
    return this.memoryViewFloat32[0xB];
  }
  set depthBiasConstantFactor(value) {
    this.memoryViewFloat32[0xB] = value;
  }
  get depthBiasClamp() {
    return this.memoryViewFloat32[0xC];
  }
  set depthBiasClamp(value) {
    this.memoryViewFloat32[0xC] = value;
  }
  get depthBiasSlopeFactor() {
    return this.memoryViewFloat32[0xD];
  }
  set depthBiasSlopeFactor(value) {
    this.memoryViewFloat32[0xD] = value;
  }
  get lineWidth() {
    return this.memoryViewFloat32[0xE];
  }
  set lineWidth(value) {
    this.memoryViewFloat32[0xE] = value;
  }
  
};

VkPipelineRasterizationStateCreateInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPipelineRasterizationStateCreateInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPipelineRasterizationStateCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x40);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPipelineRasterizationStateCreateInfo"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPipelineRasterizationStateCreateInfo.byteLength = 0x40;

VkPipelineRasterizationStateCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  depthClampEnable: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  rasterizerDiscardEnable: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  polygonMode: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  cullMode: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  frontFace: Object.freeze({
    byteOffset: 0x24,
    byteLength: 0x4
  }),
  depthBiasEnable: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x4
  }),
  depthBiasConstantFactor: Object.freeze({
    byteOffset: 0x2C,
    byteLength: 0x4
  }),
  depthBiasClamp: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  depthBiasSlopeFactor: Object.freeze({
    byteOffset: 0x34,
    byteLength: 0x4
  }),
  lineWidth: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x4
  }),
});
/** VkPipelineMultisampleStateCreateInfo **/
class VkPipelineMultisampleStateCreateInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x30);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
    this.memoryViewFloat32 = new Float32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    
    
    this._pSampleMask = null;
    
    
    this.sType = 0x18;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.rasterizationSamples !== void 0) this.rasterizationSamples = opts.rasterizationSamples;
      if (opts.sampleShadingEnable !== void 0) this.sampleShadingEnable = opts.sampleShadingEnable;
      if (opts.minSampleShading !== void 0) this.minSampleShading = opts.minSampleShading;
      if (opts.pSampleMask !== void 0) this.pSampleMask = opts.pSampleMask;
      if (opts.alphaToCoverageEnable !== void 0) this.alphaToCoverageEnable = opts.alphaToCoverageEnable;
      if (opts.alphaToOneEnable !== void 0) this.alphaToOneEnable = opts.alphaToOneEnable;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null && (value instanceof Object)) {
      let {sType} = value;
      if (sType <= -1) throw new TypeError("Invalid type for 'VkPipelineMultisampleStateCreateInfo.pNext'");
      switch (sType) {
          
        case 0x3B9D1008:
        case 0x3B9CF89A:
        case 0x3B9D1BC0:
          break;
        default:
          throw new TypeError("Invalid type for 'VkPipelineMultisampleStateCreateInfo.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkPipelineMultisampleStateCreateInfo.pNext'");
    }
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get rasterizationSamples() {
    return this.memoryViewInt32[0x5];
  }
  set rasterizationSamples(value) {
    this.memoryViewInt32[0x5] = value;
  }
  get sampleShadingEnable() {
    return this.memoryViewUint32[0x6] !== 0;
  }
  set sampleShadingEnable(value) {
    this.memoryViewUint32[0x6] = value | 0;
  }
  get minSampleShading() {
    return this.memoryViewFloat32[0x7];
  }
  set minSampleShading(value) {
    this.memoryViewFloat32[0x7] = value;
  }
  get pSampleMask() {
    return this._pSampleMask;
  }
  set pSampleMask(value) {
    if (value !== null && value.constructor === Uint32Array) {
      this._pSampleMask = value;
      this.memoryViewBigInt64[0x4] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pSampleMask = null;
      this.memoryViewBigInt64[0x4] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkPipelineMultisampleStateCreateInfo.pSampleMask': Expected 'Uint32Array' but got '" + value.constructor.name + "'");
    }
  }
  get alphaToCoverageEnable() {
    return this.memoryViewUint32[0xA] !== 0;
  }
  set alphaToCoverageEnable(value) {
    this.memoryViewUint32[0xA] = value | 0;
  }
  get alphaToOneEnable() {
    return this.memoryViewUint32[0xB] !== 0;
  }
  set alphaToOneEnable(value) {
    this.memoryViewUint32[0xB] = value | 0;
  }
  
};

VkPipelineMultisampleStateCreateInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPipelineMultisampleStateCreateInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPipelineMultisampleStateCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x30);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPipelineMultisampleStateCreateInfo"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPipelineMultisampleStateCreateInfo.byteLength = 0x30;

VkPipelineMultisampleStateCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  rasterizationSamples: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  sampleShadingEnable: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  minSampleShading: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  pSampleMask: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
  alphaToCoverageEnable: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x4
  }),
  alphaToOneEnable: Object.freeze({
    byteOffset: 0x2C,
    byteLength: 0x4
  }),
});
/** VkPipelineColorBlendAttachmentState **/
class VkPipelineColorBlendAttachmentState {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x20);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    
    
    
    
    
    
    
    
    if (typeof opts === "object") {
      if (opts.blendEnable !== void 0) this.blendEnable = opts.blendEnable;
      if (opts.srcColorBlendFactor !== void 0) this.srcColorBlendFactor = opts.srcColorBlendFactor;
      if (opts.dstColorBlendFactor !== void 0) this.dstColorBlendFactor = opts.dstColorBlendFactor;
      if (opts.colorBlendOp !== void 0) this.colorBlendOp = opts.colorBlendOp;
      if (opts.srcAlphaBlendFactor !== void 0) this.srcAlphaBlendFactor = opts.srcAlphaBlendFactor;
      if (opts.dstAlphaBlendFactor !== void 0) this.dstAlphaBlendFactor = opts.dstAlphaBlendFactor;
      if (opts.alphaBlendOp !== void 0) this.alphaBlendOp = opts.alphaBlendOp;
      if (opts.colorWriteMask !== void 0) this.colorWriteMask = opts.colorWriteMask;
      
    }
  }
  get blendEnable() {
    return this.memoryViewUint32[0x0] !== 0;
  }
  set blendEnable(value) {
    this.memoryViewUint32[0x0] = value | 0;
  }
  get srcColorBlendFactor() {
    return this.memoryViewInt32[0x1];
  }
  set srcColorBlendFactor(value) {
    this.memoryViewInt32[0x1] = value;
  }
  get dstColorBlendFactor() {
    return this.memoryViewInt32[0x2];
  }
  set dstColorBlendFactor(value) {
    this.memoryViewInt32[0x2] = value;
  }
  get colorBlendOp() {
    return this.memoryViewInt32[0x3];
  }
  set colorBlendOp(value) {
    this.memoryViewInt32[0x3] = value;
  }
  get srcAlphaBlendFactor() {
    return this.memoryViewInt32[0x4];
  }
  set srcAlphaBlendFactor(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get dstAlphaBlendFactor() {
    return this.memoryViewInt32[0x5];
  }
  set dstAlphaBlendFactor(value) {
    this.memoryViewInt32[0x5] = value;
  }
  get alphaBlendOp() {
    return this.memoryViewInt32[0x6];
  }
  set alphaBlendOp(value) {
    this.memoryViewInt32[0x6] = value;
  }
  get colorWriteMask() {
    return this.memoryViewInt32[0x7];
  }
  set colorWriteMask(value) {
    this.memoryViewInt32[0x7] = value;
  }
  
};

VkPipelineColorBlendAttachmentState.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPipelineColorBlendAttachmentState"`);
  
  return true;
};

VkPipelineColorBlendAttachmentState.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPipelineColorBlendAttachmentState"`, this.memoryAddress, memoryAddress);
  
};

VkPipelineColorBlendAttachmentState.byteLength = 0x20;

VkPipelineColorBlendAttachmentState.memoryLayout = Object.freeze({
  blendEnable: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  srcColorBlendFactor: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  dstColorBlendFactor: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
  colorBlendOp: Object.freeze({
    byteOffset: 0xC,
    byteLength: 0x4
  }),
  srcAlphaBlendFactor: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  dstAlphaBlendFactor: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  alphaBlendOp: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  colorWriteMask: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
});
/** VkPipelineColorBlendStateCreateInfo **/
class VkPipelineColorBlendStateCreateInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x38);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
    this.memoryViewFloat32 = new Float32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    
    
    this._pAttachments = null;
    this._pAttachmentsNative = null;
    this._blendConstants = [...Array(4)].fill(0x0);
    this.sType = 0x1A;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.logicOpEnable !== void 0) this.logicOpEnable = opts.logicOpEnable;
      if (opts.logicOp !== void 0) this.logicOp = opts.logicOp;
      if (opts.attachmentCount !== void 0) this.attachmentCount = opts.attachmentCount;
      if (opts.pAttachments !== void 0) this.pAttachments = opts.pAttachments;
      if (opts.blendConstants !== void 0) this.blendConstants = opts.blendConstants;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null && (value instanceof Object)) {
      let {sType} = value;
      if (sType <= -1) throw new TypeError("Invalid type for 'VkPipelineColorBlendStateCreateInfo.pNext'");
      switch (sType) {
          
        case 0x3B9D0C22:
          break;
        default:
          throw new TypeError("Invalid type for 'VkPipelineColorBlendStateCreateInfo.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkPipelineColorBlendStateCreateInfo.pNext'");
    }
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get logicOpEnable() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  set logicOpEnable(value) {
    this.memoryViewUint32[0x5] = value | 0;
  }
  get logicOp() {
    return this.memoryViewInt32[0x6];
  }
  set logicOp(value) {
    this.memoryViewInt32[0x6] = value;
  }
  get attachmentCount() {
    return this.memoryViewUint32[0x7];
  }
  set attachmentCount(value) {
    this.memoryViewUint32[0x7] = value;
  }
  get pAttachments() {
    return this._pAttachments;
  }
  set pAttachments(value) {
    if (value !== null && value.constructor === Array) {
      this._pAttachments = value;
    } else if (value === null) {
      this._pAttachments = null;
    } else {
      throw new TypeError("Invalid type for 'VkPipelineColorBlendStateCreateInfo.pAttachments': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get blendConstants() {
    return this._blendConstants;
  }
  set blendConstants(value) {
    if (value !== null && value.constructor === Array) {
      this._blendConstants = value;
    } else if (value === null) {
      this._blendConstants = null;
    } else {
      throw new TypeError("Invalid type for 'VkPipelineColorBlendStateCreateInfo.blendConstants': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkPipelineColorBlendStateCreateInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPipelineColorBlendStateCreateInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pAttachments !== null) {
    let array = this._pAttachments;
    if (array.length !== this.attachmentCount) {
      throw new RangeError("Invalid array length, expected length of 'attachmentCount' for 'VkPipelineColorBlendStateCreateInfo.pAttachments'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkPipelineColorBlendAttachmentState) {
        throw new TypeError("Invalid type for 'VkPipelineColorBlendStateCreateInfo.pAttachments[" + ii + "]': Expected 'VkPipelineColorBlendAttachmentState' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pAttachmentsNative = nativeArray;
    this.memoryViewBigInt64[0x4] = nativeArray.address;
  }
  
  
  if (this._blendConstants !== null) {
    let array = this._blendConstants;
    // validate length
    if (array.length !== 4) {
      throw new RangeError("Invalid array length, expected length of '4' for 'VkPipelineColorBlendStateCreateInfo.blendConstants'");
      return false;
    }
    // validate type
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== Number) {
        throw new TypeError("Invalid type for 'VkPipelineColorBlendStateCreateInfo.blendConstants[" + ii + "]': Expected 'Number' but got '" + array[ii].constructor.name + "'");
        return false;
      }
    };
    for (let ii = 0; ii < array.length; ++ii) {
      this.memoryViewFloat32[0xA] = array[ii];
    };
  } else {
    this.memoryViewFloat32[0xA] = 0x0;
  }
  
  return true;
};

VkPipelineColorBlendStateCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x38);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPipelineColorBlendStateCreateInfo"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
  
  
};

VkPipelineColorBlendStateCreateInfo.byteLength = 0x38;

VkPipelineColorBlendStateCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  logicOpEnable: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  logicOp: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  attachmentCount: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  pAttachments: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
  blendConstants: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x10
  }),
});
/** VkPipelineDynamicStateCreateInfo **/
class VkPipelineDynamicStateCreateInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    this._pDynamicStates = null;
    this.sType = 0x1B;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.dynamicStateCount !== void 0) this.dynamicStateCount = opts.dynamicStateCount;
      if (opts.pDynamicStates !== void 0) this.pDynamicStates = opts.pDynamicStates;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPipelineDynamicStateCreateInfo.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get dynamicStateCount() {
    return this.memoryViewUint32[0x5];
  }
  set dynamicStateCount(value) {
    this.memoryViewUint32[0x5] = value;
  }
  get pDynamicStates() {
    return this._pDynamicStates;
  }
  set pDynamicStates(value) {
    if (value !== null && value.constructor === Int32Array) {
      this._pDynamicStates = value;
      this.memoryViewBigInt64[0x3] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pDynamicStates = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkPipelineDynamicStateCreateInfo.pDynamicStates': Expected 'Int32Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkPipelineDynamicStateCreateInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPipelineDynamicStateCreateInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPipelineDynamicStateCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPipelineDynamicStateCreateInfo"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPipelineDynamicStateCreateInfo.byteLength = 0x20;

VkPipelineDynamicStateCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  dynamicStateCount: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  pDynamicStates: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkStencilOpState **/
class VkStencilOpState {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x1C);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    
    
    
    
    
    
    
    if (typeof opts === "object") {
      if (opts.failOp !== void 0) this.failOp = opts.failOp;
      if (opts.passOp !== void 0) this.passOp = opts.passOp;
      if (opts.depthFailOp !== void 0) this.depthFailOp = opts.depthFailOp;
      if (opts.compareOp !== void 0) this.compareOp = opts.compareOp;
      if (opts.compareMask !== void 0) this.compareMask = opts.compareMask;
      if (opts.writeMask !== void 0) this.writeMask = opts.writeMask;
      if (opts.reference !== void 0) this.reference = opts.reference;
      
    }
  }
  get failOp() {
    return this.memoryViewInt32[0x0];
  }
  set failOp(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get passOp() {
    return this.memoryViewInt32[0x1];
  }
  set passOp(value) {
    this.memoryViewInt32[0x1] = value;
  }
  get depthFailOp() {
    return this.memoryViewInt32[0x2];
  }
  set depthFailOp(value) {
    this.memoryViewInt32[0x2] = value;
  }
  get compareOp() {
    return this.memoryViewInt32[0x3];
  }
  set compareOp(value) {
    this.memoryViewInt32[0x3] = value;
  }
  get compareMask() {
    return this.memoryViewUint32[0x4];
  }
  set compareMask(value) {
    this.memoryViewUint32[0x4] = value;
  }
  get writeMask() {
    return this.memoryViewUint32[0x5];
  }
  set writeMask(value) {
    this.memoryViewUint32[0x5] = value;
  }
  get reference() {
    return this.memoryViewUint32[0x6];
  }
  set reference(value) {
    this.memoryViewUint32[0x6] = value;
  }
  
};

VkStencilOpState.prototype.flush = function flush() {
  //console.log(`Flushing: "VkStencilOpState"`);
  
  return true;
};

VkStencilOpState.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x1C);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkStencilOpState"`, this.memoryAddress, memoryAddress);
  
};

VkStencilOpState.byteLength = 0x1C;

VkStencilOpState.memoryLayout = Object.freeze({
  failOp: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  passOp: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  depthFailOp: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
  compareOp: Object.freeze({
    byteOffset: 0xC,
    byteLength: 0x4
  }),
  compareMask: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  writeMask: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  reference: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
});
/** VkPipelineDepthStencilStateCreateInfo **/
class VkPipelineDepthStencilStateCreateInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x68);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
    this.memoryViewFloat32 = new Float32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    
    
    
    
    this._front = new VkStencilOpState({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x28 });
    this._back = new VkStencilOpState({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x44 });
    
    
    this.sType = 0x19;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.depthTestEnable !== void 0) this.depthTestEnable = opts.depthTestEnable;
      if (opts.depthWriteEnable !== void 0) this.depthWriteEnable = opts.depthWriteEnable;
      if (opts.depthCompareOp !== void 0) this.depthCompareOp = opts.depthCompareOp;
      if (opts.depthBoundsTestEnable !== void 0) this.depthBoundsTestEnable = opts.depthBoundsTestEnable;
      if (opts.stencilTestEnable !== void 0) this.stencilTestEnable = opts.stencilTestEnable;
      if (opts.front !== void 0) this.front = opts.front;
      if (opts.back !== void 0) this.back = opts.back;
      if (opts.minDepthBounds !== void 0) this.minDepthBounds = opts.minDepthBounds;
      if (opts.maxDepthBounds !== void 0) this.maxDepthBounds = opts.maxDepthBounds;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPipelineDepthStencilStateCreateInfo.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get depthTestEnable() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  set depthTestEnable(value) {
    this.memoryViewUint32[0x5] = value | 0;
  }
  get depthWriteEnable() {
    return this.memoryViewUint32[0x6] !== 0;
  }
  set depthWriteEnable(value) {
    this.memoryViewUint32[0x6] = value | 0;
  }
  get depthCompareOp() {
    return this.memoryViewInt32[0x7];
  }
  set depthCompareOp(value) {
    this.memoryViewInt32[0x7] = value;
  }
  get depthBoundsTestEnable() {
    return this.memoryViewUint32[0x8] !== 0;
  }
  set depthBoundsTestEnable(value) {
    this.memoryViewUint32[0x8] = value | 0;
  }
  get stencilTestEnable() {
    return this.memoryViewUint32[0x9] !== 0;
  }
  set stencilTestEnable(value) {
    this.memoryViewUint32[0x9] = value | 0;
  }
  get front() {
    return this._front;
  }
  set front(value) {
    if (value !== null && value.constructor === VkStencilOpState) {
      value.flush();
      this._front = value;
      this.memoryViewBigInt64[0x5] = value.memoryAddress;
      
    } else if (value === null) {
      this._front = null;
      this.memoryViewBigInt64[0x5] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkPipelineDepthStencilStateCreateInfo.front': Expected 'VkStencilOpState' but got '" + value.constructor.name + "'");
    }
  }
  get back() {
    return this._back;
  }
  set back(value) {
    if (value !== null && value.constructor === VkStencilOpState) {
      value.flush();
      this._back = value;
      this.memoryViewBigInt64[0x9] = value.memoryAddress;
      
    } else if (value === null) {
      this._back = null;
      this.memoryViewBigInt64[0x9] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkPipelineDepthStencilStateCreateInfo.back': Expected 'VkStencilOpState' but got '" + value.constructor.name + "'");
    }
  }
  get minDepthBounds() {
    return this.memoryViewFloat32[0x18];
  }
  set minDepthBounds(value) {
    this.memoryViewFloat32[0x18] = value;
  }
  get maxDepthBounds() {
    return this.memoryViewFloat32[0x19];
  }
  set maxDepthBounds(value) {
    this.memoryViewFloat32[0x19] = value;
  }
  
};

VkPipelineDepthStencilStateCreateInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPipelineDepthStencilStateCreateInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  
  
  
  return true;
};

VkPipelineDepthStencilStateCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x68);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPipelineDepthStencilStateCreateInfo"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
  
  
};

VkPipelineDepthStencilStateCreateInfo.byteLength = 0x68;

VkPipelineDepthStencilStateCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  depthTestEnable: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  depthWriteEnable: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  depthCompareOp: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  depthBoundsTestEnable: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  stencilTestEnable: Object.freeze({
    byteOffset: 0x24,
    byteLength: 0x4
  }),
  front: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x1C
  }),
  back: Object.freeze({
    byteOffset: 0x44,
    byteLength: 0x1C
  }),
  minDepthBounds: Object.freeze({
    byteOffset: 0x60,
    byteLength: 0x4
  }),
  maxDepthBounds: Object.freeze({
    byteOffset: 0x64,
    byteLength: 0x4
  }),
});
/** VkGraphicsPipelineCreateInfo **/
class VkGraphicsPipelineCreateInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x90);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    this._pStages = null;
    this._pStagesNative = null;
    this._pVertexInputState = null;
    this._pInputAssemblyState = null;
    this._pTessellationState = null;
    this._pViewportState = null;
    this._pRasterizationState = null;
    this._pMultisampleState = null;
    this._pDepthStencilState = null;
    this._pColorBlendState = null;
    this._pDynamicState = null;
    this._layout = null;
    this._renderPass = null;
    
    this._basePipelineHandle = null;
    
    this.sType = 0x1C;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.stageCount !== void 0) this.stageCount = opts.stageCount;
      if (opts.pStages !== void 0) this.pStages = opts.pStages;
      if (opts.pVertexInputState !== void 0) this.pVertexInputState = opts.pVertexInputState;
      if (opts.pInputAssemblyState !== void 0) this.pInputAssemblyState = opts.pInputAssemblyState;
      if (opts.pTessellationState !== void 0) this.pTessellationState = opts.pTessellationState;
      if (opts.pViewportState !== void 0) this.pViewportState = opts.pViewportState;
      if (opts.pRasterizationState !== void 0) this.pRasterizationState = opts.pRasterizationState;
      if (opts.pMultisampleState !== void 0) this.pMultisampleState = opts.pMultisampleState;
      if (opts.pDepthStencilState !== void 0) this.pDepthStencilState = opts.pDepthStencilState;
      if (opts.pColorBlendState !== void 0) this.pColorBlendState = opts.pColorBlendState;
      if (opts.pDynamicState !== void 0) this.pDynamicState = opts.pDynamicState;
      if (opts.layout !== void 0) this.layout = opts.layout;
      if (opts.renderPass !== void 0) this.renderPass = opts.renderPass;
      if (opts.subpass !== void 0) this.subpass = opts.subpass;
      if (opts.basePipelineHandle !== void 0) this.basePipelineHandle = opts.basePipelineHandle;
      if (opts.basePipelineIndex !== void 0) this.basePipelineIndex = opts.basePipelineIndex;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null && (value instanceof Object)) {
      let {sType} = value;
      if (sType <= -1) throw new TypeError("Invalid type for 'VkGraphicsPipelineCreateInfo.pNext'");
      switch (sType) {
          
        case 0x3B9C4CB9:
        case 0x3B9D5271:
          break;
        default:
          throw new TypeError("Invalid type for 'VkGraphicsPipelineCreateInfo.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkGraphicsPipelineCreateInfo.pNext'");
    }
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get stageCount() {
    return this.memoryViewUint32[0x5];
  }
  set stageCount(value) {
    this.memoryViewUint32[0x5] = value;
  }
  get pStages() {
    return this._pStages;
  }
  set pStages(value) {
    if (value !== null && value.constructor === Array) {
      this._pStages = value;
    } else if (value === null) {
      this._pStages = null;
    } else {
      throw new TypeError("Invalid type for 'VkGraphicsPipelineCreateInfo.pStages': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get pVertexInputState() {
    return this._pVertexInputState;
  }
  set pVertexInputState(value) {
    if (value !== null && value.constructor === VkPipelineVertexInputStateCreateInfo) {
      value.flush();
      this._pVertexInputState = value;
      this.memoryViewBigInt64[0x4] = value.memoryAddress;
      
    } else if (value === null) {
      this._pVertexInputState = null;
      this.memoryViewBigInt64[0x4] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkGraphicsPipelineCreateInfo.pVertexInputState': Expected 'VkPipelineVertexInputStateCreateInfo' but got '" + value.constructor.name + "'");
    }
  }
  get pInputAssemblyState() {
    return this._pInputAssemblyState;
  }
  set pInputAssemblyState(value) {
    if (value !== null && value.constructor === VkPipelineInputAssemblyStateCreateInfo) {
      value.flush();
      this._pInputAssemblyState = value;
      this.memoryViewBigInt64[0x5] = value.memoryAddress;
      
    } else if (value === null) {
      this._pInputAssemblyState = null;
      this.memoryViewBigInt64[0x5] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkGraphicsPipelineCreateInfo.pInputAssemblyState': Expected 'VkPipelineInputAssemblyStateCreateInfo' but got '" + value.constructor.name + "'");
    }
  }
  get pTessellationState() {
    return this._pTessellationState;
  }
  set pTessellationState(value) {
    if (value !== null && value.constructor === VkPipelineTessellationStateCreateInfo) {
      value.flush();
      this._pTessellationState = value;
      this.memoryViewBigInt64[0x6] = value.memoryAddress;
      
    } else if (value === null) {
      this._pTessellationState = null;
      this.memoryViewBigInt64[0x6] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkGraphicsPipelineCreateInfo.pTessellationState': Expected 'VkPipelineTessellationStateCreateInfo' but got '" + value.constructor.name + "'");
    }
  }
  get pViewportState() {
    return this._pViewportState;
  }
  set pViewportState(value) {
    if (value !== null && value.constructor === VkPipelineViewportStateCreateInfo) {
      value.flush();
      this._pViewportState = value;
      this.memoryViewBigInt64[0x7] = value.memoryAddress;
      
    } else if (value === null) {
      this._pViewportState = null;
      this.memoryViewBigInt64[0x7] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkGraphicsPipelineCreateInfo.pViewportState': Expected 'VkPipelineViewportStateCreateInfo' but got '" + value.constructor.name + "'");
    }
  }
  get pRasterizationState() {
    return this._pRasterizationState;
  }
  set pRasterizationState(value) {
    if (value !== null && value.constructor === VkPipelineRasterizationStateCreateInfo) {
      value.flush();
      this._pRasterizationState = value;
      this.memoryViewBigInt64[0x8] = value.memoryAddress;
      
    } else if (value === null) {
      this._pRasterizationState = null;
      this.memoryViewBigInt64[0x8] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkGraphicsPipelineCreateInfo.pRasterizationState': Expected 'VkPipelineRasterizationStateCreateInfo' but got '" + value.constructor.name + "'");
    }
  }
  get pMultisampleState() {
    return this._pMultisampleState;
  }
  set pMultisampleState(value) {
    if (value !== null && value.constructor === VkPipelineMultisampleStateCreateInfo) {
      value.flush();
      this._pMultisampleState = value;
      this.memoryViewBigInt64[0x9] = value.memoryAddress;
      
    } else if (value === null) {
      this._pMultisampleState = null;
      this.memoryViewBigInt64[0x9] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkGraphicsPipelineCreateInfo.pMultisampleState': Expected 'VkPipelineMultisampleStateCreateInfo' but got '" + value.constructor.name + "'");
    }
  }
  get pDepthStencilState() {
    return this._pDepthStencilState;
  }
  set pDepthStencilState(value) {
    if (value !== null && value.constructor === VkPipelineDepthStencilStateCreateInfo) {
      value.flush();
      this._pDepthStencilState = value;
      this.memoryViewBigInt64[0xA] = value.memoryAddress;
      
    } else if (value === null) {
      this._pDepthStencilState = null;
      this.memoryViewBigInt64[0xA] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkGraphicsPipelineCreateInfo.pDepthStencilState': Expected 'VkPipelineDepthStencilStateCreateInfo' but got '" + value.constructor.name + "'");
    }
  }
  get pColorBlendState() {
    return this._pColorBlendState;
  }
  set pColorBlendState(value) {
    if (value !== null && value.constructor === VkPipelineColorBlendStateCreateInfo) {
      value.flush();
      this._pColorBlendState = value;
      this.memoryViewBigInt64[0xB] = value.memoryAddress;
      
    } else if (value === null) {
      this._pColorBlendState = null;
      this.memoryViewBigInt64[0xB] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkGraphicsPipelineCreateInfo.pColorBlendState': Expected 'VkPipelineColorBlendStateCreateInfo' but got '" + value.constructor.name + "'");
    }
  }
  get pDynamicState() {
    return this._pDynamicState;
  }
  set pDynamicState(value) {
    if (value !== null && value.constructor === VkPipelineDynamicStateCreateInfo) {
      value.flush();
      this._pDynamicState = value;
      this.memoryViewBigInt64[0xC] = value.memoryAddress;
      
    } else if (value === null) {
      this._pDynamicState = null;
      this.memoryViewBigInt64[0xC] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkGraphicsPipelineCreateInfo.pDynamicState': Expected 'VkPipelineDynamicStateCreateInfo' but got '" + value.constructor.name + "'");
    }
  }
  get layout() {
    return this._layout;
  }
  set layout(value) {
    if (value !== null && value.constructor === VkPipelineLayout) {
      
      this._layout = value;
      
      this.memoryViewBigInt64[0xD] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._layout = null;
      this.memoryViewBigInt64[0xD] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkGraphicsPipelineCreateInfo.layout': Expected 'VkPipelineLayout' but got '" + value.constructor.name + "'");
    }
  }
  get renderPass() {
    return this._renderPass;
  }
  set renderPass(value) {
    if (value !== null && value.constructor === VkRenderPass) {
      
      this._renderPass = value;
      
      this.memoryViewBigInt64[0xE] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._renderPass = null;
      this.memoryViewBigInt64[0xE] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkGraphicsPipelineCreateInfo.renderPass': Expected 'VkRenderPass' but got '" + value.constructor.name + "'");
    }
  }
  get subpass() {
    return this.memoryViewUint32[0x1E];
  }
  set subpass(value) {
    this.memoryViewUint32[0x1E] = value;
  }
  get basePipelineHandle() {
    return this._basePipelineHandle;
  }
  set basePipelineHandle(value) {
    if (value !== null && value.constructor === VkPipeline) {
      
      this._basePipelineHandle = value;
      
      this.memoryViewBigInt64[0x10] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._basePipelineHandle = null;
      this.memoryViewBigInt64[0x10] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkGraphicsPipelineCreateInfo.basePipelineHandle': Expected 'VkPipeline' but got '" + value.constructor.name + "'");
    }
  }
  get basePipelineIndex() {
    return this.memoryViewInt32[0x22];
  }
  set basePipelineIndex(value) {
    this.memoryViewInt32[0x22] = value;
  }
  
};

VkGraphicsPipelineCreateInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkGraphicsPipelineCreateInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pStages !== null) {
    let array = this._pStages;
    if (array.length !== this.stageCount) {
      throw new RangeError("Invalid array length, expected length of 'stageCount' for 'VkGraphicsPipelineCreateInfo.pStages'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkPipelineShaderStageCreateInfo) {
        throw new TypeError("Invalid type for 'VkGraphicsPipelineCreateInfo.pStages[" + ii + "]': Expected 'VkPipelineShaderStageCreateInfo' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pStagesNative = nativeArray;
    this.memoryViewBigInt64[0x3] = nativeArray.address;
  }
  
  return true;
};

VkGraphicsPipelineCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x90);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkGraphicsPipelineCreateInfo"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
};

VkGraphicsPipelineCreateInfo.byteLength = 0x90;

VkGraphicsPipelineCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  stageCount: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  pStages: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  pVertexInputState: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
  pInputAssemblyState: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
  pTessellationState: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x8
  }),
  pViewportState: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x8
  }),
  pRasterizationState: Object.freeze({
    byteOffset: 0x40,
    byteLength: 0x8
  }),
  pMultisampleState: Object.freeze({
    byteOffset: 0x48,
    byteLength: 0x8
  }),
  pDepthStencilState: Object.freeze({
    byteOffset: 0x50,
    byteLength: 0x8
  }),
  pColorBlendState: Object.freeze({
    byteOffset: 0x58,
    byteLength: 0x8
  }),
  pDynamicState: Object.freeze({
    byteOffset: 0x60,
    byteLength: 0x8
  }),
  layout: Object.freeze({
    byteOffset: 0x68,
    byteLength: 0x8
  }),
  renderPass: Object.freeze({
    byteOffset: 0x70,
    byteLength: 0x8
  }),
  subpass: Object.freeze({
    byteOffset: 0x78,
    byteLength: 0x4
  }),
  basePipelineHandle: Object.freeze({
    byteOffset: 0x80,
    byteLength: 0x8
  }),
  basePipelineIndex: Object.freeze({
    byteOffset: 0x88,
    byteLength: 0x4
  }),
});
/** VkPipelineCacheCreateInfo **/
class VkPipelineCacheCreateInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x28);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    this._pInitialData = null;
    this.sType = 0x11;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.initialDataSize !== void 0) this.initialDataSize = opts.initialDataSize;
      if (opts.pInitialData !== void 0) this.pInitialData = opts.pInitialData;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPipelineCacheCreateInfo.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get initialDataSize() {
    return this.memoryViewBigInt64[0x3];
  }
  set initialDataSize(value) {
    this.memoryViewBigInt64[0x3] = value;
  }
  get pInitialData() {
    return this._pInitialData;
  }
  set pInitialData(value) {
    if (value !== null && value.constructor === ArrayBuffer) {
      this._pInitialData = value;
      this.memoryViewBigInt64[0x4] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pInitialData = null;
      this.memoryViewBigInt64[0x4] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkPipelineCacheCreateInfo.pInitialData': Expected 'ArrayBuffer' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkPipelineCacheCreateInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPipelineCacheCreateInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPipelineCacheCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x28);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPipelineCacheCreateInfo"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPipelineCacheCreateInfo.byteLength = 0x28;

VkPipelineCacheCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  initialDataSize: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  pInitialData: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
});
/** VkPushConstantRange **/
class VkPushConstantRange {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0xC);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    
    
    
    if (typeof opts === "object") {
      if (opts.stageFlags !== void 0) this.stageFlags = opts.stageFlags;
      if (opts.offset !== void 0) this.offset = opts.offset;
      if (opts.size !== void 0) this.size = opts.size;
      
    }
  }
  get stageFlags() {
    return this.memoryViewInt32[0x0];
  }
  set stageFlags(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get offset() {
    return this.memoryViewUint32[0x1];
  }
  set offset(value) {
    this.memoryViewUint32[0x1] = value;
  }
  get size() {
    return this.memoryViewUint32[0x2];
  }
  set size(value) {
    this.memoryViewUint32[0x2] = value;
  }
  
};

VkPushConstantRange.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPushConstantRange"`);
  
  return true;
};

VkPushConstantRange.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0xC);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPushConstantRange"`, this.memoryAddress, memoryAddress);
  
};

VkPushConstantRange.byteLength = 0xC;

VkPushConstantRange.memoryLayout = Object.freeze({
  stageFlags: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  offset: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  size: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
});
/** VkPipelineLayoutCreateInfo **/
class VkPipelineLayoutCreateInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x30);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    this._pSetLayouts = null;
    this._pSetLayoutsNative = null;
    
    this._pPushConstantRanges = null;
    this._pPushConstantRangesNative = null;
    this.sType = 0x1E;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.setLayoutCount !== void 0) this.setLayoutCount = opts.setLayoutCount;
      if (opts.pSetLayouts !== void 0) this.pSetLayouts = opts.pSetLayouts;
      if (opts.pushConstantRangeCount !== void 0) this.pushConstantRangeCount = opts.pushConstantRangeCount;
      if (opts.pPushConstantRanges !== void 0) this.pPushConstantRanges = opts.pPushConstantRanges;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPipelineLayoutCreateInfo.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get setLayoutCount() {
    return this.memoryViewUint32[0x5];
  }
  set setLayoutCount(value) {
    this.memoryViewUint32[0x5] = value;
  }
  get pSetLayouts() {
    return this._pSetLayouts;
  }
  set pSetLayouts(value) {
    if (value !== null && value.constructor === Array) {
      this._pSetLayouts = value;
    } else if (value === null) {
      this._pSetLayouts = null;
    } else {
      throw new TypeError("Invalid type for 'VkPipelineLayoutCreateInfo.pSetLayouts': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get pushConstantRangeCount() {
    return this.memoryViewUint32[0x8];
  }
  set pushConstantRangeCount(value) {
    this.memoryViewUint32[0x8] = value;
  }
  get pPushConstantRanges() {
    return this._pPushConstantRanges;
  }
  set pPushConstantRanges(value) {
    if (value !== null && value.constructor === Array) {
      this._pPushConstantRanges = value;
    } else if (value === null) {
      this._pPushConstantRanges = null;
    } else {
      throw new TypeError("Invalid type for 'VkPipelineLayoutCreateInfo.pPushConstantRanges': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkPipelineLayoutCreateInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPipelineLayoutCreateInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pSetLayouts !== null) {
    let array = this._pSetLayouts;
    if (array.length !== this.setLayoutCount) {
      throw new RangeError("Invalid array length, expected length of 'setLayoutCount' for 'VkPipelineLayoutCreateInfo.pSetLayouts'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkDescriptorSetLayout) {
        throw new TypeError("Invalid type for 'VkPipelineLayoutCreateInfo.pSetLayouts[" + ii + "]': Expected 'VkDescriptorSetLayout' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pSetLayoutsNative = nativeArray;
    this.memoryViewBigInt64[0x3] = nativeArray.address;
  }
  
  
  if (this._pPushConstantRanges !== null) {
    let array = this._pPushConstantRanges;
    if (array.length !== this.pushConstantRangeCount) {
      throw new RangeError("Invalid array length, expected length of 'pushConstantRangeCount' for 'VkPipelineLayoutCreateInfo.pPushConstantRanges'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkPushConstantRange) {
        throw new TypeError("Invalid type for 'VkPipelineLayoutCreateInfo.pPushConstantRanges[" + ii + "]': Expected 'VkPushConstantRange' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pPushConstantRangesNative = nativeArray;
    this.memoryViewBigInt64[0x5] = nativeArray.address;
  }
  
  return true;
};

VkPipelineLayoutCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x30);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPipelineLayoutCreateInfo"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
  
  
};

VkPipelineLayoutCreateInfo.byteLength = 0x30;

VkPipelineLayoutCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  setLayoutCount: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  pSetLayouts: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  pushConstantRangeCount: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  pPushConstantRanges: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
});
/** VkSamplerCreateInfo **/
class VkSamplerCreateInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x50);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewFloat32 = new Float32Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    this.sType = 0x1F;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.magFilter !== void 0) this.magFilter = opts.magFilter;
      if (opts.minFilter !== void 0) this.minFilter = opts.minFilter;
      if (opts.mipmapMode !== void 0) this.mipmapMode = opts.mipmapMode;
      if (opts.addressModeU !== void 0) this.addressModeU = opts.addressModeU;
      if (opts.addressModeV !== void 0) this.addressModeV = opts.addressModeV;
      if (opts.addressModeW !== void 0) this.addressModeW = opts.addressModeW;
      if (opts.mipLodBias !== void 0) this.mipLodBias = opts.mipLodBias;
      if (opts.anisotropyEnable !== void 0) this.anisotropyEnable = opts.anisotropyEnable;
      if (opts.maxAnisotropy !== void 0) this.maxAnisotropy = opts.maxAnisotropy;
      if (opts.compareEnable !== void 0) this.compareEnable = opts.compareEnable;
      if (opts.compareOp !== void 0) this.compareOp = opts.compareOp;
      if (opts.minLod !== void 0) this.minLod = opts.minLod;
      if (opts.maxLod !== void 0) this.maxLod = opts.maxLod;
      if (opts.borderColor !== void 0) this.borderColor = opts.borderColor;
      if (opts.unnormalizedCoordinates !== void 0) this.unnormalizedCoordinates = opts.unnormalizedCoordinates;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null && (value instanceof Object)) {
      let {sType} = value;
      if (sType <= -1) throw new TypeError("Invalid type for 'VkSamplerCreateInfo.pNext'");
      switch (sType) {
          
        case 0x3B9D2B61:
        case 0x3B9CC5D1:
          break;
        default:
          throw new TypeError("Invalid type for 'VkSamplerCreateInfo.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkSamplerCreateInfo.pNext'");
    }
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get magFilter() {
    return this.memoryViewInt32[0x5];
  }
  set magFilter(value) {
    this.memoryViewInt32[0x5] = value;
  }
  get minFilter() {
    return this.memoryViewInt32[0x6];
  }
  set minFilter(value) {
    this.memoryViewInt32[0x6] = value;
  }
  get mipmapMode() {
    return this.memoryViewInt32[0x7];
  }
  set mipmapMode(value) {
    this.memoryViewInt32[0x7] = value;
  }
  get addressModeU() {
    return this.memoryViewInt32[0x8];
  }
  set addressModeU(value) {
    this.memoryViewInt32[0x8] = value;
  }
  get addressModeV() {
    return this.memoryViewInt32[0x9];
  }
  set addressModeV(value) {
    this.memoryViewInt32[0x9] = value;
  }
  get addressModeW() {
    return this.memoryViewInt32[0xA];
  }
  set addressModeW(value) {
    this.memoryViewInt32[0xA] = value;
  }
  get mipLodBias() {
    return this.memoryViewFloat32[0xB];
  }
  set mipLodBias(value) {
    this.memoryViewFloat32[0xB] = value;
  }
  get anisotropyEnable() {
    return this.memoryViewUint32[0xC] !== 0;
  }
  set anisotropyEnable(value) {
    this.memoryViewUint32[0xC] = value | 0;
  }
  get maxAnisotropy() {
    return this.memoryViewFloat32[0xD];
  }
  set maxAnisotropy(value) {
    this.memoryViewFloat32[0xD] = value;
  }
  get compareEnable() {
    return this.memoryViewUint32[0xE] !== 0;
  }
  set compareEnable(value) {
    this.memoryViewUint32[0xE] = value | 0;
  }
  get compareOp() {
    return this.memoryViewInt32[0xF];
  }
  set compareOp(value) {
    this.memoryViewInt32[0xF] = value;
  }
  get minLod() {
    return this.memoryViewFloat32[0x10];
  }
  set minLod(value) {
    this.memoryViewFloat32[0x10] = value;
  }
  get maxLod() {
    return this.memoryViewFloat32[0x11];
  }
  set maxLod(value) {
    this.memoryViewFloat32[0x11] = value;
  }
  get borderColor() {
    return this.memoryViewInt32[0x12];
  }
  set borderColor(value) {
    this.memoryViewInt32[0x12] = value;
  }
  get unnormalizedCoordinates() {
    return this.memoryViewUint32[0x13] !== 0;
  }
  set unnormalizedCoordinates(value) {
    this.memoryViewUint32[0x13] = value | 0;
  }
  
};

VkSamplerCreateInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkSamplerCreateInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkSamplerCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x50);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkSamplerCreateInfo"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkSamplerCreateInfo.byteLength = 0x50;

VkSamplerCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  magFilter: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  minFilter: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  mipmapMode: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  addressModeU: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  addressModeV: Object.freeze({
    byteOffset: 0x24,
    byteLength: 0x4
  }),
  addressModeW: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x4
  }),
  mipLodBias: Object.freeze({
    byteOffset: 0x2C,
    byteLength: 0x4
  }),
  anisotropyEnable: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  maxAnisotropy: Object.freeze({
    byteOffset: 0x34,
    byteLength: 0x4
  }),
  compareEnable: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x4
  }),
  compareOp: Object.freeze({
    byteOffset: 0x3C,
    byteLength: 0x4
  }),
  minLod: Object.freeze({
    byteOffset: 0x40,
    byteLength: 0x4
  }),
  maxLod: Object.freeze({
    byteOffset: 0x44,
    byteLength: 0x4
  }),
  borderColor: Object.freeze({
    byteOffset: 0x48,
    byteLength: 0x4
  }),
  unnormalizedCoordinates: Object.freeze({
    byteOffset: 0x4C,
    byteLength: 0x4
  }),
});
/** VkCommandPoolCreateInfo **/
class VkCommandPoolCreateInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    this.sType = 0x27;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.queueFamilyIndex !== void 0) this.queueFamilyIndex = opts.queueFamilyIndex;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkCommandPoolCreateInfo.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get queueFamilyIndex() {
    return this.memoryViewUint32[0x5];
  }
  set queueFamilyIndex(value) {
    this.memoryViewUint32[0x5] = value;
  }
  
};

VkCommandPoolCreateInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkCommandPoolCreateInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkCommandPoolCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkCommandPoolCreateInfo"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkCommandPoolCreateInfo.byteLength = 0x18;

VkCommandPoolCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  queueFamilyIndex: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
});
/** VkCommandBufferAllocateInfo **/
class VkCommandBufferAllocateInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    this._commandPool = null;
    
    
    this.sType = 0x28;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.commandPool !== void 0) this.commandPool = opts.commandPool;
      if (opts.level !== void 0) this.level = opts.level;
      if (opts.commandBufferCount !== void 0) this.commandBufferCount = opts.commandBufferCount;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkCommandBufferAllocateInfo.pNext' isn't allowed to be filled");
  }
  get commandPool() {
    return this._commandPool;
  }
  set commandPool(value) {
    if (value !== null && value.constructor === VkCommandPool) {
      
      this._commandPool = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._commandPool = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkCommandBufferAllocateInfo.commandPool': Expected 'VkCommandPool' but got '" + value.constructor.name + "'");
    }
  }
  get level() {
    return this.memoryViewInt32[0x6];
  }
  set level(value) {
    this.memoryViewInt32[0x6] = value;
  }
  get commandBufferCount() {
    return this.memoryViewUint32[0x7];
  }
  set commandBufferCount(value) {
    this.memoryViewUint32[0x7] = value;
  }
  
};

VkCommandBufferAllocateInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkCommandBufferAllocateInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkCommandBufferAllocateInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkCommandBufferAllocateInfo"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkCommandBufferAllocateInfo.byteLength = 0x20;

VkCommandBufferAllocateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  commandPool: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  level: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  commandBufferCount: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
});
/** VkCommandBufferInheritanceInfo **/
class VkCommandBufferInheritanceInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x38);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    this._renderPass = null;
    
    this._framebuffer = null;
    
    
    
    this.sType = 0x29;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.renderPass !== void 0) this.renderPass = opts.renderPass;
      if (opts.subpass !== void 0) this.subpass = opts.subpass;
      if (opts.framebuffer !== void 0) this.framebuffer = opts.framebuffer;
      if (opts.occlusionQueryEnable !== void 0) this.occlusionQueryEnable = opts.occlusionQueryEnable;
      if (opts.queryFlags !== void 0) this.queryFlags = opts.queryFlags;
      if (opts.pipelineStatistics !== void 0) this.pipelineStatistics = opts.pipelineStatistics;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null && (value instanceof Object)) {
      let {sType} = value;
      if (sType <= -1) throw new TypeError("Invalid type for 'VkCommandBufferInheritanceInfo.pNext'");
      switch (sType) {
          
        case 0x3B9C0668:
          break;
        default:
          throw new TypeError("Invalid type for 'VkCommandBufferInheritanceInfo.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkCommandBufferInheritanceInfo.pNext'");
    }
  }
  get renderPass() {
    return this._renderPass;
  }
  set renderPass(value) {
    if (value !== null && value.constructor === VkRenderPass) {
      
      this._renderPass = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._renderPass = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkCommandBufferInheritanceInfo.renderPass': Expected 'VkRenderPass' but got '" + value.constructor.name + "'");
    }
  }
  get subpass() {
    return this.memoryViewUint32[0x6];
  }
  set subpass(value) {
    this.memoryViewUint32[0x6] = value;
  }
  get framebuffer() {
    return this._framebuffer;
  }
  set framebuffer(value) {
    if (value !== null && value.constructor === VkFramebuffer) {
      
      this._framebuffer = value;
      
      this.memoryViewBigInt64[0x4] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._framebuffer = null;
      this.memoryViewBigInt64[0x4] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkCommandBufferInheritanceInfo.framebuffer': Expected 'VkFramebuffer' but got '" + value.constructor.name + "'");
    }
  }
  get occlusionQueryEnable() {
    return this.memoryViewUint32[0xA] !== 0;
  }
  set occlusionQueryEnable(value) {
    this.memoryViewUint32[0xA] = value | 0;
  }
  get queryFlags() {
    return this.memoryViewInt32[0xB];
  }
  set queryFlags(value) {
    this.memoryViewInt32[0xB] = value;
  }
  get pipelineStatistics() {
    return this.memoryViewInt32[0xC];
  }
  set pipelineStatistics(value) {
    this.memoryViewInt32[0xC] = value;
  }
  
};

VkCommandBufferInheritanceInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkCommandBufferInheritanceInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkCommandBufferInheritanceInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x38);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkCommandBufferInheritanceInfo"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkCommandBufferInheritanceInfo.byteLength = 0x38;

VkCommandBufferInheritanceInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  renderPass: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  subpass: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  framebuffer: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
  occlusionQueryEnable: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x4
  }),
  queryFlags: Object.freeze({
    byteOffset: 0x2C,
    byteLength: 0x4
  }),
  pipelineStatistics: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
});
/** VkCommandBufferBeginInfo **/
class VkCommandBufferBeginInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this._pInheritanceInfo = null;
    this.sType = 0x2A;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.pInheritanceInfo !== void 0) this.pInheritanceInfo = opts.pInheritanceInfo;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null && (value instanceof Object)) {
      let {sType} = value;
      if (sType <= -1) throw new TypeError("Invalid type for 'VkCommandBufferBeginInfo.pNext'");
      switch (sType) {
          
        case 0x3B9BB464:
          break;
        default:
          throw new TypeError("Invalid type for 'VkCommandBufferBeginInfo.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkCommandBufferBeginInfo.pNext'");
    }
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get pInheritanceInfo() {
    return this._pInheritanceInfo;
  }
  set pInheritanceInfo(value) {
    if (value !== null && value.constructor === VkCommandBufferInheritanceInfo) {
      value.flush();
      this._pInheritanceInfo = value;
      this.memoryViewBigInt64[0x3] = value.memoryAddress;
      
    } else if (value === null) {
      this._pInheritanceInfo = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkCommandBufferBeginInfo.pInheritanceInfo': Expected 'VkCommandBufferInheritanceInfo' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkCommandBufferBeginInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkCommandBufferBeginInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkCommandBufferBeginInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkCommandBufferBeginInfo"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkCommandBufferBeginInfo.byteLength = 0x20;

VkCommandBufferBeginInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pInheritanceInfo: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkRenderPassBeginInfo **/
class VkRenderPassBeginInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x40);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    this._renderPass = null;
    this._framebuffer = null;
    this._renderArea = new VkRect2D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x20 });
    
    this._pClearValues = null;
    this._pClearValuesNative = null;
    this.sType = 0x2B;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.renderPass !== void 0) this.renderPass = opts.renderPass;
      if (opts.framebuffer !== void 0) this.framebuffer = opts.framebuffer;
      if (opts.renderArea !== void 0) this.renderArea = opts.renderArea;
      if (opts.clearValueCount !== void 0) this.clearValueCount = opts.clearValueCount;
      if (opts.pClearValues !== void 0) this.pClearValues = opts.pClearValues;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null && (value instanceof Object)) {
      let {sType} = value;
      if (sType <= -1) throw new TypeError("Invalid type for 'VkRenderPassBeginInfo.pNext'");
      switch (sType) {
          
        case 0x3B9BB463:
        case 0x3B9CF899:
          break;
        default:
          throw new TypeError("Invalid type for 'VkRenderPassBeginInfo.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkRenderPassBeginInfo.pNext'");
    }
  }
  get renderPass() {
    return this._renderPass;
  }
  set renderPass(value) {
    if (value !== null && value.constructor === VkRenderPass) {
      
      this._renderPass = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._renderPass = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkRenderPassBeginInfo.renderPass': Expected 'VkRenderPass' but got '" + value.constructor.name + "'");
    }
  }
  get framebuffer() {
    return this._framebuffer;
  }
  set framebuffer(value) {
    if (value !== null && value.constructor === VkFramebuffer) {
      
      this._framebuffer = value;
      
      this.memoryViewBigInt64[0x3] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._framebuffer = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkRenderPassBeginInfo.framebuffer': Expected 'VkFramebuffer' but got '" + value.constructor.name + "'");
    }
  }
  get renderArea() {
    return this._renderArea;
  }
  set renderArea(value) {
    if (value !== null && value.constructor === VkRect2D) {
      value.flush();
      this._renderArea = value;
      this.memoryViewBigInt64[0x4] = value.memoryAddress;
      
    } else if (value === null) {
      this._renderArea = null;
      this.memoryViewBigInt64[0x4] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkRenderPassBeginInfo.renderArea': Expected 'VkRect2D' but got '" + value.constructor.name + "'");
    }
  }
  get clearValueCount() {
    return this.memoryViewUint32[0xC];
  }
  set clearValueCount(value) {
    this.memoryViewUint32[0xC] = value;
  }
  get pClearValues() {
    return this._pClearValues;
  }
  set pClearValues(value) {
    if (value !== null && value.constructor === Array) {
      this._pClearValues = value;
    } else if (value === null) {
      this._pClearValues = null;
    } else {
      throw new TypeError("Invalid type for 'VkRenderPassBeginInfo.pClearValues': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkRenderPassBeginInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkRenderPassBeginInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  
  
  if (this._pClearValues !== null) {
    let array = this._pClearValues;
    if (array.length !== this.clearValueCount) {
      throw new RangeError("Invalid array length, expected length of 'clearValueCount' for 'VkRenderPassBeginInfo.pClearValues'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkClearValue) {
        throw new TypeError("Invalid type for 'VkRenderPassBeginInfo.pClearValues[" + ii + "]': Expected 'VkClearValue' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pClearValuesNative = nativeArray;
    this.memoryViewBigInt64[0x7] = nativeArray.address;
  }
  
  return true;
};

VkRenderPassBeginInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x40);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkRenderPassBeginInfo"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
  
  
};

VkRenderPassBeginInfo.byteLength = 0x40;

VkRenderPassBeginInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  renderPass: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  framebuffer: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  renderArea: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x10
  }),
  clearValueCount: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  pClearValues: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x8
  }),
});
/** VkClearDepthStencilValue **/
class VkClearDepthStencilValue {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewFloat32 = new Float32Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    
    
    if (typeof opts === "object") {
      if (opts.depth !== void 0) this.depth = opts.depth;
      if (opts.stencil !== void 0) this.stencil = opts.stencil;
      
    }
  }
  get depth() {
    return this.memoryViewFloat32[0x0];
  }
  set depth(value) {
    this.memoryViewFloat32[0x0] = value;
  }
  get stencil() {
    return this.memoryViewUint32[0x1];
  }
  set stencil(value) {
    this.memoryViewUint32[0x1] = value;
  }
  
};

VkClearDepthStencilValue.prototype.flush = function flush() {
  //console.log(`Flushing: "VkClearDepthStencilValue"`);
  
  return true;
};

VkClearDepthStencilValue.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x8);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkClearDepthStencilValue"`, this.memoryAddress, memoryAddress);
  
};

VkClearDepthStencilValue.byteLength = 0x8;

VkClearDepthStencilValue.memoryLayout = Object.freeze({
  depth: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  stencil: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
});
/** VkClearAttachment **/
class VkClearAttachment {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    
    this._clearValue = new VkClearValue({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x8 });
    
    if (typeof opts === "object") {
      if (opts.aspectMask !== void 0) this.aspectMask = opts.aspectMask;
      if (opts.colorAttachment !== void 0) this.colorAttachment = opts.colorAttachment;
      if (opts.clearValue !== void 0) this.clearValue = opts.clearValue;
      
    }
  }
  get aspectMask() {
    return this.memoryViewInt32[0x0];
  }
  set aspectMask(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get colorAttachment() {
    return this.memoryViewUint32[0x1];
  }
  set colorAttachment(value) {
    this.memoryViewUint32[0x1] = value;
  }
  get clearValue() {
    return this._clearValue;
  }
  set clearValue(value) {
    if (value !== null && value.constructor === VkClearValue) {
      value.flush();
      this._clearValue = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
      
    } else if (value === null) {
      this._clearValue = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkClearAttachment.clearValue': Expected 'VkClearValue' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkClearAttachment.prototype.flush = function flush() {
  //console.log(`Flushing: "VkClearAttachment"`);
  
  
  
  return true;
};

VkClearAttachment.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkClearAttachment"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkClearAttachment.byteLength = 0x18;

VkClearAttachment.memoryLayout = Object.freeze({
  aspectMask: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  colorAttachment: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  clearValue: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x10
  }),
});
/** VkAttachmentDescription **/
class VkAttachmentDescription {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x24);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    
    
    
    
    
    
    
    
    
    if (typeof opts === "object") {
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.format !== void 0) this.format = opts.format;
      if (opts.samples !== void 0) this.samples = opts.samples;
      if (opts.loadOp !== void 0) this.loadOp = opts.loadOp;
      if (opts.storeOp !== void 0) this.storeOp = opts.storeOp;
      if (opts.stencilLoadOp !== void 0) this.stencilLoadOp = opts.stencilLoadOp;
      if (opts.stencilStoreOp !== void 0) this.stencilStoreOp = opts.stencilStoreOp;
      if (opts.initialLayout !== void 0) this.initialLayout = opts.initialLayout;
      if (opts.finalLayout !== void 0) this.finalLayout = opts.finalLayout;
      
    }
  }
  get flags() {
    return this.memoryViewInt32[0x0];
  }
  set flags(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get format() {
    return this.memoryViewInt32[0x1];
  }
  set format(value) {
    this.memoryViewInt32[0x1] = value;
  }
  get samples() {
    return this.memoryViewInt32[0x2];
  }
  set samples(value) {
    this.memoryViewInt32[0x2] = value;
  }
  get loadOp() {
    return this.memoryViewInt32[0x3];
  }
  set loadOp(value) {
    this.memoryViewInt32[0x3] = value;
  }
  get storeOp() {
    return this.memoryViewInt32[0x4];
  }
  set storeOp(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get stencilLoadOp() {
    return this.memoryViewInt32[0x5];
  }
  set stencilLoadOp(value) {
    this.memoryViewInt32[0x5] = value;
  }
  get stencilStoreOp() {
    return this.memoryViewInt32[0x6];
  }
  set stencilStoreOp(value) {
    this.memoryViewInt32[0x6] = value;
  }
  get initialLayout() {
    return this.memoryViewInt32[0x7];
  }
  set initialLayout(value) {
    this.memoryViewInt32[0x7] = value;
  }
  get finalLayout() {
    return this.memoryViewInt32[0x8];
  }
  set finalLayout(value) {
    this.memoryViewInt32[0x8] = value;
  }
  
};

VkAttachmentDescription.prototype.flush = function flush() {
  //console.log(`Flushing: "VkAttachmentDescription"`);
  
  return true;
};

VkAttachmentDescription.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x24);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkAttachmentDescription"`, this.memoryAddress, memoryAddress);
  
};

VkAttachmentDescription.byteLength = 0x24;

VkAttachmentDescription.memoryLayout = Object.freeze({
  flags: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  format: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  samples: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
  loadOp: Object.freeze({
    byteOffset: 0xC,
    byteLength: 0x4
  }),
  storeOp: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  stencilLoadOp: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  stencilStoreOp: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  initialLayout: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  finalLayout: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
});
/** VkAttachmentReference **/
class VkAttachmentReference {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    
    
    if (typeof opts === "object") {
      if (opts.attachment !== void 0) this.attachment = opts.attachment;
      if (opts.layout !== void 0) this.layout = opts.layout;
      
    }
  }
  get attachment() {
    return this.memoryViewUint32[0x0];
  }
  set attachment(value) {
    this.memoryViewUint32[0x0] = value;
  }
  get layout() {
    return this.memoryViewInt32[0x1];
  }
  set layout(value) {
    this.memoryViewInt32[0x1] = value;
  }
  
};

VkAttachmentReference.prototype.flush = function flush() {
  //console.log(`Flushing: "VkAttachmentReference"`);
  
  return true;
};

VkAttachmentReference.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x8);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkAttachmentReference"`, this.memoryAddress, memoryAddress);
  
};

VkAttachmentReference.byteLength = 0x8;

VkAttachmentReference.memoryLayout = Object.freeze({
  attachment: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  layout: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
});
/** VkSubpassDescription **/
class VkSubpassDescription {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x48);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    
    
    this._pInputAttachments = null;
    this._pInputAttachmentsNative = null;
    
    this._pColorAttachments = null;
    this._pColorAttachmentsNative = null;
    this._pResolveAttachments = null;
    this._pResolveAttachmentsNative = null;
    this._pDepthStencilAttachment = null;
    
    this._pPreserveAttachments = null;
    
    if (typeof opts === "object") {
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.pipelineBindPoint !== void 0) this.pipelineBindPoint = opts.pipelineBindPoint;
      if (opts.inputAttachmentCount !== void 0) this.inputAttachmentCount = opts.inputAttachmentCount;
      if (opts.pInputAttachments !== void 0) this.pInputAttachments = opts.pInputAttachments;
      if (opts.colorAttachmentCount !== void 0) this.colorAttachmentCount = opts.colorAttachmentCount;
      if (opts.pColorAttachments !== void 0) this.pColorAttachments = opts.pColorAttachments;
      if (opts.pResolveAttachments !== void 0) this.pResolveAttachments = opts.pResolveAttachments;
      if (opts.pDepthStencilAttachment !== void 0) this.pDepthStencilAttachment = opts.pDepthStencilAttachment;
      if (opts.preserveAttachmentCount !== void 0) this.preserveAttachmentCount = opts.preserveAttachmentCount;
      if (opts.pPreserveAttachments !== void 0) this.pPreserveAttachments = opts.pPreserveAttachments;
      
    }
  }
  get flags() {
    return this.memoryViewInt32[0x0];
  }
  set flags(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pipelineBindPoint() {
    return this.memoryViewInt32[0x1];
  }
  set pipelineBindPoint(value) {
    this.memoryViewInt32[0x1] = value;
  }
  get inputAttachmentCount() {
    return this.memoryViewUint32[0x2];
  }
  set inputAttachmentCount(value) {
    this.memoryViewUint32[0x2] = value;
  }
  get pInputAttachments() {
    return this._pInputAttachments;
  }
  set pInputAttachments(value) {
    if (value !== null && value.constructor === Array) {
      this._pInputAttachments = value;
    } else if (value === null) {
      this._pInputAttachments = null;
    } else {
      throw new TypeError("Invalid type for 'VkSubpassDescription.pInputAttachments': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get colorAttachmentCount() {
    return this.memoryViewUint32[0x6];
  }
  set colorAttachmentCount(value) {
    this.memoryViewUint32[0x6] = value;
  }
  get pColorAttachments() {
    return this._pColorAttachments;
  }
  set pColorAttachments(value) {
    if (value !== null && value.constructor === Array) {
      this._pColorAttachments = value;
    } else if (value === null) {
      this._pColorAttachments = null;
    } else {
      throw new TypeError("Invalid type for 'VkSubpassDescription.pColorAttachments': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get pResolveAttachments() {
    return this._pResolveAttachments;
  }
  set pResolveAttachments(value) {
    if (value !== null && value.constructor === Array) {
      this._pResolveAttachments = value;
    } else if (value === null) {
      this._pResolveAttachments = null;
    } else {
      throw new TypeError("Invalid type for 'VkSubpassDescription.pResolveAttachments': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get pDepthStencilAttachment() {
    return this._pDepthStencilAttachment;
  }
  set pDepthStencilAttachment(value) {
    if (value !== null && value.constructor === VkAttachmentReference) {
      value.flush();
      this._pDepthStencilAttachment = value;
      this.memoryViewBigInt64[0x6] = value.memoryAddress;
      
    } else if (value === null) {
      this._pDepthStencilAttachment = null;
      this.memoryViewBigInt64[0x6] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkSubpassDescription.pDepthStencilAttachment': Expected 'VkAttachmentReference' but got '" + value.constructor.name + "'");
    }
  }
  get preserveAttachmentCount() {
    return this.memoryViewUint32[0xE];
  }
  set preserveAttachmentCount(value) {
    this.memoryViewUint32[0xE] = value;
  }
  get pPreserveAttachments() {
    return this._pPreserveAttachments;
  }
  set pPreserveAttachments(value) {
    if (value !== null && value.constructor === Uint32Array) {
      this._pPreserveAttachments = value;
      this.memoryViewBigInt64[0x8] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pPreserveAttachments = null;
      this.memoryViewBigInt64[0x8] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkSubpassDescription.pPreserveAttachments': Expected 'Uint32Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkSubpassDescription.prototype.flush = function flush() {
  //console.log(`Flushing: "VkSubpassDescription"`);
  
  
  if (this._pInputAttachments !== null) {
    let array = this._pInputAttachments;
    if (array.length !== this.inputAttachmentCount) {
      throw new RangeError("Invalid array length, expected length of 'inputAttachmentCount' for 'VkSubpassDescription.pInputAttachments'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkAttachmentReference) {
        throw new TypeError("Invalid type for 'VkSubpassDescription.pInputAttachments[" + ii + "]': Expected 'VkAttachmentReference' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pInputAttachmentsNative = nativeArray;
    this.memoryViewBigInt64[0x2] = nativeArray.address;
  }
  
  
  if (this._pColorAttachments !== null) {
    let array = this._pColorAttachments;
    if (array.length !== this.colorAttachmentCount) {
      throw new RangeError("Invalid array length, expected length of 'colorAttachmentCount' for 'VkSubpassDescription.pColorAttachments'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkAttachmentReference) {
        throw new TypeError("Invalid type for 'VkSubpassDescription.pColorAttachments[" + ii + "]': Expected 'VkAttachmentReference' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pColorAttachmentsNative = nativeArray;
    this.memoryViewBigInt64[0x4] = nativeArray.address;
  }
  
  
  if (this._pResolveAttachments !== null) {
    let array = this._pResolveAttachments;
    if (array.length !== this.colorAttachmentCount) {
      throw new RangeError("Invalid array length, expected length of 'colorAttachmentCount' for 'VkSubpassDescription.pResolveAttachments'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkAttachmentReference) {
        throw new TypeError("Invalid type for 'VkSubpassDescription.pResolveAttachments[" + ii + "]': Expected 'VkAttachmentReference' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pResolveAttachmentsNative = nativeArray;
    this.memoryViewBigInt64[0x5] = nativeArray.address;
  }
  
  return true;
};

VkSubpassDescription.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x48);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkSubpassDescription"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
  
  
};

VkSubpassDescription.byteLength = 0x48;

VkSubpassDescription.memoryLayout = Object.freeze({
  flags: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pipelineBindPoint: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  inputAttachmentCount: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
  pInputAttachments: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  colorAttachmentCount: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  pColorAttachments: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
  pResolveAttachments: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
  pDepthStencilAttachment: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x8
  }),
  preserveAttachmentCount: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x4
  }),
  pPreserveAttachments: Object.freeze({
    byteOffset: 0x40,
    byteLength: 0x8
  }),
});
/** VkSubpassDependency **/
class VkSubpassDependency {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x1C);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    
    
    
    
    
    
    
    if (typeof opts === "object") {
      if (opts.srcSubpass !== void 0) this.srcSubpass = opts.srcSubpass;
      if (opts.dstSubpass !== void 0) this.dstSubpass = opts.dstSubpass;
      if (opts.srcStageMask !== void 0) this.srcStageMask = opts.srcStageMask;
      if (opts.dstStageMask !== void 0) this.dstStageMask = opts.dstStageMask;
      if (opts.srcAccessMask !== void 0) this.srcAccessMask = opts.srcAccessMask;
      if (opts.dstAccessMask !== void 0) this.dstAccessMask = opts.dstAccessMask;
      if (opts.dependencyFlags !== void 0) this.dependencyFlags = opts.dependencyFlags;
      
    }
  }
  get srcSubpass() {
    return this.memoryViewUint32[0x0];
  }
  set srcSubpass(value) {
    this.memoryViewUint32[0x0] = value;
  }
  get dstSubpass() {
    return this.memoryViewUint32[0x1];
  }
  set dstSubpass(value) {
    this.memoryViewUint32[0x1] = value;
  }
  get srcStageMask() {
    return this.memoryViewInt32[0x2];
  }
  set srcStageMask(value) {
    this.memoryViewInt32[0x2] = value;
  }
  get dstStageMask() {
    return this.memoryViewInt32[0x3];
  }
  set dstStageMask(value) {
    this.memoryViewInt32[0x3] = value;
  }
  get srcAccessMask() {
    return this.memoryViewInt32[0x4];
  }
  set srcAccessMask(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get dstAccessMask() {
    return this.memoryViewInt32[0x5];
  }
  set dstAccessMask(value) {
    this.memoryViewInt32[0x5] = value;
  }
  get dependencyFlags() {
    return this.memoryViewInt32[0x6];
  }
  set dependencyFlags(value) {
    this.memoryViewInt32[0x6] = value;
  }
  
};

VkSubpassDependency.prototype.flush = function flush() {
  //console.log(`Flushing: "VkSubpassDependency"`);
  
  return true;
};

VkSubpassDependency.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x1C);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkSubpassDependency"`, this.memoryAddress, memoryAddress);
  
};

VkSubpassDependency.byteLength = 0x1C;

VkSubpassDependency.memoryLayout = Object.freeze({
  srcSubpass: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  dstSubpass: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  srcStageMask: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
  dstStageMask: Object.freeze({
    byteOffset: 0xC,
    byteLength: 0x4
  }),
  srcAccessMask: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  dstAccessMask: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  dependencyFlags: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
});
/** VkRenderPassCreateInfo **/
class VkRenderPassCreateInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x40);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    this._pAttachments = null;
    this._pAttachmentsNative = null;
    
    this._pSubpasses = null;
    this._pSubpassesNative = null;
    
    this._pDependencies = null;
    this._pDependenciesNative = null;
    this.sType = 0x26;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.attachmentCount !== void 0) this.attachmentCount = opts.attachmentCount;
      if (opts.pAttachments !== void 0) this.pAttachments = opts.pAttachments;
      if (opts.subpassCount !== void 0) this.subpassCount = opts.subpassCount;
      if (opts.pSubpasses !== void 0) this.pSubpasses = opts.pSubpasses;
      if (opts.dependencyCount !== void 0) this.dependencyCount = opts.dependencyCount;
      if (opts.pDependencies !== void 0) this.pDependencies = opts.pDependencies;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null && (value instanceof Object)) {
      let {sType} = value;
      if (sType <= -1) throw new TypeError("Invalid type for 'VkRenderPassCreateInfo.pNext'");
      switch (sType) {
          
        case 0x3B9B9908:
        case 0x3B9C9309:
        case 0x3B9E1D92:
          break;
        default:
          throw new TypeError("Invalid type for 'VkRenderPassCreateInfo.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkRenderPassCreateInfo.pNext'");
    }
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get attachmentCount() {
    return this.memoryViewUint32[0x5];
  }
  set attachmentCount(value) {
    this.memoryViewUint32[0x5] = value;
  }
  get pAttachments() {
    return this._pAttachments;
  }
  set pAttachments(value) {
    if (value !== null && value.constructor === Array) {
      this._pAttachments = value;
    } else if (value === null) {
      this._pAttachments = null;
    } else {
      throw new TypeError("Invalid type for 'VkRenderPassCreateInfo.pAttachments': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get subpassCount() {
    return this.memoryViewUint32[0x8];
  }
  set subpassCount(value) {
    this.memoryViewUint32[0x8] = value;
  }
  get pSubpasses() {
    return this._pSubpasses;
  }
  set pSubpasses(value) {
    if (value !== null && value.constructor === Array) {
      this._pSubpasses = value;
    } else if (value === null) {
      this._pSubpasses = null;
    } else {
      throw new TypeError("Invalid type for 'VkRenderPassCreateInfo.pSubpasses': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get dependencyCount() {
    return this.memoryViewUint32[0xC];
  }
  set dependencyCount(value) {
    this.memoryViewUint32[0xC] = value;
  }
  get pDependencies() {
    return this._pDependencies;
  }
  set pDependencies(value) {
    if (value !== null && value.constructor === Array) {
      this._pDependencies = value;
    } else if (value === null) {
      this._pDependencies = null;
    } else {
      throw new TypeError("Invalid type for 'VkRenderPassCreateInfo.pDependencies': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkRenderPassCreateInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkRenderPassCreateInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pAttachments !== null) {
    let array = this._pAttachments;
    if (array.length !== this.attachmentCount) {
      throw new RangeError("Invalid array length, expected length of 'attachmentCount' for 'VkRenderPassCreateInfo.pAttachments'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkAttachmentDescription) {
        throw new TypeError("Invalid type for 'VkRenderPassCreateInfo.pAttachments[" + ii + "]': Expected 'VkAttachmentDescription' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pAttachmentsNative = nativeArray;
    this.memoryViewBigInt64[0x3] = nativeArray.address;
  }
  
  
  if (this._pSubpasses !== null) {
    let array = this._pSubpasses;
    if (array.length !== this.subpassCount) {
      throw new RangeError("Invalid array length, expected length of 'subpassCount' for 'VkRenderPassCreateInfo.pSubpasses'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkSubpassDescription) {
        throw new TypeError("Invalid type for 'VkRenderPassCreateInfo.pSubpasses[" + ii + "]': Expected 'VkSubpassDescription' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pSubpassesNative = nativeArray;
    this.memoryViewBigInt64[0x5] = nativeArray.address;
  }
  
  
  if (this._pDependencies !== null) {
    let array = this._pDependencies;
    if (array.length !== this.dependencyCount) {
      throw new RangeError("Invalid array length, expected length of 'dependencyCount' for 'VkRenderPassCreateInfo.pDependencies'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkSubpassDependency) {
        throw new TypeError("Invalid type for 'VkRenderPassCreateInfo.pDependencies[" + ii + "]': Expected 'VkSubpassDependency' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pDependenciesNative = nativeArray;
    this.memoryViewBigInt64[0x7] = nativeArray.address;
  }
  
  return true;
};

VkRenderPassCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x40);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkRenderPassCreateInfo"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
  
  
  
  
};

VkRenderPassCreateInfo.byteLength = 0x40;

VkRenderPassCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  attachmentCount: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  pAttachments: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  subpassCount: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  pSubpasses: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
  dependencyCount: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  pDependencies: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x8
  }),
});
/** VkEventCreateInfo **/
class VkEventCreateInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = 0xA;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkEventCreateInfo.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkEventCreateInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkEventCreateInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkEventCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkEventCreateInfo"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkEventCreateInfo.byteLength = 0x18;

VkEventCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkFenceCreateInfo **/
class VkFenceCreateInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = 0x8;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null && (value instanceof Object)) {
      let {sType} = value;
      if (sType <= -1) throw new TypeError("Invalid type for 'VkFenceCreateInfo.pNext'");
      switch (sType) {
          
        case 0x3B9C8368:
        case 0x3B9C8751:
          break;
        default:
          throw new TypeError("Invalid type for 'VkFenceCreateInfo.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkFenceCreateInfo.pNext'");
    }
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkFenceCreateInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkFenceCreateInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkFenceCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkFenceCreateInfo"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkFenceCreateInfo.byteLength = 0x18;

VkFenceCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceFeatures **/
class VkPhysicalDeviceFeatures {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0xDC);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    if (typeof opts === "object") {
      if (opts.robustBufferAccess !== void 0) this.robustBufferAccess = opts.robustBufferAccess;
      if (opts.fullDrawIndexUint32 !== void 0) this.fullDrawIndexUint32 = opts.fullDrawIndexUint32;
      if (opts.imageCubeArray !== void 0) this.imageCubeArray = opts.imageCubeArray;
      if (opts.independentBlend !== void 0) this.independentBlend = opts.independentBlend;
      if (opts.geometryShader !== void 0) this.geometryShader = opts.geometryShader;
      if (opts.tessellationShader !== void 0) this.tessellationShader = opts.tessellationShader;
      if (opts.sampleRateShading !== void 0) this.sampleRateShading = opts.sampleRateShading;
      if (opts.dualSrcBlend !== void 0) this.dualSrcBlend = opts.dualSrcBlend;
      if (opts.logicOp !== void 0) this.logicOp = opts.logicOp;
      if (opts.multiDrawIndirect !== void 0) this.multiDrawIndirect = opts.multiDrawIndirect;
      if (opts.drawIndirectFirstInstance !== void 0) this.drawIndirectFirstInstance = opts.drawIndirectFirstInstance;
      if (opts.depthClamp !== void 0) this.depthClamp = opts.depthClamp;
      if (opts.depthBiasClamp !== void 0) this.depthBiasClamp = opts.depthBiasClamp;
      if (opts.fillModeNonSolid !== void 0) this.fillModeNonSolid = opts.fillModeNonSolid;
      if (opts.depthBounds !== void 0) this.depthBounds = opts.depthBounds;
      if (opts.wideLines !== void 0) this.wideLines = opts.wideLines;
      if (opts.largePoints !== void 0) this.largePoints = opts.largePoints;
      if (opts.alphaToOne !== void 0) this.alphaToOne = opts.alphaToOne;
      if (opts.multiViewport !== void 0) this.multiViewport = opts.multiViewport;
      if (opts.samplerAnisotropy !== void 0) this.samplerAnisotropy = opts.samplerAnisotropy;
      if (opts.textureCompressionETC2 !== void 0) this.textureCompressionETC2 = opts.textureCompressionETC2;
      if (opts.textureCompressionASTC_LDR !== void 0) this.textureCompressionASTC_LDR = opts.textureCompressionASTC_LDR;
      if (opts.textureCompressionBC !== void 0) this.textureCompressionBC = opts.textureCompressionBC;
      if (opts.occlusionQueryPrecise !== void 0) this.occlusionQueryPrecise = opts.occlusionQueryPrecise;
      if (opts.pipelineStatisticsQuery !== void 0) this.pipelineStatisticsQuery = opts.pipelineStatisticsQuery;
      if (opts.vertexPipelineStoresAndAtomics !== void 0) this.vertexPipelineStoresAndAtomics = opts.vertexPipelineStoresAndAtomics;
      if (opts.fragmentStoresAndAtomics !== void 0) this.fragmentStoresAndAtomics = opts.fragmentStoresAndAtomics;
      if (opts.shaderTessellationAndGeometryPointSize !== void 0) this.shaderTessellationAndGeometryPointSize = opts.shaderTessellationAndGeometryPointSize;
      if (opts.shaderImageGatherExtended !== void 0) this.shaderImageGatherExtended = opts.shaderImageGatherExtended;
      if (opts.shaderStorageImageExtendedFormats !== void 0) this.shaderStorageImageExtendedFormats = opts.shaderStorageImageExtendedFormats;
      if (opts.shaderStorageImageMultisample !== void 0) this.shaderStorageImageMultisample = opts.shaderStorageImageMultisample;
      if (opts.shaderStorageImageReadWithoutFormat !== void 0) this.shaderStorageImageReadWithoutFormat = opts.shaderStorageImageReadWithoutFormat;
      if (opts.shaderStorageImageWriteWithoutFormat !== void 0) this.shaderStorageImageWriteWithoutFormat = opts.shaderStorageImageWriteWithoutFormat;
      if (opts.shaderUniformBufferArrayDynamicIndexing !== void 0) this.shaderUniformBufferArrayDynamicIndexing = opts.shaderUniformBufferArrayDynamicIndexing;
      if (opts.shaderSampledImageArrayDynamicIndexing !== void 0) this.shaderSampledImageArrayDynamicIndexing = opts.shaderSampledImageArrayDynamicIndexing;
      if (opts.shaderStorageBufferArrayDynamicIndexing !== void 0) this.shaderStorageBufferArrayDynamicIndexing = opts.shaderStorageBufferArrayDynamicIndexing;
      if (opts.shaderStorageImageArrayDynamicIndexing !== void 0) this.shaderStorageImageArrayDynamicIndexing = opts.shaderStorageImageArrayDynamicIndexing;
      if (opts.shaderClipDistance !== void 0) this.shaderClipDistance = opts.shaderClipDistance;
      if (opts.shaderCullDistance !== void 0) this.shaderCullDistance = opts.shaderCullDistance;
      if (opts.shaderFloat64 !== void 0) this.shaderFloat64 = opts.shaderFloat64;
      if (opts.shaderInt64 !== void 0) this.shaderInt64 = opts.shaderInt64;
      if (opts.shaderInt16 !== void 0) this.shaderInt16 = opts.shaderInt16;
      if (opts.shaderResourceResidency !== void 0) this.shaderResourceResidency = opts.shaderResourceResidency;
      if (opts.shaderResourceMinLod !== void 0) this.shaderResourceMinLod = opts.shaderResourceMinLod;
      if (opts.sparseBinding !== void 0) this.sparseBinding = opts.sparseBinding;
      if (opts.sparseResidencyBuffer !== void 0) this.sparseResidencyBuffer = opts.sparseResidencyBuffer;
      if (opts.sparseResidencyImage2D !== void 0) this.sparseResidencyImage2D = opts.sparseResidencyImage2D;
      if (opts.sparseResidencyImage3D !== void 0) this.sparseResidencyImage3D = opts.sparseResidencyImage3D;
      if (opts.sparseResidency2Samples !== void 0) this.sparseResidency2Samples = opts.sparseResidency2Samples;
      if (opts.sparseResidency4Samples !== void 0) this.sparseResidency4Samples = opts.sparseResidency4Samples;
      if (opts.sparseResidency8Samples !== void 0) this.sparseResidency8Samples = opts.sparseResidency8Samples;
      if (opts.sparseResidency16Samples !== void 0) this.sparseResidency16Samples = opts.sparseResidency16Samples;
      if (opts.sparseResidencyAliased !== void 0) this.sparseResidencyAliased = opts.sparseResidencyAliased;
      if (opts.variableMultisampleRate !== void 0) this.variableMultisampleRate = opts.variableMultisampleRate;
      if (opts.inheritedQueries !== void 0) this.inheritedQueries = opts.inheritedQueries;
      
    }
  }
  get robustBufferAccess() {
    return this.memoryViewUint32[0x0] !== 0;
  }
  set robustBufferAccess(value) {
    this.memoryViewUint32[0x0] = value | 0;
  }
  get fullDrawIndexUint32() {
    return this.memoryViewUint32[0x1] !== 0;
  }
  set fullDrawIndexUint32(value) {
    this.memoryViewUint32[0x1] = value | 0;
  }
  get imageCubeArray() {
    return this.memoryViewUint32[0x2] !== 0;
  }
  set imageCubeArray(value) {
    this.memoryViewUint32[0x2] = value | 0;
  }
  get independentBlend() {
    return this.memoryViewUint32[0x3] !== 0;
  }
  set independentBlend(value) {
    this.memoryViewUint32[0x3] = value | 0;
  }
  get geometryShader() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set geometryShader(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  get tessellationShader() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  set tessellationShader(value) {
    this.memoryViewUint32[0x5] = value | 0;
  }
  get sampleRateShading() {
    return this.memoryViewUint32[0x6] !== 0;
  }
  set sampleRateShading(value) {
    this.memoryViewUint32[0x6] = value | 0;
  }
  get dualSrcBlend() {
    return this.memoryViewUint32[0x7] !== 0;
  }
  set dualSrcBlend(value) {
    this.memoryViewUint32[0x7] = value | 0;
  }
  get logicOp() {
    return this.memoryViewUint32[0x8] !== 0;
  }
  set logicOp(value) {
    this.memoryViewUint32[0x8] = value | 0;
  }
  get multiDrawIndirect() {
    return this.memoryViewUint32[0x9] !== 0;
  }
  set multiDrawIndirect(value) {
    this.memoryViewUint32[0x9] = value | 0;
  }
  get drawIndirectFirstInstance() {
    return this.memoryViewUint32[0xA] !== 0;
  }
  set drawIndirectFirstInstance(value) {
    this.memoryViewUint32[0xA] = value | 0;
  }
  get depthClamp() {
    return this.memoryViewUint32[0xB] !== 0;
  }
  set depthClamp(value) {
    this.memoryViewUint32[0xB] = value | 0;
  }
  get depthBiasClamp() {
    return this.memoryViewUint32[0xC] !== 0;
  }
  set depthBiasClamp(value) {
    this.memoryViewUint32[0xC] = value | 0;
  }
  get fillModeNonSolid() {
    return this.memoryViewUint32[0xD] !== 0;
  }
  set fillModeNonSolid(value) {
    this.memoryViewUint32[0xD] = value | 0;
  }
  get depthBounds() {
    return this.memoryViewUint32[0xE] !== 0;
  }
  set depthBounds(value) {
    this.memoryViewUint32[0xE] = value | 0;
  }
  get wideLines() {
    return this.memoryViewUint32[0xF] !== 0;
  }
  set wideLines(value) {
    this.memoryViewUint32[0xF] = value | 0;
  }
  get largePoints() {
    return this.memoryViewUint32[0x10] !== 0;
  }
  set largePoints(value) {
    this.memoryViewUint32[0x10] = value | 0;
  }
  get alphaToOne() {
    return this.memoryViewUint32[0x11] !== 0;
  }
  set alphaToOne(value) {
    this.memoryViewUint32[0x11] = value | 0;
  }
  get multiViewport() {
    return this.memoryViewUint32[0x12] !== 0;
  }
  set multiViewport(value) {
    this.memoryViewUint32[0x12] = value | 0;
  }
  get samplerAnisotropy() {
    return this.memoryViewUint32[0x13] !== 0;
  }
  set samplerAnisotropy(value) {
    this.memoryViewUint32[0x13] = value | 0;
  }
  get textureCompressionETC2() {
    return this.memoryViewUint32[0x14] !== 0;
  }
  set textureCompressionETC2(value) {
    this.memoryViewUint32[0x14] = value | 0;
  }
  get textureCompressionASTC_LDR() {
    return this.memoryViewUint32[0x15] !== 0;
  }
  set textureCompressionASTC_LDR(value) {
    this.memoryViewUint32[0x15] = value | 0;
  }
  get textureCompressionBC() {
    return this.memoryViewUint32[0x16] !== 0;
  }
  set textureCompressionBC(value) {
    this.memoryViewUint32[0x16] = value | 0;
  }
  get occlusionQueryPrecise() {
    return this.memoryViewUint32[0x17] !== 0;
  }
  set occlusionQueryPrecise(value) {
    this.memoryViewUint32[0x17] = value | 0;
  }
  get pipelineStatisticsQuery() {
    return this.memoryViewUint32[0x18] !== 0;
  }
  set pipelineStatisticsQuery(value) {
    this.memoryViewUint32[0x18] = value | 0;
  }
  get vertexPipelineStoresAndAtomics() {
    return this.memoryViewUint32[0x19] !== 0;
  }
  set vertexPipelineStoresAndAtomics(value) {
    this.memoryViewUint32[0x19] = value | 0;
  }
  get fragmentStoresAndAtomics() {
    return this.memoryViewUint32[0x1A] !== 0;
  }
  set fragmentStoresAndAtomics(value) {
    this.memoryViewUint32[0x1A] = value | 0;
  }
  get shaderTessellationAndGeometryPointSize() {
    return this.memoryViewUint32[0x1B] !== 0;
  }
  set shaderTessellationAndGeometryPointSize(value) {
    this.memoryViewUint32[0x1B] = value | 0;
  }
  get shaderImageGatherExtended() {
    return this.memoryViewUint32[0x1C] !== 0;
  }
  set shaderImageGatherExtended(value) {
    this.memoryViewUint32[0x1C] = value | 0;
  }
  get shaderStorageImageExtendedFormats() {
    return this.memoryViewUint32[0x1D] !== 0;
  }
  set shaderStorageImageExtendedFormats(value) {
    this.memoryViewUint32[0x1D] = value | 0;
  }
  get shaderStorageImageMultisample() {
    return this.memoryViewUint32[0x1E] !== 0;
  }
  set shaderStorageImageMultisample(value) {
    this.memoryViewUint32[0x1E] = value | 0;
  }
  get shaderStorageImageReadWithoutFormat() {
    return this.memoryViewUint32[0x1F] !== 0;
  }
  set shaderStorageImageReadWithoutFormat(value) {
    this.memoryViewUint32[0x1F] = value | 0;
  }
  get shaderStorageImageWriteWithoutFormat() {
    return this.memoryViewUint32[0x20] !== 0;
  }
  set shaderStorageImageWriteWithoutFormat(value) {
    this.memoryViewUint32[0x20] = value | 0;
  }
  get shaderUniformBufferArrayDynamicIndexing() {
    return this.memoryViewUint32[0x21] !== 0;
  }
  set shaderUniformBufferArrayDynamicIndexing(value) {
    this.memoryViewUint32[0x21] = value | 0;
  }
  get shaderSampledImageArrayDynamicIndexing() {
    return this.memoryViewUint32[0x22] !== 0;
  }
  set shaderSampledImageArrayDynamicIndexing(value) {
    this.memoryViewUint32[0x22] = value | 0;
  }
  get shaderStorageBufferArrayDynamicIndexing() {
    return this.memoryViewUint32[0x23] !== 0;
  }
  set shaderStorageBufferArrayDynamicIndexing(value) {
    this.memoryViewUint32[0x23] = value | 0;
  }
  get shaderStorageImageArrayDynamicIndexing() {
    return this.memoryViewUint32[0x24] !== 0;
  }
  set shaderStorageImageArrayDynamicIndexing(value) {
    this.memoryViewUint32[0x24] = value | 0;
  }
  get shaderClipDistance() {
    return this.memoryViewUint32[0x25] !== 0;
  }
  set shaderClipDistance(value) {
    this.memoryViewUint32[0x25] = value | 0;
  }
  get shaderCullDistance() {
    return this.memoryViewUint32[0x26] !== 0;
  }
  set shaderCullDistance(value) {
    this.memoryViewUint32[0x26] = value | 0;
  }
  get shaderFloat64() {
    return this.memoryViewUint32[0x27] !== 0;
  }
  set shaderFloat64(value) {
    this.memoryViewUint32[0x27] = value | 0;
  }
  get shaderInt64() {
    return this.memoryViewUint32[0x28] !== 0;
  }
  set shaderInt64(value) {
    this.memoryViewUint32[0x28] = value | 0;
  }
  get shaderInt16() {
    return this.memoryViewUint32[0x29] !== 0;
  }
  set shaderInt16(value) {
    this.memoryViewUint32[0x29] = value | 0;
  }
  get shaderResourceResidency() {
    return this.memoryViewUint32[0x2A] !== 0;
  }
  set shaderResourceResidency(value) {
    this.memoryViewUint32[0x2A] = value | 0;
  }
  get shaderResourceMinLod() {
    return this.memoryViewUint32[0x2B] !== 0;
  }
  set shaderResourceMinLod(value) {
    this.memoryViewUint32[0x2B] = value | 0;
  }
  get sparseBinding() {
    return this.memoryViewUint32[0x2C] !== 0;
  }
  set sparseBinding(value) {
    this.memoryViewUint32[0x2C] = value | 0;
  }
  get sparseResidencyBuffer() {
    return this.memoryViewUint32[0x2D] !== 0;
  }
  set sparseResidencyBuffer(value) {
    this.memoryViewUint32[0x2D] = value | 0;
  }
  get sparseResidencyImage2D() {
    return this.memoryViewUint32[0x2E] !== 0;
  }
  set sparseResidencyImage2D(value) {
    this.memoryViewUint32[0x2E] = value | 0;
  }
  get sparseResidencyImage3D() {
    return this.memoryViewUint32[0x2F] !== 0;
  }
  set sparseResidencyImage3D(value) {
    this.memoryViewUint32[0x2F] = value | 0;
  }
  get sparseResidency2Samples() {
    return this.memoryViewUint32[0x30] !== 0;
  }
  set sparseResidency2Samples(value) {
    this.memoryViewUint32[0x30] = value | 0;
  }
  get sparseResidency4Samples() {
    return this.memoryViewUint32[0x31] !== 0;
  }
  set sparseResidency4Samples(value) {
    this.memoryViewUint32[0x31] = value | 0;
  }
  get sparseResidency8Samples() {
    return this.memoryViewUint32[0x32] !== 0;
  }
  set sparseResidency8Samples(value) {
    this.memoryViewUint32[0x32] = value | 0;
  }
  get sparseResidency16Samples() {
    return this.memoryViewUint32[0x33] !== 0;
  }
  set sparseResidency16Samples(value) {
    this.memoryViewUint32[0x33] = value | 0;
  }
  get sparseResidencyAliased() {
    return this.memoryViewUint32[0x34] !== 0;
  }
  set sparseResidencyAliased(value) {
    this.memoryViewUint32[0x34] = value | 0;
  }
  get variableMultisampleRate() {
    return this.memoryViewUint32[0x35] !== 0;
  }
  set variableMultisampleRate(value) {
    this.memoryViewUint32[0x35] = value | 0;
  }
  get inheritedQueries() {
    return this.memoryViewUint32[0x36] !== 0;
  }
  set inheritedQueries(value) {
    this.memoryViewUint32[0x36] = value | 0;
  }
  
};

VkPhysicalDeviceFeatures.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceFeatures"`);
  
  return true;
};

VkPhysicalDeviceFeatures.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0xDC);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceFeatures"`, this.memoryAddress, memoryAddress);
  
};

VkPhysicalDeviceFeatures.byteLength = 0xDC;

VkPhysicalDeviceFeatures.memoryLayout = Object.freeze({
  robustBufferAccess: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  fullDrawIndexUint32: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  imageCubeArray: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
  independentBlend: Object.freeze({
    byteOffset: 0xC,
    byteLength: 0x4
  }),
  geometryShader: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  tessellationShader: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  sampleRateShading: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  dualSrcBlend: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  logicOp: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  multiDrawIndirect: Object.freeze({
    byteOffset: 0x24,
    byteLength: 0x4
  }),
  drawIndirectFirstInstance: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x4
  }),
  depthClamp: Object.freeze({
    byteOffset: 0x2C,
    byteLength: 0x4
  }),
  depthBiasClamp: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  fillModeNonSolid: Object.freeze({
    byteOffset: 0x34,
    byteLength: 0x4
  }),
  depthBounds: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x4
  }),
  wideLines: Object.freeze({
    byteOffset: 0x3C,
    byteLength: 0x4
  }),
  largePoints: Object.freeze({
    byteOffset: 0x40,
    byteLength: 0x4
  }),
  alphaToOne: Object.freeze({
    byteOffset: 0x44,
    byteLength: 0x4
  }),
  multiViewport: Object.freeze({
    byteOffset: 0x48,
    byteLength: 0x4
  }),
  samplerAnisotropy: Object.freeze({
    byteOffset: 0x4C,
    byteLength: 0x4
  }),
  textureCompressionETC2: Object.freeze({
    byteOffset: 0x50,
    byteLength: 0x4
  }),
  textureCompressionASTC_LDR: Object.freeze({
    byteOffset: 0x54,
    byteLength: 0x4
  }),
  textureCompressionBC: Object.freeze({
    byteOffset: 0x58,
    byteLength: 0x4
  }),
  occlusionQueryPrecise: Object.freeze({
    byteOffset: 0x5C,
    byteLength: 0x4
  }),
  pipelineStatisticsQuery: Object.freeze({
    byteOffset: 0x60,
    byteLength: 0x4
  }),
  vertexPipelineStoresAndAtomics: Object.freeze({
    byteOffset: 0x64,
    byteLength: 0x4
  }),
  fragmentStoresAndAtomics: Object.freeze({
    byteOffset: 0x68,
    byteLength: 0x4
  }),
  shaderTessellationAndGeometryPointSize: Object.freeze({
    byteOffset: 0x6C,
    byteLength: 0x4
  }),
  shaderImageGatherExtended: Object.freeze({
    byteOffset: 0x70,
    byteLength: 0x4
  }),
  shaderStorageImageExtendedFormats: Object.freeze({
    byteOffset: 0x74,
    byteLength: 0x4
  }),
  shaderStorageImageMultisample: Object.freeze({
    byteOffset: 0x78,
    byteLength: 0x4
  }),
  shaderStorageImageReadWithoutFormat: Object.freeze({
    byteOffset: 0x7C,
    byteLength: 0x4
  }),
  shaderStorageImageWriteWithoutFormat: Object.freeze({
    byteOffset: 0x80,
    byteLength: 0x4
  }),
  shaderUniformBufferArrayDynamicIndexing: Object.freeze({
    byteOffset: 0x84,
    byteLength: 0x4
  }),
  shaderSampledImageArrayDynamicIndexing: Object.freeze({
    byteOffset: 0x88,
    byteLength: 0x4
  }),
  shaderStorageBufferArrayDynamicIndexing: Object.freeze({
    byteOffset: 0x8C,
    byteLength: 0x4
  }),
  shaderStorageImageArrayDynamicIndexing: Object.freeze({
    byteOffset: 0x90,
    byteLength: 0x4
  }),
  shaderClipDistance: Object.freeze({
    byteOffset: 0x94,
    byteLength: 0x4
  }),
  shaderCullDistance: Object.freeze({
    byteOffset: 0x98,
    byteLength: 0x4
  }),
  shaderFloat64: Object.freeze({
    byteOffset: 0x9C,
    byteLength: 0x4
  }),
  shaderInt64: Object.freeze({
    byteOffset: 0xA0,
    byteLength: 0x4
  }),
  shaderInt16: Object.freeze({
    byteOffset: 0xA4,
    byteLength: 0x4
  }),
  shaderResourceResidency: Object.freeze({
    byteOffset: 0xA8,
    byteLength: 0x4
  }),
  shaderResourceMinLod: Object.freeze({
    byteOffset: 0xAC,
    byteLength: 0x4
  }),
  sparseBinding: Object.freeze({
    byteOffset: 0xB0,
    byteLength: 0x4
  }),
  sparseResidencyBuffer: Object.freeze({
    byteOffset: 0xB4,
    byteLength: 0x4
  }),
  sparseResidencyImage2D: Object.freeze({
    byteOffset: 0xB8,
    byteLength: 0x4
  }),
  sparseResidencyImage3D: Object.freeze({
    byteOffset: 0xBC,
    byteLength: 0x4
  }),
  sparseResidency2Samples: Object.freeze({
    byteOffset: 0xC0,
    byteLength: 0x4
  }),
  sparseResidency4Samples: Object.freeze({
    byteOffset: 0xC4,
    byteLength: 0x4
  }),
  sparseResidency8Samples: Object.freeze({
    byteOffset: 0xC8,
    byteLength: 0x4
  }),
  sparseResidency16Samples: Object.freeze({
    byteOffset: 0xCC,
    byteLength: 0x4
  }),
  sparseResidencyAliased: Object.freeze({
    byteOffset: 0xD0,
    byteLength: 0x4
  }),
  variableMultisampleRate: Object.freeze({
    byteOffset: 0xD4,
    byteLength: 0x4
  }),
  inheritedQueries: Object.freeze({
    byteOffset: 0xD8,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceSparseProperties **/
class VkPhysicalDeviceSparseProperties {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x14);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x14) / 0x4);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    
    
    
    
    
    if (typeof opts === "object") {
      
    }
  }
  get residencyStandard2DBlockShape() {
    return this.memoryViewUint32[0x0] !== 0;
  }
  get residencyStandard2DMultisampleBlockShape() {
    return this.memoryViewUint32[0x1] !== 0;
  }
  get residencyStandard3DBlockShape() {
    return this.memoryViewUint32[0x2] !== 0;
  }
  get residencyAlignedMipSize() {
    return this.memoryViewUint32[0x3] !== 0;
  }
  get residencyNonResidentStrict() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  
};

VkPhysicalDeviceSparseProperties.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceSparseProperties"`);
  
  return true;
};

VkPhysicalDeviceSparseProperties.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x14);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceSparseProperties"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x14), 0x0);
};

VkPhysicalDeviceSparseProperties.byteLength = 0x14;

VkPhysicalDeviceSparseProperties.memoryLayout = Object.freeze({
  residencyStandard2DBlockShape: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  residencyStandard2DMultisampleBlockShape: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  residencyStandard3DBlockShape: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
  residencyAlignedMipSize: Object.freeze({
    byteOffset: 0xC,
    byteLength: 0x4
  }),
  residencyNonResidentStrict: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceLimits **/
class VkPhysicalDeviceLimits {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x1F8);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
    this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);
    this.memoryViewFloat32 = new Float32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x1F8) / 0x4);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x1F8) / 0x8);
      this.memoryViewFloat32 = new Float32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x1F8) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x1F8) / 0x8);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x1F8) / 0x4);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    this._maxComputeWorkGroupCount = [...Array(3)].fill(0x0);
    
    this._maxComputeWorkGroupSize = [...Array(3)].fill(0x0);
    
    
    
    
    
    
    
    
    this._maxViewportDimensions = [...Array(2)].fill(0x0);
    this._viewportBoundsRange = [...Array(2)].fill(0x0);
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    this._pointSizeRange = [...Array(2)].fill(0x0);
    this._lineWidthRange = [...Array(2)].fill(0x0);
    
    
    
    
    
    
    
    
    if (typeof opts === "object") {
      
    }
  }
  get maxImageDimension1D() {
    return this.memoryViewUint32[0x0];
  }
  get maxImageDimension2D() {
    return this.memoryViewUint32[0x1];
  }
  get maxImageDimension3D() {
    return this.memoryViewUint32[0x2];
  }
  get maxImageDimensionCube() {
    return this.memoryViewUint32[0x3];
  }
  get maxImageArrayLayers() {
    return this.memoryViewUint32[0x4];
  }
  get maxTexelBufferElements() {
    return this.memoryViewUint32[0x5];
  }
  get maxUniformBufferRange() {
    return this.memoryViewUint32[0x6];
  }
  get maxStorageBufferRange() {
    return this.memoryViewUint32[0x7];
  }
  get maxPushConstantsSize() {
    return this.memoryViewUint32[0x8];
  }
  get maxMemoryAllocationCount() {
    return this.memoryViewUint32[0x9];
  }
  get maxSamplerAllocationCount() {
    return this.memoryViewUint32[0xA];
  }
  get bufferImageGranularity() {
    return this.memoryViewBigUint64[0x6];
  }
  get sparseAddressSpaceSize() {
    return this.memoryViewBigUint64[0x7];
  }
  get maxBoundDescriptorSets() {
    return this.memoryViewUint32[0x10];
  }
  get maxPerStageDescriptorSamplers() {
    return this.memoryViewUint32[0x11];
  }
  get maxPerStageDescriptorUniformBuffers() {
    return this.memoryViewUint32[0x12];
  }
  get maxPerStageDescriptorStorageBuffers() {
    return this.memoryViewUint32[0x13];
  }
  get maxPerStageDescriptorSampledImages() {
    return this.memoryViewUint32[0x14];
  }
  get maxPerStageDescriptorStorageImages() {
    return this.memoryViewUint32[0x15];
  }
  get maxPerStageDescriptorInputAttachments() {
    return this.memoryViewUint32[0x16];
  }
  get maxPerStageResources() {
    return this.memoryViewUint32[0x17];
  }
  get maxDescriptorSetSamplers() {
    return this.memoryViewUint32[0x18];
  }
  get maxDescriptorSetUniformBuffers() {
    return this.memoryViewUint32[0x19];
  }
  get maxDescriptorSetUniformBuffersDynamic() {
    return this.memoryViewUint32[0x1A];
  }
  get maxDescriptorSetStorageBuffers() {
    return this.memoryViewUint32[0x1B];
  }
  get maxDescriptorSetStorageBuffersDynamic() {
    return this.memoryViewUint32[0x1C];
  }
  get maxDescriptorSetSampledImages() {
    return this.memoryViewUint32[0x1D];
  }
  get maxDescriptorSetStorageImages() {
    return this.memoryViewUint32[0x1E];
  }
  get maxDescriptorSetInputAttachments() {
    return this.memoryViewUint32[0x1F];
  }
  get maxVertexInputAttributes() {
    return this.memoryViewUint32[0x20];
  }
  get maxVertexInputBindings() {
    return this.memoryViewUint32[0x21];
  }
  get maxVertexInputAttributeOffset() {
    return this.memoryViewUint32[0x22];
  }
  get maxVertexInputBindingStride() {
    return this.memoryViewUint32[0x23];
  }
  get maxVertexOutputComponents() {
    return this.memoryViewUint32[0x24];
  }
  get maxTessellationGenerationLevel() {
    return this.memoryViewUint32[0x25];
  }
  get maxTessellationPatchSize() {
    return this.memoryViewUint32[0x26];
  }
  get maxTessellationControlPerVertexInputComponents() {
    return this.memoryViewUint32[0x27];
  }
  get maxTessellationControlPerVertexOutputComponents() {
    return this.memoryViewUint32[0x28];
  }
  get maxTessellationControlPerPatchOutputComponents() {
    return this.memoryViewUint32[0x29];
  }
  get maxTessellationControlTotalOutputComponents() {
    return this.memoryViewUint32[0x2A];
  }
  get maxTessellationEvaluationInputComponents() {
    return this.memoryViewUint32[0x2B];
  }
  get maxTessellationEvaluationOutputComponents() {
    return this.memoryViewUint32[0x2C];
  }
  get maxGeometryShaderInvocations() {
    return this.memoryViewUint32[0x2D];
  }
  get maxGeometryInputComponents() {
    return this.memoryViewUint32[0x2E];
  }
  get maxGeometryOutputComponents() {
    return this.memoryViewUint32[0x2F];
  }
  get maxGeometryOutputVertices() {
    return this.memoryViewUint32[0x30];
  }
  get maxGeometryTotalOutputComponents() {
    return this.memoryViewUint32[0x31];
  }
  get maxFragmentInputComponents() {
    return this.memoryViewUint32[0x32];
  }
  get maxFragmentOutputAttachments() {
    return this.memoryViewUint32[0x33];
  }
  get maxFragmentDualSrcAttachments() {
    return this.memoryViewUint32[0x34];
  }
  get maxFragmentCombinedOutputResources() {
    return this.memoryViewUint32[0x35];
  }
  get maxComputeSharedMemorySize() {
    return this.memoryViewUint32[0x36];
  }
  get maxComputeWorkGroupCount() {
    return [
      this.memoryViewUint32[0x37],
      this.memoryViewUint32[0x38],
      this.memoryViewUint32[0x39]
    ];
  }
  get maxComputeWorkGroupInvocations() {
    return this.memoryViewUint32[0x3A];
  }
  get maxComputeWorkGroupSize() {
    return [
      this.memoryViewUint32[0x3B],
      this.memoryViewUint32[0x3C],
      this.memoryViewUint32[0x3D]
    ];
  }
  get subPixelPrecisionBits() {
    return this.memoryViewUint32[0x3E];
  }
  get subTexelPrecisionBits() {
    return this.memoryViewUint32[0x3F];
  }
  get mipmapPrecisionBits() {
    return this.memoryViewUint32[0x40];
  }
  get maxDrawIndexedIndexValue() {
    return this.memoryViewUint32[0x41];
  }
  get maxDrawIndirectCount() {
    return this.memoryViewUint32[0x42];
  }
  get maxSamplerLodBias() {
    return this.memoryViewFloat32[0x43];
  }
  get maxSamplerAnisotropy() {
    return this.memoryViewFloat32[0x44];
  }
  get maxViewports() {
    return this.memoryViewUint32[0x45];
  }
  get maxViewportDimensions() {
    return [
      this.memoryViewUint32[0x46],
      this.memoryViewUint32[0x47]
    ];
  }
  get viewportBoundsRange() {
    return [
      this.memoryViewFloat32[0x48],
      this.memoryViewFloat32[0x49]
    ];
  }
  get viewportSubPixelBits() {
    return this.memoryViewUint32[0x4A];
  }
  get minMemoryMapAlignment() {
    return this.memoryViewBigInt64[0x26];
  }
  get minTexelBufferOffsetAlignment() {
    return this.memoryViewBigUint64[0x27];
  }
  get minUniformBufferOffsetAlignment() {
    return this.memoryViewBigUint64[0x28];
  }
  get minStorageBufferOffsetAlignment() {
    return this.memoryViewBigUint64[0x29];
  }
  get minTexelOffset() {
    return this.memoryViewInt32[0x54];
  }
  get maxTexelOffset() {
    return this.memoryViewUint32[0x55];
  }
  get minTexelGatherOffset() {
    return this.memoryViewInt32[0x56];
  }
  get maxTexelGatherOffset() {
    return this.memoryViewUint32[0x57];
  }
  get minInterpolationOffset() {
    return this.memoryViewFloat32[0x58];
  }
  get maxInterpolationOffset() {
    return this.memoryViewFloat32[0x59];
  }
  get subPixelInterpolationOffsetBits() {
    return this.memoryViewUint32[0x5A];
  }
  get maxFramebufferWidth() {
    return this.memoryViewUint32[0x5B];
  }
  get maxFramebufferHeight() {
    return this.memoryViewUint32[0x5C];
  }
  get maxFramebufferLayers() {
    return this.memoryViewUint32[0x5D];
  }
  get framebufferColorSampleCounts() {
    return this.memoryViewInt32[0x5E];
  }
  get framebufferDepthSampleCounts() {
    return this.memoryViewInt32[0x5F];
  }
  get framebufferStencilSampleCounts() {
    return this.memoryViewInt32[0x60];
  }
  get framebufferNoAttachmentsSampleCounts() {
    return this.memoryViewInt32[0x61];
  }
  get maxColorAttachments() {
    return this.memoryViewUint32[0x62];
  }
  get sampledImageColorSampleCounts() {
    return this.memoryViewInt32[0x63];
  }
  get sampledImageIntegerSampleCounts() {
    return this.memoryViewInt32[0x64];
  }
  get sampledImageDepthSampleCounts() {
    return this.memoryViewInt32[0x65];
  }
  get sampledImageStencilSampleCounts() {
    return this.memoryViewInt32[0x66];
  }
  get storageImageSampleCounts() {
    return this.memoryViewInt32[0x67];
  }
  get maxSampleMaskWords() {
    return this.memoryViewUint32[0x68];
  }
  get timestampComputeAndGraphics() {
    return this.memoryViewUint32[0x69] !== 0;
  }
  get timestampPeriod() {
    return this.memoryViewFloat32[0x6A];
  }
  get maxClipDistances() {
    return this.memoryViewUint32[0x6B];
  }
  get maxCullDistances() {
    return this.memoryViewUint32[0x6C];
  }
  get maxCombinedClipAndCullDistances() {
    return this.memoryViewUint32[0x6D];
  }
  get discreteQueuePriorities() {
    return this.memoryViewUint32[0x6E];
  }
  get pointSizeRange() {
    return [
      this.memoryViewFloat32[0x6F],
      this.memoryViewFloat32[0x70]
    ];
  }
  get lineWidthRange() {
    return [
      this.memoryViewFloat32[0x71],
      this.memoryViewFloat32[0x72]
    ];
  }
  get pointSizeGranularity() {
    return this.memoryViewFloat32[0x73];
  }
  get lineWidthGranularity() {
    return this.memoryViewFloat32[0x74];
  }
  get strictLines() {
    return this.memoryViewUint32[0x75] !== 0;
  }
  get standardSampleLocations() {
    return this.memoryViewUint32[0x76] !== 0;
  }
  get optimalBufferCopyOffsetAlignment() {
    return this.memoryViewBigUint64[0x3C];
  }
  get optimalBufferCopyRowPitchAlignment() {
    return this.memoryViewBigUint64[0x3D];
  }
  get nonCoherentAtomSize() {
    return this.memoryViewBigUint64[0x3E];
  }
  
};

VkPhysicalDeviceLimits.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceLimits"`);
  
  return true;
};

VkPhysicalDeviceLimits.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x1F8);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceLimits"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x1F8), 0x0);
  
  
  
  
  
  
  
  
  
  
  
  
};

VkPhysicalDeviceLimits.byteLength = 0x1F8;

VkPhysicalDeviceLimits.memoryLayout = Object.freeze({
  maxImageDimension1D: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  maxImageDimension2D: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  maxImageDimension3D: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
  maxImageDimensionCube: Object.freeze({
    byteOffset: 0xC,
    byteLength: 0x4
  }),
  maxImageArrayLayers: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  maxTexelBufferElements: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  maxUniformBufferRange: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  maxStorageBufferRange: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  maxPushConstantsSize: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  maxMemoryAllocationCount: Object.freeze({
    byteOffset: 0x24,
    byteLength: 0x4
  }),
  maxSamplerAllocationCount: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x4
  }),
  bufferImageGranularity: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x8
  }),
  sparseAddressSpaceSize: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x8
  }),
  maxBoundDescriptorSets: Object.freeze({
    byteOffset: 0x40,
    byteLength: 0x4
  }),
  maxPerStageDescriptorSamplers: Object.freeze({
    byteOffset: 0x44,
    byteLength: 0x4
  }),
  maxPerStageDescriptorUniformBuffers: Object.freeze({
    byteOffset: 0x48,
    byteLength: 0x4
  }),
  maxPerStageDescriptorStorageBuffers: Object.freeze({
    byteOffset: 0x4C,
    byteLength: 0x4
  }),
  maxPerStageDescriptorSampledImages: Object.freeze({
    byteOffset: 0x50,
    byteLength: 0x4
  }),
  maxPerStageDescriptorStorageImages: Object.freeze({
    byteOffset: 0x54,
    byteLength: 0x4
  }),
  maxPerStageDescriptorInputAttachments: Object.freeze({
    byteOffset: 0x58,
    byteLength: 0x4
  }),
  maxPerStageResources: Object.freeze({
    byteOffset: 0x5C,
    byteLength: 0x4
  }),
  maxDescriptorSetSamplers: Object.freeze({
    byteOffset: 0x60,
    byteLength: 0x4
  }),
  maxDescriptorSetUniformBuffers: Object.freeze({
    byteOffset: 0x64,
    byteLength: 0x4
  }),
  maxDescriptorSetUniformBuffersDynamic: Object.freeze({
    byteOffset: 0x68,
    byteLength: 0x4
  }),
  maxDescriptorSetStorageBuffers: Object.freeze({
    byteOffset: 0x6C,
    byteLength: 0x4
  }),
  maxDescriptorSetStorageBuffersDynamic: Object.freeze({
    byteOffset: 0x70,
    byteLength: 0x4
  }),
  maxDescriptorSetSampledImages: Object.freeze({
    byteOffset: 0x74,
    byteLength: 0x4
  }),
  maxDescriptorSetStorageImages: Object.freeze({
    byteOffset: 0x78,
    byteLength: 0x4
  }),
  maxDescriptorSetInputAttachments: Object.freeze({
    byteOffset: 0x7C,
    byteLength: 0x4
  }),
  maxVertexInputAttributes: Object.freeze({
    byteOffset: 0x80,
    byteLength: 0x4
  }),
  maxVertexInputBindings: Object.freeze({
    byteOffset: 0x84,
    byteLength: 0x4
  }),
  maxVertexInputAttributeOffset: Object.freeze({
    byteOffset: 0x88,
    byteLength: 0x4
  }),
  maxVertexInputBindingStride: Object.freeze({
    byteOffset: 0x8C,
    byteLength: 0x4
  }),
  maxVertexOutputComponents: Object.freeze({
    byteOffset: 0x90,
    byteLength: 0x4
  }),
  maxTessellationGenerationLevel: Object.freeze({
    byteOffset: 0x94,
    byteLength: 0x4
  }),
  maxTessellationPatchSize: Object.freeze({
    byteOffset: 0x98,
    byteLength: 0x4
  }),
  maxTessellationControlPerVertexInputComponents: Object.freeze({
    byteOffset: 0x9C,
    byteLength: 0x4
  }),
  maxTessellationControlPerVertexOutputComponents: Object.freeze({
    byteOffset: 0xA0,
    byteLength: 0x4
  }),
  maxTessellationControlPerPatchOutputComponents: Object.freeze({
    byteOffset: 0xA4,
    byteLength: 0x4
  }),
  maxTessellationControlTotalOutputComponents: Object.freeze({
    byteOffset: 0xA8,
    byteLength: 0x4
  }),
  maxTessellationEvaluationInputComponents: Object.freeze({
    byteOffset: 0xAC,
    byteLength: 0x4
  }),
  maxTessellationEvaluationOutputComponents: Object.freeze({
    byteOffset: 0xB0,
    byteLength: 0x4
  }),
  maxGeometryShaderInvocations: Object.freeze({
    byteOffset: 0xB4,
    byteLength: 0x4
  }),
  maxGeometryInputComponents: Object.freeze({
    byteOffset: 0xB8,
    byteLength: 0x4
  }),
  maxGeometryOutputComponents: Object.freeze({
    byteOffset: 0xBC,
    byteLength: 0x4
  }),
  maxGeometryOutputVertices: Object.freeze({
    byteOffset: 0xC0,
    byteLength: 0x4
  }),
  maxGeometryTotalOutputComponents: Object.freeze({
    byteOffset: 0xC4,
    byteLength: 0x4
  }),
  maxFragmentInputComponents: Object.freeze({
    byteOffset: 0xC8,
    byteLength: 0x4
  }),
  maxFragmentOutputAttachments: Object.freeze({
    byteOffset: 0xCC,
    byteLength: 0x4
  }),
  maxFragmentDualSrcAttachments: Object.freeze({
    byteOffset: 0xD0,
    byteLength: 0x4
  }),
  maxFragmentCombinedOutputResources: Object.freeze({
    byteOffset: 0xD4,
    byteLength: 0x4
  }),
  maxComputeSharedMemorySize: Object.freeze({
    byteOffset: 0xD8,
    byteLength: 0x4
  }),
  maxComputeWorkGroupCount: Object.freeze({
    byteOffset: 0xDC,
    byteLength: 0xC
  }),
  maxComputeWorkGroupInvocations: Object.freeze({
    byteOffset: 0xE8,
    byteLength: 0x4
  }),
  maxComputeWorkGroupSize: Object.freeze({
    byteOffset: 0xEC,
    byteLength: 0xC
  }),
  subPixelPrecisionBits: Object.freeze({
    byteOffset: 0xF8,
    byteLength: 0x4
  }),
  subTexelPrecisionBits: Object.freeze({
    byteOffset: 0xFC,
    byteLength: 0x4
  }),
  mipmapPrecisionBits: Object.freeze({
    byteOffset: 0x100,
    byteLength: 0x4
  }),
  maxDrawIndexedIndexValue: Object.freeze({
    byteOffset: 0x104,
    byteLength: 0x4
  }),
  maxDrawIndirectCount: Object.freeze({
    byteOffset: 0x108,
    byteLength: 0x4
  }),
  maxSamplerLodBias: Object.freeze({
    byteOffset: 0x10C,
    byteLength: 0x4
  }),
  maxSamplerAnisotropy: Object.freeze({
    byteOffset: 0x110,
    byteLength: 0x4
  }),
  maxViewports: Object.freeze({
    byteOffset: 0x114,
    byteLength: 0x4
  }),
  maxViewportDimensions: Object.freeze({
    byteOffset: 0x118,
    byteLength: 0x8
  }),
  viewportBoundsRange: Object.freeze({
    byteOffset: 0x120,
    byteLength: 0x8
  }),
  viewportSubPixelBits: Object.freeze({
    byteOffset: 0x128,
    byteLength: 0x4
  }),
  minMemoryMapAlignment: Object.freeze({
    byteOffset: 0x130,
    byteLength: 0x8
  }),
  minTexelBufferOffsetAlignment: Object.freeze({
    byteOffset: 0x138,
    byteLength: 0x8
  }),
  minUniformBufferOffsetAlignment: Object.freeze({
    byteOffset: 0x140,
    byteLength: 0x8
  }),
  minStorageBufferOffsetAlignment: Object.freeze({
    byteOffset: 0x148,
    byteLength: 0x8
  }),
  minTexelOffset: Object.freeze({
    byteOffset: 0x150,
    byteLength: 0x4
  }),
  maxTexelOffset: Object.freeze({
    byteOffset: 0x154,
    byteLength: 0x4
  }),
  minTexelGatherOffset: Object.freeze({
    byteOffset: 0x158,
    byteLength: 0x4
  }),
  maxTexelGatherOffset: Object.freeze({
    byteOffset: 0x15C,
    byteLength: 0x4
  }),
  minInterpolationOffset: Object.freeze({
    byteOffset: 0x160,
    byteLength: 0x4
  }),
  maxInterpolationOffset: Object.freeze({
    byteOffset: 0x164,
    byteLength: 0x4
  }),
  subPixelInterpolationOffsetBits: Object.freeze({
    byteOffset: 0x168,
    byteLength: 0x4
  }),
  maxFramebufferWidth: Object.freeze({
    byteOffset: 0x16C,
    byteLength: 0x4
  }),
  maxFramebufferHeight: Object.freeze({
    byteOffset: 0x170,
    byteLength: 0x4
  }),
  maxFramebufferLayers: Object.freeze({
    byteOffset: 0x174,
    byteLength: 0x4
  }),
  framebufferColorSampleCounts: Object.freeze({
    byteOffset: 0x178,
    byteLength: 0x4
  }),
  framebufferDepthSampleCounts: Object.freeze({
    byteOffset: 0x17C,
    byteLength: 0x4
  }),
  framebufferStencilSampleCounts: Object.freeze({
    byteOffset: 0x180,
    byteLength: 0x4
  }),
  framebufferNoAttachmentsSampleCounts: Object.freeze({
    byteOffset: 0x184,
    byteLength: 0x4
  }),
  maxColorAttachments: Object.freeze({
    byteOffset: 0x188,
    byteLength: 0x4
  }),
  sampledImageColorSampleCounts: Object.freeze({
    byteOffset: 0x18C,
    byteLength: 0x4
  }),
  sampledImageIntegerSampleCounts: Object.freeze({
    byteOffset: 0x190,
    byteLength: 0x4
  }),
  sampledImageDepthSampleCounts: Object.freeze({
    byteOffset: 0x194,
    byteLength: 0x4
  }),
  sampledImageStencilSampleCounts: Object.freeze({
    byteOffset: 0x198,
    byteLength: 0x4
  }),
  storageImageSampleCounts: Object.freeze({
    byteOffset: 0x19C,
    byteLength: 0x4
  }),
  maxSampleMaskWords: Object.freeze({
    byteOffset: 0x1A0,
    byteLength: 0x4
  }),
  timestampComputeAndGraphics: Object.freeze({
    byteOffset: 0x1A4,
    byteLength: 0x4
  }),
  timestampPeriod: Object.freeze({
    byteOffset: 0x1A8,
    byteLength: 0x4
  }),
  maxClipDistances: Object.freeze({
    byteOffset: 0x1AC,
    byteLength: 0x4
  }),
  maxCullDistances: Object.freeze({
    byteOffset: 0x1B0,
    byteLength: 0x4
  }),
  maxCombinedClipAndCullDistances: Object.freeze({
    byteOffset: 0x1B4,
    byteLength: 0x4
  }),
  discreteQueuePriorities: Object.freeze({
    byteOffset: 0x1B8,
    byteLength: 0x4
  }),
  pointSizeRange: Object.freeze({
    byteOffset: 0x1BC,
    byteLength: 0x8
  }),
  lineWidthRange: Object.freeze({
    byteOffset: 0x1C4,
    byteLength: 0x8
  }),
  pointSizeGranularity: Object.freeze({
    byteOffset: 0x1CC,
    byteLength: 0x4
  }),
  lineWidthGranularity: Object.freeze({
    byteOffset: 0x1D0,
    byteLength: 0x4
  }),
  strictLines: Object.freeze({
    byteOffset: 0x1D4,
    byteLength: 0x4
  }),
  standardSampleLocations: Object.freeze({
    byteOffset: 0x1D8,
    byteLength: 0x4
  }),
  optimalBufferCopyOffsetAlignment: Object.freeze({
    byteOffset: 0x1E0,
    byteLength: 0x8
  }),
  optimalBufferCopyRowPitchAlignment: Object.freeze({
    byteOffset: 0x1E8,
    byteLength: 0x8
  }),
  nonCoherentAtomSize: Object.freeze({
    byteOffset: 0x1F0,
    byteLength: 0x8
  }),
});
/** VkSemaphoreCreateInfo **/
class VkSemaphoreCreateInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = 0x9;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null && (value instanceof Object)) {
      let {sType} = value;
      if (sType <= -1) throw new TypeError("Invalid type for 'VkSemaphoreCreateInfo.pNext'");
      switch (sType) {
          
        case 0x3B9BF6C8:
        case 0x3B9BFAB1:
          break;
        default:
          throw new TypeError("Invalid type for 'VkSemaphoreCreateInfo.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkSemaphoreCreateInfo.pNext'");
    }
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkSemaphoreCreateInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkSemaphoreCreateInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkSemaphoreCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkSemaphoreCreateInfo"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkSemaphoreCreateInfo.byteLength = 0x18;

VkSemaphoreCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkQueryPoolCreateInfo **/
class VkQueryPoolCreateInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    
    
    this.sType = 0xB;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.queryType !== void 0) this.queryType = opts.queryType;
      if (opts.queryCount !== void 0) this.queryCount = opts.queryCount;
      if (opts.pipelineStatistics !== void 0) this.pipelineStatistics = opts.pipelineStatistics;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkQueryPoolCreateInfo.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get queryType() {
    return this.memoryViewInt32[0x5];
  }
  set queryType(value) {
    this.memoryViewInt32[0x5] = value;
  }
  get queryCount() {
    return this.memoryViewUint32[0x6];
  }
  set queryCount(value) {
    this.memoryViewUint32[0x6] = value;
  }
  get pipelineStatistics() {
    return this.memoryViewInt32[0x7];
  }
  set pipelineStatistics(value) {
    this.memoryViewInt32[0x7] = value;
  }
  
};

VkQueryPoolCreateInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkQueryPoolCreateInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkQueryPoolCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkQueryPoolCreateInfo"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkQueryPoolCreateInfo.byteLength = 0x20;

VkQueryPoolCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  queryType: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  queryCount: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  pipelineStatistics: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
});
/** VkFramebufferCreateInfo **/
class VkFramebufferCreateInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x40);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this._renderPass = null;
    
    this._pAttachments = null;
    this._pAttachmentsNative = null;
    
    
    
    this.sType = 0x25;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.renderPass !== void 0) this.renderPass = opts.renderPass;
      if (opts.attachmentCount !== void 0) this.attachmentCount = opts.attachmentCount;
      if (opts.pAttachments !== void 0) this.pAttachments = opts.pAttachments;
      if (opts.width !== void 0) this.width = opts.width;
      if (opts.height !== void 0) this.height = opts.height;
      if (opts.layers !== void 0) this.layers = opts.layers;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkFramebufferCreateInfo.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get renderPass() {
    return this._renderPass;
  }
  set renderPass(value) {
    if (value !== null && value.constructor === VkRenderPass) {
      
      this._renderPass = value;
      
      this.memoryViewBigInt64[0x3] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._renderPass = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkFramebufferCreateInfo.renderPass': Expected 'VkRenderPass' but got '" + value.constructor.name + "'");
    }
  }
  get attachmentCount() {
    return this.memoryViewUint32[0x8];
  }
  set attachmentCount(value) {
    this.memoryViewUint32[0x8] = value;
  }
  get pAttachments() {
    return this._pAttachments;
  }
  set pAttachments(value) {
    if (value !== null && value.constructor === Array) {
      this._pAttachments = value;
    } else if (value === null) {
      this._pAttachments = null;
    } else {
      throw new TypeError("Invalid type for 'VkFramebufferCreateInfo.pAttachments': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get width() {
    return this.memoryViewUint32[0xC];
  }
  set width(value) {
    this.memoryViewUint32[0xC] = value;
  }
  get height() {
    return this.memoryViewUint32[0xD];
  }
  set height(value) {
    this.memoryViewUint32[0xD] = value;
  }
  get layers() {
    return this.memoryViewUint32[0xE];
  }
  set layers(value) {
    this.memoryViewUint32[0xE] = value;
  }
  
};

VkFramebufferCreateInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkFramebufferCreateInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pAttachments !== null) {
    let array = this._pAttachments;
    if (array.length !== this.attachmentCount) {
      throw new RangeError("Invalid array length, expected length of 'attachmentCount' for 'VkFramebufferCreateInfo.pAttachments'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkImageView) {
        throw new TypeError("Invalid type for 'VkFramebufferCreateInfo.pAttachments[" + ii + "]': Expected 'VkImageView' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pAttachmentsNative = nativeArray;
    this.memoryViewBigInt64[0x5] = nativeArray.address;
  }
  
  return true;
};

VkFramebufferCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x40);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkFramebufferCreateInfo"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
};

VkFramebufferCreateInfo.byteLength = 0x40;

VkFramebufferCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  renderPass: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  attachmentCount: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  pAttachments: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
  width: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  height: Object.freeze({
    byteOffset: 0x34,
    byteLength: 0x4
  }),
  layers: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x4
  }),
});
/** VkDrawIndirectCommand **/
class VkDrawIndirectCommand {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x10);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    
    
    
    
    if (typeof opts === "object") {
      if (opts.vertexCount !== void 0) this.vertexCount = opts.vertexCount;
      if (opts.instanceCount !== void 0) this.instanceCount = opts.instanceCount;
      if (opts.firstVertex !== void 0) this.firstVertex = opts.firstVertex;
      if (opts.firstInstance !== void 0) this.firstInstance = opts.firstInstance;
      
    }
  }
  get vertexCount() {
    return this.memoryViewUint32[0x0];
  }
  set vertexCount(value) {
    this.memoryViewUint32[0x0] = value;
  }
  get instanceCount() {
    return this.memoryViewUint32[0x1];
  }
  set instanceCount(value) {
    this.memoryViewUint32[0x1] = value;
  }
  get firstVertex() {
    return this.memoryViewUint32[0x2];
  }
  set firstVertex(value) {
    this.memoryViewUint32[0x2] = value;
  }
  get firstInstance() {
    return this.memoryViewUint32[0x3];
  }
  set firstInstance(value) {
    this.memoryViewUint32[0x3] = value;
  }
  
};

VkDrawIndirectCommand.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDrawIndirectCommand"`);
  
  return true;
};

VkDrawIndirectCommand.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x10);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDrawIndirectCommand"`, this.memoryAddress, memoryAddress);
  
};

VkDrawIndirectCommand.byteLength = 0x10;

VkDrawIndirectCommand.memoryLayout = Object.freeze({
  vertexCount: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  instanceCount: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  firstVertex: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
  firstInstance: Object.freeze({
    byteOffset: 0xC,
    byteLength: 0x4
  }),
});
/** VkDrawIndexedIndirectCommand **/
class VkDrawIndexedIndirectCommand {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x14);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    
    
    
    
    
    if (typeof opts === "object") {
      if (opts.indexCount !== void 0) this.indexCount = opts.indexCount;
      if (opts.instanceCount !== void 0) this.instanceCount = opts.instanceCount;
      if (opts.firstIndex !== void 0) this.firstIndex = opts.firstIndex;
      if (opts.vertexOffset !== void 0) this.vertexOffset = opts.vertexOffset;
      if (opts.firstInstance !== void 0) this.firstInstance = opts.firstInstance;
      
    }
  }
  get indexCount() {
    return this.memoryViewUint32[0x0];
  }
  set indexCount(value) {
    this.memoryViewUint32[0x0] = value;
  }
  get instanceCount() {
    return this.memoryViewUint32[0x1];
  }
  set instanceCount(value) {
    this.memoryViewUint32[0x1] = value;
  }
  get firstIndex() {
    return this.memoryViewUint32[0x2];
  }
  set firstIndex(value) {
    this.memoryViewUint32[0x2] = value;
  }
  get vertexOffset() {
    return this.memoryViewInt32[0x3];
  }
  set vertexOffset(value) {
    this.memoryViewInt32[0x3] = value;
  }
  get firstInstance() {
    return this.memoryViewUint32[0x4];
  }
  set firstInstance(value) {
    this.memoryViewUint32[0x4] = value;
  }
  
};

VkDrawIndexedIndirectCommand.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDrawIndexedIndirectCommand"`);
  
  return true;
};

VkDrawIndexedIndirectCommand.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x14);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDrawIndexedIndirectCommand"`, this.memoryAddress, memoryAddress);
  
};

VkDrawIndexedIndirectCommand.byteLength = 0x14;

VkDrawIndexedIndirectCommand.memoryLayout = Object.freeze({
  indexCount: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  instanceCount: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  firstIndex: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
  vertexOffset: Object.freeze({
    byteOffset: 0xC,
    byteLength: 0x4
  }),
  firstInstance: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkDispatchIndirectCommand **/
class VkDispatchIndirectCommand {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0xC);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    
    
    
    if (typeof opts === "object") {
      if (opts.x !== void 0) this.x = opts.x;
      if (opts.y !== void 0) this.y = opts.y;
      if (opts.z !== void 0) this.z = opts.z;
      
    }
  }
  get x() {
    return this.memoryViewUint32[0x0];
  }
  set x(value) {
    this.memoryViewUint32[0x0] = value;
  }
  get y() {
    return this.memoryViewUint32[0x1];
  }
  set y(value) {
    this.memoryViewUint32[0x1] = value;
  }
  get z() {
    return this.memoryViewUint32[0x2];
  }
  set z(value) {
    this.memoryViewUint32[0x2] = value;
  }
  
};

VkDispatchIndirectCommand.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDispatchIndirectCommand"`);
  
  return true;
};

VkDispatchIndirectCommand.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0xC);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDispatchIndirectCommand"`, this.memoryAddress, memoryAddress);
  
};

VkDispatchIndirectCommand.byteLength = 0xC;

VkDispatchIndirectCommand.memoryLayout = Object.freeze({
  x: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  y: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  z: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
});
/** VkSubmitInfo **/
class VkSubmitInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x48);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this._pWaitSemaphores = null;
    this._pWaitSemaphoresNative = null;
    this._pWaitDstStageMask = null;
    
    this._pCommandBuffers = null;
    this._pCommandBuffersNative = null;
    
    this._pSignalSemaphores = null;
    this._pSignalSemaphoresNative = null;
    this.sType = 0x4;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.waitSemaphoreCount !== void 0) this.waitSemaphoreCount = opts.waitSemaphoreCount;
      if (opts.pWaitSemaphores !== void 0) this.pWaitSemaphores = opts.pWaitSemaphores;
      if (opts.pWaitDstStageMask !== void 0) this.pWaitDstStageMask = opts.pWaitDstStageMask;
      if (opts.commandBufferCount !== void 0) this.commandBufferCount = opts.commandBufferCount;
      if (opts.pCommandBuffers !== void 0) this.pCommandBuffers = opts.pCommandBuffers;
      if (opts.signalSemaphoreCount !== void 0) this.signalSemaphoreCount = opts.signalSemaphoreCount;
      if (opts.pSignalSemaphores !== void 0) this.pSignalSemaphores = opts.pSignalSemaphores;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null && (value instanceof Object)) {
      let {sType} = value;
      if (sType <= -1) throw new TypeError("Invalid type for 'VkSubmitInfo.pNext'");
      switch (sType) {
          
        case 0x3B9BAC90:
        case 0x3B9BEEF8:
        case 0x3B9BFAB2:
        case 0x3B9BB465:
        case VkStructureType.VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO:
          break;
        default:
          throw new TypeError("Invalid type for 'VkSubmitInfo.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkSubmitInfo.pNext'");
    }
  }
  get waitSemaphoreCount() {
    return this.memoryViewUint32[0x4];
  }
  set waitSemaphoreCount(value) {
    this.memoryViewUint32[0x4] = value;
  }
  get pWaitSemaphores() {
    return this._pWaitSemaphores;
  }
  set pWaitSemaphores(value) {
    if (value !== null && value.constructor === Array) {
      this._pWaitSemaphores = value;
    } else if (value === null) {
      this._pWaitSemaphores = null;
    } else {
      throw new TypeError("Invalid type for 'VkSubmitInfo.pWaitSemaphores': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get pWaitDstStageMask() {
    return this._pWaitDstStageMask;
  }
  set pWaitDstStageMask(value) {
    if (value !== null && value.constructor === Int32Array) {
      this._pWaitDstStageMask = value;
      this.memoryViewBigInt64[0x4] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pWaitDstStageMask = null;
      this.memoryViewBigInt64[0x4] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkSubmitInfo.pWaitDstStageMask': Expected 'Int32Array' but got '" + value.constructor.name + "'");
    }
  }
  get commandBufferCount() {
    return this.memoryViewUint32[0xA];
  }
  set commandBufferCount(value) {
    this.memoryViewUint32[0xA] = value;
  }
  get pCommandBuffers() {
    return this._pCommandBuffers;
  }
  set pCommandBuffers(value) {
    if (value !== null && value.constructor === Array) {
      this._pCommandBuffers = value;
    } else if (value === null) {
      this._pCommandBuffers = null;
    } else {
      throw new TypeError("Invalid type for 'VkSubmitInfo.pCommandBuffers': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get signalSemaphoreCount() {
    return this.memoryViewUint32[0xE];
  }
  set signalSemaphoreCount(value) {
    this.memoryViewUint32[0xE] = value;
  }
  get pSignalSemaphores() {
    return this._pSignalSemaphores;
  }
  set pSignalSemaphores(value) {
    if (value !== null && value.constructor === Array) {
      this._pSignalSemaphores = value;
    } else if (value === null) {
      this._pSignalSemaphores = null;
    } else {
      throw new TypeError("Invalid type for 'VkSubmitInfo.pSignalSemaphores': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkSubmitInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkSubmitInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pWaitSemaphores !== null) {
    let array = this._pWaitSemaphores;
    if (array.length !== this.waitSemaphoreCount) {
      throw new RangeError("Invalid array length, expected length of 'waitSemaphoreCount' for 'VkSubmitInfo.pWaitSemaphores'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkSemaphore) {
        throw new TypeError("Invalid type for 'VkSubmitInfo.pWaitSemaphores[" + ii + "]': Expected 'VkSemaphore' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pWaitSemaphoresNative = nativeArray;
    this.memoryViewBigInt64[0x3] = nativeArray.address;
  }
  
  
  if (this._pCommandBuffers !== null) {
    let array = this._pCommandBuffers;
    if (array.length !== this.commandBufferCount) {
      throw new RangeError("Invalid array length, expected length of 'commandBufferCount' for 'VkSubmitInfo.pCommandBuffers'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkCommandBuffer) {
        throw new TypeError("Invalid type for 'VkSubmitInfo.pCommandBuffers[" + ii + "]': Expected 'VkCommandBuffer' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pCommandBuffersNative = nativeArray;
    this.memoryViewBigInt64[0x6] = nativeArray.address;
  }
  
  
  if (this._pSignalSemaphores !== null) {
    let array = this._pSignalSemaphores;
    if (array.length !== this.signalSemaphoreCount) {
      throw new RangeError("Invalid array length, expected length of 'signalSemaphoreCount' for 'VkSubmitInfo.pSignalSemaphores'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkSemaphore) {
        throw new TypeError("Invalid type for 'VkSubmitInfo.pSignalSemaphores[" + ii + "]': Expected 'VkSemaphore' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pSignalSemaphoresNative = nativeArray;
    this.memoryViewBigInt64[0x8] = nativeArray.address;
  }
  
  return true;
};

VkSubmitInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x48);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkSubmitInfo"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
  
  
  
  
};

VkSubmitInfo.byteLength = 0x48;

VkSubmitInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  waitSemaphoreCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pWaitSemaphores: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  pWaitDstStageMask: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
  commandBufferCount: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x4
  }),
  pCommandBuffers: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x8
  }),
  signalSemaphoreCount: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x4
  }),
  pSignalSemaphores: Object.freeze({
    byteOffset: 0x40,
    byteLength: 0x8
  }),
});
/** VkDisplayPropertiesKHR **/
class VkDisplayPropertiesKHR {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x30);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x30) / 0x4);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x30) / 0x4);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);this._display = null;
    this._displayName = null;
    this._physicalDimensions = new VkExtent2D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x10 });
    this._physicalResolution = new VkExtent2D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x18 });
    
    
    
    
    if (typeof opts === "object") {
      
    }
  }
  get display() {
    return this._display;
  }
  get displayName() {
    if (this._displayName !== null) {
      let str = textDecoder.decode(this._displayName);
      return str.substr(0, str.length - 1);
    } else {
      return null;
    }
  }
  get physicalDimensions() {
    return this._physicalDimensions;
  }
  get physicalResolution() {
    return this._physicalResolution;
  }
  get supportedTransforms() {
    return this.memoryViewInt32[0x8];
  }
  get planeReorderPossible() {
    return this.memoryViewUint32[0x9] !== 0;
  }
  get persistentContent() {
    return this.memoryViewUint32[0xA] !== 0;
  }
  
};

VkDisplayPropertiesKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDisplayPropertiesKHR"`);
  
  return true;
};

VkDisplayPropertiesKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x30);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDisplayPropertiesKHR"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x30), 0x0);
  
  
  
  
};

VkDisplayPropertiesKHR.byteLength = 0x30;

VkDisplayPropertiesKHR.memoryLayout = Object.freeze({
  display: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x8
  }),
  displayName: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  physicalDimensions: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  physicalResolution: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  supportedTransforms: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  planeReorderPossible: Object.freeze({
    byteOffset: 0x24,
    byteLength: 0x4
  }),
  persistentContent: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x4
  }),
});
/** VkDisplayPlanePropertiesKHR **/
class VkDisplayPlanePropertiesKHR {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x10);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x10) / 0x4);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);this._currentDisplay = null;
    
    
    if (typeof opts === "object") {
      
    }
  }
  get currentDisplay() {
    return this._currentDisplay;
  }
  get currentStackIndex() {
    return this.memoryViewUint32[0x2];
  }
  
};

VkDisplayPlanePropertiesKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDisplayPlanePropertiesKHR"`);
  
  return true;
};

VkDisplayPlanePropertiesKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x10);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDisplayPlanePropertiesKHR"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x10), 0x0);
};

VkDisplayPlanePropertiesKHR.byteLength = 0x10;

VkDisplayPlanePropertiesKHR.memoryLayout = Object.freeze({
  currentDisplay: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x8
  }),
  currentStackIndex: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
});
/** VkDisplayModeParametersKHR **/
class VkDisplayModeParametersKHR {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0xC);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);this._visibleRegion = new VkExtent2D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x0 });
    
    
    if (typeof opts === "object") {
      if (opts.visibleRegion !== void 0) this.visibleRegion = opts.visibleRegion;
      if (opts.refreshRate !== void 0) this.refreshRate = opts.refreshRate;
      
    }
  }
  get visibleRegion() {
    return this._visibleRegion;
  }
  set visibleRegion(value) {
    if (value !== null && value.constructor === VkExtent2D) {
      value.flush();
      this._visibleRegion = value;
      this.memoryViewBigInt64[0x0] = value.memoryAddress;
      
    } else if (value === null) {
      this._visibleRegion = null;
      this.memoryViewBigInt64[0x0] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkDisplayModeParametersKHR.visibleRegion': Expected 'VkExtent2D' but got '" + value.constructor.name + "'");
    }
  }
  get refreshRate() {
    return this.memoryViewUint32[0x2];
  }
  set refreshRate(value) {
    this.memoryViewUint32[0x2] = value;
  }
  
};

VkDisplayModeParametersKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDisplayModeParametersKHR"`);
  
  
  
  return true;
};

VkDisplayModeParametersKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0xC);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDisplayModeParametersKHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkDisplayModeParametersKHR.byteLength = 0xC;

VkDisplayModeParametersKHR.memoryLayout = Object.freeze({
  visibleRegion: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x8
  }),
  refreshRate: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
});
/** VkDisplayModePropertiesKHR **/
class VkDisplayModePropertiesKHR {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x18);

    if (typeof opts === "object") {

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);this._displayMode = null;
    this._parameters = new VkDisplayModeParametersKHR({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x8 });
    
    if (typeof opts === "object") {
      
    }
  }
  get displayMode() {
    return this._displayMode;
  }
  get parameters() {
    return this._parameters;
  }
  
};

VkDisplayModePropertiesKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDisplayModePropertiesKHR"`);
  
  return true;
};

VkDisplayModePropertiesKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDisplayModePropertiesKHR"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x18), 0x0);
  
  
};

VkDisplayModePropertiesKHR.byteLength = 0x18;

VkDisplayModePropertiesKHR.memoryLayout = Object.freeze({
  displayMode: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x8
  }),
  parameters: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0xC
  }),
});
/** VkDisplayModeCreateInfoKHR **/
class VkDisplayModeCreateInfoKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this._parameters = new VkDisplayModeParametersKHR({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x14 });
    this.sType = 0x3B9AD1D0;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.parameters !== void 0) this.parameters = opts.parameters;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDisplayModeCreateInfoKHR.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get parameters() {
    return this._parameters;
  }
  set parameters(value) {
    if (value !== null && value.constructor === VkDisplayModeParametersKHR) {
      value.flush();
      this._parameters = value;
      this.memoryViewBigInt64[0x3] = value.memoryAddress;
      
    } else if (value === null) {
      this._parameters = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkDisplayModeCreateInfoKHR.parameters': Expected 'VkDisplayModeParametersKHR' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkDisplayModeCreateInfoKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDisplayModeCreateInfoKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  
  return true;
};

VkDisplayModeCreateInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDisplayModeCreateInfoKHR"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
};

VkDisplayModeCreateInfoKHR.byteLength = 0x20;

VkDisplayModeCreateInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  parameters: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0xC
  }),
});
/** VkDisplayPlaneCapabilitiesKHR **/
class VkDisplayPlaneCapabilitiesKHR {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x44);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x44) / 0x4);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._minSrcPosition = new VkOffset2D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x4 });
    this._maxSrcPosition = new VkOffset2D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0xC });
    this._minSrcExtent = new VkExtent2D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x14 });
    this._maxSrcExtent = new VkExtent2D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x1C });
    this._minDstPosition = new VkOffset2D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x24 });
    this._maxDstPosition = new VkOffset2D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x2C });
    this._minDstExtent = new VkExtent2D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x34 });
    this._maxDstExtent = new VkExtent2D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x3C });
    
    if (typeof opts === "object") {
      
    }
  }
  get supportedAlpha() {
    return this.memoryViewInt32[0x0];
  }
  get minSrcPosition() {
    return this._minSrcPosition;
  }
  get maxSrcPosition() {
    return this._maxSrcPosition;
  }
  get minSrcExtent() {
    return this._minSrcExtent;
  }
  get maxSrcExtent() {
    return this._maxSrcExtent;
  }
  get minDstPosition() {
    return this._minDstPosition;
  }
  get maxDstPosition() {
    return this._maxDstPosition;
  }
  get minDstExtent() {
    return this._minDstExtent;
  }
  get maxDstExtent() {
    return this._maxDstExtent;
  }
  
};

VkDisplayPlaneCapabilitiesKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDisplayPlaneCapabilitiesKHR"`);
  
  return true;
};

VkDisplayPlaneCapabilitiesKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x44);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDisplayPlaneCapabilitiesKHR"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x44), 0x0);
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
};

VkDisplayPlaneCapabilitiesKHR.byteLength = 0x44;

VkDisplayPlaneCapabilitiesKHR.memoryLayout = Object.freeze({
  supportedAlpha: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  minSrcPosition: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x8
  }),
  maxSrcPosition: Object.freeze({
    byteOffset: 0xC,
    byteLength: 0x8
  }),
  minSrcExtent: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x8
  }),
  maxSrcExtent: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x8
  }),
  minDstPosition: Object.freeze({
    byteOffset: 0x24,
    byteLength: 0x8
  }),
  maxDstPosition: Object.freeze({
    byteOffset: 0x2C,
    byteLength: 0x8
  }),
  minDstExtent: Object.freeze({
    byteOffset: 0x34,
    byteLength: 0x8
  }),
  maxDstExtent: Object.freeze({
    byteOffset: 0x3C,
    byteLength: 0x8
  }),
});
/** VkDisplaySurfaceCreateInfoKHR **/
class VkDisplaySurfaceCreateInfoKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x40);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
    this.memoryViewFloat32 = new Float32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this._displayMode = null;
    
    
    
    
    
    this._imageExtent = new VkExtent2D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x34 });
    this.sType = 0x3B9AD1D1;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.displayMode !== void 0) this.displayMode = opts.displayMode;
      if (opts.planeIndex !== void 0) this.planeIndex = opts.planeIndex;
      if (opts.planeStackIndex !== void 0) this.planeStackIndex = opts.planeStackIndex;
      if (opts.transform !== void 0) this.transform = opts.transform;
      if (opts.globalAlpha !== void 0) this.globalAlpha = opts.globalAlpha;
      if (opts.alphaMode !== void 0) this.alphaMode = opts.alphaMode;
      if (opts.imageExtent !== void 0) this.imageExtent = opts.imageExtent;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDisplaySurfaceCreateInfoKHR.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get displayMode() {
    return this._displayMode;
  }
  set displayMode(value) {
    if (value !== null && value.constructor === VkDisplayModeKHR) {
      
      this._displayMode = value;
      
      this.memoryViewBigInt64[0x3] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._displayMode = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkDisplaySurfaceCreateInfoKHR.displayMode': Expected 'VkDisplayModeKHR' but got '" + value.constructor.name + "'");
    }
  }
  get planeIndex() {
    return this.memoryViewUint32[0x8];
  }
  set planeIndex(value) {
    this.memoryViewUint32[0x8] = value;
  }
  get planeStackIndex() {
    return this.memoryViewUint32[0x9];
  }
  set planeStackIndex(value) {
    this.memoryViewUint32[0x9] = value;
  }
  get transform() {
    return this.memoryViewInt32[0xA];
  }
  set transform(value) {
    this.memoryViewInt32[0xA] = value;
  }
  get globalAlpha() {
    return this.memoryViewFloat32[0xB];
  }
  set globalAlpha(value) {
    this.memoryViewFloat32[0xB] = value;
  }
  get alphaMode() {
    return this.memoryViewInt32[0xC];
  }
  set alphaMode(value) {
    this.memoryViewInt32[0xC] = value;
  }
  get imageExtent() {
    return this._imageExtent;
  }
  set imageExtent(value) {
    if (value !== null && value.constructor === VkExtent2D) {
      value.flush();
      this._imageExtent = value;
      this.memoryViewBigInt64[0x7] = value.memoryAddress;
      
    } else if (value === null) {
      this._imageExtent = null;
      this.memoryViewBigInt64[0x7] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkDisplaySurfaceCreateInfoKHR.imageExtent': Expected 'VkExtent2D' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkDisplaySurfaceCreateInfoKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDisplaySurfaceCreateInfoKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  
  return true;
};

VkDisplaySurfaceCreateInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x40);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDisplaySurfaceCreateInfoKHR"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
};

VkDisplaySurfaceCreateInfoKHR.byteLength = 0x40;

VkDisplaySurfaceCreateInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  displayMode: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  planeIndex: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  planeStackIndex: Object.freeze({
    byteOffset: 0x24,
    byteLength: 0x4
  }),
  transform: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x4
  }),
  globalAlpha: Object.freeze({
    byteOffset: 0x2C,
    byteLength: 0x4
  }),
  alphaMode: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  imageExtent: Object.freeze({
    byteOffset: 0x34,
    byteLength: 0x8
  }),
});
/** VkDisplayPresentInfoKHR **/
class VkDisplayPresentInfoKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x38);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    this._srcRect = new VkRect2D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x10 });
    this._dstRect = new VkRect2D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x20 });
    
    this.sType = 0x3B9AD5B8;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.srcRect !== void 0) this.srcRect = opts.srcRect;
      if (opts.dstRect !== void 0) this.dstRect = opts.dstRect;
      if (opts.persistent !== void 0) this.persistent = opts.persistent;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDisplayPresentInfoKHR.pNext' isn't allowed to be filled");
  }
  get srcRect() {
    return this._srcRect;
  }
  set srcRect(value) {
    if (value !== null && value.constructor === VkRect2D) {
      value.flush();
      this._srcRect = value;
      this.memoryViewBigInt64[0x2] = value.memoryAddress;
      
    } else if (value === null) {
      this._srcRect = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkDisplayPresentInfoKHR.srcRect': Expected 'VkRect2D' but got '" + value.constructor.name + "'");
    }
  }
  get dstRect() {
    return this._dstRect;
  }
  set dstRect(value) {
    if (value !== null && value.constructor === VkRect2D) {
      value.flush();
      this._dstRect = value;
      this.memoryViewBigInt64[0x4] = value.memoryAddress;
      
    } else if (value === null) {
      this._dstRect = null;
      this.memoryViewBigInt64[0x4] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkDisplayPresentInfoKHR.dstRect': Expected 'VkRect2D' but got '" + value.constructor.name + "'");
    }
  }
  get persistent() {
    return this.memoryViewUint32[0xC] !== 0;
  }
  set persistent(value) {
    this.memoryViewUint32[0xC] = value | 0;
  }
  
};

VkDisplayPresentInfoKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDisplayPresentInfoKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  
  
  
  return true;
};

VkDisplayPresentInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x38);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDisplayPresentInfoKHR"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
  
  
};

VkDisplayPresentInfoKHR.byteLength = 0x38;

VkDisplayPresentInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  srcRect: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x10
  }),
  dstRect: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x10
  }),
  persistent: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
});
/** VkSurfaceCapabilitiesKHR **/
class VkSurfaceCapabilitiesKHR {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x34);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x34) / 0x4);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x34) / 0x4);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    
    this._currentExtent = new VkExtent2D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x8 });
    this._minImageExtent = new VkExtent2D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x10 });
    this._maxImageExtent = new VkExtent2D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x18 });
    
    
    
    
    
    
    if (typeof opts === "object") {
      
    }
  }
  get minImageCount() {
    return this.memoryViewUint32[0x0];
  }
  get maxImageCount() {
    return this.memoryViewUint32[0x1];
  }
  get currentExtent() {
    return this._currentExtent;
  }
  get minImageExtent() {
    return this._minImageExtent;
  }
  get maxImageExtent() {
    return this._maxImageExtent;
  }
  get maxImageArrayLayers() {
    return this.memoryViewUint32[0x8];
  }
  get supportedTransforms() {
    return this.memoryViewInt32[0x9];
  }
  get currentTransform() {
    return this.memoryViewInt32[0xA];
  }
  get supportedCompositeAlpha() {
    return this.memoryViewInt32[0xB];
  }
  get supportedUsageFlags() {
    return this.memoryViewInt32[0xC];
  }
  
};

VkSurfaceCapabilitiesKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkSurfaceCapabilitiesKHR"`);
  
  return true;
};

VkSurfaceCapabilitiesKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x34);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkSurfaceCapabilitiesKHR"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x34), 0x0);
  
  
  
  
  
  
};

VkSurfaceCapabilitiesKHR.byteLength = 0x34;

VkSurfaceCapabilitiesKHR.memoryLayout = Object.freeze({
  minImageCount: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  maxImageCount: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  currentExtent: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  minImageExtent: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  maxImageExtent: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  maxImageArrayLayers: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  supportedTransforms: Object.freeze({
    byteOffset: 0x24,
    byteLength: 0x4
  }),
  currentTransform: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x4
  }),
  supportedCompositeAlpha: Object.freeze({
    byteOffset: 0x2C,
    byteLength: 0x4
  }),
  supportedUsageFlags: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
});
/** VkWin32SurfaceCreateInfoKHR **/
class VkWin32SurfaceCreateInfoKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x28);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    
    this.sType = 0x3B9AED28;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.hinstance !== void 0) this.hinstance = opts.hinstance;
      if (opts.hwnd !== void 0) this.hwnd = opts.hwnd;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkWin32SurfaceCreateInfoKHR.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get hinstance() {
    return this.memoryViewBigInt64[0x3];
  }
  set hinstance(value) {
    this.memoryViewBigInt64[0x3] = value;
  }
  get hwnd() {
    return this.memoryViewBigInt64[0x4];
  }
  set hwnd(value) {
    this.memoryViewBigInt64[0x4] = value;
  }
  
};

VkWin32SurfaceCreateInfoKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkWin32SurfaceCreateInfoKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkWin32SurfaceCreateInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x28);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkWin32SurfaceCreateInfoKHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkWin32SurfaceCreateInfoKHR.byteLength = 0x28;

VkWin32SurfaceCreateInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  hinstance: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  hwnd: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
});
/** VkSurfaceFormatKHR **/
class VkSurfaceFormatKHR {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x8);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x8) / 0x4);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    
    
    if (typeof opts === "object") {
      
    }
  }
  get format() {
    return this.memoryViewInt32[0x0];
  }
  get colorSpace() {
    return this.memoryViewInt32[0x1];
  }
  
};

VkSurfaceFormatKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkSurfaceFormatKHR"`);
  
  return true;
};

VkSurfaceFormatKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x8);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkSurfaceFormatKHR"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x8), 0x0);
};

VkSurfaceFormatKHR.byteLength = 0x8;

VkSurfaceFormatKHR.memoryLayout = Object.freeze({
  format: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  colorSpace: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
});
/** VkSwapchainCreateInfoKHR **/
class VkSwapchainCreateInfoKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x68);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this._surface = null;
    
    
    
    this._imageExtent = new VkExtent2D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x2C });
    
    
    
    
    this._pQueueFamilyIndices = null;
    
    
    
    
    this._oldSwapchain = null;
    this.sType = 0x3B9ACDE8;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.surface !== void 0) this.surface = opts.surface;
      if (opts.minImageCount !== void 0) this.minImageCount = opts.minImageCount;
      if (opts.imageFormat !== void 0) this.imageFormat = opts.imageFormat;
      if (opts.imageColorSpace !== void 0) this.imageColorSpace = opts.imageColorSpace;
      if (opts.imageExtent !== void 0) this.imageExtent = opts.imageExtent;
      if (opts.imageArrayLayers !== void 0) this.imageArrayLayers = opts.imageArrayLayers;
      if (opts.imageUsage !== void 0) this.imageUsage = opts.imageUsage;
      if (opts.imageSharingMode !== void 0) this.imageSharingMode = opts.imageSharingMode;
      if (opts.queueFamilyIndexCount !== void 0) this.queueFamilyIndexCount = opts.queueFamilyIndexCount;
      if (opts.pQueueFamilyIndices !== void 0) this.pQueueFamilyIndices = opts.pQueueFamilyIndices;
      if (opts.preTransform !== void 0) this.preTransform = opts.preTransform;
      if (opts.compositeAlpha !== void 0) this.compositeAlpha = opts.compositeAlpha;
      if (opts.presentMode !== void 0) this.presentMode = opts.presentMode;
      if (opts.clipped !== void 0) this.clipped = opts.clipped;
      if (opts.oldSwapchain !== void 0) this.oldSwapchain = opts.oldSwapchain;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null && (value instanceof Object)) {
      let {sType} = value;
      if (sType <= -1) throw new TypeError("Invalid type for 'VkSwapchainCreateInfoKHR.pNext'");
      switch (sType) {
          
        case 0x3B9C2D7B:
        case 0x3B9BB46C:
        case 0x3B9D0838:
          break;
        default:
          throw new TypeError("Invalid type for 'VkSwapchainCreateInfoKHR.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkSwapchainCreateInfoKHR.pNext'");
    }
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get surface() {
    return this._surface;
  }
  set surface(value) {
    if (value !== null && value.constructor === VkSurfaceKHR) {
      
      this._surface = value;
      
      this.memoryViewBigInt64[0x3] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._surface = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkSwapchainCreateInfoKHR.surface': Expected 'VkSurfaceKHR' but got '" + value.constructor.name + "'");
    }
  }
  get minImageCount() {
    return this.memoryViewUint32[0x8];
  }
  set minImageCount(value) {
    this.memoryViewUint32[0x8] = value;
  }
  get imageFormat() {
    return this.memoryViewInt32[0x9];
  }
  set imageFormat(value) {
    this.memoryViewInt32[0x9] = value;
  }
  get imageColorSpace() {
    return this.memoryViewInt32[0xA];
  }
  set imageColorSpace(value) {
    this.memoryViewInt32[0xA] = value;
  }
  get imageExtent() {
    return this._imageExtent;
  }
  set imageExtent(value) {
    if (value !== null && value.constructor === VkExtent2D) {
      value.flush();
      this._imageExtent = value;
      this.memoryViewBigInt64[0x6] = value.memoryAddress;
      
    } else if (value === null) {
      this._imageExtent = null;
      this.memoryViewBigInt64[0x6] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkSwapchainCreateInfoKHR.imageExtent': Expected 'VkExtent2D' but got '" + value.constructor.name + "'");
    }
  }
  get imageArrayLayers() {
    return this.memoryViewUint32[0xD];
  }
  set imageArrayLayers(value) {
    this.memoryViewUint32[0xD] = value;
  }
  get imageUsage() {
    return this.memoryViewInt32[0xE];
  }
  set imageUsage(value) {
    this.memoryViewInt32[0xE] = value;
  }
  get imageSharingMode() {
    return this.memoryViewInt32[0xF];
  }
  set imageSharingMode(value) {
    this.memoryViewInt32[0xF] = value;
  }
  get queueFamilyIndexCount() {
    return this.memoryViewUint32[0x10];
  }
  set queueFamilyIndexCount(value) {
    this.memoryViewUint32[0x10] = value;
  }
  get pQueueFamilyIndices() {
    return this._pQueueFamilyIndices;
  }
  set pQueueFamilyIndices(value) {
    if (value !== null && value.constructor === Uint32Array) {
      this._pQueueFamilyIndices = value;
      this.memoryViewBigInt64[0x9] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pQueueFamilyIndices = null;
      this.memoryViewBigInt64[0x9] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkSwapchainCreateInfoKHR.pQueueFamilyIndices': Expected 'Uint32Array' but got '" + value.constructor.name + "'");
    }
  }
  get preTransform() {
    return this.memoryViewInt32[0x14];
  }
  set preTransform(value) {
    this.memoryViewInt32[0x14] = value;
  }
  get compositeAlpha() {
    return this.memoryViewInt32[0x15];
  }
  set compositeAlpha(value) {
    this.memoryViewInt32[0x15] = value;
  }
  get presentMode() {
    return this.memoryViewInt32[0x16];
  }
  set presentMode(value) {
    this.memoryViewInt32[0x16] = value;
  }
  get clipped() {
    return this.memoryViewUint32[0x17] !== 0;
  }
  set clipped(value) {
    this.memoryViewUint32[0x17] = value | 0;
  }
  get oldSwapchain() {
    return this._oldSwapchain;
  }
  set oldSwapchain(value) {
    if (value !== null && value.constructor === VkSwapchainKHR) {
      
      this._oldSwapchain = value;
      
      this.memoryViewBigInt64[0xC] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._oldSwapchain = null;
      this.memoryViewBigInt64[0xC] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkSwapchainCreateInfoKHR.oldSwapchain': Expected 'VkSwapchainKHR' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkSwapchainCreateInfoKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkSwapchainCreateInfoKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  
  return true;
};

VkSwapchainCreateInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x68);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkSwapchainCreateInfoKHR"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
};

VkSwapchainCreateInfoKHR.byteLength = 0x68;

VkSwapchainCreateInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  surface: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  minImageCount: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  imageFormat: Object.freeze({
    byteOffset: 0x24,
    byteLength: 0x4
  }),
  imageColorSpace: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x4
  }),
  imageExtent: Object.freeze({
    byteOffset: 0x2C,
    byteLength: 0x8
  }),
  imageArrayLayers: Object.freeze({
    byteOffset: 0x34,
    byteLength: 0x4
  }),
  imageUsage: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x4
  }),
  imageSharingMode: Object.freeze({
    byteOffset: 0x3C,
    byteLength: 0x4
  }),
  queueFamilyIndexCount: Object.freeze({
    byteOffset: 0x40,
    byteLength: 0x4
  }),
  pQueueFamilyIndices: Object.freeze({
    byteOffset: 0x48,
    byteLength: 0x8
  }),
  preTransform: Object.freeze({
    byteOffset: 0x50,
    byteLength: 0x4
  }),
  compositeAlpha: Object.freeze({
    byteOffset: 0x54,
    byteLength: 0x4
  }),
  presentMode: Object.freeze({
    byteOffset: 0x58,
    byteLength: 0x4
  }),
  clipped: Object.freeze({
    byteOffset: 0x5C,
    byteLength: 0x4
  }),
  oldSwapchain: Object.freeze({
    byteOffset: 0x60,
    byteLength: 0x8
  }),
});
/** VkPresentInfoKHR **/
class VkPresentInfoKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x40);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this._pWaitSemaphores = null;
    this._pWaitSemaphoresNative = null;
    
    this._pSwapchains = null;
    this._pSwapchainsNative = null;
    this._pImageIndices = null;
    this._pResults = null;
    this.sType = 0x3B9ACDE9;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.waitSemaphoreCount !== void 0) this.waitSemaphoreCount = opts.waitSemaphoreCount;
      if (opts.pWaitSemaphores !== void 0) this.pWaitSemaphores = opts.pWaitSemaphores;
      if (opts.swapchainCount !== void 0) this.swapchainCount = opts.swapchainCount;
      if (opts.pSwapchains !== void 0) this.pSwapchains = opts.pSwapchains;
      if (opts.pImageIndices !== void 0) this.pImageIndices = opts.pImageIndices;
      if (opts.pResults !== void 0) this.pResults = opts.pResults;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null && (value instanceof Object)) {
      let {sType} = value;
      if (sType <= -1) throw new TypeError("Invalid type for 'VkPresentInfoKHR.pNext'");
      switch (sType) {
          
        case 0x3B9AD5B8:
        case 0x3B9C1220:
        case 0x3B9BB46B:
        case 0x3B9C3160:
          break;
        default:
          throw new TypeError("Invalid type for 'VkPresentInfoKHR.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkPresentInfoKHR.pNext'");
    }
  }
  get waitSemaphoreCount() {
    return this.memoryViewUint32[0x4];
  }
  set waitSemaphoreCount(value) {
    this.memoryViewUint32[0x4] = value;
  }
  get pWaitSemaphores() {
    return this._pWaitSemaphores;
  }
  set pWaitSemaphores(value) {
    if (value !== null && value.constructor === Array) {
      this._pWaitSemaphores = value;
    } else if (value === null) {
      this._pWaitSemaphores = null;
    } else {
      throw new TypeError("Invalid type for 'VkPresentInfoKHR.pWaitSemaphores': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get swapchainCount() {
    return this.memoryViewUint32[0x8];
  }
  set swapchainCount(value) {
    this.memoryViewUint32[0x8] = value;
  }
  get pSwapchains() {
    return this._pSwapchains;
  }
  set pSwapchains(value) {
    if (value !== null && value.constructor === Array) {
      this._pSwapchains = value;
    } else if (value === null) {
      this._pSwapchains = null;
    } else {
      throw new TypeError("Invalid type for 'VkPresentInfoKHR.pSwapchains': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get pImageIndices() {
    return this._pImageIndices;
  }
  set pImageIndices(value) {
    if (value !== null && value.constructor === Uint32Array) {
      this._pImageIndices = value;
      this.memoryViewBigInt64[0x6] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pImageIndices = null;
      this.memoryViewBigInt64[0x6] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkPresentInfoKHR.pImageIndices': Expected 'Uint32Array' but got '" + value.constructor.name + "'");
    }
  }
  get pResults() {
    return this._pResults;
  }
  set pResults(value) {
    if (value !== null && value.constructor === Int32Array) {
      this._pResults = value;
      this.memoryViewBigInt64[0x7] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pResults = null;
      this.memoryViewBigInt64[0x7] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkPresentInfoKHR.pResults': Expected 'Int32Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkPresentInfoKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPresentInfoKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pWaitSemaphores !== null) {
    let array = this._pWaitSemaphores;
    if (array.length !== this.waitSemaphoreCount) {
      throw new RangeError("Invalid array length, expected length of 'waitSemaphoreCount' for 'VkPresentInfoKHR.pWaitSemaphores'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkSemaphore) {
        throw new TypeError("Invalid type for 'VkPresentInfoKHR.pWaitSemaphores[" + ii + "]': Expected 'VkSemaphore' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pWaitSemaphoresNative = nativeArray;
    this.memoryViewBigInt64[0x3] = nativeArray.address;
  }
  
  
  if (this._pSwapchains !== null) {
    let array = this._pSwapchains;
    if (array.length !== this.swapchainCount) {
      throw new RangeError("Invalid array length, expected length of 'swapchainCount' for 'VkPresentInfoKHR.pSwapchains'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkSwapchainKHR) {
        throw new TypeError("Invalid type for 'VkPresentInfoKHR.pSwapchains[" + ii + "]': Expected 'VkSwapchainKHR' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pSwapchainsNative = nativeArray;
    this.memoryViewBigInt64[0x5] = nativeArray.address;
  }
  
  return true;
};

VkPresentInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x40);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPresentInfoKHR"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
  
  
};

VkPresentInfoKHR.byteLength = 0x40;

VkPresentInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  waitSemaphoreCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pWaitSemaphores: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  swapchainCount: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  pSwapchains: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
  pImageIndices: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x8
  }),
  pResults: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x8
  }),
});
/** VkDebugReportCallbackCreateInfoEXT **/
class VkDebugReportCallbackCreateInfoEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x28);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this._pUserData = null;
    this.sType = 0x3B9AF4F8;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.pUserData !== void 0) this.pUserData = opts.pUserData;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDebugReportCallbackCreateInfoEXT.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get pUserData() {
    return this._pUserData;
  }
  set pUserData(value) {
    if (value !== null && value.constructor === ArrayBuffer) {
      this._pUserData = value;
      this.memoryViewBigInt64[0x4] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pUserData = null;
      this.memoryViewBigInt64[0x4] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkDebugReportCallbackCreateInfoEXT.pUserData': Expected 'ArrayBuffer' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkDebugReportCallbackCreateInfoEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDebugReportCallbackCreateInfoEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDebugReportCallbackCreateInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x28);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDebugReportCallbackCreateInfoEXT"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkDebugReportCallbackCreateInfoEXT.byteLength = 0x28;

VkDebugReportCallbackCreateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pUserData: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
});
/** VkValidationFlagsEXT **/
class VkValidationFlagsEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this._pDisabledValidationChecks = null;
    this.sType = 0x3B9BB848;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.disabledValidationCheckCount !== void 0) this.disabledValidationCheckCount = opts.disabledValidationCheckCount;
      if (opts.pDisabledValidationChecks !== void 0) this.pDisabledValidationChecks = opts.pDisabledValidationChecks;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkValidationFlagsEXT.pNext' isn't allowed to be filled");
  }
  get disabledValidationCheckCount() {
    return this.memoryViewUint32[0x4];
  }
  set disabledValidationCheckCount(value) {
    this.memoryViewUint32[0x4] = value;
  }
  get pDisabledValidationChecks() {
    return this._pDisabledValidationChecks;
  }
  set pDisabledValidationChecks(value) {
    if (value !== null && value.constructor === Int32Array) {
      this._pDisabledValidationChecks = value;
      this.memoryViewBigInt64[0x3] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pDisabledValidationChecks = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkValidationFlagsEXT.pDisabledValidationChecks': Expected 'Int32Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkValidationFlagsEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkValidationFlagsEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkValidationFlagsEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkValidationFlagsEXT"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkValidationFlagsEXT.byteLength = 0x20;

VkValidationFlagsEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  disabledValidationCheckCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pDisabledValidationChecks: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkValidationFeaturesEXT **/
class VkValidationFeaturesEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x30);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this._pEnabledValidationFeatures = null;
    
    this._pDisabledValidationFeatures = null;
    this.sType = 0x3B9E8ED8;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.enabledValidationFeatureCount !== void 0) this.enabledValidationFeatureCount = opts.enabledValidationFeatureCount;
      if (opts.pEnabledValidationFeatures !== void 0) this.pEnabledValidationFeatures = opts.pEnabledValidationFeatures;
      if (opts.disabledValidationFeatureCount !== void 0) this.disabledValidationFeatureCount = opts.disabledValidationFeatureCount;
      if (opts.pDisabledValidationFeatures !== void 0) this.pDisabledValidationFeatures = opts.pDisabledValidationFeatures;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkValidationFeaturesEXT.pNext' isn't allowed to be filled");
  }
  get enabledValidationFeatureCount() {
    return this.memoryViewUint32[0x4];
  }
  set enabledValidationFeatureCount(value) {
    this.memoryViewUint32[0x4] = value;
  }
  get pEnabledValidationFeatures() {
    return this._pEnabledValidationFeatures;
  }
  set pEnabledValidationFeatures(value) {
    if (value !== null && value.constructor === Int32Array) {
      this._pEnabledValidationFeatures = value;
      this.memoryViewBigInt64[0x3] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pEnabledValidationFeatures = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkValidationFeaturesEXT.pEnabledValidationFeatures': Expected 'Int32Array' but got '" + value.constructor.name + "'");
    }
  }
  get disabledValidationFeatureCount() {
    return this.memoryViewUint32[0x8];
  }
  set disabledValidationFeatureCount(value) {
    this.memoryViewUint32[0x8] = value;
  }
  get pDisabledValidationFeatures() {
    return this._pDisabledValidationFeatures;
  }
  set pDisabledValidationFeatures(value) {
    if (value !== null && value.constructor === Int32Array) {
      this._pDisabledValidationFeatures = value;
      this.memoryViewBigInt64[0x5] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pDisabledValidationFeatures = null;
      this.memoryViewBigInt64[0x5] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkValidationFeaturesEXT.pDisabledValidationFeatures': Expected 'Int32Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkValidationFeaturesEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkValidationFeaturesEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkValidationFeaturesEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x30);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkValidationFeaturesEXT"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkValidationFeaturesEXT.byteLength = 0x30;

VkValidationFeaturesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  enabledValidationFeatureCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pEnabledValidationFeatures: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  disabledValidationFeatureCount: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  pDisabledValidationFeatures: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
});
/** VkPipelineRasterizationStateRasterizationOrderAMD **/
class VkPipelineRasterizationStateRasterizationOrderAMD {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = 0x3B9B1050;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.rasterizationOrder !== void 0) this.rasterizationOrder = opts.rasterizationOrder;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPipelineRasterizationStateRasterizationOrderAMD.pNext' isn't allowed to be filled");
  }
  get rasterizationOrder() {
    return this.memoryViewInt32[0x4];
  }
  set rasterizationOrder(value) {
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkPipelineRasterizationStateRasterizationOrderAMD.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPipelineRasterizationStateRasterizationOrderAMD"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPipelineRasterizationStateRasterizationOrderAMD.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPipelineRasterizationStateRasterizationOrderAMD"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPipelineRasterizationStateRasterizationOrderAMD.byteLength = 0x18;

VkPipelineRasterizationStateRasterizationOrderAMD.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  rasterizationOrder: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkDebugMarkerObjectNameInfoEXT **/
class VkDebugMarkerObjectNameInfoEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x28);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    this._pObjectName = null;
    this.sType = 0x3B9B1FF0;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.objectType !== void 0) this.objectType = opts.objectType;
      if (opts.object !== void 0) this.object = opts.object;
      if (opts.pObjectName !== void 0) this.pObjectName = opts.pObjectName;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDebugMarkerObjectNameInfoEXT.pNext' isn't allowed to be filled");
  }
  get objectType() {
    return this.memoryViewInt32[0x4];
  }
  set objectType(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get object() {
    return this.memoryViewBigUint64[0x3];
  }
  set object(value) {
    this.memoryViewBigUint64[0x3] = value;
  }
  get pObjectName() {
    if (this._pObjectName !== null) {
      let str = textDecoder.decode(this._pObjectName);
      return str.substr(0, str.length - 1);
    } else {
      return null;
    }
  }
  set pObjectName(value) {
    if (value !== null && value.constructor === String) {
      this._pObjectName = textEncoder.encode(value + NULLT).buffer;
      this.memoryViewBigInt64[0x4] = getAddressFromArrayBuffer(this._pObjectName);
    } else if (value === null) {
      this._pObjectName = null;
      this.memoryViewBigInt64[0x4] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkDebugMarkerObjectNameInfoEXT.pObjectName': Expected 'String' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkDebugMarkerObjectNameInfoEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDebugMarkerObjectNameInfoEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDebugMarkerObjectNameInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x28);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDebugMarkerObjectNameInfoEXT"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkDebugMarkerObjectNameInfoEXT.byteLength = 0x28;

VkDebugMarkerObjectNameInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  objectType: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  object: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  pObjectName: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
});
/** VkDebugMarkerObjectTagInfoEXT **/
class VkDebugMarkerObjectTagInfoEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x38);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    
    
    this._pTag = null;
    this.sType = 0x3B9B1FF1;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.objectType !== void 0) this.objectType = opts.objectType;
      if (opts.object !== void 0) this.object = opts.object;
      if (opts.tagName !== void 0) this.tagName = opts.tagName;
      if (opts.tagSize !== void 0) this.tagSize = opts.tagSize;
      if (opts.pTag !== void 0) this.pTag = opts.pTag;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDebugMarkerObjectTagInfoEXT.pNext' isn't allowed to be filled");
  }
  get objectType() {
    return this.memoryViewInt32[0x4];
  }
  set objectType(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get object() {
    return this.memoryViewBigUint64[0x3];
  }
  set object(value) {
    this.memoryViewBigUint64[0x3] = value;
  }
  get tagName() {
    return this.memoryViewBigUint64[0x4];
  }
  set tagName(value) {
    this.memoryViewBigUint64[0x4] = value;
  }
  get tagSize() {
    return this.memoryViewBigInt64[0x5];
  }
  set tagSize(value) {
    this.memoryViewBigInt64[0x5] = value;
  }
  get pTag() {
    return this._pTag;
  }
  set pTag(value) {
    if (value !== null && value.constructor === ArrayBuffer) {
      this._pTag = value;
      this.memoryViewBigInt64[0x6] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pTag = null;
      this.memoryViewBigInt64[0x6] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkDebugMarkerObjectTagInfoEXT.pTag': Expected 'ArrayBuffer' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkDebugMarkerObjectTagInfoEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDebugMarkerObjectTagInfoEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDebugMarkerObjectTagInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x38);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDebugMarkerObjectTagInfoEXT"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkDebugMarkerObjectTagInfoEXT.byteLength = 0x38;

VkDebugMarkerObjectTagInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  objectType: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  object: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  tagName: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
  tagSize: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
  pTag: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x8
  }),
});
/** VkDebugMarkerMarkerInfoEXT **/
class VkDebugMarkerMarkerInfoEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x28);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewFloat32 = new Float32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    this._pMarkerName = null;
    this._color = [...Array(4)].fill(0x0);
    this.sType = 0x3B9B1FF2;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.pMarkerName !== void 0) this.pMarkerName = opts.pMarkerName;
      if (opts.color !== void 0) this.color = opts.color;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDebugMarkerMarkerInfoEXT.pNext' isn't allowed to be filled");
  }
  get pMarkerName() {
    if (this._pMarkerName !== null) {
      let str = textDecoder.decode(this._pMarkerName);
      return str.substr(0, str.length - 1);
    } else {
      return null;
    }
  }
  set pMarkerName(value) {
    if (value !== null && value.constructor === String) {
      this._pMarkerName = textEncoder.encode(value + NULLT).buffer;
      this.memoryViewBigInt64[0x2] = getAddressFromArrayBuffer(this._pMarkerName);
    } else if (value === null) {
      this._pMarkerName = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkDebugMarkerMarkerInfoEXT.pMarkerName': Expected 'String' but got '" + value.constructor.name + "'");
    }
  }
  get color() {
    return this._color;
  }
  set color(value) {
    if (value !== null && value.constructor === Array) {
      this._color = value;
    } else if (value === null) {
      this._color = null;
    } else {
      throw new TypeError("Invalid type for 'VkDebugMarkerMarkerInfoEXT.color': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkDebugMarkerMarkerInfoEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDebugMarkerMarkerInfoEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._color !== null) {
    let array = this._color;
    // validate length
    if (array.length !== 4) {
      throw new RangeError("Invalid array length, expected length of '4' for 'VkDebugMarkerMarkerInfoEXT.color'");
      return false;
    }
    // validate type
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== Number) {
        throw new TypeError("Invalid type for 'VkDebugMarkerMarkerInfoEXT.color[" + ii + "]': Expected 'Number' but got '" + array[ii].constructor.name + "'");
        return false;
      }
    };
    for (let ii = 0; ii < array.length; ++ii) {
      this.memoryViewFloat32[0x6] = array[ii];
    };
  } else {
    this.memoryViewFloat32[0x6] = 0x0;
  }
  
  return true;
};

VkDebugMarkerMarkerInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x28);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDebugMarkerMarkerInfoEXT"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
};

VkDebugMarkerMarkerInfoEXT.byteLength = 0x28;

VkDebugMarkerMarkerInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  pMarkerName: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  color: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x10
  }),
});
/** VkDedicatedAllocationImageCreateInfoNV **/
class VkDedicatedAllocationImageCreateInfoNV {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = 0x3B9B2F90;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.dedicatedAllocation !== void 0) this.dedicatedAllocation = opts.dedicatedAllocation;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDedicatedAllocationImageCreateInfoNV.pNext' isn't allowed to be filled");
  }
  get dedicatedAllocation() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set dedicatedAllocation(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  
};

VkDedicatedAllocationImageCreateInfoNV.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDedicatedAllocationImageCreateInfoNV"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDedicatedAllocationImageCreateInfoNV.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDedicatedAllocationImageCreateInfoNV"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkDedicatedAllocationImageCreateInfoNV.byteLength = 0x18;

VkDedicatedAllocationImageCreateInfoNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  dedicatedAllocation: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkDedicatedAllocationBufferCreateInfoNV **/
class VkDedicatedAllocationBufferCreateInfoNV {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = 0x3B9B2F91;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.dedicatedAllocation !== void 0) this.dedicatedAllocation = opts.dedicatedAllocation;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDedicatedAllocationBufferCreateInfoNV.pNext' isn't allowed to be filled");
  }
  get dedicatedAllocation() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set dedicatedAllocation(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  
};

VkDedicatedAllocationBufferCreateInfoNV.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDedicatedAllocationBufferCreateInfoNV"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDedicatedAllocationBufferCreateInfoNV.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDedicatedAllocationBufferCreateInfoNV"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkDedicatedAllocationBufferCreateInfoNV.byteLength = 0x18;

VkDedicatedAllocationBufferCreateInfoNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  dedicatedAllocation: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkDedicatedAllocationMemoryAllocateInfoNV **/
class VkDedicatedAllocationMemoryAllocateInfoNV {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    this._image = null;
    this._buffer = null;
    this.sType = 0x3B9B2F92;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.image !== void 0) this.image = opts.image;
      if (opts.buffer !== void 0) this.buffer = opts.buffer;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDedicatedAllocationMemoryAllocateInfoNV.pNext' isn't allowed to be filled");
  }
  get image() {
    return this._image;
  }
  set image(value) {
    if (value !== null && value.constructor === VkImage) {
      
      this._image = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._image = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkDedicatedAllocationMemoryAllocateInfoNV.image': Expected 'VkImage' but got '" + value.constructor.name + "'");
    }
  }
  get buffer() {
    return this._buffer;
  }
  set buffer(value) {
    if (value !== null && value.constructor === VkBuffer) {
      
      this._buffer = value;
      
      this.memoryViewBigInt64[0x3] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._buffer = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkDedicatedAllocationMemoryAllocateInfoNV.buffer': Expected 'VkBuffer' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkDedicatedAllocationMemoryAllocateInfoNV.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDedicatedAllocationMemoryAllocateInfoNV"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDedicatedAllocationMemoryAllocateInfoNV.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDedicatedAllocationMemoryAllocateInfoNV"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkDedicatedAllocationMemoryAllocateInfoNV.byteLength = 0x20;

VkDedicatedAllocationMemoryAllocateInfoNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  image: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  buffer: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkExternalImageFormatPropertiesNV **/
class VkExternalImageFormatPropertiesNV {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x30);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x30) / 0x4);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);this._imageFormatProperties = new VkImageFormatProperties({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x0 });
    
    
    
    
    if (typeof opts === "object") {
      
    }
  }
  get imageFormatProperties() {
    return this._imageFormatProperties;
  }
  get externalMemoryFeatures() {
    return this.memoryViewInt32[0x8];
  }
  get exportFromImportedHandleTypes() {
    return this.memoryViewInt32[0x9];
  }
  get compatibleHandleTypes() {
    return this.memoryViewInt32[0xA];
  }
  
};

VkExternalImageFormatPropertiesNV.prototype.flush = function flush() {
  //console.log(`Flushing: "VkExternalImageFormatPropertiesNV"`);
  
  return true;
};

VkExternalImageFormatPropertiesNV.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x30);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkExternalImageFormatPropertiesNV"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x30), 0x0);
  
  
};

VkExternalImageFormatPropertiesNV.byteLength = 0x30;

VkExternalImageFormatPropertiesNV.memoryLayout = Object.freeze({
  imageFormatProperties: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x20
  }),
  externalMemoryFeatures: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  exportFromImportedHandleTypes: Object.freeze({
    byteOffset: 0x24,
    byteLength: 0x4
  }),
  compatibleHandleTypes: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x4
  }),
});
/** VkExternalMemoryImageCreateInfoNV **/
class VkExternalMemoryImageCreateInfoNV {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = 0x3B9BA4C0;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleTypes !== void 0) this.handleTypes = opts.handleTypes;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkExternalMemoryImageCreateInfoNV.pNext' isn't allowed to be filled");
  }
  get handleTypes() {
    return this.memoryViewInt32[0x4];
  }
  set handleTypes(value) {
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkExternalMemoryImageCreateInfoNV.prototype.flush = function flush() {
  //console.log(`Flushing: "VkExternalMemoryImageCreateInfoNV"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkExternalMemoryImageCreateInfoNV.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkExternalMemoryImageCreateInfoNV"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkExternalMemoryImageCreateInfoNV.byteLength = 0x18;

VkExternalMemoryImageCreateInfoNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  handleTypes: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkExportMemoryAllocateInfoNV **/
class VkExportMemoryAllocateInfoNV {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = 0x3B9BA4C1;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleTypes !== void 0) this.handleTypes = opts.handleTypes;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkExportMemoryAllocateInfoNV.pNext' isn't allowed to be filled");
  }
  get handleTypes() {
    return this.memoryViewInt32[0x4];
  }
  set handleTypes(value) {
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkExportMemoryAllocateInfoNV.prototype.flush = function flush() {
  //console.log(`Flushing: "VkExportMemoryAllocateInfoNV"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkExportMemoryAllocateInfoNV.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkExportMemoryAllocateInfoNV"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkExportMemoryAllocateInfoNV.byteLength = 0x18;

VkExportMemoryAllocateInfoNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  handleTypes: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkImportMemoryWin32HandleInfoNV **/
class VkImportMemoryWin32HandleInfoNV {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    this.sType = 0x3B9BA8A8;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      if (opts.handle !== void 0) this.handle = opts.handle;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkImportMemoryWin32HandleInfoNV.pNext' isn't allowed to be filled");
  }
  get handleType() {
    return this.memoryViewInt32[0x4];
  }
  set handleType(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get handle() {
    return this.memoryViewBigInt64[0x3];
  }
  set handle(value) {
    this.memoryViewBigInt64[0x3] = value;
  }
  
};

VkImportMemoryWin32HandleInfoNV.prototype.flush = function flush() {
  //console.log(`Flushing: "VkImportMemoryWin32HandleInfoNV"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkImportMemoryWin32HandleInfoNV.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkImportMemoryWin32HandleInfoNV"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkImportMemoryWin32HandleInfoNV.byteLength = 0x20;

VkImportMemoryWin32HandleInfoNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  handleType: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  handle: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkExportMemoryWin32HandleInfoNV **/
class VkExportMemoryWin32HandleInfoNV {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    this.sType = 0x3B9BA8A9;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkExportMemoryWin32HandleInfoNV.pNext' isn't allowed to be filled");
  }
  
};

VkExportMemoryWin32HandleInfoNV.prototype.flush = function flush() {
  //console.log(`Flushing: "VkExportMemoryWin32HandleInfoNV"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkExportMemoryWin32HandleInfoNV.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkExportMemoryWin32HandleInfoNV"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkExportMemoryWin32HandleInfoNV.byteLength = 0x20;

VkExportMemoryWin32HandleInfoNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
});
/** VkWin32KeyedMutexAcquireReleaseInfoNV **/
class VkWin32KeyedMutexAcquireReleaseInfoNV {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x48);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this._pAcquireSyncs = null;
    this._pAcquireSyncsNative = null;
    this._pAcquireKeys = null;
    this._pAcquireTimeoutMilliseconds = null;
    
    this._pReleaseSyncs = null;
    this._pReleaseSyncsNative = null;
    this._pReleaseKeys = null;
    this.sType = 0x3B9BAC90;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.acquireCount !== void 0) this.acquireCount = opts.acquireCount;
      if (opts.pAcquireSyncs !== void 0) this.pAcquireSyncs = opts.pAcquireSyncs;
      if (opts.pAcquireKeys !== void 0) this.pAcquireKeys = opts.pAcquireKeys;
      if (opts.pAcquireTimeoutMilliseconds !== void 0) this.pAcquireTimeoutMilliseconds = opts.pAcquireTimeoutMilliseconds;
      if (opts.releaseCount !== void 0) this.releaseCount = opts.releaseCount;
      if (opts.pReleaseSyncs !== void 0) this.pReleaseSyncs = opts.pReleaseSyncs;
      if (opts.pReleaseKeys !== void 0) this.pReleaseKeys = opts.pReleaseKeys;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkWin32KeyedMutexAcquireReleaseInfoNV.pNext' isn't allowed to be filled");
  }
  get acquireCount() {
    return this.memoryViewUint32[0x4];
  }
  set acquireCount(value) {
    this.memoryViewUint32[0x4] = value;
  }
  get pAcquireSyncs() {
    return this._pAcquireSyncs;
  }
  set pAcquireSyncs(value) {
    if (value !== null && value.constructor === Array) {
      this._pAcquireSyncs = value;
    } else if (value === null) {
      this._pAcquireSyncs = null;
    } else {
      throw new TypeError("Invalid type for 'VkWin32KeyedMutexAcquireReleaseInfoNV.pAcquireSyncs': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get pAcquireKeys() {
    return this._pAcquireKeys;
  }
  set pAcquireKeys(value) {
    if (value !== null && value.constructor === BigUint64Array) {
      this._pAcquireKeys = value;
      this.memoryViewBigInt64[0x4] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pAcquireKeys = null;
      this.memoryViewBigInt64[0x4] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkWin32KeyedMutexAcquireReleaseInfoNV.pAcquireKeys': Expected 'BigUint64Array' but got '" + value.constructor.name + "'");
    }
  }
  get pAcquireTimeoutMilliseconds() {
    return this._pAcquireTimeoutMilliseconds;
  }
  set pAcquireTimeoutMilliseconds(value) {
    if (value !== null && value.constructor === Uint32Array) {
      this._pAcquireTimeoutMilliseconds = value;
      this.memoryViewBigInt64[0x5] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pAcquireTimeoutMilliseconds = null;
      this.memoryViewBigInt64[0x5] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkWin32KeyedMutexAcquireReleaseInfoNV.pAcquireTimeoutMilliseconds': Expected 'Uint32Array' but got '" + value.constructor.name + "'");
    }
  }
  get releaseCount() {
    return this.memoryViewUint32[0xC];
  }
  set releaseCount(value) {
    this.memoryViewUint32[0xC] = value;
  }
  get pReleaseSyncs() {
    return this._pReleaseSyncs;
  }
  set pReleaseSyncs(value) {
    if (value !== null && value.constructor === Array) {
      this._pReleaseSyncs = value;
    } else if (value === null) {
      this._pReleaseSyncs = null;
    } else {
      throw new TypeError("Invalid type for 'VkWin32KeyedMutexAcquireReleaseInfoNV.pReleaseSyncs': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get pReleaseKeys() {
    return this._pReleaseKeys;
  }
  set pReleaseKeys(value) {
    if (value !== null && value.constructor === BigUint64Array) {
      this._pReleaseKeys = value;
      this.memoryViewBigInt64[0x8] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pReleaseKeys = null;
      this.memoryViewBigInt64[0x8] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkWin32KeyedMutexAcquireReleaseInfoNV.pReleaseKeys': Expected 'BigUint64Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkWin32KeyedMutexAcquireReleaseInfoNV.prototype.flush = function flush() {
  //console.log(`Flushing: "VkWin32KeyedMutexAcquireReleaseInfoNV"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pAcquireSyncs !== null) {
    let array = this._pAcquireSyncs;
    if (array.length !== this.acquireCount) {
      throw new RangeError("Invalid array length, expected length of 'acquireCount' for 'VkWin32KeyedMutexAcquireReleaseInfoNV.pAcquireSyncs'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkDeviceMemory) {
        throw new TypeError("Invalid type for 'VkWin32KeyedMutexAcquireReleaseInfoNV.pAcquireSyncs[" + ii + "]': Expected 'VkDeviceMemory' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pAcquireSyncsNative = nativeArray;
    this.memoryViewBigInt64[0x3] = nativeArray.address;
  }
  
  
  if (this._pReleaseSyncs !== null) {
    let array = this._pReleaseSyncs;
    if (array.length !== this.releaseCount) {
      throw new RangeError("Invalid array length, expected length of 'releaseCount' for 'VkWin32KeyedMutexAcquireReleaseInfoNV.pReleaseSyncs'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkDeviceMemory) {
        throw new TypeError("Invalid type for 'VkWin32KeyedMutexAcquireReleaseInfoNV.pReleaseSyncs[" + ii + "]': Expected 'VkDeviceMemory' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pReleaseSyncsNative = nativeArray;
    this.memoryViewBigInt64[0x7] = nativeArray.address;
  }
  
  return true;
};

VkWin32KeyedMutexAcquireReleaseInfoNV.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x48);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkWin32KeyedMutexAcquireReleaseInfoNV"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
  
  
};

VkWin32KeyedMutexAcquireReleaseInfoNV.byteLength = 0x48;

VkWin32KeyedMutexAcquireReleaseInfoNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  acquireCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pAcquireSyncs: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  pAcquireKeys: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
  pAcquireTimeoutMilliseconds: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
  releaseCount: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  pReleaseSyncs: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x8
  }),
  pReleaseKeys: Object.freeze({
    byteOffset: 0x40,
    byteLength: 0x8
  }),
});
/** VkDeviceGeneratedCommandsFeaturesNVX **/
class VkDeviceGeneratedCommandsFeaturesNVX {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = 0x3B9C19F5;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.computeBindingPointSupport !== void 0) this.computeBindingPointSupport = opts.computeBindingPointSupport;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDeviceGeneratedCommandsFeaturesNVX.pNext' isn't allowed to be filled");
  }
  get computeBindingPointSupport() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set computeBindingPointSupport(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  
};

VkDeviceGeneratedCommandsFeaturesNVX.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDeviceGeneratedCommandsFeaturesNVX"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDeviceGeneratedCommandsFeaturesNVX.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDeviceGeneratedCommandsFeaturesNVX"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkDeviceGeneratedCommandsFeaturesNVX.byteLength = 0x18;

VkDeviceGeneratedCommandsFeaturesNVX.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  computeBindingPointSupport: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkDeviceGeneratedCommandsLimitsNVX **/
class VkDeviceGeneratedCommandsLimitsNVX {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x28);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    
    
    
    this.sType = 0x3B9C19F4;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.maxIndirectCommandsLayoutTokenCount !== void 0) this.maxIndirectCommandsLayoutTokenCount = opts.maxIndirectCommandsLayoutTokenCount;
      if (opts.maxObjectEntryCounts !== void 0) this.maxObjectEntryCounts = opts.maxObjectEntryCounts;
      if (opts.minSequenceCountBufferOffsetAlignment !== void 0) this.minSequenceCountBufferOffsetAlignment = opts.minSequenceCountBufferOffsetAlignment;
      if (opts.minSequenceIndexBufferOffsetAlignment !== void 0) this.minSequenceIndexBufferOffsetAlignment = opts.minSequenceIndexBufferOffsetAlignment;
      if (opts.minCommandsTokenBufferOffsetAlignment !== void 0) this.minCommandsTokenBufferOffsetAlignment = opts.minCommandsTokenBufferOffsetAlignment;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDeviceGeneratedCommandsLimitsNVX.pNext' isn't allowed to be filled");
  }
  get maxIndirectCommandsLayoutTokenCount() {
    return this.memoryViewUint32[0x4];
  }
  set maxIndirectCommandsLayoutTokenCount(value) {
    this.memoryViewUint32[0x4] = value;
  }
  get maxObjectEntryCounts() {
    return this.memoryViewUint32[0x5];
  }
  set maxObjectEntryCounts(value) {
    this.memoryViewUint32[0x5] = value;
  }
  get minSequenceCountBufferOffsetAlignment() {
    return this.memoryViewUint32[0x6];
  }
  set minSequenceCountBufferOffsetAlignment(value) {
    this.memoryViewUint32[0x6] = value;
  }
  get minSequenceIndexBufferOffsetAlignment() {
    return this.memoryViewUint32[0x7];
  }
  set minSequenceIndexBufferOffsetAlignment(value) {
    this.memoryViewUint32[0x7] = value;
  }
  get minCommandsTokenBufferOffsetAlignment() {
    return this.memoryViewUint32[0x8];
  }
  set minCommandsTokenBufferOffsetAlignment(value) {
    this.memoryViewUint32[0x8] = value;
  }
  
};

VkDeviceGeneratedCommandsLimitsNVX.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDeviceGeneratedCommandsLimitsNVX"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDeviceGeneratedCommandsLimitsNVX.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x28);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDeviceGeneratedCommandsLimitsNVX"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkDeviceGeneratedCommandsLimitsNVX.byteLength = 0x28;

VkDeviceGeneratedCommandsLimitsNVX.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  maxIndirectCommandsLayoutTokenCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  maxObjectEntryCounts: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  minSequenceCountBufferOffsetAlignment: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  minSequenceIndexBufferOffsetAlignment: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  minCommandsTokenBufferOffsetAlignment: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
});
/** VkIndirectCommandsTokenNVX **/
class VkIndirectCommandsTokenNVX {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._buffer = null;
    
    
    if (typeof opts === "object") {
      if (opts.tokenType !== void 0) this.tokenType = opts.tokenType;
      if (opts.buffer !== void 0) this.buffer = opts.buffer;
      if (opts.offset !== void 0) this.offset = opts.offset;
      
    }
  }
  get tokenType() {
    return this.memoryViewInt32[0x0];
  }
  set tokenType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get buffer() {
    return this._buffer;
  }
  set buffer(value) {
    if (value !== null && value.constructor === VkBuffer) {
      
      this._buffer = value;
      
      this.memoryViewBigInt64[0x1] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._buffer = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkIndirectCommandsTokenNVX.buffer': Expected 'VkBuffer' but got '" + value.constructor.name + "'");
    }
  }
  get offset() {
    return this.memoryViewBigUint64[0x2];
  }
  set offset(value) {
    this.memoryViewBigUint64[0x2] = value;
  }
  
};

VkIndirectCommandsTokenNVX.prototype.flush = function flush() {
  //console.log(`Flushing: "VkIndirectCommandsTokenNVX"`);
  
  return true;
};

VkIndirectCommandsTokenNVX.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkIndirectCommandsTokenNVX"`, this.memoryAddress, memoryAddress);
  
};

VkIndirectCommandsTokenNVX.byteLength = 0x18;

VkIndirectCommandsTokenNVX.memoryLayout = Object.freeze({
  tokenType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  buffer: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  offset: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
});
/** VkIndirectCommandsLayoutTokenNVX **/
class VkIndirectCommandsLayoutTokenNVX {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x10);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    
    
    
    
    if (typeof opts === "object") {
      if (opts.tokenType !== void 0) this.tokenType = opts.tokenType;
      if (opts.bindingUnit !== void 0) this.bindingUnit = opts.bindingUnit;
      if (opts.dynamicCount !== void 0) this.dynamicCount = opts.dynamicCount;
      if (opts.divisor !== void 0) this.divisor = opts.divisor;
      
    }
  }
  get tokenType() {
    return this.memoryViewInt32[0x0];
  }
  set tokenType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get bindingUnit() {
    return this.memoryViewUint32[0x1];
  }
  set bindingUnit(value) {
    this.memoryViewUint32[0x1] = value;
  }
  get dynamicCount() {
    return this.memoryViewUint32[0x2];
  }
  set dynamicCount(value) {
    this.memoryViewUint32[0x2] = value;
  }
  get divisor() {
    return this.memoryViewUint32[0x3];
  }
  set divisor(value) {
    this.memoryViewUint32[0x3] = value;
  }
  
};

VkIndirectCommandsLayoutTokenNVX.prototype.flush = function flush() {
  //console.log(`Flushing: "VkIndirectCommandsLayoutTokenNVX"`);
  
  return true;
};

VkIndirectCommandsLayoutTokenNVX.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x10);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkIndirectCommandsLayoutTokenNVX"`, this.memoryAddress, memoryAddress);
  
};

VkIndirectCommandsLayoutTokenNVX.byteLength = 0x10;

VkIndirectCommandsLayoutTokenNVX.memoryLayout = Object.freeze({
  tokenType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  bindingUnit: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  dynamicCount: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
  divisor: Object.freeze({
    byteOffset: 0xC,
    byteLength: 0x4
  }),
});
/** VkIndirectCommandsLayoutCreateInfoNVX **/
class VkIndirectCommandsLayoutCreateInfoNVX {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x28);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    
    this._pTokens = null;
    this._pTokensNative = null;
    this.sType = 0x3B9C19F1;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.pipelineBindPoint !== void 0) this.pipelineBindPoint = opts.pipelineBindPoint;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.tokenCount !== void 0) this.tokenCount = opts.tokenCount;
      if (opts.pTokens !== void 0) this.pTokens = opts.pTokens;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkIndirectCommandsLayoutCreateInfoNVX.pNext' isn't allowed to be filled");
  }
  get pipelineBindPoint() {
    return this.memoryViewInt32[0x4];
  }
  set pipelineBindPoint(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get flags() {
    return this.memoryViewInt32[0x5];
  }
  set flags(value) {
    this.memoryViewInt32[0x5] = value;
  }
  get tokenCount() {
    return this.memoryViewUint32[0x6];
  }
  set tokenCount(value) {
    this.memoryViewUint32[0x6] = value;
  }
  get pTokens() {
    return this._pTokens;
  }
  set pTokens(value) {
    if (value !== null && value.constructor === Array) {
      this._pTokens = value;
    } else if (value === null) {
      this._pTokens = null;
    } else {
      throw new TypeError("Invalid type for 'VkIndirectCommandsLayoutCreateInfoNVX.pTokens': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkIndirectCommandsLayoutCreateInfoNVX.prototype.flush = function flush() {
  //console.log(`Flushing: "VkIndirectCommandsLayoutCreateInfoNVX"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pTokens !== null) {
    let array = this._pTokens;
    if (array.length !== this.tokenCount) {
      throw new RangeError("Invalid array length, expected length of 'tokenCount' for 'VkIndirectCommandsLayoutCreateInfoNVX.pTokens'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkIndirectCommandsLayoutTokenNVX) {
        throw new TypeError("Invalid type for 'VkIndirectCommandsLayoutCreateInfoNVX.pTokens[" + ii + "]': Expected 'VkIndirectCommandsLayoutTokenNVX' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pTokensNative = nativeArray;
    this.memoryViewBigInt64[0x4] = nativeArray.address;
  }
  
  return true;
};

VkIndirectCommandsLayoutCreateInfoNVX.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x28);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkIndirectCommandsLayoutCreateInfoNVX"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
};

VkIndirectCommandsLayoutCreateInfoNVX.byteLength = 0x28;

VkIndirectCommandsLayoutCreateInfoNVX.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  pipelineBindPoint: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  flags: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  tokenCount: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  pTokens: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
});
/** VkCmdProcessCommandsInfoNVX **/
class VkCmdProcessCommandsInfoNVX {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x60);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
    this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    this._objectTable = null;
    this._indirectCommandsLayout = null;
    
    this._pIndirectCommandsTokens = null;
    this._pIndirectCommandsTokensNative = null;
    
    this._targetCommandBuffer = null;
    this._sequencesCountBuffer = null;
    
    this._sequencesIndexBuffer = null;
    
    this.sType = 0x3B9C19F2;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.objectTable !== void 0) this.objectTable = opts.objectTable;
      if (opts.indirectCommandsLayout !== void 0) this.indirectCommandsLayout = opts.indirectCommandsLayout;
      if (opts.indirectCommandsTokenCount !== void 0) this.indirectCommandsTokenCount = opts.indirectCommandsTokenCount;
      if (opts.pIndirectCommandsTokens !== void 0) this.pIndirectCommandsTokens = opts.pIndirectCommandsTokens;
      if (opts.maxSequencesCount !== void 0) this.maxSequencesCount = opts.maxSequencesCount;
      if (opts.targetCommandBuffer !== void 0) this.targetCommandBuffer = opts.targetCommandBuffer;
      if (opts.sequencesCountBuffer !== void 0) this.sequencesCountBuffer = opts.sequencesCountBuffer;
      if (opts.sequencesCountOffset !== void 0) this.sequencesCountOffset = opts.sequencesCountOffset;
      if (opts.sequencesIndexBuffer !== void 0) this.sequencesIndexBuffer = opts.sequencesIndexBuffer;
      if (opts.sequencesIndexOffset !== void 0) this.sequencesIndexOffset = opts.sequencesIndexOffset;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkCmdProcessCommandsInfoNVX.pNext' isn't allowed to be filled");
  }
  get objectTable() {
    return this._objectTable;
  }
  set objectTable(value) {
    if (value !== null && value.constructor === VkObjectTableNVX) {
      
      this._objectTable = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._objectTable = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkCmdProcessCommandsInfoNVX.objectTable': Expected 'VkObjectTableNVX' but got '" + value.constructor.name + "'");
    }
  }
  get indirectCommandsLayout() {
    return this._indirectCommandsLayout;
  }
  set indirectCommandsLayout(value) {
    if (value !== null && value.constructor === VkIndirectCommandsLayoutNVX) {
      
      this._indirectCommandsLayout = value;
      
      this.memoryViewBigInt64[0x3] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._indirectCommandsLayout = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkCmdProcessCommandsInfoNVX.indirectCommandsLayout': Expected 'VkIndirectCommandsLayoutNVX' but got '" + value.constructor.name + "'");
    }
  }
  get indirectCommandsTokenCount() {
    return this.memoryViewUint32[0x8];
  }
  set indirectCommandsTokenCount(value) {
    this.memoryViewUint32[0x8] = value;
  }
  get pIndirectCommandsTokens() {
    return this._pIndirectCommandsTokens;
  }
  set pIndirectCommandsTokens(value) {
    if (value !== null && value.constructor === Array) {
      this._pIndirectCommandsTokens = value;
    } else if (value === null) {
      this._pIndirectCommandsTokens = null;
    } else {
      throw new TypeError("Invalid type for 'VkCmdProcessCommandsInfoNVX.pIndirectCommandsTokens': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get maxSequencesCount() {
    return this.memoryViewUint32[0xC];
  }
  set maxSequencesCount(value) {
    this.memoryViewUint32[0xC] = value;
  }
  get targetCommandBuffer() {
    return this._targetCommandBuffer;
  }
  set targetCommandBuffer(value) {
    if (value !== null && value.constructor === VkCommandBuffer) {
      
      this._targetCommandBuffer = value;
      
      this.memoryViewBigInt64[0x7] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._targetCommandBuffer = null;
      this.memoryViewBigInt64[0x7] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkCmdProcessCommandsInfoNVX.targetCommandBuffer': Expected 'VkCommandBuffer' but got '" + value.constructor.name + "'");
    }
  }
  get sequencesCountBuffer() {
    return this._sequencesCountBuffer;
  }
  set sequencesCountBuffer(value) {
    if (value !== null && value.constructor === VkBuffer) {
      
      this._sequencesCountBuffer = value;
      
      this.memoryViewBigInt64[0x8] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._sequencesCountBuffer = null;
      this.memoryViewBigInt64[0x8] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkCmdProcessCommandsInfoNVX.sequencesCountBuffer': Expected 'VkBuffer' but got '" + value.constructor.name + "'");
    }
  }
  get sequencesCountOffset() {
    return this.memoryViewBigUint64[0x9];
  }
  set sequencesCountOffset(value) {
    this.memoryViewBigUint64[0x9] = value;
  }
  get sequencesIndexBuffer() {
    return this._sequencesIndexBuffer;
  }
  set sequencesIndexBuffer(value) {
    if (value !== null && value.constructor === VkBuffer) {
      
      this._sequencesIndexBuffer = value;
      
      this.memoryViewBigInt64[0xA] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._sequencesIndexBuffer = null;
      this.memoryViewBigInt64[0xA] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkCmdProcessCommandsInfoNVX.sequencesIndexBuffer': Expected 'VkBuffer' but got '" + value.constructor.name + "'");
    }
  }
  get sequencesIndexOffset() {
    return this.memoryViewBigUint64[0xB];
  }
  set sequencesIndexOffset(value) {
    this.memoryViewBigUint64[0xB] = value;
  }
  
};

VkCmdProcessCommandsInfoNVX.prototype.flush = function flush() {
  //console.log(`Flushing: "VkCmdProcessCommandsInfoNVX"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pIndirectCommandsTokens !== null) {
    let array = this._pIndirectCommandsTokens;
    if (array.length !== this.indirectCommandsTokenCount) {
      throw new RangeError("Invalid array length, expected length of 'indirectCommandsTokenCount' for 'VkCmdProcessCommandsInfoNVX.pIndirectCommandsTokens'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkIndirectCommandsTokenNVX) {
        throw new TypeError("Invalid type for 'VkCmdProcessCommandsInfoNVX.pIndirectCommandsTokens[" + ii + "]': Expected 'VkIndirectCommandsTokenNVX' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pIndirectCommandsTokensNative = nativeArray;
    this.memoryViewBigInt64[0x5] = nativeArray.address;
  }
  
  return true;
};

VkCmdProcessCommandsInfoNVX.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x60);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkCmdProcessCommandsInfoNVX"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
};

VkCmdProcessCommandsInfoNVX.byteLength = 0x60;

VkCmdProcessCommandsInfoNVX.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  objectTable: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  indirectCommandsLayout: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  indirectCommandsTokenCount: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  pIndirectCommandsTokens: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
  maxSequencesCount: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  targetCommandBuffer: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x8
  }),
  sequencesCountBuffer: Object.freeze({
    byteOffset: 0x40,
    byteLength: 0x8
  }),
  sequencesCountOffset: Object.freeze({
    byteOffset: 0x48,
    byteLength: 0x8
  }),
  sequencesIndexBuffer: Object.freeze({
    byteOffset: 0x50,
    byteLength: 0x8
  }),
  sequencesIndexOffset: Object.freeze({
    byteOffset: 0x58,
    byteLength: 0x8
  }),
});
/** VkCmdReserveSpaceForCommandsInfoNVX **/
class VkCmdReserveSpaceForCommandsInfoNVX {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x28);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    this._objectTable = null;
    this._indirectCommandsLayout = null;
    
    this.sType = 0x3B9C19F3;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.objectTable !== void 0) this.objectTable = opts.objectTable;
      if (opts.indirectCommandsLayout !== void 0) this.indirectCommandsLayout = opts.indirectCommandsLayout;
      if (opts.maxSequencesCount !== void 0) this.maxSequencesCount = opts.maxSequencesCount;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkCmdReserveSpaceForCommandsInfoNVX.pNext' isn't allowed to be filled");
  }
  get objectTable() {
    return this._objectTable;
  }
  set objectTable(value) {
    if (value !== null && value.constructor === VkObjectTableNVX) {
      
      this._objectTable = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._objectTable = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkCmdReserveSpaceForCommandsInfoNVX.objectTable': Expected 'VkObjectTableNVX' but got '" + value.constructor.name + "'");
    }
  }
  get indirectCommandsLayout() {
    return this._indirectCommandsLayout;
  }
  set indirectCommandsLayout(value) {
    if (value !== null && value.constructor === VkIndirectCommandsLayoutNVX) {
      
      this._indirectCommandsLayout = value;
      
      this.memoryViewBigInt64[0x3] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._indirectCommandsLayout = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkCmdReserveSpaceForCommandsInfoNVX.indirectCommandsLayout': Expected 'VkIndirectCommandsLayoutNVX' but got '" + value.constructor.name + "'");
    }
  }
  get maxSequencesCount() {
    return this.memoryViewUint32[0x8];
  }
  set maxSequencesCount(value) {
    this.memoryViewUint32[0x8] = value;
  }
  
};

VkCmdReserveSpaceForCommandsInfoNVX.prototype.flush = function flush() {
  //console.log(`Flushing: "VkCmdReserveSpaceForCommandsInfoNVX"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkCmdReserveSpaceForCommandsInfoNVX.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x28);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkCmdReserveSpaceForCommandsInfoNVX"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkCmdReserveSpaceForCommandsInfoNVX.byteLength = 0x28;

VkCmdReserveSpaceForCommandsInfoNVX.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  objectTable: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  indirectCommandsLayout: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  maxSequencesCount: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
});
/** VkObjectTableCreateInfoNVX **/
class VkObjectTableCreateInfoNVX {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x48);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this._pObjectEntryTypes = null;
    this._pObjectEntryCounts = null;
    this._pObjectEntryUsageFlags = null;
    
    
    
    
    
    this.sType = 0x3B9C19F0;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.objectCount !== void 0) this.objectCount = opts.objectCount;
      if (opts.pObjectEntryTypes !== void 0) this.pObjectEntryTypes = opts.pObjectEntryTypes;
      if (opts.pObjectEntryCounts !== void 0) this.pObjectEntryCounts = opts.pObjectEntryCounts;
      if (opts.pObjectEntryUsageFlags !== void 0) this.pObjectEntryUsageFlags = opts.pObjectEntryUsageFlags;
      if (opts.maxUniformBuffersPerDescriptor !== void 0) this.maxUniformBuffersPerDescriptor = opts.maxUniformBuffersPerDescriptor;
      if (opts.maxStorageBuffersPerDescriptor !== void 0) this.maxStorageBuffersPerDescriptor = opts.maxStorageBuffersPerDescriptor;
      if (opts.maxStorageImagesPerDescriptor !== void 0) this.maxStorageImagesPerDescriptor = opts.maxStorageImagesPerDescriptor;
      if (opts.maxSampledImagesPerDescriptor !== void 0) this.maxSampledImagesPerDescriptor = opts.maxSampledImagesPerDescriptor;
      if (opts.maxPipelineLayouts !== void 0) this.maxPipelineLayouts = opts.maxPipelineLayouts;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkObjectTableCreateInfoNVX.pNext' isn't allowed to be filled");
  }
  get objectCount() {
    return this.memoryViewUint32[0x4];
  }
  set objectCount(value) {
    this.memoryViewUint32[0x4] = value;
  }
  get pObjectEntryTypes() {
    return this._pObjectEntryTypes;
  }
  set pObjectEntryTypes(value) {
    if (value !== null && value.constructor === Int32Array) {
      this._pObjectEntryTypes = value;
      this.memoryViewBigInt64[0x3] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pObjectEntryTypes = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkObjectTableCreateInfoNVX.pObjectEntryTypes': Expected 'Int32Array' but got '" + value.constructor.name + "'");
    }
  }
  get pObjectEntryCounts() {
    return this._pObjectEntryCounts;
  }
  set pObjectEntryCounts(value) {
    if (value !== null && value.constructor === Uint32Array) {
      this._pObjectEntryCounts = value;
      this.memoryViewBigInt64[0x4] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pObjectEntryCounts = null;
      this.memoryViewBigInt64[0x4] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkObjectTableCreateInfoNVX.pObjectEntryCounts': Expected 'Uint32Array' but got '" + value.constructor.name + "'");
    }
  }
  get pObjectEntryUsageFlags() {
    return this._pObjectEntryUsageFlags;
  }
  set pObjectEntryUsageFlags(value) {
    if (value !== null && value.constructor === Int32Array) {
      this._pObjectEntryUsageFlags = value;
      this.memoryViewBigInt64[0x5] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pObjectEntryUsageFlags = null;
      this.memoryViewBigInt64[0x5] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkObjectTableCreateInfoNVX.pObjectEntryUsageFlags': Expected 'Int32Array' but got '" + value.constructor.name + "'");
    }
  }
  get maxUniformBuffersPerDescriptor() {
    return this.memoryViewUint32[0xC];
  }
  set maxUniformBuffersPerDescriptor(value) {
    this.memoryViewUint32[0xC] = value;
  }
  get maxStorageBuffersPerDescriptor() {
    return this.memoryViewUint32[0xD];
  }
  set maxStorageBuffersPerDescriptor(value) {
    this.memoryViewUint32[0xD] = value;
  }
  get maxStorageImagesPerDescriptor() {
    return this.memoryViewUint32[0xE];
  }
  set maxStorageImagesPerDescriptor(value) {
    this.memoryViewUint32[0xE] = value;
  }
  get maxSampledImagesPerDescriptor() {
    return this.memoryViewUint32[0xF];
  }
  set maxSampledImagesPerDescriptor(value) {
    this.memoryViewUint32[0xF] = value;
  }
  get maxPipelineLayouts() {
    return this.memoryViewUint32[0x10];
  }
  set maxPipelineLayouts(value) {
    this.memoryViewUint32[0x10] = value;
  }
  
};

VkObjectTableCreateInfoNVX.prototype.flush = function flush() {
  //console.log(`Flushing: "VkObjectTableCreateInfoNVX"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkObjectTableCreateInfoNVX.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x48);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkObjectTableCreateInfoNVX"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkObjectTableCreateInfoNVX.byteLength = 0x48;

VkObjectTableCreateInfoNVX.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  objectCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pObjectEntryTypes: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  pObjectEntryCounts: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
  pObjectEntryUsageFlags: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
  maxUniformBuffersPerDescriptor: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  maxStorageBuffersPerDescriptor: Object.freeze({
    byteOffset: 0x34,
    byteLength: 0x4
  }),
  maxStorageImagesPerDescriptor: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x4
  }),
  maxSampledImagesPerDescriptor: Object.freeze({
    byteOffset: 0x3C,
    byteLength: 0x4
  }),
  maxPipelineLayouts: Object.freeze({
    byteOffset: 0x40,
    byteLength: 0x4
  }),
});
/** VkObjectTableEntryNVX **/
class VkObjectTableEntryNVX {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    
    
    if (typeof opts === "object") {
      if (opts.type !== void 0) this.type = opts.type;
      if (opts.flags !== void 0) this.flags = opts.flags;
      
    }
  }
  get type() {
    return this.memoryViewInt32[0x0];
  }
  set type(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get flags() {
    return this.memoryViewInt32[0x1];
  }
  set flags(value) {
    this.memoryViewInt32[0x1] = value;
  }
  
};

VkObjectTableEntryNVX.prototype.flush = function flush() {
  //console.log(`Flushing: "VkObjectTableEntryNVX"`);
  
  return true;
};

VkObjectTableEntryNVX.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x8);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkObjectTableEntryNVX"`, this.memoryAddress, memoryAddress);
  
};

VkObjectTableEntryNVX.byteLength = 0x8;

VkObjectTableEntryNVX.memoryLayout = Object.freeze({
  type: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  flags: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
});
/** VkObjectTablePipelineEntryNVX **/
class VkObjectTablePipelineEntryNVX {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x10);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    
    this._pipeline = null;
    
    if (typeof opts === "object") {
      if (opts.type !== void 0) this.type = opts.type;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.pipeline !== void 0) this.pipeline = opts.pipeline;
      
    }
  }
  get type() {
    return this.memoryViewInt32[0x0];
  }
  set type(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get flags() {
    return this.memoryViewInt32[0x1];
  }
  set flags(value) {
    this.memoryViewInt32[0x1] = value;
  }
  get pipeline() {
    return this._pipeline;
  }
  set pipeline(value) {
    if (value !== null && value.constructor === VkPipeline) {
      
      this._pipeline = value;
      
      this.memoryViewBigInt64[0x1] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._pipeline = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkObjectTablePipelineEntryNVX.pipeline': Expected 'VkPipeline' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkObjectTablePipelineEntryNVX.prototype.flush = function flush() {
  //console.log(`Flushing: "VkObjectTablePipelineEntryNVX"`);
  
  return true;
};

VkObjectTablePipelineEntryNVX.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x10);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkObjectTablePipelineEntryNVX"`, this.memoryAddress, memoryAddress);
  
};

VkObjectTablePipelineEntryNVX.byteLength = 0x10;

VkObjectTablePipelineEntryNVX.memoryLayout = Object.freeze({
  type: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  flags: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  pipeline: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
});
/** VkObjectTableDescriptorSetEntryNVX **/
class VkObjectTableDescriptorSetEntryNVX {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    
    this._pipelineLayout = null;
    this._descriptorSet = null;
    
    if (typeof opts === "object") {
      if (opts.type !== void 0) this.type = opts.type;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.pipelineLayout !== void 0) this.pipelineLayout = opts.pipelineLayout;
      if (opts.descriptorSet !== void 0) this.descriptorSet = opts.descriptorSet;
      
    }
  }
  get type() {
    return this.memoryViewInt32[0x0];
  }
  set type(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get flags() {
    return this.memoryViewInt32[0x1];
  }
  set flags(value) {
    this.memoryViewInt32[0x1] = value;
  }
  get pipelineLayout() {
    return this._pipelineLayout;
  }
  set pipelineLayout(value) {
    if (value !== null && value.constructor === VkPipelineLayout) {
      
      this._pipelineLayout = value;
      
      this.memoryViewBigInt64[0x1] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._pipelineLayout = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkObjectTableDescriptorSetEntryNVX.pipelineLayout': Expected 'VkPipelineLayout' but got '" + value.constructor.name + "'");
    }
  }
  get descriptorSet() {
    return this._descriptorSet;
  }
  set descriptorSet(value) {
    if (value !== null && value.constructor === VkDescriptorSet) {
      
      this._descriptorSet = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._descriptorSet = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkObjectTableDescriptorSetEntryNVX.descriptorSet': Expected 'VkDescriptorSet' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkObjectTableDescriptorSetEntryNVX.prototype.flush = function flush() {
  //console.log(`Flushing: "VkObjectTableDescriptorSetEntryNVX"`);
  
  return true;
};

VkObjectTableDescriptorSetEntryNVX.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkObjectTableDescriptorSetEntryNVX"`, this.memoryAddress, memoryAddress);
  
};

VkObjectTableDescriptorSetEntryNVX.byteLength = 0x18;

VkObjectTableDescriptorSetEntryNVX.memoryLayout = Object.freeze({
  type: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  flags: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  pipelineLayout: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  descriptorSet: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
});
/** VkObjectTableVertexBufferEntryNVX **/
class VkObjectTableVertexBufferEntryNVX {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x10);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    
    this._buffer = null;
    
    if (typeof opts === "object") {
      if (opts.type !== void 0) this.type = opts.type;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.buffer !== void 0) this.buffer = opts.buffer;
      
    }
  }
  get type() {
    return this.memoryViewInt32[0x0];
  }
  set type(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get flags() {
    return this.memoryViewInt32[0x1];
  }
  set flags(value) {
    this.memoryViewInt32[0x1] = value;
  }
  get buffer() {
    return this._buffer;
  }
  set buffer(value) {
    if (value !== null && value.constructor === VkBuffer) {
      
      this._buffer = value;
      
      this.memoryViewBigInt64[0x1] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._buffer = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkObjectTableVertexBufferEntryNVX.buffer': Expected 'VkBuffer' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkObjectTableVertexBufferEntryNVX.prototype.flush = function flush() {
  //console.log(`Flushing: "VkObjectTableVertexBufferEntryNVX"`);
  
  return true;
};

VkObjectTableVertexBufferEntryNVX.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x10);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkObjectTableVertexBufferEntryNVX"`, this.memoryAddress, memoryAddress);
  
};

VkObjectTableVertexBufferEntryNVX.byteLength = 0x10;

VkObjectTableVertexBufferEntryNVX.memoryLayout = Object.freeze({
  type: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  flags: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  buffer: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
});
/** VkObjectTableIndexBufferEntryNVX **/
class VkObjectTableIndexBufferEntryNVX {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    
    this._buffer = null;
    
    
    if (typeof opts === "object") {
      if (opts.type !== void 0) this.type = opts.type;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.buffer !== void 0) this.buffer = opts.buffer;
      if (opts.indexType !== void 0) this.indexType = opts.indexType;
      
    }
  }
  get type() {
    return this.memoryViewInt32[0x0];
  }
  set type(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get flags() {
    return this.memoryViewInt32[0x1];
  }
  set flags(value) {
    this.memoryViewInt32[0x1] = value;
  }
  get buffer() {
    return this._buffer;
  }
  set buffer(value) {
    if (value !== null && value.constructor === VkBuffer) {
      
      this._buffer = value;
      
      this.memoryViewBigInt64[0x1] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._buffer = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkObjectTableIndexBufferEntryNVX.buffer': Expected 'VkBuffer' but got '" + value.constructor.name + "'");
    }
  }
  get indexType() {
    return this.memoryViewInt32[0x4];
  }
  set indexType(value) {
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkObjectTableIndexBufferEntryNVX.prototype.flush = function flush() {
  //console.log(`Flushing: "VkObjectTableIndexBufferEntryNVX"`);
  
  return true;
};

VkObjectTableIndexBufferEntryNVX.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkObjectTableIndexBufferEntryNVX"`, this.memoryAddress, memoryAddress);
  
};

VkObjectTableIndexBufferEntryNVX.byteLength = 0x18;

VkObjectTableIndexBufferEntryNVX.memoryLayout = Object.freeze({
  type: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  flags: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  buffer: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  indexType: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkObjectTablePushConstantEntryNVX **/
class VkObjectTablePushConstantEntryNVX {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    
    this._pipelineLayout = null;
    
    
    if (typeof opts === "object") {
      if (opts.type !== void 0) this.type = opts.type;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.pipelineLayout !== void 0) this.pipelineLayout = opts.pipelineLayout;
      if (opts.stageFlags !== void 0) this.stageFlags = opts.stageFlags;
      
    }
  }
  get type() {
    return this.memoryViewInt32[0x0];
  }
  set type(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get flags() {
    return this.memoryViewInt32[0x1];
  }
  set flags(value) {
    this.memoryViewInt32[0x1] = value;
  }
  get pipelineLayout() {
    return this._pipelineLayout;
  }
  set pipelineLayout(value) {
    if (value !== null && value.constructor === VkPipelineLayout) {
      
      this._pipelineLayout = value;
      
      this.memoryViewBigInt64[0x1] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._pipelineLayout = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkObjectTablePushConstantEntryNVX.pipelineLayout': Expected 'VkPipelineLayout' but got '" + value.constructor.name + "'");
    }
  }
  get stageFlags() {
    return this.memoryViewInt32[0x4];
  }
  set stageFlags(value) {
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkObjectTablePushConstantEntryNVX.prototype.flush = function flush() {
  //console.log(`Flushing: "VkObjectTablePushConstantEntryNVX"`);
  
  return true;
};

VkObjectTablePushConstantEntryNVX.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkObjectTablePushConstantEntryNVX"`, this.memoryAddress, memoryAddress);
  
};

VkObjectTablePushConstantEntryNVX.byteLength = 0x18;

VkObjectTablePushConstantEntryNVX.memoryLayout = Object.freeze({
  type: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  flags: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  pipelineLayout: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  stageFlags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceFeatures2 **/
class VkPhysicalDeviceFeatures2 {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0xF0);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    this._features = new VkPhysicalDeviceFeatures({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x10 });
    this.sType = 0x3B9BB078;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.features !== void 0) this.features = opts.features;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null && (value instanceof Object)) {
      let {sType} = value;
      if (sType <= -1) throw new TypeError("Invalid type for 'VkPhysicalDeviceFeatures2.pNext'");
      switch (sType) {
          
        case 0x3B9C9EC0:
        case 0x3B9B9909:
        case 0x3B9C0E38:
        case 0x3B9D2B64:
        case VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES:
        case 0x3B9D0C20:
        case 0x3B9CE510:
        case VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES:
        case 0x3B9C0A50:
        case 0x3B9D3EE9:
        case 0x3B9D7D68:
        case 0x3B9C0669:
        case 0x3B9E0238:
        case 0x3B9D8920:
        case 0x3B9DB032:
        case 0x3B9BCFB9:
        case 0x3B9B3760:
        case 0x3B9D5270:
        case 0x3B9DEACA:
        case 0x3B9B8D50:
        case 0x3B9DDB28:
        case 0x3B9DE2F8:
        case 0x3B9DE6E0:
        case 0x3B9E7380:
        case 0x3B9D4AA1:
        case 0x3B9DDF10:
        case 0x3B9E1D90:
        case 0x3B9E2948:
        case 0x3B9C5870:
        case 0x3B9E6BB0:
        case 0x3B9E8320:
        case 0x3B9E96A8:
          break;
        default:
          throw new TypeError("Invalid type for 'VkPhysicalDeviceFeatures2.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkPhysicalDeviceFeatures2.pNext'");
    }
  }
  get features() {
    return this._features;
  }
  set features(value) {
    if (value !== null && value.constructor === VkPhysicalDeviceFeatures) {
      value.flush();
      this._features = value;
      this.memoryViewBigInt64[0x2] = value.memoryAddress;
      
    } else if (value === null) {
      this._features = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkPhysicalDeviceFeatures2.features': Expected 'VkPhysicalDeviceFeatures' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkPhysicalDeviceFeatures2.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceFeatures2"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  
  return true;
};

VkPhysicalDeviceFeatures2.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0xF0);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceFeatures2"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
};

VkPhysicalDeviceFeatures2.byteLength = 0xF0;

VkPhysicalDeviceFeatures2.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  features: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0xDC
  }),
});
/** VkPhysicalDeviceFeatures2KHR **/
class VkPhysicalDeviceFeatures2KHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0xF0);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    this._features = new VkPhysicalDeviceFeatures({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x10 });
    this.sType = 0x3B9BB078;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.features !== void 0) this.features = opts.features;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null && (value instanceof Object)) {
      let {sType} = value;
      if (sType <= -1) throw new TypeError("Invalid type for 'VkPhysicalDeviceFeatures2KHR.pNext'");
      switch (sType) {
          
        case 0x3B9C9EC0:
        case 0x3B9B9909:
        case 0x3B9C0E38:
        case 0x3B9D2B64:
        case VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES:
        case 0x3B9D0C20:
        case 0x3B9CE510:
        case VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES:
        case 0x3B9C0A50:
        case 0x3B9D3EE9:
        case 0x3B9D7D68:
        case 0x3B9C0669:
        case 0x3B9E0238:
        case 0x3B9D8920:
        case 0x3B9DB032:
        case 0x3B9BCFB9:
        case 0x3B9B3760:
        case 0x3B9D5270:
        case 0x3B9DEACA:
        case 0x3B9B8D50:
        case 0x3B9DDB28:
        case 0x3B9DE2F8:
        case 0x3B9DE6E0:
        case 0x3B9E7380:
        case 0x3B9D4AA1:
        case 0x3B9DDF10:
        case 0x3B9E1D90:
        case 0x3B9E2948:
        case 0x3B9C5870:
        case 0x3B9E6BB0:
        case 0x3B9E8320:
        case 0x3B9E96A8:
          break;
        default:
          throw new TypeError("Invalid type for 'VkPhysicalDeviceFeatures2KHR.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkPhysicalDeviceFeatures2KHR.pNext'");
    }
  }
  get features() {
    return this._features;
  }
  set features(value) {
    if (value !== null && value.constructor === VkPhysicalDeviceFeatures) {
      value.flush();
      this._features = value;
      this.memoryViewBigInt64[0x2] = value.memoryAddress;
      
    } else if (value === null) {
      this._features = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkPhysicalDeviceFeatures2KHR.features': Expected 'VkPhysicalDeviceFeatures' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkPhysicalDeviceFeatures2KHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceFeatures2KHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  
  return true;
};

VkPhysicalDeviceFeatures2KHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0xF0);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceFeatures2KHR"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
};

VkPhysicalDeviceFeatures2KHR.byteLength = 0xF0;

VkPhysicalDeviceFeatures2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  features: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0xDC
  }),
});
/** VkPhysicalDeviceProperties2 **/
class VkPhysicalDeviceProperties2 {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x348);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x348) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x348) / 0x8);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    this._properties = new VkPhysicalDeviceProperties({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x10 });
    this.sType = 0x3B9BB079;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null && (value instanceof Object)) {
      let {sType} = value;
      if (sType <= -1) throw new TypeError("Invalid type for 'VkPhysicalDeviceProperties2.pNext'");
      switch (sType) {
          
        case 0x3B9C0280:
        case 0x3B9DC7A0:
        case 0x3B9BDF5C:
        case 0x3B9B990A:
        case 0x3B9C4CB8:
        case 0x3B9C44E8:
        case VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES:
        case 0x3B9C9308:
        case VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES:
        case 0x3B9CC5D0:
        case 0x3B9CF89B:
        case 0x3B9D0C21:
        case 0x3B9CE511:
        case 0x3B9D5A40:
        case 0x3B9DCB88:
        case 0x3B9D8152:
        case 0x3B9C5488:
        case 0x3B9D9CA8:
        case 0x3B9D3EEA:
        case 0x3B9DB030:
        case 0x3B9E0620:
        case 0x3B9DD358:
        case 0x3B9B3761:
        case 0x3B9D4AA2:
        case 0x3B9DDF11:
        case 0x3B9D4E91:
        case 0x3B9E1D91:
        case 0x3B9E96AA:
          break;
        default:
          throw new TypeError("Invalid type for 'VkPhysicalDeviceProperties2.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkPhysicalDeviceProperties2.pNext'");
    }
  }
  get properties() {
    return this._properties;
  }
  
};

VkPhysicalDeviceProperties2.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceProperties2"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceProperties2.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x348);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceProperties2"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x348), 0x0);
  
  
  
  
};

VkPhysicalDeviceProperties2.byteLength = 0x348;

VkPhysicalDeviceProperties2.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  properties: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x338
  }),
});
/** VkPhysicalDeviceProperties2KHR **/
class VkPhysicalDeviceProperties2KHR {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x348);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x348) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x348) / 0x8);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    this._properties = new VkPhysicalDeviceProperties({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x10 });
    this.sType = 0x3B9BB079;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null && (value instanceof Object)) {
      let {sType} = value;
      if (sType <= -1) throw new TypeError("Invalid type for 'VkPhysicalDeviceProperties2KHR.pNext'");
      switch (sType) {
          
        case 0x3B9C0280:
        case 0x3B9DC7A0:
        case 0x3B9BDF5C:
        case 0x3B9B990A:
        case 0x3B9C4CB8:
        case 0x3B9C44E8:
        case VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES:
        case 0x3B9C9308:
        case VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES:
        case 0x3B9CC5D0:
        case 0x3B9CF89B:
        case 0x3B9D0C21:
        case 0x3B9CE511:
        case 0x3B9D5A40:
        case 0x3B9DCB88:
        case 0x3B9D8152:
        case 0x3B9C5488:
        case 0x3B9D9CA8:
        case 0x3B9D3EEA:
        case 0x3B9DB030:
        case 0x3B9E0620:
        case 0x3B9DD358:
        case 0x3B9B3761:
        case 0x3B9D4AA2:
        case 0x3B9DDF11:
        case 0x3B9D4E91:
        case 0x3B9E1D91:
        case 0x3B9E96AA:
          break;
        default:
          throw new TypeError("Invalid type for 'VkPhysicalDeviceProperties2KHR.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkPhysicalDeviceProperties2KHR.pNext'");
    }
  }
  get properties() {
    return this._properties;
  }
  
};

VkPhysicalDeviceProperties2KHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceProperties2KHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceProperties2KHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x348);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceProperties2KHR"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x348), 0x0);
  
  
  
  
};

VkPhysicalDeviceProperties2KHR.byteLength = 0x348;

VkPhysicalDeviceProperties2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  properties: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x338
  }),
});
/** VkFormatProperties2 **/
class VkFormatProperties2 {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    this._formatProperties = new VkFormatProperties({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x10 });
    this.sType = 0x3B9BB07A;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null && (value instanceof Object)) {
      let {sType} = value;
      if (sType <= -1) throw new TypeError("Invalid type for 'VkFormatProperties2.pNext'");
      switch (sType) {
          
        case 0x3B9D3330:
          break;
        default:
          throw new TypeError("Invalid type for 'VkFormatProperties2.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkFormatProperties2.pNext'");
    }
  }
  get formatProperties() {
    return this._formatProperties;
  }
  
};

VkFormatProperties2.prototype.flush = function flush() {
  //console.log(`Flushing: "VkFormatProperties2"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkFormatProperties2.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkFormatProperties2"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x20), 0x0);
  
  
  
  
};

VkFormatProperties2.byteLength = 0x20;

VkFormatProperties2.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  formatProperties: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0xC
  }),
});
/** VkFormatProperties2KHR **/
class VkFormatProperties2KHR {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    this._formatProperties = new VkFormatProperties({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x10 });
    this.sType = 0x3B9BB07A;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null && (value instanceof Object)) {
      let {sType} = value;
      if (sType <= -1) throw new TypeError("Invalid type for 'VkFormatProperties2KHR.pNext'");
      switch (sType) {
          
        case 0x3B9D3330:
          break;
        default:
          throw new TypeError("Invalid type for 'VkFormatProperties2KHR.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkFormatProperties2KHR.pNext'");
    }
  }
  get formatProperties() {
    return this._formatProperties;
  }
  
};

VkFormatProperties2KHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkFormatProperties2KHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkFormatProperties2KHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkFormatProperties2KHR"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x20), 0x0);
  
  
  
  
};

VkFormatProperties2KHR.byteLength = 0x20;

VkFormatProperties2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  formatProperties: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0xC
  }),
});
/** VkImageFormatProperties2 **/
class VkImageFormatProperties2 {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x30);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x30) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x30) / 0x8);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    this._imageFormatProperties = new VkImageFormatProperties({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x10 });
    this.sType = 0x3B9BB07B;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null && (value instanceof Object)) {
      let {sType} = value;
      if (sType <= -1) throw new TypeError("Invalid type for 'VkImageFormatProperties2.pNext'");
      switch (sType) {
          
        case 0x3B9BDF59:
        case 0x3B9D2B65:
        case 0x3B9B6A28:
        case 0x3B9CC1E8:
        case 0x3B9D6211:
          break;
        default:
          throw new TypeError("Invalid type for 'VkImageFormatProperties2.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkImageFormatProperties2.pNext'");
    }
  }
  get imageFormatProperties() {
    return this._imageFormatProperties;
  }
  
};

VkImageFormatProperties2.prototype.flush = function flush() {
  //console.log(`Flushing: "VkImageFormatProperties2"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkImageFormatProperties2.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x30);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkImageFormatProperties2"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x30), 0x0);
  
  
  
  
};

VkImageFormatProperties2.byteLength = 0x30;

VkImageFormatProperties2.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  imageFormatProperties: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x20
  }),
});
/** VkImageFormatProperties2KHR **/
class VkImageFormatProperties2KHR {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x30);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x30) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x30) / 0x8);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    this._imageFormatProperties = new VkImageFormatProperties({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x10 });
    this.sType = 0x3B9BB07B;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null && (value instanceof Object)) {
      let {sType} = value;
      if (sType <= -1) throw new TypeError("Invalid type for 'VkImageFormatProperties2KHR.pNext'");
      switch (sType) {
          
        case 0x3B9BDF59:
        case 0x3B9D2B65:
        case 0x3B9B6A28:
        case 0x3B9CC1E8:
        case 0x3B9D6211:
          break;
        default:
          throw new TypeError("Invalid type for 'VkImageFormatProperties2KHR.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkImageFormatProperties2KHR.pNext'");
    }
  }
  get imageFormatProperties() {
    return this._imageFormatProperties;
  }
  
};

VkImageFormatProperties2KHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkImageFormatProperties2KHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkImageFormatProperties2KHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x30);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkImageFormatProperties2KHR"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x30), 0x0);
  
  
  
  
};

VkImageFormatProperties2KHR.byteLength = 0x30;

VkImageFormatProperties2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  imageFormatProperties: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x20
  }),
});
/** VkPhysicalDeviceImageFormatInfo2 **/
class VkPhysicalDeviceImageFormatInfo2 {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x28);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    
    
    
    this.sType = 0x3B9BB07C;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.format !== void 0) this.format = opts.format;
      if (opts.type !== void 0) this.type = opts.type;
      if (opts.tiling !== void 0) this.tiling = opts.tiling;
      if (opts.usage !== void 0) this.usage = opts.usage;
      if (opts.flags !== void 0) this.flags = opts.flags;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null && (value instanceof Object)) {
      let {sType} = value;
      if (sType <= -1) throw new TypeError("Invalid type for 'VkPhysicalDeviceImageFormatInfo2.pNext'");
      switch (sType) {
          
        case 0x3B9BDF58:
        case 0x3B9D0838:
        case 0x3B9D3332:
        case 0x3B9E8AF0:
        case 0x3B9D6210:
          break;
        default:
          throw new TypeError("Invalid type for 'VkPhysicalDeviceImageFormatInfo2.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkPhysicalDeviceImageFormatInfo2.pNext'");
    }
  }
  get format() {
    return this.memoryViewInt32[0x4];
  }
  set format(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get type() {
    return this.memoryViewInt32[0x5];
  }
  set type(value) {
    this.memoryViewInt32[0x5] = value;
  }
  get tiling() {
    return this.memoryViewInt32[0x6];
  }
  set tiling(value) {
    this.memoryViewInt32[0x6] = value;
  }
  get usage() {
    return this.memoryViewInt32[0x7];
  }
  set usage(value) {
    this.memoryViewInt32[0x7] = value;
  }
  get flags() {
    return this.memoryViewInt32[0x8];
  }
  set flags(value) {
    this.memoryViewInt32[0x8] = value;
  }
  
};

VkPhysicalDeviceImageFormatInfo2.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceImageFormatInfo2"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceImageFormatInfo2.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x28);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceImageFormatInfo2"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPhysicalDeviceImageFormatInfo2.byteLength = 0x28;

VkPhysicalDeviceImageFormatInfo2.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  format: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  type: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  tiling: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  usage: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  flags: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceImageFormatInfo2KHR **/
class VkPhysicalDeviceImageFormatInfo2KHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x28);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    
    
    
    this.sType = 0x3B9BB07C;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.format !== void 0) this.format = opts.format;
      if (opts.type !== void 0) this.type = opts.type;
      if (opts.tiling !== void 0) this.tiling = opts.tiling;
      if (opts.usage !== void 0) this.usage = opts.usage;
      if (opts.flags !== void 0) this.flags = opts.flags;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null && (value instanceof Object)) {
      let {sType} = value;
      if (sType <= -1) throw new TypeError("Invalid type for 'VkPhysicalDeviceImageFormatInfo2KHR.pNext'");
      switch (sType) {
          
        case 0x3B9BDF58:
        case 0x3B9D0838:
        case 0x3B9D3332:
        case 0x3B9E8AF0:
        case 0x3B9D6210:
          break;
        default:
          throw new TypeError("Invalid type for 'VkPhysicalDeviceImageFormatInfo2KHR.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkPhysicalDeviceImageFormatInfo2KHR.pNext'");
    }
  }
  get format() {
    return this.memoryViewInt32[0x4];
  }
  set format(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get type() {
    return this.memoryViewInt32[0x5];
  }
  set type(value) {
    this.memoryViewInt32[0x5] = value;
  }
  get tiling() {
    return this.memoryViewInt32[0x6];
  }
  set tiling(value) {
    this.memoryViewInt32[0x6] = value;
  }
  get usage() {
    return this.memoryViewInt32[0x7];
  }
  set usage(value) {
    this.memoryViewInt32[0x7] = value;
  }
  get flags() {
    return this.memoryViewInt32[0x8];
  }
  set flags(value) {
    this.memoryViewInt32[0x8] = value;
  }
  
};

VkPhysicalDeviceImageFormatInfo2KHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceImageFormatInfo2KHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceImageFormatInfo2KHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x28);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceImageFormatInfo2KHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPhysicalDeviceImageFormatInfo2KHR.byteLength = 0x28;

VkPhysicalDeviceImageFormatInfo2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  format: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  type: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  tiling: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  usage: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  flags: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
});
/** VkQueueFamilyProperties2 **/
class VkQueueFamilyProperties2 {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x28);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    this._queueFamilyProperties = new VkQueueFamilyProperties({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x10 });
    this.sType = 0x3B9BB07D;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null && (value instanceof Object)) {
      let {sType} = value;
      if (sType <= -1) throw new TypeError("Invalid type for 'VkQueueFamilyProperties2.pNext'");
      switch (sType) {
          
        case 0x3B9DEEB1:
          break;
        default:
          throw new TypeError("Invalid type for 'VkQueueFamilyProperties2.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkQueueFamilyProperties2.pNext'");
    }
  }
  get queueFamilyProperties() {
    return this._queueFamilyProperties;
  }
  
};

VkQueueFamilyProperties2.prototype.flush = function flush() {
  //console.log(`Flushing: "VkQueueFamilyProperties2"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkQueueFamilyProperties2.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x28);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkQueueFamilyProperties2"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x28), 0x0);
  
  
  
  
};

VkQueueFamilyProperties2.byteLength = 0x28;

VkQueueFamilyProperties2.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  queueFamilyProperties: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x18
  }),
});
/** VkQueueFamilyProperties2KHR **/
class VkQueueFamilyProperties2KHR {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x28);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    this._queueFamilyProperties = new VkQueueFamilyProperties({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x10 });
    this.sType = 0x3B9BB07D;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null && (value instanceof Object)) {
      let {sType} = value;
      if (sType <= -1) throw new TypeError("Invalid type for 'VkQueueFamilyProperties2KHR.pNext'");
      switch (sType) {
          
        case 0x3B9DEEB1:
          break;
        default:
          throw new TypeError("Invalid type for 'VkQueueFamilyProperties2KHR.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkQueueFamilyProperties2KHR.pNext'");
    }
  }
  get queueFamilyProperties() {
    return this._queueFamilyProperties;
  }
  
};

VkQueueFamilyProperties2KHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkQueueFamilyProperties2KHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkQueueFamilyProperties2KHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x28);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkQueueFamilyProperties2KHR"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x28), 0x0);
  
  
  
  
};

VkQueueFamilyProperties2KHR.byteLength = 0x28;

VkQueueFamilyProperties2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  queueFamilyProperties: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x18
  }),
});
/** VkPhysicalDeviceMemoryProperties2 **/
class VkPhysicalDeviceMemoryProperties2 {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x218);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x218) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x218) / 0x8);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    this._memoryProperties = new VkPhysicalDeviceMemoryProperties({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x10 });
    this.sType = 0x3B9BB07E;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null && (value instanceof Object)) {
      let {sType} = value;
      if (sType <= -1) throw new TypeError("Invalid type for 'VkPhysicalDeviceMemoryProperties2.pNext'");
      switch (sType) {
          
        case 0x3B9E67C8:
          break;
        default:
          throw new TypeError("Invalid type for 'VkPhysicalDeviceMemoryProperties2.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkPhysicalDeviceMemoryProperties2.pNext'");
    }
  }
  get memoryProperties() {
    return this._memoryProperties;
  }
  
};

VkPhysicalDeviceMemoryProperties2.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceMemoryProperties2"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceMemoryProperties2.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x218);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceMemoryProperties2"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x218), 0x0);
  
  
  
  
};

VkPhysicalDeviceMemoryProperties2.byteLength = 0x218;

VkPhysicalDeviceMemoryProperties2.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  memoryProperties: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x208
  }),
});
/** VkPhysicalDeviceMemoryProperties2KHR **/
class VkPhysicalDeviceMemoryProperties2KHR {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x218);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x218) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x218) / 0x8);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    this._memoryProperties = new VkPhysicalDeviceMemoryProperties({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x10 });
    this.sType = 0x3B9BB07E;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null && (value instanceof Object)) {
      let {sType} = value;
      if (sType <= -1) throw new TypeError("Invalid type for 'VkPhysicalDeviceMemoryProperties2KHR.pNext'");
      switch (sType) {
          
        case 0x3B9E67C8:
          break;
        default:
          throw new TypeError("Invalid type for 'VkPhysicalDeviceMemoryProperties2KHR.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkPhysicalDeviceMemoryProperties2KHR.pNext'");
    }
  }
  get memoryProperties() {
    return this._memoryProperties;
  }
  
};

VkPhysicalDeviceMemoryProperties2KHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceMemoryProperties2KHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceMemoryProperties2KHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x218);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceMemoryProperties2KHR"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x218), 0x0);
  
  
  
  
};

VkPhysicalDeviceMemoryProperties2KHR.byteLength = 0x218;

VkPhysicalDeviceMemoryProperties2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  memoryProperties: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x208
  }),
});
/** VkSparseImageFormatProperties2 **/
class VkSparseImageFormatProperties2 {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x28);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    this._properties = new VkSparseImageFormatProperties({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x10 });
    this.sType = 0x3B9BB07F;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkSparseImageFormatProperties2.pNext' isn't allowed to be filled");
  }
  get properties() {
    return this._properties;
  }
  
};

VkSparseImageFormatProperties2.prototype.flush = function flush() {
  //console.log(`Flushing: "VkSparseImageFormatProperties2"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkSparseImageFormatProperties2.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x28);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkSparseImageFormatProperties2"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x28), 0x0);
  
  
  
  
};

VkSparseImageFormatProperties2.byteLength = 0x28;

VkSparseImageFormatProperties2.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  properties: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x14
  }),
});
/** VkSparseImageFormatProperties2KHR **/
class VkSparseImageFormatProperties2KHR {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x28);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    this._properties = new VkSparseImageFormatProperties({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x10 });
    this.sType = 0x3B9BB07F;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkSparseImageFormatProperties2KHR.pNext' isn't allowed to be filled");
  }
  get properties() {
    return this._properties;
  }
  
};

VkSparseImageFormatProperties2KHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkSparseImageFormatProperties2KHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkSparseImageFormatProperties2KHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x28);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkSparseImageFormatProperties2KHR"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x28), 0x0);
  
  
  
  
};

VkSparseImageFormatProperties2KHR.byteLength = 0x28;

VkSparseImageFormatProperties2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  properties: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x14
  }),
});
/** VkPhysicalDeviceSparseImageFormatInfo2 **/
class VkPhysicalDeviceSparseImageFormatInfo2 {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x28);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    
    
    
    this.sType = 0x3B9BB080;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.format !== void 0) this.format = opts.format;
      if (opts.type !== void 0) this.type = opts.type;
      if (opts.samples !== void 0) this.samples = opts.samples;
      if (opts.usage !== void 0) this.usage = opts.usage;
      if (opts.tiling !== void 0) this.tiling = opts.tiling;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceSparseImageFormatInfo2.pNext' isn't allowed to be filled");
  }
  get format() {
    return this.memoryViewInt32[0x4];
  }
  set format(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get type() {
    return this.memoryViewInt32[0x5];
  }
  set type(value) {
    this.memoryViewInt32[0x5] = value;
  }
  get samples() {
    return this.memoryViewInt32[0x6];
  }
  set samples(value) {
    this.memoryViewInt32[0x6] = value;
  }
  get usage() {
    return this.memoryViewInt32[0x7];
  }
  set usage(value) {
    this.memoryViewInt32[0x7] = value;
  }
  get tiling() {
    return this.memoryViewInt32[0x8];
  }
  set tiling(value) {
    this.memoryViewInt32[0x8] = value;
  }
  
};

VkPhysicalDeviceSparseImageFormatInfo2.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceSparseImageFormatInfo2"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceSparseImageFormatInfo2.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x28);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceSparseImageFormatInfo2"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPhysicalDeviceSparseImageFormatInfo2.byteLength = 0x28;

VkPhysicalDeviceSparseImageFormatInfo2.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  format: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  type: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  samples: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  usage: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  tiling: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceSparseImageFormatInfo2KHR **/
class VkPhysicalDeviceSparseImageFormatInfo2KHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x28);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    
    
    
    this.sType = 0x3B9BB080;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.format !== void 0) this.format = opts.format;
      if (opts.type !== void 0) this.type = opts.type;
      if (opts.samples !== void 0) this.samples = opts.samples;
      if (opts.usage !== void 0) this.usage = opts.usage;
      if (opts.tiling !== void 0) this.tiling = opts.tiling;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceSparseImageFormatInfo2KHR.pNext' isn't allowed to be filled");
  }
  get format() {
    return this.memoryViewInt32[0x4];
  }
  set format(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get type() {
    return this.memoryViewInt32[0x5];
  }
  set type(value) {
    this.memoryViewInt32[0x5] = value;
  }
  get samples() {
    return this.memoryViewInt32[0x6];
  }
  set samples(value) {
    this.memoryViewInt32[0x6] = value;
  }
  get usage() {
    return this.memoryViewInt32[0x7];
  }
  set usage(value) {
    this.memoryViewInt32[0x7] = value;
  }
  get tiling() {
    return this.memoryViewInt32[0x8];
  }
  set tiling(value) {
    this.memoryViewInt32[0x8] = value;
  }
  
};

VkPhysicalDeviceSparseImageFormatInfo2KHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceSparseImageFormatInfo2KHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceSparseImageFormatInfo2KHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x28);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceSparseImageFormatInfo2KHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPhysicalDeviceSparseImageFormatInfo2KHR.byteLength = 0x28;

VkPhysicalDeviceSparseImageFormatInfo2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  format: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  type: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  samples: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  usage: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  tiling: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
});
/** VkPhysicalDevicePushDescriptorPropertiesKHR **/
class VkPhysicalDevicePushDescriptorPropertiesKHR {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    
    this.sType = 0x3B9C0280;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDevicePushDescriptorPropertiesKHR.pNext' isn't allowed to be filled");
  }
  get maxPushDescriptors() {
    return this.memoryViewUint32[0x4];
  }
  
};

VkPhysicalDevicePushDescriptorPropertiesKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDevicePushDescriptorPropertiesKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDevicePushDescriptorPropertiesKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDevicePushDescriptorPropertiesKHR"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x18), 0x0);
  
  
};

VkPhysicalDevicePushDescriptorPropertiesKHR.byteLength = 0x18;

VkPhysicalDevicePushDescriptorPropertiesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  maxPushDescriptors: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkConformanceVersionKHR **/
class VkConformanceVersionKHR {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x4);
    this.memoryViewUint8 = new Uint8Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    
    
    
    
    if (typeof opts === "object") {
      if (opts.major !== void 0) this.major = opts.major;
      if (opts.minor !== void 0) this.minor = opts.minor;
      if (opts.subminor !== void 0) this.subminor = opts.subminor;
      if (opts.patch !== void 0) this.patch = opts.patch;
      
    }
  }
  get major() {
    return this.memoryViewUint8[0x0];
  }
  set major(value) {
    this.memoryViewUint8[0x0] = value;
  }
  get minor() {
    return this.memoryViewUint8[0x1];
  }
  set minor(value) {
    this.memoryViewUint8[0x1] = value;
  }
  get subminor() {
    return this.memoryViewUint8[0x2];
  }
  set subminor(value) {
    this.memoryViewUint8[0x2] = value;
  }
  get patch() {
    return this.memoryViewUint8[0x3];
  }
  set patch(value) {
    this.memoryViewUint8[0x3] = value;
  }
  
};

VkConformanceVersionKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkConformanceVersionKHR"`);
  
  return true;
};

VkConformanceVersionKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x4);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkConformanceVersionKHR"`, this.memoryAddress, memoryAddress);
  
};

VkConformanceVersionKHR.byteLength = 0x4;

VkConformanceVersionKHR.memoryLayout = Object.freeze({
  major: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x1
  }),
  minor: Object.freeze({
    byteOffset: 0x1,
    byteLength: 0x1
  }),
  subminor: Object.freeze({
    byteOffset: 0x2,
    byteLength: 0x1
  }),
  patch: Object.freeze({
    byteOffset: 0x3,
    byteLength: 0x1
  }),
});
/** VkPhysicalDeviceDriverPropertiesKHR **/
class VkPhysicalDeviceDriverPropertiesKHR {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x218);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x218) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x218) / 0x8);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    
    
    
    this._conformanceVersion = new VkConformanceVersionKHR({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x214 });
    this.sType = 0x3B9DC7A0;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceDriverPropertiesKHR.pNext' isn't allowed to be filled");
  }
  get driverID() {
    return this.memoryViewInt32[0x4];
  }
  get driverName() {
    return decodeNullTerminatedUTF8String(
      new Uint8Array(this.memoryBuffer).subarray(0x14, 0x128)
    ) || null;
  }
  get driverInfo() {
    return decodeNullTerminatedUTF8String(
      new Uint8Array(this.memoryBuffer).subarray(0x114, 0x328)
    ) || null;
  }
  get conformanceVersion() {
    return this._conformanceVersion;
  }
  
};

VkPhysicalDeviceDriverPropertiesKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceDriverPropertiesKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceDriverPropertiesKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x218);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceDriverPropertiesKHR"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x218), 0x0);
  
  
  
  
};

VkPhysicalDeviceDriverPropertiesKHR.byteLength = 0x218;

VkPhysicalDeviceDriverPropertiesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  driverID: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  driverName: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x100
  }),
  driverInfo: Object.freeze({
    byteOffset: 0x114,
    byteLength: 0x100
  }),
  conformanceVersion: Object.freeze({
    byteOffset: 0x214,
    byteLength: 0x4
  }),
});
/** VkPresentRegionsKHR **/
class VkPresentRegionsKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this._pRegions = null;
    this._pRegionsNative = null;
    this.sType = 0x3B9C1220;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.swapchainCount !== void 0) this.swapchainCount = opts.swapchainCount;
      if (opts.pRegions !== void 0) this.pRegions = opts.pRegions;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPresentRegionsKHR.pNext' isn't allowed to be filled");
  }
  get swapchainCount() {
    return this.memoryViewUint32[0x4];
  }
  set swapchainCount(value) {
    this.memoryViewUint32[0x4] = value;
  }
  get pRegions() {
    return this._pRegions;
  }
  set pRegions(value) {
    if (value !== null && value.constructor === Array) {
      this._pRegions = value;
    } else if (value === null) {
      this._pRegions = null;
    } else {
      throw new TypeError("Invalid type for 'VkPresentRegionsKHR.pRegions': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkPresentRegionsKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPresentRegionsKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pRegions !== null) {
    let array = this._pRegions;
    if (array.length !== this.swapchainCount) {
      throw new RangeError("Invalid array length, expected length of 'swapchainCount' for 'VkPresentRegionsKHR.pRegions'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkPresentRegionKHR) {
        throw new TypeError("Invalid type for 'VkPresentRegionsKHR.pRegions[" + ii + "]': Expected 'VkPresentRegionKHR' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pRegionsNative = nativeArray;
    this.memoryViewBigInt64[0x3] = nativeArray.address;
  }
  
  return true;
};

VkPresentRegionsKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPresentRegionsKHR"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
};

VkPresentRegionsKHR.byteLength = 0x20;

VkPresentRegionsKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  swapchainCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pRegions: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkPresentRegionKHR **/
class VkPresentRegionKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x10);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pRectangles = null;
    this._pRectanglesNative = null;
    
    if (typeof opts === "object") {
      if (opts.rectangleCount !== void 0) this.rectangleCount = opts.rectangleCount;
      if (opts.pRectangles !== void 0) this.pRectangles = opts.pRectangles;
      
    }
  }
  get rectangleCount() {
    return this.memoryViewUint32[0x0];
  }
  set rectangleCount(value) {
    this.memoryViewUint32[0x0] = value;
  }
  get pRectangles() {
    return this._pRectangles;
  }
  set pRectangles(value) {
    if (value !== null && value.constructor === Array) {
      this._pRectangles = value;
    } else if (value === null) {
      this._pRectangles = null;
    } else {
      throw new TypeError("Invalid type for 'VkPresentRegionKHR.pRectangles': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkPresentRegionKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPresentRegionKHR"`);
  
  
  if (this._pRectangles !== null) {
    let array = this._pRectangles;
    if (array.length !== this.rectangleCount) {
      throw new RangeError("Invalid array length, expected length of 'rectangleCount' for 'VkPresentRegionKHR.pRectangles'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkRectLayerKHR) {
        throw new TypeError("Invalid type for 'VkPresentRegionKHR.pRectangles[" + ii + "]': Expected 'VkRectLayerKHR' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pRectanglesNative = nativeArray;
    this.memoryViewBigInt64[0x1] = nativeArray.address;
  }
  
  return true;
};

VkPresentRegionKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x10);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPresentRegionKHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPresentRegionKHR.byteLength = 0x10;

VkPresentRegionKHR.memoryLayout = Object.freeze({
  rectangleCount: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pRectangles: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
});
/** VkRectLayerKHR **/
class VkRectLayerKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x14);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this._offset = new VkOffset2D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x0 });
    this._extent = new VkExtent2D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x8 });
    
    
    if (typeof opts === "object") {
      if (opts.offset !== void 0) this.offset = opts.offset;
      if (opts.extent !== void 0) this.extent = opts.extent;
      if (opts.layer !== void 0) this.layer = opts.layer;
      
    }
  }
  get offset() {
    return this._offset;
  }
  set offset(value) {
    if (value !== null && value.constructor === VkOffset2D) {
      value.flush();
      this._offset = value;
      this.memoryViewBigInt64[0x0] = value.memoryAddress;
      
    } else if (value === null) {
      this._offset = null;
      this.memoryViewBigInt64[0x0] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkRectLayerKHR.offset': Expected 'VkOffset2D' but got '" + value.constructor.name + "'");
    }
  }
  get extent() {
    return this._extent;
  }
  set extent(value) {
    if (value !== null && value.constructor === VkExtent2D) {
      value.flush();
      this._extent = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
      
    } else if (value === null) {
      this._extent = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkRectLayerKHR.extent': Expected 'VkExtent2D' but got '" + value.constructor.name + "'");
    }
  }
  get layer() {
    return this.memoryViewUint32[0x4];
  }
  set layer(value) {
    this.memoryViewUint32[0x4] = value;
  }
  
};

VkRectLayerKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkRectLayerKHR"`);
  
  
  
  
  
  return true;
};

VkRectLayerKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x14);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkRectLayerKHR"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
};

VkRectLayerKHR.byteLength = 0x14;

VkRectLayerKHR.memoryLayout = Object.freeze({
  offset: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x8
  }),
  extent: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  layer: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceVariablePointerFeatures **/
class VkPhysicalDeviceVariablePointerFeatures {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    this.sType = 0x3B9C9EC0;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.variablePointersStorageBuffer !== void 0) this.variablePointersStorageBuffer = opts.variablePointersStorageBuffer;
      if (opts.variablePointers !== void 0) this.variablePointers = opts.variablePointers;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceVariablePointerFeatures.pNext' isn't allowed to be filled");
  }
  get variablePointersStorageBuffer() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set variablePointersStorageBuffer(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  get variablePointers() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  set variablePointers(value) {
    this.memoryViewUint32[0x5] = value | 0;
  }
  
};

VkPhysicalDeviceVariablePointerFeatures.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceVariablePointerFeatures"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceVariablePointerFeatures.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceVariablePointerFeatures"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPhysicalDeviceVariablePointerFeatures.byteLength = 0x18;

VkPhysicalDeviceVariablePointerFeatures.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  variablePointersStorageBuffer: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  variablePointers: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceVariablePointerFeaturesKHR **/
class VkPhysicalDeviceVariablePointerFeaturesKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    this.sType = 0x3B9C9EC0;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.variablePointersStorageBuffer !== void 0) this.variablePointersStorageBuffer = opts.variablePointersStorageBuffer;
      if (opts.variablePointers !== void 0) this.variablePointers = opts.variablePointers;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceVariablePointerFeaturesKHR.pNext' isn't allowed to be filled");
  }
  get variablePointersStorageBuffer() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set variablePointersStorageBuffer(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  get variablePointers() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  set variablePointers(value) {
    this.memoryViewUint32[0x5] = value | 0;
  }
  
};

VkPhysicalDeviceVariablePointerFeaturesKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceVariablePointerFeaturesKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceVariablePointerFeaturesKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceVariablePointerFeaturesKHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPhysicalDeviceVariablePointerFeaturesKHR.byteLength = 0x18;

VkPhysicalDeviceVariablePointerFeaturesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  variablePointersStorageBuffer: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  variablePointers: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
});
/** VkExternalMemoryProperties **/
class VkExternalMemoryProperties {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0xC);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0xC) / 0x4);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    
    
    
    if (typeof opts === "object") {
      
    }
  }
  get externalMemoryFeatures() {
    return this.memoryViewInt32[0x0];
  }
  get exportFromImportedHandleTypes() {
    return this.memoryViewInt32[0x1];
  }
  get compatibleHandleTypes() {
    return this.memoryViewInt32[0x2];
  }
  
};

VkExternalMemoryProperties.prototype.flush = function flush() {
  //console.log(`Flushing: "VkExternalMemoryProperties"`);
  
  return true;
};

VkExternalMemoryProperties.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0xC);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkExternalMemoryProperties"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0xC), 0x0);
};

VkExternalMemoryProperties.byteLength = 0xC;

VkExternalMemoryProperties.memoryLayout = Object.freeze({
  externalMemoryFeatures: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  exportFromImportedHandleTypes: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  compatibleHandleTypes: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
});
/** VkExternalMemoryPropertiesKHR **/
class VkExternalMemoryPropertiesKHR {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0xC);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0xC) / 0x4);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    
    
    
    if (typeof opts === "object") {
      
    }
  }
  get externalMemoryFeatures() {
    return this.memoryViewInt32[0x0];
  }
  get exportFromImportedHandleTypes() {
    return this.memoryViewInt32[0x1];
  }
  get compatibleHandleTypes() {
    return this.memoryViewInt32[0x2];
  }
  
};

VkExternalMemoryPropertiesKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkExternalMemoryPropertiesKHR"`);
  
  return true;
};

VkExternalMemoryPropertiesKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0xC);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkExternalMemoryPropertiesKHR"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0xC), 0x0);
};

VkExternalMemoryPropertiesKHR.byteLength = 0xC;

VkExternalMemoryPropertiesKHR.memoryLayout = Object.freeze({
  externalMemoryFeatures: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  exportFromImportedHandleTypes: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  compatibleHandleTypes: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceExternalImageFormatInfo **/
class VkPhysicalDeviceExternalImageFormatInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = 0x3B9BDF58;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceExternalImageFormatInfo.pNext' isn't allowed to be filled");
  }
  get handleType() {
    return this.memoryViewInt32[0x4];
  }
  set handleType(value) {
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkPhysicalDeviceExternalImageFormatInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceExternalImageFormatInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceExternalImageFormatInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceExternalImageFormatInfo"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPhysicalDeviceExternalImageFormatInfo.byteLength = 0x18;

VkPhysicalDeviceExternalImageFormatInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  handleType: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceExternalImageFormatInfoKHR **/
class VkPhysicalDeviceExternalImageFormatInfoKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = 0x3B9BDF58;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceExternalImageFormatInfoKHR.pNext' isn't allowed to be filled");
  }
  get handleType() {
    return this.memoryViewInt32[0x4];
  }
  set handleType(value) {
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkPhysicalDeviceExternalImageFormatInfoKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceExternalImageFormatInfoKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceExternalImageFormatInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceExternalImageFormatInfoKHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPhysicalDeviceExternalImageFormatInfoKHR.byteLength = 0x18;

VkPhysicalDeviceExternalImageFormatInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  handleType: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkExternalImageFormatProperties **/
class VkExternalImageFormatProperties {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    this._externalMemoryProperties = new VkExternalMemoryProperties({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x10 });
    this.sType = 0x3B9BDF59;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkExternalImageFormatProperties.pNext' isn't allowed to be filled");
  }
  get externalMemoryProperties() {
    return this._externalMemoryProperties;
  }
  
};

VkExternalImageFormatProperties.prototype.flush = function flush() {
  //console.log(`Flushing: "VkExternalImageFormatProperties"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkExternalImageFormatProperties.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkExternalImageFormatProperties"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x20), 0x0);
  
  
  
  
};

VkExternalImageFormatProperties.byteLength = 0x20;

VkExternalImageFormatProperties.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  externalMemoryProperties: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0xC
  }),
});
/** VkExternalImageFormatPropertiesKHR **/
class VkExternalImageFormatPropertiesKHR {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    this._externalMemoryProperties = new VkExternalMemoryProperties({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x10 });
    this.sType = 0x3B9BDF59;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkExternalImageFormatPropertiesKHR.pNext' isn't allowed to be filled");
  }
  get externalMemoryProperties() {
    return this._externalMemoryProperties;
  }
  
};

VkExternalImageFormatPropertiesKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkExternalImageFormatPropertiesKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkExternalImageFormatPropertiesKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkExternalImageFormatPropertiesKHR"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x20), 0x0);
  
  
  
  
};

VkExternalImageFormatPropertiesKHR.byteLength = 0x20;

VkExternalImageFormatPropertiesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  externalMemoryProperties: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0xC
  }),
});
/** VkPhysicalDeviceExternalBufferInfo **/
class VkPhysicalDeviceExternalBufferInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    
    this.sType = 0x3B9BDF5A;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.usage !== void 0) this.usage = opts.usage;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceExternalBufferInfo.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get usage() {
    return this.memoryViewInt32[0x5];
  }
  set usage(value) {
    this.memoryViewInt32[0x5] = value;
  }
  get handleType() {
    return this.memoryViewInt32[0x6];
  }
  set handleType(value) {
    this.memoryViewInt32[0x6] = value;
  }
  
};

VkPhysicalDeviceExternalBufferInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceExternalBufferInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceExternalBufferInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceExternalBufferInfo"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPhysicalDeviceExternalBufferInfo.byteLength = 0x20;

VkPhysicalDeviceExternalBufferInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  usage: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  handleType: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceExternalBufferInfoKHR **/
class VkPhysicalDeviceExternalBufferInfoKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    
    this.sType = 0x3B9BDF5A;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.usage !== void 0) this.usage = opts.usage;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceExternalBufferInfoKHR.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get usage() {
    return this.memoryViewInt32[0x5];
  }
  set usage(value) {
    this.memoryViewInt32[0x5] = value;
  }
  get handleType() {
    return this.memoryViewInt32[0x6];
  }
  set handleType(value) {
    this.memoryViewInt32[0x6] = value;
  }
  
};

VkPhysicalDeviceExternalBufferInfoKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceExternalBufferInfoKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceExternalBufferInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceExternalBufferInfoKHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPhysicalDeviceExternalBufferInfoKHR.byteLength = 0x20;

VkPhysicalDeviceExternalBufferInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  usage: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  handleType: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
});
/** VkExternalBufferProperties **/
class VkExternalBufferProperties {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    this._externalMemoryProperties = new VkExternalMemoryProperties({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x10 });
    this.sType = 0x3B9BDF5B;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkExternalBufferProperties.pNext' isn't allowed to be filled");
  }
  get externalMemoryProperties() {
    return this._externalMemoryProperties;
  }
  
};

VkExternalBufferProperties.prototype.flush = function flush() {
  //console.log(`Flushing: "VkExternalBufferProperties"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkExternalBufferProperties.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkExternalBufferProperties"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x20), 0x0);
  
  
  
  
};

VkExternalBufferProperties.byteLength = 0x20;

VkExternalBufferProperties.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  externalMemoryProperties: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0xC
  }),
});
/** VkExternalBufferPropertiesKHR **/
class VkExternalBufferPropertiesKHR {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    this._externalMemoryProperties = new VkExternalMemoryProperties({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x10 });
    this.sType = 0x3B9BDF5B;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkExternalBufferPropertiesKHR.pNext' isn't allowed to be filled");
  }
  get externalMemoryProperties() {
    return this._externalMemoryProperties;
  }
  
};

VkExternalBufferPropertiesKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkExternalBufferPropertiesKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkExternalBufferPropertiesKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkExternalBufferPropertiesKHR"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x20), 0x0);
  
  
  
  
};

VkExternalBufferPropertiesKHR.byteLength = 0x20;

VkExternalBufferPropertiesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  externalMemoryProperties: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0xC
  }),
});
/** VkPhysicalDeviceIDProperties **/
class VkPhysicalDeviceIDProperties {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x40);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint8 = new Uint8Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x40) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x40) / 0x8);
      this.memoryViewUint8 = new Uint8Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x1, (opts.$memoryOffset + 0x40) / 0x1);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x40) / 0x4);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    this._deviceUUID = [...Array(16)].fill(0x0);
    this._driverUUID = [...Array(16)].fill(0x0);
    this._deviceLUID = [...Array(8)].fill(0x0);
    
    
    this.sType = 0x3B9BDF5C;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceIDProperties.pNext' isn't allowed to be filled");
  }
  get deviceUUID() {
    return [
      this.memoryViewUint8[0x10],
      this.memoryViewUint8[0x11],
      this.memoryViewUint8[0x12],
      this.memoryViewUint8[0x13],
      this.memoryViewUint8[0x14],
      this.memoryViewUint8[0x15],
      this.memoryViewUint8[0x16],
      this.memoryViewUint8[0x17],
      this.memoryViewUint8[0x18],
      this.memoryViewUint8[0x19],
      this.memoryViewUint8[0x1A],
      this.memoryViewUint8[0x1B],
      this.memoryViewUint8[0x1C],
      this.memoryViewUint8[0x1D],
      this.memoryViewUint8[0x1E],
      this.memoryViewUint8[0x1F]
    ];
  }
  get driverUUID() {
    return [
      this.memoryViewUint8[0x20],
      this.memoryViewUint8[0x21],
      this.memoryViewUint8[0x22],
      this.memoryViewUint8[0x23],
      this.memoryViewUint8[0x24],
      this.memoryViewUint8[0x25],
      this.memoryViewUint8[0x26],
      this.memoryViewUint8[0x27],
      this.memoryViewUint8[0x28],
      this.memoryViewUint8[0x29],
      this.memoryViewUint8[0x2A],
      this.memoryViewUint8[0x2B],
      this.memoryViewUint8[0x2C],
      this.memoryViewUint8[0x2D],
      this.memoryViewUint8[0x2E],
      this.memoryViewUint8[0x2F]
    ];
  }
  get deviceLUID() {
    return [
      this.memoryViewUint8[0x30],
      this.memoryViewUint8[0x31],
      this.memoryViewUint8[0x32],
      this.memoryViewUint8[0x33],
      this.memoryViewUint8[0x34],
      this.memoryViewUint8[0x35],
      this.memoryViewUint8[0x36],
      this.memoryViewUint8[0x37]
    ];
  }
  get deviceNodeMask() {
    return this.memoryViewUint32[0xE];
  }
  get deviceLUIDValid() {
    return this.memoryViewUint32[0xF] !== 0;
  }
  
};

VkPhysicalDeviceIDProperties.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceIDProperties"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceIDProperties.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x40);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceIDProperties"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x40), 0x0);
  
  
  
  
  
  
  
  
};

VkPhysicalDeviceIDProperties.byteLength = 0x40;

VkPhysicalDeviceIDProperties.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  deviceUUID: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x10
  }),
  driverUUID: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x10
  }),
  deviceLUID: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x8
  }),
  deviceNodeMask: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x4
  }),
  deviceLUIDValid: Object.freeze({
    byteOffset: 0x3C,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceIDPropertiesKHR **/
class VkPhysicalDeviceIDPropertiesKHR {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x40);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint8 = new Uint8Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x40) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x40) / 0x8);
      this.memoryViewUint8 = new Uint8Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x1, (opts.$memoryOffset + 0x40) / 0x1);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x40) / 0x4);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    this._deviceUUID = [...Array(16)].fill(0x0);
    this._driverUUID = [...Array(16)].fill(0x0);
    this._deviceLUID = [...Array(8)].fill(0x0);
    
    
    this.sType = 0x3B9BDF5C;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceIDPropertiesKHR.pNext' isn't allowed to be filled");
  }
  get deviceUUID() {
    return [
      this.memoryViewUint8[0x10],
      this.memoryViewUint8[0x11],
      this.memoryViewUint8[0x12],
      this.memoryViewUint8[0x13],
      this.memoryViewUint8[0x14],
      this.memoryViewUint8[0x15],
      this.memoryViewUint8[0x16],
      this.memoryViewUint8[0x17],
      this.memoryViewUint8[0x18],
      this.memoryViewUint8[0x19],
      this.memoryViewUint8[0x1A],
      this.memoryViewUint8[0x1B],
      this.memoryViewUint8[0x1C],
      this.memoryViewUint8[0x1D],
      this.memoryViewUint8[0x1E],
      this.memoryViewUint8[0x1F]
    ];
  }
  get driverUUID() {
    return [
      this.memoryViewUint8[0x20],
      this.memoryViewUint8[0x21],
      this.memoryViewUint8[0x22],
      this.memoryViewUint8[0x23],
      this.memoryViewUint8[0x24],
      this.memoryViewUint8[0x25],
      this.memoryViewUint8[0x26],
      this.memoryViewUint8[0x27],
      this.memoryViewUint8[0x28],
      this.memoryViewUint8[0x29],
      this.memoryViewUint8[0x2A],
      this.memoryViewUint8[0x2B],
      this.memoryViewUint8[0x2C],
      this.memoryViewUint8[0x2D],
      this.memoryViewUint8[0x2E],
      this.memoryViewUint8[0x2F]
    ];
  }
  get deviceLUID() {
    return [
      this.memoryViewUint8[0x30],
      this.memoryViewUint8[0x31],
      this.memoryViewUint8[0x32],
      this.memoryViewUint8[0x33],
      this.memoryViewUint8[0x34],
      this.memoryViewUint8[0x35],
      this.memoryViewUint8[0x36],
      this.memoryViewUint8[0x37]
    ];
  }
  get deviceNodeMask() {
    return this.memoryViewUint32[0xE];
  }
  get deviceLUIDValid() {
    return this.memoryViewUint32[0xF] !== 0;
  }
  
};

VkPhysicalDeviceIDPropertiesKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceIDPropertiesKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceIDPropertiesKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x40);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceIDPropertiesKHR"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x40), 0x0);
  
  
  
  
  
  
  
  
};

VkPhysicalDeviceIDPropertiesKHR.byteLength = 0x40;

VkPhysicalDeviceIDPropertiesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  deviceUUID: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x10
  }),
  driverUUID: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x10
  }),
  deviceLUID: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x8
  }),
  deviceNodeMask: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x4
  }),
  deviceLUIDValid: Object.freeze({
    byteOffset: 0x3C,
    byteLength: 0x4
  }),
});
/** VkExternalMemoryImageCreateInfo **/
class VkExternalMemoryImageCreateInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = 0x3B9BE341;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleTypes !== void 0) this.handleTypes = opts.handleTypes;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkExternalMemoryImageCreateInfo.pNext' isn't allowed to be filled");
  }
  get handleTypes() {
    return this.memoryViewInt32[0x4];
  }
  set handleTypes(value) {
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkExternalMemoryImageCreateInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkExternalMemoryImageCreateInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkExternalMemoryImageCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkExternalMemoryImageCreateInfo"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkExternalMemoryImageCreateInfo.byteLength = 0x18;

VkExternalMemoryImageCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  handleTypes: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkExternalMemoryImageCreateInfoKHR **/
class VkExternalMemoryImageCreateInfoKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = 0x3B9BE341;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleTypes !== void 0) this.handleTypes = opts.handleTypes;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkExternalMemoryImageCreateInfoKHR.pNext' isn't allowed to be filled");
  }
  get handleTypes() {
    return this.memoryViewInt32[0x4];
  }
  set handleTypes(value) {
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkExternalMemoryImageCreateInfoKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkExternalMemoryImageCreateInfoKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkExternalMemoryImageCreateInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkExternalMemoryImageCreateInfoKHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkExternalMemoryImageCreateInfoKHR.byteLength = 0x18;

VkExternalMemoryImageCreateInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  handleTypes: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkExternalMemoryBufferCreateInfo **/
class VkExternalMemoryBufferCreateInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = 0x3B9BE340;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleTypes !== void 0) this.handleTypes = opts.handleTypes;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkExternalMemoryBufferCreateInfo.pNext' isn't allowed to be filled");
  }
  get handleTypes() {
    return this.memoryViewInt32[0x4];
  }
  set handleTypes(value) {
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkExternalMemoryBufferCreateInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkExternalMemoryBufferCreateInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkExternalMemoryBufferCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkExternalMemoryBufferCreateInfo"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkExternalMemoryBufferCreateInfo.byteLength = 0x18;

VkExternalMemoryBufferCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  handleTypes: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkExternalMemoryBufferCreateInfoKHR **/
class VkExternalMemoryBufferCreateInfoKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = 0x3B9BE340;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleTypes !== void 0) this.handleTypes = opts.handleTypes;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkExternalMemoryBufferCreateInfoKHR.pNext' isn't allowed to be filled");
  }
  get handleTypes() {
    return this.memoryViewInt32[0x4];
  }
  set handleTypes(value) {
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkExternalMemoryBufferCreateInfoKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkExternalMemoryBufferCreateInfoKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkExternalMemoryBufferCreateInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkExternalMemoryBufferCreateInfoKHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkExternalMemoryBufferCreateInfoKHR.byteLength = 0x18;

VkExternalMemoryBufferCreateInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  handleTypes: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkExportMemoryAllocateInfo **/
class VkExportMemoryAllocateInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = 0x3B9BE342;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleTypes !== void 0) this.handleTypes = opts.handleTypes;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkExportMemoryAllocateInfo.pNext' isn't allowed to be filled");
  }
  get handleTypes() {
    return this.memoryViewInt32[0x4];
  }
  set handleTypes(value) {
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkExportMemoryAllocateInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkExportMemoryAllocateInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkExportMemoryAllocateInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkExportMemoryAllocateInfo"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkExportMemoryAllocateInfo.byteLength = 0x18;

VkExportMemoryAllocateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  handleTypes: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkExportMemoryAllocateInfoKHR **/
class VkExportMemoryAllocateInfoKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = 0x3B9BE342;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleTypes !== void 0) this.handleTypes = opts.handleTypes;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkExportMemoryAllocateInfoKHR.pNext' isn't allowed to be filled");
  }
  get handleTypes() {
    return this.memoryViewInt32[0x4];
  }
  set handleTypes(value) {
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkExportMemoryAllocateInfoKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkExportMemoryAllocateInfoKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkExportMemoryAllocateInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkExportMemoryAllocateInfoKHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkExportMemoryAllocateInfoKHR.byteLength = 0x18;

VkExportMemoryAllocateInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  handleTypes: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkImportMemoryWin32HandleInfoKHR **/
class VkImportMemoryWin32HandleInfoKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x28);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    this._name = null;
    this.sType = 0x3B9BE728;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      if (opts.handle !== void 0) this.handle = opts.handle;
      if (opts.name !== void 0) this.name = opts.name;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkImportMemoryWin32HandleInfoKHR.pNext' isn't allowed to be filled");
  }
  get handleType() {
    return this.memoryViewInt32[0x4];
  }
  set handleType(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get handle() {
    return this.memoryViewBigInt64[0x3];
  }
  set handle(value) {
    this.memoryViewBigInt64[0x3] = value;
  }
  get name() {
    if (this._name !== null) {
      let str = textDecoder.decode(this._name);
      return str.substr(0, str.length - 1);
    } else {
      return null;
    }
  }
  set name(value) {
    if (value !== null && value.constructor === String) {
      this._name = textEncoder.encode(value + NULLT).buffer;
      this.memoryViewBigInt64[0x4] = getAddressFromArrayBuffer(this._name);
    } else if (value === null) {
      this._name = null;
      this.memoryViewBigInt64[0x4] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkImportMemoryWin32HandleInfoKHR.name': Expected 'String' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkImportMemoryWin32HandleInfoKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkImportMemoryWin32HandleInfoKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkImportMemoryWin32HandleInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x28);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkImportMemoryWin32HandleInfoKHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkImportMemoryWin32HandleInfoKHR.byteLength = 0x28;

VkImportMemoryWin32HandleInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  handleType: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  handle: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  name: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
});
/** VkExportMemoryWin32HandleInfoKHR **/
class VkExportMemoryWin32HandleInfoKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x28);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    this._name = null;
    this.sType = 0x3B9BE729;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.name !== void 0) this.name = opts.name;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkExportMemoryWin32HandleInfoKHR.pNext' isn't allowed to be filled");
  }
  get name() {
    if (this._name !== null) {
      let str = textDecoder.decode(this._name);
      return str.substr(0, str.length - 1);
    } else {
      return null;
    }
  }
  set name(value) {
    if (value !== null && value.constructor === String) {
      this._name = textEncoder.encode(value + NULLT).buffer;
      this.memoryViewBigInt64[0x4] = getAddressFromArrayBuffer(this._name);
    } else if (value === null) {
      this._name = null;
      this.memoryViewBigInt64[0x4] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkExportMemoryWin32HandleInfoKHR.name': Expected 'String' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkExportMemoryWin32HandleInfoKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkExportMemoryWin32HandleInfoKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkExportMemoryWin32HandleInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x28);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkExportMemoryWin32HandleInfoKHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkExportMemoryWin32HandleInfoKHR.byteLength = 0x28;

VkExportMemoryWin32HandleInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  name: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
});
/** VkMemoryWin32HandlePropertiesKHR **/
class VkMemoryWin32HandlePropertiesKHR {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    
    this.sType = 0x3B9BE72A;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkMemoryWin32HandlePropertiesKHR.pNext' isn't allowed to be filled");
  }
  get memoryTypeBits() {
    return this.memoryViewUint32[0x4];
  }
  
};

VkMemoryWin32HandlePropertiesKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkMemoryWin32HandlePropertiesKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkMemoryWin32HandlePropertiesKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkMemoryWin32HandlePropertiesKHR"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x18), 0x0);
  
  
};

VkMemoryWin32HandlePropertiesKHR.byteLength = 0x18;

VkMemoryWin32HandlePropertiesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  memoryTypeBits: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkMemoryGetWin32HandleInfoKHR **/
class VkMemoryGetWin32HandleInfoKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    this._memory = null;
    
    this.sType = 0x3B9BE72B;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.memory !== void 0) this.memory = opts.memory;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkMemoryGetWin32HandleInfoKHR.pNext' isn't allowed to be filled");
  }
  get memory() {
    return this._memory;
  }
  set memory(value) {
    if (value !== null && value.constructor === VkDeviceMemory) {
      
      this._memory = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._memory = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkMemoryGetWin32HandleInfoKHR.memory': Expected 'VkDeviceMemory' but got '" + value.constructor.name + "'");
    }
  }
  get handleType() {
    return this.memoryViewInt32[0x6];
  }
  set handleType(value) {
    this.memoryViewInt32[0x6] = value;
  }
  
};

VkMemoryGetWin32HandleInfoKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkMemoryGetWin32HandleInfoKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkMemoryGetWin32HandleInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkMemoryGetWin32HandleInfoKHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkMemoryGetWin32HandleInfoKHR.byteLength = 0x20;

VkMemoryGetWin32HandleInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  memory: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  handleType: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
});
/** VkImportMemoryFdInfoKHR **/
class VkImportMemoryFdInfoKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    this.sType = 0x3B9BEB10;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      if (opts.fd !== void 0) this.fd = opts.fd;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkImportMemoryFdInfoKHR.pNext' isn't allowed to be filled");
  }
  get handleType() {
    return this.memoryViewInt32[0x4];
  }
  set handleType(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get fd() {
    return this.memoryViewInt32[0x5];
  }
  set fd(value) {
    this.memoryViewInt32[0x5] = value;
  }
  
};

VkImportMemoryFdInfoKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkImportMemoryFdInfoKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkImportMemoryFdInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkImportMemoryFdInfoKHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkImportMemoryFdInfoKHR.byteLength = 0x18;

VkImportMemoryFdInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  handleType: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  fd: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
});
/** VkMemoryFdPropertiesKHR **/
class VkMemoryFdPropertiesKHR {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    
    this.sType = 0x3B9BEB11;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkMemoryFdPropertiesKHR.pNext' isn't allowed to be filled");
  }
  get memoryTypeBits() {
    return this.memoryViewUint32[0x4];
  }
  
};

VkMemoryFdPropertiesKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkMemoryFdPropertiesKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkMemoryFdPropertiesKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkMemoryFdPropertiesKHR"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x18), 0x0);
  
  
};

VkMemoryFdPropertiesKHR.byteLength = 0x18;

VkMemoryFdPropertiesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  memoryTypeBits: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkMemoryGetFdInfoKHR **/
class VkMemoryGetFdInfoKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    this._memory = null;
    
    this.sType = 0x3B9BEB12;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.memory !== void 0) this.memory = opts.memory;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkMemoryGetFdInfoKHR.pNext' isn't allowed to be filled");
  }
  get memory() {
    return this._memory;
  }
  set memory(value) {
    if (value !== null && value.constructor === VkDeviceMemory) {
      
      this._memory = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._memory = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkMemoryGetFdInfoKHR.memory': Expected 'VkDeviceMemory' but got '" + value.constructor.name + "'");
    }
  }
  get handleType() {
    return this.memoryViewInt32[0x6];
  }
  set handleType(value) {
    this.memoryViewInt32[0x6] = value;
  }
  
};

VkMemoryGetFdInfoKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkMemoryGetFdInfoKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkMemoryGetFdInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkMemoryGetFdInfoKHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkMemoryGetFdInfoKHR.byteLength = 0x20;

VkMemoryGetFdInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  memory: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  handleType: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
});
/** VkWin32KeyedMutexAcquireReleaseInfoKHR **/
class VkWin32KeyedMutexAcquireReleaseInfoKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x48);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this._pAcquireSyncs = null;
    this._pAcquireSyncsNative = null;
    this._pAcquireKeys = null;
    this._pAcquireTimeouts = null;
    
    this._pReleaseSyncs = null;
    this._pReleaseSyncsNative = null;
    this._pReleaseKeys = null;
    this.sType = 0x3B9BEEF8;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.acquireCount !== void 0) this.acquireCount = opts.acquireCount;
      if (opts.pAcquireSyncs !== void 0) this.pAcquireSyncs = opts.pAcquireSyncs;
      if (opts.pAcquireKeys !== void 0) this.pAcquireKeys = opts.pAcquireKeys;
      if (opts.pAcquireTimeouts !== void 0) this.pAcquireTimeouts = opts.pAcquireTimeouts;
      if (opts.releaseCount !== void 0) this.releaseCount = opts.releaseCount;
      if (opts.pReleaseSyncs !== void 0) this.pReleaseSyncs = opts.pReleaseSyncs;
      if (opts.pReleaseKeys !== void 0) this.pReleaseKeys = opts.pReleaseKeys;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkWin32KeyedMutexAcquireReleaseInfoKHR.pNext' isn't allowed to be filled");
  }
  get acquireCount() {
    return this.memoryViewUint32[0x4];
  }
  set acquireCount(value) {
    this.memoryViewUint32[0x4] = value;
  }
  get pAcquireSyncs() {
    return this._pAcquireSyncs;
  }
  set pAcquireSyncs(value) {
    if (value !== null && value.constructor === Array) {
      this._pAcquireSyncs = value;
    } else if (value === null) {
      this._pAcquireSyncs = null;
    } else {
      throw new TypeError("Invalid type for 'VkWin32KeyedMutexAcquireReleaseInfoKHR.pAcquireSyncs': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get pAcquireKeys() {
    return this._pAcquireKeys;
  }
  set pAcquireKeys(value) {
    if (value !== null && value.constructor === BigUint64Array) {
      this._pAcquireKeys = value;
      this.memoryViewBigInt64[0x4] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pAcquireKeys = null;
      this.memoryViewBigInt64[0x4] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkWin32KeyedMutexAcquireReleaseInfoKHR.pAcquireKeys': Expected 'BigUint64Array' but got '" + value.constructor.name + "'");
    }
  }
  get pAcquireTimeouts() {
    return this._pAcquireTimeouts;
  }
  set pAcquireTimeouts(value) {
    if (value !== null && value.constructor === Uint32Array) {
      this._pAcquireTimeouts = value;
      this.memoryViewBigInt64[0x5] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pAcquireTimeouts = null;
      this.memoryViewBigInt64[0x5] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkWin32KeyedMutexAcquireReleaseInfoKHR.pAcquireTimeouts': Expected 'Uint32Array' but got '" + value.constructor.name + "'");
    }
  }
  get releaseCount() {
    return this.memoryViewUint32[0xC];
  }
  set releaseCount(value) {
    this.memoryViewUint32[0xC] = value;
  }
  get pReleaseSyncs() {
    return this._pReleaseSyncs;
  }
  set pReleaseSyncs(value) {
    if (value !== null && value.constructor === Array) {
      this._pReleaseSyncs = value;
    } else if (value === null) {
      this._pReleaseSyncs = null;
    } else {
      throw new TypeError("Invalid type for 'VkWin32KeyedMutexAcquireReleaseInfoKHR.pReleaseSyncs': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get pReleaseKeys() {
    return this._pReleaseKeys;
  }
  set pReleaseKeys(value) {
    if (value !== null && value.constructor === BigUint64Array) {
      this._pReleaseKeys = value;
      this.memoryViewBigInt64[0x8] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pReleaseKeys = null;
      this.memoryViewBigInt64[0x8] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkWin32KeyedMutexAcquireReleaseInfoKHR.pReleaseKeys': Expected 'BigUint64Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkWin32KeyedMutexAcquireReleaseInfoKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkWin32KeyedMutexAcquireReleaseInfoKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pAcquireSyncs !== null) {
    let array = this._pAcquireSyncs;
    if (array.length !== this.acquireCount) {
      throw new RangeError("Invalid array length, expected length of 'acquireCount' for 'VkWin32KeyedMutexAcquireReleaseInfoKHR.pAcquireSyncs'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkDeviceMemory) {
        throw new TypeError("Invalid type for 'VkWin32KeyedMutexAcquireReleaseInfoKHR.pAcquireSyncs[" + ii + "]': Expected 'VkDeviceMemory' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pAcquireSyncsNative = nativeArray;
    this.memoryViewBigInt64[0x3] = nativeArray.address;
  }
  
  
  if (this._pReleaseSyncs !== null) {
    let array = this._pReleaseSyncs;
    if (array.length !== this.releaseCount) {
      throw new RangeError("Invalid array length, expected length of 'releaseCount' for 'VkWin32KeyedMutexAcquireReleaseInfoKHR.pReleaseSyncs'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkDeviceMemory) {
        throw new TypeError("Invalid type for 'VkWin32KeyedMutexAcquireReleaseInfoKHR.pReleaseSyncs[" + ii + "]': Expected 'VkDeviceMemory' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pReleaseSyncsNative = nativeArray;
    this.memoryViewBigInt64[0x7] = nativeArray.address;
  }
  
  return true;
};

VkWin32KeyedMutexAcquireReleaseInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x48);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkWin32KeyedMutexAcquireReleaseInfoKHR"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
  
  
};

VkWin32KeyedMutexAcquireReleaseInfoKHR.byteLength = 0x48;

VkWin32KeyedMutexAcquireReleaseInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  acquireCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pAcquireSyncs: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  pAcquireKeys: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
  pAcquireTimeouts: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
  releaseCount: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  pReleaseSyncs: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x8
  }),
  pReleaseKeys: Object.freeze({
    byteOffset: 0x40,
    byteLength: 0x8
  }),
});
/** VkPhysicalDeviceExternalSemaphoreInfo **/
class VkPhysicalDeviceExternalSemaphoreInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = 0x3B9BF2E0;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceExternalSemaphoreInfo.pNext' isn't allowed to be filled");
  }
  get handleType() {
    return this.memoryViewInt32[0x4];
  }
  set handleType(value) {
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkPhysicalDeviceExternalSemaphoreInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceExternalSemaphoreInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceExternalSemaphoreInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceExternalSemaphoreInfo"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPhysicalDeviceExternalSemaphoreInfo.byteLength = 0x18;

VkPhysicalDeviceExternalSemaphoreInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  handleType: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceExternalSemaphoreInfoKHR **/
class VkPhysicalDeviceExternalSemaphoreInfoKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = 0x3B9BF2E0;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceExternalSemaphoreInfoKHR.pNext' isn't allowed to be filled");
  }
  get handleType() {
    return this.memoryViewInt32[0x4];
  }
  set handleType(value) {
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkPhysicalDeviceExternalSemaphoreInfoKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceExternalSemaphoreInfoKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceExternalSemaphoreInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceExternalSemaphoreInfoKHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPhysicalDeviceExternalSemaphoreInfoKHR.byteLength = 0x18;

VkPhysicalDeviceExternalSemaphoreInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  handleType: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkExternalSemaphoreProperties **/
class VkExternalSemaphoreProperties {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    
    
    
    this.sType = 0x3B9BF2E1;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkExternalSemaphoreProperties.pNext' isn't allowed to be filled");
  }
  get exportFromImportedHandleTypes() {
    return this.memoryViewInt32[0x4];
  }
  get compatibleHandleTypes() {
    return this.memoryViewInt32[0x5];
  }
  get externalSemaphoreFeatures() {
    return this.memoryViewInt32[0x6];
  }
  
};

VkExternalSemaphoreProperties.prototype.flush = function flush() {
  //console.log(`Flushing: "VkExternalSemaphoreProperties"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkExternalSemaphoreProperties.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkExternalSemaphoreProperties"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x20), 0x0);
  
  
};

VkExternalSemaphoreProperties.byteLength = 0x20;

VkExternalSemaphoreProperties.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  exportFromImportedHandleTypes: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  compatibleHandleTypes: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  externalSemaphoreFeatures: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
});
/** VkExternalSemaphorePropertiesKHR **/
class VkExternalSemaphorePropertiesKHR {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    
    
    
    this.sType = 0x3B9BF2E1;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkExternalSemaphorePropertiesKHR.pNext' isn't allowed to be filled");
  }
  get exportFromImportedHandleTypes() {
    return this.memoryViewInt32[0x4];
  }
  get compatibleHandleTypes() {
    return this.memoryViewInt32[0x5];
  }
  get externalSemaphoreFeatures() {
    return this.memoryViewInt32[0x6];
  }
  
};

VkExternalSemaphorePropertiesKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkExternalSemaphorePropertiesKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkExternalSemaphorePropertiesKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkExternalSemaphorePropertiesKHR"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x20), 0x0);
  
  
};

VkExternalSemaphorePropertiesKHR.byteLength = 0x20;

VkExternalSemaphorePropertiesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  exportFromImportedHandleTypes: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  compatibleHandleTypes: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  externalSemaphoreFeatures: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
});
/** VkExportSemaphoreCreateInfo **/
class VkExportSemaphoreCreateInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = 0x3B9BF6C8;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleTypes !== void 0) this.handleTypes = opts.handleTypes;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkExportSemaphoreCreateInfo.pNext' isn't allowed to be filled");
  }
  get handleTypes() {
    return this.memoryViewInt32[0x4];
  }
  set handleTypes(value) {
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkExportSemaphoreCreateInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkExportSemaphoreCreateInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkExportSemaphoreCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkExportSemaphoreCreateInfo"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkExportSemaphoreCreateInfo.byteLength = 0x18;

VkExportSemaphoreCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  handleTypes: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkExportSemaphoreCreateInfoKHR **/
class VkExportSemaphoreCreateInfoKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = 0x3B9BF6C8;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleTypes !== void 0) this.handleTypes = opts.handleTypes;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkExportSemaphoreCreateInfoKHR.pNext' isn't allowed to be filled");
  }
  get handleTypes() {
    return this.memoryViewInt32[0x4];
  }
  set handleTypes(value) {
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkExportSemaphoreCreateInfoKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkExportSemaphoreCreateInfoKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkExportSemaphoreCreateInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkExportSemaphoreCreateInfoKHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkExportSemaphoreCreateInfoKHR.byteLength = 0x18;

VkExportSemaphoreCreateInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  handleTypes: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkImportSemaphoreWin32HandleInfoKHR **/
class VkImportSemaphoreWin32HandleInfoKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x30);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    this._semaphore = null;
    
    
    
    this._name = null;
    this.sType = 0x3B9BFAB0;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.semaphore !== void 0) this.semaphore = opts.semaphore;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      if (opts.handle !== void 0) this.handle = opts.handle;
      if (opts.name !== void 0) this.name = opts.name;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkImportSemaphoreWin32HandleInfoKHR.pNext' isn't allowed to be filled");
  }
  get semaphore() {
    return this._semaphore;
  }
  set semaphore(value) {
    if (value !== null && value.constructor === VkSemaphore) {
      
      this._semaphore = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._semaphore = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkImportSemaphoreWin32HandleInfoKHR.semaphore': Expected 'VkSemaphore' but got '" + value.constructor.name + "'");
    }
  }
  get flags() {
    return this.memoryViewInt32[0x6];
  }
  set flags(value) {
    this.memoryViewInt32[0x6] = value;
  }
  get handleType() {
    return this.memoryViewInt32[0x7];
  }
  set handleType(value) {
    this.memoryViewInt32[0x7] = value;
  }
  get handle() {
    return this.memoryViewBigInt64[0x4];
  }
  set handle(value) {
    this.memoryViewBigInt64[0x4] = value;
  }
  get name() {
    if (this._name !== null) {
      let str = textDecoder.decode(this._name);
      return str.substr(0, str.length - 1);
    } else {
      return null;
    }
  }
  set name(value) {
    if (value !== null && value.constructor === String) {
      this._name = textEncoder.encode(value + NULLT).buffer;
      this.memoryViewBigInt64[0x5] = getAddressFromArrayBuffer(this._name);
    } else if (value === null) {
      this._name = null;
      this.memoryViewBigInt64[0x5] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkImportSemaphoreWin32HandleInfoKHR.name': Expected 'String' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkImportSemaphoreWin32HandleInfoKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkImportSemaphoreWin32HandleInfoKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkImportSemaphoreWin32HandleInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x30);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkImportSemaphoreWin32HandleInfoKHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkImportSemaphoreWin32HandleInfoKHR.byteLength = 0x30;

VkImportSemaphoreWin32HandleInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  semaphore: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  handleType: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  handle: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
  name: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
});
/** VkExportSemaphoreWin32HandleInfoKHR **/
class VkExportSemaphoreWin32HandleInfoKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x28);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    this._name = null;
    this.sType = 0x3B9BFAB1;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.name !== void 0) this.name = opts.name;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkExportSemaphoreWin32HandleInfoKHR.pNext' isn't allowed to be filled");
  }
  get name() {
    if (this._name !== null) {
      let str = textDecoder.decode(this._name);
      return str.substr(0, str.length - 1);
    } else {
      return null;
    }
  }
  set name(value) {
    if (value !== null && value.constructor === String) {
      this._name = textEncoder.encode(value + NULLT).buffer;
      this.memoryViewBigInt64[0x4] = getAddressFromArrayBuffer(this._name);
    } else if (value === null) {
      this._name = null;
      this.memoryViewBigInt64[0x4] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkExportSemaphoreWin32HandleInfoKHR.name': Expected 'String' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkExportSemaphoreWin32HandleInfoKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkExportSemaphoreWin32HandleInfoKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkExportSemaphoreWin32HandleInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x28);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkExportSemaphoreWin32HandleInfoKHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkExportSemaphoreWin32HandleInfoKHR.byteLength = 0x28;

VkExportSemaphoreWin32HandleInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  name: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
});
/** VkD3D12FenceSubmitInfoKHR **/
class VkD3D12FenceSubmitInfoKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x30);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this._pWaitSemaphoreValues = null;
    
    this._pSignalSemaphoreValues = null;
    this.sType = 0x3B9BFAB2;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.waitSemaphoreValuesCount !== void 0) this.waitSemaphoreValuesCount = opts.waitSemaphoreValuesCount;
      if (opts.pWaitSemaphoreValues !== void 0) this.pWaitSemaphoreValues = opts.pWaitSemaphoreValues;
      if (opts.signalSemaphoreValuesCount !== void 0) this.signalSemaphoreValuesCount = opts.signalSemaphoreValuesCount;
      if (opts.pSignalSemaphoreValues !== void 0) this.pSignalSemaphoreValues = opts.pSignalSemaphoreValues;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkD3D12FenceSubmitInfoKHR.pNext' isn't allowed to be filled");
  }
  get waitSemaphoreValuesCount() {
    return this.memoryViewUint32[0x4];
  }
  set waitSemaphoreValuesCount(value) {
    this.memoryViewUint32[0x4] = value;
  }
  get pWaitSemaphoreValues() {
    return this._pWaitSemaphoreValues;
  }
  set pWaitSemaphoreValues(value) {
    if (value !== null && value.constructor === BigUint64Array) {
      this._pWaitSemaphoreValues = value;
      this.memoryViewBigInt64[0x3] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pWaitSemaphoreValues = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkD3D12FenceSubmitInfoKHR.pWaitSemaphoreValues': Expected 'BigUint64Array' but got '" + value.constructor.name + "'");
    }
  }
  get signalSemaphoreValuesCount() {
    return this.memoryViewUint32[0x8];
  }
  set signalSemaphoreValuesCount(value) {
    this.memoryViewUint32[0x8] = value;
  }
  get pSignalSemaphoreValues() {
    return this._pSignalSemaphoreValues;
  }
  set pSignalSemaphoreValues(value) {
    if (value !== null && value.constructor === BigUint64Array) {
      this._pSignalSemaphoreValues = value;
      this.memoryViewBigInt64[0x5] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pSignalSemaphoreValues = null;
      this.memoryViewBigInt64[0x5] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkD3D12FenceSubmitInfoKHR.pSignalSemaphoreValues': Expected 'BigUint64Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkD3D12FenceSubmitInfoKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkD3D12FenceSubmitInfoKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkD3D12FenceSubmitInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x30);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkD3D12FenceSubmitInfoKHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkD3D12FenceSubmitInfoKHR.byteLength = 0x30;

VkD3D12FenceSubmitInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  waitSemaphoreValuesCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pWaitSemaphoreValues: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  signalSemaphoreValuesCount: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  pSignalSemaphoreValues: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
});
/** VkSemaphoreGetWin32HandleInfoKHR **/
class VkSemaphoreGetWin32HandleInfoKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    this._semaphore = null;
    
    this.sType = 0x3B9BFAB3;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.semaphore !== void 0) this.semaphore = opts.semaphore;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkSemaphoreGetWin32HandleInfoKHR.pNext' isn't allowed to be filled");
  }
  get semaphore() {
    return this._semaphore;
  }
  set semaphore(value) {
    if (value !== null && value.constructor === VkSemaphore) {
      
      this._semaphore = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._semaphore = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkSemaphoreGetWin32HandleInfoKHR.semaphore': Expected 'VkSemaphore' but got '" + value.constructor.name + "'");
    }
  }
  get handleType() {
    return this.memoryViewInt32[0x6];
  }
  set handleType(value) {
    this.memoryViewInt32[0x6] = value;
  }
  
};

VkSemaphoreGetWin32HandleInfoKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkSemaphoreGetWin32HandleInfoKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkSemaphoreGetWin32HandleInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkSemaphoreGetWin32HandleInfoKHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkSemaphoreGetWin32HandleInfoKHR.byteLength = 0x20;

VkSemaphoreGetWin32HandleInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  semaphore: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  handleType: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
});
/** VkImportSemaphoreFdInfoKHR **/
class VkImportSemaphoreFdInfoKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x28);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    this._semaphore = null;
    
    
    
    this.sType = 0x3B9BFE98;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.semaphore !== void 0) this.semaphore = opts.semaphore;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      if (opts.fd !== void 0) this.fd = opts.fd;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkImportSemaphoreFdInfoKHR.pNext' isn't allowed to be filled");
  }
  get semaphore() {
    return this._semaphore;
  }
  set semaphore(value) {
    if (value !== null && value.constructor === VkSemaphore) {
      
      this._semaphore = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._semaphore = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkImportSemaphoreFdInfoKHR.semaphore': Expected 'VkSemaphore' but got '" + value.constructor.name + "'");
    }
  }
  get flags() {
    return this.memoryViewInt32[0x6];
  }
  set flags(value) {
    this.memoryViewInt32[0x6] = value;
  }
  get handleType() {
    return this.memoryViewInt32[0x7];
  }
  set handleType(value) {
    this.memoryViewInt32[0x7] = value;
  }
  get fd() {
    return this.memoryViewInt32[0x8];
  }
  set fd(value) {
    this.memoryViewInt32[0x8] = value;
  }
  
};

VkImportSemaphoreFdInfoKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkImportSemaphoreFdInfoKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkImportSemaphoreFdInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x28);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkImportSemaphoreFdInfoKHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkImportSemaphoreFdInfoKHR.byteLength = 0x28;

VkImportSemaphoreFdInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  semaphore: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  handleType: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  fd: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
});
/** VkSemaphoreGetFdInfoKHR **/
class VkSemaphoreGetFdInfoKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    this._semaphore = null;
    
    this.sType = 0x3B9BFE99;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.semaphore !== void 0) this.semaphore = opts.semaphore;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkSemaphoreGetFdInfoKHR.pNext' isn't allowed to be filled");
  }
  get semaphore() {
    return this._semaphore;
  }
  set semaphore(value) {
    if (value !== null && value.constructor === VkSemaphore) {
      
      this._semaphore = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._semaphore = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkSemaphoreGetFdInfoKHR.semaphore': Expected 'VkSemaphore' but got '" + value.constructor.name + "'");
    }
  }
  get handleType() {
    return this.memoryViewInt32[0x6];
  }
  set handleType(value) {
    this.memoryViewInt32[0x6] = value;
  }
  
};

VkSemaphoreGetFdInfoKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkSemaphoreGetFdInfoKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkSemaphoreGetFdInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkSemaphoreGetFdInfoKHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkSemaphoreGetFdInfoKHR.byteLength = 0x20;

VkSemaphoreGetFdInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  semaphore: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  handleType: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceExternalFenceInfo **/
class VkPhysicalDeviceExternalFenceInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = 0x3B9C7F80;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceExternalFenceInfo.pNext' isn't allowed to be filled");
  }
  get handleType() {
    return this.memoryViewInt32[0x4];
  }
  set handleType(value) {
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkPhysicalDeviceExternalFenceInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceExternalFenceInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceExternalFenceInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceExternalFenceInfo"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPhysicalDeviceExternalFenceInfo.byteLength = 0x18;

VkPhysicalDeviceExternalFenceInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  handleType: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceExternalFenceInfoKHR **/
class VkPhysicalDeviceExternalFenceInfoKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = 0x3B9C7F80;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceExternalFenceInfoKHR.pNext' isn't allowed to be filled");
  }
  get handleType() {
    return this.memoryViewInt32[0x4];
  }
  set handleType(value) {
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkPhysicalDeviceExternalFenceInfoKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceExternalFenceInfoKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceExternalFenceInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceExternalFenceInfoKHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPhysicalDeviceExternalFenceInfoKHR.byteLength = 0x18;

VkPhysicalDeviceExternalFenceInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  handleType: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkExternalFenceProperties **/
class VkExternalFenceProperties {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    
    
    
    this.sType = 0x3B9C7F81;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkExternalFenceProperties.pNext' isn't allowed to be filled");
  }
  get exportFromImportedHandleTypes() {
    return this.memoryViewInt32[0x4];
  }
  get compatibleHandleTypes() {
    return this.memoryViewInt32[0x5];
  }
  get externalFenceFeatures() {
    return this.memoryViewInt32[0x6];
  }
  
};

VkExternalFenceProperties.prototype.flush = function flush() {
  //console.log(`Flushing: "VkExternalFenceProperties"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkExternalFenceProperties.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkExternalFenceProperties"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x20), 0x0);
  
  
};

VkExternalFenceProperties.byteLength = 0x20;

VkExternalFenceProperties.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  exportFromImportedHandleTypes: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  compatibleHandleTypes: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  externalFenceFeatures: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
});
/** VkExternalFencePropertiesKHR **/
class VkExternalFencePropertiesKHR {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    
    
    
    this.sType = 0x3B9C7F81;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkExternalFencePropertiesKHR.pNext' isn't allowed to be filled");
  }
  get exportFromImportedHandleTypes() {
    return this.memoryViewInt32[0x4];
  }
  get compatibleHandleTypes() {
    return this.memoryViewInt32[0x5];
  }
  get externalFenceFeatures() {
    return this.memoryViewInt32[0x6];
  }
  
};

VkExternalFencePropertiesKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkExternalFencePropertiesKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkExternalFencePropertiesKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkExternalFencePropertiesKHR"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x20), 0x0);
  
  
};

VkExternalFencePropertiesKHR.byteLength = 0x20;

VkExternalFencePropertiesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  exportFromImportedHandleTypes: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  compatibleHandleTypes: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  externalFenceFeatures: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
});
/** VkExportFenceCreateInfo **/
class VkExportFenceCreateInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = 0x3B9C8368;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleTypes !== void 0) this.handleTypes = opts.handleTypes;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkExportFenceCreateInfo.pNext' isn't allowed to be filled");
  }
  get handleTypes() {
    return this.memoryViewInt32[0x4];
  }
  set handleTypes(value) {
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkExportFenceCreateInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkExportFenceCreateInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkExportFenceCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkExportFenceCreateInfo"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkExportFenceCreateInfo.byteLength = 0x18;

VkExportFenceCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  handleTypes: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkExportFenceCreateInfoKHR **/
class VkExportFenceCreateInfoKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = 0x3B9C8368;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleTypes !== void 0) this.handleTypes = opts.handleTypes;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkExportFenceCreateInfoKHR.pNext' isn't allowed to be filled");
  }
  get handleTypes() {
    return this.memoryViewInt32[0x4];
  }
  set handleTypes(value) {
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkExportFenceCreateInfoKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkExportFenceCreateInfoKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkExportFenceCreateInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkExportFenceCreateInfoKHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkExportFenceCreateInfoKHR.byteLength = 0x18;

VkExportFenceCreateInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  handleTypes: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkImportFenceWin32HandleInfoKHR **/
class VkImportFenceWin32HandleInfoKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x30);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    this._fence = null;
    
    
    
    this._name = null;
    this.sType = 0x3B9C8750;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.fence !== void 0) this.fence = opts.fence;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      if (opts.handle !== void 0) this.handle = opts.handle;
      if (opts.name !== void 0) this.name = opts.name;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkImportFenceWin32HandleInfoKHR.pNext' isn't allowed to be filled");
  }
  get fence() {
    return this._fence;
  }
  set fence(value) {
    if (value !== null && value.constructor === VkFence) {
      
      this._fence = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._fence = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkImportFenceWin32HandleInfoKHR.fence': Expected 'VkFence' but got '" + value.constructor.name + "'");
    }
  }
  get flags() {
    return this.memoryViewInt32[0x6];
  }
  set flags(value) {
    this.memoryViewInt32[0x6] = value;
  }
  get handleType() {
    return this.memoryViewInt32[0x7];
  }
  set handleType(value) {
    this.memoryViewInt32[0x7] = value;
  }
  get handle() {
    return this.memoryViewBigInt64[0x4];
  }
  set handle(value) {
    this.memoryViewBigInt64[0x4] = value;
  }
  get name() {
    if (this._name !== null) {
      let str = textDecoder.decode(this._name);
      return str.substr(0, str.length - 1);
    } else {
      return null;
    }
  }
  set name(value) {
    if (value !== null && value.constructor === String) {
      this._name = textEncoder.encode(value + NULLT).buffer;
      this.memoryViewBigInt64[0x5] = getAddressFromArrayBuffer(this._name);
    } else if (value === null) {
      this._name = null;
      this.memoryViewBigInt64[0x5] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkImportFenceWin32HandleInfoKHR.name': Expected 'String' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkImportFenceWin32HandleInfoKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkImportFenceWin32HandleInfoKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkImportFenceWin32HandleInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x30);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkImportFenceWin32HandleInfoKHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkImportFenceWin32HandleInfoKHR.byteLength = 0x30;

VkImportFenceWin32HandleInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  fence: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  handleType: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  handle: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
  name: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
});
/** VkExportFenceWin32HandleInfoKHR **/
class VkExportFenceWin32HandleInfoKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x28);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    this._name = null;
    this.sType = 0x3B9C8751;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.name !== void 0) this.name = opts.name;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkExportFenceWin32HandleInfoKHR.pNext' isn't allowed to be filled");
  }
  get name() {
    if (this._name !== null) {
      let str = textDecoder.decode(this._name);
      return str.substr(0, str.length - 1);
    } else {
      return null;
    }
  }
  set name(value) {
    if (value !== null && value.constructor === String) {
      this._name = textEncoder.encode(value + NULLT).buffer;
      this.memoryViewBigInt64[0x4] = getAddressFromArrayBuffer(this._name);
    } else if (value === null) {
      this._name = null;
      this.memoryViewBigInt64[0x4] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkExportFenceWin32HandleInfoKHR.name': Expected 'String' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkExportFenceWin32HandleInfoKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkExportFenceWin32HandleInfoKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkExportFenceWin32HandleInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x28);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkExportFenceWin32HandleInfoKHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkExportFenceWin32HandleInfoKHR.byteLength = 0x28;

VkExportFenceWin32HandleInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  name: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
});
/** VkFenceGetWin32HandleInfoKHR **/
class VkFenceGetWin32HandleInfoKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    this._fence = null;
    
    this.sType = 0x3B9C8752;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.fence !== void 0) this.fence = opts.fence;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkFenceGetWin32HandleInfoKHR.pNext' isn't allowed to be filled");
  }
  get fence() {
    return this._fence;
  }
  set fence(value) {
    if (value !== null && value.constructor === VkFence) {
      
      this._fence = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._fence = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkFenceGetWin32HandleInfoKHR.fence': Expected 'VkFence' but got '" + value.constructor.name + "'");
    }
  }
  get handleType() {
    return this.memoryViewInt32[0x6];
  }
  set handleType(value) {
    this.memoryViewInt32[0x6] = value;
  }
  
};

VkFenceGetWin32HandleInfoKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkFenceGetWin32HandleInfoKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkFenceGetWin32HandleInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkFenceGetWin32HandleInfoKHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkFenceGetWin32HandleInfoKHR.byteLength = 0x20;

VkFenceGetWin32HandleInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  fence: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  handleType: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
});
/** VkImportFenceFdInfoKHR **/
class VkImportFenceFdInfoKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x28);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    this._fence = null;
    
    
    
    this.sType = 0x3B9C8B38;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.fence !== void 0) this.fence = opts.fence;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      if (opts.fd !== void 0) this.fd = opts.fd;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkImportFenceFdInfoKHR.pNext' isn't allowed to be filled");
  }
  get fence() {
    return this._fence;
  }
  set fence(value) {
    if (value !== null && value.constructor === VkFence) {
      
      this._fence = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._fence = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkImportFenceFdInfoKHR.fence': Expected 'VkFence' but got '" + value.constructor.name + "'");
    }
  }
  get flags() {
    return this.memoryViewInt32[0x6];
  }
  set flags(value) {
    this.memoryViewInt32[0x6] = value;
  }
  get handleType() {
    return this.memoryViewInt32[0x7];
  }
  set handleType(value) {
    this.memoryViewInt32[0x7] = value;
  }
  get fd() {
    return this.memoryViewInt32[0x8];
  }
  set fd(value) {
    this.memoryViewInt32[0x8] = value;
  }
  
};

VkImportFenceFdInfoKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkImportFenceFdInfoKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkImportFenceFdInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x28);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkImportFenceFdInfoKHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkImportFenceFdInfoKHR.byteLength = 0x28;

VkImportFenceFdInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  fence: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  handleType: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  fd: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
});
/** VkFenceGetFdInfoKHR **/
class VkFenceGetFdInfoKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    this._fence = null;
    
    this.sType = 0x3B9C8B39;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.fence !== void 0) this.fence = opts.fence;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkFenceGetFdInfoKHR.pNext' isn't allowed to be filled");
  }
  get fence() {
    return this._fence;
  }
  set fence(value) {
    if (value !== null && value.constructor === VkFence) {
      
      this._fence = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._fence = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkFenceGetFdInfoKHR.fence': Expected 'VkFence' but got '" + value.constructor.name + "'");
    }
  }
  get handleType() {
    return this.memoryViewInt32[0x6];
  }
  set handleType(value) {
    this.memoryViewInt32[0x6] = value;
  }
  
};

VkFenceGetFdInfoKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkFenceGetFdInfoKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkFenceGetFdInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkFenceGetFdInfoKHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkFenceGetFdInfoKHR.byteLength = 0x20;

VkFenceGetFdInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  fence: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  handleType: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceMultiviewFeatures **/
class VkPhysicalDeviceMultiviewFeatures {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    
    this.sType = 0x3B9B9909;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.multiview !== void 0) this.multiview = opts.multiview;
      if (opts.multiviewGeometryShader !== void 0) this.multiviewGeometryShader = opts.multiviewGeometryShader;
      if (opts.multiviewTessellationShader !== void 0) this.multiviewTessellationShader = opts.multiviewTessellationShader;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceMultiviewFeatures.pNext' isn't allowed to be filled");
  }
  get multiview() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set multiview(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  get multiviewGeometryShader() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  set multiviewGeometryShader(value) {
    this.memoryViewUint32[0x5] = value | 0;
  }
  get multiviewTessellationShader() {
    return this.memoryViewUint32[0x6] !== 0;
  }
  set multiviewTessellationShader(value) {
    this.memoryViewUint32[0x6] = value | 0;
  }
  
};

VkPhysicalDeviceMultiviewFeatures.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceMultiviewFeatures"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceMultiviewFeatures.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceMultiviewFeatures"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPhysicalDeviceMultiviewFeatures.byteLength = 0x20;

VkPhysicalDeviceMultiviewFeatures.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  multiview: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  multiviewGeometryShader: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  multiviewTessellationShader: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceMultiviewFeaturesKHR **/
class VkPhysicalDeviceMultiviewFeaturesKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    
    this.sType = 0x3B9B9909;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.multiview !== void 0) this.multiview = opts.multiview;
      if (opts.multiviewGeometryShader !== void 0) this.multiviewGeometryShader = opts.multiviewGeometryShader;
      if (opts.multiviewTessellationShader !== void 0) this.multiviewTessellationShader = opts.multiviewTessellationShader;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceMultiviewFeaturesKHR.pNext' isn't allowed to be filled");
  }
  get multiview() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set multiview(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  get multiviewGeometryShader() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  set multiviewGeometryShader(value) {
    this.memoryViewUint32[0x5] = value | 0;
  }
  get multiviewTessellationShader() {
    return this.memoryViewUint32[0x6] !== 0;
  }
  set multiviewTessellationShader(value) {
    this.memoryViewUint32[0x6] = value | 0;
  }
  
};

VkPhysicalDeviceMultiviewFeaturesKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceMultiviewFeaturesKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceMultiviewFeaturesKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceMultiviewFeaturesKHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPhysicalDeviceMultiviewFeaturesKHR.byteLength = 0x20;

VkPhysicalDeviceMultiviewFeaturesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  multiview: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  multiviewGeometryShader: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  multiviewTessellationShader: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceMultiviewProperties **/
class VkPhysicalDeviceMultiviewProperties {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    
    
    this.sType = 0x3B9B990A;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceMultiviewProperties.pNext' isn't allowed to be filled");
  }
  get maxMultiviewViewCount() {
    return this.memoryViewUint32[0x4];
  }
  get maxMultiviewInstanceIndex() {
    return this.memoryViewUint32[0x5];
  }
  
};

VkPhysicalDeviceMultiviewProperties.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceMultiviewProperties"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceMultiviewProperties.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceMultiviewProperties"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x18), 0x0);
  
  
};

VkPhysicalDeviceMultiviewProperties.byteLength = 0x18;

VkPhysicalDeviceMultiviewProperties.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  maxMultiviewViewCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  maxMultiviewInstanceIndex: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceMultiviewPropertiesKHR **/
class VkPhysicalDeviceMultiviewPropertiesKHR {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    
    
    this.sType = 0x3B9B990A;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceMultiviewPropertiesKHR.pNext' isn't allowed to be filled");
  }
  get maxMultiviewViewCount() {
    return this.memoryViewUint32[0x4];
  }
  get maxMultiviewInstanceIndex() {
    return this.memoryViewUint32[0x5];
  }
  
};

VkPhysicalDeviceMultiviewPropertiesKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceMultiviewPropertiesKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceMultiviewPropertiesKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceMultiviewPropertiesKHR"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x18), 0x0);
  
  
};

VkPhysicalDeviceMultiviewPropertiesKHR.byteLength = 0x18;

VkPhysicalDeviceMultiviewPropertiesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  maxMultiviewViewCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  maxMultiviewInstanceIndex: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
});
/** VkRenderPassMultiviewCreateInfo **/
class VkRenderPassMultiviewCreateInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x40);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this._pViewMasks = null;
    
    this._pViewOffsets = null;
    
    this._pCorrelationMasks = null;
    this.sType = 0x3B9B9908;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.subpassCount !== void 0) this.subpassCount = opts.subpassCount;
      if (opts.pViewMasks !== void 0) this.pViewMasks = opts.pViewMasks;
      if (opts.dependencyCount !== void 0) this.dependencyCount = opts.dependencyCount;
      if (opts.pViewOffsets !== void 0) this.pViewOffsets = opts.pViewOffsets;
      if (opts.correlationMaskCount !== void 0) this.correlationMaskCount = opts.correlationMaskCount;
      if (opts.pCorrelationMasks !== void 0) this.pCorrelationMasks = opts.pCorrelationMasks;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkRenderPassMultiviewCreateInfo.pNext' isn't allowed to be filled");
  }
  get subpassCount() {
    return this.memoryViewUint32[0x4];
  }
  set subpassCount(value) {
    this.memoryViewUint32[0x4] = value;
  }
  get pViewMasks() {
    return this._pViewMasks;
  }
  set pViewMasks(value) {
    if (value !== null && value.constructor === Uint32Array) {
      this._pViewMasks = value;
      this.memoryViewBigInt64[0x3] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pViewMasks = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkRenderPassMultiviewCreateInfo.pViewMasks': Expected 'Uint32Array' but got '" + value.constructor.name + "'");
    }
  }
  get dependencyCount() {
    return this.memoryViewUint32[0x8];
  }
  set dependencyCount(value) {
    this.memoryViewUint32[0x8] = value;
  }
  get pViewOffsets() {
    return this._pViewOffsets;
  }
  set pViewOffsets(value) {
    if (value !== null && value.constructor === Int32Array) {
      this._pViewOffsets = value;
      this.memoryViewBigInt64[0x5] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pViewOffsets = null;
      this.memoryViewBigInt64[0x5] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkRenderPassMultiviewCreateInfo.pViewOffsets': Expected 'Int32Array' but got '" + value.constructor.name + "'");
    }
  }
  get correlationMaskCount() {
    return this.memoryViewUint32[0xC];
  }
  set correlationMaskCount(value) {
    this.memoryViewUint32[0xC] = value;
  }
  get pCorrelationMasks() {
    return this._pCorrelationMasks;
  }
  set pCorrelationMasks(value) {
    if (value !== null && value.constructor === Uint32Array) {
      this._pCorrelationMasks = value;
      this.memoryViewBigInt64[0x7] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pCorrelationMasks = null;
      this.memoryViewBigInt64[0x7] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkRenderPassMultiviewCreateInfo.pCorrelationMasks': Expected 'Uint32Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkRenderPassMultiviewCreateInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkRenderPassMultiviewCreateInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkRenderPassMultiviewCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x40);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkRenderPassMultiviewCreateInfo"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkRenderPassMultiviewCreateInfo.byteLength = 0x40;

VkRenderPassMultiviewCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  subpassCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pViewMasks: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  dependencyCount: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  pViewOffsets: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
  correlationMaskCount: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  pCorrelationMasks: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x8
  }),
});
/** VkRenderPassMultiviewCreateInfoKHR **/
class VkRenderPassMultiviewCreateInfoKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x40);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this._pViewMasks = null;
    
    this._pViewOffsets = null;
    
    this._pCorrelationMasks = null;
    this.sType = 0x3B9B9908;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.subpassCount !== void 0) this.subpassCount = opts.subpassCount;
      if (opts.pViewMasks !== void 0) this.pViewMasks = opts.pViewMasks;
      if (opts.dependencyCount !== void 0) this.dependencyCount = opts.dependencyCount;
      if (opts.pViewOffsets !== void 0) this.pViewOffsets = opts.pViewOffsets;
      if (opts.correlationMaskCount !== void 0) this.correlationMaskCount = opts.correlationMaskCount;
      if (opts.pCorrelationMasks !== void 0) this.pCorrelationMasks = opts.pCorrelationMasks;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkRenderPassMultiviewCreateInfoKHR.pNext' isn't allowed to be filled");
  }
  get subpassCount() {
    return this.memoryViewUint32[0x4];
  }
  set subpassCount(value) {
    this.memoryViewUint32[0x4] = value;
  }
  get pViewMasks() {
    return this._pViewMasks;
  }
  set pViewMasks(value) {
    if (value !== null && value.constructor === Uint32Array) {
      this._pViewMasks = value;
      this.memoryViewBigInt64[0x3] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pViewMasks = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkRenderPassMultiviewCreateInfoKHR.pViewMasks': Expected 'Uint32Array' but got '" + value.constructor.name + "'");
    }
  }
  get dependencyCount() {
    return this.memoryViewUint32[0x8];
  }
  set dependencyCount(value) {
    this.memoryViewUint32[0x8] = value;
  }
  get pViewOffsets() {
    return this._pViewOffsets;
  }
  set pViewOffsets(value) {
    if (value !== null && value.constructor === Int32Array) {
      this._pViewOffsets = value;
      this.memoryViewBigInt64[0x5] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pViewOffsets = null;
      this.memoryViewBigInt64[0x5] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkRenderPassMultiviewCreateInfoKHR.pViewOffsets': Expected 'Int32Array' but got '" + value.constructor.name + "'");
    }
  }
  get correlationMaskCount() {
    return this.memoryViewUint32[0xC];
  }
  set correlationMaskCount(value) {
    this.memoryViewUint32[0xC] = value;
  }
  get pCorrelationMasks() {
    return this._pCorrelationMasks;
  }
  set pCorrelationMasks(value) {
    if (value !== null && value.constructor === Uint32Array) {
      this._pCorrelationMasks = value;
      this.memoryViewBigInt64[0x7] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pCorrelationMasks = null;
      this.memoryViewBigInt64[0x7] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkRenderPassMultiviewCreateInfoKHR.pCorrelationMasks': Expected 'Uint32Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkRenderPassMultiviewCreateInfoKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkRenderPassMultiviewCreateInfoKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkRenderPassMultiviewCreateInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x40);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkRenderPassMultiviewCreateInfoKHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkRenderPassMultiviewCreateInfoKHR.byteLength = 0x40;

VkRenderPassMultiviewCreateInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  subpassCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pViewMasks: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  dependencyCount: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  pViewOffsets: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
  correlationMaskCount: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  pCorrelationMasks: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x8
  }),
});
/** VkSurfaceCapabilities2EXT **/
class VkSurfaceCapabilities2EXT {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x48);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x48) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x48) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x48) / 0x4);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    
    
    this._currentExtent = new VkExtent2D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x18 });
    this._minImageExtent = new VkExtent2D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x20 });
    this._maxImageExtent = new VkExtent2D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x28 });
    
    
    
    
    
    
    this.sType = 0x3B9C2990;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkSurfaceCapabilities2EXT.pNext' isn't allowed to be filled");
  }
  get minImageCount() {
    return this.memoryViewUint32[0x4];
  }
  get maxImageCount() {
    return this.memoryViewUint32[0x5];
  }
  get currentExtent() {
    return this._currentExtent;
  }
  get minImageExtent() {
    return this._minImageExtent;
  }
  get maxImageExtent() {
    return this._maxImageExtent;
  }
  get maxImageArrayLayers() {
    return this.memoryViewUint32[0xC];
  }
  get supportedTransforms() {
    return this.memoryViewInt32[0xD];
  }
  get currentTransform() {
    return this.memoryViewInt32[0xE];
  }
  get supportedCompositeAlpha() {
    return this.memoryViewInt32[0xF];
  }
  get supportedUsageFlags() {
    return this.memoryViewInt32[0x10];
  }
  get supportedSurfaceCounters() {
    return this.memoryViewInt32[0x11];
  }
  
};

VkSurfaceCapabilities2EXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkSurfaceCapabilities2EXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkSurfaceCapabilities2EXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x48);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkSurfaceCapabilities2EXT"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x48), 0x0);
  
  
  
  
  
  
  
  
};

VkSurfaceCapabilities2EXT.byteLength = 0x48;

VkSurfaceCapabilities2EXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  minImageCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  maxImageCount: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  currentExtent: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  minImageExtent: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
  maxImageExtent: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
  maxImageArrayLayers: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  supportedTransforms: Object.freeze({
    byteOffset: 0x34,
    byteLength: 0x4
  }),
  currentTransform: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x4
  }),
  supportedCompositeAlpha: Object.freeze({
    byteOffset: 0x3C,
    byteLength: 0x4
  }),
  supportedUsageFlags: Object.freeze({
    byteOffset: 0x40,
    byteLength: 0x4
  }),
  supportedSurfaceCounters: Object.freeze({
    byteOffset: 0x44,
    byteLength: 0x4
  }),
});
/** VkDisplayPowerInfoEXT **/
class VkDisplayPowerInfoEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = 0x3B9C2D78;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.powerState !== void 0) this.powerState = opts.powerState;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDisplayPowerInfoEXT.pNext' isn't allowed to be filled");
  }
  get powerState() {
    return this.memoryViewInt32[0x4];
  }
  set powerState(value) {
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkDisplayPowerInfoEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDisplayPowerInfoEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDisplayPowerInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDisplayPowerInfoEXT"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkDisplayPowerInfoEXT.byteLength = 0x18;

VkDisplayPowerInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  powerState: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkDeviceEventInfoEXT **/
class VkDeviceEventInfoEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = 0x3B9C2D79;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.deviceEvent !== void 0) this.deviceEvent = opts.deviceEvent;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDeviceEventInfoEXT.pNext' isn't allowed to be filled");
  }
  get deviceEvent() {
    return this.memoryViewInt32[0x4];
  }
  set deviceEvent(value) {
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkDeviceEventInfoEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDeviceEventInfoEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDeviceEventInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDeviceEventInfoEXT"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkDeviceEventInfoEXT.byteLength = 0x18;

VkDeviceEventInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  deviceEvent: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkDisplayEventInfoEXT **/
class VkDisplayEventInfoEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = 0x3B9C2D7A;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.displayEvent !== void 0) this.displayEvent = opts.displayEvent;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDisplayEventInfoEXT.pNext' isn't allowed to be filled");
  }
  get displayEvent() {
    return this.memoryViewInt32[0x4];
  }
  set displayEvent(value) {
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkDisplayEventInfoEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDisplayEventInfoEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDisplayEventInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDisplayEventInfoEXT"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkDisplayEventInfoEXT.byteLength = 0x18;

VkDisplayEventInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  displayEvent: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkSwapchainCounterCreateInfoEXT **/
class VkSwapchainCounterCreateInfoEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = 0x3B9C2D7B;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.surfaceCounters !== void 0) this.surfaceCounters = opts.surfaceCounters;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkSwapchainCounterCreateInfoEXT.pNext' isn't allowed to be filled");
  }
  get surfaceCounters() {
    return this.memoryViewInt32[0x4];
  }
  set surfaceCounters(value) {
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkSwapchainCounterCreateInfoEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkSwapchainCounterCreateInfoEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkSwapchainCounterCreateInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkSwapchainCounterCreateInfoEXT"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkSwapchainCounterCreateInfoEXT.byteLength = 0x18;

VkSwapchainCounterCreateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  surfaceCounters: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceGroupProperties **/
class VkPhysicalDeviceGroupProperties {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x120);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x120) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x120) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x120) / 0x4);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    
    this._physicalDevices = null;
    
    this.sType = 0x3B9BDB70;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceGroupProperties.pNext' isn't allowed to be filled");
  }
  get physicalDeviceCount() {
    return this.memoryViewUint32[0x4];
  }
  get physicalDevices() {
    return this._physicalDevices;
  }
  get subsetAllocation() {
    return this.memoryViewUint32[0x46] !== 0;
  }
  
};

VkPhysicalDeviceGroupProperties.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceGroupProperties"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceGroupProperties.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x120);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceGroupProperties"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x120), 0x0);
  
  
  
  
};

VkPhysicalDeviceGroupProperties.byteLength = 0x120;

VkPhysicalDeviceGroupProperties.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  physicalDeviceCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  physicalDevices: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x100
  }),
  subsetAllocation: Object.freeze({
    byteOffset: 0x118,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceGroupPropertiesKHR **/
class VkPhysicalDeviceGroupPropertiesKHR {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x120);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x120) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x120) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x120) / 0x4);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    
    this._physicalDevices = null;
    
    this.sType = 0x3B9BDB70;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceGroupPropertiesKHR.pNext' isn't allowed to be filled");
  }
  get physicalDeviceCount() {
    return this.memoryViewUint32[0x4];
  }
  get physicalDevices() {
    return this._physicalDevices;
  }
  get subsetAllocation() {
    return this.memoryViewUint32[0x46] !== 0;
  }
  
};

VkPhysicalDeviceGroupPropertiesKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceGroupPropertiesKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceGroupPropertiesKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x120);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceGroupPropertiesKHR"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x120), 0x0);
  
  
  
  
};

VkPhysicalDeviceGroupPropertiesKHR.byteLength = 0x120;

VkPhysicalDeviceGroupPropertiesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  physicalDeviceCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  physicalDevices: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x100
  }),
  subsetAllocation: Object.freeze({
    byteOffset: 0x118,
    byteLength: 0x4
  }),
});
/** VkMemoryAllocateFlagsInfo **/
class VkMemoryAllocateFlagsInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    this.sType = 0x3B9BB460;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.deviceMask !== void 0) this.deviceMask = opts.deviceMask;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkMemoryAllocateFlagsInfo.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get deviceMask() {
    return this.memoryViewUint32[0x5];
  }
  set deviceMask(value) {
    this.memoryViewUint32[0x5] = value;
  }
  
};

VkMemoryAllocateFlagsInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkMemoryAllocateFlagsInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkMemoryAllocateFlagsInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkMemoryAllocateFlagsInfo"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkMemoryAllocateFlagsInfo.byteLength = 0x18;

VkMemoryAllocateFlagsInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  deviceMask: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
});
/** VkMemoryAllocateFlagsInfoKHR **/
class VkMemoryAllocateFlagsInfoKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    this.sType = 0x3B9BB460;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.deviceMask !== void 0) this.deviceMask = opts.deviceMask;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkMemoryAllocateFlagsInfoKHR.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get deviceMask() {
    return this.memoryViewUint32[0x5];
  }
  set deviceMask(value) {
    this.memoryViewUint32[0x5] = value;
  }
  
};

VkMemoryAllocateFlagsInfoKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkMemoryAllocateFlagsInfoKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkMemoryAllocateFlagsInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkMemoryAllocateFlagsInfoKHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkMemoryAllocateFlagsInfoKHR.byteLength = 0x18;

VkMemoryAllocateFlagsInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  deviceMask: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
});
/** VkBindBufferMemoryInfo **/
class VkBindBufferMemoryInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x28);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    this._buffer = null;
    this._memory = null;
    
    this.sType = 0x3B9D2F48;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.buffer !== void 0) this.buffer = opts.buffer;
      if (opts.memory !== void 0) this.memory = opts.memory;
      if (opts.memoryOffset !== void 0) this.memoryOffset = opts.memoryOffset;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null && (value instanceof Object)) {
      let {sType} = value;
      if (sType <= -1) throw new TypeError("Invalid type for 'VkBindBufferMemoryInfo.pNext'");
      switch (sType) {
          
        case 0x3B9BB46D:
          break;
        default:
          throw new TypeError("Invalid type for 'VkBindBufferMemoryInfo.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkBindBufferMemoryInfo.pNext'");
    }
  }
  get buffer() {
    return this._buffer;
  }
  set buffer(value) {
    if (value !== null && value.constructor === VkBuffer) {
      
      this._buffer = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._buffer = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkBindBufferMemoryInfo.buffer': Expected 'VkBuffer' but got '" + value.constructor.name + "'");
    }
  }
  get memory() {
    return this._memory;
  }
  set memory(value) {
    if (value !== null && value.constructor === VkDeviceMemory) {
      
      this._memory = value;
      
      this.memoryViewBigInt64[0x3] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._memory = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkBindBufferMemoryInfo.memory': Expected 'VkDeviceMemory' but got '" + value.constructor.name + "'");
    }
  }
  get memoryOffset() {
    return this.memoryViewBigUint64[0x4];
  }
  set memoryOffset(value) {
    this.memoryViewBigUint64[0x4] = value;
  }
  
};

VkBindBufferMemoryInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkBindBufferMemoryInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkBindBufferMemoryInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x28);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkBindBufferMemoryInfo"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkBindBufferMemoryInfo.byteLength = 0x28;

VkBindBufferMemoryInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  buffer: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  memory: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  memoryOffset: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
});
/** VkBindBufferMemoryInfoKHR **/
class VkBindBufferMemoryInfoKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x28);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    this._buffer = null;
    this._memory = null;
    
    this.sType = 0x3B9D2F48;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.buffer !== void 0) this.buffer = opts.buffer;
      if (opts.memory !== void 0) this.memory = opts.memory;
      if (opts.memoryOffset !== void 0) this.memoryOffset = opts.memoryOffset;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null && (value instanceof Object)) {
      let {sType} = value;
      if (sType <= -1) throw new TypeError("Invalid type for 'VkBindBufferMemoryInfoKHR.pNext'");
      switch (sType) {
          
        case 0x3B9BB46D:
          break;
        default:
          throw new TypeError("Invalid type for 'VkBindBufferMemoryInfoKHR.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkBindBufferMemoryInfoKHR.pNext'");
    }
  }
  get buffer() {
    return this._buffer;
  }
  set buffer(value) {
    if (value !== null && value.constructor === VkBuffer) {
      
      this._buffer = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._buffer = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkBindBufferMemoryInfoKHR.buffer': Expected 'VkBuffer' but got '" + value.constructor.name + "'");
    }
  }
  get memory() {
    return this._memory;
  }
  set memory(value) {
    if (value !== null && value.constructor === VkDeviceMemory) {
      
      this._memory = value;
      
      this.memoryViewBigInt64[0x3] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._memory = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkBindBufferMemoryInfoKHR.memory': Expected 'VkDeviceMemory' but got '" + value.constructor.name + "'");
    }
  }
  get memoryOffset() {
    return this.memoryViewBigUint64[0x4];
  }
  set memoryOffset(value) {
    this.memoryViewBigUint64[0x4] = value;
  }
  
};

VkBindBufferMemoryInfoKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkBindBufferMemoryInfoKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkBindBufferMemoryInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x28);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkBindBufferMemoryInfoKHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkBindBufferMemoryInfoKHR.byteLength = 0x28;

VkBindBufferMemoryInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  buffer: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  memory: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  memoryOffset: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
});
/** VkBindBufferMemoryDeviceGroupInfo **/
class VkBindBufferMemoryDeviceGroupInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this._pDeviceIndices = null;
    this.sType = 0x3B9BB46D;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.deviceIndexCount !== void 0) this.deviceIndexCount = opts.deviceIndexCount;
      if (opts.pDeviceIndices !== void 0) this.pDeviceIndices = opts.pDeviceIndices;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkBindBufferMemoryDeviceGroupInfo.pNext' isn't allowed to be filled");
  }
  get deviceIndexCount() {
    return this.memoryViewUint32[0x4];
  }
  set deviceIndexCount(value) {
    this.memoryViewUint32[0x4] = value;
  }
  get pDeviceIndices() {
    return this._pDeviceIndices;
  }
  set pDeviceIndices(value) {
    if (value !== null && value.constructor === Uint32Array) {
      this._pDeviceIndices = value;
      this.memoryViewBigInt64[0x3] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pDeviceIndices = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkBindBufferMemoryDeviceGroupInfo.pDeviceIndices': Expected 'Uint32Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkBindBufferMemoryDeviceGroupInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkBindBufferMemoryDeviceGroupInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkBindBufferMemoryDeviceGroupInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkBindBufferMemoryDeviceGroupInfo"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkBindBufferMemoryDeviceGroupInfo.byteLength = 0x20;

VkBindBufferMemoryDeviceGroupInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  deviceIndexCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pDeviceIndices: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkBindBufferMemoryDeviceGroupInfoKHR **/
class VkBindBufferMemoryDeviceGroupInfoKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this._pDeviceIndices = null;
    this.sType = 0x3B9BB46D;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.deviceIndexCount !== void 0) this.deviceIndexCount = opts.deviceIndexCount;
      if (opts.pDeviceIndices !== void 0) this.pDeviceIndices = opts.pDeviceIndices;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkBindBufferMemoryDeviceGroupInfoKHR.pNext' isn't allowed to be filled");
  }
  get deviceIndexCount() {
    return this.memoryViewUint32[0x4];
  }
  set deviceIndexCount(value) {
    this.memoryViewUint32[0x4] = value;
  }
  get pDeviceIndices() {
    return this._pDeviceIndices;
  }
  set pDeviceIndices(value) {
    if (value !== null && value.constructor === Uint32Array) {
      this._pDeviceIndices = value;
      this.memoryViewBigInt64[0x3] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pDeviceIndices = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkBindBufferMemoryDeviceGroupInfoKHR.pDeviceIndices': Expected 'Uint32Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkBindBufferMemoryDeviceGroupInfoKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkBindBufferMemoryDeviceGroupInfoKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkBindBufferMemoryDeviceGroupInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkBindBufferMemoryDeviceGroupInfoKHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkBindBufferMemoryDeviceGroupInfoKHR.byteLength = 0x20;

VkBindBufferMemoryDeviceGroupInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  deviceIndexCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pDeviceIndices: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkBindImageMemoryInfo **/
class VkBindImageMemoryInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x28);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    this._image = null;
    this._memory = null;
    
    this.sType = 0x3B9D2F49;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.image !== void 0) this.image = opts.image;
      if (opts.memory !== void 0) this.memory = opts.memory;
      if (opts.memoryOffset !== void 0) this.memoryOffset = opts.memoryOffset;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null && (value instanceof Object)) {
      let {sType} = value;
      if (sType <= -1) throw new TypeError("Invalid type for 'VkBindImageMemoryInfo.pNext'");
      switch (sType) {
          
        case 0x3B9BB46E:
        case 0x3B9BB469:
        case 0x3B9D2B62:
          break;
        default:
          throw new TypeError("Invalid type for 'VkBindImageMemoryInfo.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkBindImageMemoryInfo.pNext'");
    }
  }
  get image() {
    return this._image;
  }
  set image(value) {
    if (value !== null && value.constructor === VkImage) {
      
      this._image = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._image = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkBindImageMemoryInfo.image': Expected 'VkImage' but got '" + value.constructor.name + "'");
    }
  }
  get memory() {
    return this._memory;
  }
  set memory(value) {
    if (value !== null && value.constructor === VkDeviceMemory) {
      
      this._memory = value;
      
      this.memoryViewBigInt64[0x3] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._memory = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkBindImageMemoryInfo.memory': Expected 'VkDeviceMemory' but got '" + value.constructor.name + "'");
    }
  }
  get memoryOffset() {
    return this.memoryViewBigUint64[0x4];
  }
  set memoryOffset(value) {
    this.memoryViewBigUint64[0x4] = value;
  }
  
};

VkBindImageMemoryInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkBindImageMemoryInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkBindImageMemoryInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x28);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkBindImageMemoryInfo"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkBindImageMemoryInfo.byteLength = 0x28;

VkBindImageMemoryInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  image: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  memory: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  memoryOffset: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
});
/** VkBindImageMemoryInfoKHR **/
class VkBindImageMemoryInfoKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x28);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    this._image = null;
    this._memory = null;
    
    this.sType = 0x3B9D2F49;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.image !== void 0) this.image = opts.image;
      if (opts.memory !== void 0) this.memory = opts.memory;
      if (opts.memoryOffset !== void 0) this.memoryOffset = opts.memoryOffset;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null && (value instanceof Object)) {
      let {sType} = value;
      if (sType <= -1) throw new TypeError("Invalid type for 'VkBindImageMemoryInfoKHR.pNext'");
      switch (sType) {
          
        case 0x3B9BB46E:
        case 0x3B9BB469:
        case 0x3B9D2B62:
          break;
        default:
          throw new TypeError("Invalid type for 'VkBindImageMemoryInfoKHR.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkBindImageMemoryInfoKHR.pNext'");
    }
  }
  get image() {
    return this._image;
  }
  set image(value) {
    if (value !== null && value.constructor === VkImage) {
      
      this._image = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._image = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkBindImageMemoryInfoKHR.image': Expected 'VkImage' but got '" + value.constructor.name + "'");
    }
  }
  get memory() {
    return this._memory;
  }
  set memory(value) {
    if (value !== null && value.constructor === VkDeviceMemory) {
      
      this._memory = value;
      
      this.memoryViewBigInt64[0x3] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._memory = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkBindImageMemoryInfoKHR.memory': Expected 'VkDeviceMemory' but got '" + value.constructor.name + "'");
    }
  }
  get memoryOffset() {
    return this.memoryViewBigUint64[0x4];
  }
  set memoryOffset(value) {
    this.memoryViewBigUint64[0x4] = value;
  }
  
};

VkBindImageMemoryInfoKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkBindImageMemoryInfoKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkBindImageMemoryInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x28);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkBindImageMemoryInfoKHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkBindImageMemoryInfoKHR.byteLength = 0x28;

VkBindImageMemoryInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  image: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  memory: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  memoryOffset: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
});
/** VkBindImageMemoryDeviceGroupInfo **/
class VkBindImageMemoryDeviceGroupInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x30);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this._pDeviceIndices = null;
    
    this._pSplitInstanceBindRegions = null;
    this._pSplitInstanceBindRegionsNative = null;
    this.sType = 0x3B9BB46E;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.deviceIndexCount !== void 0) this.deviceIndexCount = opts.deviceIndexCount;
      if (opts.pDeviceIndices !== void 0) this.pDeviceIndices = opts.pDeviceIndices;
      if (opts.splitInstanceBindRegionCount !== void 0) this.splitInstanceBindRegionCount = opts.splitInstanceBindRegionCount;
      if (opts.pSplitInstanceBindRegions !== void 0) this.pSplitInstanceBindRegions = opts.pSplitInstanceBindRegions;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkBindImageMemoryDeviceGroupInfo.pNext' isn't allowed to be filled");
  }
  get deviceIndexCount() {
    return this.memoryViewUint32[0x4];
  }
  set deviceIndexCount(value) {
    this.memoryViewUint32[0x4] = value;
  }
  get pDeviceIndices() {
    return this._pDeviceIndices;
  }
  set pDeviceIndices(value) {
    if (value !== null && value.constructor === Uint32Array) {
      this._pDeviceIndices = value;
      this.memoryViewBigInt64[0x3] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pDeviceIndices = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkBindImageMemoryDeviceGroupInfo.pDeviceIndices': Expected 'Uint32Array' but got '" + value.constructor.name + "'");
    }
  }
  get splitInstanceBindRegionCount() {
    return this.memoryViewUint32[0x8];
  }
  set splitInstanceBindRegionCount(value) {
    this.memoryViewUint32[0x8] = value;
  }
  get pSplitInstanceBindRegions() {
    return this._pSplitInstanceBindRegions;
  }
  set pSplitInstanceBindRegions(value) {
    if (value !== null && value.constructor === Array) {
      this._pSplitInstanceBindRegions = value;
    } else if (value === null) {
      this._pSplitInstanceBindRegions = null;
    } else {
      throw new TypeError("Invalid type for 'VkBindImageMemoryDeviceGroupInfo.pSplitInstanceBindRegions': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkBindImageMemoryDeviceGroupInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkBindImageMemoryDeviceGroupInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pSplitInstanceBindRegions !== null) {
    let array = this._pSplitInstanceBindRegions;
    if (array.length !== this.splitInstanceBindRegionCount) {
      throw new RangeError("Invalid array length, expected length of 'splitInstanceBindRegionCount' for 'VkBindImageMemoryDeviceGroupInfo.pSplitInstanceBindRegions'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkRect2D) {
        throw new TypeError("Invalid type for 'VkBindImageMemoryDeviceGroupInfo.pSplitInstanceBindRegions[" + ii + "]': Expected 'VkRect2D' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pSplitInstanceBindRegionsNative = nativeArray;
    this.memoryViewBigInt64[0x5] = nativeArray.address;
  }
  
  return true;
};

VkBindImageMemoryDeviceGroupInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x30);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkBindImageMemoryDeviceGroupInfo"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
};

VkBindImageMemoryDeviceGroupInfo.byteLength = 0x30;

VkBindImageMemoryDeviceGroupInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  deviceIndexCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pDeviceIndices: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  splitInstanceBindRegionCount: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  pSplitInstanceBindRegions: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
});
/** VkBindImageMemoryDeviceGroupInfoKHR **/
class VkBindImageMemoryDeviceGroupInfoKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x30);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this._pDeviceIndices = null;
    
    this._pSplitInstanceBindRegions = null;
    this._pSplitInstanceBindRegionsNative = null;
    this.sType = 0x3B9BB46E;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.deviceIndexCount !== void 0) this.deviceIndexCount = opts.deviceIndexCount;
      if (opts.pDeviceIndices !== void 0) this.pDeviceIndices = opts.pDeviceIndices;
      if (opts.splitInstanceBindRegionCount !== void 0) this.splitInstanceBindRegionCount = opts.splitInstanceBindRegionCount;
      if (opts.pSplitInstanceBindRegions !== void 0) this.pSplitInstanceBindRegions = opts.pSplitInstanceBindRegions;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkBindImageMemoryDeviceGroupInfoKHR.pNext' isn't allowed to be filled");
  }
  get deviceIndexCount() {
    return this.memoryViewUint32[0x4];
  }
  set deviceIndexCount(value) {
    this.memoryViewUint32[0x4] = value;
  }
  get pDeviceIndices() {
    return this._pDeviceIndices;
  }
  set pDeviceIndices(value) {
    if (value !== null && value.constructor === Uint32Array) {
      this._pDeviceIndices = value;
      this.memoryViewBigInt64[0x3] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pDeviceIndices = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkBindImageMemoryDeviceGroupInfoKHR.pDeviceIndices': Expected 'Uint32Array' but got '" + value.constructor.name + "'");
    }
  }
  get splitInstanceBindRegionCount() {
    return this.memoryViewUint32[0x8];
  }
  set splitInstanceBindRegionCount(value) {
    this.memoryViewUint32[0x8] = value;
  }
  get pSplitInstanceBindRegions() {
    return this._pSplitInstanceBindRegions;
  }
  set pSplitInstanceBindRegions(value) {
    if (value !== null && value.constructor === Array) {
      this._pSplitInstanceBindRegions = value;
    } else if (value === null) {
      this._pSplitInstanceBindRegions = null;
    } else {
      throw new TypeError("Invalid type for 'VkBindImageMemoryDeviceGroupInfoKHR.pSplitInstanceBindRegions': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkBindImageMemoryDeviceGroupInfoKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkBindImageMemoryDeviceGroupInfoKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pSplitInstanceBindRegions !== null) {
    let array = this._pSplitInstanceBindRegions;
    if (array.length !== this.splitInstanceBindRegionCount) {
      throw new RangeError("Invalid array length, expected length of 'splitInstanceBindRegionCount' for 'VkBindImageMemoryDeviceGroupInfoKHR.pSplitInstanceBindRegions'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkRect2D) {
        throw new TypeError("Invalid type for 'VkBindImageMemoryDeviceGroupInfoKHR.pSplitInstanceBindRegions[" + ii + "]': Expected 'VkRect2D' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pSplitInstanceBindRegionsNative = nativeArray;
    this.memoryViewBigInt64[0x5] = nativeArray.address;
  }
  
  return true;
};

VkBindImageMemoryDeviceGroupInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x30);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkBindImageMemoryDeviceGroupInfoKHR"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
};

VkBindImageMemoryDeviceGroupInfoKHR.byteLength = 0x30;

VkBindImageMemoryDeviceGroupInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  deviceIndexCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pDeviceIndices: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  splitInstanceBindRegionCount: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  pSplitInstanceBindRegions: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
});
/** VkDeviceGroupRenderPassBeginInfo **/
class VkDeviceGroupRenderPassBeginInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    this._pDeviceRenderAreas = null;
    this._pDeviceRenderAreasNative = null;
    this.sType = 0x3B9BB463;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.deviceMask !== void 0) this.deviceMask = opts.deviceMask;
      if (opts.deviceRenderAreaCount !== void 0) this.deviceRenderAreaCount = opts.deviceRenderAreaCount;
      if (opts.pDeviceRenderAreas !== void 0) this.pDeviceRenderAreas = opts.pDeviceRenderAreas;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDeviceGroupRenderPassBeginInfo.pNext' isn't allowed to be filled");
  }
  get deviceMask() {
    return this.memoryViewUint32[0x4];
  }
  set deviceMask(value) {
    this.memoryViewUint32[0x4] = value;
  }
  get deviceRenderAreaCount() {
    return this.memoryViewUint32[0x5];
  }
  set deviceRenderAreaCount(value) {
    this.memoryViewUint32[0x5] = value;
  }
  get pDeviceRenderAreas() {
    return this._pDeviceRenderAreas;
  }
  set pDeviceRenderAreas(value) {
    if (value !== null && value.constructor === Array) {
      this._pDeviceRenderAreas = value;
    } else if (value === null) {
      this._pDeviceRenderAreas = null;
    } else {
      throw new TypeError("Invalid type for 'VkDeviceGroupRenderPassBeginInfo.pDeviceRenderAreas': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkDeviceGroupRenderPassBeginInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDeviceGroupRenderPassBeginInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pDeviceRenderAreas !== null) {
    let array = this._pDeviceRenderAreas;
    if (array.length !== this.deviceRenderAreaCount) {
      throw new RangeError("Invalid array length, expected length of 'deviceRenderAreaCount' for 'VkDeviceGroupRenderPassBeginInfo.pDeviceRenderAreas'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkRect2D) {
        throw new TypeError("Invalid type for 'VkDeviceGroupRenderPassBeginInfo.pDeviceRenderAreas[" + ii + "]': Expected 'VkRect2D' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pDeviceRenderAreasNative = nativeArray;
    this.memoryViewBigInt64[0x3] = nativeArray.address;
  }
  
  return true;
};

VkDeviceGroupRenderPassBeginInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDeviceGroupRenderPassBeginInfo"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
};

VkDeviceGroupRenderPassBeginInfo.byteLength = 0x20;

VkDeviceGroupRenderPassBeginInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  deviceMask: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  deviceRenderAreaCount: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  pDeviceRenderAreas: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkDeviceGroupRenderPassBeginInfoKHR **/
class VkDeviceGroupRenderPassBeginInfoKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    this._pDeviceRenderAreas = null;
    this._pDeviceRenderAreasNative = null;
    this.sType = 0x3B9BB463;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.deviceMask !== void 0) this.deviceMask = opts.deviceMask;
      if (opts.deviceRenderAreaCount !== void 0) this.deviceRenderAreaCount = opts.deviceRenderAreaCount;
      if (opts.pDeviceRenderAreas !== void 0) this.pDeviceRenderAreas = opts.pDeviceRenderAreas;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDeviceGroupRenderPassBeginInfoKHR.pNext' isn't allowed to be filled");
  }
  get deviceMask() {
    return this.memoryViewUint32[0x4];
  }
  set deviceMask(value) {
    this.memoryViewUint32[0x4] = value;
  }
  get deviceRenderAreaCount() {
    return this.memoryViewUint32[0x5];
  }
  set deviceRenderAreaCount(value) {
    this.memoryViewUint32[0x5] = value;
  }
  get pDeviceRenderAreas() {
    return this._pDeviceRenderAreas;
  }
  set pDeviceRenderAreas(value) {
    if (value !== null && value.constructor === Array) {
      this._pDeviceRenderAreas = value;
    } else if (value === null) {
      this._pDeviceRenderAreas = null;
    } else {
      throw new TypeError("Invalid type for 'VkDeviceGroupRenderPassBeginInfoKHR.pDeviceRenderAreas': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkDeviceGroupRenderPassBeginInfoKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDeviceGroupRenderPassBeginInfoKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pDeviceRenderAreas !== null) {
    let array = this._pDeviceRenderAreas;
    if (array.length !== this.deviceRenderAreaCount) {
      throw new RangeError("Invalid array length, expected length of 'deviceRenderAreaCount' for 'VkDeviceGroupRenderPassBeginInfoKHR.pDeviceRenderAreas'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkRect2D) {
        throw new TypeError("Invalid type for 'VkDeviceGroupRenderPassBeginInfoKHR.pDeviceRenderAreas[" + ii + "]': Expected 'VkRect2D' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pDeviceRenderAreasNative = nativeArray;
    this.memoryViewBigInt64[0x3] = nativeArray.address;
  }
  
  return true;
};

VkDeviceGroupRenderPassBeginInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDeviceGroupRenderPassBeginInfoKHR"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
};

VkDeviceGroupRenderPassBeginInfoKHR.byteLength = 0x20;

VkDeviceGroupRenderPassBeginInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  deviceMask: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  deviceRenderAreaCount: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  pDeviceRenderAreas: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkDeviceGroupCommandBufferBeginInfo **/
class VkDeviceGroupCommandBufferBeginInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = 0x3B9BB464;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.deviceMask !== void 0) this.deviceMask = opts.deviceMask;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDeviceGroupCommandBufferBeginInfo.pNext' isn't allowed to be filled");
  }
  get deviceMask() {
    return this.memoryViewUint32[0x4];
  }
  set deviceMask(value) {
    this.memoryViewUint32[0x4] = value;
  }
  
};

VkDeviceGroupCommandBufferBeginInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDeviceGroupCommandBufferBeginInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDeviceGroupCommandBufferBeginInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDeviceGroupCommandBufferBeginInfo"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkDeviceGroupCommandBufferBeginInfo.byteLength = 0x18;

VkDeviceGroupCommandBufferBeginInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  deviceMask: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkDeviceGroupCommandBufferBeginInfoKHR **/
class VkDeviceGroupCommandBufferBeginInfoKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = 0x3B9BB464;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.deviceMask !== void 0) this.deviceMask = opts.deviceMask;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDeviceGroupCommandBufferBeginInfoKHR.pNext' isn't allowed to be filled");
  }
  get deviceMask() {
    return this.memoryViewUint32[0x4];
  }
  set deviceMask(value) {
    this.memoryViewUint32[0x4] = value;
  }
  
};

VkDeviceGroupCommandBufferBeginInfoKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDeviceGroupCommandBufferBeginInfoKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDeviceGroupCommandBufferBeginInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDeviceGroupCommandBufferBeginInfoKHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkDeviceGroupCommandBufferBeginInfoKHR.byteLength = 0x18;

VkDeviceGroupCommandBufferBeginInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  deviceMask: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkDeviceGroupSubmitInfo **/
class VkDeviceGroupSubmitInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x40);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this._pWaitSemaphoreDeviceIndices = null;
    
    this._pCommandBufferDeviceMasks = null;
    
    this._pSignalSemaphoreDeviceIndices = null;
    this.sType = 0x3B9BB465;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.waitSemaphoreCount !== void 0) this.waitSemaphoreCount = opts.waitSemaphoreCount;
      if (opts.pWaitSemaphoreDeviceIndices !== void 0) this.pWaitSemaphoreDeviceIndices = opts.pWaitSemaphoreDeviceIndices;
      if (opts.commandBufferCount !== void 0) this.commandBufferCount = opts.commandBufferCount;
      if (opts.pCommandBufferDeviceMasks !== void 0) this.pCommandBufferDeviceMasks = opts.pCommandBufferDeviceMasks;
      if (opts.signalSemaphoreCount !== void 0) this.signalSemaphoreCount = opts.signalSemaphoreCount;
      if (opts.pSignalSemaphoreDeviceIndices !== void 0) this.pSignalSemaphoreDeviceIndices = opts.pSignalSemaphoreDeviceIndices;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDeviceGroupSubmitInfo.pNext' isn't allowed to be filled");
  }
  get waitSemaphoreCount() {
    return this.memoryViewUint32[0x4];
  }
  set waitSemaphoreCount(value) {
    this.memoryViewUint32[0x4] = value;
  }
  get pWaitSemaphoreDeviceIndices() {
    return this._pWaitSemaphoreDeviceIndices;
  }
  set pWaitSemaphoreDeviceIndices(value) {
    if (value !== null && value.constructor === Uint32Array) {
      this._pWaitSemaphoreDeviceIndices = value;
      this.memoryViewBigInt64[0x3] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pWaitSemaphoreDeviceIndices = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkDeviceGroupSubmitInfo.pWaitSemaphoreDeviceIndices': Expected 'Uint32Array' but got '" + value.constructor.name + "'");
    }
  }
  get commandBufferCount() {
    return this.memoryViewUint32[0x8];
  }
  set commandBufferCount(value) {
    this.memoryViewUint32[0x8] = value;
  }
  get pCommandBufferDeviceMasks() {
    return this._pCommandBufferDeviceMasks;
  }
  set pCommandBufferDeviceMasks(value) {
    if (value !== null && value.constructor === Uint32Array) {
      this._pCommandBufferDeviceMasks = value;
      this.memoryViewBigInt64[0x5] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pCommandBufferDeviceMasks = null;
      this.memoryViewBigInt64[0x5] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkDeviceGroupSubmitInfo.pCommandBufferDeviceMasks': Expected 'Uint32Array' but got '" + value.constructor.name + "'");
    }
  }
  get signalSemaphoreCount() {
    return this.memoryViewUint32[0xC];
  }
  set signalSemaphoreCount(value) {
    this.memoryViewUint32[0xC] = value;
  }
  get pSignalSemaphoreDeviceIndices() {
    return this._pSignalSemaphoreDeviceIndices;
  }
  set pSignalSemaphoreDeviceIndices(value) {
    if (value !== null && value.constructor === Uint32Array) {
      this._pSignalSemaphoreDeviceIndices = value;
      this.memoryViewBigInt64[0x7] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pSignalSemaphoreDeviceIndices = null;
      this.memoryViewBigInt64[0x7] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkDeviceGroupSubmitInfo.pSignalSemaphoreDeviceIndices': Expected 'Uint32Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkDeviceGroupSubmitInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDeviceGroupSubmitInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDeviceGroupSubmitInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x40);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDeviceGroupSubmitInfo"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkDeviceGroupSubmitInfo.byteLength = 0x40;

VkDeviceGroupSubmitInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  waitSemaphoreCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pWaitSemaphoreDeviceIndices: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  commandBufferCount: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  pCommandBufferDeviceMasks: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
  signalSemaphoreCount: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  pSignalSemaphoreDeviceIndices: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x8
  }),
});
/** VkDeviceGroupSubmitInfoKHR **/
class VkDeviceGroupSubmitInfoKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x40);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this._pWaitSemaphoreDeviceIndices = null;
    
    this._pCommandBufferDeviceMasks = null;
    
    this._pSignalSemaphoreDeviceIndices = null;
    this.sType = 0x3B9BB465;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.waitSemaphoreCount !== void 0) this.waitSemaphoreCount = opts.waitSemaphoreCount;
      if (opts.pWaitSemaphoreDeviceIndices !== void 0) this.pWaitSemaphoreDeviceIndices = opts.pWaitSemaphoreDeviceIndices;
      if (opts.commandBufferCount !== void 0) this.commandBufferCount = opts.commandBufferCount;
      if (opts.pCommandBufferDeviceMasks !== void 0) this.pCommandBufferDeviceMasks = opts.pCommandBufferDeviceMasks;
      if (opts.signalSemaphoreCount !== void 0) this.signalSemaphoreCount = opts.signalSemaphoreCount;
      if (opts.pSignalSemaphoreDeviceIndices !== void 0) this.pSignalSemaphoreDeviceIndices = opts.pSignalSemaphoreDeviceIndices;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDeviceGroupSubmitInfoKHR.pNext' isn't allowed to be filled");
  }
  get waitSemaphoreCount() {
    return this.memoryViewUint32[0x4];
  }
  set waitSemaphoreCount(value) {
    this.memoryViewUint32[0x4] = value;
  }
  get pWaitSemaphoreDeviceIndices() {
    return this._pWaitSemaphoreDeviceIndices;
  }
  set pWaitSemaphoreDeviceIndices(value) {
    if (value !== null && value.constructor === Uint32Array) {
      this._pWaitSemaphoreDeviceIndices = value;
      this.memoryViewBigInt64[0x3] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pWaitSemaphoreDeviceIndices = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkDeviceGroupSubmitInfoKHR.pWaitSemaphoreDeviceIndices': Expected 'Uint32Array' but got '" + value.constructor.name + "'");
    }
  }
  get commandBufferCount() {
    return this.memoryViewUint32[0x8];
  }
  set commandBufferCount(value) {
    this.memoryViewUint32[0x8] = value;
  }
  get pCommandBufferDeviceMasks() {
    return this._pCommandBufferDeviceMasks;
  }
  set pCommandBufferDeviceMasks(value) {
    if (value !== null && value.constructor === Uint32Array) {
      this._pCommandBufferDeviceMasks = value;
      this.memoryViewBigInt64[0x5] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pCommandBufferDeviceMasks = null;
      this.memoryViewBigInt64[0x5] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkDeviceGroupSubmitInfoKHR.pCommandBufferDeviceMasks': Expected 'Uint32Array' but got '" + value.constructor.name + "'");
    }
  }
  get signalSemaphoreCount() {
    return this.memoryViewUint32[0xC];
  }
  set signalSemaphoreCount(value) {
    this.memoryViewUint32[0xC] = value;
  }
  get pSignalSemaphoreDeviceIndices() {
    return this._pSignalSemaphoreDeviceIndices;
  }
  set pSignalSemaphoreDeviceIndices(value) {
    if (value !== null && value.constructor === Uint32Array) {
      this._pSignalSemaphoreDeviceIndices = value;
      this.memoryViewBigInt64[0x7] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pSignalSemaphoreDeviceIndices = null;
      this.memoryViewBigInt64[0x7] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkDeviceGroupSubmitInfoKHR.pSignalSemaphoreDeviceIndices': Expected 'Uint32Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkDeviceGroupSubmitInfoKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDeviceGroupSubmitInfoKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDeviceGroupSubmitInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x40);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDeviceGroupSubmitInfoKHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkDeviceGroupSubmitInfoKHR.byteLength = 0x40;

VkDeviceGroupSubmitInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  waitSemaphoreCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pWaitSemaphoreDeviceIndices: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  commandBufferCount: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  pCommandBufferDeviceMasks: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
  signalSemaphoreCount: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  pSignalSemaphoreDeviceIndices: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x8
  }),
});
/** VkDeviceGroupBindSparseInfo **/
class VkDeviceGroupBindSparseInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    this.sType = 0x3B9BB466;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.resourceDeviceIndex !== void 0) this.resourceDeviceIndex = opts.resourceDeviceIndex;
      if (opts.memoryDeviceIndex !== void 0) this.memoryDeviceIndex = opts.memoryDeviceIndex;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDeviceGroupBindSparseInfo.pNext' isn't allowed to be filled");
  }
  get resourceDeviceIndex() {
    return this.memoryViewUint32[0x4];
  }
  set resourceDeviceIndex(value) {
    this.memoryViewUint32[0x4] = value;
  }
  get memoryDeviceIndex() {
    return this.memoryViewUint32[0x5];
  }
  set memoryDeviceIndex(value) {
    this.memoryViewUint32[0x5] = value;
  }
  
};

VkDeviceGroupBindSparseInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDeviceGroupBindSparseInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDeviceGroupBindSparseInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDeviceGroupBindSparseInfo"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkDeviceGroupBindSparseInfo.byteLength = 0x18;

VkDeviceGroupBindSparseInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  resourceDeviceIndex: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  memoryDeviceIndex: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
});
/** VkDeviceGroupBindSparseInfoKHR **/
class VkDeviceGroupBindSparseInfoKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    this.sType = 0x3B9BB466;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.resourceDeviceIndex !== void 0) this.resourceDeviceIndex = opts.resourceDeviceIndex;
      if (opts.memoryDeviceIndex !== void 0) this.memoryDeviceIndex = opts.memoryDeviceIndex;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDeviceGroupBindSparseInfoKHR.pNext' isn't allowed to be filled");
  }
  get resourceDeviceIndex() {
    return this.memoryViewUint32[0x4];
  }
  set resourceDeviceIndex(value) {
    this.memoryViewUint32[0x4] = value;
  }
  get memoryDeviceIndex() {
    return this.memoryViewUint32[0x5];
  }
  set memoryDeviceIndex(value) {
    this.memoryViewUint32[0x5] = value;
  }
  
};

VkDeviceGroupBindSparseInfoKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDeviceGroupBindSparseInfoKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDeviceGroupBindSparseInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDeviceGroupBindSparseInfoKHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkDeviceGroupBindSparseInfoKHR.byteLength = 0x18;

VkDeviceGroupBindSparseInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  resourceDeviceIndex: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  memoryDeviceIndex: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
});
/** VkDeviceGroupPresentCapabilitiesKHR **/
class VkDeviceGroupPresentCapabilitiesKHR {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x98);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x98) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x98) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x98) / 0x4);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    this._presentMask = [...Array(32)].fill(0x0);
    
    this.sType = 0x3B9BB467;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDeviceGroupPresentCapabilitiesKHR.pNext' isn't allowed to be filled");
  }
  get presentMask() {
    return [
      this.memoryViewUint32[0x4],
      this.memoryViewUint32[0x5],
      this.memoryViewUint32[0x6],
      this.memoryViewUint32[0x7],
      this.memoryViewUint32[0x8],
      this.memoryViewUint32[0x9],
      this.memoryViewUint32[0xA],
      this.memoryViewUint32[0xB],
      this.memoryViewUint32[0xC],
      this.memoryViewUint32[0xD],
      this.memoryViewUint32[0xE],
      this.memoryViewUint32[0xF],
      this.memoryViewUint32[0x10],
      this.memoryViewUint32[0x11],
      this.memoryViewUint32[0x12],
      this.memoryViewUint32[0x13],
      this.memoryViewUint32[0x14],
      this.memoryViewUint32[0x15],
      this.memoryViewUint32[0x16],
      this.memoryViewUint32[0x17],
      this.memoryViewUint32[0x18],
      this.memoryViewUint32[0x19],
      this.memoryViewUint32[0x1A],
      this.memoryViewUint32[0x1B],
      this.memoryViewUint32[0x1C],
      this.memoryViewUint32[0x1D],
      this.memoryViewUint32[0x1E],
      this.memoryViewUint32[0x1F],
      this.memoryViewUint32[0x20],
      this.memoryViewUint32[0x21],
      this.memoryViewUint32[0x22],
      this.memoryViewUint32[0x23]
    ];
  }
  get modes() {
    return this.memoryViewInt32[0x24];
  }
  
};

VkDeviceGroupPresentCapabilitiesKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDeviceGroupPresentCapabilitiesKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDeviceGroupPresentCapabilitiesKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x98);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDeviceGroupPresentCapabilitiesKHR"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x98), 0x0);
  
  
  
  
};

VkDeviceGroupPresentCapabilitiesKHR.byteLength = 0x98;

VkDeviceGroupPresentCapabilitiesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  presentMask: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x80
  }),
  modes: Object.freeze({
    byteOffset: 0x90,
    byteLength: 0x4
  }),
});
/** VkImageSwapchainCreateInfoKHR **/
class VkImageSwapchainCreateInfoKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    this._swapchain = null;
    this.sType = 0x3B9BB468;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.swapchain !== void 0) this.swapchain = opts.swapchain;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkImageSwapchainCreateInfoKHR.pNext' isn't allowed to be filled");
  }
  get swapchain() {
    return this._swapchain;
  }
  set swapchain(value) {
    if (value !== null && value.constructor === VkSwapchainKHR) {
      
      this._swapchain = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._swapchain = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkImageSwapchainCreateInfoKHR.swapchain': Expected 'VkSwapchainKHR' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkImageSwapchainCreateInfoKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkImageSwapchainCreateInfoKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkImageSwapchainCreateInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkImageSwapchainCreateInfoKHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkImageSwapchainCreateInfoKHR.byteLength = 0x18;

VkImageSwapchainCreateInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  swapchain: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
});
/** VkBindImageMemorySwapchainInfoKHR **/
class VkBindImageMemorySwapchainInfoKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    this._swapchain = null;
    
    this.sType = 0x3B9BB469;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.swapchain !== void 0) this.swapchain = opts.swapchain;
      if (opts.imageIndex !== void 0) this.imageIndex = opts.imageIndex;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkBindImageMemorySwapchainInfoKHR.pNext' isn't allowed to be filled");
  }
  get swapchain() {
    return this._swapchain;
  }
  set swapchain(value) {
    if (value !== null && value.constructor === VkSwapchainKHR) {
      
      this._swapchain = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._swapchain = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkBindImageMemorySwapchainInfoKHR.swapchain': Expected 'VkSwapchainKHR' but got '" + value.constructor.name + "'");
    }
  }
  get imageIndex() {
    return this.memoryViewUint32[0x6];
  }
  set imageIndex(value) {
    this.memoryViewUint32[0x6] = value;
  }
  
};

VkBindImageMemorySwapchainInfoKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkBindImageMemorySwapchainInfoKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkBindImageMemorySwapchainInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkBindImageMemorySwapchainInfoKHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkBindImageMemorySwapchainInfoKHR.byteLength = 0x20;

VkBindImageMemorySwapchainInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  swapchain: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  imageIndex: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
});
/** VkAcquireNextImageInfoKHR **/
class VkAcquireNextImageInfoKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x38);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    this._swapchain = null;
    
    this._semaphore = null;
    this._fence = null;
    
    this.sType = 0x3B9BB46A;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.swapchain !== void 0) this.swapchain = opts.swapchain;
      if (opts.timeout !== void 0) this.timeout = opts.timeout;
      if (opts.semaphore !== void 0) this.semaphore = opts.semaphore;
      if (opts.fence !== void 0) this.fence = opts.fence;
      if (opts.deviceMask !== void 0) this.deviceMask = opts.deviceMask;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkAcquireNextImageInfoKHR.pNext' isn't allowed to be filled");
  }
  get swapchain() {
    return this._swapchain;
  }
  set swapchain(value) {
    if (value !== null && value.constructor === VkSwapchainKHR) {
      
      this._swapchain = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._swapchain = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkAcquireNextImageInfoKHR.swapchain': Expected 'VkSwapchainKHR' but got '" + value.constructor.name + "'");
    }
  }
  get timeout() {
    return this.memoryViewBigUint64[0x3];
  }
  set timeout(value) {
    this.memoryViewBigUint64[0x3] = value;
  }
  get semaphore() {
    return this._semaphore;
  }
  set semaphore(value) {
    if (value !== null && value.constructor === VkSemaphore) {
      
      this._semaphore = value;
      
      this.memoryViewBigInt64[0x4] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._semaphore = null;
      this.memoryViewBigInt64[0x4] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkAcquireNextImageInfoKHR.semaphore': Expected 'VkSemaphore' but got '" + value.constructor.name + "'");
    }
  }
  get fence() {
    return this._fence;
  }
  set fence(value) {
    if (value !== null && value.constructor === VkFence) {
      
      this._fence = value;
      
      this.memoryViewBigInt64[0x5] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._fence = null;
      this.memoryViewBigInt64[0x5] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkAcquireNextImageInfoKHR.fence': Expected 'VkFence' but got '" + value.constructor.name + "'");
    }
  }
  get deviceMask() {
    return this.memoryViewUint32[0xC];
  }
  set deviceMask(value) {
    this.memoryViewUint32[0xC] = value;
  }
  
};

VkAcquireNextImageInfoKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkAcquireNextImageInfoKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkAcquireNextImageInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x38);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkAcquireNextImageInfoKHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkAcquireNextImageInfoKHR.byteLength = 0x38;

VkAcquireNextImageInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  swapchain: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  timeout: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  semaphore: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
  fence: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
  deviceMask: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
});
/** VkDeviceGroupPresentInfoKHR **/
class VkDeviceGroupPresentInfoKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x28);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this._pDeviceMasks = null;
    
    this.sType = 0x3B9BB46B;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.swapchainCount !== void 0) this.swapchainCount = opts.swapchainCount;
      if (opts.pDeviceMasks !== void 0) this.pDeviceMasks = opts.pDeviceMasks;
      if (opts.mode !== void 0) this.mode = opts.mode;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDeviceGroupPresentInfoKHR.pNext' isn't allowed to be filled");
  }
  get swapchainCount() {
    return this.memoryViewUint32[0x4];
  }
  set swapchainCount(value) {
    this.memoryViewUint32[0x4] = value;
  }
  get pDeviceMasks() {
    return this._pDeviceMasks;
  }
  set pDeviceMasks(value) {
    if (value !== null && value.constructor === Uint32Array) {
      this._pDeviceMasks = value;
      this.memoryViewBigInt64[0x3] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pDeviceMasks = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkDeviceGroupPresentInfoKHR.pDeviceMasks': Expected 'Uint32Array' but got '" + value.constructor.name + "'");
    }
  }
  get mode() {
    return this.memoryViewInt32[0x8];
  }
  set mode(value) {
    this.memoryViewInt32[0x8] = value;
  }
  
};

VkDeviceGroupPresentInfoKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDeviceGroupPresentInfoKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDeviceGroupPresentInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x28);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDeviceGroupPresentInfoKHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkDeviceGroupPresentInfoKHR.byteLength = 0x28;

VkDeviceGroupPresentInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  swapchainCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pDeviceMasks: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  mode: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
});
/** VkDeviceGroupDeviceCreateInfo **/
class VkDeviceGroupDeviceCreateInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this._pPhysicalDevices = null;
    this._pPhysicalDevicesNative = null;
    this.sType = 0x3B9BDB71;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.physicalDeviceCount !== void 0) this.physicalDeviceCount = opts.physicalDeviceCount;
      if (opts.pPhysicalDevices !== void 0) this.pPhysicalDevices = opts.pPhysicalDevices;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDeviceGroupDeviceCreateInfo.pNext' isn't allowed to be filled");
  }
  get physicalDeviceCount() {
    return this.memoryViewUint32[0x4];
  }
  set physicalDeviceCount(value) {
    this.memoryViewUint32[0x4] = value;
  }
  get pPhysicalDevices() {
    return this._pPhysicalDevices;
  }
  set pPhysicalDevices(value) {
    if (value !== null && value.constructor === Array) {
      this._pPhysicalDevices = value;
    } else if (value === null) {
      this._pPhysicalDevices = null;
    } else {
      throw new TypeError("Invalid type for 'VkDeviceGroupDeviceCreateInfo.pPhysicalDevices': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkDeviceGroupDeviceCreateInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDeviceGroupDeviceCreateInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pPhysicalDevices !== null) {
    let array = this._pPhysicalDevices;
    if (array.length !== this.physicalDeviceCount) {
      throw new RangeError("Invalid array length, expected length of 'physicalDeviceCount' for 'VkDeviceGroupDeviceCreateInfo.pPhysicalDevices'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkPhysicalDevice) {
        throw new TypeError("Invalid type for 'VkDeviceGroupDeviceCreateInfo.pPhysicalDevices[" + ii + "]': Expected 'VkPhysicalDevice' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pPhysicalDevicesNative = nativeArray;
    this.memoryViewBigInt64[0x3] = nativeArray.address;
  }
  
  return true;
};

VkDeviceGroupDeviceCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDeviceGroupDeviceCreateInfo"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
};

VkDeviceGroupDeviceCreateInfo.byteLength = 0x20;

VkDeviceGroupDeviceCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  physicalDeviceCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pPhysicalDevices: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkDeviceGroupDeviceCreateInfoKHR **/
class VkDeviceGroupDeviceCreateInfoKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this._pPhysicalDevices = null;
    this._pPhysicalDevicesNative = null;
    this.sType = 0x3B9BDB71;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.physicalDeviceCount !== void 0) this.physicalDeviceCount = opts.physicalDeviceCount;
      if (opts.pPhysicalDevices !== void 0) this.pPhysicalDevices = opts.pPhysicalDevices;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDeviceGroupDeviceCreateInfoKHR.pNext' isn't allowed to be filled");
  }
  get physicalDeviceCount() {
    return this.memoryViewUint32[0x4];
  }
  set physicalDeviceCount(value) {
    this.memoryViewUint32[0x4] = value;
  }
  get pPhysicalDevices() {
    return this._pPhysicalDevices;
  }
  set pPhysicalDevices(value) {
    if (value !== null && value.constructor === Array) {
      this._pPhysicalDevices = value;
    } else if (value === null) {
      this._pPhysicalDevices = null;
    } else {
      throw new TypeError("Invalid type for 'VkDeviceGroupDeviceCreateInfoKHR.pPhysicalDevices': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkDeviceGroupDeviceCreateInfoKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDeviceGroupDeviceCreateInfoKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pPhysicalDevices !== null) {
    let array = this._pPhysicalDevices;
    if (array.length !== this.physicalDeviceCount) {
      throw new RangeError("Invalid array length, expected length of 'physicalDeviceCount' for 'VkDeviceGroupDeviceCreateInfoKHR.pPhysicalDevices'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkPhysicalDevice) {
        throw new TypeError("Invalid type for 'VkDeviceGroupDeviceCreateInfoKHR.pPhysicalDevices[" + ii + "]': Expected 'VkPhysicalDevice' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pPhysicalDevicesNative = nativeArray;
    this.memoryViewBigInt64[0x3] = nativeArray.address;
  }
  
  return true;
};

VkDeviceGroupDeviceCreateInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDeviceGroupDeviceCreateInfoKHR"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
};

VkDeviceGroupDeviceCreateInfoKHR.byteLength = 0x20;

VkDeviceGroupDeviceCreateInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  physicalDeviceCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pPhysicalDevices: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkDeviceGroupSwapchainCreateInfoKHR **/
class VkDeviceGroupSwapchainCreateInfoKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = 0x3B9BB46C;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.modes !== void 0) this.modes = opts.modes;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDeviceGroupSwapchainCreateInfoKHR.pNext' isn't allowed to be filled");
  }
  get modes() {
    return this.memoryViewInt32[0x4];
  }
  set modes(value) {
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkDeviceGroupSwapchainCreateInfoKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDeviceGroupSwapchainCreateInfoKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDeviceGroupSwapchainCreateInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDeviceGroupSwapchainCreateInfoKHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkDeviceGroupSwapchainCreateInfoKHR.byteLength = 0x18;

VkDeviceGroupSwapchainCreateInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  modes: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkDescriptorUpdateTemplateEntry **/
class VkDescriptorUpdateTemplateEntry {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x20);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    
    
    
    
    
    
    if (typeof opts === "object") {
      if (opts.dstBinding !== void 0) this.dstBinding = opts.dstBinding;
      if (opts.dstArrayElement !== void 0) this.dstArrayElement = opts.dstArrayElement;
      if (opts.descriptorCount !== void 0) this.descriptorCount = opts.descriptorCount;
      if (opts.descriptorType !== void 0) this.descriptorType = opts.descriptorType;
      if (opts.offset !== void 0) this.offset = opts.offset;
      if (opts.stride !== void 0) this.stride = opts.stride;
      
    }
  }
  get dstBinding() {
    return this.memoryViewUint32[0x0];
  }
  set dstBinding(value) {
    this.memoryViewUint32[0x0] = value;
  }
  get dstArrayElement() {
    return this.memoryViewUint32[0x1];
  }
  set dstArrayElement(value) {
    this.memoryViewUint32[0x1] = value;
  }
  get descriptorCount() {
    return this.memoryViewUint32[0x2];
  }
  set descriptorCount(value) {
    this.memoryViewUint32[0x2] = value;
  }
  get descriptorType() {
    return this.memoryViewInt32[0x3];
  }
  set descriptorType(value) {
    this.memoryViewInt32[0x3] = value;
  }
  get offset() {
    return this.memoryViewBigInt64[0x2];
  }
  set offset(value) {
    this.memoryViewBigInt64[0x2] = value;
  }
  get stride() {
    return this.memoryViewBigInt64[0x3];
  }
  set stride(value) {
    this.memoryViewBigInt64[0x3] = value;
  }
  
};

VkDescriptorUpdateTemplateEntry.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDescriptorUpdateTemplateEntry"`);
  
  return true;
};

VkDescriptorUpdateTemplateEntry.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDescriptorUpdateTemplateEntry"`, this.memoryAddress, memoryAddress);
  
};

VkDescriptorUpdateTemplateEntry.byteLength = 0x20;

VkDescriptorUpdateTemplateEntry.memoryLayout = Object.freeze({
  dstBinding: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  dstArrayElement: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  descriptorCount: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
  descriptorType: Object.freeze({
    byteOffset: 0xC,
    byteLength: 0x4
  }),
  offset: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  stride: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkDescriptorUpdateTemplateEntryKHR **/
class VkDescriptorUpdateTemplateEntryKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x20);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    
    
    
    
    
    
    if (typeof opts === "object") {
      if (opts.dstBinding !== void 0) this.dstBinding = opts.dstBinding;
      if (opts.dstArrayElement !== void 0) this.dstArrayElement = opts.dstArrayElement;
      if (opts.descriptorCount !== void 0) this.descriptorCount = opts.descriptorCount;
      if (opts.descriptorType !== void 0) this.descriptorType = opts.descriptorType;
      if (opts.offset !== void 0) this.offset = opts.offset;
      if (opts.stride !== void 0) this.stride = opts.stride;
      
    }
  }
  get dstBinding() {
    return this.memoryViewUint32[0x0];
  }
  set dstBinding(value) {
    this.memoryViewUint32[0x0] = value;
  }
  get dstArrayElement() {
    return this.memoryViewUint32[0x1];
  }
  set dstArrayElement(value) {
    this.memoryViewUint32[0x1] = value;
  }
  get descriptorCount() {
    return this.memoryViewUint32[0x2];
  }
  set descriptorCount(value) {
    this.memoryViewUint32[0x2] = value;
  }
  get descriptorType() {
    return this.memoryViewInt32[0x3];
  }
  set descriptorType(value) {
    this.memoryViewInt32[0x3] = value;
  }
  get offset() {
    return this.memoryViewBigInt64[0x2];
  }
  set offset(value) {
    this.memoryViewBigInt64[0x2] = value;
  }
  get stride() {
    return this.memoryViewBigInt64[0x3];
  }
  set stride(value) {
    this.memoryViewBigInt64[0x3] = value;
  }
  
};

VkDescriptorUpdateTemplateEntryKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDescriptorUpdateTemplateEntryKHR"`);
  
  return true;
};

VkDescriptorUpdateTemplateEntryKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDescriptorUpdateTemplateEntryKHR"`, this.memoryAddress, memoryAddress);
  
};

VkDescriptorUpdateTemplateEntryKHR.byteLength = 0x20;

VkDescriptorUpdateTemplateEntryKHR.memoryLayout = Object.freeze({
  dstBinding: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  dstArrayElement: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  descriptorCount: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
  descriptorType: Object.freeze({
    byteOffset: 0xC,
    byteLength: 0x4
  }),
  offset: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  stride: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkDescriptorUpdateTemplateCreateInfo **/
class VkDescriptorUpdateTemplateCreateInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x48);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    this._pDescriptorUpdateEntries = null;
    this._pDescriptorUpdateEntriesNative = null;
    
    this._descriptorSetLayout = null;
    
    this._pipelineLayout = null;
    
    this.sType = 0x3B9C1608;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.descriptorUpdateEntryCount !== void 0) this.descriptorUpdateEntryCount = opts.descriptorUpdateEntryCount;
      if (opts.pDescriptorUpdateEntries !== void 0) this.pDescriptorUpdateEntries = opts.pDescriptorUpdateEntries;
      if (opts.templateType !== void 0) this.templateType = opts.templateType;
      if (opts.descriptorSetLayout !== void 0) this.descriptorSetLayout = opts.descriptorSetLayout;
      if (opts.pipelineBindPoint !== void 0) this.pipelineBindPoint = opts.pipelineBindPoint;
      if (opts.pipelineLayout !== void 0) this.pipelineLayout = opts.pipelineLayout;
      if (opts.set !== void 0) this.set = opts.set;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDescriptorUpdateTemplateCreateInfo.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get descriptorUpdateEntryCount() {
    return this.memoryViewUint32[0x5];
  }
  set descriptorUpdateEntryCount(value) {
    this.memoryViewUint32[0x5] = value;
  }
  get pDescriptorUpdateEntries() {
    return this._pDescriptorUpdateEntries;
  }
  set pDescriptorUpdateEntries(value) {
    if (value !== null && value.constructor === Array) {
      this._pDescriptorUpdateEntries = value;
    } else if (value === null) {
      this._pDescriptorUpdateEntries = null;
    } else {
      throw new TypeError("Invalid type for 'VkDescriptorUpdateTemplateCreateInfo.pDescriptorUpdateEntries': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get templateType() {
    return this.memoryViewInt32[0x8];
  }
  set templateType(value) {
    this.memoryViewInt32[0x8] = value;
  }
  get descriptorSetLayout() {
    return this._descriptorSetLayout;
  }
  set descriptorSetLayout(value) {
    if (value !== null && value.constructor === VkDescriptorSetLayout) {
      
      this._descriptorSetLayout = value;
      
      this.memoryViewBigInt64[0x5] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._descriptorSetLayout = null;
      this.memoryViewBigInt64[0x5] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkDescriptorUpdateTemplateCreateInfo.descriptorSetLayout': Expected 'VkDescriptorSetLayout' but got '" + value.constructor.name + "'");
    }
  }
  get pipelineBindPoint() {
    return this.memoryViewInt32[0xC];
  }
  set pipelineBindPoint(value) {
    this.memoryViewInt32[0xC] = value;
  }
  get pipelineLayout() {
    return this._pipelineLayout;
  }
  set pipelineLayout(value) {
    if (value !== null && value.constructor === VkPipelineLayout) {
      
      this._pipelineLayout = value;
      
      this.memoryViewBigInt64[0x7] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._pipelineLayout = null;
      this.memoryViewBigInt64[0x7] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkDescriptorUpdateTemplateCreateInfo.pipelineLayout': Expected 'VkPipelineLayout' but got '" + value.constructor.name + "'");
    }
  }
  get set() {
    return this.memoryViewUint32[0x10];
  }
  set set(value) {
    this.memoryViewUint32[0x10] = value;
  }
  
};

VkDescriptorUpdateTemplateCreateInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDescriptorUpdateTemplateCreateInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pDescriptorUpdateEntries !== null) {
    let array = this._pDescriptorUpdateEntries;
    if (array.length !== this.descriptorUpdateEntryCount) {
      throw new RangeError("Invalid array length, expected length of 'descriptorUpdateEntryCount' for 'VkDescriptorUpdateTemplateCreateInfo.pDescriptorUpdateEntries'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkDescriptorUpdateTemplateEntry) {
        throw new TypeError("Invalid type for 'VkDescriptorUpdateTemplateCreateInfo.pDescriptorUpdateEntries[" + ii + "]': Expected 'VkDescriptorUpdateTemplateEntry' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pDescriptorUpdateEntriesNative = nativeArray;
    this.memoryViewBigInt64[0x3] = nativeArray.address;
  }
  
  return true;
};

VkDescriptorUpdateTemplateCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x48);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDescriptorUpdateTemplateCreateInfo"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
};

VkDescriptorUpdateTemplateCreateInfo.byteLength = 0x48;

VkDescriptorUpdateTemplateCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  descriptorUpdateEntryCount: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  pDescriptorUpdateEntries: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  templateType: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  descriptorSetLayout: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
  pipelineBindPoint: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  pipelineLayout: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x8
  }),
  set: Object.freeze({
    byteOffset: 0x40,
    byteLength: 0x4
  }),
});
/** VkDescriptorUpdateTemplateCreateInfoKHR **/
class VkDescriptorUpdateTemplateCreateInfoKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x48);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    this._pDescriptorUpdateEntries = null;
    this._pDescriptorUpdateEntriesNative = null;
    
    this._descriptorSetLayout = null;
    
    this._pipelineLayout = null;
    
    this.sType = 0x3B9C1608;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.descriptorUpdateEntryCount !== void 0) this.descriptorUpdateEntryCount = opts.descriptorUpdateEntryCount;
      if (opts.pDescriptorUpdateEntries !== void 0) this.pDescriptorUpdateEntries = opts.pDescriptorUpdateEntries;
      if (opts.templateType !== void 0) this.templateType = opts.templateType;
      if (opts.descriptorSetLayout !== void 0) this.descriptorSetLayout = opts.descriptorSetLayout;
      if (opts.pipelineBindPoint !== void 0) this.pipelineBindPoint = opts.pipelineBindPoint;
      if (opts.pipelineLayout !== void 0) this.pipelineLayout = opts.pipelineLayout;
      if (opts.set !== void 0) this.set = opts.set;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDescriptorUpdateTemplateCreateInfoKHR.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get descriptorUpdateEntryCount() {
    return this.memoryViewUint32[0x5];
  }
  set descriptorUpdateEntryCount(value) {
    this.memoryViewUint32[0x5] = value;
  }
  get pDescriptorUpdateEntries() {
    return this._pDescriptorUpdateEntries;
  }
  set pDescriptorUpdateEntries(value) {
    if (value !== null && value.constructor === Array) {
      this._pDescriptorUpdateEntries = value;
    } else if (value === null) {
      this._pDescriptorUpdateEntries = null;
    } else {
      throw new TypeError("Invalid type for 'VkDescriptorUpdateTemplateCreateInfoKHR.pDescriptorUpdateEntries': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get templateType() {
    return this.memoryViewInt32[0x8];
  }
  set templateType(value) {
    this.memoryViewInt32[0x8] = value;
  }
  get descriptorSetLayout() {
    return this._descriptorSetLayout;
  }
  set descriptorSetLayout(value) {
    if (value !== null && value.constructor === VkDescriptorSetLayout) {
      
      this._descriptorSetLayout = value;
      
      this.memoryViewBigInt64[0x5] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._descriptorSetLayout = null;
      this.memoryViewBigInt64[0x5] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkDescriptorUpdateTemplateCreateInfoKHR.descriptorSetLayout': Expected 'VkDescriptorSetLayout' but got '" + value.constructor.name + "'");
    }
  }
  get pipelineBindPoint() {
    return this.memoryViewInt32[0xC];
  }
  set pipelineBindPoint(value) {
    this.memoryViewInt32[0xC] = value;
  }
  get pipelineLayout() {
    return this._pipelineLayout;
  }
  set pipelineLayout(value) {
    if (value !== null && value.constructor === VkPipelineLayout) {
      
      this._pipelineLayout = value;
      
      this.memoryViewBigInt64[0x7] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._pipelineLayout = null;
      this.memoryViewBigInt64[0x7] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkDescriptorUpdateTemplateCreateInfoKHR.pipelineLayout': Expected 'VkPipelineLayout' but got '" + value.constructor.name + "'");
    }
  }
  get set() {
    return this.memoryViewUint32[0x10];
  }
  set set(value) {
    this.memoryViewUint32[0x10] = value;
  }
  
};

VkDescriptorUpdateTemplateCreateInfoKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDescriptorUpdateTemplateCreateInfoKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pDescriptorUpdateEntries !== null) {
    let array = this._pDescriptorUpdateEntries;
    if (array.length !== this.descriptorUpdateEntryCount) {
      throw new RangeError("Invalid array length, expected length of 'descriptorUpdateEntryCount' for 'VkDescriptorUpdateTemplateCreateInfoKHR.pDescriptorUpdateEntries'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkDescriptorUpdateTemplateEntry) {
        throw new TypeError("Invalid type for 'VkDescriptorUpdateTemplateCreateInfoKHR.pDescriptorUpdateEntries[" + ii + "]': Expected 'VkDescriptorUpdateTemplateEntry' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pDescriptorUpdateEntriesNative = nativeArray;
    this.memoryViewBigInt64[0x3] = nativeArray.address;
  }
  
  return true;
};

VkDescriptorUpdateTemplateCreateInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x48);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDescriptorUpdateTemplateCreateInfoKHR"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
};

VkDescriptorUpdateTemplateCreateInfoKHR.byteLength = 0x48;

VkDescriptorUpdateTemplateCreateInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  descriptorUpdateEntryCount: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  pDescriptorUpdateEntries: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  templateType: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  descriptorSetLayout: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
  pipelineBindPoint: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  pipelineLayout: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x8
  }),
  set: Object.freeze({
    byteOffset: 0x40,
    byteLength: 0x4
  }),
});
/** VkXYColorEXT **/
class VkXYColorEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewFloat32 = new Float32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    
    
    if (typeof opts === "object") {
      if (opts.x !== void 0) this.x = opts.x;
      if (opts.y !== void 0) this.y = opts.y;
      
    }
  }
  get x() {
    return this.memoryViewFloat32[0x0];
  }
  set x(value) {
    this.memoryViewFloat32[0x0] = value;
  }
  get y() {
    return this.memoryViewFloat32[0x1];
  }
  set y(value) {
    this.memoryViewFloat32[0x1] = value;
  }
  
};

VkXYColorEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkXYColorEXT"`);
  
  return true;
};

VkXYColorEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x8);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkXYColorEXT"`, this.memoryAddress, memoryAddress);
  
};

VkXYColorEXT.byteLength = 0x8;

VkXYColorEXT.memoryLayout = Object.freeze({
  x: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  y: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
});
/** VkHdrMetadataEXT **/
class VkHdrMetadataEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x40);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewFloat32 = new Float32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    this._displayPrimaryRed = new VkXYColorEXT({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x10 });
    this._displayPrimaryGreen = new VkXYColorEXT({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x18 });
    this._displayPrimaryBlue = new VkXYColorEXT({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x20 });
    this._whitePoint = new VkXYColorEXT({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x28 });
    
    
    
    
    this.sType = 0x3B9C6428;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.displayPrimaryRed !== void 0) this.displayPrimaryRed = opts.displayPrimaryRed;
      if (opts.displayPrimaryGreen !== void 0) this.displayPrimaryGreen = opts.displayPrimaryGreen;
      if (opts.displayPrimaryBlue !== void 0) this.displayPrimaryBlue = opts.displayPrimaryBlue;
      if (opts.whitePoint !== void 0) this.whitePoint = opts.whitePoint;
      if (opts.maxLuminance !== void 0) this.maxLuminance = opts.maxLuminance;
      if (opts.minLuminance !== void 0) this.minLuminance = opts.minLuminance;
      if (opts.maxContentLightLevel !== void 0) this.maxContentLightLevel = opts.maxContentLightLevel;
      if (opts.maxFrameAverageLightLevel !== void 0) this.maxFrameAverageLightLevel = opts.maxFrameAverageLightLevel;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkHdrMetadataEXT.pNext' isn't allowed to be filled");
  }
  get displayPrimaryRed() {
    return this._displayPrimaryRed;
  }
  set displayPrimaryRed(value) {
    if (value !== null && value.constructor === VkXYColorEXT) {
      value.flush();
      this._displayPrimaryRed = value;
      this.memoryViewBigInt64[0x2] = value.memoryAddress;
      
    } else if (value === null) {
      this._displayPrimaryRed = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkHdrMetadataEXT.displayPrimaryRed': Expected 'VkXYColorEXT' but got '" + value.constructor.name + "'");
    }
  }
  get displayPrimaryGreen() {
    return this._displayPrimaryGreen;
  }
  set displayPrimaryGreen(value) {
    if (value !== null && value.constructor === VkXYColorEXT) {
      value.flush();
      this._displayPrimaryGreen = value;
      this.memoryViewBigInt64[0x3] = value.memoryAddress;
      
    } else if (value === null) {
      this._displayPrimaryGreen = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkHdrMetadataEXT.displayPrimaryGreen': Expected 'VkXYColorEXT' but got '" + value.constructor.name + "'");
    }
  }
  get displayPrimaryBlue() {
    return this._displayPrimaryBlue;
  }
  set displayPrimaryBlue(value) {
    if (value !== null && value.constructor === VkXYColorEXT) {
      value.flush();
      this._displayPrimaryBlue = value;
      this.memoryViewBigInt64[0x4] = value.memoryAddress;
      
    } else if (value === null) {
      this._displayPrimaryBlue = null;
      this.memoryViewBigInt64[0x4] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkHdrMetadataEXT.displayPrimaryBlue': Expected 'VkXYColorEXT' but got '" + value.constructor.name + "'");
    }
  }
  get whitePoint() {
    return this._whitePoint;
  }
  set whitePoint(value) {
    if (value !== null && value.constructor === VkXYColorEXT) {
      value.flush();
      this._whitePoint = value;
      this.memoryViewBigInt64[0x5] = value.memoryAddress;
      
    } else if (value === null) {
      this._whitePoint = null;
      this.memoryViewBigInt64[0x5] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkHdrMetadataEXT.whitePoint': Expected 'VkXYColorEXT' but got '" + value.constructor.name + "'");
    }
  }
  get maxLuminance() {
    return this.memoryViewFloat32[0xC];
  }
  set maxLuminance(value) {
    this.memoryViewFloat32[0xC] = value;
  }
  get minLuminance() {
    return this.memoryViewFloat32[0xD];
  }
  set minLuminance(value) {
    this.memoryViewFloat32[0xD] = value;
  }
  get maxContentLightLevel() {
    return this.memoryViewFloat32[0xE];
  }
  set maxContentLightLevel(value) {
    this.memoryViewFloat32[0xE] = value;
  }
  get maxFrameAverageLightLevel() {
    return this.memoryViewFloat32[0xF];
  }
  set maxFrameAverageLightLevel(value) {
    this.memoryViewFloat32[0xF] = value;
  }
  
};

VkHdrMetadataEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkHdrMetadataEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  
  
  
  
  
  
  
  return true;
};

VkHdrMetadataEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x40);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkHdrMetadataEXT"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
  
  
  
  
  
  
};

VkHdrMetadataEXT.byteLength = 0x40;

VkHdrMetadataEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  displayPrimaryRed: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  displayPrimaryGreen: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  displayPrimaryBlue: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
  whitePoint: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
  maxLuminance: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  minLuminance: Object.freeze({
    byteOffset: 0x34,
    byteLength: 0x4
  }),
  maxContentLightLevel: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x4
  }),
  maxFrameAverageLightLevel: Object.freeze({
    byteOffset: 0x3C,
    byteLength: 0x4
  }),
});
/** VkRefreshCycleDurationGOOGLE **/
class VkRefreshCycleDurationGOOGLE {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x8);
    this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x8) / 0x8);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    
    if (typeof opts === "object") {
      
    }
  }
  get refreshDuration() {
    return this.memoryViewBigUint64[0x0];
  }
  
};

VkRefreshCycleDurationGOOGLE.prototype.flush = function flush() {
  //console.log(`Flushing: "VkRefreshCycleDurationGOOGLE"`);
  
  return true;
};

VkRefreshCycleDurationGOOGLE.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x8);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkRefreshCycleDurationGOOGLE"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x8), 0x0);
};

VkRefreshCycleDurationGOOGLE.byteLength = 0x8;

VkRefreshCycleDurationGOOGLE.memoryLayout = Object.freeze({
  refreshDuration: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x8
  }),
});
/** VkPastPresentationTimingGOOGLE **/
class VkPastPresentationTimingGOOGLE {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x28);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
    this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    
    
    
    
    
    if (typeof opts === "object") {
      
    }
  }
  get presentID() {
    return this.memoryViewUint32[0x0];
  }
  get desiredPresentTime() {
    return this.memoryViewBigUint64[0x1];
  }
  get actualPresentTime() {
    return this.memoryViewBigUint64[0x2];
  }
  get earliestPresentTime() {
    return this.memoryViewBigUint64[0x3];
  }
  get presentMargin() {
    return this.memoryViewBigUint64[0x4];
  }
  
};

VkPastPresentationTimingGOOGLE.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPastPresentationTimingGOOGLE"`);
  
  return true;
};

VkPastPresentationTimingGOOGLE.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x28);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPastPresentationTimingGOOGLE"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x28), 0x0);
};

VkPastPresentationTimingGOOGLE.byteLength = 0x28;

VkPastPresentationTimingGOOGLE.memoryLayout = Object.freeze({
  presentID: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  desiredPresentTime: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  actualPresentTime: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  earliestPresentTime: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  presentMargin: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
});
/** VkPresentTimesInfoGOOGLE **/
class VkPresentTimesInfoGOOGLE {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this._pTimes = null;
    this._pTimesNative = null;
    this.sType = 0x3B9C3160;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.swapchainCount !== void 0) this.swapchainCount = opts.swapchainCount;
      if (opts.pTimes !== void 0) this.pTimes = opts.pTimes;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPresentTimesInfoGOOGLE.pNext' isn't allowed to be filled");
  }
  get swapchainCount() {
    return this.memoryViewUint32[0x4];
  }
  set swapchainCount(value) {
    this.memoryViewUint32[0x4] = value;
  }
  get pTimes() {
    return this._pTimes;
  }
  set pTimes(value) {
    if (value !== null && value.constructor === Array) {
      this._pTimes = value;
    } else if (value === null) {
      this._pTimes = null;
    } else {
      throw new TypeError("Invalid type for 'VkPresentTimesInfoGOOGLE.pTimes': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkPresentTimesInfoGOOGLE.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPresentTimesInfoGOOGLE"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pTimes !== null) {
    let array = this._pTimes;
    if (array.length !== this.swapchainCount) {
      throw new RangeError("Invalid array length, expected length of 'swapchainCount' for 'VkPresentTimesInfoGOOGLE.pTimes'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkPresentTimeGOOGLE) {
        throw new TypeError("Invalid type for 'VkPresentTimesInfoGOOGLE.pTimes[" + ii + "]': Expected 'VkPresentTimeGOOGLE' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pTimesNative = nativeArray;
    this.memoryViewBigInt64[0x3] = nativeArray.address;
  }
  
  return true;
};

VkPresentTimesInfoGOOGLE.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPresentTimesInfoGOOGLE"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
};

VkPresentTimesInfoGOOGLE.byteLength = 0x20;

VkPresentTimesInfoGOOGLE.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  swapchainCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pTimes: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkPresentTimeGOOGLE **/
class VkPresentTimeGOOGLE {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x10);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
    this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    
    
    if (typeof opts === "object") {
      if (opts.presentID !== void 0) this.presentID = opts.presentID;
      if (opts.desiredPresentTime !== void 0) this.desiredPresentTime = opts.desiredPresentTime;
      
    }
  }
  get presentID() {
    return this.memoryViewUint32[0x0];
  }
  set presentID(value) {
    this.memoryViewUint32[0x0] = value;
  }
  get desiredPresentTime() {
    return this.memoryViewBigUint64[0x1];
  }
  set desiredPresentTime(value) {
    this.memoryViewBigUint64[0x1] = value;
  }
  
};

VkPresentTimeGOOGLE.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPresentTimeGOOGLE"`);
  
  return true;
};

VkPresentTimeGOOGLE.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x10);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPresentTimeGOOGLE"`, this.memoryAddress, memoryAddress);
  
};

VkPresentTimeGOOGLE.byteLength = 0x10;

VkPresentTimeGOOGLE.memoryLayout = Object.freeze({
  presentID: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  desiredPresentTime: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
});
/** VkViewportWScalingNV **/
class VkViewportWScalingNV {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewFloat32 = new Float32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    
    
    if (typeof opts === "object") {
      if (opts.xcoeff !== void 0) this.xcoeff = opts.xcoeff;
      if (opts.ycoeff !== void 0) this.ycoeff = opts.ycoeff;
      
    }
  }
  get xcoeff() {
    return this.memoryViewFloat32[0x0];
  }
  set xcoeff(value) {
    this.memoryViewFloat32[0x0] = value;
  }
  get ycoeff() {
    return this.memoryViewFloat32[0x1];
  }
  set ycoeff(value) {
    this.memoryViewFloat32[0x1] = value;
  }
  
};

VkViewportWScalingNV.prototype.flush = function flush() {
  //console.log(`Flushing: "VkViewportWScalingNV"`);
  
  return true;
};

VkViewportWScalingNV.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x8);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkViewportWScalingNV"`, this.memoryAddress, memoryAddress);
  
};

VkViewportWScalingNV.byteLength = 0x8;

VkViewportWScalingNV.memoryLayout = Object.freeze({
  xcoeff: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  ycoeff: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
});
/** VkPipelineViewportWScalingStateCreateInfoNV **/
class VkPipelineViewportWScalingStateCreateInfoNV {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    this._pViewportWScalings = null;
    this._pViewportWScalingsNative = null;
    this.sType = 0x3B9C1DD8;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.viewportWScalingEnable !== void 0) this.viewportWScalingEnable = opts.viewportWScalingEnable;
      if (opts.viewportCount !== void 0) this.viewportCount = opts.viewportCount;
      if (opts.pViewportWScalings !== void 0) this.pViewportWScalings = opts.pViewportWScalings;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPipelineViewportWScalingStateCreateInfoNV.pNext' isn't allowed to be filled");
  }
  get viewportWScalingEnable() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set viewportWScalingEnable(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  get viewportCount() {
    return this.memoryViewUint32[0x5];
  }
  set viewportCount(value) {
    this.memoryViewUint32[0x5] = value;
  }
  get pViewportWScalings() {
    return this._pViewportWScalings;
  }
  set pViewportWScalings(value) {
    if (value !== null && value.constructor === Array) {
      this._pViewportWScalings = value;
    } else if (value === null) {
      this._pViewportWScalings = null;
    } else {
      throw new TypeError("Invalid type for 'VkPipelineViewportWScalingStateCreateInfoNV.pViewportWScalings': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkPipelineViewportWScalingStateCreateInfoNV.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPipelineViewportWScalingStateCreateInfoNV"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pViewportWScalings !== null) {
    let array = this._pViewportWScalings;
    if (array.length !== this.viewportCount) {
      throw new RangeError("Invalid array length, expected length of 'viewportCount' for 'VkPipelineViewportWScalingStateCreateInfoNV.pViewportWScalings'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkViewportWScalingNV) {
        throw new TypeError("Invalid type for 'VkPipelineViewportWScalingStateCreateInfoNV.pViewportWScalings[" + ii + "]': Expected 'VkViewportWScalingNV' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pViewportWScalingsNative = nativeArray;
    this.memoryViewBigInt64[0x3] = nativeArray.address;
  }
  
  return true;
};

VkPipelineViewportWScalingStateCreateInfoNV.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPipelineViewportWScalingStateCreateInfoNV"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
};

VkPipelineViewportWScalingStateCreateInfoNV.byteLength = 0x20;

VkPipelineViewportWScalingStateCreateInfoNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  viewportWScalingEnable: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  viewportCount: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  pViewportWScalings: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkViewportSwizzleNV **/
class VkViewportSwizzleNV {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x10);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    
    
    
    
    if (typeof opts === "object") {
      if (opts.x !== void 0) this.x = opts.x;
      if (opts.y !== void 0) this.y = opts.y;
      if (opts.z !== void 0) this.z = opts.z;
      if (opts.w !== void 0) this.w = opts.w;
      
    }
  }
  get x() {
    return this.memoryViewInt32[0x0];
  }
  set x(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get y() {
    return this.memoryViewInt32[0x1];
  }
  set y(value) {
    this.memoryViewInt32[0x1] = value;
  }
  get z() {
    return this.memoryViewInt32[0x2];
  }
  set z(value) {
    this.memoryViewInt32[0x2] = value;
  }
  get w() {
    return this.memoryViewInt32[0x3];
  }
  set w(value) {
    this.memoryViewInt32[0x3] = value;
  }
  
};

VkViewportSwizzleNV.prototype.flush = function flush() {
  //console.log(`Flushing: "VkViewportSwizzleNV"`);
  
  return true;
};

VkViewportSwizzleNV.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x10);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkViewportSwizzleNV"`, this.memoryAddress, memoryAddress);
  
};

VkViewportSwizzleNV.byteLength = 0x10;

VkViewportSwizzleNV.memoryLayout = Object.freeze({
  x: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  y: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  z: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
  w: Object.freeze({
    byteOffset: 0xC,
    byteLength: 0x4
  }),
});
/** VkPipelineViewportSwizzleStateCreateInfoNV **/
class VkPipelineViewportSwizzleStateCreateInfoNV {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    this._pViewportSwizzles = null;
    this._pViewportSwizzlesNative = null;
    this.sType = 0x3B9C48D0;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.viewportCount !== void 0) this.viewportCount = opts.viewportCount;
      if (opts.pViewportSwizzles !== void 0) this.pViewportSwizzles = opts.pViewportSwizzles;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPipelineViewportSwizzleStateCreateInfoNV.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get viewportCount() {
    return this.memoryViewUint32[0x5];
  }
  set viewportCount(value) {
    this.memoryViewUint32[0x5] = value;
  }
  get pViewportSwizzles() {
    return this._pViewportSwizzles;
  }
  set pViewportSwizzles(value) {
    if (value !== null && value.constructor === Array) {
      this._pViewportSwizzles = value;
    } else if (value === null) {
      this._pViewportSwizzles = null;
    } else {
      throw new TypeError("Invalid type for 'VkPipelineViewportSwizzleStateCreateInfoNV.pViewportSwizzles': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkPipelineViewportSwizzleStateCreateInfoNV.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPipelineViewportSwizzleStateCreateInfoNV"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pViewportSwizzles !== null) {
    let array = this._pViewportSwizzles;
    if (array.length !== this.viewportCount) {
      throw new RangeError("Invalid array length, expected length of 'viewportCount' for 'VkPipelineViewportSwizzleStateCreateInfoNV.pViewportSwizzles'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkViewportSwizzleNV) {
        throw new TypeError("Invalid type for 'VkPipelineViewportSwizzleStateCreateInfoNV.pViewportSwizzles[" + ii + "]': Expected 'VkViewportSwizzleNV' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pViewportSwizzlesNative = nativeArray;
    this.memoryViewBigInt64[0x3] = nativeArray.address;
  }
  
  return true;
};

VkPipelineViewportSwizzleStateCreateInfoNV.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPipelineViewportSwizzleStateCreateInfoNV"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
};

VkPipelineViewportSwizzleStateCreateInfoNV.byteLength = 0x20;

VkPipelineViewportSwizzleStateCreateInfoNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  viewportCount: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  pViewportSwizzles: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkPhysicalDeviceDiscardRectanglePropertiesEXT **/
class VkPhysicalDeviceDiscardRectanglePropertiesEXT {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    
    this.sType = 0x3B9C4CB8;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceDiscardRectanglePropertiesEXT.pNext' isn't allowed to be filled");
  }
  get maxDiscardRectangles() {
    return this.memoryViewUint32[0x4];
  }
  
};

VkPhysicalDeviceDiscardRectanglePropertiesEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceDiscardRectanglePropertiesEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceDiscardRectanglePropertiesEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceDiscardRectanglePropertiesEXT"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x18), 0x0);
  
  
};

VkPhysicalDeviceDiscardRectanglePropertiesEXT.byteLength = 0x18;

VkPhysicalDeviceDiscardRectanglePropertiesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  maxDiscardRectangles: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPipelineDiscardRectangleStateCreateInfoEXT **/
class VkPipelineDiscardRectangleStateCreateInfoEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x28);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    
    this._pDiscardRectangles = null;
    this._pDiscardRectanglesNative = null;
    this.sType = 0x3B9C4CB9;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.discardRectangleMode !== void 0) this.discardRectangleMode = opts.discardRectangleMode;
      if (opts.discardRectangleCount !== void 0) this.discardRectangleCount = opts.discardRectangleCount;
      if (opts.pDiscardRectangles !== void 0) this.pDiscardRectangles = opts.pDiscardRectangles;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPipelineDiscardRectangleStateCreateInfoEXT.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get discardRectangleMode() {
    return this.memoryViewInt32[0x5];
  }
  set discardRectangleMode(value) {
    this.memoryViewInt32[0x5] = value;
  }
  get discardRectangleCount() {
    return this.memoryViewUint32[0x6];
  }
  set discardRectangleCount(value) {
    this.memoryViewUint32[0x6] = value;
  }
  get pDiscardRectangles() {
    return this._pDiscardRectangles;
  }
  set pDiscardRectangles(value) {
    if (value !== null && value.constructor === Array) {
      this._pDiscardRectangles = value;
    } else if (value === null) {
      this._pDiscardRectangles = null;
    } else {
      throw new TypeError("Invalid type for 'VkPipelineDiscardRectangleStateCreateInfoEXT.pDiscardRectangles': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkPipelineDiscardRectangleStateCreateInfoEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPipelineDiscardRectangleStateCreateInfoEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pDiscardRectangles !== null) {
    let array = this._pDiscardRectangles;
    if (array.length !== this.discardRectangleCount) {
      throw new RangeError("Invalid array length, expected length of 'discardRectangleCount' for 'VkPipelineDiscardRectangleStateCreateInfoEXT.pDiscardRectangles'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkRect2D) {
        throw new TypeError("Invalid type for 'VkPipelineDiscardRectangleStateCreateInfoEXT.pDiscardRectangles[" + ii + "]': Expected 'VkRect2D' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pDiscardRectanglesNative = nativeArray;
    this.memoryViewBigInt64[0x4] = nativeArray.address;
  }
  
  return true;
};

VkPipelineDiscardRectangleStateCreateInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x28);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPipelineDiscardRectangleStateCreateInfoEXT"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
};

VkPipelineDiscardRectangleStateCreateInfoEXT.byteLength = 0x28;

VkPipelineDiscardRectangleStateCreateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  discardRectangleMode: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  discardRectangleCount: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  pDiscardRectangles: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
});
/** VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX **/
class VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    
    this.sType = 0x3B9C44E8;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX.pNext' isn't allowed to be filled");
  }
  get perViewPositionAllComponents() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  
};

VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x18), 0x0);
  
  
};

VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX.byteLength = 0x18;

VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  perViewPositionAllComponents: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkInputAttachmentAspectReference **/
class VkInputAttachmentAspectReference {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0xC);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    
    
    
    if (typeof opts === "object") {
      if (opts.subpass !== void 0) this.subpass = opts.subpass;
      if (opts.inputAttachmentIndex !== void 0) this.inputAttachmentIndex = opts.inputAttachmentIndex;
      if (opts.aspectMask !== void 0) this.aspectMask = opts.aspectMask;
      
    }
  }
  get subpass() {
    return this.memoryViewUint32[0x0];
  }
  set subpass(value) {
    this.memoryViewUint32[0x0] = value;
  }
  get inputAttachmentIndex() {
    return this.memoryViewUint32[0x1];
  }
  set inputAttachmentIndex(value) {
    this.memoryViewUint32[0x1] = value;
  }
  get aspectMask() {
    return this.memoryViewInt32[0x2];
  }
  set aspectMask(value) {
    this.memoryViewInt32[0x2] = value;
  }
  
};

VkInputAttachmentAspectReference.prototype.flush = function flush() {
  //console.log(`Flushing: "VkInputAttachmentAspectReference"`);
  
  return true;
};

VkInputAttachmentAspectReference.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0xC);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkInputAttachmentAspectReference"`, this.memoryAddress, memoryAddress);
  
};

VkInputAttachmentAspectReference.byteLength = 0xC;

VkInputAttachmentAspectReference.memoryLayout = Object.freeze({
  subpass: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  inputAttachmentIndex: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  aspectMask: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
});
/** VkInputAttachmentAspectReferenceKHR **/
class VkInputAttachmentAspectReferenceKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0xC);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    
    
    
    if (typeof opts === "object") {
      if (opts.subpass !== void 0) this.subpass = opts.subpass;
      if (opts.inputAttachmentIndex !== void 0) this.inputAttachmentIndex = opts.inputAttachmentIndex;
      if (opts.aspectMask !== void 0) this.aspectMask = opts.aspectMask;
      
    }
  }
  get subpass() {
    return this.memoryViewUint32[0x0];
  }
  set subpass(value) {
    this.memoryViewUint32[0x0] = value;
  }
  get inputAttachmentIndex() {
    return this.memoryViewUint32[0x1];
  }
  set inputAttachmentIndex(value) {
    this.memoryViewUint32[0x1] = value;
  }
  get aspectMask() {
    return this.memoryViewInt32[0x2];
  }
  set aspectMask(value) {
    this.memoryViewInt32[0x2] = value;
  }
  
};

VkInputAttachmentAspectReferenceKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkInputAttachmentAspectReferenceKHR"`);
  
  return true;
};

VkInputAttachmentAspectReferenceKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0xC);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkInputAttachmentAspectReferenceKHR"`, this.memoryAddress, memoryAddress);
  
};

VkInputAttachmentAspectReferenceKHR.byteLength = 0xC;

VkInputAttachmentAspectReferenceKHR.memoryLayout = Object.freeze({
  subpass: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  inputAttachmentIndex: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  aspectMask: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
});
/** VkRenderPassInputAttachmentAspectCreateInfo **/
class VkRenderPassInputAttachmentAspectCreateInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this._pAspectReferences = null;
    this._pAspectReferencesNative = null;
    this.sType = 0x3B9C9309;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.aspectReferenceCount !== void 0) this.aspectReferenceCount = opts.aspectReferenceCount;
      if (opts.pAspectReferences !== void 0) this.pAspectReferences = opts.pAspectReferences;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkRenderPassInputAttachmentAspectCreateInfo.pNext' isn't allowed to be filled");
  }
  get aspectReferenceCount() {
    return this.memoryViewUint32[0x4];
  }
  set aspectReferenceCount(value) {
    this.memoryViewUint32[0x4] = value;
  }
  get pAspectReferences() {
    return this._pAspectReferences;
  }
  set pAspectReferences(value) {
    if (value !== null && value.constructor === Array) {
      this._pAspectReferences = value;
    } else if (value === null) {
      this._pAspectReferences = null;
    } else {
      throw new TypeError("Invalid type for 'VkRenderPassInputAttachmentAspectCreateInfo.pAspectReferences': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkRenderPassInputAttachmentAspectCreateInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkRenderPassInputAttachmentAspectCreateInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pAspectReferences !== null) {
    let array = this._pAspectReferences;
    if (array.length !== this.aspectReferenceCount) {
      throw new RangeError("Invalid array length, expected length of 'aspectReferenceCount' for 'VkRenderPassInputAttachmentAspectCreateInfo.pAspectReferences'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkInputAttachmentAspectReference) {
        throw new TypeError("Invalid type for 'VkRenderPassInputAttachmentAspectCreateInfo.pAspectReferences[" + ii + "]': Expected 'VkInputAttachmentAspectReference' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pAspectReferencesNative = nativeArray;
    this.memoryViewBigInt64[0x3] = nativeArray.address;
  }
  
  return true;
};

VkRenderPassInputAttachmentAspectCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkRenderPassInputAttachmentAspectCreateInfo"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
};

VkRenderPassInputAttachmentAspectCreateInfo.byteLength = 0x20;

VkRenderPassInputAttachmentAspectCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  aspectReferenceCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pAspectReferences: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkRenderPassInputAttachmentAspectCreateInfoKHR **/
class VkRenderPassInputAttachmentAspectCreateInfoKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this._pAspectReferences = null;
    this._pAspectReferencesNative = null;
    this.sType = 0x3B9C9309;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.aspectReferenceCount !== void 0) this.aspectReferenceCount = opts.aspectReferenceCount;
      if (opts.pAspectReferences !== void 0) this.pAspectReferences = opts.pAspectReferences;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkRenderPassInputAttachmentAspectCreateInfoKHR.pNext' isn't allowed to be filled");
  }
  get aspectReferenceCount() {
    return this.memoryViewUint32[0x4];
  }
  set aspectReferenceCount(value) {
    this.memoryViewUint32[0x4] = value;
  }
  get pAspectReferences() {
    return this._pAspectReferences;
  }
  set pAspectReferences(value) {
    if (value !== null && value.constructor === Array) {
      this._pAspectReferences = value;
    } else if (value === null) {
      this._pAspectReferences = null;
    } else {
      throw new TypeError("Invalid type for 'VkRenderPassInputAttachmentAspectCreateInfoKHR.pAspectReferences': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkRenderPassInputAttachmentAspectCreateInfoKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkRenderPassInputAttachmentAspectCreateInfoKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pAspectReferences !== null) {
    let array = this._pAspectReferences;
    if (array.length !== this.aspectReferenceCount) {
      throw new RangeError("Invalid array length, expected length of 'aspectReferenceCount' for 'VkRenderPassInputAttachmentAspectCreateInfoKHR.pAspectReferences'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkInputAttachmentAspectReference) {
        throw new TypeError("Invalid type for 'VkRenderPassInputAttachmentAspectCreateInfoKHR.pAspectReferences[" + ii + "]': Expected 'VkInputAttachmentAspectReference' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pAspectReferencesNative = nativeArray;
    this.memoryViewBigInt64[0x3] = nativeArray.address;
  }
  
  return true;
};

VkRenderPassInputAttachmentAspectCreateInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkRenderPassInputAttachmentAspectCreateInfoKHR"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
};

VkRenderPassInputAttachmentAspectCreateInfoKHR.byteLength = 0x20;

VkRenderPassInputAttachmentAspectCreateInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  aspectReferenceCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pAspectReferences: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkPhysicalDeviceSurfaceInfo2KHR **/
class VkPhysicalDeviceSurfaceInfo2KHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    this._surface = null;
    this.sType = 0x3B9C9AD8;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.surface !== void 0) this.surface = opts.surface;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceSurfaceInfo2KHR.pNext' isn't allowed to be filled");
  }
  get surface() {
    return this._surface;
  }
  set surface(value) {
    if (value !== null && value.constructor === VkSurfaceKHR) {
      
      this._surface = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._surface = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkPhysicalDeviceSurfaceInfo2KHR.surface': Expected 'VkSurfaceKHR' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkPhysicalDeviceSurfaceInfo2KHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceSurfaceInfo2KHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceSurfaceInfo2KHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceSurfaceInfo2KHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPhysicalDeviceSurfaceInfo2KHR.byteLength = 0x18;

VkPhysicalDeviceSurfaceInfo2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  surface: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
});
/** VkSurfaceCapabilities2KHR **/
class VkSurfaceCapabilities2KHR {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x48);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x48) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x48) / 0x8);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    this._surfaceCapabilities = new VkSurfaceCapabilitiesKHR({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x10 });
    this.sType = 0x3B9C9AD9;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null && (value instanceof Object)) {
      let {sType} = value;
      if (sType <= -1) throw new TypeError("Invalid type for 'VkSurfaceCapabilities2KHR.pNext'");
      switch (sType) {
          
        case 0x3B9C7B98:
          break;
        default:
          throw new TypeError("Invalid type for 'VkSurfaceCapabilities2KHR.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkSurfaceCapabilities2KHR.pNext'");
    }
  }
  get surfaceCapabilities() {
    return this._surfaceCapabilities;
  }
  
};

VkSurfaceCapabilities2KHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkSurfaceCapabilities2KHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkSurfaceCapabilities2KHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x48);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkSurfaceCapabilities2KHR"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x48), 0x0);
  
  
  
  
};

VkSurfaceCapabilities2KHR.byteLength = 0x48;

VkSurfaceCapabilities2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  surfaceCapabilities: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x34
  }),
});
/** VkSurfaceFormat2KHR **/
class VkSurfaceFormat2KHR {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    this._surfaceFormat = new VkSurfaceFormatKHR({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x10 });
    this.sType = 0x3B9C9ADA;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkSurfaceFormat2KHR.pNext' isn't allowed to be filled");
  }
  get surfaceFormat() {
    return this._surfaceFormat;
  }
  
};

VkSurfaceFormat2KHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkSurfaceFormat2KHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkSurfaceFormat2KHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkSurfaceFormat2KHR"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x18), 0x0);
  
  
  
  
};

VkSurfaceFormat2KHR.byteLength = 0x18;

VkSurfaceFormat2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  surfaceFormat: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
});
/** VkDisplayProperties2KHR **/
class VkDisplayProperties2KHR {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x40);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x40) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x40) / 0x8);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    this._displayProperties = new VkDisplayPropertiesKHR({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x10 });
    this.sType = 0x3B9CA2A8;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDisplayProperties2KHR.pNext' isn't allowed to be filled");
  }
  get displayProperties() {
    return this._displayProperties;
  }
  
};

VkDisplayProperties2KHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDisplayProperties2KHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDisplayProperties2KHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x40);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDisplayProperties2KHR"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x40), 0x0);
  
  
  
  
};

VkDisplayProperties2KHR.byteLength = 0x40;

VkDisplayProperties2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  displayProperties: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x30
  }),
});
/** VkDisplayPlaneProperties2KHR **/
class VkDisplayPlaneProperties2KHR {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    this._displayPlaneProperties = new VkDisplayPlanePropertiesKHR({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x10 });
    this.sType = 0x3B9CA2A9;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDisplayPlaneProperties2KHR.pNext' isn't allowed to be filled");
  }
  get displayPlaneProperties() {
    return this._displayPlaneProperties;
  }
  
};

VkDisplayPlaneProperties2KHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDisplayPlaneProperties2KHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDisplayPlaneProperties2KHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDisplayPlaneProperties2KHR"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x20), 0x0);
  
  
  
  
};

VkDisplayPlaneProperties2KHR.byteLength = 0x20;

VkDisplayPlaneProperties2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  displayPlaneProperties: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x10
  }),
});
/** VkDisplayModeProperties2KHR **/
class VkDisplayModeProperties2KHR {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x28);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    this._displayModeProperties = new VkDisplayModePropertiesKHR({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x10 });
    this.sType = 0x3B9CA2AA;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDisplayModeProperties2KHR.pNext' isn't allowed to be filled");
  }
  get displayModeProperties() {
    return this._displayModeProperties;
  }
  
};

VkDisplayModeProperties2KHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDisplayModeProperties2KHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDisplayModeProperties2KHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x28);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDisplayModeProperties2KHR"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x28), 0x0);
  
  
  
  
};

VkDisplayModeProperties2KHR.byteLength = 0x28;

VkDisplayModeProperties2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  displayModeProperties: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x18
  }),
});
/** VkDisplayPlaneInfo2KHR **/
class VkDisplayPlaneInfo2KHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    this._mode = null;
    
    this.sType = 0x3B9CA2AB;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.mode !== void 0) this.mode = opts.mode;
      if (opts.planeIndex !== void 0) this.planeIndex = opts.planeIndex;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDisplayPlaneInfo2KHR.pNext' isn't allowed to be filled");
  }
  get mode() {
    return this._mode;
  }
  set mode(value) {
    if (value !== null && value.constructor === VkDisplayModeKHR) {
      
      this._mode = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._mode = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkDisplayPlaneInfo2KHR.mode': Expected 'VkDisplayModeKHR' but got '" + value.constructor.name + "'");
    }
  }
  get planeIndex() {
    return this.memoryViewUint32[0x6];
  }
  set planeIndex(value) {
    this.memoryViewUint32[0x6] = value;
  }
  
};

VkDisplayPlaneInfo2KHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDisplayPlaneInfo2KHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDisplayPlaneInfo2KHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDisplayPlaneInfo2KHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkDisplayPlaneInfo2KHR.byteLength = 0x20;

VkDisplayPlaneInfo2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  mode: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  planeIndex: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
});
/** VkDisplayPlaneCapabilities2KHR **/
class VkDisplayPlaneCapabilities2KHR {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x58);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x58) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x58) / 0x8);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    this._capabilities = new VkDisplayPlaneCapabilitiesKHR({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x10 });
    this.sType = 0x3B9CA2AC;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDisplayPlaneCapabilities2KHR.pNext' isn't allowed to be filled");
  }
  get capabilities() {
    return this._capabilities;
  }
  
};

VkDisplayPlaneCapabilities2KHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDisplayPlaneCapabilities2KHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDisplayPlaneCapabilities2KHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x58);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDisplayPlaneCapabilities2KHR"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x58), 0x0);
  
  
  
  
};

VkDisplayPlaneCapabilities2KHR.byteLength = 0x58;

VkDisplayPlaneCapabilities2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  capabilities: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x44
  }),
});
/** VkSharedPresentSurfaceCapabilitiesKHR **/
class VkSharedPresentSurfaceCapabilitiesKHR {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    
    this.sType = 0x3B9C7B98;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkSharedPresentSurfaceCapabilitiesKHR.pNext' isn't allowed to be filled");
  }
  get sharedPresentSupportedUsageFlags() {
    return this.memoryViewInt32[0x4];
  }
  
};

VkSharedPresentSurfaceCapabilitiesKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkSharedPresentSurfaceCapabilitiesKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkSharedPresentSurfaceCapabilitiesKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkSharedPresentSurfaceCapabilitiesKHR"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x18), 0x0);
  
  
};

VkSharedPresentSurfaceCapabilitiesKHR.byteLength = 0x18;

VkSharedPresentSurfaceCapabilitiesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  sharedPresentSupportedUsageFlags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPhysicalDevice16BitStorageFeatures **/
class VkPhysicalDevice16BitStorageFeatures {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    
    
    this.sType = 0x3B9C0E38;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.storageBuffer16BitAccess !== void 0) this.storageBuffer16BitAccess = opts.storageBuffer16BitAccess;
      if (opts.uniformAndStorageBuffer16BitAccess !== void 0) this.uniformAndStorageBuffer16BitAccess = opts.uniformAndStorageBuffer16BitAccess;
      if (opts.storagePushConstant16 !== void 0) this.storagePushConstant16 = opts.storagePushConstant16;
      if (opts.storageInputOutput16 !== void 0) this.storageInputOutput16 = opts.storageInputOutput16;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDevice16BitStorageFeatures.pNext' isn't allowed to be filled");
  }
  get storageBuffer16BitAccess() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set storageBuffer16BitAccess(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  get uniformAndStorageBuffer16BitAccess() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  set uniformAndStorageBuffer16BitAccess(value) {
    this.memoryViewUint32[0x5] = value | 0;
  }
  get storagePushConstant16() {
    return this.memoryViewUint32[0x6] !== 0;
  }
  set storagePushConstant16(value) {
    this.memoryViewUint32[0x6] = value | 0;
  }
  get storageInputOutput16() {
    return this.memoryViewUint32[0x7] !== 0;
  }
  set storageInputOutput16(value) {
    this.memoryViewUint32[0x7] = value | 0;
  }
  
};

VkPhysicalDevice16BitStorageFeatures.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDevice16BitStorageFeatures"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDevice16BitStorageFeatures.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDevice16BitStorageFeatures"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPhysicalDevice16BitStorageFeatures.byteLength = 0x20;

VkPhysicalDevice16BitStorageFeatures.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  storageBuffer16BitAccess: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  uniformAndStorageBuffer16BitAccess: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  storagePushConstant16: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  storageInputOutput16: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
});
/** VkPhysicalDevice16BitStorageFeaturesKHR **/
class VkPhysicalDevice16BitStorageFeaturesKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    
    
    this.sType = 0x3B9C0E38;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.storageBuffer16BitAccess !== void 0) this.storageBuffer16BitAccess = opts.storageBuffer16BitAccess;
      if (opts.uniformAndStorageBuffer16BitAccess !== void 0) this.uniformAndStorageBuffer16BitAccess = opts.uniformAndStorageBuffer16BitAccess;
      if (opts.storagePushConstant16 !== void 0) this.storagePushConstant16 = opts.storagePushConstant16;
      if (opts.storageInputOutput16 !== void 0) this.storageInputOutput16 = opts.storageInputOutput16;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDevice16BitStorageFeaturesKHR.pNext' isn't allowed to be filled");
  }
  get storageBuffer16BitAccess() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set storageBuffer16BitAccess(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  get uniformAndStorageBuffer16BitAccess() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  set uniformAndStorageBuffer16BitAccess(value) {
    this.memoryViewUint32[0x5] = value | 0;
  }
  get storagePushConstant16() {
    return this.memoryViewUint32[0x6] !== 0;
  }
  set storagePushConstant16(value) {
    this.memoryViewUint32[0x6] = value | 0;
  }
  get storageInputOutput16() {
    return this.memoryViewUint32[0x7] !== 0;
  }
  set storageInputOutput16(value) {
    this.memoryViewUint32[0x7] = value | 0;
  }
  
};

VkPhysicalDevice16BitStorageFeaturesKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDevice16BitStorageFeaturesKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDevice16BitStorageFeaturesKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDevice16BitStorageFeaturesKHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPhysicalDevice16BitStorageFeaturesKHR.byteLength = 0x20;

VkPhysicalDevice16BitStorageFeaturesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  storageBuffer16BitAccess: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  uniformAndStorageBuffer16BitAccess: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  storagePushConstant16: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  storageInputOutput16: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceSubgroupProperties **/
class VkPhysicalDeviceSubgroupProperties {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    
    
    
    
    this.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceSubgroupProperties.pNext' isn't allowed to be filled");
  }
  get subgroupSize() {
    return this.memoryViewUint32[0x4];
  }
  get supportedStages() {
    return this.memoryViewInt32[0x5];
  }
  get supportedOperations() {
    return this.memoryViewInt32[0x6];
  }
  get quadOperationsInAllStages() {
    return this.memoryViewUint32[0x7] !== 0;
  }
  
};

VkPhysicalDeviceSubgroupProperties.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceSubgroupProperties"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceSubgroupProperties.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceSubgroupProperties"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x20), 0x0);
  
  
};

VkPhysicalDeviceSubgroupProperties.byteLength = 0x20;

VkPhysicalDeviceSubgroupProperties.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  subgroupSize: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  supportedStages: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  supportedOperations: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  quadOperationsInAllStages: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
});
/** VkBufferMemoryRequirementsInfo2 **/
class VkBufferMemoryRequirementsInfo2 {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    this._buffer = null;
    this.sType = 0x3B9D0450;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.buffer !== void 0) this.buffer = opts.buffer;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkBufferMemoryRequirementsInfo2.pNext' isn't allowed to be filled");
  }
  get buffer() {
    return this._buffer;
  }
  set buffer(value) {
    if (value !== null && value.constructor === VkBuffer) {
      
      this._buffer = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._buffer = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkBufferMemoryRequirementsInfo2.buffer': Expected 'VkBuffer' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkBufferMemoryRequirementsInfo2.prototype.flush = function flush() {
  //console.log(`Flushing: "VkBufferMemoryRequirementsInfo2"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkBufferMemoryRequirementsInfo2.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkBufferMemoryRequirementsInfo2"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkBufferMemoryRequirementsInfo2.byteLength = 0x18;

VkBufferMemoryRequirementsInfo2.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  buffer: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
});
/** VkBufferMemoryRequirementsInfo2KHR **/
class VkBufferMemoryRequirementsInfo2KHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    this._buffer = null;
    this.sType = 0x3B9D0450;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.buffer !== void 0) this.buffer = opts.buffer;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkBufferMemoryRequirementsInfo2KHR.pNext' isn't allowed to be filled");
  }
  get buffer() {
    return this._buffer;
  }
  set buffer(value) {
    if (value !== null && value.constructor === VkBuffer) {
      
      this._buffer = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._buffer = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkBufferMemoryRequirementsInfo2KHR.buffer': Expected 'VkBuffer' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkBufferMemoryRequirementsInfo2KHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkBufferMemoryRequirementsInfo2KHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkBufferMemoryRequirementsInfo2KHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkBufferMemoryRequirementsInfo2KHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkBufferMemoryRequirementsInfo2KHR.byteLength = 0x18;

VkBufferMemoryRequirementsInfo2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  buffer: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
});
/** VkImageMemoryRequirementsInfo2 **/
class VkImageMemoryRequirementsInfo2 {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    this._image = null;
    this.sType = 0x3B9D0451;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.image !== void 0) this.image = opts.image;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null && (value instanceof Object)) {
      let {sType} = value;
      if (sType <= -1) throw new TypeError("Invalid type for 'VkImageMemoryRequirementsInfo2.pNext'");
      switch (sType) {
          
        case 0x3B9D2B63:
          break;
        default:
          throw new TypeError("Invalid type for 'VkImageMemoryRequirementsInfo2.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkImageMemoryRequirementsInfo2.pNext'");
    }
  }
  get image() {
    return this._image;
  }
  set image(value) {
    if (value !== null && value.constructor === VkImage) {
      
      this._image = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._image = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkImageMemoryRequirementsInfo2.image': Expected 'VkImage' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkImageMemoryRequirementsInfo2.prototype.flush = function flush() {
  //console.log(`Flushing: "VkImageMemoryRequirementsInfo2"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkImageMemoryRequirementsInfo2.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkImageMemoryRequirementsInfo2"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkImageMemoryRequirementsInfo2.byteLength = 0x18;

VkImageMemoryRequirementsInfo2.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  image: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
});
/** VkImageMemoryRequirementsInfo2KHR **/
class VkImageMemoryRequirementsInfo2KHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    this._image = null;
    this.sType = 0x3B9D0451;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.image !== void 0) this.image = opts.image;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null && (value instanceof Object)) {
      let {sType} = value;
      if (sType <= -1) throw new TypeError("Invalid type for 'VkImageMemoryRequirementsInfo2KHR.pNext'");
      switch (sType) {
          
        case 0x3B9D2B63:
          break;
        default:
          throw new TypeError("Invalid type for 'VkImageMemoryRequirementsInfo2KHR.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkImageMemoryRequirementsInfo2KHR.pNext'");
    }
  }
  get image() {
    return this._image;
  }
  set image(value) {
    if (value !== null && value.constructor === VkImage) {
      
      this._image = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._image = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkImageMemoryRequirementsInfo2KHR.image': Expected 'VkImage' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkImageMemoryRequirementsInfo2KHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkImageMemoryRequirementsInfo2KHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkImageMemoryRequirementsInfo2KHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkImageMemoryRequirementsInfo2KHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkImageMemoryRequirementsInfo2KHR.byteLength = 0x18;

VkImageMemoryRequirementsInfo2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  image: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
});
/** VkImageSparseMemoryRequirementsInfo2 **/
class VkImageSparseMemoryRequirementsInfo2 {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    this._image = null;
    this.sType = 0x3B9D0452;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.image !== void 0) this.image = opts.image;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkImageSparseMemoryRequirementsInfo2.pNext' isn't allowed to be filled");
  }
  get image() {
    return this._image;
  }
  set image(value) {
    if (value !== null && value.constructor === VkImage) {
      
      this._image = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._image = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkImageSparseMemoryRequirementsInfo2.image': Expected 'VkImage' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkImageSparseMemoryRequirementsInfo2.prototype.flush = function flush() {
  //console.log(`Flushing: "VkImageSparseMemoryRequirementsInfo2"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkImageSparseMemoryRequirementsInfo2.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkImageSparseMemoryRequirementsInfo2"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkImageSparseMemoryRequirementsInfo2.byteLength = 0x18;

VkImageSparseMemoryRequirementsInfo2.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  image: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
});
/** VkImageSparseMemoryRequirementsInfo2KHR **/
class VkImageSparseMemoryRequirementsInfo2KHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    this._image = null;
    this.sType = 0x3B9D0452;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.image !== void 0) this.image = opts.image;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkImageSparseMemoryRequirementsInfo2KHR.pNext' isn't allowed to be filled");
  }
  get image() {
    return this._image;
  }
  set image(value) {
    if (value !== null && value.constructor === VkImage) {
      
      this._image = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._image = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkImageSparseMemoryRequirementsInfo2KHR.image': Expected 'VkImage' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkImageSparseMemoryRequirementsInfo2KHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkImageSparseMemoryRequirementsInfo2KHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkImageSparseMemoryRequirementsInfo2KHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkImageSparseMemoryRequirementsInfo2KHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkImageSparseMemoryRequirementsInfo2KHR.byteLength = 0x18;

VkImageSparseMemoryRequirementsInfo2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  image: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
});
/** VkMemoryRequirements2 **/
class VkMemoryRequirements2 {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x28);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    this._memoryRequirements = new VkMemoryRequirements({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x10 });
    this.sType = 0x3B9D0453;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null && (value instanceof Object)) {
      let {sType} = value;
      if (sType <= -1) throw new TypeError("Invalid type for 'VkMemoryRequirements2.pNext'");
      switch (sType) {
          
        case 0x3B9CBA18:
          break;
        default:
          throw new TypeError("Invalid type for 'VkMemoryRequirements2.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkMemoryRequirements2.pNext'");
    }
  }
  get memoryRequirements() {
    return this._memoryRequirements;
  }
  
};

VkMemoryRequirements2.prototype.flush = function flush() {
  //console.log(`Flushing: "VkMemoryRequirements2"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkMemoryRequirements2.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x28);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkMemoryRequirements2"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x28), 0x0);
  
  
  
  
};

VkMemoryRequirements2.byteLength = 0x28;

VkMemoryRequirements2.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  memoryRequirements: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x18
  }),
});
/** VkMemoryRequirements2KHR **/
class VkMemoryRequirements2KHR {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x28);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    this._memoryRequirements = new VkMemoryRequirements({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x10 });
    this.sType = 0x3B9D0453;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null && (value instanceof Object)) {
      let {sType} = value;
      if (sType <= -1) throw new TypeError("Invalid type for 'VkMemoryRequirements2KHR.pNext'");
      switch (sType) {
          
        case 0x3B9CBA18:
          break;
        default:
          throw new TypeError("Invalid type for 'VkMemoryRequirements2KHR.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkMemoryRequirements2KHR.pNext'");
    }
  }
  get memoryRequirements() {
    return this._memoryRequirements;
  }
  
};

VkMemoryRequirements2KHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkMemoryRequirements2KHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkMemoryRequirements2KHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x28);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkMemoryRequirements2KHR"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x28), 0x0);
  
  
  
  
};

VkMemoryRequirements2KHR.byteLength = 0x28;

VkMemoryRequirements2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  memoryRequirements: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x18
  }),
});
/** VkSparseImageMemoryRequirements2 **/
class VkSparseImageMemoryRequirements2 {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x40);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x40) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x40) / 0x8);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    this._memoryRequirements = new VkSparseImageMemoryRequirements({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x10 });
    this.sType = 0x3B9D0454;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkSparseImageMemoryRequirements2.pNext' isn't allowed to be filled");
  }
  get memoryRequirements() {
    return this._memoryRequirements;
  }
  
};

VkSparseImageMemoryRequirements2.prototype.flush = function flush() {
  //console.log(`Flushing: "VkSparseImageMemoryRequirements2"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkSparseImageMemoryRequirements2.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x40);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkSparseImageMemoryRequirements2"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x40), 0x0);
  
  
  
  
};

VkSparseImageMemoryRequirements2.byteLength = 0x40;

VkSparseImageMemoryRequirements2.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  memoryRequirements: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x30
  }),
});
/** VkSparseImageMemoryRequirements2KHR **/
class VkSparseImageMemoryRequirements2KHR {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x40);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x40) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x40) / 0x8);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    this._memoryRequirements = new VkSparseImageMemoryRequirements({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x10 });
    this.sType = 0x3B9D0454;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkSparseImageMemoryRequirements2KHR.pNext' isn't allowed to be filled");
  }
  get memoryRequirements() {
    return this._memoryRequirements;
  }
  
};

VkSparseImageMemoryRequirements2KHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkSparseImageMemoryRequirements2KHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkSparseImageMemoryRequirements2KHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x40);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkSparseImageMemoryRequirements2KHR"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x40), 0x0);
  
  
  
  
};

VkSparseImageMemoryRequirements2KHR.byteLength = 0x40;

VkSparseImageMemoryRequirements2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  memoryRequirements: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x30
  }),
});
/** VkPhysicalDevicePointClippingProperties **/
class VkPhysicalDevicePointClippingProperties {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    
    this.sType = 0x3B9C9308;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDevicePointClippingProperties.pNext' isn't allowed to be filled");
  }
  get pointClippingBehavior() {
    return this.memoryViewInt32[0x4];
  }
  
};

VkPhysicalDevicePointClippingProperties.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDevicePointClippingProperties"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDevicePointClippingProperties.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDevicePointClippingProperties"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x18), 0x0);
  
  
};

VkPhysicalDevicePointClippingProperties.byteLength = 0x18;

VkPhysicalDevicePointClippingProperties.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  pointClippingBehavior: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPhysicalDevicePointClippingPropertiesKHR **/
class VkPhysicalDevicePointClippingPropertiesKHR {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    
    this.sType = 0x3B9C9308;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDevicePointClippingPropertiesKHR.pNext' isn't allowed to be filled");
  }
  get pointClippingBehavior() {
    return this.memoryViewInt32[0x4];
  }
  
};

VkPhysicalDevicePointClippingPropertiesKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDevicePointClippingPropertiesKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDevicePointClippingPropertiesKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDevicePointClippingPropertiesKHR"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x18), 0x0);
  
  
};

VkPhysicalDevicePointClippingPropertiesKHR.byteLength = 0x18;

VkPhysicalDevicePointClippingPropertiesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  pointClippingBehavior: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkMemoryDedicatedRequirements **/
class VkMemoryDedicatedRequirements {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    
    
    this.sType = 0x3B9CBA18;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkMemoryDedicatedRequirements.pNext' isn't allowed to be filled");
  }
  get prefersDedicatedAllocation() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  get requiresDedicatedAllocation() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  
};

VkMemoryDedicatedRequirements.prototype.flush = function flush() {
  //console.log(`Flushing: "VkMemoryDedicatedRequirements"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkMemoryDedicatedRequirements.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkMemoryDedicatedRequirements"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x18), 0x0);
  
  
};

VkMemoryDedicatedRequirements.byteLength = 0x18;

VkMemoryDedicatedRequirements.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  prefersDedicatedAllocation: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  requiresDedicatedAllocation: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
});
/** VkMemoryDedicatedRequirementsKHR **/
class VkMemoryDedicatedRequirementsKHR {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    
    
    this.sType = 0x3B9CBA18;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkMemoryDedicatedRequirementsKHR.pNext' isn't allowed to be filled");
  }
  get prefersDedicatedAllocation() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  get requiresDedicatedAllocation() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  
};

VkMemoryDedicatedRequirementsKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkMemoryDedicatedRequirementsKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkMemoryDedicatedRequirementsKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkMemoryDedicatedRequirementsKHR"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x18), 0x0);
  
  
};

VkMemoryDedicatedRequirementsKHR.byteLength = 0x18;

VkMemoryDedicatedRequirementsKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  prefersDedicatedAllocation: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  requiresDedicatedAllocation: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
});
/** VkMemoryDedicatedAllocateInfo **/
class VkMemoryDedicatedAllocateInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    this._image = null;
    this._buffer = null;
    this.sType = 0x3B9CBA19;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.image !== void 0) this.image = opts.image;
      if (opts.buffer !== void 0) this.buffer = opts.buffer;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkMemoryDedicatedAllocateInfo.pNext' isn't allowed to be filled");
  }
  get image() {
    return this._image;
  }
  set image(value) {
    if (value !== null && value.constructor === VkImage) {
      
      this._image = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._image = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkMemoryDedicatedAllocateInfo.image': Expected 'VkImage' but got '" + value.constructor.name + "'");
    }
  }
  get buffer() {
    return this._buffer;
  }
  set buffer(value) {
    if (value !== null && value.constructor === VkBuffer) {
      
      this._buffer = value;
      
      this.memoryViewBigInt64[0x3] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._buffer = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkMemoryDedicatedAllocateInfo.buffer': Expected 'VkBuffer' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkMemoryDedicatedAllocateInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkMemoryDedicatedAllocateInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkMemoryDedicatedAllocateInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkMemoryDedicatedAllocateInfo"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkMemoryDedicatedAllocateInfo.byteLength = 0x20;

VkMemoryDedicatedAllocateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  image: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  buffer: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkMemoryDedicatedAllocateInfoKHR **/
class VkMemoryDedicatedAllocateInfoKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    this._image = null;
    this._buffer = null;
    this.sType = 0x3B9CBA19;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.image !== void 0) this.image = opts.image;
      if (opts.buffer !== void 0) this.buffer = opts.buffer;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkMemoryDedicatedAllocateInfoKHR.pNext' isn't allowed to be filled");
  }
  get image() {
    return this._image;
  }
  set image(value) {
    if (value !== null && value.constructor === VkImage) {
      
      this._image = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._image = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkMemoryDedicatedAllocateInfoKHR.image': Expected 'VkImage' but got '" + value.constructor.name + "'");
    }
  }
  get buffer() {
    return this._buffer;
  }
  set buffer(value) {
    if (value !== null && value.constructor === VkBuffer) {
      
      this._buffer = value;
      
      this.memoryViewBigInt64[0x3] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._buffer = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkMemoryDedicatedAllocateInfoKHR.buffer': Expected 'VkBuffer' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkMemoryDedicatedAllocateInfoKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkMemoryDedicatedAllocateInfoKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkMemoryDedicatedAllocateInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkMemoryDedicatedAllocateInfoKHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkMemoryDedicatedAllocateInfoKHR.byteLength = 0x20;

VkMemoryDedicatedAllocateInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  image: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  buffer: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkImageViewUsageCreateInfo **/
class VkImageViewUsageCreateInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = 0x3B9C930A;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.usage !== void 0) this.usage = opts.usage;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkImageViewUsageCreateInfo.pNext' isn't allowed to be filled");
  }
  get usage() {
    return this.memoryViewInt32[0x4];
  }
  set usage(value) {
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkImageViewUsageCreateInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkImageViewUsageCreateInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkImageViewUsageCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkImageViewUsageCreateInfo"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkImageViewUsageCreateInfo.byteLength = 0x18;

VkImageViewUsageCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  usage: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkImageViewUsageCreateInfoKHR **/
class VkImageViewUsageCreateInfoKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = 0x3B9C930A;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.usage !== void 0) this.usage = opts.usage;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkImageViewUsageCreateInfoKHR.pNext' isn't allowed to be filled");
  }
  get usage() {
    return this.memoryViewInt32[0x4];
  }
  set usage(value) {
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkImageViewUsageCreateInfoKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkImageViewUsageCreateInfoKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkImageViewUsageCreateInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkImageViewUsageCreateInfoKHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkImageViewUsageCreateInfoKHR.byteLength = 0x18;

VkImageViewUsageCreateInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  usage: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPipelineTessellationDomainOriginStateCreateInfo **/
class VkPipelineTessellationDomainOriginStateCreateInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = 0x3B9C930B;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.domainOrigin !== void 0) this.domainOrigin = opts.domainOrigin;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPipelineTessellationDomainOriginStateCreateInfo.pNext' isn't allowed to be filled");
  }
  get domainOrigin() {
    return this.memoryViewInt32[0x4];
  }
  set domainOrigin(value) {
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkPipelineTessellationDomainOriginStateCreateInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPipelineTessellationDomainOriginStateCreateInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPipelineTessellationDomainOriginStateCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPipelineTessellationDomainOriginStateCreateInfo"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPipelineTessellationDomainOriginStateCreateInfo.byteLength = 0x18;

VkPipelineTessellationDomainOriginStateCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  domainOrigin: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPipelineTessellationDomainOriginStateCreateInfoKHR **/
class VkPipelineTessellationDomainOriginStateCreateInfoKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = 0x3B9C930B;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.domainOrigin !== void 0) this.domainOrigin = opts.domainOrigin;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPipelineTessellationDomainOriginStateCreateInfoKHR.pNext' isn't allowed to be filled");
  }
  get domainOrigin() {
    return this.memoryViewInt32[0x4];
  }
  set domainOrigin(value) {
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkPipelineTessellationDomainOriginStateCreateInfoKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPipelineTessellationDomainOriginStateCreateInfoKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPipelineTessellationDomainOriginStateCreateInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPipelineTessellationDomainOriginStateCreateInfoKHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPipelineTessellationDomainOriginStateCreateInfoKHR.byteLength = 0x18;

VkPipelineTessellationDomainOriginStateCreateInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  domainOrigin: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkSamplerYcbcrConversionInfo **/
class VkSamplerYcbcrConversionInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    this._conversion = null;
    this.sType = 0x3B9D2B61;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.conversion !== void 0) this.conversion = opts.conversion;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkSamplerYcbcrConversionInfo.pNext' isn't allowed to be filled");
  }
  get conversion() {
    return this._conversion;
  }
  set conversion(value) {
    if (value !== null && value.constructor === VkSamplerYcbcrConversion) {
      
      this._conversion = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._conversion = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkSamplerYcbcrConversionInfo.conversion': Expected 'VkSamplerYcbcrConversion' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkSamplerYcbcrConversionInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkSamplerYcbcrConversionInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkSamplerYcbcrConversionInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkSamplerYcbcrConversionInfo"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkSamplerYcbcrConversionInfo.byteLength = 0x18;

VkSamplerYcbcrConversionInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  conversion: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
});
/** VkSamplerYcbcrConversionInfoKHR **/
class VkSamplerYcbcrConversionInfoKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    this._conversion = null;
    this.sType = 0x3B9D2B61;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.conversion !== void 0) this.conversion = opts.conversion;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkSamplerYcbcrConversionInfoKHR.pNext' isn't allowed to be filled");
  }
  get conversion() {
    return this._conversion;
  }
  set conversion(value) {
    if (value !== null && value.constructor === VkSamplerYcbcrConversion) {
      
      this._conversion = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._conversion = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkSamplerYcbcrConversionInfoKHR.conversion': Expected 'VkSamplerYcbcrConversion' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkSamplerYcbcrConversionInfoKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkSamplerYcbcrConversionInfoKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkSamplerYcbcrConversionInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkSamplerYcbcrConversionInfoKHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkSamplerYcbcrConversionInfoKHR.byteLength = 0x18;

VkSamplerYcbcrConversionInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  conversion: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
});
/** VkSamplerYcbcrConversionCreateInfo **/
class VkSamplerYcbcrConversionCreateInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x40);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    
    this._components = new VkComponentMapping({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x1C });
    
    
    
    
    this.sType = 0x3B9D2B60;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.format !== void 0) this.format = opts.format;
      if (opts.ycbcrModel !== void 0) this.ycbcrModel = opts.ycbcrModel;
      if (opts.ycbcrRange !== void 0) this.ycbcrRange = opts.ycbcrRange;
      if (opts.components !== void 0) this.components = opts.components;
      if (opts.xChromaOffset !== void 0) this.xChromaOffset = opts.xChromaOffset;
      if (opts.yChromaOffset !== void 0) this.yChromaOffset = opts.yChromaOffset;
      if (opts.chromaFilter !== void 0) this.chromaFilter = opts.chromaFilter;
      if (opts.forceExplicitReconstruction !== void 0) this.forceExplicitReconstruction = opts.forceExplicitReconstruction;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null && (value instanceof Object)) {
      let {sType} = value;
      if (sType <= -1) throw new TypeError("Invalid type for 'VkSamplerYcbcrConversionCreateInfo.pNext'");
      switch (sType) {
          
        case 0x3B9CC1ED:
          break;
        default:
          throw new TypeError("Invalid type for 'VkSamplerYcbcrConversionCreateInfo.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkSamplerYcbcrConversionCreateInfo.pNext'");
    }
  }
  get format() {
    return this.memoryViewInt32[0x4];
  }
  set format(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get ycbcrModel() {
    return this.memoryViewInt32[0x5];
  }
  set ycbcrModel(value) {
    this.memoryViewInt32[0x5] = value;
  }
  get ycbcrRange() {
    return this.memoryViewInt32[0x6];
  }
  set ycbcrRange(value) {
    this.memoryViewInt32[0x6] = value;
  }
  get components() {
    return this._components;
  }
  set components(value) {
    if (value !== null && value.constructor === VkComponentMapping) {
      value.flush();
      this._components = value;
      this.memoryViewBigInt64[0x4] = value.memoryAddress;
      
    } else if (value === null) {
      this._components = null;
      this.memoryViewBigInt64[0x4] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkSamplerYcbcrConversionCreateInfo.components': Expected 'VkComponentMapping' but got '" + value.constructor.name + "'");
    }
  }
  get xChromaOffset() {
    return this.memoryViewInt32[0xB];
  }
  set xChromaOffset(value) {
    this.memoryViewInt32[0xB] = value;
  }
  get yChromaOffset() {
    return this.memoryViewInt32[0xC];
  }
  set yChromaOffset(value) {
    this.memoryViewInt32[0xC] = value;
  }
  get chromaFilter() {
    return this.memoryViewInt32[0xD];
  }
  set chromaFilter(value) {
    this.memoryViewInt32[0xD] = value;
  }
  get forceExplicitReconstruction() {
    return this.memoryViewUint32[0xE] !== 0;
  }
  set forceExplicitReconstruction(value) {
    this.memoryViewUint32[0xE] = value | 0;
  }
  
};

VkSamplerYcbcrConversionCreateInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkSamplerYcbcrConversionCreateInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  
  return true;
};

VkSamplerYcbcrConversionCreateInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x40);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkSamplerYcbcrConversionCreateInfo"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
};

VkSamplerYcbcrConversionCreateInfo.byteLength = 0x40;

VkSamplerYcbcrConversionCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  format: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  ycbcrModel: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  ycbcrRange: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  components: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x10
  }),
  xChromaOffset: Object.freeze({
    byteOffset: 0x2C,
    byteLength: 0x4
  }),
  yChromaOffset: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  chromaFilter: Object.freeze({
    byteOffset: 0x34,
    byteLength: 0x4
  }),
  forceExplicitReconstruction: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x4
  }),
});
/** VkSamplerYcbcrConversionCreateInfoKHR **/
class VkSamplerYcbcrConversionCreateInfoKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x40);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    
    this._components = new VkComponentMapping({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x1C });
    
    
    
    
    this.sType = 0x3B9D2B60;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.format !== void 0) this.format = opts.format;
      if (opts.ycbcrModel !== void 0) this.ycbcrModel = opts.ycbcrModel;
      if (opts.ycbcrRange !== void 0) this.ycbcrRange = opts.ycbcrRange;
      if (opts.components !== void 0) this.components = opts.components;
      if (opts.xChromaOffset !== void 0) this.xChromaOffset = opts.xChromaOffset;
      if (opts.yChromaOffset !== void 0) this.yChromaOffset = opts.yChromaOffset;
      if (opts.chromaFilter !== void 0) this.chromaFilter = opts.chromaFilter;
      if (opts.forceExplicitReconstruction !== void 0) this.forceExplicitReconstruction = opts.forceExplicitReconstruction;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null && (value instanceof Object)) {
      let {sType} = value;
      if (sType <= -1) throw new TypeError("Invalid type for 'VkSamplerYcbcrConversionCreateInfoKHR.pNext'");
      switch (sType) {
          
        case 0x3B9CC1ED:
          break;
        default:
          throw new TypeError("Invalid type for 'VkSamplerYcbcrConversionCreateInfoKHR.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkSamplerYcbcrConversionCreateInfoKHR.pNext'");
    }
  }
  get format() {
    return this.memoryViewInt32[0x4];
  }
  set format(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get ycbcrModel() {
    return this.memoryViewInt32[0x5];
  }
  set ycbcrModel(value) {
    this.memoryViewInt32[0x5] = value;
  }
  get ycbcrRange() {
    return this.memoryViewInt32[0x6];
  }
  set ycbcrRange(value) {
    this.memoryViewInt32[0x6] = value;
  }
  get components() {
    return this._components;
  }
  set components(value) {
    if (value !== null && value.constructor === VkComponentMapping) {
      value.flush();
      this._components = value;
      this.memoryViewBigInt64[0x4] = value.memoryAddress;
      
    } else if (value === null) {
      this._components = null;
      this.memoryViewBigInt64[0x4] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkSamplerYcbcrConversionCreateInfoKHR.components': Expected 'VkComponentMapping' but got '" + value.constructor.name + "'");
    }
  }
  get xChromaOffset() {
    return this.memoryViewInt32[0xB];
  }
  set xChromaOffset(value) {
    this.memoryViewInt32[0xB] = value;
  }
  get yChromaOffset() {
    return this.memoryViewInt32[0xC];
  }
  set yChromaOffset(value) {
    this.memoryViewInt32[0xC] = value;
  }
  get chromaFilter() {
    return this.memoryViewInt32[0xD];
  }
  set chromaFilter(value) {
    this.memoryViewInt32[0xD] = value;
  }
  get forceExplicitReconstruction() {
    return this.memoryViewUint32[0xE] !== 0;
  }
  set forceExplicitReconstruction(value) {
    this.memoryViewUint32[0xE] = value | 0;
  }
  
};

VkSamplerYcbcrConversionCreateInfoKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkSamplerYcbcrConversionCreateInfoKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  
  return true;
};

VkSamplerYcbcrConversionCreateInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x40);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkSamplerYcbcrConversionCreateInfoKHR"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
};

VkSamplerYcbcrConversionCreateInfoKHR.byteLength = 0x40;

VkSamplerYcbcrConversionCreateInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  format: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  ycbcrModel: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  ycbcrRange: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  components: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x10
  }),
  xChromaOffset: Object.freeze({
    byteOffset: 0x2C,
    byteLength: 0x4
  }),
  yChromaOffset: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  chromaFilter: Object.freeze({
    byteOffset: 0x34,
    byteLength: 0x4
  }),
  forceExplicitReconstruction: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x4
  }),
});
/** VkBindImagePlaneMemoryInfo **/
class VkBindImagePlaneMemoryInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = 0x3B9D2B62;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.planeAspect !== void 0) this.planeAspect = opts.planeAspect;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkBindImagePlaneMemoryInfo.pNext' isn't allowed to be filled");
  }
  get planeAspect() {
    return this.memoryViewInt32[0x4];
  }
  set planeAspect(value) {
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkBindImagePlaneMemoryInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkBindImagePlaneMemoryInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkBindImagePlaneMemoryInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkBindImagePlaneMemoryInfo"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkBindImagePlaneMemoryInfo.byteLength = 0x18;

VkBindImagePlaneMemoryInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  planeAspect: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkBindImagePlaneMemoryInfoKHR **/
class VkBindImagePlaneMemoryInfoKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = 0x3B9D2B62;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.planeAspect !== void 0) this.planeAspect = opts.planeAspect;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkBindImagePlaneMemoryInfoKHR.pNext' isn't allowed to be filled");
  }
  get planeAspect() {
    return this.memoryViewInt32[0x4];
  }
  set planeAspect(value) {
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkBindImagePlaneMemoryInfoKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkBindImagePlaneMemoryInfoKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkBindImagePlaneMemoryInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkBindImagePlaneMemoryInfoKHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkBindImagePlaneMemoryInfoKHR.byteLength = 0x18;

VkBindImagePlaneMemoryInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  planeAspect: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkImagePlaneMemoryRequirementsInfo **/
class VkImagePlaneMemoryRequirementsInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = 0x3B9D2B63;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.planeAspect !== void 0) this.planeAspect = opts.planeAspect;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkImagePlaneMemoryRequirementsInfo.pNext' isn't allowed to be filled");
  }
  get planeAspect() {
    return this.memoryViewInt32[0x4];
  }
  set planeAspect(value) {
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkImagePlaneMemoryRequirementsInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkImagePlaneMemoryRequirementsInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkImagePlaneMemoryRequirementsInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkImagePlaneMemoryRequirementsInfo"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkImagePlaneMemoryRequirementsInfo.byteLength = 0x18;

VkImagePlaneMemoryRequirementsInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  planeAspect: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkImagePlaneMemoryRequirementsInfoKHR **/
class VkImagePlaneMemoryRequirementsInfoKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = 0x3B9D2B63;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.planeAspect !== void 0) this.planeAspect = opts.planeAspect;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkImagePlaneMemoryRequirementsInfoKHR.pNext' isn't allowed to be filled");
  }
  get planeAspect() {
    return this.memoryViewInt32[0x4];
  }
  set planeAspect(value) {
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkImagePlaneMemoryRequirementsInfoKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkImagePlaneMemoryRequirementsInfoKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkImagePlaneMemoryRequirementsInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkImagePlaneMemoryRequirementsInfoKHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkImagePlaneMemoryRequirementsInfoKHR.byteLength = 0x18;

VkImagePlaneMemoryRequirementsInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  planeAspect: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceSamplerYcbcrConversionFeatures **/
class VkPhysicalDeviceSamplerYcbcrConversionFeatures {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = 0x3B9D2B64;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.samplerYcbcrConversion !== void 0) this.samplerYcbcrConversion = opts.samplerYcbcrConversion;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceSamplerYcbcrConversionFeatures.pNext' isn't allowed to be filled");
  }
  get samplerYcbcrConversion() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set samplerYcbcrConversion(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  
};

VkPhysicalDeviceSamplerYcbcrConversionFeatures.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceSamplerYcbcrConversionFeatures"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceSamplerYcbcrConversionFeatures.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceSamplerYcbcrConversionFeatures"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPhysicalDeviceSamplerYcbcrConversionFeatures.byteLength = 0x18;

VkPhysicalDeviceSamplerYcbcrConversionFeatures.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  samplerYcbcrConversion: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR **/
class VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = 0x3B9D2B64;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.samplerYcbcrConversion !== void 0) this.samplerYcbcrConversion = opts.samplerYcbcrConversion;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR.pNext' isn't allowed to be filled");
  }
  get samplerYcbcrConversion() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set samplerYcbcrConversion(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  
};

VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR.byteLength = 0x18;

VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  samplerYcbcrConversion: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkSamplerYcbcrConversionImageFormatProperties **/
class VkSamplerYcbcrConversionImageFormatProperties {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    
    this.sType = 0x3B9D2B65;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkSamplerYcbcrConversionImageFormatProperties.pNext' isn't allowed to be filled");
  }
  get combinedImageSamplerDescriptorCount() {
    return this.memoryViewUint32[0x4];
  }
  
};

VkSamplerYcbcrConversionImageFormatProperties.prototype.flush = function flush() {
  //console.log(`Flushing: "VkSamplerYcbcrConversionImageFormatProperties"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkSamplerYcbcrConversionImageFormatProperties.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkSamplerYcbcrConversionImageFormatProperties"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x18), 0x0);
  
  
};

VkSamplerYcbcrConversionImageFormatProperties.byteLength = 0x18;

VkSamplerYcbcrConversionImageFormatProperties.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  combinedImageSamplerDescriptorCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkSamplerYcbcrConversionImageFormatPropertiesKHR **/
class VkSamplerYcbcrConversionImageFormatPropertiesKHR {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    
    this.sType = 0x3B9D2B65;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkSamplerYcbcrConversionImageFormatPropertiesKHR.pNext' isn't allowed to be filled");
  }
  get combinedImageSamplerDescriptorCount() {
    return this.memoryViewUint32[0x4];
  }
  
};

VkSamplerYcbcrConversionImageFormatPropertiesKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkSamplerYcbcrConversionImageFormatPropertiesKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkSamplerYcbcrConversionImageFormatPropertiesKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkSamplerYcbcrConversionImageFormatPropertiesKHR"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x18), 0x0);
  
  
};

VkSamplerYcbcrConversionImageFormatPropertiesKHR.byteLength = 0x18;

VkSamplerYcbcrConversionImageFormatPropertiesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  combinedImageSamplerDescriptorCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkTextureLODGatherFormatPropertiesAMD **/
class VkTextureLODGatherFormatPropertiesAMD {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    
    this.sType = 0x3B9B6A28;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkTextureLODGatherFormatPropertiesAMD.pNext' isn't allowed to be filled");
  }
  get supportsTextureGatherLODBiasAMD() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  
};

VkTextureLODGatherFormatPropertiesAMD.prototype.flush = function flush() {
  //console.log(`Flushing: "VkTextureLODGatherFormatPropertiesAMD"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkTextureLODGatherFormatPropertiesAMD.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkTextureLODGatherFormatPropertiesAMD"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x18), 0x0);
  
  
};

VkTextureLODGatherFormatPropertiesAMD.byteLength = 0x18;

VkTextureLODGatherFormatPropertiesAMD.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  supportsTextureGatherLODBiasAMD: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkConditionalRenderingBeginInfoEXT **/
class VkConditionalRenderingBeginInfoEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x28);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    this._buffer = null;
    
    
    this.sType = 0x3B9C066A;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.buffer !== void 0) this.buffer = opts.buffer;
      if (opts.offset !== void 0) this.offset = opts.offset;
      if (opts.flags !== void 0) this.flags = opts.flags;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkConditionalRenderingBeginInfoEXT.pNext' isn't allowed to be filled");
  }
  get buffer() {
    return this._buffer;
  }
  set buffer(value) {
    if (value !== null && value.constructor === VkBuffer) {
      
      this._buffer = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._buffer = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkConditionalRenderingBeginInfoEXT.buffer': Expected 'VkBuffer' but got '" + value.constructor.name + "'");
    }
  }
  get offset() {
    return this.memoryViewBigUint64[0x3];
  }
  set offset(value) {
    this.memoryViewBigUint64[0x3] = value;
  }
  get flags() {
    return this.memoryViewInt32[0x8];
  }
  set flags(value) {
    this.memoryViewInt32[0x8] = value;
  }
  
};

VkConditionalRenderingBeginInfoEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkConditionalRenderingBeginInfoEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkConditionalRenderingBeginInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x28);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkConditionalRenderingBeginInfoEXT"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkConditionalRenderingBeginInfoEXT.byteLength = 0x28;

VkConditionalRenderingBeginInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  buffer: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  offset: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
});
/** VkProtectedSubmitInfo **/
class VkProtectedSubmitInfo {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = VkStructureType.VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.protectedSubmit !== void 0) this.protectedSubmit = opts.protectedSubmit;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkProtectedSubmitInfo.pNext' isn't allowed to be filled");
  }
  get protectedSubmit() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set protectedSubmit(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  
};

VkProtectedSubmitInfo.prototype.flush = function flush() {
  //console.log(`Flushing: "VkProtectedSubmitInfo"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkProtectedSubmitInfo.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkProtectedSubmitInfo"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkProtectedSubmitInfo.byteLength = 0x18;

VkProtectedSubmitInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  protectedSubmit: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceProtectedMemoryFeatures **/
class VkPhysicalDeviceProtectedMemoryFeatures {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.protectedMemory !== void 0) this.protectedMemory = opts.protectedMemory;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceProtectedMemoryFeatures.pNext' isn't allowed to be filled");
  }
  get protectedMemory() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set protectedMemory(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  
};

VkPhysicalDeviceProtectedMemoryFeatures.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceProtectedMemoryFeatures"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceProtectedMemoryFeatures.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceProtectedMemoryFeatures"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPhysicalDeviceProtectedMemoryFeatures.byteLength = 0x18;

VkPhysicalDeviceProtectedMemoryFeatures.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  protectedMemory: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceProtectedMemoryProperties **/
class VkPhysicalDeviceProtectedMemoryProperties {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    
    this.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceProtectedMemoryProperties.pNext' isn't allowed to be filled");
  }
  get protectedNoFault() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  
};

VkPhysicalDeviceProtectedMemoryProperties.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceProtectedMemoryProperties"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceProtectedMemoryProperties.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceProtectedMemoryProperties"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x18), 0x0);
  
  
};

VkPhysicalDeviceProtectedMemoryProperties.byteLength = 0x18;

VkPhysicalDeviceProtectedMemoryProperties.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  protectedNoFault: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkDeviceQueueInfo2 **/
class VkDeviceQueueInfo2 {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    
    this.sType = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.queueFamilyIndex !== void 0) this.queueFamilyIndex = opts.queueFamilyIndex;
      if (opts.queueIndex !== void 0) this.queueIndex = opts.queueIndex;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDeviceQueueInfo2.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get queueFamilyIndex() {
    return this.memoryViewUint32[0x5];
  }
  set queueFamilyIndex(value) {
    this.memoryViewUint32[0x5] = value;
  }
  get queueIndex() {
    return this.memoryViewUint32[0x6];
  }
  set queueIndex(value) {
    this.memoryViewUint32[0x6] = value;
  }
  
};

VkDeviceQueueInfo2.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDeviceQueueInfo2"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDeviceQueueInfo2.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDeviceQueueInfo2"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkDeviceQueueInfo2.byteLength = 0x20;

VkDeviceQueueInfo2.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  queueFamilyIndex: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  queueIndex: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
});
/** VkPipelineCoverageToColorStateCreateInfoNV **/
class VkPipelineCoverageToColorStateCreateInfoNV {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    
    this.sType = 0x3B9D1008;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.coverageToColorEnable !== void 0) this.coverageToColorEnable = opts.coverageToColorEnable;
      if (opts.coverageToColorLocation !== void 0) this.coverageToColorLocation = opts.coverageToColorLocation;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPipelineCoverageToColorStateCreateInfoNV.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get coverageToColorEnable() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  set coverageToColorEnable(value) {
    this.memoryViewUint32[0x5] = value | 0;
  }
  get coverageToColorLocation() {
    return this.memoryViewUint32[0x6];
  }
  set coverageToColorLocation(value) {
    this.memoryViewUint32[0x6] = value;
  }
  
};

VkPipelineCoverageToColorStateCreateInfoNV.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPipelineCoverageToColorStateCreateInfoNV"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPipelineCoverageToColorStateCreateInfoNV.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPipelineCoverageToColorStateCreateInfoNV"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPipelineCoverageToColorStateCreateInfoNV.byteLength = 0x20;

VkPipelineCoverageToColorStateCreateInfoNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  coverageToColorEnable: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  coverageToColorLocation: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT **/
class VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    
    
    this.sType = 0x3B9CC5D0;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT.pNext' isn't allowed to be filled");
  }
  get filterMinmaxSingleComponentFormats() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  get filterMinmaxImageComponentMapping() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  
};

VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x18), 0x0);
  
  
};

VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT.byteLength = 0x18;

VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  filterMinmaxSingleComponentFormats: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  filterMinmaxImageComponentMapping: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
});
/** VkSampleLocationEXT **/
class VkSampleLocationEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewFloat32 = new Float32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    
    
    if (typeof opts === "object") {
      if (opts.x !== void 0) this.x = opts.x;
      if (opts.y !== void 0) this.y = opts.y;
      
    }
  }
  get x() {
    return this.memoryViewFloat32[0x0];
  }
  set x(value) {
    this.memoryViewFloat32[0x0] = value;
  }
  get y() {
    return this.memoryViewFloat32[0x1];
  }
  set y(value) {
    this.memoryViewFloat32[0x1] = value;
  }
  
};

VkSampleLocationEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkSampleLocationEXT"`);
  
  return true;
};

VkSampleLocationEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x8);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkSampleLocationEXT"`, this.memoryAddress, memoryAddress);
  
};

VkSampleLocationEXT.byteLength = 0x8;

VkSampleLocationEXT.memoryLayout = Object.freeze({
  x: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  y: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
});
/** VkSampleLocationsInfoEXT **/
class VkSampleLocationsInfoEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x28);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this._sampleLocationGridSize = new VkExtent2D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x14 });
    
    this._pSampleLocations = null;
    this._pSampleLocationsNative = null;
    this.sType = 0x3B9CF898;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.sampleLocationsPerPixel !== void 0) this.sampleLocationsPerPixel = opts.sampleLocationsPerPixel;
      if (opts.sampleLocationGridSize !== void 0) this.sampleLocationGridSize = opts.sampleLocationGridSize;
      if (opts.sampleLocationsCount !== void 0) this.sampleLocationsCount = opts.sampleLocationsCount;
      if (opts.pSampleLocations !== void 0) this.pSampleLocations = opts.pSampleLocations;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkSampleLocationsInfoEXT.pNext' isn't allowed to be filled");
  }
  get sampleLocationsPerPixel() {
    return this.memoryViewInt32[0x4];
  }
  set sampleLocationsPerPixel(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get sampleLocationGridSize() {
    return this._sampleLocationGridSize;
  }
  set sampleLocationGridSize(value) {
    if (value !== null && value.constructor === VkExtent2D) {
      value.flush();
      this._sampleLocationGridSize = value;
      this.memoryViewBigInt64[0x3] = value.memoryAddress;
      
    } else if (value === null) {
      this._sampleLocationGridSize = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkSampleLocationsInfoEXT.sampleLocationGridSize': Expected 'VkExtent2D' but got '" + value.constructor.name + "'");
    }
  }
  get sampleLocationsCount() {
    return this.memoryViewUint32[0x7];
  }
  set sampleLocationsCount(value) {
    this.memoryViewUint32[0x7] = value;
  }
  get pSampleLocations() {
    return this._pSampleLocations;
  }
  set pSampleLocations(value) {
    if (value !== null && value.constructor === Array) {
      this._pSampleLocations = value;
    } else if (value === null) {
      this._pSampleLocations = null;
    } else {
      throw new TypeError("Invalid type for 'VkSampleLocationsInfoEXT.pSampleLocations': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkSampleLocationsInfoEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkSampleLocationsInfoEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  
  
  if (this._pSampleLocations !== null) {
    let array = this._pSampleLocations;
    if (array.length !== this.sampleLocationsCount) {
      throw new RangeError("Invalid array length, expected length of 'sampleLocationsCount' for 'VkSampleLocationsInfoEXT.pSampleLocations'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkSampleLocationEXT) {
        throw new TypeError("Invalid type for 'VkSampleLocationsInfoEXT.pSampleLocations[" + ii + "]': Expected 'VkSampleLocationEXT' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pSampleLocationsNative = nativeArray;
    this.memoryViewBigInt64[0x4] = nativeArray.address;
  }
  
  return true;
};

VkSampleLocationsInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x28);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkSampleLocationsInfoEXT"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
  
  
};

VkSampleLocationsInfoEXT.byteLength = 0x28;

VkSampleLocationsInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  sampleLocationsPerPixel: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  sampleLocationGridSize: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x8
  }),
  sampleLocationsCount: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  pSampleLocations: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
});
/** VkAttachmentSampleLocationsEXT **/
class VkAttachmentSampleLocationsEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x30);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._sampleLocationsInfo = new VkSampleLocationsInfoEXT({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x8 });
    
    if (typeof opts === "object") {
      if (opts.attachmentIndex !== void 0) this.attachmentIndex = opts.attachmentIndex;
      if (opts.sampleLocationsInfo !== void 0) this.sampleLocationsInfo = opts.sampleLocationsInfo;
      
    }
  }
  get attachmentIndex() {
    return this.memoryViewUint32[0x0];
  }
  set attachmentIndex(value) {
    this.memoryViewUint32[0x0] = value;
  }
  get sampleLocationsInfo() {
    return this._sampleLocationsInfo;
  }
  set sampleLocationsInfo(value) {
    if (value !== null && value.constructor === VkSampleLocationsInfoEXT) {
      value.flush();
      this._sampleLocationsInfo = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
      
    } else if (value === null) {
      this._sampleLocationsInfo = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkAttachmentSampleLocationsEXT.sampleLocationsInfo': Expected 'VkSampleLocationsInfoEXT' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkAttachmentSampleLocationsEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkAttachmentSampleLocationsEXT"`);
  
  
  
  return true;
};

VkAttachmentSampleLocationsEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x30);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkAttachmentSampleLocationsEXT"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkAttachmentSampleLocationsEXT.byteLength = 0x30;

VkAttachmentSampleLocationsEXT.memoryLayout = Object.freeze({
  attachmentIndex: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  sampleLocationsInfo: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x28
  }),
});
/** VkSubpassSampleLocationsEXT **/
class VkSubpassSampleLocationsEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x30);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._sampleLocationsInfo = new VkSampleLocationsInfoEXT({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x8 });
    
    if (typeof opts === "object") {
      if (opts.subpassIndex !== void 0) this.subpassIndex = opts.subpassIndex;
      if (opts.sampleLocationsInfo !== void 0) this.sampleLocationsInfo = opts.sampleLocationsInfo;
      
    }
  }
  get subpassIndex() {
    return this.memoryViewUint32[0x0];
  }
  set subpassIndex(value) {
    this.memoryViewUint32[0x0] = value;
  }
  get sampleLocationsInfo() {
    return this._sampleLocationsInfo;
  }
  set sampleLocationsInfo(value) {
    if (value !== null && value.constructor === VkSampleLocationsInfoEXT) {
      value.flush();
      this._sampleLocationsInfo = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
      
    } else if (value === null) {
      this._sampleLocationsInfo = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkSubpassSampleLocationsEXT.sampleLocationsInfo': Expected 'VkSampleLocationsInfoEXT' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkSubpassSampleLocationsEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkSubpassSampleLocationsEXT"`);
  
  
  
  return true;
};

VkSubpassSampleLocationsEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x30);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkSubpassSampleLocationsEXT"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkSubpassSampleLocationsEXT.byteLength = 0x30;

VkSubpassSampleLocationsEXT.memoryLayout = Object.freeze({
  subpassIndex: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  sampleLocationsInfo: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x28
  }),
});
/** VkRenderPassSampleLocationsBeginInfoEXT **/
class VkRenderPassSampleLocationsBeginInfoEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x30);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this._pAttachmentInitialSampleLocations = null;
    this._pAttachmentInitialSampleLocationsNative = null;
    
    this._pPostSubpassSampleLocations = null;
    this._pPostSubpassSampleLocationsNative = null;
    this.sType = 0x3B9CF899;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.attachmentInitialSampleLocationsCount !== void 0) this.attachmentInitialSampleLocationsCount = opts.attachmentInitialSampleLocationsCount;
      if (opts.pAttachmentInitialSampleLocations !== void 0) this.pAttachmentInitialSampleLocations = opts.pAttachmentInitialSampleLocations;
      if (opts.postSubpassSampleLocationsCount !== void 0) this.postSubpassSampleLocationsCount = opts.postSubpassSampleLocationsCount;
      if (opts.pPostSubpassSampleLocations !== void 0) this.pPostSubpassSampleLocations = opts.pPostSubpassSampleLocations;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkRenderPassSampleLocationsBeginInfoEXT.pNext' isn't allowed to be filled");
  }
  get attachmentInitialSampleLocationsCount() {
    return this.memoryViewUint32[0x4];
  }
  set attachmentInitialSampleLocationsCount(value) {
    this.memoryViewUint32[0x4] = value;
  }
  get pAttachmentInitialSampleLocations() {
    return this._pAttachmentInitialSampleLocations;
  }
  set pAttachmentInitialSampleLocations(value) {
    if (value !== null && value.constructor === Array) {
      this._pAttachmentInitialSampleLocations = value;
    } else if (value === null) {
      this._pAttachmentInitialSampleLocations = null;
    } else {
      throw new TypeError("Invalid type for 'VkRenderPassSampleLocationsBeginInfoEXT.pAttachmentInitialSampleLocations': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get postSubpassSampleLocationsCount() {
    return this.memoryViewUint32[0x8];
  }
  set postSubpassSampleLocationsCount(value) {
    this.memoryViewUint32[0x8] = value;
  }
  get pPostSubpassSampleLocations() {
    return this._pPostSubpassSampleLocations;
  }
  set pPostSubpassSampleLocations(value) {
    if (value !== null && value.constructor === Array) {
      this._pPostSubpassSampleLocations = value;
    } else if (value === null) {
      this._pPostSubpassSampleLocations = null;
    } else {
      throw new TypeError("Invalid type for 'VkRenderPassSampleLocationsBeginInfoEXT.pPostSubpassSampleLocations': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkRenderPassSampleLocationsBeginInfoEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkRenderPassSampleLocationsBeginInfoEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pAttachmentInitialSampleLocations !== null) {
    let array = this._pAttachmentInitialSampleLocations;
    if (array.length !== this.attachmentInitialSampleLocationsCount) {
      throw new RangeError("Invalid array length, expected length of 'attachmentInitialSampleLocationsCount' for 'VkRenderPassSampleLocationsBeginInfoEXT.pAttachmentInitialSampleLocations'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkAttachmentSampleLocationsEXT) {
        throw new TypeError("Invalid type for 'VkRenderPassSampleLocationsBeginInfoEXT.pAttachmentInitialSampleLocations[" + ii + "]': Expected 'VkAttachmentSampleLocationsEXT' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pAttachmentInitialSampleLocationsNative = nativeArray;
    this.memoryViewBigInt64[0x3] = nativeArray.address;
  }
  
  
  if (this._pPostSubpassSampleLocations !== null) {
    let array = this._pPostSubpassSampleLocations;
    if (array.length !== this.postSubpassSampleLocationsCount) {
      throw new RangeError("Invalid array length, expected length of 'postSubpassSampleLocationsCount' for 'VkRenderPassSampleLocationsBeginInfoEXT.pPostSubpassSampleLocations'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkSubpassSampleLocationsEXT) {
        throw new TypeError("Invalid type for 'VkRenderPassSampleLocationsBeginInfoEXT.pPostSubpassSampleLocations[" + ii + "]': Expected 'VkSubpassSampleLocationsEXT' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pPostSubpassSampleLocationsNative = nativeArray;
    this.memoryViewBigInt64[0x5] = nativeArray.address;
  }
  
  return true;
};

VkRenderPassSampleLocationsBeginInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x30);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkRenderPassSampleLocationsBeginInfoEXT"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
  
  
};

VkRenderPassSampleLocationsBeginInfoEXT.byteLength = 0x30;

VkRenderPassSampleLocationsBeginInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  attachmentInitialSampleLocationsCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pAttachmentInitialSampleLocations: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  postSubpassSampleLocationsCount: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  pPostSubpassSampleLocations: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
});
/** VkPipelineSampleLocationsStateCreateInfoEXT **/
class VkPipelineSampleLocationsStateCreateInfoEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x40);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this._sampleLocationsInfo = new VkSampleLocationsInfoEXT({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x18 });
    this.sType = 0x3B9CF89A;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.sampleLocationsEnable !== void 0) this.sampleLocationsEnable = opts.sampleLocationsEnable;
      if (opts.sampleLocationsInfo !== void 0) this.sampleLocationsInfo = opts.sampleLocationsInfo;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPipelineSampleLocationsStateCreateInfoEXT.pNext' isn't allowed to be filled");
  }
  get sampleLocationsEnable() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set sampleLocationsEnable(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  get sampleLocationsInfo() {
    return this._sampleLocationsInfo;
  }
  set sampleLocationsInfo(value) {
    if (value !== null && value.constructor === VkSampleLocationsInfoEXT) {
      value.flush();
      this._sampleLocationsInfo = value;
      this.memoryViewBigInt64[0x3] = value.memoryAddress;
      
    } else if (value === null) {
      this._sampleLocationsInfo = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkPipelineSampleLocationsStateCreateInfoEXT.sampleLocationsInfo': Expected 'VkSampleLocationsInfoEXT' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkPipelineSampleLocationsStateCreateInfoEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPipelineSampleLocationsStateCreateInfoEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  
  return true;
};

VkPipelineSampleLocationsStateCreateInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x40);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPipelineSampleLocationsStateCreateInfoEXT"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
};

VkPipelineSampleLocationsStateCreateInfoEXT.byteLength = 0x40;

VkPipelineSampleLocationsStateCreateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  sampleLocationsEnable: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  sampleLocationsInfo: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x28
  }),
});
/** VkPhysicalDeviceSampleLocationsPropertiesEXT **/
class VkPhysicalDeviceSampleLocationsPropertiesEXT {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x30);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewFloat32 = new Float32Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x30) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x30) / 0x8);
      this.memoryViewFloat32 = new Float32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x30) / 0x4);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x30) / 0x4);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    
    this._maxSampleLocationGridSize = new VkExtent2D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x14 });
    this._sampleLocationCoordinateRange = [...Array(2)].fill(0x0);
    
    
    this.sType = 0x3B9CF89B;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceSampleLocationsPropertiesEXT.pNext' isn't allowed to be filled");
  }
  get sampleLocationSampleCounts() {
    return this.memoryViewInt32[0x4];
  }
  get maxSampleLocationGridSize() {
    return this._maxSampleLocationGridSize;
  }
  get sampleLocationCoordinateRange() {
    return [
      this.memoryViewFloat32[0x7],
      this.memoryViewFloat32[0x8]
    ];
  }
  get sampleLocationSubPixelBits() {
    return this.memoryViewUint32[0x9];
  }
  get variableSampleLocations() {
    return this.memoryViewUint32[0xA] !== 0;
  }
  
};

VkPhysicalDeviceSampleLocationsPropertiesEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceSampleLocationsPropertiesEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceSampleLocationsPropertiesEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x30);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceSampleLocationsPropertiesEXT"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x30), 0x0);
  
  
  
  
  
  
};

VkPhysicalDeviceSampleLocationsPropertiesEXT.byteLength = 0x30;

VkPhysicalDeviceSampleLocationsPropertiesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  sampleLocationSampleCounts: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  maxSampleLocationGridSize: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x8
  }),
  sampleLocationCoordinateRange: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x8
  }),
  sampleLocationSubPixelBits: Object.freeze({
    byteOffset: 0x24,
    byteLength: 0x4
  }),
  variableSampleLocations: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x4
  }),
});
/** VkMultisamplePropertiesEXT **/
class VkMultisamplePropertiesEXT {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    this._maxSampleLocationGridSize = new VkExtent2D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x10 });
    this.sType = 0x3B9CF89C;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkMultisamplePropertiesEXT.pNext' isn't allowed to be filled");
  }
  get maxSampleLocationGridSize() {
    return this._maxSampleLocationGridSize;
  }
  
};

VkMultisamplePropertiesEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkMultisamplePropertiesEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkMultisamplePropertiesEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkMultisamplePropertiesEXT"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x18), 0x0);
  
  
  
  
};

VkMultisamplePropertiesEXT.byteLength = 0x18;

VkMultisamplePropertiesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  maxSampleLocationGridSize: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
});
/** VkSamplerReductionModeCreateInfoEXT **/
class VkSamplerReductionModeCreateInfoEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = 0x3B9CC5D1;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.reductionMode !== void 0) this.reductionMode = opts.reductionMode;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkSamplerReductionModeCreateInfoEXT.pNext' isn't allowed to be filled");
  }
  get reductionMode() {
    return this.memoryViewInt32[0x4];
  }
  set reductionMode(value) {
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkSamplerReductionModeCreateInfoEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkSamplerReductionModeCreateInfoEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkSamplerReductionModeCreateInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkSamplerReductionModeCreateInfoEXT"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkSamplerReductionModeCreateInfoEXT.byteLength = 0x18;

VkSamplerReductionModeCreateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  reductionMode: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT **/
class VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = 0x3B9D0C20;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.advancedBlendCoherentOperations !== void 0) this.advancedBlendCoherentOperations = opts.advancedBlendCoherentOperations;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT.pNext' isn't allowed to be filled");
  }
  get advancedBlendCoherentOperations() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set advancedBlendCoherentOperations(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  
};

VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT.byteLength = 0x18;

VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  advancedBlendCoherentOperations: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT **/
class VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x28);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    
    
    
    
    
    
    this.sType = 0x3B9D0C21;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.pNext' isn't allowed to be filled");
  }
  get advancedBlendMaxColorAttachments() {
    return this.memoryViewUint32[0x4];
  }
  get advancedBlendIndependentBlend() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  get advancedBlendNonPremultipliedSrcColor() {
    return this.memoryViewUint32[0x6] !== 0;
  }
  get advancedBlendNonPremultipliedDstColor() {
    return this.memoryViewUint32[0x7] !== 0;
  }
  get advancedBlendCorrelatedOverlap() {
    return this.memoryViewUint32[0x8] !== 0;
  }
  get advancedBlendAllOperations() {
    return this.memoryViewUint32[0x9] !== 0;
  }
  
};

VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x28);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x28), 0x0);
  
  
};

VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.byteLength = 0x28;

VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  advancedBlendMaxColorAttachments: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  advancedBlendIndependentBlend: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  advancedBlendNonPremultipliedSrcColor: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  advancedBlendNonPremultipliedDstColor: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  advancedBlendCorrelatedOverlap: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  advancedBlendAllOperations: Object.freeze({
    byteOffset: 0x24,
    byteLength: 0x4
  }),
});
/** VkPipelineColorBlendAdvancedStateCreateInfoEXT **/
class VkPipelineColorBlendAdvancedStateCreateInfoEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    
    this.sType = 0x3B9D0C22;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.srcPremultiplied !== void 0) this.srcPremultiplied = opts.srcPremultiplied;
      if (opts.dstPremultiplied !== void 0) this.dstPremultiplied = opts.dstPremultiplied;
      if (opts.blendOverlap !== void 0) this.blendOverlap = opts.blendOverlap;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPipelineColorBlendAdvancedStateCreateInfoEXT.pNext' isn't allowed to be filled");
  }
  get srcPremultiplied() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set srcPremultiplied(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  get dstPremultiplied() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  set dstPremultiplied(value) {
    this.memoryViewUint32[0x5] = value | 0;
  }
  get blendOverlap() {
    return this.memoryViewInt32[0x6];
  }
  set blendOverlap(value) {
    this.memoryViewInt32[0x6] = value;
  }
  
};

VkPipelineColorBlendAdvancedStateCreateInfoEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPipelineColorBlendAdvancedStateCreateInfoEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPipelineColorBlendAdvancedStateCreateInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPipelineColorBlendAdvancedStateCreateInfoEXT"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPipelineColorBlendAdvancedStateCreateInfoEXT.byteLength = 0x20;

VkPipelineColorBlendAdvancedStateCreateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  srcPremultiplied: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  dstPremultiplied: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  blendOverlap: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceInlineUniformBlockFeaturesEXT **/
class VkPhysicalDeviceInlineUniformBlockFeaturesEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    this.sType = 0x3B9CE510;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.inlineUniformBlock !== void 0) this.inlineUniformBlock = opts.inlineUniformBlock;
      if (opts.descriptorBindingInlineUniformBlockUpdateAfterBind !== void 0) this.descriptorBindingInlineUniformBlockUpdateAfterBind = opts.descriptorBindingInlineUniformBlockUpdateAfterBind;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceInlineUniformBlockFeaturesEXT.pNext' isn't allowed to be filled");
  }
  get inlineUniformBlock() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set inlineUniformBlock(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  get descriptorBindingInlineUniformBlockUpdateAfterBind() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  set descriptorBindingInlineUniformBlockUpdateAfterBind(value) {
    this.memoryViewUint32[0x5] = value | 0;
  }
  
};

VkPhysicalDeviceInlineUniformBlockFeaturesEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceInlineUniformBlockFeaturesEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceInlineUniformBlockFeaturesEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceInlineUniformBlockFeaturesEXT"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPhysicalDeviceInlineUniformBlockFeaturesEXT.byteLength = 0x18;

VkPhysicalDeviceInlineUniformBlockFeaturesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  inlineUniformBlock: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  descriptorBindingInlineUniformBlockUpdateAfterBind: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceInlineUniformBlockPropertiesEXT **/
class VkPhysicalDeviceInlineUniformBlockPropertiesEXT {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x28);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    
    
    
    
    
    this.sType = 0x3B9CE511;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceInlineUniformBlockPropertiesEXT.pNext' isn't allowed to be filled");
  }
  get maxInlineUniformBlockSize() {
    return this.memoryViewUint32[0x4];
  }
  get maxPerStageDescriptorInlineUniformBlocks() {
    return this.memoryViewUint32[0x5];
  }
  get maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks() {
    return this.memoryViewUint32[0x6];
  }
  get maxDescriptorSetInlineUniformBlocks() {
    return this.memoryViewUint32[0x7];
  }
  get maxDescriptorSetUpdateAfterBindInlineUniformBlocks() {
    return this.memoryViewUint32[0x8];
  }
  
};

VkPhysicalDeviceInlineUniformBlockPropertiesEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceInlineUniformBlockPropertiesEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceInlineUniformBlockPropertiesEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x28);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceInlineUniformBlockPropertiesEXT"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x28), 0x0);
  
  
};

VkPhysicalDeviceInlineUniformBlockPropertiesEXT.byteLength = 0x28;

VkPhysicalDeviceInlineUniformBlockPropertiesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  maxInlineUniformBlockSize: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  maxPerStageDescriptorInlineUniformBlocks: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  maxDescriptorSetInlineUniformBlocks: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  maxDescriptorSetUpdateAfterBindInlineUniformBlocks: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
});
/** VkWriteDescriptorSetInlineUniformBlockEXT **/
class VkWriteDescriptorSetInlineUniformBlockEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this._pData = null;
    this.sType = 0x3B9CE512;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.dataSize !== void 0) this.dataSize = opts.dataSize;
      if (opts.pData !== void 0) this.pData = opts.pData;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkWriteDescriptorSetInlineUniformBlockEXT.pNext' isn't allowed to be filled");
  }
  get dataSize() {
    return this.memoryViewUint32[0x4];
  }
  set dataSize(value) {
    this.memoryViewUint32[0x4] = value;
  }
  get pData() {
    return this._pData;
  }
  set pData(value) {
    if (value !== null && value.constructor === ArrayBuffer) {
      this._pData = value;
      this.memoryViewBigInt64[0x3] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pData = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkWriteDescriptorSetInlineUniformBlockEXT.pData': Expected 'ArrayBuffer' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkWriteDescriptorSetInlineUniformBlockEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkWriteDescriptorSetInlineUniformBlockEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkWriteDescriptorSetInlineUniformBlockEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkWriteDescriptorSetInlineUniformBlockEXT"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkWriteDescriptorSetInlineUniformBlockEXT.byteLength = 0x20;

VkWriteDescriptorSetInlineUniformBlockEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  dataSize: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pData: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkDescriptorPoolInlineUniformBlockCreateInfoEXT **/
class VkDescriptorPoolInlineUniformBlockCreateInfoEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = 0x3B9CE513;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.maxInlineUniformBlockBindings !== void 0) this.maxInlineUniformBlockBindings = opts.maxInlineUniformBlockBindings;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDescriptorPoolInlineUniformBlockCreateInfoEXT.pNext' isn't allowed to be filled");
  }
  get maxInlineUniformBlockBindings() {
    return this.memoryViewUint32[0x4];
  }
  set maxInlineUniformBlockBindings(value) {
    this.memoryViewUint32[0x4] = value;
  }
  
};

VkDescriptorPoolInlineUniformBlockCreateInfoEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDescriptorPoolInlineUniformBlockCreateInfoEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDescriptorPoolInlineUniformBlockCreateInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDescriptorPoolInlineUniformBlockCreateInfoEXT"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkDescriptorPoolInlineUniformBlockCreateInfoEXT.byteLength = 0x18;

VkDescriptorPoolInlineUniformBlockCreateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  maxInlineUniformBlockBindings: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPipelineCoverageModulationStateCreateInfoNV **/
class VkPipelineCoverageModulationStateCreateInfoNV {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x28);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    
    
    this._pCoverageModulationTable = null;
    this.sType = 0x3B9D1BC0;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.coverageModulationMode !== void 0) this.coverageModulationMode = opts.coverageModulationMode;
      if (opts.coverageModulationTableEnable !== void 0) this.coverageModulationTableEnable = opts.coverageModulationTableEnable;
      if (opts.coverageModulationTableCount !== void 0) this.coverageModulationTableCount = opts.coverageModulationTableCount;
      if (opts.pCoverageModulationTable !== void 0) this.pCoverageModulationTable = opts.pCoverageModulationTable;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPipelineCoverageModulationStateCreateInfoNV.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get coverageModulationMode() {
    return this.memoryViewInt32[0x5];
  }
  set coverageModulationMode(value) {
    this.memoryViewInt32[0x5] = value;
  }
  get coverageModulationTableEnable() {
    return this.memoryViewUint32[0x6] !== 0;
  }
  set coverageModulationTableEnable(value) {
    this.memoryViewUint32[0x6] = value | 0;
  }
  get coverageModulationTableCount() {
    return this.memoryViewUint32[0x7];
  }
  set coverageModulationTableCount(value) {
    this.memoryViewUint32[0x7] = value;
  }
  get pCoverageModulationTable() {
    return this._pCoverageModulationTable;
  }
  set pCoverageModulationTable(value) {
    if (value !== null && value.constructor === Float32Array) {
      this._pCoverageModulationTable = value;
      this.memoryViewBigInt64[0x4] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pCoverageModulationTable = null;
      this.memoryViewBigInt64[0x4] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkPipelineCoverageModulationStateCreateInfoNV.pCoverageModulationTable': Expected 'Float32Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkPipelineCoverageModulationStateCreateInfoNV.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPipelineCoverageModulationStateCreateInfoNV"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPipelineCoverageModulationStateCreateInfoNV.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x28);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPipelineCoverageModulationStateCreateInfoNV"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPipelineCoverageModulationStateCreateInfoNV.byteLength = 0x28;

VkPipelineCoverageModulationStateCreateInfoNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  coverageModulationMode: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  coverageModulationTableEnable: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  coverageModulationTableCount: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  pCoverageModulationTable: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
});
/** VkImageFormatListCreateInfoKHR **/
class VkImageFormatListCreateInfoKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this._pViewFormats = null;
    this.sType = 0x3B9D0838;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.viewFormatCount !== void 0) this.viewFormatCount = opts.viewFormatCount;
      if (opts.pViewFormats !== void 0) this.pViewFormats = opts.pViewFormats;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkImageFormatListCreateInfoKHR.pNext' isn't allowed to be filled");
  }
  get viewFormatCount() {
    return this.memoryViewUint32[0x4];
  }
  set viewFormatCount(value) {
    this.memoryViewUint32[0x4] = value;
  }
  get pViewFormats() {
    return this._pViewFormats;
  }
  set pViewFormats(value) {
    if (value !== null && value.constructor === Int32Array) {
      this._pViewFormats = value;
      this.memoryViewBigInt64[0x3] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pViewFormats = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkImageFormatListCreateInfoKHR.pViewFormats': Expected 'Int32Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkImageFormatListCreateInfoKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkImageFormatListCreateInfoKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkImageFormatListCreateInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkImageFormatListCreateInfoKHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkImageFormatListCreateInfoKHR.byteLength = 0x20;

VkImageFormatListCreateInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  viewFormatCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pViewFormats: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkValidationCacheCreateInfoEXT **/
class VkValidationCacheCreateInfoEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x28);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    this._pInitialData = null;
    this.sType = 0x3B9D3B00;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.initialDataSize !== void 0) this.initialDataSize = opts.initialDataSize;
      if (opts.pInitialData !== void 0) this.pInitialData = opts.pInitialData;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkValidationCacheCreateInfoEXT.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get initialDataSize() {
    return this.memoryViewBigInt64[0x3];
  }
  set initialDataSize(value) {
    this.memoryViewBigInt64[0x3] = value;
  }
  get pInitialData() {
    return this._pInitialData;
  }
  set pInitialData(value) {
    if (value !== null && value.constructor === ArrayBuffer) {
      this._pInitialData = value;
      this.memoryViewBigInt64[0x4] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pInitialData = null;
      this.memoryViewBigInt64[0x4] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkValidationCacheCreateInfoEXT.pInitialData': Expected 'ArrayBuffer' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkValidationCacheCreateInfoEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkValidationCacheCreateInfoEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkValidationCacheCreateInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x28);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkValidationCacheCreateInfoEXT"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkValidationCacheCreateInfoEXT.byteLength = 0x28;

VkValidationCacheCreateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  initialDataSize: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  pInitialData: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
});
/** VkShaderModuleValidationCacheCreateInfoEXT **/
class VkShaderModuleValidationCacheCreateInfoEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    this._validationCache = null;
    this.sType = 0x3B9D3B01;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.validationCache !== void 0) this.validationCache = opts.validationCache;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkShaderModuleValidationCacheCreateInfoEXT.pNext' isn't allowed to be filled");
  }
  get validationCache() {
    return this._validationCache;
  }
  set validationCache(value) {
    if (value !== null && value.constructor === VkValidationCacheEXT) {
      
      this._validationCache = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._validationCache = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkShaderModuleValidationCacheCreateInfoEXT.validationCache': Expected 'VkValidationCacheEXT' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkShaderModuleValidationCacheCreateInfoEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkShaderModuleValidationCacheCreateInfoEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkShaderModuleValidationCacheCreateInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkShaderModuleValidationCacheCreateInfoEXT"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkShaderModuleValidationCacheCreateInfoEXT.byteLength = 0x18;

VkShaderModuleValidationCacheCreateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  validationCache: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
});
/** VkPhysicalDeviceMaintenance3Properties **/
class VkPhysicalDeviceMaintenance3Properties {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
    this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    
    
    this.sType = 0x3B9D5A40;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceMaintenance3Properties.pNext' isn't allowed to be filled");
  }
  get maxPerSetDescriptors() {
    return this.memoryViewUint32[0x4];
  }
  get maxMemoryAllocationSize() {
    return this.memoryViewBigUint64[0x3];
  }
  
};

VkPhysicalDeviceMaintenance3Properties.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceMaintenance3Properties"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceMaintenance3Properties.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceMaintenance3Properties"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x20), 0x0);
  
  
};

VkPhysicalDeviceMaintenance3Properties.byteLength = 0x20;

VkPhysicalDeviceMaintenance3Properties.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  maxPerSetDescriptors: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  maxMemoryAllocationSize: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkPhysicalDeviceMaintenance3PropertiesKHR **/
class VkPhysicalDeviceMaintenance3PropertiesKHR {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
    this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    
    
    this.sType = 0x3B9D5A40;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceMaintenance3PropertiesKHR.pNext' isn't allowed to be filled");
  }
  get maxPerSetDescriptors() {
    return this.memoryViewUint32[0x4];
  }
  get maxMemoryAllocationSize() {
    return this.memoryViewBigUint64[0x3];
  }
  
};

VkPhysicalDeviceMaintenance3PropertiesKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceMaintenance3PropertiesKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceMaintenance3PropertiesKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceMaintenance3PropertiesKHR"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x20), 0x0);
  
  
};

VkPhysicalDeviceMaintenance3PropertiesKHR.byteLength = 0x20;

VkPhysicalDeviceMaintenance3PropertiesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  maxPerSetDescriptors: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  maxMemoryAllocationSize: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkDescriptorSetLayoutSupport **/
class VkDescriptorSetLayoutSupport {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    
    this.sType = 0x3B9D5A41;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null && (value instanceof Object)) {
      let {sType} = value;
      if (sType <= -1) throw new TypeError("Invalid type for 'VkDescriptorSetLayoutSupport.pNext'");
      switch (sType) {
          
        case 0x3B9D3EEC:
          break;
        default:
          throw new TypeError("Invalid type for 'VkDescriptorSetLayoutSupport.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkDescriptorSetLayoutSupport.pNext'");
    }
  }
  get supported() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  
};

VkDescriptorSetLayoutSupport.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDescriptorSetLayoutSupport"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDescriptorSetLayoutSupport.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDescriptorSetLayoutSupport"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x18), 0x0);
  
  
};

VkDescriptorSetLayoutSupport.byteLength = 0x18;

VkDescriptorSetLayoutSupport.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  supported: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkDescriptorSetLayoutSupportKHR **/
class VkDescriptorSetLayoutSupportKHR {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    
    this.sType = 0x3B9D5A41;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null && (value instanceof Object)) {
      let {sType} = value;
      if (sType <= -1) throw new TypeError("Invalid type for 'VkDescriptorSetLayoutSupportKHR.pNext'");
      switch (sType) {
          
        case 0x3B9D3EEC:
          break;
        default:
          throw new TypeError("Invalid type for 'VkDescriptorSetLayoutSupportKHR.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkDescriptorSetLayoutSupportKHR.pNext'");
    }
  }
  get supported() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  
};

VkDescriptorSetLayoutSupportKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDescriptorSetLayoutSupportKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDescriptorSetLayoutSupportKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDescriptorSetLayoutSupportKHR"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x18), 0x0);
  
  
};

VkDescriptorSetLayoutSupportKHR.byteLength = 0x18;

VkDescriptorSetLayoutSupportKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  supported: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceShaderDrawParameterFeatures **/
class VkPhysicalDeviceShaderDrawParameterFeatures {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.shaderDrawParameters !== void 0) this.shaderDrawParameters = opts.shaderDrawParameters;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceShaderDrawParameterFeatures.pNext' isn't allowed to be filled");
  }
  get shaderDrawParameters() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set shaderDrawParameters(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  
};

VkPhysicalDeviceShaderDrawParameterFeatures.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceShaderDrawParameterFeatures"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceShaderDrawParameterFeatures.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceShaderDrawParameterFeatures"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPhysicalDeviceShaderDrawParameterFeatures.byteLength = 0x18;

VkPhysicalDeviceShaderDrawParameterFeatures.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  shaderDrawParameters: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceFloat16Int8FeaturesKHR **/
class VkPhysicalDeviceFloat16Int8FeaturesKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    this.sType = 0x3B9C0A50;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.shaderFloat16 !== void 0) this.shaderFloat16 = opts.shaderFloat16;
      if (opts.shaderInt8 !== void 0) this.shaderInt8 = opts.shaderInt8;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceFloat16Int8FeaturesKHR.pNext' isn't allowed to be filled");
  }
  get shaderFloat16() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set shaderFloat16(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  get shaderInt8() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  set shaderInt8(value) {
    this.memoryViewUint32[0x5] = value | 0;
  }
  
};

VkPhysicalDeviceFloat16Int8FeaturesKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceFloat16Int8FeaturesKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceFloat16Int8FeaturesKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceFloat16Int8FeaturesKHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPhysicalDeviceFloat16Int8FeaturesKHR.byteLength = 0x18;

VkPhysicalDeviceFloat16Int8FeaturesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  shaderFloat16: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  shaderInt8: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceFloatControlsPropertiesKHR **/
class VkPhysicalDeviceFloatControlsPropertiesKHR {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x58);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x58) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x58) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x58) / 0x4);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    this.sType = 0x3B9DCB88;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceFloatControlsPropertiesKHR.pNext' isn't allowed to be filled");
  }
  get separateDenormSettings() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  get separateRoundingModeSettings() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  get shaderSignedZeroInfNanPreserveFloat16() {
    return this.memoryViewUint32[0x6] !== 0;
  }
  get shaderSignedZeroInfNanPreserveFloat32() {
    return this.memoryViewUint32[0x7] !== 0;
  }
  get shaderSignedZeroInfNanPreserveFloat64() {
    return this.memoryViewUint32[0x8] !== 0;
  }
  get shaderDenormPreserveFloat16() {
    return this.memoryViewUint32[0x9] !== 0;
  }
  get shaderDenormPreserveFloat32() {
    return this.memoryViewUint32[0xA] !== 0;
  }
  get shaderDenormPreserveFloat64() {
    return this.memoryViewUint32[0xB] !== 0;
  }
  get shaderDenormFlushToZeroFloat16() {
    return this.memoryViewUint32[0xC] !== 0;
  }
  get shaderDenormFlushToZeroFloat32() {
    return this.memoryViewUint32[0xD] !== 0;
  }
  get shaderDenormFlushToZeroFloat64() {
    return this.memoryViewUint32[0xE] !== 0;
  }
  get shaderRoundingModeRTEFloat16() {
    return this.memoryViewUint32[0xF] !== 0;
  }
  get shaderRoundingModeRTEFloat32() {
    return this.memoryViewUint32[0x10] !== 0;
  }
  get shaderRoundingModeRTEFloat64() {
    return this.memoryViewUint32[0x11] !== 0;
  }
  get shaderRoundingModeRTZFloat16() {
    return this.memoryViewUint32[0x12] !== 0;
  }
  get shaderRoundingModeRTZFloat32() {
    return this.memoryViewUint32[0x13] !== 0;
  }
  get shaderRoundingModeRTZFloat64() {
    return this.memoryViewUint32[0x14] !== 0;
  }
  
};

VkPhysicalDeviceFloatControlsPropertiesKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceFloatControlsPropertiesKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceFloatControlsPropertiesKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x58);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceFloatControlsPropertiesKHR"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x58), 0x0);
  
  
};

VkPhysicalDeviceFloatControlsPropertiesKHR.byteLength = 0x58;

VkPhysicalDeviceFloatControlsPropertiesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  separateDenormSettings: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  separateRoundingModeSettings: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  shaderSignedZeroInfNanPreserveFloat16: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  shaderSignedZeroInfNanPreserveFloat32: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  shaderSignedZeroInfNanPreserveFloat64: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  shaderDenormPreserveFloat16: Object.freeze({
    byteOffset: 0x24,
    byteLength: 0x4
  }),
  shaderDenormPreserveFloat32: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x4
  }),
  shaderDenormPreserveFloat64: Object.freeze({
    byteOffset: 0x2C,
    byteLength: 0x4
  }),
  shaderDenormFlushToZeroFloat16: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  shaderDenormFlushToZeroFloat32: Object.freeze({
    byteOffset: 0x34,
    byteLength: 0x4
  }),
  shaderDenormFlushToZeroFloat64: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x4
  }),
  shaderRoundingModeRTEFloat16: Object.freeze({
    byteOffset: 0x3C,
    byteLength: 0x4
  }),
  shaderRoundingModeRTEFloat32: Object.freeze({
    byteOffset: 0x40,
    byteLength: 0x4
  }),
  shaderRoundingModeRTEFloat64: Object.freeze({
    byteOffset: 0x44,
    byteLength: 0x4
  }),
  shaderRoundingModeRTZFloat16: Object.freeze({
    byteOffset: 0x48,
    byteLength: 0x4
  }),
  shaderRoundingModeRTZFloat32: Object.freeze({
    byteOffset: 0x4C,
    byteLength: 0x4
  }),
  shaderRoundingModeRTZFloat64: Object.freeze({
    byteOffset: 0x50,
    byteLength: 0x4
  }),
});
/** VkShaderResourceUsageAMD **/
class VkShaderResourceUsageAMD {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x20);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    
    
    
    
    
    if (typeof opts === "object") {
      
    }
  }
  get numUsedVgprs() {
    return this.memoryViewUint32[0x0];
  }
  get numUsedSgprs() {
    return this.memoryViewUint32[0x1];
  }
  get ldsSizePerLocalWorkGroup() {
    return this.memoryViewUint32[0x2];
  }
  get ldsUsageSizeInBytes() {
    return this.memoryViewBigInt64[0x2];
  }
  get scratchMemUsageInBytes() {
    return this.memoryViewBigInt64[0x3];
  }
  
};

VkShaderResourceUsageAMD.prototype.flush = function flush() {
  //console.log(`Flushing: "VkShaderResourceUsageAMD"`);
  
  return true;
};

VkShaderResourceUsageAMD.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkShaderResourceUsageAMD"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x20), 0x0);
};

VkShaderResourceUsageAMD.byteLength = 0x20;

VkShaderResourceUsageAMD.memoryLayout = Object.freeze({
  numUsedVgprs: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  numUsedSgprs: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  ldsSizePerLocalWorkGroup: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
  ldsUsageSizeInBytes: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  scratchMemUsageInBytes: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkShaderStatisticsInfoAMD **/
class VkShaderStatisticsInfoAMD {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x48);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x48) / 0x4);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x48) / 0x4);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._resourceUsage = new VkShaderResourceUsageAMD({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x8 });
    
    
    
    
    this._computeWorkGroupSize = [...Array(3)].fill(0x0);
    
    if (typeof opts === "object") {
      
    }
  }
  get shaderStageMask() {
    return this.memoryViewInt32[0x0];
  }
  get resourceUsage() {
    return this._resourceUsage;
  }
  get numPhysicalVgprs() {
    return this.memoryViewUint32[0xA];
  }
  get numPhysicalSgprs() {
    return this.memoryViewUint32[0xB];
  }
  get numAvailableVgprs() {
    return this.memoryViewUint32[0xC];
  }
  get numAvailableSgprs() {
    return this.memoryViewUint32[0xD];
  }
  get computeWorkGroupSize() {
    return [
      this.memoryViewUint32[0xE],
      this.memoryViewUint32[0xF],
      this.memoryViewUint32[0x10]
    ];
  }
  
};

VkShaderStatisticsInfoAMD.prototype.flush = function flush() {
  //console.log(`Flushing: "VkShaderStatisticsInfoAMD"`);
  
  return true;
};

VkShaderStatisticsInfoAMD.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x48);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkShaderStatisticsInfoAMD"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x48), 0x0);
  
  
  
  
};

VkShaderStatisticsInfoAMD.byteLength = 0x48;

VkShaderStatisticsInfoAMD.memoryLayout = Object.freeze({
  shaderStageMask: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  resourceUsage: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x20
  }),
  numPhysicalVgprs: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x4
  }),
  numPhysicalSgprs: Object.freeze({
    byteOffset: 0x2C,
    byteLength: 0x4
  }),
  numAvailableVgprs: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  numAvailableSgprs: Object.freeze({
    byteOffset: 0x34,
    byteLength: 0x4
  }),
  computeWorkGroupSize: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0xC
  }),
});
/** VkDeviceQueueGlobalPriorityCreateInfoEXT **/
class VkDeviceQueueGlobalPriorityCreateInfoEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = 0x3B9D71B0;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.globalPriority !== void 0) this.globalPriority = opts.globalPriority;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDeviceQueueGlobalPriorityCreateInfoEXT.pNext' isn't allowed to be filled");
  }
  get globalPriority() {
    return this.memoryViewInt32[0x4];
  }
  set globalPriority(value) {
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkDeviceQueueGlobalPriorityCreateInfoEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDeviceQueueGlobalPriorityCreateInfoEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDeviceQueueGlobalPriorityCreateInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDeviceQueueGlobalPriorityCreateInfoEXT"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkDeviceQueueGlobalPriorityCreateInfoEXT.byteLength = 0x18;

VkDeviceQueueGlobalPriorityCreateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  globalPriority: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkDebugUtilsObjectNameInfoEXT **/
class VkDebugUtilsObjectNameInfoEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x28);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    this._pObjectName = null;
    this.sType = 0x3B9CBE00;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.objectType !== void 0) this.objectType = opts.objectType;
      if (opts.objectHandle !== void 0) this.objectHandle = opts.objectHandle;
      if (opts.pObjectName !== void 0) this.pObjectName = opts.pObjectName;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDebugUtilsObjectNameInfoEXT.pNext' isn't allowed to be filled");
  }
  get objectType() {
    return this.memoryViewInt32[0x4];
  }
  set objectType(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get objectHandle() {
    return this.memoryViewBigUint64[0x3];
  }
  set objectHandle(value) {
    this.memoryViewBigUint64[0x3] = value;
  }
  get pObjectName() {
    if (this._pObjectName !== null) {
      let str = textDecoder.decode(this._pObjectName);
      return str.substr(0, str.length - 1);
    } else {
      return null;
    }
  }
  set pObjectName(value) {
    if (value !== null && value.constructor === String) {
      this._pObjectName = textEncoder.encode(value + NULLT).buffer;
      this.memoryViewBigInt64[0x4] = getAddressFromArrayBuffer(this._pObjectName);
    } else if (value === null) {
      this._pObjectName = null;
      this.memoryViewBigInt64[0x4] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkDebugUtilsObjectNameInfoEXT.pObjectName': Expected 'String' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkDebugUtilsObjectNameInfoEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDebugUtilsObjectNameInfoEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDebugUtilsObjectNameInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x28);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDebugUtilsObjectNameInfoEXT"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkDebugUtilsObjectNameInfoEXT.byteLength = 0x28;

VkDebugUtilsObjectNameInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  objectType: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  objectHandle: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  pObjectName: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
});
/** VkDebugUtilsObjectTagInfoEXT **/
class VkDebugUtilsObjectTagInfoEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x38);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    
    
    this._pTag = null;
    this.sType = 0x3B9CBE01;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.objectType !== void 0) this.objectType = opts.objectType;
      if (opts.objectHandle !== void 0) this.objectHandle = opts.objectHandle;
      if (opts.tagName !== void 0) this.tagName = opts.tagName;
      if (opts.tagSize !== void 0) this.tagSize = opts.tagSize;
      if (opts.pTag !== void 0) this.pTag = opts.pTag;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDebugUtilsObjectTagInfoEXT.pNext' isn't allowed to be filled");
  }
  get objectType() {
    return this.memoryViewInt32[0x4];
  }
  set objectType(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get objectHandle() {
    return this.memoryViewBigUint64[0x3];
  }
  set objectHandle(value) {
    this.memoryViewBigUint64[0x3] = value;
  }
  get tagName() {
    return this.memoryViewBigUint64[0x4];
  }
  set tagName(value) {
    this.memoryViewBigUint64[0x4] = value;
  }
  get tagSize() {
    return this.memoryViewBigInt64[0x5];
  }
  set tagSize(value) {
    this.memoryViewBigInt64[0x5] = value;
  }
  get pTag() {
    return this._pTag;
  }
  set pTag(value) {
    if (value !== null && value.constructor === ArrayBuffer) {
      this._pTag = value;
      this.memoryViewBigInt64[0x6] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pTag = null;
      this.memoryViewBigInt64[0x6] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkDebugUtilsObjectTagInfoEXT.pTag': Expected 'ArrayBuffer' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkDebugUtilsObjectTagInfoEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDebugUtilsObjectTagInfoEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDebugUtilsObjectTagInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x38);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDebugUtilsObjectTagInfoEXT"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkDebugUtilsObjectTagInfoEXT.byteLength = 0x38;

VkDebugUtilsObjectTagInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  objectType: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  objectHandle: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  tagName: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
  tagSize: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
  pTag: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x8
  }),
});
/** VkDebugUtilsLabelEXT **/
class VkDebugUtilsLabelEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x28);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewFloat32 = new Float32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    this._pLabelName = null;
    this._color = [...Array(4)].fill(0x0);
    this.sType = 0x3B9CBE02;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.pLabelName !== void 0) this.pLabelName = opts.pLabelName;
      if (opts.color !== void 0) this.color = opts.color;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDebugUtilsLabelEXT.pNext' isn't allowed to be filled");
  }
  get pLabelName() {
    if (this._pLabelName !== null) {
      let str = textDecoder.decode(this._pLabelName);
      return str.substr(0, str.length - 1);
    } else {
      return null;
    }
  }
  set pLabelName(value) {
    if (value !== null && value.constructor === String) {
      this._pLabelName = textEncoder.encode(value + NULLT).buffer;
      this.memoryViewBigInt64[0x2] = getAddressFromArrayBuffer(this._pLabelName);
    } else if (value === null) {
      this._pLabelName = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkDebugUtilsLabelEXT.pLabelName': Expected 'String' but got '" + value.constructor.name + "'");
    }
  }
  get color() {
    return this._color;
  }
  set color(value) {
    if (value !== null && value.constructor === Array) {
      this._color = value;
    } else if (value === null) {
      this._color = null;
    } else {
      throw new TypeError("Invalid type for 'VkDebugUtilsLabelEXT.color': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkDebugUtilsLabelEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDebugUtilsLabelEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._color !== null) {
    let array = this._color;
    // validate length
    if (array.length !== 4) {
      throw new RangeError("Invalid array length, expected length of '4' for 'VkDebugUtilsLabelEXT.color'");
      return false;
    }
    // validate type
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== Number) {
        throw new TypeError("Invalid type for 'VkDebugUtilsLabelEXT.color[" + ii + "]': Expected 'Number' but got '" + array[ii].constructor.name + "'");
        return false;
      }
    };
    for (let ii = 0; ii < array.length; ++ii) {
      this.memoryViewFloat32[0x6] = array[ii];
    };
  } else {
    this.memoryViewFloat32[0x6] = 0x0;
  }
  
  return true;
};

VkDebugUtilsLabelEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x28);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDebugUtilsLabelEXT"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
};

VkDebugUtilsLabelEXT.byteLength = 0x28;

VkDebugUtilsLabelEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  pLabelName: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  color: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x10
  }),
});
/** VkDebugUtilsMessengerCreateInfoEXT **/
class VkDebugUtilsMessengerCreateInfoEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x30);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    
    this._pUserData = null;
    this.sType = 0x3B9CBE04;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.messageSeverity !== void 0) this.messageSeverity = opts.messageSeverity;
      if (opts.messageType !== void 0) this.messageType = opts.messageType;
      if (opts.pUserData !== void 0) this.pUserData = opts.pUserData;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDebugUtilsMessengerCreateInfoEXT.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get messageSeverity() {
    return this.memoryViewInt32[0x5];
  }
  set messageSeverity(value) {
    this.memoryViewInt32[0x5] = value;
  }
  get messageType() {
    return this.memoryViewInt32[0x6];
  }
  set messageType(value) {
    this.memoryViewInt32[0x6] = value;
  }
  get pUserData() {
    return this._pUserData;
  }
  set pUserData(value) {
    if (value !== null && value.constructor === ArrayBuffer) {
      this._pUserData = value;
      this.memoryViewBigInt64[0x5] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pUserData = null;
      this.memoryViewBigInt64[0x5] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkDebugUtilsMessengerCreateInfoEXT.pUserData': Expected 'ArrayBuffer' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkDebugUtilsMessengerCreateInfoEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDebugUtilsMessengerCreateInfoEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDebugUtilsMessengerCreateInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x30);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDebugUtilsMessengerCreateInfoEXT"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkDebugUtilsMessengerCreateInfoEXT.byteLength = 0x30;

VkDebugUtilsMessengerCreateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  messageSeverity: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  messageType: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  pUserData: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
});
/** VkDebugUtilsMessengerCallbackDataEXT **/
class VkDebugUtilsMessengerCallbackDataEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x60);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this._pMessageIdName = null;
    
    this._pMessage = null;
    
    this._pQueueLabels = null;
    this._pQueueLabelsNative = null;
    
    this._pCmdBufLabels = null;
    this._pCmdBufLabelsNative = null;
    
    this._pObjects = null;
    this._pObjectsNative = null;
    this.sType = 0x3B9CBE03;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.pMessageIdName !== void 0) this.pMessageIdName = opts.pMessageIdName;
      if (opts.messageIdNumber !== void 0) this.messageIdNumber = opts.messageIdNumber;
      if (opts.pMessage !== void 0) this.pMessage = opts.pMessage;
      if (opts.queueLabelCount !== void 0) this.queueLabelCount = opts.queueLabelCount;
      if (opts.pQueueLabels !== void 0) this.pQueueLabels = opts.pQueueLabels;
      if (opts.cmdBufLabelCount !== void 0) this.cmdBufLabelCount = opts.cmdBufLabelCount;
      if (opts.pCmdBufLabels !== void 0) this.pCmdBufLabels = opts.pCmdBufLabels;
      if (opts.objectCount !== void 0) this.objectCount = opts.objectCount;
      if (opts.pObjects !== void 0) this.pObjects = opts.pObjects;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDebugUtilsMessengerCallbackDataEXT.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get pMessageIdName() {
    if (this._pMessageIdName !== null) {
      let str = textDecoder.decode(this._pMessageIdName);
      return str.substr(0, str.length - 1);
    } else {
      return null;
    }
  }
  set pMessageIdName(value) {
    if (value !== null && value.constructor === String) {
      this._pMessageIdName = textEncoder.encode(value + NULLT).buffer;
      this.memoryViewBigInt64[0x3] = getAddressFromArrayBuffer(this._pMessageIdName);
    } else if (value === null) {
      this._pMessageIdName = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkDebugUtilsMessengerCallbackDataEXT.pMessageIdName': Expected 'String' but got '" + value.constructor.name + "'");
    }
  }
  get messageIdNumber() {
    return this.memoryViewInt32[0x8];
  }
  set messageIdNumber(value) {
    this.memoryViewInt32[0x8] = value;
  }
  get pMessage() {
    if (this._pMessage !== null) {
      let str = textDecoder.decode(this._pMessage);
      return str.substr(0, str.length - 1);
    } else {
      return null;
    }
  }
  set pMessage(value) {
    if (value !== null && value.constructor === String) {
      this._pMessage = textEncoder.encode(value + NULLT).buffer;
      this.memoryViewBigInt64[0x5] = getAddressFromArrayBuffer(this._pMessage);
    } else if (value === null) {
      this._pMessage = null;
      this.memoryViewBigInt64[0x5] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkDebugUtilsMessengerCallbackDataEXT.pMessage': Expected 'String' but got '" + value.constructor.name + "'");
    }
  }
  get queueLabelCount() {
    return this.memoryViewUint32[0xC];
  }
  set queueLabelCount(value) {
    this.memoryViewUint32[0xC] = value;
  }
  get pQueueLabels() {
    return this._pQueueLabels;
  }
  set pQueueLabels(value) {
    if (value !== null && value.constructor === Array) {
      this._pQueueLabels = value;
    } else if (value === null) {
      this._pQueueLabels = null;
    } else {
      throw new TypeError("Invalid type for 'VkDebugUtilsMessengerCallbackDataEXT.pQueueLabels': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get cmdBufLabelCount() {
    return this.memoryViewUint32[0x10];
  }
  set cmdBufLabelCount(value) {
    this.memoryViewUint32[0x10] = value;
  }
  get pCmdBufLabels() {
    return this._pCmdBufLabels;
  }
  set pCmdBufLabels(value) {
    if (value !== null && value.constructor === Array) {
      this._pCmdBufLabels = value;
    } else if (value === null) {
      this._pCmdBufLabels = null;
    } else {
      throw new TypeError("Invalid type for 'VkDebugUtilsMessengerCallbackDataEXT.pCmdBufLabels': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get objectCount() {
    return this.memoryViewUint32[0x14];
  }
  set objectCount(value) {
    this.memoryViewUint32[0x14] = value;
  }
  get pObjects() {
    return this._pObjects;
  }
  set pObjects(value) {
    if (value !== null && value.constructor === Array) {
      this._pObjects = value;
    } else if (value === null) {
      this._pObjects = null;
    } else {
      throw new TypeError("Invalid type for 'VkDebugUtilsMessengerCallbackDataEXT.pObjects': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkDebugUtilsMessengerCallbackDataEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDebugUtilsMessengerCallbackDataEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pQueueLabels !== null) {
    let array = this._pQueueLabels;
    if (array.length !== this.queueLabelCount) {
      throw new RangeError("Invalid array length, expected length of 'queueLabelCount' for 'VkDebugUtilsMessengerCallbackDataEXT.pQueueLabels'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkDebugUtilsLabelEXT) {
        throw new TypeError("Invalid type for 'VkDebugUtilsMessengerCallbackDataEXT.pQueueLabels[" + ii + "]': Expected 'VkDebugUtilsLabelEXT' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pQueueLabelsNative = nativeArray;
    this.memoryViewBigInt64[0x7] = nativeArray.address;
  }
  
  
  if (this._pCmdBufLabels !== null) {
    let array = this._pCmdBufLabels;
    if (array.length !== this.cmdBufLabelCount) {
      throw new RangeError("Invalid array length, expected length of 'cmdBufLabelCount' for 'VkDebugUtilsMessengerCallbackDataEXT.pCmdBufLabels'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkDebugUtilsLabelEXT) {
        throw new TypeError("Invalid type for 'VkDebugUtilsMessengerCallbackDataEXT.pCmdBufLabels[" + ii + "]': Expected 'VkDebugUtilsLabelEXT' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pCmdBufLabelsNative = nativeArray;
    this.memoryViewBigInt64[0x9] = nativeArray.address;
  }
  
  
  if (this._pObjects !== null) {
    let array = this._pObjects;
    if (array.length !== this.objectCount) {
      throw new RangeError("Invalid array length, expected length of 'objectCount' for 'VkDebugUtilsMessengerCallbackDataEXT.pObjects'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkDebugUtilsObjectNameInfoEXT) {
        throw new TypeError("Invalid type for 'VkDebugUtilsMessengerCallbackDataEXT.pObjects[" + ii + "]': Expected 'VkDebugUtilsObjectNameInfoEXT' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pObjectsNative = nativeArray;
    this.memoryViewBigInt64[0xB] = nativeArray.address;
  }
  
  return true;
};

VkDebugUtilsMessengerCallbackDataEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x60);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDebugUtilsMessengerCallbackDataEXT"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
  
  
  
  
};

VkDebugUtilsMessengerCallbackDataEXT.byteLength = 0x60;

VkDebugUtilsMessengerCallbackDataEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pMessageIdName: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  messageIdNumber: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  pMessage: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
  queueLabelCount: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  pQueueLabels: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x8
  }),
  cmdBufLabelCount: Object.freeze({
    byteOffset: 0x40,
    byteLength: 0x4
  }),
  pCmdBufLabels: Object.freeze({
    byteOffset: 0x48,
    byteLength: 0x8
  }),
  objectCount: Object.freeze({
    byteOffset: 0x50,
    byteLength: 0x4
  }),
  pObjects: Object.freeze({
    byteOffset: 0x58,
    byteLength: 0x8
  }),
});
/** VkImportMemoryHostPointerInfoEXT **/
class VkImportMemoryHostPointerInfoEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this._pHostPointer = null;
    this.sType = 0x3B9D8150;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      if (opts.pHostPointer !== void 0) this.pHostPointer = opts.pHostPointer;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkImportMemoryHostPointerInfoEXT.pNext' isn't allowed to be filled");
  }
  get handleType() {
    return this.memoryViewInt32[0x4];
  }
  set handleType(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get pHostPointer() {
    return this._pHostPointer;
  }
  set pHostPointer(value) {
    if (value !== null && value.constructor === ArrayBuffer) {
      this._pHostPointer = value;
      this.memoryViewBigInt64[0x3] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pHostPointer = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkImportMemoryHostPointerInfoEXT.pHostPointer': Expected 'ArrayBuffer' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkImportMemoryHostPointerInfoEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkImportMemoryHostPointerInfoEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkImportMemoryHostPointerInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkImportMemoryHostPointerInfoEXT"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkImportMemoryHostPointerInfoEXT.byteLength = 0x20;

VkImportMemoryHostPointerInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  handleType: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pHostPointer: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkMemoryHostPointerPropertiesEXT **/
class VkMemoryHostPointerPropertiesEXT {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    
    this.sType = 0x3B9D8151;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkMemoryHostPointerPropertiesEXT.pNext' isn't allowed to be filled");
  }
  get memoryTypeBits() {
    return this.memoryViewUint32[0x4];
  }
  
};

VkMemoryHostPointerPropertiesEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkMemoryHostPointerPropertiesEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkMemoryHostPointerPropertiesEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkMemoryHostPointerPropertiesEXT"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x18), 0x0);
  
  
};

VkMemoryHostPointerPropertiesEXT.byteLength = 0x18;

VkMemoryHostPointerPropertiesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  memoryTypeBits: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceExternalMemoryHostPropertiesEXT **/
class VkPhysicalDeviceExternalMemoryHostPropertiesEXT {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    
    this.sType = 0x3B9D8152;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceExternalMemoryHostPropertiesEXT.pNext' isn't allowed to be filled");
  }
  get minImportedHostPointerAlignment() {
    return this.memoryViewBigUint64[0x2];
  }
  
};

VkPhysicalDeviceExternalMemoryHostPropertiesEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceExternalMemoryHostPropertiesEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceExternalMemoryHostPropertiesEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceExternalMemoryHostPropertiesEXT"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x18), 0x0);
  
  
};

VkPhysicalDeviceExternalMemoryHostPropertiesEXT.byteLength = 0x18;

VkPhysicalDeviceExternalMemoryHostPropertiesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  minImportedHostPointerAlignment: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
});
/** VkPhysicalDeviceConservativeRasterizationPropertiesEXT **/
class VkPhysicalDeviceConservativeRasterizationPropertiesEXT {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x38);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewFloat32 = new Float32Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x38) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x38) / 0x8);
      this.memoryViewFloat32 = new Float32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x38) / 0x4);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x38) / 0x4);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    
    
    
    
    
    
    
    
    
    this.sType = 0x3B9C5488;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceConservativeRasterizationPropertiesEXT.pNext' isn't allowed to be filled");
  }
  get primitiveOverestimationSize() {
    return this.memoryViewFloat32[0x4];
  }
  get maxExtraPrimitiveOverestimationSize() {
    return this.memoryViewFloat32[0x5];
  }
  get extraPrimitiveOverestimationSizeGranularity() {
    return this.memoryViewFloat32[0x6];
  }
  get primitiveUnderestimation() {
    return this.memoryViewUint32[0x7] !== 0;
  }
  get conservativePointAndLineRasterization() {
    return this.memoryViewUint32[0x8] !== 0;
  }
  get degenerateTrianglesRasterized() {
    return this.memoryViewUint32[0x9] !== 0;
  }
  get degenerateLinesRasterized() {
    return this.memoryViewUint32[0xA] !== 0;
  }
  get fullyCoveredFragmentShaderInputVariable() {
    return this.memoryViewUint32[0xB] !== 0;
  }
  get conservativeRasterizationPostDepthCoverage() {
    return this.memoryViewUint32[0xC] !== 0;
  }
  
};

VkPhysicalDeviceConservativeRasterizationPropertiesEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceConservativeRasterizationPropertiesEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceConservativeRasterizationPropertiesEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x38);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceConservativeRasterizationPropertiesEXT"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x38), 0x0);
  
  
};

VkPhysicalDeviceConservativeRasterizationPropertiesEXT.byteLength = 0x38;

VkPhysicalDeviceConservativeRasterizationPropertiesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  primitiveOverestimationSize: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  maxExtraPrimitiveOverestimationSize: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  extraPrimitiveOverestimationSizeGranularity: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  primitiveUnderestimation: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  conservativePointAndLineRasterization: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  degenerateTrianglesRasterized: Object.freeze({
    byteOffset: 0x24,
    byteLength: 0x4
  }),
  degenerateLinesRasterized: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x4
  }),
  fullyCoveredFragmentShaderInputVariable: Object.freeze({
    byteOffset: 0x2C,
    byteLength: 0x4
  }),
  conservativeRasterizationPostDepthCoverage: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
});
/** VkCalibratedTimestampInfoEXT **/
class VkCalibratedTimestampInfoEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = 0x3B9D98C0;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.timeDomain !== void 0) this.timeDomain = opts.timeDomain;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkCalibratedTimestampInfoEXT.pNext' isn't allowed to be filled");
  }
  get timeDomain() {
    return this.memoryViewInt32[0x4];
  }
  set timeDomain(value) {
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkCalibratedTimestampInfoEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkCalibratedTimestampInfoEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkCalibratedTimestampInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkCalibratedTimestampInfoEXT"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkCalibratedTimestampInfoEXT.byteLength = 0x18;

VkCalibratedTimestampInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  timeDomain: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceShaderCorePropertiesAMD **/
class VkPhysicalDeviceShaderCorePropertiesAMD {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x48);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x48) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x48) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x48) / 0x4);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    this.sType = 0x3B9D9CA8;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceShaderCorePropertiesAMD.pNext' isn't allowed to be filled");
  }
  get shaderEngineCount() {
    return this.memoryViewUint32[0x4];
  }
  get shaderArraysPerEngineCount() {
    return this.memoryViewUint32[0x5];
  }
  get computeUnitsPerShaderArray() {
    return this.memoryViewUint32[0x6];
  }
  get simdPerComputeUnit() {
    return this.memoryViewUint32[0x7];
  }
  get wavefrontsPerSimd() {
    return this.memoryViewUint32[0x8];
  }
  get wavefrontSize() {
    return this.memoryViewUint32[0x9];
  }
  get sgprsPerSimd() {
    return this.memoryViewUint32[0xA];
  }
  get minSgprAllocation() {
    return this.memoryViewUint32[0xB];
  }
  get maxSgprAllocation() {
    return this.memoryViewUint32[0xC];
  }
  get sgprAllocationGranularity() {
    return this.memoryViewUint32[0xD];
  }
  get vgprsPerSimd() {
    return this.memoryViewUint32[0xE];
  }
  get minVgprAllocation() {
    return this.memoryViewUint32[0xF];
  }
  get maxVgprAllocation() {
    return this.memoryViewUint32[0x10];
  }
  get vgprAllocationGranularity() {
    return this.memoryViewUint32[0x11];
  }
  
};

VkPhysicalDeviceShaderCorePropertiesAMD.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceShaderCorePropertiesAMD"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceShaderCorePropertiesAMD.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x48);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceShaderCorePropertiesAMD"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x48), 0x0);
  
  
};

VkPhysicalDeviceShaderCorePropertiesAMD.byteLength = 0x48;

VkPhysicalDeviceShaderCorePropertiesAMD.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  shaderEngineCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  shaderArraysPerEngineCount: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  computeUnitsPerShaderArray: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  simdPerComputeUnit: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  wavefrontsPerSimd: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  wavefrontSize: Object.freeze({
    byteOffset: 0x24,
    byteLength: 0x4
  }),
  sgprsPerSimd: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x4
  }),
  minSgprAllocation: Object.freeze({
    byteOffset: 0x2C,
    byteLength: 0x4
  }),
  maxSgprAllocation: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  sgprAllocationGranularity: Object.freeze({
    byteOffset: 0x34,
    byteLength: 0x4
  }),
  vgprsPerSimd: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x4
  }),
  minVgprAllocation: Object.freeze({
    byteOffset: 0x3C,
    byteLength: 0x4
  }),
  maxVgprAllocation: Object.freeze({
    byteOffset: 0x40,
    byteLength: 0x4
  }),
  vgprAllocationGranularity: Object.freeze({
    byteOffset: 0x44,
    byteLength: 0x4
  }),
});
/** VkPipelineRasterizationConservativeStateCreateInfoEXT **/
class VkPipelineRasterizationConservativeStateCreateInfoEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewFloat32 = new Float32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    
    this.sType = 0x3B9C5489;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.conservativeRasterizationMode !== void 0) this.conservativeRasterizationMode = opts.conservativeRasterizationMode;
      if (opts.extraPrimitiveOverestimationSize !== void 0) this.extraPrimitiveOverestimationSize = opts.extraPrimitiveOverestimationSize;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPipelineRasterizationConservativeStateCreateInfoEXT.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get conservativeRasterizationMode() {
    return this.memoryViewInt32[0x5];
  }
  set conservativeRasterizationMode(value) {
    this.memoryViewInt32[0x5] = value;
  }
  get extraPrimitiveOverestimationSize() {
    return this.memoryViewFloat32[0x6];
  }
  set extraPrimitiveOverestimationSize(value) {
    this.memoryViewFloat32[0x6] = value;
  }
  
};

VkPipelineRasterizationConservativeStateCreateInfoEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPipelineRasterizationConservativeStateCreateInfoEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPipelineRasterizationConservativeStateCreateInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPipelineRasterizationConservativeStateCreateInfoEXT"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPipelineRasterizationConservativeStateCreateInfoEXT.byteLength = 0x20;

VkPipelineRasterizationConservativeStateCreateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  conservativeRasterizationMode: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  extraPrimitiveOverestimationSize: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceDescriptorIndexingFeaturesEXT **/
class VkPhysicalDeviceDescriptorIndexingFeaturesEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x60);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    this.sType = 0x3B9D3EE9;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.shaderInputAttachmentArrayDynamicIndexing !== void 0) this.shaderInputAttachmentArrayDynamicIndexing = opts.shaderInputAttachmentArrayDynamicIndexing;
      if (opts.shaderUniformTexelBufferArrayDynamicIndexing !== void 0) this.shaderUniformTexelBufferArrayDynamicIndexing = opts.shaderUniformTexelBufferArrayDynamicIndexing;
      if (opts.shaderStorageTexelBufferArrayDynamicIndexing !== void 0) this.shaderStorageTexelBufferArrayDynamicIndexing = opts.shaderStorageTexelBufferArrayDynamicIndexing;
      if (opts.shaderUniformBufferArrayNonUniformIndexing !== void 0) this.shaderUniformBufferArrayNonUniformIndexing = opts.shaderUniformBufferArrayNonUniformIndexing;
      if (opts.shaderSampledImageArrayNonUniformIndexing !== void 0) this.shaderSampledImageArrayNonUniformIndexing = opts.shaderSampledImageArrayNonUniformIndexing;
      if (opts.shaderStorageBufferArrayNonUniformIndexing !== void 0) this.shaderStorageBufferArrayNonUniformIndexing = opts.shaderStorageBufferArrayNonUniformIndexing;
      if (opts.shaderStorageImageArrayNonUniformIndexing !== void 0) this.shaderStorageImageArrayNonUniformIndexing = opts.shaderStorageImageArrayNonUniformIndexing;
      if (opts.shaderInputAttachmentArrayNonUniformIndexing !== void 0) this.shaderInputAttachmentArrayNonUniformIndexing = opts.shaderInputAttachmentArrayNonUniformIndexing;
      if (opts.shaderUniformTexelBufferArrayNonUniformIndexing !== void 0) this.shaderUniformTexelBufferArrayNonUniformIndexing = opts.shaderUniformTexelBufferArrayNonUniformIndexing;
      if (opts.shaderStorageTexelBufferArrayNonUniformIndexing !== void 0) this.shaderStorageTexelBufferArrayNonUniformIndexing = opts.shaderStorageTexelBufferArrayNonUniformIndexing;
      if (opts.descriptorBindingUniformBufferUpdateAfterBind !== void 0) this.descriptorBindingUniformBufferUpdateAfterBind = opts.descriptorBindingUniformBufferUpdateAfterBind;
      if (opts.descriptorBindingSampledImageUpdateAfterBind !== void 0) this.descriptorBindingSampledImageUpdateAfterBind = opts.descriptorBindingSampledImageUpdateAfterBind;
      if (opts.descriptorBindingStorageImageUpdateAfterBind !== void 0) this.descriptorBindingStorageImageUpdateAfterBind = opts.descriptorBindingStorageImageUpdateAfterBind;
      if (opts.descriptorBindingStorageBufferUpdateAfterBind !== void 0) this.descriptorBindingStorageBufferUpdateAfterBind = opts.descriptorBindingStorageBufferUpdateAfterBind;
      if (opts.descriptorBindingUniformTexelBufferUpdateAfterBind !== void 0) this.descriptorBindingUniformTexelBufferUpdateAfterBind = opts.descriptorBindingUniformTexelBufferUpdateAfterBind;
      if (opts.descriptorBindingStorageTexelBufferUpdateAfterBind !== void 0) this.descriptorBindingStorageTexelBufferUpdateAfterBind = opts.descriptorBindingStorageTexelBufferUpdateAfterBind;
      if (opts.descriptorBindingUpdateUnusedWhilePending !== void 0) this.descriptorBindingUpdateUnusedWhilePending = opts.descriptorBindingUpdateUnusedWhilePending;
      if (opts.descriptorBindingPartiallyBound !== void 0) this.descriptorBindingPartiallyBound = opts.descriptorBindingPartiallyBound;
      if (opts.descriptorBindingVariableDescriptorCount !== void 0) this.descriptorBindingVariableDescriptorCount = opts.descriptorBindingVariableDescriptorCount;
      if (opts.runtimeDescriptorArray !== void 0) this.runtimeDescriptorArray = opts.runtimeDescriptorArray;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceDescriptorIndexingFeaturesEXT.pNext' isn't allowed to be filled");
  }
  get shaderInputAttachmentArrayDynamicIndexing() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set shaderInputAttachmentArrayDynamicIndexing(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  get shaderUniformTexelBufferArrayDynamicIndexing() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  set shaderUniformTexelBufferArrayDynamicIndexing(value) {
    this.memoryViewUint32[0x5] = value | 0;
  }
  get shaderStorageTexelBufferArrayDynamicIndexing() {
    return this.memoryViewUint32[0x6] !== 0;
  }
  set shaderStorageTexelBufferArrayDynamicIndexing(value) {
    this.memoryViewUint32[0x6] = value | 0;
  }
  get shaderUniformBufferArrayNonUniformIndexing() {
    return this.memoryViewUint32[0x7] !== 0;
  }
  set shaderUniformBufferArrayNonUniformIndexing(value) {
    this.memoryViewUint32[0x7] = value | 0;
  }
  get shaderSampledImageArrayNonUniformIndexing() {
    return this.memoryViewUint32[0x8] !== 0;
  }
  set shaderSampledImageArrayNonUniformIndexing(value) {
    this.memoryViewUint32[0x8] = value | 0;
  }
  get shaderStorageBufferArrayNonUniformIndexing() {
    return this.memoryViewUint32[0x9] !== 0;
  }
  set shaderStorageBufferArrayNonUniformIndexing(value) {
    this.memoryViewUint32[0x9] = value | 0;
  }
  get shaderStorageImageArrayNonUniformIndexing() {
    return this.memoryViewUint32[0xA] !== 0;
  }
  set shaderStorageImageArrayNonUniformIndexing(value) {
    this.memoryViewUint32[0xA] = value | 0;
  }
  get shaderInputAttachmentArrayNonUniformIndexing() {
    return this.memoryViewUint32[0xB] !== 0;
  }
  set shaderInputAttachmentArrayNonUniformIndexing(value) {
    this.memoryViewUint32[0xB] = value | 0;
  }
  get shaderUniformTexelBufferArrayNonUniformIndexing() {
    return this.memoryViewUint32[0xC] !== 0;
  }
  set shaderUniformTexelBufferArrayNonUniformIndexing(value) {
    this.memoryViewUint32[0xC] = value | 0;
  }
  get shaderStorageTexelBufferArrayNonUniformIndexing() {
    return this.memoryViewUint32[0xD] !== 0;
  }
  set shaderStorageTexelBufferArrayNonUniformIndexing(value) {
    this.memoryViewUint32[0xD] = value | 0;
  }
  get descriptorBindingUniformBufferUpdateAfterBind() {
    return this.memoryViewUint32[0xE] !== 0;
  }
  set descriptorBindingUniformBufferUpdateAfterBind(value) {
    this.memoryViewUint32[0xE] = value | 0;
  }
  get descriptorBindingSampledImageUpdateAfterBind() {
    return this.memoryViewUint32[0xF] !== 0;
  }
  set descriptorBindingSampledImageUpdateAfterBind(value) {
    this.memoryViewUint32[0xF] = value | 0;
  }
  get descriptorBindingStorageImageUpdateAfterBind() {
    return this.memoryViewUint32[0x10] !== 0;
  }
  set descriptorBindingStorageImageUpdateAfterBind(value) {
    this.memoryViewUint32[0x10] = value | 0;
  }
  get descriptorBindingStorageBufferUpdateAfterBind() {
    return this.memoryViewUint32[0x11] !== 0;
  }
  set descriptorBindingStorageBufferUpdateAfterBind(value) {
    this.memoryViewUint32[0x11] = value | 0;
  }
  get descriptorBindingUniformTexelBufferUpdateAfterBind() {
    return this.memoryViewUint32[0x12] !== 0;
  }
  set descriptorBindingUniformTexelBufferUpdateAfterBind(value) {
    this.memoryViewUint32[0x12] = value | 0;
  }
  get descriptorBindingStorageTexelBufferUpdateAfterBind() {
    return this.memoryViewUint32[0x13] !== 0;
  }
  set descriptorBindingStorageTexelBufferUpdateAfterBind(value) {
    this.memoryViewUint32[0x13] = value | 0;
  }
  get descriptorBindingUpdateUnusedWhilePending() {
    return this.memoryViewUint32[0x14] !== 0;
  }
  set descriptorBindingUpdateUnusedWhilePending(value) {
    this.memoryViewUint32[0x14] = value | 0;
  }
  get descriptorBindingPartiallyBound() {
    return this.memoryViewUint32[0x15] !== 0;
  }
  set descriptorBindingPartiallyBound(value) {
    this.memoryViewUint32[0x15] = value | 0;
  }
  get descriptorBindingVariableDescriptorCount() {
    return this.memoryViewUint32[0x16] !== 0;
  }
  set descriptorBindingVariableDescriptorCount(value) {
    this.memoryViewUint32[0x16] = value | 0;
  }
  get runtimeDescriptorArray() {
    return this.memoryViewUint32[0x17] !== 0;
  }
  set runtimeDescriptorArray(value) {
    this.memoryViewUint32[0x17] = value | 0;
  }
  
};

VkPhysicalDeviceDescriptorIndexingFeaturesEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceDescriptorIndexingFeaturesEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceDescriptorIndexingFeaturesEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x60);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceDescriptorIndexingFeaturesEXT"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPhysicalDeviceDescriptorIndexingFeaturesEXT.byteLength = 0x60;

VkPhysicalDeviceDescriptorIndexingFeaturesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  shaderInputAttachmentArrayDynamicIndexing: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  shaderUniformTexelBufferArrayDynamicIndexing: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  shaderStorageTexelBufferArrayDynamicIndexing: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  shaderUniformBufferArrayNonUniformIndexing: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  shaderSampledImageArrayNonUniformIndexing: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  shaderStorageBufferArrayNonUniformIndexing: Object.freeze({
    byteOffset: 0x24,
    byteLength: 0x4
  }),
  shaderStorageImageArrayNonUniformIndexing: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x4
  }),
  shaderInputAttachmentArrayNonUniformIndexing: Object.freeze({
    byteOffset: 0x2C,
    byteLength: 0x4
  }),
  shaderUniformTexelBufferArrayNonUniformIndexing: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  shaderStorageTexelBufferArrayNonUniformIndexing: Object.freeze({
    byteOffset: 0x34,
    byteLength: 0x4
  }),
  descriptorBindingUniformBufferUpdateAfterBind: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x4
  }),
  descriptorBindingSampledImageUpdateAfterBind: Object.freeze({
    byteOffset: 0x3C,
    byteLength: 0x4
  }),
  descriptorBindingStorageImageUpdateAfterBind: Object.freeze({
    byteOffset: 0x40,
    byteLength: 0x4
  }),
  descriptorBindingStorageBufferUpdateAfterBind: Object.freeze({
    byteOffset: 0x44,
    byteLength: 0x4
  }),
  descriptorBindingUniformTexelBufferUpdateAfterBind: Object.freeze({
    byteOffset: 0x48,
    byteLength: 0x4
  }),
  descriptorBindingStorageTexelBufferUpdateAfterBind: Object.freeze({
    byteOffset: 0x4C,
    byteLength: 0x4
  }),
  descriptorBindingUpdateUnusedWhilePending: Object.freeze({
    byteOffset: 0x50,
    byteLength: 0x4
  }),
  descriptorBindingPartiallyBound: Object.freeze({
    byteOffset: 0x54,
    byteLength: 0x4
  }),
  descriptorBindingVariableDescriptorCount: Object.freeze({
    byteOffset: 0x58,
    byteLength: 0x4
  }),
  runtimeDescriptorArray: Object.freeze({
    byteOffset: 0x5C,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceDescriptorIndexingPropertiesEXT **/
class VkPhysicalDeviceDescriptorIndexingPropertiesEXT {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x70);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x70) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x70) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x70) / 0x4);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    this.sType = 0x3B9D3EEA;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceDescriptorIndexingPropertiesEXT.pNext' isn't allowed to be filled");
  }
  get maxUpdateAfterBindDescriptorsInAllPools() {
    return this.memoryViewUint32[0x4];
  }
  get shaderUniformBufferArrayNonUniformIndexingNative() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  get shaderSampledImageArrayNonUniformIndexingNative() {
    return this.memoryViewUint32[0x6] !== 0;
  }
  get shaderStorageBufferArrayNonUniformIndexingNative() {
    return this.memoryViewUint32[0x7] !== 0;
  }
  get shaderStorageImageArrayNonUniformIndexingNative() {
    return this.memoryViewUint32[0x8] !== 0;
  }
  get shaderInputAttachmentArrayNonUniformIndexingNative() {
    return this.memoryViewUint32[0x9] !== 0;
  }
  get robustBufferAccessUpdateAfterBind() {
    return this.memoryViewUint32[0xA] !== 0;
  }
  get quadDivergentImplicitLod() {
    return this.memoryViewUint32[0xB] !== 0;
  }
  get maxPerStageDescriptorUpdateAfterBindSamplers() {
    return this.memoryViewUint32[0xC];
  }
  get maxPerStageDescriptorUpdateAfterBindUniformBuffers() {
    return this.memoryViewUint32[0xD];
  }
  get maxPerStageDescriptorUpdateAfterBindStorageBuffers() {
    return this.memoryViewUint32[0xE];
  }
  get maxPerStageDescriptorUpdateAfterBindSampledImages() {
    return this.memoryViewUint32[0xF];
  }
  get maxPerStageDescriptorUpdateAfterBindStorageImages() {
    return this.memoryViewUint32[0x10];
  }
  get maxPerStageDescriptorUpdateAfterBindInputAttachments() {
    return this.memoryViewUint32[0x11];
  }
  get maxPerStageUpdateAfterBindResources() {
    return this.memoryViewUint32[0x12];
  }
  get maxDescriptorSetUpdateAfterBindSamplers() {
    return this.memoryViewUint32[0x13];
  }
  get maxDescriptorSetUpdateAfterBindUniformBuffers() {
    return this.memoryViewUint32[0x14];
  }
  get maxDescriptorSetUpdateAfterBindUniformBuffersDynamic() {
    return this.memoryViewUint32[0x15];
  }
  get maxDescriptorSetUpdateAfterBindStorageBuffers() {
    return this.memoryViewUint32[0x16];
  }
  get maxDescriptorSetUpdateAfterBindStorageBuffersDynamic() {
    return this.memoryViewUint32[0x17];
  }
  get maxDescriptorSetUpdateAfterBindSampledImages() {
    return this.memoryViewUint32[0x18];
  }
  get maxDescriptorSetUpdateAfterBindStorageImages() {
    return this.memoryViewUint32[0x19];
  }
  get maxDescriptorSetUpdateAfterBindInputAttachments() {
    return this.memoryViewUint32[0x1A];
  }
  
};

VkPhysicalDeviceDescriptorIndexingPropertiesEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceDescriptorIndexingPropertiesEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceDescriptorIndexingPropertiesEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x70);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceDescriptorIndexingPropertiesEXT"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x70), 0x0);
  
  
};

VkPhysicalDeviceDescriptorIndexingPropertiesEXT.byteLength = 0x70;

VkPhysicalDeviceDescriptorIndexingPropertiesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  maxUpdateAfterBindDescriptorsInAllPools: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  shaderUniformBufferArrayNonUniformIndexingNative: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  shaderSampledImageArrayNonUniformIndexingNative: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  shaderStorageBufferArrayNonUniformIndexingNative: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  shaderStorageImageArrayNonUniformIndexingNative: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  shaderInputAttachmentArrayNonUniformIndexingNative: Object.freeze({
    byteOffset: 0x24,
    byteLength: 0x4
  }),
  robustBufferAccessUpdateAfterBind: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x4
  }),
  quadDivergentImplicitLod: Object.freeze({
    byteOffset: 0x2C,
    byteLength: 0x4
  }),
  maxPerStageDescriptorUpdateAfterBindSamplers: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  maxPerStageDescriptorUpdateAfterBindUniformBuffers: Object.freeze({
    byteOffset: 0x34,
    byteLength: 0x4
  }),
  maxPerStageDescriptorUpdateAfterBindStorageBuffers: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x4
  }),
  maxPerStageDescriptorUpdateAfterBindSampledImages: Object.freeze({
    byteOffset: 0x3C,
    byteLength: 0x4
  }),
  maxPerStageDescriptorUpdateAfterBindStorageImages: Object.freeze({
    byteOffset: 0x40,
    byteLength: 0x4
  }),
  maxPerStageDescriptorUpdateAfterBindInputAttachments: Object.freeze({
    byteOffset: 0x44,
    byteLength: 0x4
  }),
  maxPerStageUpdateAfterBindResources: Object.freeze({
    byteOffset: 0x48,
    byteLength: 0x4
  }),
  maxDescriptorSetUpdateAfterBindSamplers: Object.freeze({
    byteOffset: 0x4C,
    byteLength: 0x4
  }),
  maxDescriptorSetUpdateAfterBindUniformBuffers: Object.freeze({
    byteOffset: 0x50,
    byteLength: 0x4
  }),
  maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: Object.freeze({
    byteOffset: 0x54,
    byteLength: 0x4
  }),
  maxDescriptorSetUpdateAfterBindStorageBuffers: Object.freeze({
    byteOffset: 0x58,
    byteLength: 0x4
  }),
  maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: Object.freeze({
    byteOffset: 0x5C,
    byteLength: 0x4
  }),
  maxDescriptorSetUpdateAfterBindSampledImages: Object.freeze({
    byteOffset: 0x60,
    byteLength: 0x4
  }),
  maxDescriptorSetUpdateAfterBindStorageImages: Object.freeze({
    byteOffset: 0x64,
    byteLength: 0x4
  }),
  maxDescriptorSetUpdateAfterBindInputAttachments: Object.freeze({
    byteOffset: 0x68,
    byteLength: 0x4
  }),
});
/** VkDescriptorSetLayoutBindingFlagsCreateInfoEXT **/
class VkDescriptorSetLayoutBindingFlagsCreateInfoEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this._pBindingFlags = null;
    this.sType = 0x3B9D3EE8;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.bindingCount !== void 0) this.bindingCount = opts.bindingCount;
      if (opts.pBindingFlags !== void 0) this.pBindingFlags = opts.pBindingFlags;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDescriptorSetLayoutBindingFlagsCreateInfoEXT.pNext' isn't allowed to be filled");
  }
  get bindingCount() {
    return this.memoryViewUint32[0x4];
  }
  set bindingCount(value) {
    this.memoryViewUint32[0x4] = value;
  }
  get pBindingFlags() {
    return this._pBindingFlags;
  }
  set pBindingFlags(value) {
    if (value !== null && value.constructor === Int32Array) {
      this._pBindingFlags = value;
      this.memoryViewBigInt64[0x3] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pBindingFlags = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkDescriptorSetLayoutBindingFlagsCreateInfoEXT.pBindingFlags': Expected 'Int32Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkDescriptorSetLayoutBindingFlagsCreateInfoEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDescriptorSetLayoutBindingFlagsCreateInfoEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDescriptorSetLayoutBindingFlagsCreateInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDescriptorSetLayoutBindingFlagsCreateInfoEXT"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkDescriptorSetLayoutBindingFlagsCreateInfoEXT.byteLength = 0x20;

VkDescriptorSetLayoutBindingFlagsCreateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  bindingCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pBindingFlags: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkDescriptorSetVariableDescriptorCountAllocateInfoEXT **/
class VkDescriptorSetVariableDescriptorCountAllocateInfoEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this._pDescriptorCounts = null;
    this.sType = 0x3B9D3EEB;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.descriptorSetCount !== void 0) this.descriptorSetCount = opts.descriptorSetCount;
      if (opts.pDescriptorCounts !== void 0) this.pDescriptorCounts = opts.pDescriptorCounts;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDescriptorSetVariableDescriptorCountAllocateInfoEXT.pNext' isn't allowed to be filled");
  }
  get descriptorSetCount() {
    return this.memoryViewUint32[0x4];
  }
  set descriptorSetCount(value) {
    this.memoryViewUint32[0x4] = value;
  }
  get pDescriptorCounts() {
    return this._pDescriptorCounts;
  }
  set pDescriptorCounts(value) {
    if (value !== null && value.constructor === Uint32Array) {
      this._pDescriptorCounts = value;
      this.memoryViewBigInt64[0x3] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pDescriptorCounts = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkDescriptorSetVariableDescriptorCountAllocateInfoEXT.pDescriptorCounts': Expected 'Uint32Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkDescriptorSetVariableDescriptorCountAllocateInfoEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDescriptorSetVariableDescriptorCountAllocateInfoEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDescriptorSetVariableDescriptorCountAllocateInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDescriptorSetVariableDescriptorCountAllocateInfoEXT"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkDescriptorSetVariableDescriptorCountAllocateInfoEXT.byteLength = 0x20;

VkDescriptorSetVariableDescriptorCountAllocateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  descriptorSetCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pDescriptorCounts: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkDescriptorSetVariableDescriptorCountLayoutSupportEXT **/
class VkDescriptorSetVariableDescriptorCountLayoutSupportEXT {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    
    this.sType = 0x3B9D3EEC;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDescriptorSetVariableDescriptorCountLayoutSupportEXT.pNext' isn't allowed to be filled");
  }
  get maxVariableDescriptorCount() {
    return this.memoryViewUint32[0x4];
  }
  
};

VkDescriptorSetVariableDescriptorCountLayoutSupportEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDescriptorSetVariableDescriptorCountLayoutSupportEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDescriptorSetVariableDescriptorCountLayoutSupportEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDescriptorSetVariableDescriptorCountLayoutSupportEXT"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x18), 0x0);
  
  
};

VkDescriptorSetVariableDescriptorCountLayoutSupportEXT.byteLength = 0x18;

VkDescriptorSetVariableDescriptorCountLayoutSupportEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  maxVariableDescriptorCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkAttachmentDescription2KHR **/
class VkAttachmentDescription2KHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x38);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    
    
    
    
    
    
    
    this.sType = 0x3B9C73C8;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.format !== void 0) this.format = opts.format;
      if (opts.samples !== void 0) this.samples = opts.samples;
      if (opts.loadOp !== void 0) this.loadOp = opts.loadOp;
      if (opts.storeOp !== void 0) this.storeOp = opts.storeOp;
      if (opts.stencilLoadOp !== void 0) this.stencilLoadOp = opts.stencilLoadOp;
      if (opts.stencilStoreOp !== void 0) this.stencilStoreOp = opts.stencilStoreOp;
      if (opts.initialLayout !== void 0) this.initialLayout = opts.initialLayout;
      if (opts.finalLayout !== void 0) this.finalLayout = opts.finalLayout;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkAttachmentDescription2KHR.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get format() {
    return this.memoryViewInt32[0x5];
  }
  set format(value) {
    this.memoryViewInt32[0x5] = value;
  }
  get samples() {
    return this.memoryViewInt32[0x6];
  }
  set samples(value) {
    this.memoryViewInt32[0x6] = value;
  }
  get loadOp() {
    return this.memoryViewInt32[0x7];
  }
  set loadOp(value) {
    this.memoryViewInt32[0x7] = value;
  }
  get storeOp() {
    return this.memoryViewInt32[0x8];
  }
  set storeOp(value) {
    this.memoryViewInt32[0x8] = value;
  }
  get stencilLoadOp() {
    return this.memoryViewInt32[0x9];
  }
  set stencilLoadOp(value) {
    this.memoryViewInt32[0x9] = value;
  }
  get stencilStoreOp() {
    return this.memoryViewInt32[0xA];
  }
  set stencilStoreOp(value) {
    this.memoryViewInt32[0xA] = value;
  }
  get initialLayout() {
    return this.memoryViewInt32[0xB];
  }
  set initialLayout(value) {
    this.memoryViewInt32[0xB] = value;
  }
  get finalLayout() {
    return this.memoryViewInt32[0xC];
  }
  set finalLayout(value) {
    this.memoryViewInt32[0xC] = value;
  }
  
};

VkAttachmentDescription2KHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkAttachmentDescription2KHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkAttachmentDescription2KHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x38);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkAttachmentDescription2KHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkAttachmentDescription2KHR.byteLength = 0x38;

VkAttachmentDescription2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  format: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  samples: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  loadOp: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  storeOp: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  stencilLoadOp: Object.freeze({
    byteOffset: 0x24,
    byteLength: 0x4
  }),
  stencilStoreOp: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x4
  }),
  initialLayout: Object.freeze({
    byteOffset: 0x2C,
    byteLength: 0x4
  }),
  finalLayout: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
});
/** VkAttachmentReference2KHR **/
class VkAttachmentReference2KHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    
    this.sType = 0x3B9C73C9;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.attachment !== void 0) this.attachment = opts.attachment;
      if (opts.layout !== void 0) this.layout = opts.layout;
      if (opts.aspectMask !== void 0) this.aspectMask = opts.aspectMask;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkAttachmentReference2KHR.pNext' isn't allowed to be filled");
  }
  get attachment() {
    return this.memoryViewUint32[0x4];
  }
  set attachment(value) {
    this.memoryViewUint32[0x4] = value;
  }
  get layout() {
    return this.memoryViewInt32[0x5];
  }
  set layout(value) {
    this.memoryViewInt32[0x5] = value;
  }
  get aspectMask() {
    return this.memoryViewInt32[0x6];
  }
  set aspectMask(value) {
    this.memoryViewInt32[0x6] = value;
  }
  
};

VkAttachmentReference2KHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkAttachmentReference2KHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkAttachmentReference2KHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkAttachmentReference2KHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkAttachmentReference2KHR.byteLength = 0x20;

VkAttachmentReference2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  attachment: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  layout: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  aspectMask: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
});
/** VkSubpassDescription2KHR **/
class VkSubpassDescription2KHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x58);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    
    
    this._pInputAttachments = null;
    this._pInputAttachmentsNative = null;
    
    this._pColorAttachments = null;
    this._pColorAttachmentsNative = null;
    this._pResolveAttachments = null;
    this._pResolveAttachmentsNative = null;
    this._pDepthStencilAttachment = null;
    
    this._pPreserveAttachments = null;
    this.sType = 0x3B9C73CA;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.pipelineBindPoint !== void 0) this.pipelineBindPoint = opts.pipelineBindPoint;
      if (opts.viewMask !== void 0) this.viewMask = opts.viewMask;
      if (opts.inputAttachmentCount !== void 0) this.inputAttachmentCount = opts.inputAttachmentCount;
      if (opts.pInputAttachments !== void 0) this.pInputAttachments = opts.pInputAttachments;
      if (opts.colorAttachmentCount !== void 0) this.colorAttachmentCount = opts.colorAttachmentCount;
      if (opts.pColorAttachments !== void 0) this.pColorAttachments = opts.pColorAttachments;
      if (opts.pResolveAttachments !== void 0) this.pResolveAttachments = opts.pResolveAttachments;
      if (opts.pDepthStencilAttachment !== void 0) this.pDepthStencilAttachment = opts.pDepthStencilAttachment;
      if (opts.preserveAttachmentCount !== void 0) this.preserveAttachmentCount = opts.preserveAttachmentCount;
      if (opts.pPreserveAttachments !== void 0) this.pPreserveAttachments = opts.pPreserveAttachments;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    if (value !== null && (value instanceof Object)) {
      let {sType} = value;
      if (sType <= -1) throw new TypeError("Invalid type for 'VkSubpassDescription2KHR.pNext'");
      switch (sType) {
          
        case 0x3B9DD359:
          break;
        default:
          throw new TypeError("Invalid type for 'VkSubpassDescription2KHR.pNext'");
      };
      this._pNext = value;
      this.memoryViewBigInt64[0x1] = value.memoryAddress;
    } else if (value === null) {
      this._pNext = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkSubpassDescription2KHR.pNext'");
    }
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get pipelineBindPoint() {
    return this.memoryViewInt32[0x5];
  }
  set pipelineBindPoint(value) {
    this.memoryViewInt32[0x5] = value;
  }
  get viewMask() {
    return this.memoryViewUint32[0x6];
  }
  set viewMask(value) {
    this.memoryViewUint32[0x6] = value;
  }
  get inputAttachmentCount() {
    return this.memoryViewUint32[0x7];
  }
  set inputAttachmentCount(value) {
    this.memoryViewUint32[0x7] = value;
  }
  get pInputAttachments() {
    return this._pInputAttachments;
  }
  set pInputAttachments(value) {
    if (value !== null && value.constructor === Array) {
      this._pInputAttachments = value;
    } else if (value === null) {
      this._pInputAttachments = null;
    } else {
      throw new TypeError("Invalid type for 'VkSubpassDescription2KHR.pInputAttachments': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get colorAttachmentCount() {
    return this.memoryViewUint32[0xA];
  }
  set colorAttachmentCount(value) {
    this.memoryViewUint32[0xA] = value;
  }
  get pColorAttachments() {
    return this._pColorAttachments;
  }
  set pColorAttachments(value) {
    if (value !== null && value.constructor === Array) {
      this._pColorAttachments = value;
    } else if (value === null) {
      this._pColorAttachments = null;
    } else {
      throw new TypeError("Invalid type for 'VkSubpassDescription2KHR.pColorAttachments': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get pResolveAttachments() {
    return this._pResolveAttachments;
  }
  set pResolveAttachments(value) {
    if (value !== null && value.constructor === Array) {
      this._pResolveAttachments = value;
    } else if (value === null) {
      this._pResolveAttachments = null;
    } else {
      throw new TypeError("Invalid type for 'VkSubpassDescription2KHR.pResolveAttachments': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get pDepthStencilAttachment() {
    return this._pDepthStencilAttachment;
  }
  set pDepthStencilAttachment(value) {
    if (value !== null && value.constructor === VkAttachmentReference2KHR) {
      value.flush();
      this._pDepthStencilAttachment = value;
      this.memoryViewBigInt64[0x8] = value.memoryAddress;
      
    } else if (value === null) {
      this._pDepthStencilAttachment = null;
      this.memoryViewBigInt64[0x8] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkSubpassDescription2KHR.pDepthStencilAttachment': Expected 'VkAttachmentReference2KHR' but got '" + value.constructor.name + "'");
    }
  }
  get preserveAttachmentCount() {
    return this.memoryViewUint32[0x12];
  }
  set preserveAttachmentCount(value) {
    this.memoryViewUint32[0x12] = value;
  }
  get pPreserveAttachments() {
    return this._pPreserveAttachments;
  }
  set pPreserveAttachments(value) {
    if (value !== null && value.constructor === Uint32Array) {
      this._pPreserveAttachments = value;
      this.memoryViewBigInt64[0xA] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pPreserveAttachments = null;
      this.memoryViewBigInt64[0xA] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkSubpassDescription2KHR.pPreserveAttachments': Expected 'Uint32Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkSubpassDescription2KHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkSubpassDescription2KHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pInputAttachments !== null) {
    let array = this._pInputAttachments;
    if (array.length !== this.inputAttachmentCount) {
      throw new RangeError("Invalid array length, expected length of 'inputAttachmentCount' for 'VkSubpassDescription2KHR.pInputAttachments'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkAttachmentReference2KHR) {
        throw new TypeError("Invalid type for 'VkSubpassDescription2KHR.pInputAttachments[" + ii + "]': Expected 'VkAttachmentReference2KHR' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pInputAttachmentsNative = nativeArray;
    this.memoryViewBigInt64[0x4] = nativeArray.address;
  }
  
  
  if (this._pColorAttachments !== null) {
    let array = this._pColorAttachments;
    if (array.length !== this.colorAttachmentCount) {
      throw new RangeError("Invalid array length, expected length of 'colorAttachmentCount' for 'VkSubpassDescription2KHR.pColorAttachments'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkAttachmentReference2KHR) {
        throw new TypeError("Invalid type for 'VkSubpassDescription2KHR.pColorAttachments[" + ii + "]': Expected 'VkAttachmentReference2KHR' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pColorAttachmentsNative = nativeArray;
    this.memoryViewBigInt64[0x6] = nativeArray.address;
  }
  
  
  if (this._pResolveAttachments !== null) {
    let array = this._pResolveAttachments;
    if (array.length !== this.colorAttachmentCount) {
      throw new RangeError("Invalid array length, expected length of 'colorAttachmentCount' for 'VkSubpassDescription2KHR.pResolveAttachments'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkAttachmentReference2KHR) {
        throw new TypeError("Invalid type for 'VkSubpassDescription2KHR.pResolveAttachments[" + ii + "]': Expected 'VkAttachmentReference2KHR' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pResolveAttachmentsNative = nativeArray;
    this.memoryViewBigInt64[0x7] = nativeArray.address;
  }
  
  return true;
};

VkSubpassDescription2KHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x58);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkSubpassDescription2KHR"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
  
  
  
  
};

VkSubpassDescription2KHR.byteLength = 0x58;

VkSubpassDescription2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pipelineBindPoint: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  viewMask: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  inputAttachmentCount: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  pInputAttachments: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
  colorAttachmentCount: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x4
  }),
  pColorAttachments: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x8
  }),
  pResolveAttachments: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x8
  }),
  pDepthStencilAttachment: Object.freeze({
    byteOffset: 0x40,
    byteLength: 0x8
  }),
  preserveAttachmentCount: Object.freeze({
    byteOffset: 0x48,
    byteLength: 0x4
  }),
  pPreserveAttachments: Object.freeze({
    byteOffset: 0x50,
    byteLength: 0x8
  }),
});
/** VkSubpassDependency2KHR **/
class VkSubpassDependency2KHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x30);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    
    
    
    
    
    
    this.sType = 0x3B9C73CB;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.srcSubpass !== void 0) this.srcSubpass = opts.srcSubpass;
      if (opts.dstSubpass !== void 0) this.dstSubpass = opts.dstSubpass;
      if (opts.srcStageMask !== void 0) this.srcStageMask = opts.srcStageMask;
      if (opts.dstStageMask !== void 0) this.dstStageMask = opts.dstStageMask;
      if (opts.srcAccessMask !== void 0) this.srcAccessMask = opts.srcAccessMask;
      if (opts.dstAccessMask !== void 0) this.dstAccessMask = opts.dstAccessMask;
      if (opts.dependencyFlags !== void 0) this.dependencyFlags = opts.dependencyFlags;
      if (opts.viewOffset !== void 0) this.viewOffset = opts.viewOffset;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkSubpassDependency2KHR.pNext' isn't allowed to be filled");
  }
  get srcSubpass() {
    return this.memoryViewUint32[0x4];
  }
  set srcSubpass(value) {
    this.memoryViewUint32[0x4] = value;
  }
  get dstSubpass() {
    return this.memoryViewUint32[0x5];
  }
  set dstSubpass(value) {
    this.memoryViewUint32[0x5] = value;
  }
  get srcStageMask() {
    return this.memoryViewInt32[0x6];
  }
  set srcStageMask(value) {
    this.memoryViewInt32[0x6] = value;
  }
  get dstStageMask() {
    return this.memoryViewInt32[0x7];
  }
  set dstStageMask(value) {
    this.memoryViewInt32[0x7] = value;
  }
  get srcAccessMask() {
    return this.memoryViewInt32[0x8];
  }
  set srcAccessMask(value) {
    this.memoryViewInt32[0x8] = value;
  }
  get dstAccessMask() {
    return this.memoryViewInt32[0x9];
  }
  set dstAccessMask(value) {
    this.memoryViewInt32[0x9] = value;
  }
  get dependencyFlags() {
    return this.memoryViewInt32[0xA];
  }
  set dependencyFlags(value) {
    this.memoryViewInt32[0xA] = value;
  }
  get viewOffset() {
    return this.memoryViewInt32[0xB];
  }
  set viewOffset(value) {
    this.memoryViewInt32[0xB] = value;
  }
  
};

VkSubpassDependency2KHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkSubpassDependency2KHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkSubpassDependency2KHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x30);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkSubpassDependency2KHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkSubpassDependency2KHR.byteLength = 0x30;

VkSubpassDependency2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  srcSubpass: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  dstSubpass: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  srcStageMask: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  dstStageMask: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  srcAccessMask: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  dstAccessMask: Object.freeze({
    byteOffset: 0x24,
    byteLength: 0x4
  }),
  dependencyFlags: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x4
  }),
  viewOffset: Object.freeze({
    byteOffset: 0x2C,
    byteLength: 0x4
  }),
});
/** VkRenderPassCreateInfo2KHR **/
class VkRenderPassCreateInfo2KHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x50);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    this._pAttachments = null;
    this._pAttachmentsNative = null;
    
    this._pSubpasses = null;
    this._pSubpassesNative = null;
    
    this._pDependencies = null;
    this._pDependenciesNative = null;
    
    this._pCorrelatedViewMasks = null;
    this.sType = 0x3B9C73CC;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.attachmentCount !== void 0) this.attachmentCount = opts.attachmentCount;
      if (opts.pAttachments !== void 0) this.pAttachments = opts.pAttachments;
      if (opts.subpassCount !== void 0) this.subpassCount = opts.subpassCount;
      if (opts.pSubpasses !== void 0) this.pSubpasses = opts.pSubpasses;
      if (opts.dependencyCount !== void 0) this.dependencyCount = opts.dependencyCount;
      if (opts.pDependencies !== void 0) this.pDependencies = opts.pDependencies;
      if (opts.correlatedViewMaskCount !== void 0) this.correlatedViewMaskCount = opts.correlatedViewMaskCount;
      if (opts.pCorrelatedViewMasks !== void 0) this.pCorrelatedViewMasks = opts.pCorrelatedViewMasks;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkRenderPassCreateInfo2KHR.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get attachmentCount() {
    return this.memoryViewUint32[0x5];
  }
  set attachmentCount(value) {
    this.memoryViewUint32[0x5] = value;
  }
  get pAttachments() {
    return this._pAttachments;
  }
  set pAttachments(value) {
    if (value !== null && value.constructor === Array) {
      this._pAttachments = value;
    } else if (value === null) {
      this._pAttachments = null;
    } else {
      throw new TypeError("Invalid type for 'VkRenderPassCreateInfo2KHR.pAttachments': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get subpassCount() {
    return this.memoryViewUint32[0x8];
  }
  set subpassCount(value) {
    this.memoryViewUint32[0x8] = value;
  }
  get pSubpasses() {
    return this._pSubpasses;
  }
  set pSubpasses(value) {
    if (value !== null && value.constructor === Array) {
      this._pSubpasses = value;
    } else if (value === null) {
      this._pSubpasses = null;
    } else {
      throw new TypeError("Invalid type for 'VkRenderPassCreateInfo2KHR.pSubpasses': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get dependencyCount() {
    return this.memoryViewUint32[0xC];
  }
  set dependencyCount(value) {
    this.memoryViewUint32[0xC] = value;
  }
  get pDependencies() {
    return this._pDependencies;
  }
  set pDependencies(value) {
    if (value !== null && value.constructor === Array) {
      this._pDependencies = value;
    } else if (value === null) {
      this._pDependencies = null;
    } else {
      throw new TypeError("Invalid type for 'VkRenderPassCreateInfo2KHR.pDependencies': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get correlatedViewMaskCount() {
    return this.memoryViewUint32[0x10];
  }
  set correlatedViewMaskCount(value) {
    this.memoryViewUint32[0x10] = value;
  }
  get pCorrelatedViewMasks() {
    return this._pCorrelatedViewMasks;
  }
  set pCorrelatedViewMasks(value) {
    if (value !== null && value.constructor === Uint32Array) {
      this._pCorrelatedViewMasks = value;
      this.memoryViewBigInt64[0x9] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pCorrelatedViewMasks = null;
      this.memoryViewBigInt64[0x9] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkRenderPassCreateInfo2KHR.pCorrelatedViewMasks': Expected 'Uint32Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkRenderPassCreateInfo2KHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkRenderPassCreateInfo2KHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pAttachments !== null) {
    let array = this._pAttachments;
    if (array.length !== this.attachmentCount) {
      throw new RangeError("Invalid array length, expected length of 'attachmentCount' for 'VkRenderPassCreateInfo2KHR.pAttachments'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkAttachmentDescription2KHR) {
        throw new TypeError("Invalid type for 'VkRenderPassCreateInfo2KHR.pAttachments[" + ii + "]': Expected 'VkAttachmentDescription2KHR' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pAttachmentsNative = nativeArray;
    this.memoryViewBigInt64[0x3] = nativeArray.address;
  }
  
  
  if (this._pSubpasses !== null) {
    let array = this._pSubpasses;
    if (array.length !== this.subpassCount) {
      throw new RangeError("Invalid array length, expected length of 'subpassCount' for 'VkRenderPassCreateInfo2KHR.pSubpasses'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkSubpassDescription2KHR) {
        throw new TypeError("Invalid type for 'VkRenderPassCreateInfo2KHR.pSubpasses[" + ii + "]': Expected 'VkSubpassDescription2KHR' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pSubpassesNative = nativeArray;
    this.memoryViewBigInt64[0x5] = nativeArray.address;
  }
  
  
  if (this._pDependencies !== null) {
    let array = this._pDependencies;
    if (array.length !== this.dependencyCount) {
      throw new RangeError("Invalid array length, expected length of 'dependencyCount' for 'VkRenderPassCreateInfo2KHR.pDependencies'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkSubpassDependency2KHR) {
        throw new TypeError("Invalid type for 'VkRenderPassCreateInfo2KHR.pDependencies[" + ii + "]': Expected 'VkSubpassDependency2KHR' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pDependenciesNative = nativeArray;
    this.memoryViewBigInt64[0x7] = nativeArray.address;
  }
  
  return true;
};

VkRenderPassCreateInfo2KHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x50);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkRenderPassCreateInfo2KHR"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
  
  
  
  
};

VkRenderPassCreateInfo2KHR.byteLength = 0x50;

VkRenderPassCreateInfo2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  attachmentCount: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  pAttachments: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  subpassCount: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  pSubpasses: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
  dependencyCount: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  pDependencies: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x8
  }),
  correlatedViewMaskCount: Object.freeze({
    byteOffset: 0x40,
    byteLength: 0x4
  }),
  pCorrelatedViewMasks: Object.freeze({
    byteOffset: 0x48,
    byteLength: 0x8
  }),
});
/** VkSubpassBeginInfoKHR **/
class VkSubpassBeginInfoKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = 0x3B9C73CD;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.contents !== void 0) this.contents = opts.contents;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkSubpassBeginInfoKHR.pNext' isn't allowed to be filled");
  }
  get contents() {
    return this.memoryViewInt32[0x4];
  }
  set contents(value) {
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkSubpassBeginInfoKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkSubpassBeginInfoKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkSubpassBeginInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkSubpassBeginInfoKHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkSubpassBeginInfoKHR.byteLength = 0x18;

VkSubpassBeginInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  contents: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkSubpassEndInfoKHR **/
class VkSubpassEndInfoKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x10);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    this.sType = 0x3B9C73CE;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkSubpassEndInfoKHR.pNext' isn't allowed to be filled");
  }
  
};

VkSubpassEndInfoKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkSubpassEndInfoKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkSubpassEndInfoKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x10);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkSubpassEndInfoKHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkSubpassEndInfoKHR.byteLength = 0x10;

VkSubpassEndInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
});
/** VkVertexInputBindingDivisorDescriptionEXT **/
class VkVertexInputBindingDivisorDescriptionEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    
    
    if (typeof opts === "object") {
      if (opts.binding !== void 0) this.binding = opts.binding;
      if (opts.divisor !== void 0) this.divisor = opts.divisor;
      
    }
  }
  get binding() {
    return this.memoryViewUint32[0x0];
  }
  set binding(value) {
    this.memoryViewUint32[0x0] = value;
  }
  get divisor() {
    return this.memoryViewUint32[0x1];
  }
  set divisor(value) {
    this.memoryViewUint32[0x1] = value;
  }
  
};

VkVertexInputBindingDivisorDescriptionEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkVertexInputBindingDivisorDescriptionEXT"`);
  
  return true;
};

VkVertexInputBindingDivisorDescriptionEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x8);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkVertexInputBindingDivisorDescriptionEXT"`, this.memoryAddress, memoryAddress);
  
};

VkVertexInputBindingDivisorDescriptionEXT.byteLength = 0x8;

VkVertexInputBindingDivisorDescriptionEXT.memoryLayout = Object.freeze({
  binding: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  divisor: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
});
/** VkPipelineVertexInputDivisorStateCreateInfoEXT **/
class VkPipelineVertexInputDivisorStateCreateInfoEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this._pVertexBindingDivisors = null;
    this._pVertexBindingDivisorsNative = null;
    this.sType = 0x3B9DB031;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.vertexBindingDivisorCount !== void 0) this.vertexBindingDivisorCount = opts.vertexBindingDivisorCount;
      if (opts.pVertexBindingDivisors !== void 0) this.pVertexBindingDivisors = opts.pVertexBindingDivisors;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPipelineVertexInputDivisorStateCreateInfoEXT.pNext' isn't allowed to be filled");
  }
  get vertexBindingDivisorCount() {
    return this.memoryViewUint32[0x4];
  }
  set vertexBindingDivisorCount(value) {
    this.memoryViewUint32[0x4] = value;
  }
  get pVertexBindingDivisors() {
    return this._pVertexBindingDivisors;
  }
  set pVertexBindingDivisors(value) {
    if (value !== null && value.constructor === Array) {
      this._pVertexBindingDivisors = value;
    } else if (value === null) {
      this._pVertexBindingDivisors = null;
    } else {
      throw new TypeError("Invalid type for 'VkPipelineVertexInputDivisorStateCreateInfoEXT.pVertexBindingDivisors': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkPipelineVertexInputDivisorStateCreateInfoEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPipelineVertexInputDivisorStateCreateInfoEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pVertexBindingDivisors !== null) {
    let array = this._pVertexBindingDivisors;
    if (array.length !== this.vertexBindingDivisorCount) {
      throw new RangeError("Invalid array length, expected length of 'vertexBindingDivisorCount' for 'VkPipelineVertexInputDivisorStateCreateInfoEXT.pVertexBindingDivisors'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkVertexInputBindingDivisorDescriptionEXT) {
        throw new TypeError("Invalid type for 'VkPipelineVertexInputDivisorStateCreateInfoEXT.pVertexBindingDivisors[" + ii + "]': Expected 'VkVertexInputBindingDivisorDescriptionEXT' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pVertexBindingDivisorsNative = nativeArray;
    this.memoryViewBigInt64[0x3] = nativeArray.address;
  }
  
  return true;
};

VkPipelineVertexInputDivisorStateCreateInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPipelineVertexInputDivisorStateCreateInfoEXT"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
};

VkPipelineVertexInputDivisorStateCreateInfoEXT.byteLength = 0x20;

VkPipelineVertexInputDivisorStateCreateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  vertexBindingDivisorCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pVertexBindingDivisors: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT **/
class VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    
    this.sType = 0x3B9DB030;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT.pNext' isn't allowed to be filled");
  }
  get maxVertexAttribDivisor() {
    return this.memoryViewUint32[0x4];
  }
  
};

VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x18), 0x0);
  
  
};

VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT.byteLength = 0x18;

VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  maxVertexAttribDivisor: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPhysicalDevicePCIBusInfoPropertiesEXT **/
class VkPhysicalDevicePCIBusInfoPropertiesEXT {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    
    
    
    
    this.sType = 0x3B9E0620;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDevicePCIBusInfoPropertiesEXT.pNext' isn't allowed to be filled");
  }
  get pciDomain() {
    return this.memoryViewUint32[0x4];
  }
  get pciBus() {
    return this.memoryViewUint32[0x5];
  }
  get pciDevice() {
    return this.memoryViewUint32[0x6];
  }
  get pciFunction() {
    return this.memoryViewUint32[0x7];
  }
  
};

VkPhysicalDevicePCIBusInfoPropertiesEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDevicePCIBusInfoPropertiesEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDevicePCIBusInfoPropertiesEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDevicePCIBusInfoPropertiesEXT"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x20), 0x0);
  
  
};

VkPhysicalDevicePCIBusInfoPropertiesEXT.byteLength = 0x20;

VkPhysicalDevicePCIBusInfoPropertiesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  pciDomain: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pciBus: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  pciDevice: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  pciFunction: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
});
/** VkCommandBufferInheritanceConditionalRenderingInfoEXT **/
class VkCommandBufferInheritanceConditionalRenderingInfoEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = 0x3B9C0668;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.conditionalRenderingEnable !== void 0) this.conditionalRenderingEnable = opts.conditionalRenderingEnable;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkCommandBufferInheritanceConditionalRenderingInfoEXT.pNext' isn't allowed to be filled");
  }
  get conditionalRenderingEnable() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set conditionalRenderingEnable(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  
};

VkCommandBufferInheritanceConditionalRenderingInfoEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkCommandBufferInheritanceConditionalRenderingInfoEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkCommandBufferInheritanceConditionalRenderingInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkCommandBufferInheritanceConditionalRenderingInfoEXT"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkCommandBufferInheritanceConditionalRenderingInfoEXT.byteLength = 0x18;

VkCommandBufferInheritanceConditionalRenderingInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  conditionalRenderingEnable: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPhysicalDevice8BitStorageFeaturesKHR **/
class VkPhysicalDevice8BitStorageFeaturesKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    
    this.sType = 0x3B9D7D68;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.storageBuffer8BitAccess !== void 0) this.storageBuffer8BitAccess = opts.storageBuffer8BitAccess;
      if (opts.uniformAndStorageBuffer8BitAccess !== void 0) this.uniformAndStorageBuffer8BitAccess = opts.uniformAndStorageBuffer8BitAccess;
      if (opts.storagePushConstant8 !== void 0) this.storagePushConstant8 = opts.storagePushConstant8;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDevice8BitStorageFeaturesKHR.pNext' isn't allowed to be filled");
  }
  get storageBuffer8BitAccess() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set storageBuffer8BitAccess(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  get uniformAndStorageBuffer8BitAccess() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  set uniformAndStorageBuffer8BitAccess(value) {
    this.memoryViewUint32[0x5] = value | 0;
  }
  get storagePushConstant8() {
    return this.memoryViewUint32[0x6] !== 0;
  }
  set storagePushConstant8(value) {
    this.memoryViewUint32[0x6] = value | 0;
  }
  
};

VkPhysicalDevice8BitStorageFeaturesKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDevice8BitStorageFeaturesKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDevice8BitStorageFeaturesKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDevice8BitStorageFeaturesKHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPhysicalDevice8BitStorageFeaturesKHR.byteLength = 0x20;

VkPhysicalDevice8BitStorageFeaturesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  storageBuffer8BitAccess: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  uniformAndStorageBuffer8BitAccess: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  storagePushConstant8: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceConditionalRenderingFeaturesEXT **/
class VkPhysicalDeviceConditionalRenderingFeaturesEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    this.sType = 0x3B9C0669;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.conditionalRendering !== void 0) this.conditionalRendering = opts.conditionalRendering;
      if (opts.inheritedConditionalRendering !== void 0) this.inheritedConditionalRendering = opts.inheritedConditionalRendering;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceConditionalRenderingFeaturesEXT.pNext' isn't allowed to be filled");
  }
  get conditionalRendering() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set conditionalRendering(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  get inheritedConditionalRendering() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  set inheritedConditionalRendering(value) {
    this.memoryViewUint32[0x5] = value | 0;
  }
  
};

VkPhysicalDeviceConditionalRenderingFeaturesEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceConditionalRenderingFeaturesEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceConditionalRenderingFeaturesEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceConditionalRenderingFeaturesEXT"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPhysicalDeviceConditionalRenderingFeaturesEXT.byteLength = 0x18;

VkPhysicalDeviceConditionalRenderingFeaturesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  conditionalRendering: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  inheritedConditionalRendering: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceVulkanMemoryModelFeaturesKHR **/
class VkPhysicalDeviceVulkanMemoryModelFeaturesKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    
    this.sType = 0x3B9E0238;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.vulkanMemoryModel !== void 0) this.vulkanMemoryModel = opts.vulkanMemoryModel;
      if (opts.vulkanMemoryModelDeviceScope !== void 0) this.vulkanMemoryModelDeviceScope = opts.vulkanMemoryModelDeviceScope;
      if (opts.vulkanMemoryModelAvailabilityVisibilityChains !== void 0) this.vulkanMemoryModelAvailabilityVisibilityChains = opts.vulkanMemoryModelAvailabilityVisibilityChains;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceVulkanMemoryModelFeaturesKHR.pNext' isn't allowed to be filled");
  }
  get vulkanMemoryModel() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set vulkanMemoryModel(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  get vulkanMemoryModelDeviceScope() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  set vulkanMemoryModelDeviceScope(value) {
    this.memoryViewUint32[0x5] = value | 0;
  }
  get vulkanMemoryModelAvailabilityVisibilityChains() {
    return this.memoryViewUint32[0x6] !== 0;
  }
  set vulkanMemoryModelAvailabilityVisibilityChains(value) {
    this.memoryViewUint32[0x6] = value | 0;
  }
  
};

VkPhysicalDeviceVulkanMemoryModelFeaturesKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceVulkanMemoryModelFeaturesKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceVulkanMemoryModelFeaturesKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceVulkanMemoryModelFeaturesKHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPhysicalDeviceVulkanMemoryModelFeaturesKHR.byteLength = 0x20;

VkPhysicalDeviceVulkanMemoryModelFeaturesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  vulkanMemoryModel: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  vulkanMemoryModelDeviceScope: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  vulkanMemoryModelAvailabilityVisibilityChains: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceShaderAtomicInt64FeaturesKHR **/
class VkPhysicalDeviceShaderAtomicInt64FeaturesKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    this.sType = 0x3B9D8920;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.shaderBufferInt64Atomics !== void 0) this.shaderBufferInt64Atomics = opts.shaderBufferInt64Atomics;
      if (opts.shaderSharedInt64Atomics !== void 0) this.shaderSharedInt64Atomics = opts.shaderSharedInt64Atomics;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceShaderAtomicInt64FeaturesKHR.pNext' isn't allowed to be filled");
  }
  get shaderBufferInt64Atomics() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set shaderBufferInt64Atomics(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  get shaderSharedInt64Atomics() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  set shaderSharedInt64Atomics(value) {
    this.memoryViewUint32[0x5] = value | 0;
  }
  
};

VkPhysicalDeviceShaderAtomicInt64FeaturesKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceShaderAtomicInt64FeaturesKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceShaderAtomicInt64FeaturesKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceShaderAtomicInt64FeaturesKHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPhysicalDeviceShaderAtomicInt64FeaturesKHR.byteLength = 0x18;

VkPhysicalDeviceShaderAtomicInt64FeaturesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  shaderBufferInt64Atomics: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  shaderSharedInt64Atomics: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT **/
class VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    this.sType = 0x3B9DB032;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.vertexAttributeInstanceRateDivisor !== void 0) this.vertexAttributeInstanceRateDivisor = opts.vertexAttributeInstanceRateDivisor;
      if (opts.vertexAttributeInstanceRateZeroDivisor !== void 0) this.vertexAttributeInstanceRateZeroDivisor = opts.vertexAttributeInstanceRateZeroDivisor;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT.pNext' isn't allowed to be filled");
  }
  get vertexAttributeInstanceRateDivisor() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set vertexAttributeInstanceRateDivisor(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  get vertexAttributeInstanceRateZeroDivisor() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  set vertexAttributeInstanceRateZeroDivisor(value) {
    this.memoryViewUint32[0x5] = value | 0;
  }
  
};

VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT.byteLength = 0x18;

VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  vertexAttributeInstanceRateDivisor: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  vertexAttributeInstanceRateZeroDivisor: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
});
/** VkQueueFamilyCheckpointPropertiesNV **/
class VkQueueFamilyCheckpointPropertiesNV {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    
    this.sType = 0x3B9DEEB1;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkQueueFamilyCheckpointPropertiesNV.pNext' isn't allowed to be filled");
  }
  get checkpointExecutionStageMask() {
    return this.memoryViewInt32[0x4];
  }
  
};

VkQueueFamilyCheckpointPropertiesNV.prototype.flush = function flush() {
  //console.log(`Flushing: "VkQueueFamilyCheckpointPropertiesNV"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkQueueFamilyCheckpointPropertiesNV.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkQueueFamilyCheckpointPropertiesNV"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x18), 0x0);
  
  
};

VkQueueFamilyCheckpointPropertiesNV.byteLength = 0x18;

VkQueueFamilyCheckpointPropertiesNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  checkpointExecutionStageMask: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkCheckpointDataNV **/
class VkCheckpointDataNV {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    
    this._pCheckpointMarker = null;
    this.sType = 0x3B9DEEB0;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.pCheckpointMarker !== void 0) this.pCheckpointMarker = opts.pCheckpointMarker;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkCheckpointDataNV.pNext' isn't allowed to be filled");
  }
  get stage() {
    return this.memoryViewInt32[0x4];
  }
  get pCheckpointMarker() {
    return this._pCheckpointMarker;
  }
  set pCheckpointMarker(value) {
    if (value !== null && value.constructor === ArrayBuffer) {
      this._pCheckpointMarker = value;
      this.memoryViewBigInt64[0x3] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pCheckpointMarker = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkCheckpointDataNV.pCheckpointMarker': Expected 'ArrayBuffer' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkCheckpointDataNV.prototype.flush = function flush() {
  //console.log(`Flushing: "VkCheckpointDataNV"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkCheckpointDataNV.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkCheckpointDataNV"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x20), 0x0);
  
  
};

VkCheckpointDataNV.byteLength = 0x20;

VkCheckpointDataNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  stage: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pCheckpointMarker: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkPhysicalDeviceDepthStencilResolvePropertiesKHR **/
class VkPhysicalDeviceDepthStencilResolvePropertiesKHR {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    
    
    
    
    this.sType = 0x3B9DD358;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceDepthStencilResolvePropertiesKHR.pNext' isn't allowed to be filled");
  }
  get supportedDepthResolveModes() {
    return this.memoryViewInt32[0x4];
  }
  get supportedStencilResolveModes() {
    return this.memoryViewInt32[0x5];
  }
  get independentResolveNone() {
    return this.memoryViewUint32[0x6] !== 0;
  }
  get independentResolve() {
    return this.memoryViewUint32[0x7] !== 0;
  }
  
};

VkPhysicalDeviceDepthStencilResolvePropertiesKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceDepthStencilResolvePropertiesKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceDepthStencilResolvePropertiesKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceDepthStencilResolvePropertiesKHR"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x20), 0x0);
  
  
};

VkPhysicalDeviceDepthStencilResolvePropertiesKHR.byteLength = 0x20;

VkPhysicalDeviceDepthStencilResolvePropertiesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  supportedDepthResolveModes: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  supportedStencilResolveModes: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  independentResolveNone: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  independentResolve: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
});
/** VkSubpassDescriptionDepthStencilResolveKHR **/
class VkSubpassDescriptionDepthStencilResolveKHR {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    this._pDepthStencilResolveAttachment = null;
    this.sType = 0x3B9DD359;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.depthResolveMode !== void 0) this.depthResolveMode = opts.depthResolveMode;
      if (opts.stencilResolveMode !== void 0) this.stencilResolveMode = opts.stencilResolveMode;
      if (opts.pDepthStencilResolveAttachment !== void 0) this.pDepthStencilResolveAttachment = opts.pDepthStencilResolveAttachment;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkSubpassDescriptionDepthStencilResolveKHR.pNext' isn't allowed to be filled");
  }
  get depthResolveMode() {
    return this.memoryViewInt32[0x4];
  }
  set depthResolveMode(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get stencilResolveMode() {
    return this.memoryViewInt32[0x5];
  }
  set stencilResolveMode(value) {
    this.memoryViewInt32[0x5] = value;
  }
  get pDepthStencilResolveAttachment() {
    return this._pDepthStencilResolveAttachment;
  }
  set pDepthStencilResolveAttachment(value) {
    if (value !== null && value.constructor === VkAttachmentReference2KHR) {
      value.flush();
      this._pDepthStencilResolveAttachment = value;
      this.memoryViewBigInt64[0x3] = value.memoryAddress;
      
    } else if (value === null) {
      this._pDepthStencilResolveAttachment = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkSubpassDescriptionDepthStencilResolveKHR.pDepthStencilResolveAttachment': Expected 'VkAttachmentReference2KHR' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkSubpassDescriptionDepthStencilResolveKHR.prototype.flush = function flush() {
  //console.log(`Flushing: "VkSubpassDescriptionDepthStencilResolveKHR"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkSubpassDescriptionDepthStencilResolveKHR.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkSubpassDescriptionDepthStencilResolveKHR"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkSubpassDescriptionDepthStencilResolveKHR.byteLength = 0x20;

VkSubpassDescriptionDepthStencilResolveKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  depthResolveMode: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  stencilResolveMode: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  pDepthStencilResolveAttachment: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkImageViewASTCDecodeModeEXT **/
class VkImageViewASTCDecodeModeEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = 0x3B9BCFB8;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.decodeMode !== void 0) this.decodeMode = opts.decodeMode;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkImageViewASTCDecodeModeEXT.pNext' isn't allowed to be filled");
  }
  get decodeMode() {
    return this.memoryViewInt32[0x4];
  }
  set decodeMode(value) {
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkImageViewASTCDecodeModeEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkImageViewASTCDecodeModeEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkImageViewASTCDecodeModeEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkImageViewASTCDecodeModeEXT"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkImageViewASTCDecodeModeEXT.byteLength = 0x18;

VkImageViewASTCDecodeModeEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  decodeMode: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceASTCDecodeFeaturesEXT **/
class VkPhysicalDeviceASTCDecodeFeaturesEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = 0x3B9BCFB9;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.decodeModeSharedExponent !== void 0) this.decodeModeSharedExponent = opts.decodeModeSharedExponent;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceASTCDecodeFeaturesEXT.pNext' isn't allowed to be filled");
  }
  get decodeModeSharedExponent() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set decodeModeSharedExponent(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  
};

VkPhysicalDeviceASTCDecodeFeaturesEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceASTCDecodeFeaturesEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceASTCDecodeFeaturesEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceASTCDecodeFeaturesEXT"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPhysicalDeviceASTCDecodeFeaturesEXT.byteLength = 0x18;

VkPhysicalDeviceASTCDecodeFeaturesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  decodeModeSharedExponent: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceTransformFeedbackFeaturesEXT **/
class VkPhysicalDeviceTransformFeedbackFeaturesEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    this.sType = 0x3B9B3760;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.transformFeedback !== void 0) this.transformFeedback = opts.transformFeedback;
      if (opts.geometryStreams !== void 0) this.geometryStreams = opts.geometryStreams;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceTransformFeedbackFeaturesEXT.pNext' isn't allowed to be filled");
  }
  get transformFeedback() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set transformFeedback(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  get geometryStreams() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  set geometryStreams(value) {
    this.memoryViewUint32[0x5] = value | 0;
  }
  
};

VkPhysicalDeviceTransformFeedbackFeaturesEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceTransformFeedbackFeaturesEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceTransformFeedbackFeaturesEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceTransformFeedbackFeaturesEXT"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPhysicalDeviceTransformFeedbackFeaturesEXT.byteLength = 0x18;

VkPhysicalDeviceTransformFeedbackFeaturesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  transformFeedback: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  geometryStreams: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceTransformFeedbackPropertiesEXT **/
class VkPhysicalDeviceTransformFeedbackPropertiesEXT {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x40);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
    this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x40) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x40) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x40) / 0x4);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x40) / 0x8);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    
    
    
    
    
    
    
    
    
    
    this.sType = 0x3B9B3761;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceTransformFeedbackPropertiesEXT.pNext' isn't allowed to be filled");
  }
  get maxTransformFeedbackStreams() {
    return this.memoryViewUint32[0x4];
  }
  get maxTransformFeedbackBuffers() {
    return this.memoryViewUint32[0x5];
  }
  get maxTransformFeedbackBufferSize() {
    return this.memoryViewBigUint64[0x3];
  }
  get maxTransformFeedbackStreamDataSize() {
    return this.memoryViewUint32[0x8];
  }
  get maxTransformFeedbackBufferDataSize() {
    return this.memoryViewUint32[0x9];
  }
  get maxTransformFeedbackBufferDataStride() {
    return this.memoryViewUint32[0xA];
  }
  get transformFeedbackQueries() {
    return this.memoryViewUint32[0xB] !== 0;
  }
  get transformFeedbackStreamsLinesTriangles() {
    return this.memoryViewUint32[0xC] !== 0;
  }
  get transformFeedbackRasterizationStreamSelect() {
    return this.memoryViewUint32[0xD] !== 0;
  }
  get transformFeedbackDraw() {
    return this.memoryViewUint32[0xE] !== 0;
  }
  
};

VkPhysicalDeviceTransformFeedbackPropertiesEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceTransformFeedbackPropertiesEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceTransformFeedbackPropertiesEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x40);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceTransformFeedbackPropertiesEXT"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x40), 0x0);
  
  
};

VkPhysicalDeviceTransformFeedbackPropertiesEXT.byteLength = 0x40;

VkPhysicalDeviceTransformFeedbackPropertiesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  maxTransformFeedbackStreams: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  maxTransformFeedbackBuffers: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  maxTransformFeedbackBufferSize: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  maxTransformFeedbackStreamDataSize: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  maxTransformFeedbackBufferDataSize: Object.freeze({
    byteOffset: 0x24,
    byteLength: 0x4
  }),
  maxTransformFeedbackBufferDataStride: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x4
  }),
  transformFeedbackQueries: Object.freeze({
    byteOffset: 0x2C,
    byteLength: 0x4
  }),
  transformFeedbackStreamsLinesTriangles: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  transformFeedbackRasterizationStreamSelect: Object.freeze({
    byteOffset: 0x34,
    byteLength: 0x4
  }),
  transformFeedbackDraw: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x4
  }),
});
/** VkPipelineRasterizationStateStreamCreateInfoEXT **/
class VkPipelineRasterizationStateStreamCreateInfoEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    this.sType = 0x3B9B3762;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.rasterizationStream !== void 0) this.rasterizationStream = opts.rasterizationStream;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPipelineRasterizationStateStreamCreateInfoEXT.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get rasterizationStream() {
    return this.memoryViewUint32[0x5];
  }
  set rasterizationStream(value) {
    this.memoryViewUint32[0x5] = value;
  }
  
};

VkPipelineRasterizationStateStreamCreateInfoEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPipelineRasterizationStateStreamCreateInfoEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPipelineRasterizationStateStreamCreateInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPipelineRasterizationStateStreamCreateInfoEXT"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPipelineRasterizationStateStreamCreateInfoEXT.byteLength = 0x18;

VkPipelineRasterizationStateStreamCreateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  rasterizationStream: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV **/
class VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = 0x3B9D5270;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.representativeFragmentTest !== void 0) this.representativeFragmentTest = opts.representativeFragmentTest;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV.pNext' isn't allowed to be filled");
  }
  get representativeFragmentTest() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set representativeFragmentTest(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  
};

VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV.byteLength = 0x18;

VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  representativeFragmentTest: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPipelineRepresentativeFragmentTestStateCreateInfoNV **/
class VkPipelineRepresentativeFragmentTestStateCreateInfoNV {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = 0x3B9D5271;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.representativeFragmentTestEnable !== void 0) this.representativeFragmentTestEnable = opts.representativeFragmentTestEnable;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPipelineRepresentativeFragmentTestStateCreateInfoNV.pNext' isn't allowed to be filled");
  }
  get representativeFragmentTestEnable() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set representativeFragmentTestEnable(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  
};

VkPipelineRepresentativeFragmentTestStateCreateInfoNV.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPipelineRepresentativeFragmentTestStateCreateInfoNV"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPipelineRepresentativeFragmentTestStateCreateInfoNV.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPipelineRepresentativeFragmentTestStateCreateInfoNV"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPipelineRepresentativeFragmentTestStateCreateInfoNV.byteLength = 0x18;

VkPipelineRepresentativeFragmentTestStateCreateInfoNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  representativeFragmentTestEnable: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceExclusiveScissorFeaturesNV **/
class VkPhysicalDeviceExclusiveScissorFeaturesNV {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = 0x3B9DEACA;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.exclusiveScissor !== void 0) this.exclusiveScissor = opts.exclusiveScissor;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceExclusiveScissorFeaturesNV.pNext' isn't allowed to be filled");
  }
  get exclusiveScissor() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set exclusiveScissor(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  
};

VkPhysicalDeviceExclusiveScissorFeaturesNV.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceExclusiveScissorFeaturesNV"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceExclusiveScissorFeaturesNV.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceExclusiveScissorFeaturesNV"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPhysicalDeviceExclusiveScissorFeaturesNV.byteLength = 0x18;

VkPhysicalDeviceExclusiveScissorFeaturesNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  exclusiveScissor: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPipelineViewportExclusiveScissorStateCreateInfoNV **/
class VkPipelineViewportExclusiveScissorStateCreateInfoNV {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this._pExclusiveScissors = null;
    this._pExclusiveScissorsNative = null;
    this.sType = 0x3B9DEAC8;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.exclusiveScissorCount !== void 0) this.exclusiveScissorCount = opts.exclusiveScissorCount;
      if (opts.pExclusiveScissors !== void 0) this.pExclusiveScissors = opts.pExclusiveScissors;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPipelineViewportExclusiveScissorStateCreateInfoNV.pNext' isn't allowed to be filled");
  }
  get exclusiveScissorCount() {
    return this.memoryViewUint32[0x4];
  }
  set exclusiveScissorCount(value) {
    this.memoryViewUint32[0x4] = value;
  }
  get pExclusiveScissors() {
    return this._pExclusiveScissors;
  }
  set pExclusiveScissors(value) {
    if (value !== null && value.constructor === Array) {
      this._pExclusiveScissors = value;
    } else if (value === null) {
      this._pExclusiveScissors = null;
    } else {
      throw new TypeError("Invalid type for 'VkPipelineViewportExclusiveScissorStateCreateInfoNV.pExclusiveScissors': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkPipelineViewportExclusiveScissorStateCreateInfoNV.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPipelineViewportExclusiveScissorStateCreateInfoNV"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pExclusiveScissors !== null) {
    let array = this._pExclusiveScissors;
    if (array.length !== this.exclusiveScissorCount) {
      throw new RangeError("Invalid array length, expected length of 'exclusiveScissorCount' for 'VkPipelineViewportExclusiveScissorStateCreateInfoNV.pExclusiveScissors'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkRect2D) {
        throw new TypeError("Invalid type for 'VkPipelineViewportExclusiveScissorStateCreateInfoNV.pExclusiveScissors[" + ii + "]': Expected 'VkRect2D' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pExclusiveScissorsNative = nativeArray;
    this.memoryViewBigInt64[0x3] = nativeArray.address;
  }
  
  return true;
};

VkPipelineViewportExclusiveScissorStateCreateInfoNV.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPipelineViewportExclusiveScissorStateCreateInfoNV"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
};

VkPipelineViewportExclusiveScissorStateCreateInfoNV.byteLength = 0x20;

VkPipelineViewportExclusiveScissorStateCreateInfoNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  exclusiveScissorCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pExclusiveScissors: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkPhysicalDeviceCornerSampledImageFeaturesNV **/
class VkPhysicalDeviceCornerSampledImageFeaturesNV {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = 0x3B9B8D50;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.cornerSampledImage !== void 0) this.cornerSampledImage = opts.cornerSampledImage;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceCornerSampledImageFeaturesNV.pNext' isn't allowed to be filled");
  }
  get cornerSampledImage() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set cornerSampledImage(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  
};

VkPhysicalDeviceCornerSampledImageFeaturesNV.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceCornerSampledImageFeaturesNV"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceCornerSampledImageFeaturesNV.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceCornerSampledImageFeaturesNV"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPhysicalDeviceCornerSampledImageFeaturesNV.byteLength = 0x18;

VkPhysicalDeviceCornerSampledImageFeaturesNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  cornerSampledImage: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceComputeShaderDerivativesFeaturesNV **/
class VkPhysicalDeviceComputeShaderDerivativesFeaturesNV {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    this.sType = 0x3B9DDB28;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.computeDerivativeGroupQuads !== void 0) this.computeDerivativeGroupQuads = opts.computeDerivativeGroupQuads;
      if (opts.computeDerivativeGroupLinear !== void 0) this.computeDerivativeGroupLinear = opts.computeDerivativeGroupLinear;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceComputeShaderDerivativesFeaturesNV.pNext' isn't allowed to be filled");
  }
  get computeDerivativeGroupQuads() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set computeDerivativeGroupQuads(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  get computeDerivativeGroupLinear() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  set computeDerivativeGroupLinear(value) {
    this.memoryViewUint32[0x5] = value | 0;
  }
  
};

VkPhysicalDeviceComputeShaderDerivativesFeaturesNV.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceComputeShaderDerivativesFeaturesNV"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceComputeShaderDerivativesFeaturesNV.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceComputeShaderDerivativesFeaturesNV"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPhysicalDeviceComputeShaderDerivativesFeaturesNV.byteLength = 0x18;

VkPhysicalDeviceComputeShaderDerivativesFeaturesNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  computeDerivativeGroupQuads: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  computeDerivativeGroupLinear: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV **/
class VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = 0x3B9DE2F8;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.fragmentShaderBarycentric !== void 0) this.fragmentShaderBarycentric = opts.fragmentShaderBarycentric;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV.pNext' isn't allowed to be filled");
  }
  get fragmentShaderBarycentric() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set fragmentShaderBarycentric(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  
};

VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV.byteLength = 0x18;

VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  fragmentShaderBarycentric: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceShaderImageFootprintFeaturesNV **/
class VkPhysicalDeviceShaderImageFootprintFeaturesNV {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = 0x3B9DE6E0;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.imageFootprint !== void 0) this.imageFootprint = opts.imageFootprint;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceShaderImageFootprintFeaturesNV.pNext' isn't allowed to be filled");
  }
  get imageFootprint() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set imageFootprint(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  
};

VkPhysicalDeviceShaderImageFootprintFeaturesNV.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceShaderImageFootprintFeaturesNV"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceShaderImageFootprintFeaturesNV.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceShaderImageFootprintFeaturesNV"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPhysicalDeviceShaderImageFootprintFeaturesNV.byteLength = 0x18;

VkPhysicalDeviceShaderImageFootprintFeaturesNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  imageFootprint: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV **/
class VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = 0x3B9E7380;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.dedicatedAllocationImageAliasing !== void 0) this.dedicatedAllocationImageAliasing = opts.dedicatedAllocationImageAliasing;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV.pNext' isn't allowed to be filled");
  }
  get dedicatedAllocationImageAliasing() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set dedicatedAllocationImageAliasing(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  
};

VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV.byteLength = 0x18;

VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  dedicatedAllocationImageAliasing: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkShadingRatePaletteNV **/
class VkShadingRatePaletteNV {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x10);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pShadingRatePaletteEntries = null;
    
    if (typeof opts === "object") {
      if (opts.shadingRatePaletteEntryCount !== void 0) this.shadingRatePaletteEntryCount = opts.shadingRatePaletteEntryCount;
      if (opts.pShadingRatePaletteEntries !== void 0) this.pShadingRatePaletteEntries = opts.pShadingRatePaletteEntries;
      
    }
  }
  get shadingRatePaletteEntryCount() {
    return this.memoryViewUint32[0x0];
  }
  set shadingRatePaletteEntryCount(value) {
    this.memoryViewUint32[0x0] = value;
  }
  get pShadingRatePaletteEntries() {
    return this._pShadingRatePaletteEntries;
  }
  set pShadingRatePaletteEntries(value) {
    if (value !== null && value.constructor === Int32Array) {
      this._pShadingRatePaletteEntries = value;
      this.memoryViewBigInt64[0x1] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pShadingRatePaletteEntries = null;
      this.memoryViewBigInt64[0x1] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkShadingRatePaletteNV.pShadingRatePaletteEntries': Expected 'Int32Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkShadingRatePaletteNV.prototype.flush = function flush() {
  //console.log(`Flushing: "VkShadingRatePaletteNV"`);
  
  return true;
};

VkShadingRatePaletteNV.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x10);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkShadingRatePaletteNV"`, this.memoryAddress, memoryAddress);
  
};

VkShadingRatePaletteNV.byteLength = 0x10;

VkShadingRatePaletteNV.memoryLayout = Object.freeze({
  shadingRatePaletteEntryCount: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pShadingRatePaletteEntries: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
});
/** VkPipelineViewportShadingRateImageStateCreateInfoNV **/
class VkPipelineViewportShadingRateImageStateCreateInfoNV {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    this._pShadingRatePalettes = null;
    this._pShadingRatePalettesNative = null;
    this.sType = 0x3B9D4AA0;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.shadingRateImageEnable !== void 0) this.shadingRateImageEnable = opts.shadingRateImageEnable;
      if (opts.viewportCount !== void 0) this.viewportCount = opts.viewportCount;
      if (opts.pShadingRatePalettes !== void 0) this.pShadingRatePalettes = opts.pShadingRatePalettes;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPipelineViewportShadingRateImageStateCreateInfoNV.pNext' isn't allowed to be filled");
  }
  get shadingRateImageEnable() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set shadingRateImageEnable(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  get viewportCount() {
    return this.memoryViewUint32[0x5];
  }
  set viewportCount(value) {
    this.memoryViewUint32[0x5] = value;
  }
  get pShadingRatePalettes() {
    return this._pShadingRatePalettes;
  }
  set pShadingRatePalettes(value) {
    if (value !== null && value.constructor === Array) {
      this._pShadingRatePalettes = value;
    } else if (value === null) {
      this._pShadingRatePalettes = null;
    } else {
      throw new TypeError("Invalid type for 'VkPipelineViewportShadingRateImageStateCreateInfoNV.pShadingRatePalettes': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkPipelineViewportShadingRateImageStateCreateInfoNV.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPipelineViewportShadingRateImageStateCreateInfoNV"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pShadingRatePalettes !== null) {
    let array = this._pShadingRatePalettes;
    if (array.length !== this.viewportCount) {
      throw new RangeError("Invalid array length, expected length of 'viewportCount' for 'VkPipelineViewportShadingRateImageStateCreateInfoNV.pShadingRatePalettes'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkShadingRatePaletteNV) {
        throw new TypeError("Invalid type for 'VkPipelineViewportShadingRateImageStateCreateInfoNV.pShadingRatePalettes[" + ii + "]': Expected 'VkShadingRatePaletteNV' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pShadingRatePalettesNative = nativeArray;
    this.memoryViewBigInt64[0x3] = nativeArray.address;
  }
  
  return true;
};

VkPipelineViewportShadingRateImageStateCreateInfoNV.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPipelineViewportShadingRateImageStateCreateInfoNV"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
};

VkPipelineViewportShadingRateImageStateCreateInfoNV.byteLength = 0x20;

VkPipelineViewportShadingRateImageStateCreateInfoNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  shadingRateImageEnable: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  viewportCount: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  pShadingRatePalettes: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkPhysicalDeviceShadingRateImageFeaturesNV **/
class VkPhysicalDeviceShadingRateImageFeaturesNV {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    this.sType = 0x3B9D4AA1;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.shadingRateImage !== void 0) this.shadingRateImage = opts.shadingRateImage;
      if (opts.shadingRateCoarseSampleOrder !== void 0) this.shadingRateCoarseSampleOrder = opts.shadingRateCoarseSampleOrder;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceShadingRateImageFeaturesNV.pNext' isn't allowed to be filled");
  }
  get shadingRateImage() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set shadingRateImage(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  get shadingRateCoarseSampleOrder() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  set shadingRateCoarseSampleOrder(value) {
    this.memoryViewUint32[0x5] = value | 0;
  }
  
};

VkPhysicalDeviceShadingRateImageFeaturesNV.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceShadingRateImageFeaturesNV"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceShadingRateImageFeaturesNV.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceShadingRateImageFeaturesNV"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPhysicalDeviceShadingRateImageFeaturesNV.byteLength = 0x18;

VkPhysicalDeviceShadingRateImageFeaturesNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  shadingRateImage: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  shadingRateCoarseSampleOrder: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceShadingRateImagePropertiesNV **/
class VkPhysicalDeviceShadingRateImagePropertiesNV {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    this._shadingRateTexelSize = new VkExtent2D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x10 });
    
    
    this.sType = 0x3B9D4AA2;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceShadingRateImagePropertiesNV.pNext' isn't allowed to be filled");
  }
  get shadingRateTexelSize() {
    return this._shadingRateTexelSize;
  }
  get shadingRatePaletteSize() {
    return this.memoryViewUint32[0x6];
  }
  get shadingRateMaxCoarseSamples() {
    return this.memoryViewUint32[0x7];
  }
  
};

VkPhysicalDeviceShadingRateImagePropertiesNV.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceShadingRateImagePropertiesNV"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceShadingRateImagePropertiesNV.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceShadingRateImagePropertiesNV"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x20), 0x0);
  
  
  
  
};

VkPhysicalDeviceShadingRateImagePropertiesNV.byteLength = 0x20;

VkPhysicalDeviceShadingRateImagePropertiesNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  shadingRateTexelSize: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  shadingRatePaletteSize: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  shadingRateMaxCoarseSamples: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
});
/** VkCoarseSampleLocationNV **/
class VkCoarseSampleLocationNV {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0xC);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    
    
    
    if (typeof opts === "object") {
      if (opts.pixelX !== void 0) this.pixelX = opts.pixelX;
      if (opts.pixelY !== void 0) this.pixelY = opts.pixelY;
      if (opts.sample !== void 0) this.sample = opts.sample;
      
    }
  }
  get pixelX() {
    return this.memoryViewUint32[0x0];
  }
  set pixelX(value) {
    this.memoryViewUint32[0x0] = value;
  }
  get pixelY() {
    return this.memoryViewUint32[0x1];
  }
  set pixelY(value) {
    this.memoryViewUint32[0x1] = value;
  }
  get sample() {
    return this.memoryViewUint32[0x2];
  }
  set sample(value) {
    this.memoryViewUint32[0x2] = value;
  }
  
};

VkCoarseSampleLocationNV.prototype.flush = function flush() {
  //console.log(`Flushing: "VkCoarseSampleLocationNV"`);
  
  return true;
};

VkCoarseSampleLocationNV.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0xC);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkCoarseSampleLocationNV"`, this.memoryAddress, memoryAddress);
  
};

VkCoarseSampleLocationNV.byteLength = 0xC;

VkCoarseSampleLocationNV.memoryLayout = Object.freeze({
  pixelX: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pixelY: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  sample: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
});
/** VkCoarseSampleOrderCustomNV **/
class VkCoarseSampleOrderCustomNV {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    
    
    this._pSampleLocations = null;
    this._pSampleLocationsNative = null;
    
    if (typeof opts === "object") {
      if (opts.shadingRate !== void 0) this.shadingRate = opts.shadingRate;
      if (opts.sampleCount !== void 0) this.sampleCount = opts.sampleCount;
      if (opts.sampleLocationCount !== void 0) this.sampleLocationCount = opts.sampleLocationCount;
      if (opts.pSampleLocations !== void 0) this.pSampleLocations = opts.pSampleLocations;
      
    }
  }
  get shadingRate() {
    return this.memoryViewInt32[0x0];
  }
  set shadingRate(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get sampleCount() {
    return this.memoryViewUint32[0x1];
  }
  set sampleCount(value) {
    this.memoryViewUint32[0x1] = value;
  }
  get sampleLocationCount() {
    return this.memoryViewUint32[0x2];
  }
  set sampleLocationCount(value) {
    this.memoryViewUint32[0x2] = value;
  }
  get pSampleLocations() {
    return this._pSampleLocations;
  }
  set pSampleLocations(value) {
    if (value !== null && value.constructor === Array) {
      this._pSampleLocations = value;
    } else if (value === null) {
      this._pSampleLocations = null;
    } else {
      throw new TypeError("Invalid type for 'VkCoarseSampleOrderCustomNV.pSampleLocations': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkCoarseSampleOrderCustomNV.prototype.flush = function flush() {
  //console.log(`Flushing: "VkCoarseSampleOrderCustomNV"`);
  
  
  if (this._pSampleLocations !== null) {
    let array = this._pSampleLocations;
    if (array.length !== this.sampleLocationCount) {
      throw new RangeError("Invalid array length, expected length of 'sampleLocationCount' for 'VkCoarseSampleOrderCustomNV.pSampleLocations'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkCoarseSampleLocationNV) {
        throw new TypeError("Invalid type for 'VkCoarseSampleOrderCustomNV.pSampleLocations[" + ii + "]': Expected 'VkCoarseSampleLocationNV' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pSampleLocationsNative = nativeArray;
    this.memoryViewBigInt64[0x2] = nativeArray.address;
  }
  
  return true;
};

VkCoarseSampleOrderCustomNV.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkCoarseSampleOrderCustomNV"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkCoarseSampleOrderCustomNV.byteLength = 0x18;

VkCoarseSampleOrderCustomNV.memoryLayout = Object.freeze({
  shadingRate: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  sampleCount: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
  sampleLocationCount: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
  pSampleLocations: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
});
/** VkPipelineViewportCoarseSampleOrderStateCreateInfoNV **/
class VkPipelineViewportCoarseSampleOrderStateCreateInfoNV {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    this._pCustomSampleOrders = null;
    this._pCustomSampleOrdersNative = null;
    this.sType = 0x3B9D4AA5;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.sampleOrderType !== void 0) this.sampleOrderType = opts.sampleOrderType;
      if (opts.customSampleOrderCount !== void 0) this.customSampleOrderCount = opts.customSampleOrderCount;
      if (opts.pCustomSampleOrders !== void 0) this.pCustomSampleOrders = opts.pCustomSampleOrders;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPipelineViewportCoarseSampleOrderStateCreateInfoNV.pNext' isn't allowed to be filled");
  }
  get sampleOrderType() {
    return this.memoryViewInt32[0x4];
  }
  set sampleOrderType(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get customSampleOrderCount() {
    return this.memoryViewUint32[0x5];
  }
  set customSampleOrderCount(value) {
    this.memoryViewUint32[0x5] = value;
  }
  get pCustomSampleOrders() {
    return this._pCustomSampleOrders;
  }
  set pCustomSampleOrders(value) {
    if (value !== null && value.constructor === Array) {
      this._pCustomSampleOrders = value;
    } else if (value === null) {
      this._pCustomSampleOrders = null;
    } else {
      throw new TypeError("Invalid type for 'VkPipelineViewportCoarseSampleOrderStateCreateInfoNV.pCustomSampleOrders': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkPipelineViewportCoarseSampleOrderStateCreateInfoNV.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPipelineViewportCoarseSampleOrderStateCreateInfoNV"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pCustomSampleOrders !== null) {
    let array = this._pCustomSampleOrders;
    if (array.length !== this.customSampleOrderCount) {
      throw new RangeError("Invalid array length, expected length of 'customSampleOrderCount' for 'VkPipelineViewportCoarseSampleOrderStateCreateInfoNV.pCustomSampleOrders'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkCoarseSampleOrderCustomNV) {
        throw new TypeError("Invalid type for 'VkPipelineViewportCoarseSampleOrderStateCreateInfoNV.pCustomSampleOrders[" + ii + "]': Expected 'VkCoarseSampleOrderCustomNV' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pCustomSampleOrdersNative = nativeArray;
    this.memoryViewBigInt64[0x3] = nativeArray.address;
  }
  
  return true;
};

VkPipelineViewportCoarseSampleOrderStateCreateInfoNV.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPipelineViewportCoarseSampleOrderStateCreateInfoNV"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
};

VkPipelineViewportCoarseSampleOrderStateCreateInfoNV.byteLength = 0x20;

VkPipelineViewportCoarseSampleOrderStateCreateInfoNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  sampleOrderType: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  customSampleOrderCount: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  pCustomSampleOrders: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkPhysicalDeviceMeshShaderFeaturesNV **/
class VkPhysicalDeviceMeshShaderFeaturesNV {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    this.sType = 0x3B9DDF10;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.taskShader !== void 0) this.taskShader = opts.taskShader;
      if (opts.meshShader !== void 0) this.meshShader = opts.meshShader;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceMeshShaderFeaturesNV.pNext' isn't allowed to be filled");
  }
  get taskShader() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set taskShader(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  get meshShader() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  set meshShader(value) {
    this.memoryViewUint32[0x5] = value | 0;
  }
  
};

VkPhysicalDeviceMeshShaderFeaturesNV.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceMeshShaderFeaturesNV"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceMeshShaderFeaturesNV.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceMeshShaderFeaturesNV"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPhysicalDeviceMeshShaderFeaturesNV.byteLength = 0x18;

VkPhysicalDeviceMeshShaderFeaturesNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  taskShader: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  meshShader: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceMeshShaderPropertiesNV **/
class VkPhysicalDeviceMeshShaderPropertiesNV {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x58);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x58) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x58) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x58) / 0x4);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    
    
    this._maxTaskWorkGroupSize = [...Array(3)].fill(0x0);
    
    
    
    this._maxMeshWorkGroupSize = [...Array(3)].fill(0x0);
    
    
    
    
    
    
    this.sType = 0x3B9DDF11;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceMeshShaderPropertiesNV.pNext' isn't allowed to be filled");
  }
  get maxDrawMeshTasksCount() {
    return this.memoryViewUint32[0x4];
  }
  get maxTaskWorkGroupInvocations() {
    return this.memoryViewUint32[0x5];
  }
  get maxTaskWorkGroupSize() {
    return [
      this.memoryViewUint32[0x6],
      this.memoryViewUint32[0x7],
      this.memoryViewUint32[0x8]
    ];
  }
  get maxTaskTotalMemorySize() {
    return this.memoryViewUint32[0x9];
  }
  get maxTaskOutputCount() {
    return this.memoryViewUint32[0xA];
  }
  get maxMeshWorkGroupInvocations() {
    return this.memoryViewUint32[0xB];
  }
  get maxMeshWorkGroupSize() {
    return [
      this.memoryViewUint32[0xC],
      this.memoryViewUint32[0xD],
      this.memoryViewUint32[0xE]
    ];
  }
  get maxMeshTotalMemorySize() {
    return this.memoryViewUint32[0xF];
  }
  get maxMeshOutputVertices() {
    return this.memoryViewUint32[0x10];
  }
  get maxMeshOutputPrimitives() {
    return this.memoryViewUint32[0x11];
  }
  get maxMeshMultiviewViewCount() {
    return this.memoryViewUint32[0x12];
  }
  get meshOutputPerVertexGranularity() {
    return this.memoryViewUint32[0x13];
  }
  get meshOutputPerPrimitiveGranularity() {
    return this.memoryViewUint32[0x14];
  }
  
};

VkPhysicalDeviceMeshShaderPropertiesNV.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceMeshShaderPropertiesNV"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceMeshShaderPropertiesNV.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x58);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceMeshShaderPropertiesNV"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x58), 0x0);
  
  
  
  
  
  
};

VkPhysicalDeviceMeshShaderPropertiesNV.byteLength = 0x58;

VkPhysicalDeviceMeshShaderPropertiesNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  maxDrawMeshTasksCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  maxTaskWorkGroupInvocations: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  maxTaskWorkGroupSize: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0xC
  }),
  maxTaskTotalMemorySize: Object.freeze({
    byteOffset: 0x24,
    byteLength: 0x4
  }),
  maxTaskOutputCount: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x4
  }),
  maxMeshWorkGroupInvocations: Object.freeze({
    byteOffset: 0x2C,
    byteLength: 0x4
  }),
  maxMeshWorkGroupSize: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0xC
  }),
  maxMeshTotalMemorySize: Object.freeze({
    byteOffset: 0x3C,
    byteLength: 0x4
  }),
  maxMeshOutputVertices: Object.freeze({
    byteOffset: 0x40,
    byteLength: 0x4
  }),
  maxMeshOutputPrimitives: Object.freeze({
    byteOffset: 0x44,
    byteLength: 0x4
  }),
  maxMeshMultiviewViewCount: Object.freeze({
    byteOffset: 0x48,
    byteLength: 0x4
  }),
  meshOutputPerVertexGranularity: Object.freeze({
    byteOffset: 0x4C,
    byteLength: 0x4
  }),
  meshOutputPerPrimitiveGranularity: Object.freeze({
    byteOffset: 0x50,
    byteLength: 0x4
  }),
});
/** VkDrawMeshTasksIndirectCommandNV **/
class VkDrawMeshTasksIndirectCommandNV {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x8);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    
    
    if (typeof opts === "object") {
      if (opts.taskCount !== void 0) this.taskCount = opts.taskCount;
      if (opts.firstTask !== void 0) this.firstTask = opts.firstTask;
      
    }
  }
  get taskCount() {
    return this.memoryViewUint32[0x0];
  }
  set taskCount(value) {
    this.memoryViewUint32[0x0] = value;
  }
  get firstTask() {
    return this.memoryViewUint32[0x1];
  }
  set firstTask(value) {
    this.memoryViewUint32[0x1] = value;
  }
  
};

VkDrawMeshTasksIndirectCommandNV.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDrawMeshTasksIndirectCommandNV"`);
  
  return true;
};

VkDrawMeshTasksIndirectCommandNV.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x8);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDrawMeshTasksIndirectCommandNV"`, this.memoryAddress, memoryAddress);
  
};

VkDrawMeshTasksIndirectCommandNV.byteLength = 0x8;

VkDrawMeshTasksIndirectCommandNV.memoryLayout = Object.freeze({
  taskCount: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  firstTask: Object.freeze({
    byteOffset: 0x4,
    byteLength: 0x4
  }),
});
/** VkRayTracingShaderGroupCreateInfoNV **/
class VkRayTracingShaderGroupCreateInfoNV {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x28);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    
    
    
    this.sType = 0x3B9D4E93;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.type !== void 0) this.type = opts.type;
      if (opts.generalShader !== void 0) this.generalShader = opts.generalShader;
      if (opts.closestHitShader !== void 0) this.closestHitShader = opts.closestHitShader;
      if (opts.anyHitShader !== void 0) this.anyHitShader = opts.anyHitShader;
      if (opts.intersectionShader !== void 0) this.intersectionShader = opts.intersectionShader;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkRayTracingShaderGroupCreateInfoNV.pNext' isn't allowed to be filled");
  }
  get type() {
    return this.memoryViewInt32[0x4];
  }
  set type(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get generalShader() {
    return this.memoryViewUint32[0x5];
  }
  set generalShader(value) {
    this.memoryViewUint32[0x5] = value;
  }
  get closestHitShader() {
    return this.memoryViewUint32[0x6];
  }
  set closestHitShader(value) {
    this.memoryViewUint32[0x6] = value;
  }
  get anyHitShader() {
    return this.memoryViewUint32[0x7];
  }
  set anyHitShader(value) {
    this.memoryViewUint32[0x7] = value;
  }
  get intersectionShader() {
    return this.memoryViewUint32[0x8];
  }
  set intersectionShader(value) {
    this.memoryViewUint32[0x8] = value;
  }
  
};

VkRayTracingShaderGroupCreateInfoNV.prototype.flush = function flush() {
  //console.log(`Flushing: "VkRayTracingShaderGroupCreateInfoNV"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkRayTracingShaderGroupCreateInfoNV.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x28);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkRayTracingShaderGroupCreateInfoNV"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkRayTracingShaderGroupCreateInfoNV.byteLength = 0x28;

VkRayTracingShaderGroupCreateInfoNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  type: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  generalShader: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  closestHitShader: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  anyHitShader: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  intersectionShader: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
});
/** VkRayTracingPipelineCreateInfoNV **/
class VkRayTracingPipelineCreateInfoNV {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x50);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    this._pStages = null;
    this._pStagesNative = null;
    
    this._pGroups = null;
    this._pGroupsNative = null;
    
    this._layout = null;
    this._basePipelineHandle = null;
    
    this.sType = 0x3B9D4E88;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.stageCount !== void 0) this.stageCount = opts.stageCount;
      if (opts.pStages !== void 0) this.pStages = opts.pStages;
      if (opts.groupCount !== void 0) this.groupCount = opts.groupCount;
      if (opts.pGroups !== void 0) this.pGroups = opts.pGroups;
      if (opts.maxRecursionDepth !== void 0) this.maxRecursionDepth = opts.maxRecursionDepth;
      if (opts.layout !== void 0) this.layout = opts.layout;
      if (opts.basePipelineHandle !== void 0) this.basePipelineHandle = opts.basePipelineHandle;
      if (opts.basePipelineIndex !== void 0) this.basePipelineIndex = opts.basePipelineIndex;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkRayTracingPipelineCreateInfoNV.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get stageCount() {
    return this.memoryViewUint32[0x5];
  }
  set stageCount(value) {
    this.memoryViewUint32[0x5] = value;
  }
  get pStages() {
    return this._pStages;
  }
  set pStages(value) {
    if (value !== null && value.constructor === Array) {
      this._pStages = value;
    } else if (value === null) {
      this._pStages = null;
    } else {
      throw new TypeError("Invalid type for 'VkRayTracingPipelineCreateInfoNV.pStages': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get groupCount() {
    return this.memoryViewUint32[0x8];
  }
  set groupCount(value) {
    this.memoryViewUint32[0x8] = value;
  }
  get pGroups() {
    return this._pGroups;
  }
  set pGroups(value) {
    if (value !== null && value.constructor === Array) {
      this._pGroups = value;
    } else if (value === null) {
      this._pGroups = null;
    } else {
      throw new TypeError("Invalid type for 'VkRayTracingPipelineCreateInfoNV.pGroups': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get maxRecursionDepth() {
    return this.memoryViewUint32[0xC];
  }
  set maxRecursionDepth(value) {
    this.memoryViewUint32[0xC] = value;
  }
  get layout() {
    return this._layout;
  }
  set layout(value) {
    if (value !== null && value.constructor === VkPipelineLayout) {
      
      this._layout = value;
      
      this.memoryViewBigInt64[0x7] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._layout = null;
      this.memoryViewBigInt64[0x7] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkRayTracingPipelineCreateInfoNV.layout': Expected 'VkPipelineLayout' but got '" + value.constructor.name + "'");
    }
  }
  get basePipelineHandle() {
    return this._basePipelineHandle;
  }
  set basePipelineHandle(value) {
    if (value !== null && value.constructor === VkPipeline) {
      
      this._basePipelineHandle = value;
      
      this.memoryViewBigInt64[0x8] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._basePipelineHandle = null;
      this.memoryViewBigInt64[0x8] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkRayTracingPipelineCreateInfoNV.basePipelineHandle': Expected 'VkPipeline' but got '" + value.constructor.name + "'");
    }
  }
  get basePipelineIndex() {
    return this.memoryViewInt32[0x12];
  }
  set basePipelineIndex(value) {
    this.memoryViewInt32[0x12] = value;
  }
  
};

VkRayTracingPipelineCreateInfoNV.prototype.flush = function flush() {
  //console.log(`Flushing: "VkRayTracingPipelineCreateInfoNV"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pStages !== null) {
    let array = this._pStages;
    if (array.length !== this.stageCount) {
      throw new RangeError("Invalid array length, expected length of 'stageCount' for 'VkRayTracingPipelineCreateInfoNV.pStages'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkPipelineShaderStageCreateInfo) {
        throw new TypeError("Invalid type for 'VkRayTracingPipelineCreateInfoNV.pStages[" + ii + "]': Expected 'VkPipelineShaderStageCreateInfo' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pStagesNative = nativeArray;
    this.memoryViewBigInt64[0x3] = nativeArray.address;
  }
  
  
  if (this._pGroups !== null) {
    let array = this._pGroups;
    if (array.length !== this.groupCount) {
      throw new RangeError("Invalid array length, expected length of 'groupCount' for 'VkRayTracingPipelineCreateInfoNV.pGroups'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkRayTracingShaderGroupCreateInfoNV) {
        throw new TypeError("Invalid type for 'VkRayTracingPipelineCreateInfoNV.pGroups[" + ii + "]': Expected 'VkRayTracingShaderGroupCreateInfoNV' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pGroupsNative = nativeArray;
    this.memoryViewBigInt64[0x5] = nativeArray.address;
  }
  
  return true;
};

VkRayTracingPipelineCreateInfoNV.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x50);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkRayTracingPipelineCreateInfoNV"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
  
  
};

VkRayTracingPipelineCreateInfoNV.byteLength = 0x50;

VkRayTracingPipelineCreateInfoNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  stageCount: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  pStages: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  groupCount: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  pGroups: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
  maxRecursionDepth: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  layout: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x8
  }),
  basePipelineHandle: Object.freeze({
    byteOffset: 0x40,
    byteLength: 0x8
  }),
  basePipelineIndex: Object.freeze({
    byteOffset: 0x48,
    byteLength: 0x4
  }),
});
/** VkGeometryTrianglesNV **/
class VkGeometryTrianglesNV {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x60);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    this._vertexData = null;
    
    
    
    
    this._indexData = null;
    
    
    
    this._transformData = null;
    
    this.sType = 0x3B9D4E8C;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.vertexData !== void 0) this.vertexData = opts.vertexData;
      if (opts.vertexOffset !== void 0) this.vertexOffset = opts.vertexOffset;
      if (opts.vertexCount !== void 0) this.vertexCount = opts.vertexCount;
      if (opts.vertexStride !== void 0) this.vertexStride = opts.vertexStride;
      if (opts.vertexFormat !== void 0) this.vertexFormat = opts.vertexFormat;
      if (opts.indexData !== void 0) this.indexData = opts.indexData;
      if (opts.indexOffset !== void 0) this.indexOffset = opts.indexOffset;
      if (opts.indexCount !== void 0) this.indexCount = opts.indexCount;
      if (opts.indexType !== void 0) this.indexType = opts.indexType;
      if (opts.transformData !== void 0) this.transformData = opts.transformData;
      if (opts.transformOffset !== void 0) this.transformOffset = opts.transformOffset;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkGeometryTrianglesNV.pNext' isn't allowed to be filled");
  }
  get vertexData() {
    return this._vertexData;
  }
  set vertexData(value) {
    if (value !== null && value.constructor === VkBuffer) {
      
      this._vertexData = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._vertexData = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkGeometryTrianglesNV.vertexData': Expected 'VkBuffer' but got '" + value.constructor.name + "'");
    }
  }
  get vertexOffset() {
    return this.memoryViewBigUint64[0x3];
  }
  set vertexOffset(value) {
    this.memoryViewBigUint64[0x3] = value;
  }
  get vertexCount() {
    return this.memoryViewUint32[0x8];
  }
  set vertexCount(value) {
    this.memoryViewUint32[0x8] = value;
  }
  get vertexStride() {
    return this.memoryViewBigUint64[0x5];
  }
  set vertexStride(value) {
    this.memoryViewBigUint64[0x5] = value;
  }
  get vertexFormat() {
    return this.memoryViewInt32[0xC];
  }
  set vertexFormat(value) {
    this.memoryViewInt32[0xC] = value;
  }
  get indexData() {
    return this._indexData;
  }
  set indexData(value) {
    if (value !== null && value.constructor === VkBuffer) {
      
      this._indexData = value;
      
      this.memoryViewBigInt64[0x7] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._indexData = null;
      this.memoryViewBigInt64[0x7] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkGeometryTrianglesNV.indexData': Expected 'VkBuffer' but got '" + value.constructor.name + "'");
    }
  }
  get indexOffset() {
    return this.memoryViewBigUint64[0x8];
  }
  set indexOffset(value) {
    this.memoryViewBigUint64[0x8] = value;
  }
  get indexCount() {
    return this.memoryViewUint32[0x12];
  }
  set indexCount(value) {
    this.memoryViewUint32[0x12] = value;
  }
  get indexType() {
    return this.memoryViewInt32[0x13];
  }
  set indexType(value) {
    this.memoryViewInt32[0x13] = value;
  }
  get transformData() {
    return this._transformData;
  }
  set transformData(value) {
    if (value !== null && value.constructor === VkBuffer) {
      
      this._transformData = value;
      
      this.memoryViewBigInt64[0xA] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._transformData = null;
      this.memoryViewBigInt64[0xA] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkGeometryTrianglesNV.transformData': Expected 'VkBuffer' but got '" + value.constructor.name + "'");
    }
  }
  get transformOffset() {
    return this.memoryViewBigUint64[0xB];
  }
  set transformOffset(value) {
    this.memoryViewBigUint64[0xB] = value;
  }
  
};

VkGeometryTrianglesNV.prototype.flush = function flush() {
  //console.log(`Flushing: "VkGeometryTrianglesNV"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkGeometryTrianglesNV.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x60);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkGeometryTrianglesNV"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkGeometryTrianglesNV.byteLength = 0x60;

VkGeometryTrianglesNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  vertexData: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  vertexOffset: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  vertexCount: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  vertexStride: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
  vertexFormat: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x4
  }),
  indexData: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x8
  }),
  indexOffset: Object.freeze({
    byteOffset: 0x40,
    byteLength: 0x8
  }),
  indexCount: Object.freeze({
    byteOffset: 0x48,
    byteLength: 0x4
  }),
  indexType: Object.freeze({
    byteOffset: 0x4C,
    byteLength: 0x4
  }),
  transformData: Object.freeze({
    byteOffset: 0x50,
    byteLength: 0x8
  }),
  transformOffset: Object.freeze({
    byteOffset: 0x58,
    byteLength: 0x8
  }),
});
/** VkGeometryAABBNV **/
class VkGeometryAABBNV {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x28);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
    this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    this._aabbData = null;
    
    
    
    this.sType = 0x3B9D4E8D;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.aabbData !== void 0) this.aabbData = opts.aabbData;
      if (opts.numAABBs !== void 0) this.numAABBs = opts.numAABBs;
      if (opts.stride !== void 0) this.stride = opts.stride;
      if (opts.offset !== void 0) this.offset = opts.offset;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkGeometryAABBNV.pNext' isn't allowed to be filled");
  }
  get aabbData() {
    return this._aabbData;
  }
  set aabbData(value) {
    if (value !== null && value.constructor === VkBuffer) {
      
      this._aabbData = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._aabbData = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkGeometryAABBNV.aabbData': Expected 'VkBuffer' but got '" + value.constructor.name + "'");
    }
  }
  get numAABBs() {
    return this.memoryViewUint32[0x6];
  }
  set numAABBs(value) {
    this.memoryViewUint32[0x6] = value;
  }
  get stride() {
    return this.memoryViewUint32[0x7];
  }
  set stride(value) {
    this.memoryViewUint32[0x7] = value;
  }
  get offset() {
    return this.memoryViewBigUint64[0x4];
  }
  set offset(value) {
    this.memoryViewBigUint64[0x4] = value;
  }
  
};

VkGeometryAABBNV.prototype.flush = function flush() {
  //console.log(`Flushing: "VkGeometryAABBNV"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkGeometryAABBNV.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x28);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkGeometryAABBNV"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkGeometryAABBNV.byteLength = 0x28;

VkGeometryAABBNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  aabbData: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  numAABBs: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  stride: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  offset: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
});
/** VkGeometryDataNV **/
class VkGeometryDataNV {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x88);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this._triangles = new VkGeometryTrianglesNV({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x0 });
    this._aabbs = new VkGeometryAABBNV({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x60 });
    
    if (typeof opts === "object") {
      if (opts.triangles !== void 0) this.triangles = opts.triangles;
      if (opts.aabbs !== void 0) this.aabbs = opts.aabbs;
      
    }
  }
  get triangles() {
    return this._triangles;
  }
  set triangles(value) {
    if (value !== null && value.constructor === VkGeometryTrianglesNV) {
      value.flush();
      this._triangles = value;
      this.memoryViewBigInt64[0x0] = value.memoryAddress;
      
    } else if (value === null) {
      this._triangles = null;
      this.memoryViewBigInt64[0x0] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkGeometryDataNV.triangles': Expected 'VkGeometryTrianglesNV' but got '" + value.constructor.name + "'");
    }
  }
  get aabbs() {
    return this._aabbs;
  }
  set aabbs(value) {
    if (value !== null && value.constructor === VkGeometryAABBNV) {
      value.flush();
      this._aabbs = value;
      this.memoryViewBigInt64[0xC] = value.memoryAddress;
      
    } else if (value === null) {
      this._aabbs = null;
      this.memoryViewBigInt64[0xC] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkGeometryDataNV.aabbs': Expected 'VkGeometryAABBNV' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkGeometryDataNV.prototype.flush = function flush() {
  //console.log(`Flushing: "VkGeometryDataNV"`);
  
  
  
  
  
  return true;
};

VkGeometryDataNV.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x88);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkGeometryDataNV"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
};

VkGeometryDataNV.byteLength = 0x88;

VkGeometryDataNV.memoryLayout = Object.freeze({
  triangles: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x60
  }),
  aabbs: Object.freeze({
    byteOffset: 0x60,
    byteLength: 0x28
  }),
});
/** VkGeometryNV **/
class VkGeometryNV {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0xA8);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this._geometry = new VkGeometryDataNV({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x18 });
    
    this.sType = 0x3B9D4E8B;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.geometryType !== void 0) this.geometryType = opts.geometryType;
      if (opts.geometry !== void 0) this.geometry = opts.geometry;
      if (opts.flags !== void 0) this.flags = opts.flags;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkGeometryNV.pNext' isn't allowed to be filled");
  }
  get geometryType() {
    return this.memoryViewInt32[0x4];
  }
  set geometryType(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get geometry() {
    return this._geometry;
  }
  set geometry(value) {
    if (value !== null && value.constructor === VkGeometryDataNV) {
      value.flush();
      this._geometry = value;
      this.memoryViewBigInt64[0x3] = value.memoryAddress;
      
    } else if (value === null) {
      this._geometry = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkGeometryNV.geometry': Expected 'VkGeometryDataNV' but got '" + value.constructor.name + "'");
    }
  }
  get flags() {
    return this.memoryViewInt32[0x28];
  }
  set flags(value) {
    this.memoryViewInt32[0x28] = value;
  }
  
};

VkGeometryNV.prototype.flush = function flush() {
  //console.log(`Flushing: "VkGeometryNV"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  
  return true;
};

VkGeometryNV.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0xA8);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkGeometryNV"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
};

VkGeometryNV.byteLength = 0xA8;

VkGeometryNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  geometryType: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  geometry: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x88
  }),
  flags: Object.freeze({
    byteOffset: 0xA0,
    byteLength: 0x4
  }),
});
/** VkAccelerationStructureInfoNV **/
class VkAccelerationStructureInfoNV {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x28);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    
    
    this._pGeometries = null;
    this._pGeometriesNative = null;
    this.sType = 0x3B9D4E94;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.type !== void 0) this.type = opts.type;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.instanceCount !== void 0) this.instanceCount = opts.instanceCount;
      if (opts.geometryCount !== void 0) this.geometryCount = opts.geometryCount;
      if (opts.pGeometries !== void 0) this.pGeometries = opts.pGeometries;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkAccelerationStructureInfoNV.pNext' isn't allowed to be filled");
  }
  get type() {
    return this.memoryViewInt32[0x4];
  }
  set type(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get flags() {
    return this.memoryViewInt32[0x5];
  }
  set flags(value) {
    this.memoryViewInt32[0x5] = value;
  }
  get instanceCount() {
    return this.memoryViewUint32[0x6];
  }
  set instanceCount(value) {
    this.memoryViewUint32[0x6] = value;
  }
  get geometryCount() {
    return this.memoryViewUint32[0x7];
  }
  set geometryCount(value) {
    this.memoryViewUint32[0x7] = value;
  }
  get pGeometries() {
    return this._pGeometries;
  }
  set pGeometries(value) {
    if (value !== null && value.constructor === Array) {
      this._pGeometries = value;
    } else if (value === null) {
      this._pGeometries = null;
    } else {
      throw new TypeError("Invalid type for 'VkAccelerationStructureInfoNV.pGeometries': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkAccelerationStructureInfoNV.prototype.flush = function flush() {
  //console.log(`Flushing: "VkAccelerationStructureInfoNV"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pGeometries !== null) {
    let array = this._pGeometries;
    if (array.length !== this.geometryCount) {
      throw new RangeError("Invalid array length, expected length of 'geometryCount' for 'VkAccelerationStructureInfoNV.pGeometries'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkGeometryNV) {
        throw new TypeError("Invalid type for 'VkAccelerationStructureInfoNV.pGeometries[" + ii + "]': Expected 'VkGeometryNV' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pGeometriesNative = nativeArray;
    this.memoryViewBigInt64[0x4] = nativeArray.address;
  }
  
  return true;
};

VkAccelerationStructureInfoNV.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x28);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkAccelerationStructureInfoNV"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
};

VkAccelerationStructureInfoNV.byteLength = 0x28;

VkAccelerationStructureInfoNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  type: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  flags: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  instanceCount: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  geometryCount: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  pGeometries: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
});
/** VkAccelerationStructureCreateInfoNV **/
class VkAccelerationStructureCreateInfoNV {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x40);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this._info = new VkAccelerationStructureInfoNV({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x18 });
    this.sType = 0x3B9D4E89;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.compactedSize !== void 0) this.compactedSize = opts.compactedSize;
      if (opts.info !== void 0) this.info = opts.info;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkAccelerationStructureCreateInfoNV.pNext' isn't allowed to be filled");
  }
  get compactedSize() {
    return this.memoryViewBigUint64[0x2];
  }
  set compactedSize(value) {
    this.memoryViewBigUint64[0x2] = value;
  }
  get info() {
    return this._info;
  }
  set info(value) {
    if (value !== null && value.constructor === VkAccelerationStructureInfoNV) {
      value.flush();
      this._info = value;
      this.memoryViewBigInt64[0x3] = value.memoryAddress;
      
    } else if (value === null) {
      this._info = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkAccelerationStructureCreateInfoNV.info': Expected 'VkAccelerationStructureInfoNV' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkAccelerationStructureCreateInfoNV.prototype.flush = function flush() {
  //console.log(`Flushing: "VkAccelerationStructureCreateInfoNV"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  
  return true;
};

VkAccelerationStructureCreateInfoNV.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x40);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkAccelerationStructureCreateInfoNV"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
};

VkAccelerationStructureCreateInfoNV.byteLength = 0x40;

VkAccelerationStructureCreateInfoNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  compactedSize: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  info: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x28
  }),
});
/** VkBindAccelerationStructureMemoryInfoNV **/
class VkBindAccelerationStructureMemoryInfoNV {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x38);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    this._accelerationStructure = null;
    this._memory = null;
    
    
    this._pDeviceIndices = null;
    this.sType = 0x3B9D4E8E;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.accelerationStructure !== void 0) this.accelerationStructure = opts.accelerationStructure;
      if (opts.memory !== void 0) this.memory = opts.memory;
      if (opts.memoryOffset !== void 0) this.memoryOffset = opts.memoryOffset;
      if (opts.deviceIndexCount !== void 0) this.deviceIndexCount = opts.deviceIndexCount;
      if (opts.pDeviceIndices !== void 0) this.pDeviceIndices = opts.pDeviceIndices;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkBindAccelerationStructureMemoryInfoNV.pNext' isn't allowed to be filled");
  }
  get accelerationStructure() {
    return this._accelerationStructure;
  }
  set accelerationStructure(value) {
    if (value !== null && value.constructor === VkAccelerationStructureNV) {
      
      this._accelerationStructure = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._accelerationStructure = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkBindAccelerationStructureMemoryInfoNV.accelerationStructure': Expected 'VkAccelerationStructureNV' but got '" + value.constructor.name + "'");
    }
  }
  get memory() {
    return this._memory;
  }
  set memory(value) {
    if (value !== null && value.constructor === VkDeviceMemory) {
      
      this._memory = value;
      
      this.memoryViewBigInt64[0x3] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._memory = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkBindAccelerationStructureMemoryInfoNV.memory': Expected 'VkDeviceMemory' but got '" + value.constructor.name + "'");
    }
  }
  get memoryOffset() {
    return this.memoryViewBigUint64[0x4];
  }
  set memoryOffset(value) {
    this.memoryViewBigUint64[0x4] = value;
  }
  get deviceIndexCount() {
    return this.memoryViewUint32[0xA];
  }
  set deviceIndexCount(value) {
    this.memoryViewUint32[0xA] = value;
  }
  get pDeviceIndices() {
    return this._pDeviceIndices;
  }
  set pDeviceIndices(value) {
    if (value !== null && value.constructor === Uint32Array) {
      this._pDeviceIndices = value;
      this.memoryViewBigInt64[0x6] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pDeviceIndices = null;
      this.memoryViewBigInt64[0x6] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkBindAccelerationStructureMemoryInfoNV.pDeviceIndices': Expected 'Uint32Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkBindAccelerationStructureMemoryInfoNV.prototype.flush = function flush() {
  //console.log(`Flushing: "VkBindAccelerationStructureMemoryInfoNV"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkBindAccelerationStructureMemoryInfoNV.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x38);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkBindAccelerationStructureMemoryInfoNV"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkBindAccelerationStructureMemoryInfoNV.byteLength = 0x38;

VkBindAccelerationStructureMemoryInfoNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  accelerationStructure: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  memory: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  memoryOffset: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
  deviceIndexCount: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x4
  }),
  pDeviceIndices: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x8
  }),
});
/** VkWriteDescriptorSetAccelerationStructureNV **/
class VkWriteDescriptorSetAccelerationStructureNV {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this._pAccelerationStructures = null;
    this._pAccelerationStructuresNative = null;
    this.sType = 0x3B9D4E8F;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.accelerationStructureCount !== void 0) this.accelerationStructureCount = opts.accelerationStructureCount;
      if (opts.pAccelerationStructures !== void 0) this.pAccelerationStructures = opts.pAccelerationStructures;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkWriteDescriptorSetAccelerationStructureNV.pNext' isn't allowed to be filled");
  }
  get accelerationStructureCount() {
    return this.memoryViewUint32[0x4];
  }
  set accelerationStructureCount(value) {
    this.memoryViewUint32[0x4] = value;
  }
  get pAccelerationStructures() {
    return this._pAccelerationStructures;
  }
  set pAccelerationStructures(value) {
    if (value !== null && value.constructor === Array) {
      this._pAccelerationStructures = value;
    } else if (value === null) {
      this._pAccelerationStructures = null;
    } else {
      throw new TypeError("Invalid type for 'VkWriteDescriptorSetAccelerationStructureNV.pAccelerationStructures': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkWriteDescriptorSetAccelerationStructureNV.prototype.flush = function flush() {
  //console.log(`Flushing: "VkWriteDescriptorSetAccelerationStructureNV"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pAccelerationStructures !== null) {
    let array = this._pAccelerationStructures;
    if (array.length !== this.accelerationStructureCount) {
      throw new RangeError("Invalid array length, expected length of 'accelerationStructureCount' for 'VkWriteDescriptorSetAccelerationStructureNV.pAccelerationStructures'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkAccelerationStructureNV) {
        throw new TypeError("Invalid type for 'VkWriteDescriptorSetAccelerationStructureNV.pAccelerationStructures[" + ii + "]': Expected 'VkAccelerationStructureNV' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pAccelerationStructuresNative = nativeArray;
    this.memoryViewBigInt64[0x3] = nativeArray.address;
  }
  
  return true;
};

VkWriteDescriptorSetAccelerationStructureNV.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkWriteDescriptorSetAccelerationStructureNV"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
};

VkWriteDescriptorSetAccelerationStructureNV.byteLength = 0x20;

VkWriteDescriptorSetAccelerationStructureNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  accelerationStructureCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pAccelerationStructures: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkAccelerationStructureMemoryRequirementsInfoNV **/
class VkAccelerationStructureMemoryRequirementsInfoNV {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this._accelerationStructure = null;
    this.sType = 0x3B9D4E90;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.type !== void 0) this.type = opts.type;
      if (opts.accelerationStructure !== void 0) this.accelerationStructure = opts.accelerationStructure;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkAccelerationStructureMemoryRequirementsInfoNV.pNext' isn't allowed to be filled");
  }
  get type() {
    return this.memoryViewInt32[0x4];
  }
  set type(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get accelerationStructure() {
    return this._accelerationStructure;
  }
  set accelerationStructure(value) {
    if (value !== null && value.constructor === VkAccelerationStructureNV) {
      
      this._accelerationStructure = value;
      
      this.memoryViewBigInt64[0x3] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._accelerationStructure = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkAccelerationStructureMemoryRequirementsInfoNV.accelerationStructure': Expected 'VkAccelerationStructureNV' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkAccelerationStructureMemoryRequirementsInfoNV.prototype.flush = function flush() {
  //console.log(`Flushing: "VkAccelerationStructureMemoryRequirementsInfoNV"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkAccelerationStructureMemoryRequirementsInfoNV.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkAccelerationStructureMemoryRequirementsInfoNV"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkAccelerationStructureMemoryRequirementsInfoNV.byteLength = 0x20;

VkAccelerationStructureMemoryRequirementsInfoNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  type: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  accelerationStructure: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkPhysicalDeviceRayTracingPropertiesNV **/
class VkPhysicalDeviceRayTracingPropertiesNV {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x40);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
    this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x40) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x40) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x40) / 0x4);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x40) / 0x8);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    
    
    
    
    
    
    
    
    this.sType = 0x3B9D4E91;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceRayTracingPropertiesNV.pNext' isn't allowed to be filled");
  }
  get shaderGroupHandleSize() {
    return this.memoryViewUint32[0x4];
  }
  get maxRecursionDepth() {
    return this.memoryViewUint32[0x5];
  }
  get maxShaderGroupStride() {
    return this.memoryViewUint32[0x6];
  }
  get shaderGroupBaseAlignment() {
    return this.memoryViewUint32[0x7];
  }
  get maxGeometryCount() {
    return this.memoryViewBigUint64[0x4];
  }
  get maxInstanceCount() {
    return this.memoryViewBigUint64[0x5];
  }
  get maxTriangleCount() {
    return this.memoryViewBigUint64[0x6];
  }
  get maxDescriptorSetAccelerationStructures() {
    return this.memoryViewUint32[0xE];
  }
  
};

VkPhysicalDeviceRayTracingPropertiesNV.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceRayTracingPropertiesNV"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceRayTracingPropertiesNV.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x40);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceRayTracingPropertiesNV"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x40), 0x0);
  
  
};

VkPhysicalDeviceRayTracingPropertiesNV.byteLength = 0x40;

VkPhysicalDeviceRayTracingPropertiesNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  shaderGroupHandleSize: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  maxRecursionDepth: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  maxShaderGroupStride: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  shaderGroupBaseAlignment: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  maxGeometryCount: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
  maxInstanceCount: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x8
  }),
  maxTriangleCount: Object.freeze({
    byteOffset: 0x30,
    byteLength: 0x8
  }),
  maxDescriptorSetAccelerationStructures: Object.freeze({
    byteOffset: 0x38,
    byteLength: 0x4
  }),
});
/** VkDrmFormatModifierPropertiesListEXT **/
class VkDrmFormatModifierPropertiesListEXT {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    
    this._pDrmFormatModifierProperties = null;
    this._pDrmFormatModifierPropertiesNative = null;
    this.sType = 0x3B9D3330;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDrmFormatModifierPropertiesListEXT.pNext' isn't allowed to be filled");
  }
  get drmFormatModifierCount() {
    return this.memoryViewUint32[0x4];
  }
  get pDrmFormatModifierProperties() {
    return this._pDrmFormatModifierProperties;
  }
  
};

VkDrmFormatModifierPropertiesListEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDrmFormatModifierPropertiesListEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDrmFormatModifierPropertiesListEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDrmFormatModifierPropertiesListEXT"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x20), 0x0);
  
  
  
  
};

VkDrmFormatModifierPropertiesListEXT.byteLength = 0x20;

VkDrmFormatModifierPropertiesListEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  drmFormatModifierCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pDrmFormatModifierProperties: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkDrmFormatModifierPropertiesEXT **/
class VkDrmFormatModifierPropertiesEXT {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x10);
    this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x10) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x10) / 0x4);
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x10) / 0x4);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    
    
    
    if (typeof opts === "object") {
      
    }
  }
  get drmFormatModifier() {
    return this.memoryViewBigUint64[0x0];
  }
  get drmFormatModifierPlaneCount() {
    return this.memoryViewUint32[0x2];
  }
  get drmFormatModifierTilingFeatures() {
    return this.memoryViewInt32[0x3];
  }
  
};

VkDrmFormatModifierPropertiesEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDrmFormatModifierPropertiesEXT"`);
  
  return true;
};

VkDrmFormatModifierPropertiesEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x10);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDrmFormatModifierPropertiesEXT"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x10), 0x0);
};

VkDrmFormatModifierPropertiesEXT.byteLength = 0x10;

VkDrmFormatModifierPropertiesEXT.memoryLayout = Object.freeze({
  drmFormatModifier: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x8
  }),
  drmFormatModifierPlaneCount: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x4
  }),
  drmFormatModifierTilingFeatures: Object.freeze({
    byteOffset: 0xC,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceImageDrmFormatModifierInfoEXT **/
class VkPhysicalDeviceImageDrmFormatModifierInfoEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x28);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    
    this._pQueueFamilyIndices = null;
    this.sType = 0x3B9D3332;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.drmFormatModifier !== void 0) this.drmFormatModifier = opts.drmFormatModifier;
      if (opts.sharingMode !== void 0) this.sharingMode = opts.sharingMode;
      if (opts.queueFamilyIndexCount !== void 0) this.queueFamilyIndexCount = opts.queueFamilyIndexCount;
      if (opts.pQueueFamilyIndices !== void 0) this.pQueueFamilyIndices = opts.pQueueFamilyIndices;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceImageDrmFormatModifierInfoEXT.pNext' isn't allowed to be filled");
  }
  get drmFormatModifier() {
    return this.memoryViewBigUint64[0x2];
  }
  set drmFormatModifier(value) {
    this.memoryViewBigUint64[0x2] = value;
  }
  get sharingMode() {
    return this.memoryViewInt32[0x6];
  }
  set sharingMode(value) {
    this.memoryViewInt32[0x6] = value;
  }
  get queueFamilyIndexCount() {
    return this.memoryViewUint32[0x7];
  }
  set queueFamilyIndexCount(value) {
    this.memoryViewUint32[0x7] = value;
  }
  get pQueueFamilyIndices() {
    return this._pQueueFamilyIndices;
  }
  set pQueueFamilyIndices(value) {
    if (value !== null && value.constructor === Uint32Array) {
      this._pQueueFamilyIndices = value;
      this.memoryViewBigInt64[0x4] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pQueueFamilyIndices = null;
      this.memoryViewBigInt64[0x4] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkPhysicalDeviceImageDrmFormatModifierInfoEXT.pQueueFamilyIndices': Expected 'Uint32Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkPhysicalDeviceImageDrmFormatModifierInfoEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceImageDrmFormatModifierInfoEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceImageDrmFormatModifierInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x28);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceImageDrmFormatModifierInfoEXT"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPhysicalDeviceImageDrmFormatModifierInfoEXT.byteLength = 0x28;

VkPhysicalDeviceImageDrmFormatModifierInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  drmFormatModifier: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  sharingMode: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  queueFamilyIndexCount: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  pQueueFamilyIndices: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
});
/** VkImageDrmFormatModifierListCreateInfoEXT **/
class VkImageDrmFormatModifierListCreateInfoEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this._pDrmFormatModifiers = null;
    this.sType = 0x3B9D3333;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.drmFormatModifierCount !== void 0) this.drmFormatModifierCount = opts.drmFormatModifierCount;
      if (opts.pDrmFormatModifiers !== void 0) this.pDrmFormatModifiers = opts.pDrmFormatModifiers;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkImageDrmFormatModifierListCreateInfoEXT.pNext' isn't allowed to be filled");
  }
  get drmFormatModifierCount() {
    return this.memoryViewUint32[0x4];
  }
  set drmFormatModifierCount(value) {
    this.memoryViewUint32[0x4] = value;
  }
  get pDrmFormatModifiers() {
    return this._pDrmFormatModifiers;
  }
  set pDrmFormatModifiers(value) {
    if (value !== null && value.constructor === BigUint64Array) {
      this._pDrmFormatModifiers = value;
      this.memoryViewBigInt64[0x3] = getAddressFromArrayBuffer(value.buffer);
    } else if (value === null) {
      this._pDrmFormatModifiers = null;
      this.memoryViewBigInt64[0x3] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkImageDrmFormatModifierListCreateInfoEXT.pDrmFormatModifiers': Expected 'BigUint64Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkImageDrmFormatModifierListCreateInfoEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkImageDrmFormatModifierListCreateInfoEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkImageDrmFormatModifierListCreateInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkImageDrmFormatModifierListCreateInfoEXT"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkImageDrmFormatModifierListCreateInfoEXT.byteLength = 0x20;

VkImageDrmFormatModifierListCreateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  drmFormatModifierCount: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  pDrmFormatModifiers: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
});
/** VkImageDrmFormatModifierExplicitCreateInfoEXT **/
class VkImageDrmFormatModifierExplicitCreateInfoEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x28);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    this._pPlaneLayouts = null;
    this._pPlaneLayoutsNative = null;
    this.sType = 0x3B9D3334;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.drmFormatModifier !== void 0) this.drmFormatModifier = opts.drmFormatModifier;
      if (opts.drmFormatModifierPlaneCount !== void 0) this.drmFormatModifierPlaneCount = opts.drmFormatModifierPlaneCount;
      if (opts.pPlaneLayouts !== void 0) this.pPlaneLayouts = opts.pPlaneLayouts;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkImageDrmFormatModifierExplicitCreateInfoEXT.pNext' isn't allowed to be filled");
  }
  get drmFormatModifier() {
    return this.memoryViewBigUint64[0x2];
  }
  set drmFormatModifier(value) {
    this.memoryViewBigUint64[0x2] = value;
  }
  get drmFormatModifierPlaneCount() {
    return this.memoryViewUint32[0x6];
  }
  set drmFormatModifierPlaneCount(value) {
    this.memoryViewUint32[0x6] = value;
  }
  get pPlaneLayouts() {
    return this._pPlaneLayouts;
  }
  set pPlaneLayouts(value) {
    if (value !== null && value.constructor === Array) {
      this._pPlaneLayouts = value;
    } else if (value === null) {
      this._pPlaneLayouts = null;
    } else {
      throw new TypeError("Invalid type for 'VkImageDrmFormatModifierExplicitCreateInfoEXT.pPlaneLayouts': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkImageDrmFormatModifierExplicitCreateInfoEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkImageDrmFormatModifierExplicitCreateInfoEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  if (this._pPlaneLayouts !== null) {
    let array = this._pPlaneLayouts;
    if (array.length !== this.drmFormatModifierPlaneCount) {
      throw new RangeError("Invalid array length, expected length of 'drmFormatModifierPlaneCount' for 'VkImageDrmFormatModifierExplicitCreateInfoEXT.pPlaneLayouts'");
      return false;
    }
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== VkSubresourceLayout) {
        throw new TypeError("Invalid type for 'VkImageDrmFormatModifierExplicitCreateInfoEXT.pPlaneLayouts[" + ii + "]': Expected 'VkSubresourceLayout' but got '" + array[ii].constructor.name + "'");
        return false;
      }
      if (!array[ii].flush()) return false;
    };
    
    let nativeArray = new NativeObjectArray(array);
    this._pPlaneLayoutsNative = nativeArray;
    this.memoryViewBigInt64[0x4] = nativeArray.address;
  }
  
  return true;
};

VkImageDrmFormatModifierExplicitCreateInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x28);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkImageDrmFormatModifierExplicitCreateInfoEXT"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
};

VkImageDrmFormatModifierExplicitCreateInfoEXT.byteLength = 0x28;

VkImageDrmFormatModifierExplicitCreateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  drmFormatModifier: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  drmFormatModifierPlaneCount: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  pPlaneLayouts: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x8
  }),
});
/** VkImageDrmFormatModifierPropertiesEXT **/
class VkImageDrmFormatModifierPropertiesEXT {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    
    this.sType = 0x3B9D3335;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkImageDrmFormatModifierPropertiesEXT.pNext' isn't allowed to be filled");
  }
  get drmFormatModifier() {
    return this.memoryViewBigUint64[0x2];
  }
  
};

VkImageDrmFormatModifierPropertiesEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkImageDrmFormatModifierPropertiesEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkImageDrmFormatModifierPropertiesEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkImageDrmFormatModifierPropertiesEXT"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x18), 0x0);
  
  
};

VkImageDrmFormatModifierPropertiesEXT.byteLength = 0x18;

VkImageDrmFormatModifierPropertiesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  drmFormatModifier: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
});
/** VkImageStencilUsageCreateInfoEXT **/
class VkImageStencilUsageCreateInfoEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = 0x3B9E8AF0;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.stencilUsage !== void 0) this.stencilUsage = opts.stencilUsage;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkImageStencilUsageCreateInfoEXT.pNext' isn't allowed to be filled");
  }
  get stencilUsage() {
    return this.memoryViewInt32[0x4];
  }
  set stencilUsage(value) {
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkImageStencilUsageCreateInfoEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkImageStencilUsageCreateInfoEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkImageStencilUsageCreateInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkImageStencilUsageCreateInfoEXT"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkImageStencilUsageCreateInfoEXT.byteLength = 0x18;

VkImageStencilUsageCreateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  stencilUsage: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkDeviceMemoryOverallocationCreateInfoAMD **/
class VkDeviceMemoryOverallocationCreateInfoAMD {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = 0x3B9DAC48;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.overallocationBehavior !== void 0) this.overallocationBehavior = opts.overallocationBehavior;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkDeviceMemoryOverallocationCreateInfoAMD.pNext' isn't allowed to be filled");
  }
  get overallocationBehavior() {
    return this.memoryViewInt32[0x4];
  }
  set overallocationBehavior(value) {
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkDeviceMemoryOverallocationCreateInfoAMD.prototype.flush = function flush() {
  //console.log(`Flushing: "VkDeviceMemoryOverallocationCreateInfoAMD"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkDeviceMemoryOverallocationCreateInfoAMD.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkDeviceMemoryOverallocationCreateInfoAMD"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkDeviceMemoryOverallocationCreateInfoAMD.byteLength = 0x18;

VkDeviceMemoryOverallocationCreateInfoAMD.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  overallocationBehavior: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceFragmentDensityMapFeaturesEXT **/
class VkPhysicalDeviceFragmentDensityMapFeaturesEXT {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x20) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x20) / 0x4);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    
    
    
    this.sType = 0x3B9E1D90;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceFragmentDensityMapFeaturesEXT.pNext' isn't allowed to be filled");
  }
  get fragmentDensityMap() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  get fragmentDensityMapDynamic() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  get fragmentDensityMapNonSubsampledImages() {
    return this.memoryViewUint32[0x6] !== 0;
  }
  
};

VkPhysicalDeviceFragmentDensityMapFeaturesEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceFragmentDensityMapFeaturesEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceFragmentDensityMapFeaturesEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceFragmentDensityMapFeaturesEXT"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x20), 0x0);
  
  
};

VkPhysicalDeviceFragmentDensityMapFeaturesEXT.byteLength = 0x20;

VkPhysicalDeviceFragmentDensityMapFeaturesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  fragmentDensityMap: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  fragmentDensityMapDynamic: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  fragmentDensityMapNonSubsampledImages: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceFragmentDensityMapPropertiesEXT **/
class VkPhysicalDeviceFragmentDensityMapPropertiesEXT {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x28);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x28) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x28) / 0x4);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    this._minFragmentDensityTexelSize = new VkExtent2D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x10 });
    this._maxFragmentDensityTexelSize = new VkExtent2D({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x18 });
    
    this.sType = 0x3B9E1D91;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceFragmentDensityMapPropertiesEXT.pNext' isn't allowed to be filled");
  }
  get minFragmentDensityTexelSize() {
    return this._minFragmentDensityTexelSize;
  }
  get maxFragmentDensityTexelSize() {
    return this._maxFragmentDensityTexelSize;
  }
  get fragmentDensityInvocations() {
    return this.memoryViewUint32[0x8] !== 0;
  }
  
};

VkPhysicalDeviceFragmentDensityMapPropertiesEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceFragmentDensityMapPropertiesEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceFragmentDensityMapPropertiesEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x28);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceFragmentDensityMapPropertiesEXT"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x28), 0x0);
  
  
  
  
  
  
};

VkPhysicalDeviceFragmentDensityMapPropertiesEXT.byteLength = 0x28;

VkPhysicalDeviceFragmentDensityMapPropertiesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  minFragmentDensityTexelSize: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
  maxFragmentDensityTexelSize: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x8
  }),
  fragmentDensityInvocations: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
});
/** VkRenderPassFragmentDensityMapCreateInfoEXT **/
class VkRenderPassFragmentDensityMapCreateInfoEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    this._fragmentDensityMapAttachment = new VkAttachmentReference({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x10 });
    this.sType = 0x3B9E1D92;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.fragmentDensityMapAttachment !== void 0) this.fragmentDensityMapAttachment = opts.fragmentDensityMapAttachment;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkRenderPassFragmentDensityMapCreateInfoEXT.pNext' isn't allowed to be filled");
  }
  get fragmentDensityMapAttachment() {
    return this._fragmentDensityMapAttachment;
  }
  set fragmentDensityMapAttachment(value) {
    if (value !== null && value.constructor === VkAttachmentReference) {
      value.flush();
      this._fragmentDensityMapAttachment = value;
      this.memoryViewBigInt64[0x2] = value.memoryAddress;
      
    } else if (value === null) {
      this._fragmentDensityMapAttachment = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkRenderPassFragmentDensityMapCreateInfoEXT.fragmentDensityMapAttachment': Expected 'VkAttachmentReference' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkRenderPassFragmentDensityMapCreateInfoEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkRenderPassFragmentDensityMapCreateInfoEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  
  
  return true;
};

VkRenderPassFragmentDensityMapCreateInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkRenderPassFragmentDensityMapCreateInfoEXT"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
};

VkRenderPassFragmentDensityMapCreateInfoEXT.byteLength = 0x18;

VkRenderPassFragmentDensityMapCreateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  fragmentDensityMapAttachment: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
});
/** VkPhysicalDeviceScalarBlockLayoutFeaturesEXT **/
class VkPhysicalDeviceScalarBlockLayoutFeaturesEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = 0x3B9E2948;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.scalarBlockLayout !== void 0) this.scalarBlockLayout = opts.scalarBlockLayout;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceScalarBlockLayoutFeaturesEXT.pNext' isn't allowed to be filled");
  }
  get scalarBlockLayout() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set scalarBlockLayout(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  
};

VkPhysicalDeviceScalarBlockLayoutFeaturesEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceScalarBlockLayoutFeaturesEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceScalarBlockLayoutFeaturesEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceScalarBlockLayoutFeaturesEXT"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPhysicalDeviceScalarBlockLayoutFeaturesEXT.byteLength = 0x18;

VkPhysicalDeviceScalarBlockLayoutFeaturesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  scalarBlockLayout: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceDepthClipEnableFeaturesEXT **/
class VkPhysicalDeviceDepthClipEnableFeaturesEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = 0x3B9C5870;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.depthClipEnable !== void 0) this.depthClipEnable = opts.depthClipEnable;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceDepthClipEnableFeaturesEXT.pNext' isn't allowed to be filled");
  }
  get depthClipEnable() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set depthClipEnable(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  
};

VkPhysicalDeviceDepthClipEnableFeaturesEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceDepthClipEnableFeaturesEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceDepthClipEnableFeaturesEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceDepthClipEnableFeaturesEXT"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPhysicalDeviceDepthClipEnableFeaturesEXT.byteLength = 0x18;

VkPhysicalDeviceDepthClipEnableFeaturesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  depthClipEnable: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPipelineRasterizationDepthClipStateCreateInfoEXT **/
class VkPipelineRasterizationDepthClipStateCreateInfoEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    this.sType = 0x3B9C5871;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.depthClipEnable !== void 0) this.depthClipEnable = opts.depthClipEnable;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPipelineRasterizationDepthClipStateCreateInfoEXT.pNext' isn't allowed to be filled");
  }
  get flags() {
    return this.memoryViewInt32[0x4];
  }
  set flags(value) {
    this.memoryViewInt32[0x4] = value;
  }
  get depthClipEnable() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  set depthClipEnable(value) {
    this.memoryViewUint32[0x5] = value | 0;
  }
  
};

VkPipelineRasterizationDepthClipStateCreateInfoEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPipelineRasterizationDepthClipStateCreateInfoEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPipelineRasterizationDepthClipStateCreateInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPipelineRasterizationDepthClipStateCreateInfoEXT"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPipelineRasterizationDepthClipStateCreateInfoEXT.byteLength = 0x18;

VkPipelineRasterizationDepthClipStateCreateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  flags: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  depthClipEnable: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceMemoryBudgetPropertiesEXT **/
class VkPhysicalDeviceMemoryBudgetPropertiesEXT {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x110);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x110) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x110) / 0x8);
      this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x110) / 0x8);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    this._heapBudget = [...Array(16)].fill(0x0);
    this._heapUsage = [...Array(16)].fill(0x0);
    this.sType = 0x3B9E67C8;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceMemoryBudgetPropertiesEXT.pNext' isn't allowed to be filled");
  }
  get heapBudget() {
    return [
      this.memoryViewBigUint64[0x2],
      this.memoryViewBigUint64[0x3],
      this.memoryViewBigUint64[0x4],
      this.memoryViewBigUint64[0x5],
      this.memoryViewBigUint64[0x6],
      this.memoryViewBigUint64[0x7],
      this.memoryViewBigUint64[0x8],
      this.memoryViewBigUint64[0x9],
      this.memoryViewBigUint64[0xA],
      this.memoryViewBigUint64[0xB],
      this.memoryViewBigUint64[0xC],
      this.memoryViewBigUint64[0xD],
      this.memoryViewBigUint64[0xE],
      this.memoryViewBigUint64[0xF],
      this.memoryViewBigUint64[0x10],
      this.memoryViewBigUint64[0x11]
    ];
  }
  get heapUsage() {
    return [
      this.memoryViewBigUint64[0x12],
      this.memoryViewBigUint64[0x13],
      this.memoryViewBigUint64[0x14],
      this.memoryViewBigUint64[0x15],
      this.memoryViewBigUint64[0x16],
      this.memoryViewBigUint64[0x17],
      this.memoryViewBigUint64[0x18],
      this.memoryViewBigUint64[0x19],
      this.memoryViewBigUint64[0x1A],
      this.memoryViewBigUint64[0x1B],
      this.memoryViewBigUint64[0x1C],
      this.memoryViewBigUint64[0x1D],
      this.memoryViewBigUint64[0x1E],
      this.memoryViewBigUint64[0x1F],
      this.memoryViewBigUint64[0x20],
      this.memoryViewBigUint64[0x21]
    ];
  }
  
};

VkPhysicalDeviceMemoryBudgetPropertiesEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceMemoryBudgetPropertiesEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceMemoryBudgetPropertiesEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x110);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceMemoryBudgetPropertiesEXT"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x110), 0x0);
  
  
  
  
  
  
};

VkPhysicalDeviceMemoryBudgetPropertiesEXT.byteLength = 0x110;

VkPhysicalDeviceMemoryBudgetPropertiesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  heapBudget: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x80
  }),
  heapUsage: Object.freeze({
    byteOffset: 0x90,
    byteLength: 0x80
  }),
});
/** VkPhysicalDeviceMemoryPriorityFeaturesEXT **/
class VkPhysicalDeviceMemoryPriorityFeaturesEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = 0x3B9E6BB0;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.memoryPriority !== void 0) this.memoryPriority = opts.memoryPriority;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceMemoryPriorityFeaturesEXT.pNext' isn't allowed to be filled");
  }
  get memoryPriority() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set memoryPriority(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  
};

VkPhysicalDeviceMemoryPriorityFeaturesEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceMemoryPriorityFeaturesEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceMemoryPriorityFeaturesEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceMemoryPriorityFeaturesEXT"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPhysicalDeviceMemoryPriorityFeaturesEXT.byteLength = 0x18;

VkPhysicalDeviceMemoryPriorityFeaturesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  memoryPriority: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkMemoryPriorityAllocateInfoEXT **/
class VkMemoryPriorityAllocateInfoEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewFloat32 = new Float32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = 0x3B9E6BB1;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.priority !== void 0) this.priority = opts.priority;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkMemoryPriorityAllocateInfoEXT.pNext' isn't allowed to be filled");
  }
  get priority() {
    return this.memoryViewFloat32[0x4];
  }
  set priority(value) {
    this.memoryViewFloat32[0x4] = value;
  }
  
};

VkMemoryPriorityAllocateInfoEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkMemoryPriorityAllocateInfoEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkMemoryPriorityAllocateInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkMemoryPriorityAllocateInfoEXT"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkMemoryPriorityAllocateInfoEXT.byteLength = 0x18;

VkMemoryPriorityAllocateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  priority: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceBufferAddressFeaturesEXT **/
class VkPhysicalDeviceBufferAddressFeaturesEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x20);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    
    this.sType = 0x3B9E8320;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.bufferDeviceAddress !== void 0) this.bufferDeviceAddress = opts.bufferDeviceAddress;
      if (opts.bufferDeviceAddressCaptureReplay !== void 0) this.bufferDeviceAddressCaptureReplay = opts.bufferDeviceAddressCaptureReplay;
      if (opts.bufferDeviceAddressMultiDevice !== void 0) this.bufferDeviceAddressMultiDevice = opts.bufferDeviceAddressMultiDevice;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceBufferAddressFeaturesEXT.pNext' isn't allowed to be filled");
  }
  get bufferDeviceAddress() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set bufferDeviceAddress(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  get bufferDeviceAddressCaptureReplay() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  set bufferDeviceAddressCaptureReplay(value) {
    this.memoryViewUint32[0x5] = value | 0;
  }
  get bufferDeviceAddressMultiDevice() {
    return this.memoryViewUint32[0x6] !== 0;
  }
  set bufferDeviceAddressMultiDevice(value) {
    this.memoryViewUint32[0x6] = value | 0;
  }
  
};

VkPhysicalDeviceBufferAddressFeaturesEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceBufferAddressFeaturesEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceBufferAddressFeaturesEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x20);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceBufferAddressFeaturesEXT"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPhysicalDeviceBufferAddressFeaturesEXT.byteLength = 0x20;

VkPhysicalDeviceBufferAddressFeaturesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  bufferDeviceAddress: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  bufferDeviceAddressCaptureReplay: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  bufferDeviceAddressMultiDevice: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
});
/** VkBufferDeviceAddressInfoEXT **/
class VkBufferDeviceAddressInfoEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    this._buffer = null;
    this.sType = 0x3B9E8321;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.buffer !== void 0) this.buffer = opts.buffer;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkBufferDeviceAddressInfoEXT.pNext' isn't allowed to be filled");
  }
  get buffer() {
    return this._buffer;
  }
  set buffer(value) {
    if (value !== null && value.constructor === VkBuffer) {
      
      this._buffer = value;
      
      this.memoryViewBigInt64[0x2] = value.memoryViewBigInt64[0];
    } else if (value === null) {
      this._buffer = null;
      this.memoryViewBigInt64[0x2] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkBufferDeviceAddressInfoEXT.buffer': Expected 'VkBuffer' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkBufferDeviceAddressInfoEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkBufferDeviceAddressInfoEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkBufferDeviceAddressInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkBufferDeviceAddressInfoEXT"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkBufferDeviceAddressInfoEXT.byteLength = 0x18;

VkBufferDeviceAddressInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  buffer: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
});
/** VkBufferDeviceAddressCreateInfoEXT **/
class VkBufferDeviceAddressCreateInfoEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewBigUint64 = new BigUint64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = 0x3B9E8322;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.deviceAddress !== void 0) this.deviceAddress = opts.deviceAddress;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkBufferDeviceAddressCreateInfoEXT.pNext' isn't allowed to be filled");
  }
  get deviceAddress() {
    return this.memoryViewBigUint64[0x2];
  }
  set deviceAddress(value) {
    this.memoryViewBigUint64[0x2] = value;
  }
  
};

VkBufferDeviceAddressCreateInfoEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkBufferDeviceAddressCreateInfoEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkBufferDeviceAddressCreateInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkBufferDeviceAddressCreateInfoEXT"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkBufferDeviceAddressCreateInfoEXT.byteLength = 0x18;

VkBufferDeviceAddressCreateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  deviceAddress: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x8
  }),
});
/** VkPhysicalDeviceImageViewImageFormatInfoEXT **/
class VkPhysicalDeviceImageViewImageFormatInfoEXT {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    this.sType = 0x3B9D6210;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.imageViewType !== void 0) this.imageViewType = opts.imageViewType;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceImageViewImageFormatInfoEXT.pNext' isn't allowed to be filled");
  }
  get imageViewType() {
    return this.memoryViewInt32[0x4];
  }
  set imageViewType(value) {
    this.memoryViewInt32[0x4] = value;
  }
  
};

VkPhysicalDeviceImageViewImageFormatInfoEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceImageViewImageFormatInfoEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceImageViewImageFormatInfoEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceImageViewImageFormatInfoEXT"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPhysicalDeviceImageViewImageFormatInfoEXT.byteLength = 0x18;

VkPhysicalDeviceImageViewImageFormatInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  imageViewType: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkFilterCubicImageViewImageFormatPropertiesEXT **/
class VkFilterCubicImageViewImageFormatPropertiesEXT {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);
      this.memoryViewUint32 = new Uint32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    
    
    this.sType = 0x3B9D6211;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkFilterCubicImageViewImageFormatPropertiesEXT.pNext' isn't allowed to be filled");
  }
  get filterCubic() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  get filterCubicMinmax() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  
};

VkFilterCubicImageViewImageFormatPropertiesEXT.prototype.flush = function flush() {
  //console.log(`Flushing: "VkFilterCubicImageViewImageFormatPropertiesEXT"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkFilterCubicImageViewImageFormatPropertiesEXT.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkFilterCubicImageViewImageFormatPropertiesEXT"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x18), 0x0);
  
  
};

VkFilterCubicImageViewImageFormatPropertiesEXT.byteLength = 0x18;

VkFilterCubicImageViewImageFormatPropertiesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  filterCubic: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  filterCubicMinmax: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceCooperativeMatrixFeaturesNV **/
class VkPhysicalDeviceCooperativeMatrixFeaturesNV {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    this.sType = 0x3B9E96A8;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.cooperativeMatrix !== void 0) this.cooperativeMatrix = opts.cooperativeMatrix;
      if (opts.cooperativeMatrixRobustBufferAccess !== void 0) this.cooperativeMatrixRobustBufferAccess = opts.cooperativeMatrixRobustBufferAccess;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceCooperativeMatrixFeaturesNV.pNext' isn't allowed to be filled");
  }
  get cooperativeMatrix() {
    return this.memoryViewUint32[0x4] !== 0;
  }
  set cooperativeMatrix(value) {
    this.memoryViewUint32[0x4] = value | 0;
  }
  get cooperativeMatrixRobustBufferAccess() {
    return this.memoryViewUint32[0x5] !== 0;
  }
  set cooperativeMatrixRobustBufferAccess(value) {
    this.memoryViewUint32[0x5] = value | 0;
  }
  
};

VkPhysicalDeviceCooperativeMatrixFeaturesNV.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceCooperativeMatrixFeaturesNV"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceCooperativeMatrixFeaturesNV.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceCooperativeMatrixFeaturesNV"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkPhysicalDeviceCooperativeMatrixFeaturesNV.byteLength = 0x18;

VkPhysicalDeviceCooperativeMatrixFeaturesNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  cooperativeMatrix: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  cooperativeMatrixRobustBufferAccess: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
});
/** VkPhysicalDeviceCooperativeMatrixPropertiesNV **/
class VkPhysicalDeviceCooperativeMatrixPropertiesNV {
  constructor(opts) {
    this.memoryBuffer = (typeof opts === "object" ? opts.$memoryBuffer : null) || new ArrayBuffer(0x18);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    if (typeof opts === "object") {
      this.memoryViewInt32 = new Int32Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x4, (opts.$memoryOffset + 0x18) / 0x4);
      this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer).subarray(opts.$memoryOffset / 0x8, (opts.$memoryOffset + 0x18) / 0x8);

    }

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    if (typeof opts === "object") this.memoryAddress += BigInt(opts.$memoryOffset);
    this._pNext = null;
    
    this.sType = 0x3B9E96AA;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkPhysicalDeviceCooperativeMatrixPropertiesNV.pNext' isn't allowed to be filled");
  }
  get cooperativeMatrixSupportedStages() {
    return this.memoryViewInt32[0x4];
  }
  
};

VkPhysicalDeviceCooperativeMatrixPropertiesNV.prototype.flush = function flush() {
  //console.log(`Flushing: "VkPhysicalDeviceCooperativeMatrixPropertiesNV"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkPhysicalDeviceCooperativeMatrixPropertiesNV.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x18);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkPhysicalDeviceCooperativeMatrixPropertiesNV"`, this.memoryAddress, memoryAddress);
  dstView.set(srcView.subarray(0x0, 0x18), 0x0);
  
  
};

VkPhysicalDeviceCooperativeMatrixPropertiesNV.byteLength = 0x18;

VkPhysicalDeviceCooperativeMatrixPropertiesNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  cooperativeMatrixSupportedStages: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
});
/** VkCooperativeMatrixPropertiesNV **/
class VkCooperativeMatrixPropertiesNV {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x30);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    
    this._pNext = null;
    
    
    
    
    
    
    
    
    this.sType = 0x3B9E96A9;
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.MSize !== void 0) this.MSize = opts.MSize;
      if (opts.NSize !== void 0) this.NSize = opts.NSize;
      if (opts.KSize !== void 0) this.KSize = opts.KSize;
      if (opts.AType !== void 0) this.AType = opts.AType;
      if (opts.BType !== void 0) this.BType = opts.BType;
      if (opts.CType !== void 0) this.CType = opts.CType;
      if (opts.DType !== void 0) this.DType = opts.DType;
      if (opts.scope !== void 0) this.scope = opts.scope;
      
    }
  }
  get sType() {
    return this.memoryViewInt32[0x0];
  }
  set sType(value) {
    this.memoryViewInt32[0x0] = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    throw new TypeError("'VkCooperativeMatrixPropertiesNV.pNext' isn't allowed to be filled");
  }
  get MSize() {
    return this.memoryViewUint32[0x4];
  }
  set MSize(value) {
    this.memoryViewUint32[0x4] = value;
  }
  get NSize() {
    return this.memoryViewUint32[0x5];
  }
  set NSize(value) {
    this.memoryViewUint32[0x5] = value;
  }
  get KSize() {
    return this.memoryViewUint32[0x6];
  }
  set KSize(value) {
    this.memoryViewUint32[0x6] = value;
  }
  get AType() {
    return this.memoryViewInt32[0x7];
  }
  set AType(value) {
    this.memoryViewInt32[0x7] = value;
  }
  get BType() {
    return this.memoryViewInt32[0x8];
  }
  set BType(value) {
    this.memoryViewInt32[0x8] = value;
  }
  get CType() {
    return this.memoryViewInt32[0x9];
  }
  set CType(value) {
    this.memoryViewInt32[0x9] = value;
  }
  get DType() {
    return this.memoryViewInt32[0xA];
  }
  set DType(value) {
    this.memoryViewInt32[0xA] = value;
  }
  get scope() {
    return this.memoryViewInt32[0xB];
  }
  set scope(value) {
    this.memoryViewInt32[0xB] = value;
  }
  
};

VkCooperativeMatrixPropertiesNV.prototype.flush = function flush() {
  //console.log(`Flushing: "VkCooperativeMatrixPropertiesNV"`);
  
  
  if (this._pNext !== null) {
    if (!this._pNext.flush()) return false;
  }
  
  return true;
};

VkCooperativeMatrixPropertiesNV.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x30);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkCooperativeMatrixPropertiesNV"`, this.memoryAddress, memoryAddress);
  
  
  
};

VkCooperativeMatrixPropertiesNV.byteLength = 0x30;

VkCooperativeMatrixPropertiesNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x4
  }),
  pNext: Object.freeze({
    byteOffset: 0x8,
    byteLength: 0x8
  }),
  MSize: Object.freeze({
    byteOffset: 0x10,
    byteLength: 0x4
  }),
  NSize: Object.freeze({
    byteOffset: 0x14,
    byteLength: 0x4
  }),
  KSize: Object.freeze({
    byteOffset: 0x18,
    byteLength: 0x4
  }),
  AType: Object.freeze({
    byteOffset: 0x1C,
    byteLength: 0x4
  }),
  BType: Object.freeze({
    byteOffset: 0x20,
    byteLength: 0x4
  }),
  CType: Object.freeze({
    byteOffset: 0x24,
    byteLength: 0x4
  }),
  DType: Object.freeze({
    byteOffset: 0x28,
    byteLength: 0x4
  }),
  scope: Object.freeze({
    byteOffset: 0x2C,
    byteLength: 0x4
  }),
});
/** VkClearColorValue **/
class VkClearColorValue {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x10);
    this.memoryViewFloat32 = new Float32Array(this.memoryBuffer);
    this.memoryViewInt32 = new Int32Array(this.memoryBuffer);
    this.memoryViewUint32 = new Uint32Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this._float32 = [...Array(4)].fill(0x0);
    this._int32 = [...Array(4)].fill(0x0);
    this._uint32 = [...Array(4)].fill(0x0);
    
    if (typeof opts === "object") {
      if (opts.float32 !== void 0) this.float32 = opts.float32;
      if (opts.int32 !== void 0) this.int32 = opts.int32;
      if (opts.uint32 !== void 0) this.uint32 = opts.uint32;
      
    }
  }
  get float32() {
    return this._float32;
  }
  set float32(value) {
    if (value !== null && value.constructor === Array) {
      this._float32 = value;
    } else if (value === null) {
      this._float32 = null;
    } else {
      throw new TypeError("Invalid type for 'VkClearColorValue.float32': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get int32() {
    return this._int32;
  }
  set int32(value) {
    if (value !== null && value.constructor === Array) {
      this._int32 = value;
    } else if (value === null) {
      this._int32 = null;
    } else {
      throw new TypeError("Invalid type for 'VkClearColorValue.int32': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  get uint32() {
    return this._uint32;
  }
  set uint32(value) {
    if (value !== null && value.constructor === Array) {
      this._uint32 = value;
    } else if (value === null) {
      this._uint32 = null;
    } else {
      throw new TypeError("Invalid type for 'VkClearColorValue.uint32': Expected 'Array' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkClearColorValue.prototype.flush = function flush() {
  //console.log(`Flushing: "VkClearColorValue"`);
  
  
  if (this._float32 !== null) {
    let array = this._float32;
    // validate length
    if (array.length !== 4) {
      throw new RangeError("Invalid array length, expected length of '4' for 'VkClearColorValue.float32'");
      return false;
    }
    // validate type
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== Number) {
        throw new TypeError("Invalid type for 'VkClearColorValue.float32[" + ii + "]': Expected 'Number' but got '" + array[ii].constructor.name + "'");
        return false;
      }
    };
    for (let ii = 0; ii < array.length; ++ii) {
      this.memoryViewFloat32[0x0] = array[ii];
    };
  } else {
    this.memoryViewFloat32[0x0] = 0x0;
  }
  
  
  if (this._int32 !== null) {
    let array = this._int32;
    // validate length
    if (array.length !== 4) {
      throw new RangeError("Invalid array length, expected length of '4' for 'VkClearColorValue.int32'");
      return false;
    }
    // validate type
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== Number) {
        throw new TypeError("Invalid type for 'VkClearColorValue.int32[" + ii + "]': Expected 'Number' but got '" + array[ii].constructor.name + "'");
        return false;
      }
    };
    for (let ii = 0; ii < array.length; ++ii) {
      this.memoryViewInt32[0x0] = array[ii];
    };
  } else {
    this.memoryViewInt32[0x0] = 0x0;
  }
  
  
  if (this._uint32 !== null) {
    let array = this._uint32;
    // validate length
    if (array.length !== 4) {
      throw new RangeError("Invalid array length, expected length of '4' for 'VkClearColorValue.uint32'");
      return false;
    }
    // validate type
    for (let ii = 0; ii < array.length; ++ii) {
      if (array[ii].constructor !== Number) {
        throw new TypeError("Invalid type for 'VkClearColorValue.uint32[" + ii + "]': Expected 'Number' but got '" + array[ii].constructor.name + "'");
        return false;
      }
    };
    for (let ii = 0; ii < array.length; ++ii) {
      this.memoryViewUint32[0x0] = array[ii];
    };
  } else {
    this.memoryViewUint32[0x0] = 0x0;
  }
  
  return true;
};

VkClearColorValue.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x10);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkClearColorValue"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
  
  
};

VkClearColorValue.byteLength = 0x10;

VkClearColorValue.memoryLayout = Object.freeze({
  float32: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x10
  }),
  int32: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x10
  }),
  uint32: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x10
  }),
});
/** VkClearValue **/
class VkClearValue {
  constructor(opts) {
    this.memoryBuffer = new ArrayBuffer(0x10);
    this.memoryViewBigInt64 = new BigInt64Array(this.memoryBuffer);

    this.memoryAddress = getAddressFromArrayBuffer(this.memoryBuffer);
    this._color = new VkClearColorValue({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x0 });
    this._depthStencil = new VkClearDepthStencilValue({ $memoryBuffer: this.memoryBuffer, $memoryOffset: 0x0 });
    
    if (typeof opts === "object") {
      if (opts.color !== void 0) this.color = opts.color;
      if (opts.depthStencil !== void 0) this.depthStencil = opts.depthStencil;
      
    }
  }
  get color() {
    return this._color;
  }
  set color(value) {
    if (value !== null && value.constructor === VkClearColorValue) {
      value.flush();
      this._color = value;
      this.memoryViewBigInt64[0x0] = value.memoryAddress;
      
    } else if (value === null) {
      this._color = null;
      this.memoryViewBigInt64[0x0] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkClearValue.color': Expected 'VkClearColorValue' but got '" + value.constructor.name + "'");
    }
  }
  get depthStencil() {
    return this._depthStencil;
  }
  set depthStencil(value) {
    if (value !== null && value.constructor === VkClearDepthStencilValue) {
      value.flush();
      this._depthStencil = value;
      this.memoryViewBigInt64[0x0] = value.memoryAddress;
      
    } else if (value === null) {
      this._depthStencil = null;
      this.memoryViewBigInt64[0x0] = BI0;
    } else {
      throw new TypeError("Invalid type for 'VkClearValue.depthStencil': Expected 'VkClearDepthStencilValue' but got '" + value.constructor.name + "'");
    }
  }
  
};

VkClearValue.prototype.flush = function flush() {
  //console.log(`Flushing: "VkClearValue"`);
  
  
  
  
  
  return true;
};

VkClearValue.prototype.reflect = function reflect(memoryAddress) {
  let srcBuffer = getArrayBufferFromAddress(memoryAddress, 0x10);
  let dstBuffer = this.memoryBuffer;
  let srcView = new Uint8Array(srcBuffer);
  let dstView = new Uint8Array(dstBuffer);
  //console.log(`Reflect: "VkClearValue"`, this.memoryAddress, memoryAddress);
  
  
  
  
  
};

VkClearValue.byteLength = 0x10;

VkClearValue.memoryLayout = Object.freeze({
  color: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x10
  }),
  depthStencil: Object.freeze({
    byteOffset: 0x0,
    byteLength: 0x8
  }),
});

module.exports = {
  API_Constants,
  VkImageLayout,
  VkAttachmentLoadOp,
  VkAttachmentStoreOp,
  VkImageType,
  VkImageTiling,
  VkImageViewType,
  VkCommandBufferLevel,
  VkComponentSwizzle,
  VkDescriptorType,
  VkQueryType,
  VkBorderColor,
  VkPipelineBindPoint,
  VkPipelineCacheHeaderVersion,
  VkPrimitiveTopology,
  VkSharingMode,
  VkIndexType,
  VkFilter,
  VkSamplerMipmapMode,
  VkSamplerAddressMode,
  VkCompareOp,
  VkPolygonMode,
  VkFrontFace,
  VkBlendFactor,
  VkBlendOp,
  VkStencilOp,
  VkLogicOp,
  VkInternalAllocationType,
  VkSystemAllocationScope,
  VkPhysicalDeviceType,
  VkVertexInputRate,
  VkFormat,
  VkStructureType,
  VkSubpassContents,
  VkResult,
  VkDynamicState,
  VkDescriptorUpdateTemplateType,
  VkObjectType,
  VkPresentModeKHR,
  VkColorSpaceKHR,
  VkTimeDomainEXT,
  VkDebugReportObjectTypeEXT,
  VkRasterizationOrderAMD,
  VkValidationCheckEXT,
  VkValidationFeatureEnableEXT,
  VkValidationFeatureDisableEXT,
  VkIndirectCommandsTokenTypeNVX,
  VkObjectEntryTypeNVX,
  VkDisplayPowerStateEXT,
  VkDeviceEventTypeEXT,
  VkDisplayEventTypeEXT,
  VkViewportCoordinateSwizzleNV,
  VkDiscardRectangleModeEXT,
  VkPointClippingBehavior,
  VkSamplerReductionModeEXT,
  VkTessellationDomainOrigin,
  VkSamplerYcbcrModelConversion,
  VkSamplerYcbcrRange,
  VkChromaLocation,
  VkBlendOverlapEXT,
  VkCoverageModulationModeNV,
  VkValidationCacheHeaderVersionEXT,
  VkShaderInfoTypeAMD,
  VkQueueGlobalPriorityEXT,
  VkConservativeRasterizationModeEXT,
  VkVendorId,
  VkDriverIdKHR,
  VkShadingRatePaletteEntryNV,
  VkCoarseSampleOrderTypeNV,
  VkCopyAccelerationStructureModeNV,
  VkAccelerationStructureTypeNV,
  VkGeometryTypeNV,
  VkAccelerationStructureMemoryRequirementsTypeNV,
  VkRayTracingShaderGroupTypeNV,
  VkMemoryOverallocationBehaviorAMD,
  VkScopeNV,
  VkComponentTypeNV,
  VkCullModeFlagBits,
  VkQueueFlagBits,
  VkRenderPassCreateFlagBits,
  VkDeviceQueueCreateFlagBits,
  VkMemoryPropertyFlagBits,
  VkMemoryHeapFlagBits,
  VkAccessFlagBits,
  VkBufferUsageFlagBits,
  VkBufferCreateFlagBits,
  VkShaderStageFlagBits,
  VkImageUsageFlagBits,
  VkImageCreateFlagBits,
  VkImageViewCreateFlagBits,
  VkSamplerCreateFlagBits,
  VkPipelineCreateFlagBits,
  VkColorComponentFlagBits,
  VkFenceCreateFlagBits,
  VkFormatFeatureFlagBits,
  VkQueryControlFlagBits,
  VkQueryResultFlagBits,
  VkCommandBufferUsageFlagBits,
  VkQueryPipelineStatisticFlagBits,
  VkImageAspectFlagBits,
  VkSparseImageFormatFlagBits,
  VkSparseMemoryBindFlagBits,
  VkPipelineStageFlagBits,
  VkCommandPoolCreateFlagBits,
  VkCommandPoolResetFlagBits,
  VkCommandBufferResetFlagBits,
  VkSampleCountFlagBits,
  VkAttachmentDescriptionFlagBits,
  VkStencilFaceFlagBits,
  VkDescriptorPoolCreateFlagBits,
  VkDependencyFlagBits,
  VkDisplayPlaneAlphaFlagBitsKHR,
  VkCompositeAlphaFlagBitsKHR,
  VkSurfaceTransformFlagBitsKHR,
  VkDebugReportFlagBitsEXT,
  VkExternalMemoryHandleTypeFlagBitsNV,
  VkExternalMemoryFeatureFlagBitsNV,
  VkSubgroupFeatureFlagBits,
  VkIndirectCommandsLayoutUsageFlagBitsNVX,
  VkObjectEntryUsageFlagBitsNVX,
  VkDescriptorSetLayoutCreateFlagBits,
  VkExternalMemoryHandleTypeFlagBits,
  VkExternalMemoryFeatureFlagBits,
  VkExternalSemaphoreHandleTypeFlagBits,
  VkExternalSemaphoreFeatureFlagBits,
  VkSemaphoreImportFlagBits,
  VkExternalFenceHandleTypeFlagBits,
  VkExternalFenceFeatureFlagBits,
  VkFenceImportFlagBits,
  VkSurfaceCounterFlagBitsEXT,
  VkPeerMemoryFeatureFlagBits,
  VkMemoryAllocateFlagBits,
  VkDeviceGroupPresentModeFlagBitsKHR,
  VkSwapchainCreateFlagBitsKHR,
  VkSubpassDescriptionFlagBits,
  VkDebugUtilsMessageSeverityFlagBitsEXT,
  VkDebugUtilsMessageTypeFlagBitsEXT,
  VkDescriptorBindingFlagBitsEXT,
  VkConditionalRenderingFlagBitsEXT,
  VkResolveModeFlagBitsKHR,
  VkGeometryInstanceFlagBitsNV,
  VkGeometryFlagBitsNV,
  VkBuildAccelerationStructureFlagBitsNV,
  VkInstance,
  VkPhysicalDevice,
  VkDevice,
  VkQueue,
  VkCommandBuffer,
  VkDeviceMemory,
  VkCommandPool,
  VkBuffer,
  VkBufferView,
  VkImage,
  VkImageView,
  VkShaderModule,
  VkPipeline,
  VkPipelineLayout,
  VkSampler,
  VkDescriptorSet,
  VkDescriptorSetLayout,
  VkDescriptorPool,
  VkFence,
  VkSemaphore,
  VkEvent,
  VkQueryPool,
  VkFramebuffer,
  VkRenderPass,
  VkPipelineCache,
  VkObjectTableNVX,
  VkIndirectCommandsLayoutNVX,
  VkDescriptorUpdateTemplate,
  VkSamplerYcbcrConversion,
  VkValidationCacheEXT,
  VkAccelerationStructureNV,
  VkDisplayKHR,
  VkDisplayModeKHR,
  VkSurfaceKHR,
  VkSwapchainKHR,
  VkDebugReportCallbackEXT,
  VkDebugUtilsMessengerEXT,
  VkBaseOutStructure,
  VkBaseInStructure,
  VkOffset2D,
  VkOffset3D,
  VkExtent2D,
  VkExtent3D,
  VkViewport,
  VkRect2D,
  VkClearRect,
  VkComponentMapping,
  VkPhysicalDeviceProperties,
  VkExtensionProperties,
  VkLayerProperties,
  VkApplicationInfo,
  VkAllocationCallbacks,
  VkDeviceQueueCreateInfo,
  VkDeviceCreateInfo,
  VkInstanceCreateInfo,
  VkQueueFamilyProperties,
  VkPhysicalDeviceMemoryProperties,
  VkMemoryAllocateInfo,
  VkMemoryRequirements,
  VkSparseImageFormatProperties,
  VkSparseImageMemoryRequirements,
  VkMemoryType,
  VkMemoryHeap,
  VkMappedMemoryRange,
  VkFormatProperties,
  VkImageFormatProperties,
  VkDescriptorBufferInfo,
  VkDescriptorImageInfo,
  VkWriteDescriptorSet,
  VkCopyDescriptorSet,
  VkBufferCreateInfo,
  VkBufferViewCreateInfo,
  VkImageSubresource,
  VkImageSubresourceLayers,
  VkImageSubresourceRange,
  VkMemoryBarrier,
  VkBufferMemoryBarrier,
  VkImageMemoryBarrier,
  VkImageCreateInfo,
  VkSubresourceLayout,
  VkImageViewCreateInfo,
  VkBufferCopy,
  VkSparseMemoryBind,
  VkSparseImageMemoryBind,
  VkSparseBufferMemoryBindInfo,
  VkSparseImageOpaqueMemoryBindInfo,
  VkSparseImageMemoryBindInfo,
  VkBindSparseInfo,
  VkImageCopy,
  VkImageBlit,
  VkBufferImageCopy,
  VkImageResolve,
  VkShaderModuleCreateInfo,
  VkDescriptorSetLayoutBinding,
  VkDescriptorSetLayoutCreateInfo,
  VkDescriptorPoolSize,
  VkDescriptorPoolCreateInfo,
  VkDescriptorSetAllocateInfo,
  VkSpecializationMapEntry,
  VkSpecializationInfo,
  VkPipelineShaderStageCreateInfo,
  VkComputePipelineCreateInfo,
  VkVertexInputBindingDescription,
  VkVertexInputAttributeDescription,
  VkPipelineVertexInputStateCreateInfo,
  VkPipelineInputAssemblyStateCreateInfo,
  VkPipelineTessellationStateCreateInfo,
  VkPipelineViewportStateCreateInfo,
  VkPipelineRasterizationStateCreateInfo,
  VkPipelineMultisampleStateCreateInfo,
  VkPipelineColorBlendAttachmentState,
  VkPipelineColorBlendStateCreateInfo,
  VkPipelineDynamicStateCreateInfo,
  VkStencilOpState,
  VkPipelineDepthStencilStateCreateInfo,
  VkGraphicsPipelineCreateInfo,
  VkPipelineCacheCreateInfo,
  VkPushConstantRange,
  VkPipelineLayoutCreateInfo,
  VkSamplerCreateInfo,
  VkCommandPoolCreateInfo,
  VkCommandBufferAllocateInfo,
  VkCommandBufferInheritanceInfo,
  VkCommandBufferBeginInfo,
  VkRenderPassBeginInfo,
  VkClearDepthStencilValue,
  VkClearAttachment,
  VkAttachmentDescription,
  VkAttachmentReference,
  VkSubpassDescription,
  VkSubpassDependency,
  VkRenderPassCreateInfo,
  VkEventCreateInfo,
  VkFenceCreateInfo,
  VkPhysicalDeviceFeatures,
  VkPhysicalDeviceSparseProperties,
  VkPhysicalDeviceLimits,
  VkSemaphoreCreateInfo,
  VkQueryPoolCreateInfo,
  VkFramebufferCreateInfo,
  VkDrawIndirectCommand,
  VkDrawIndexedIndirectCommand,
  VkDispatchIndirectCommand,
  VkSubmitInfo,
  VkDisplayPropertiesKHR,
  VkDisplayPlanePropertiesKHR,
  VkDisplayModeParametersKHR,
  VkDisplayModePropertiesKHR,
  VkDisplayModeCreateInfoKHR,
  VkDisplayPlaneCapabilitiesKHR,
  VkDisplaySurfaceCreateInfoKHR,
  VkDisplayPresentInfoKHR,
  VkSurfaceCapabilitiesKHR,
  VkWin32SurfaceCreateInfoKHR,
  VkSurfaceFormatKHR,
  VkSwapchainCreateInfoKHR,
  VkPresentInfoKHR,
  VkDebugReportCallbackCreateInfoEXT,
  VkValidationFlagsEXT,
  VkValidationFeaturesEXT,
  VkPipelineRasterizationStateRasterizationOrderAMD,
  VkDebugMarkerObjectNameInfoEXT,
  VkDebugMarkerObjectTagInfoEXT,
  VkDebugMarkerMarkerInfoEXT,
  VkDedicatedAllocationImageCreateInfoNV,
  VkDedicatedAllocationBufferCreateInfoNV,
  VkDedicatedAllocationMemoryAllocateInfoNV,
  VkExternalImageFormatPropertiesNV,
  VkExternalMemoryImageCreateInfoNV,
  VkExportMemoryAllocateInfoNV,
  VkImportMemoryWin32HandleInfoNV,
  VkExportMemoryWin32HandleInfoNV,
  VkWin32KeyedMutexAcquireReleaseInfoNV,
  VkDeviceGeneratedCommandsFeaturesNVX,
  VkDeviceGeneratedCommandsLimitsNVX,
  VkIndirectCommandsTokenNVX,
  VkIndirectCommandsLayoutTokenNVX,
  VkIndirectCommandsLayoutCreateInfoNVX,
  VkCmdProcessCommandsInfoNVX,
  VkCmdReserveSpaceForCommandsInfoNVX,
  VkObjectTableCreateInfoNVX,
  VkObjectTableEntryNVX,
  VkObjectTablePipelineEntryNVX,
  VkObjectTableDescriptorSetEntryNVX,
  VkObjectTableVertexBufferEntryNVX,
  VkObjectTableIndexBufferEntryNVX,
  VkObjectTablePushConstantEntryNVX,
  VkPhysicalDeviceFeatures2,
  VkPhysicalDeviceFeatures2KHR,
  VkPhysicalDeviceProperties2,
  VkPhysicalDeviceProperties2KHR,
  VkFormatProperties2,
  VkFormatProperties2KHR,
  VkImageFormatProperties2,
  VkImageFormatProperties2KHR,
  VkPhysicalDeviceImageFormatInfo2,
  VkPhysicalDeviceImageFormatInfo2KHR,
  VkQueueFamilyProperties2,
  VkQueueFamilyProperties2KHR,
  VkPhysicalDeviceMemoryProperties2,
  VkPhysicalDeviceMemoryProperties2KHR,
  VkSparseImageFormatProperties2,
  VkSparseImageFormatProperties2KHR,
  VkPhysicalDeviceSparseImageFormatInfo2,
  VkPhysicalDeviceSparseImageFormatInfo2KHR,
  VkPhysicalDevicePushDescriptorPropertiesKHR,
  VkConformanceVersionKHR,
  VkPhysicalDeviceDriverPropertiesKHR,
  VkPresentRegionsKHR,
  VkPresentRegionKHR,
  VkRectLayerKHR,
  VkPhysicalDeviceVariablePointerFeatures,
  VkPhysicalDeviceVariablePointerFeaturesKHR,
  VkExternalMemoryProperties,
  VkExternalMemoryPropertiesKHR,
  VkPhysicalDeviceExternalImageFormatInfo,
  VkPhysicalDeviceExternalImageFormatInfoKHR,
  VkExternalImageFormatProperties,
  VkExternalImageFormatPropertiesKHR,
  VkPhysicalDeviceExternalBufferInfo,
  VkPhysicalDeviceExternalBufferInfoKHR,
  VkExternalBufferProperties,
  VkExternalBufferPropertiesKHR,
  VkPhysicalDeviceIDProperties,
  VkPhysicalDeviceIDPropertiesKHR,
  VkExternalMemoryImageCreateInfo,
  VkExternalMemoryImageCreateInfoKHR,
  VkExternalMemoryBufferCreateInfo,
  VkExternalMemoryBufferCreateInfoKHR,
  VkExportMemoryAllocateInfo,
  VkExportMemoryAllocateInfoKHR,
  VkImportMemoryWin32HandleInfoKHR,
  VkExportMemoryWin32HandleInfoKHR,
  VkMemoryWin32HandlePropertiesKHR,
  VkMemoryGetWin32HandleInfoKHR,
  VkImportMemoryFdInfoKHR,
  VkMemoryFdPropertiesKHR,
  VkMemoryGetFdInfoKHR,
  VkWin32KeyedMutexAcquireReleaseInfoKHR,
  VkPhysicalDeviceExternalSemaphoreInfo,
  VkPhysicalDeviceExternalSemaphoreInfoKHR,
  VkExternalSemaphoreProperties,
  VkExternalSemaphorePropertiesKHR,
  VkExportSemaphoreCreateInfo,
  VkExportSemaphoreCreateInfoKHR,
  VkImportSemaphoreWin32HandleInfoKHR,
  VkExportSemaphoreWin32HandleInfoKHR,
  VkD3D12FenceSubmitInfoKHR,
  VkSemaphoreGetWin32HandleInfoKHR,
  VkImportSemaphoreFdInfoKHR,
  VkSemaphoreGetFdInfoKHR,
  VkPhysicalDeviceExternalFenceInfo,
  VkPhysicalDeviceExternalFenceInfoKHR,
  VkExternalFenceProperties,
  VkExternalFencePropertiesKHR,
  VkExportFenceCreateInfo,
  VkExportFenceCreateInfoKHR,
  VkImportFenceWin32HandleInfoKHR,
  VkExportFenceWin32HandleInfoKHR,
  VkFenceGetWin32HandleInfoKHR,
  VkImportFenceFdInfoKHR,
  VkFenceGetFdInfoKHR,
  VkPhysicalDeviceMultiviewFeatures,
  VkPhysicalDeviceMultiviewFeaturesKHR,
  VkPhysicalDeviceMultiviewProperties,
  VkPhysicalDeviceMultiviewPropertiesKHR,
  VkRenderPassMultiviewCreateInfo,
  VkRenderPassMultiviewCreateInfoKHR,
  VkSurfaceCapabilities2EXT,
  VkDisplayPowerInfoEXT,
  VkDeviceEventInfoEXT,
  VkDisplayEventInfoEXT,
  VkSwapchainCounterCreateInfoEXT,
  VkPhysicalDeviceGroupProperties,
  VkPhysicalDeviceGroupPropertiesKHR,
  VkMemoryAllocateFlagsInfo,
  VkMemoryAllocateFlagsInfoKHR,
  VkBindBufferMemoryInfo,
  VkBindBufferMemoryInfoKHR,
  VkBindBufferMemoryDeviceGroupInfo,
  VkBindBufferMemoryDeviceGroupInfoKHR,
  VkBindImageMemoryInfo,
  VkBindImageMemoryInfoKHR,
  VkBindImageMemoryDeviceGroupInfo,
  VkBindImageMemoryDeviceGroupInfoKHR,
  VkDeviceGroupRenderPassBeginInfo,
  VkDeviceGroupRenderPassBeginInfoKHR,
  VkDeviceGroupCommandBufferBeginInfo,
  VkDeviceGroupCommandBufferBeginInfoKHR,
  VkDeviceGroupSubmitInfo,
  VkDeviceGroupSubmitInfoKHR,
  VkDeviceGroupBindSparseInfo,
  VkDeviceGroupBindSparseInfoKHR,
  VkDeviceGroupPresentCapabilitiesKHR,
  VkImageSwapchainCreateInfoKHR,
  VkBindImageMemorySwapchainInfoKHR,
  VkAcquireNextImageInfoKHR,
  VkDeviceGroupPresentInfoKHR,
  VkDeviceGroupDeviceCreateInfo,
  VkDeviceGroupDeviceCreateInfoKHR,
  VkDeviceGroupSwapchainCreateInfoKHR,
  VkDescriptorUpdateTemplateEntry,
  VkDescriptorUpdateTemplateEntryKHR,
  VkDescriptorUpdateTemplateCreateInfo,
  VkDescriptorUpdateTemplateCreateInfoKHR,
  VkXYColorEXT,
  VkHdrMetadataEXT,
  VkRefreshCycleDurationGOOGLE,
  VkPastPresentationTimingGOOGLE,
  VkPresentTimesInfoGOOGLE,
  VkPresentTimeGOOGLE,
  VkViewportWScalingNV,
  VkPipelineViewportWScalingStateCreateInfoNV,
  VkViewportSwizzleNV,
  VkPipelineViewportSwizzleStateCreateInfoNV,
  VkPhysicalDeviceDiscardRectanglePropertiesEXT,
  VkPipelineDiscardRectangleStateCreateInfoEXT,
  VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX,
  VkInputAttachmentAspectReference,
  VkInputAttachmentAspectReferenceKHR,
  VkRenderPassInputAttachmentAspectCreateInfo,
  VkRenderPassInputAttachmentAspectCreateInfoKHR,
  VkPhysicalDeviceSurfaceInfo2KHR,
  VkSurfaceCapabilities2KHR,
  VkSurfaceFormat2KHR,
  VkDisplayProperties2KHR,
  VkDisplayPlaneProperties2KHR,
  VkDisplayModeProperties2KHR,
  VkDisplayPlaneInfo2KHR,
  VkDisplayPlaneCapabilities2KHR,
  VkSharedPresentSurfaceCapabilitiesKHR,
  VkPhysicalDevice16BitStorageFeatures,
  VkPhysicalDevice16BitStorageFeaturesKHR,
  VkPhysicalDeviceSubgroupProperties,
  VkBufferMemoryRequirementsInfo2,
  VkBufferMemoryRequirementsInfo2KHR,
  VkImageMemoryRequirementsInfo2,
  VkImageMemoryRequirementsInfo2KHR,
  VkImageSparseMemoryRequirementsInfo2,
  VkImageSparseMemoryRequirementsInfo2KHR,
  VkMemoryRequirements2,
  VkMemoryRequirements2KHR,
  VkSparseImageMemoryRequirements2,
  VkSparseImageMemoryRequirements2KHR,
  VkPhysicalDevicePointClippingProperties,
  VkPhysicalDevicePointClippingPropertiesKHR,
  VkMemoryDedicatedRequirements,
  VkMemoryDedicatedRequirementsKHR,
  VkMemoryDedicatedAllocateInfo,
  VkMemoryDedicatedAllocateInfoKHR,
  VkImageViewUsageCreateInfo,
  VkImageViewUsageCreateInfoKHR,
  VkPipelineTessellationDomainOriginStateCreateInfo,
  VkPipelineTessellationDomainOriginStateCreateInfoKHR,
  VkSamplerYcbcrConversionInfo,
  VkSamplerYcbcrConversionInfoKHR,
  VkSamplerYcbcrConversionCreateInfo,
  VkSamplerYcbcrConversionCreateInfoKHR,
  VkBindImagePlaneMemoryInfo,
  VkBindImagePlaneMemoryInfoKHR,
  VkImagePlaneMemoryRequirementsInfo,
  VkImagePlaneMemoryRequirementsInfoKHR,
  VkPhysicalDeviceSamplerYcbcrConversionFeatures,
  VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR,
  VkSamplerYcbcrConversionImageFormatProperties,
  VkSamplerYcbcrConversionImageFormatPropertiesKHR,
  VkTextureLODGatherFormatPropertiesAMD,
  VkConditionalRenderingBeginInfoEXT,
  VkProtectedSubmitInfo,
  VkPhysicalDeviceProtectedMemoryFeatures,
  VkPhysicalDeviceProtectedMemoryProperties,
  VkDeviceQueueInfo2,
  VkPipelineCoverageToColorStateCreateInfoNV,
  VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT,
  VkSampleLocationEXT,
  VkSampleLocationsInfoEXT,
  VkAttachmentSampleLocationsEXT,
  VkSubpassSampleLocationsEXT,
  VkRenderPassSampleLocationsBeginInfoEXT,
  VkPipelineSampleLocationsStateCreateInfoEXT,
  VkPhysicalDeviceSampleLocationsPropertiesEXT,
  VkMultisamplePropertiesEXT,
  VkSamplerReductionModeCreateInfoEXT,
  VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT,
  VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT,
  VkPipelineColorBlendAdvancedStateCreateInfoEXT,
  VkPhysicalDeviceInlineUniformBlockFeaturesEXT,
  VkPhysicalDeviceInlineUniformBlockPropertiesEXT,
  VkWriteDescriptorSetInlineUniformBlockEXT,
  VkDescriptorPoolInlineUniformBlockCreateInfoEXT,
  VkPipelineCoverageModulationStateCreateInfoNV,
  VkImageFormatListCreateInfoKHR,
  VkValidationCacheCreateInfoEXT,
  VkShaderModuleValidationCacheCreateInfoEXT,
  VkPhysicalDeviceMaintenance3Properties,
  VkPhysicalDeviceMaintenance3PropertiesKHR,
  VkDescriptorSetLayoutSupport,
  VkDescriptorSetLayoutSupportKHR,
  VkPhysicalDeviceShaderDrawParameterFeatures,
  VkPhysicalDeviceFloat16Int8FeaturesKHR,
  VkPhysicalDeviceFloatControlsPropertiesKHR,
  VkShaderResourceUsageAMD,
  VkShaderStatisticsInfoAMD,
  VkDeviceQueueGlobalPriorityCreateInfoEXT,
  VkDebugUtilsObjectNameInfoEXT,
  VkDebugUtilsObjectTagInfoEXT,
  VkDebugUtilsLabelEXT,
  VkDebugUtilsMessengerCreateInfoEXT,
  VkDebugUtilsMessengerCallbackDataEXT,
  VkImportMemoryHostPointerInfoEXT,
  VkMemoryHostPointerPropertiesEXT,
  VkPhysicalDeviceExternalMemoryHostPropertiesEXT,
  VkPhysicalDeviceConservativeRasterizationPropertiesEXT,
  VkCalibratedTimestampInfoEXT,
  VkPhysicalDeviceShaderCorePropertiesAMD,
  VkPipelineRasterizationConservativeStateCreateInfoEXT,
  VkPhysicalDeviceDescriptorIndexingFeaturesEXT,
  VkPhysicalDeviceDescriptorIndexingPropertiesEXT,
  VkDescriptorSetLayoutBindingFlagsCreateInfoEXT,
  VkDescriptorSetVariableDescriptorCountAllocateInfoEXT,
  VkDescriptorSetVariableDescriptorCountLayoutSupportEXT,
  VkAttachmentDescription2KHR,
  VkAttachmentReference2KHR,
  VkSubpassDescription2KHR,
  VkSubpassDependency2KHR,
  VkRenderPassCreateInfo2KHR,
  VkSubpassBeginInfoKHR,
  VkSubpassEndInfoKHR,
  VkVertexInputBindingDivisorDescriptionEXT,
  VkPipelineVertexInputDivisorStateCreateInfoEXT,
  VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT,
  VkPhysicalDevicePCIBusInfoPropertiesEXT,
  VkCommandBufferInheritanceConditionalRenderingInfoEXT,
  VkPhysicalDevice8BitStorageFeaturesKHR,
  VkPhysicalDeviceConditionalRenderingFeaturesEXT,
  VkPhysicalDeviceVulkanMemoryModelFeaturesKHR,
  VkPhysicalDeviceShaderAtomicInt64FeaturesKHR,
  VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT,
  VkQueueFamilyCheckpointPropertiesNV,
  VkCheckpointDataNV,
  VkPhysicalDeviceDepthStencilResolvePropertiesKHR,
  VkSubpassDescriptionDepthStencilResolveKHR,
  VkImageViewASTCDecodeModeEXT,
  VkPhysicalDeviceASTCDecodeFeaturesEXT,
  VkPhysicalDeviceTransformFeedbackFeaturesEXT,
  VkPhysicalDeviceTransformFeedbackPropertiesEXT,
  VkPipelineRasterizationStateStreamCreateInfoEXT,
  VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV,
  VkPipelineRepresentativeFragmentTestStateCreateInfoNV,
  VkPhysicalDeviceExclusiveScissorFeaturesNV,
  VkPipelineViewportExclusiveScissorStateCreateInfoNV,
  VkPhysicalDeviceCornerSampledImageFeaturesNV,
  VkPhysicalDeviceComputeShaderDerivativesFeaturesNV,
  VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV,
  VkPhysicalDeviceShaderImageFootprintFeaturesNV,
  VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV,
  VkShadingRatePaletteNV,
  VkPipelineViewportShadingRateImageStateCreateInfoNV,
  VkPhysicalDeviceShadingRateImageFeaturesNV,
  VkPhysicalDeviceShadingRateImagePropertiesNV,
  VkCoarseSampleLocationNV,
  VkCoarseSampleOrderCustomNV,
  VkPipelineViewportCoarseSampleOrderStateCreateInfoNV,
  VkPhysicalDeviceMeshShaderFeaturesNV,
  VkPhysicalDeviceMeshShaderPropertiesNV,
  VkDrawMeshTasksIndirectCommandNV,
  VkRayTracingShaderGroupCreateInfoNV,
  VkRayTracingPipelineCreateInfoNV,
  VkGeometryTrianglesNV,
  VkGeometryAABBNV,
  VkGeometryDataNV,
  VkGeometryNV,
  VkAccelerationStructureInfoNV,
  VkAccelerationStructureCreateInfoNV,
  VkBindAccelerationStructureMemoryInfoNV,
  VkWriteDescriptorSetAccelerationStructureNV,
  VkAccelerationStructureMemoryRequirementsInfoNV,
  VkPhysicalDeviceRayTracingPropertiesNV,
  VkDrmFormatModifierPropertiesListEXT,
  VkDrmFormatModifierPropertiesEXT,
  VkPhysicalDeviceImageDrmFormatModifierInfoEXT,
  VkImageDrmFormatModifierListCreateInfoEXT,
  VkImageDrmFormatModifierExplicitCreateInfoEXT,
  VkImageDrmFormatModifierPropertiesEXT,
  VkImageStencilUsageCreateInfoEXT,
  VkDeviceMemoryOverallocationCreateInfoAMD,
  VkPhysicalDeviceFragmentDensityMapFeaturesEXT,
  VkPhysicalDeviceFragmentDensityMapPropertiesEXT,
  VkRenderPassFragmentDensityMapCreateInfoEXT,
  VkPhysicalDeviceScalarBlockLayoutFeaturesEXT,
  VkPhysicalDeviceDepthClipEnableFeaturesEXT,
  VkPipelineRasterizationDepthClipStateCreateInfoEXT,
  VkPhysicalDeviceMemoryBudgetPropertiesEXT,
  VkPhysicalDeviceMemoryPriorityFeaturesEXT,
  VkMemoryPriorityAllocateInfoEXT,
  VkPhysicalDeviceBufferAddressFeaturesEXT,
  VkBufferDeviceAddressInfoEXT,
  VkBufferDeviceAddressCreateInfoEXT,
  VkPhysicalDeviceImageViewImageFormatInfoEXT,
  VkFilterCubicImageViewImageFormatPropertiesEXT,
  VkPhysicalDeviceCooperativeMatrixFeaturesNV,
  VkPhysicalDeviceCooperativeMatrixPropertiesNV,
  VkCooperativeMatrixPropertiesNV,
  VkClearColorValue,
  VkClearValue
};
